head	2.3;
access;
symbols;
locks; strict;
comment	@ * @;


2.3
date	2005.07.06.21.34.21;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.16.15.40.37;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.06.13.41.46;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.03.17.26.28;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.16.17.56.44;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.16.17.54.34;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.12.15.02.55;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.11.19.10.00;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.10.19.55.13;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.10.19.17.31;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.11.16.14.40;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.11.15.52.43;	author tom;	state Exp;
branches;
next	;


desc
@@


2.3
log
@remove decay correction
@
text
@/* $Log: ge2img.c,v $
 * Revision 2.0  2004/02/16  15:40:37  tom
 * Feb 2004
 *
 * Revision 1.10  2003/10/06  13:41:46  tom
 * determine frame order from start time of first frame
 *
 * Revision 1.9  2003/10/03  17:26:28  tom
 * add option to invert frame order
 *
 * Revision 1.8  2003/09/16  17:56:44  tom
 * *** empty log message ***
 *
 * Revision 1.7  2003/09/16  17:54:34  tom
 * for GE Advance (ecat 9110) get scantime and filter
 *
 * Revision 1.6  2003/09/12  15:02:55  tom
 * *** empty log message ***
 *
 * Revision 1.5  2003/09/11  19:10:00  tom
 * *** empty log message ***
 *
 * Revision 1.4  2003/09/10  19:55:13  tom
 * fix right/left
 *
 * Revision 1.3  2003/09/10  19:17:31  tom
 * reasonable dynamics but scalers unchecked
 *
 * Revision 1.2  2003/02/11  16:14:40  tom
 * correct pixel size
 *
 * Revision 1.1  2003/02/11  15:52:43  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			ge2img.c
 *	Date:			Feb 2003
 *	Author:			Tom Videen
 *	Description:	Convert GEMS PET Export file into ECAT Matrix 7 format.
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 2.0 2004/02/16 15:40:37 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <time.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	char          **ge_read_fields ();
	int             get_field_number ();

	FILE           *fd_ge;			 /* input GE Export file */
	ImageFile      *file;			 /* output ECAT file */
	Index           indx;
	struct tm      *ptm;
	char           *GE_img;			 /* input GEMS Export image filename */
	char           *ecatimg;		 /* output PET image filename */
	char            runstamp[40];		 /* version, date and userid info */
	char           *str1;
	char           *ch;
	char           *line;

	char          **pat;
	char          **exm;
	char          **scn;
	char          **frm;
	char          **set;
	char          **img;

	int             patn;
	int             exmn;
	int             scnn;
	int             frmn = 0;
	int             setn;
	int             imgn;

	char          **patstr;
	char          **exmstr;
	char          **scnstr;
	char          **frmstr;
	char          **setstr;
	char          **imgstr;

	int             patnum;
	int             exmnum;
	int             scnnum;
	int             frmnum;
	int             setnum;
	int             imgnum;

	char            system[20];
	char            institution[50];
	char            pid[20];
	char            fid[100];
	long            dim[3];
	long            plnsize;
	float           frm_max;
	float           frm_min;
	float           dcor;
	double          fac = 1.0;

	long            slice, frame, nframes;
	long            i, j, k;
	int             m, n, nn;
	int             order;			 /* 0 = determine from initial start_time */
									 /* 1 = first frame first	 */
									 /* 2 = last frame first	 */
	int             debug;
	float           val;

	short          *pln;			 /* input image plane */
	float        ***vol;			 /* output image frame */

	int             maxlen = 256;
	int				decay_corrected = 0;

/*	Get command line arguments and initialize filenames:	*/

	if (argc != 12) {
		fprintf (stdout, "Usage: ge2img GE_img ECAT_img order debug\n");
		return (ERROR);
	}
	GE_img = argv[1];
	ecatimg = argv[2];
	order = atoi (argv[3]);
	debug = atoi (argv[4]);
	n = 4;
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[n], argv[n + 1], argv[n + 2],
			argv[n + 3], argv[n + 5], argv[n + 6]);

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	dim[0] = 128;				 /* for lint	 */
	dim[1] = 128;
	dim[2] = 35;
	plnsize = dim[0] * dim[1];
	(void) strcpy (fid, "");

	line = (char *) calloc (maxlen + 1, sizeof (char));
	if (line == NULL) return (ERROR);

	if ((fd_ge = fopen (GE_img, "r")) == 0) {
		fprintf (stderr, "ERROR [ge2img]: Unable to open %s\n", GE_img);
		return (ERROR);
	}
/*	Create ECAT file	*/

	file = make_imgfile (ecatimg);
	if (make_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [ge2img]: Cannot make mh for %s\n", ecatimg);
		return (ERROR);
	}
	if (make_sh (file) == ERROR) {
		fprintf (stderr, "ERROR [ge2img]: Cannot make sh for %s\n", ecatimg);
		return (ERROR);
	}
	if (make_mh7 (file) == ERROR) {
		fprintf (stderr, "ERROR [ge2img]: Cannot make mh7 for %s\n", ecatimg);
		return (ERROR);
	}
	if (make_sh7 (file) == ERROR) {
		fprintf (stderr, "ERROR [ge2img]: Cannot make sh7 for %s\n", ecatimg);
		return (ERROR);
	}
/*	Read Header Field Names	*/

	if (fgets (line, maxlen, fd_ge) == 0) {
		fprintf (stderr, "ERROR [ge2img]: reading %s\n", GE_img);
		return (ERROR);
	}
	if (strstr (line, "GEMS PET Export File") == NULL) {
		fprintf (stderr, "ERROR [ge2img]: not a GEMS PET Export File  %s\n", GE_img);
		return (ERROR);
	}
	if (fgets (line, maxlen, fd_ge) == 0) {
		fprintf (stderr, "ERROR [ge2img]: reading %s\n", GE_img);
		return (ERROR);
	}
	ch = strrchr (line, ' ');
	ch = NULL;
	(void) strcpy (institution, line);
	fprintf (stderr, "Institution: %s", institution);

	patstr = ge_read_fields (fd_ge, &patnum, "patient|", "exam|", line, debug);
	exmstr = ge_read_fields (fd_ge, &exmnum, "exam|", "scan|", line, debug);
	scnstr = ge_read_fields (fd_ge, &scnnum, "scan|", "frame|", line, debug);
	frmstr = ge_read_fields (fd_ge, &frmnum, "frame|", "imageset|", line, debug);
	setstr = ge_read_fields (fd_ge, &setnum, "imageset|", "image|", line, debug);
	imgstr = ge_read_fields (fd_ge, &imgnum, "image|", "patient|", line, debug);

/*	Read Header Values and get image array dimensions */

	pat = ge_read_fields (fd_ge, &patn, "patient|", "exam|", line, debug);
	exm = ge_read_fields (fd_ge, &exmn, "exam|", "scan|", line, debug);
	scn = ge_read_fields (fd_ge, &scnn, "scan|", "frame|", line, debug);
	nframes = 0;
	while (strncmp (line, "imageset|", 9) != 0) {
		if (nframes > 0) {
			for (i = 0; i < frmn; i++)
				free (frm[i]);
			free (frm);
		}
		frm = ge_read_fields (fd_ge, &frmn, "frame|", "dummy", line, debug);
		nframes++;
		for (i = 0; i < 3; i++) {
			if (fgets (line, maxlen, fd_ge) == 0) {
				fprintf (stderr, "ERROR [ge2img]: reading %s after Frame field %ld\n", GE_img, nframes + 1);
				return (ERROR);
			}
		}
	}
	k = get_field_number (frmstr, frmnum, "slice_count");
	if (k >= 0)
		dim[2] = atoi (frm[k]);
	fprintf (stderr, "Frames =%3ld  Planes =%3ld\n", nframes, dim[2]);
	if (dim[2] > 35)
		dim[2] = 35;

	set = ge_read_fields (fd_ge, &setn, "imageset|", "blob", line, debug);
	k = get_field_number (setstr, setnum, "bp_filter");
	if (k >= 0) {
		nn = atoi (set[k]);
		if (nn == 2)
			file->sh->filter_code = 6;
		else if (nn < 5)
			file->sh->filter_code = nn;
		else
			file->sh->filter_code = 0;
	}
	k = get_field_number (setstr, setnum, "decay");
	if (k >= 0) 
		decay_corrected = atoi(set[k]);
/*
 *	Read Images
 *	Note: frames are not numbered; planes may be missing or out-of-order;
 *	Therefore, read planes until no more are found; place by slice_number field;
 *	Store frame_id and increment frame whenever it changes;
 *	Also, cannot identify size of entire image until first plane is read;
 *	hence the awkward creation of the ECAT file in the loop.
 */

	frame = 0;
	slice = 1;
	frm_max = 0;
	frm_min = 0;

	while ((img = ge_read_fields (fd_ge, &imgn, "image|", "blob", line, debug)) != NULL) {
		if (debug > 0)
			fprintf (stderr, "Input Frame %ld  Slice %ld\n", frame, slice);
		if (frame == 0) {
			k = get_field_number (imgstr, imgnum, "image_array_height");
			if (k >= 0)
				dim[0] = atol (img[k]);
			k = get_field_number (imgstr, imgnum, "image_array_width");
			if (k >= 0)
				dim[1] = atol (img[k]);
			plnsize = dim[0] * dim[1];
			pln = (short *) calloc (plnsize, sizeof (short));
			if (pln == NULL) return (ERROR);
			if ((vol = f3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
				fprintf (stderr, "ERROR [ge2img]: Cannot malloc img\n");
				return (ERROR);
			}
			file->mh->file_format = MATRIX_REV7;
			file->mh->filetype = PetVolume;
			file->mh->scanner_type = 9110;
			k = get_field_number (scnstr, scnnum, "scan_datetime");
			if (k >= 0) {
				ptm = (struct tm *) calloc (1, sizeof (struct tm));
				if (ptm == NULL) return (ERROR);
				str1 = (char *) calloc (5, sizeof (char));
				if (str1 == NULL) return (ERROR);
				(void) strncpy (str1, scn[k], 4);
				nn = atoi (str1) - 1900;
				ptm->tm_year = nn;
				(void) strcpy (str1, "    ");
				(void) strncpy (str1, scn[k] + 5, 2);
				ptm->tm_mon = atoi (str1) - 1;
				(void) strcpy (str1, "    ");
				(void) strncpy (str1, scn[k] + 8, 2);
				ptm->tm_mday = atoi (str1);
				(void) strcpy (str1, "    ");
				(void) strncpy (str1, scn[k] + 11, 2);
				ptm->tm_hour = atoi (str1) - 1;
				(void) strcpy (str1, "    ");
				(void) strncpy (str1, scn[k] + 14, 2);
				ptm->tm_min = atoi (str1);
				(void) strcpy (str1, "    ");
				(void) strncpy (str1, scn[k] + 17, 2);
				ptm->tm_sec = atoi (str1);
				(void) strcpy (str1, "    ");
				file->mh->start_time = mktime (ptm);
				free (ptm);
				free (str1);
			} else
				file->mh->start_time = 0;

			k = get_field_number (scnstr, scnnum, "radionuclide_name");
			if (k >= 0) {
				if (strncmp (scn[k], "15O", 3) == 0)
					(void) strcpy (file->mh->isotope, "O-15");
				else if (strncmp (scn[k], "18F", 3) == 0)
					(void) strcpy (file->mh->isotope, "F-18");
				else if (strncmp (scn[k], "11C", 3) == 0)
					(void) strcpy (file->mh->isotope, "C-11");
				else if (strncmp (scn[k], "68Ge", 4) == 0)
					(void) strcpy (file->mh->isotope, "Ge-68");
				else
					(void) strncpy (file->mh->isotope, scn[k], 7);
			}
			k = get_field_number (scnstr, scnnum, "tracer_name");
			if (k >= 0)
				(void) strncpy (file->mh->radiopharmaceutical, scn[k], 31);
			file->mh->bed_elevation = 0;
			file->mh->wobble_speed = 0;
			file->mh->calibration_factor = 1;
			file->mh->sw_revision = (char *) calloc (32, sizeof (char));
			file->mh->filetime = (char *) calloc (32, sizeof (char));
			file->mh->nplane = dim[2];
			file->mh->nframe = nframes;
			file->mh->ngate = 1;
			file->mh->nbed = 1;
			file->mh->init_bed_pos = 0;
			for (i = 0; i < 16; i++)
				file->mh->bed_off[i] = 0;
			file->mh->nplane = dim[2];
			file->mh->orientation = 0;
			file->sh->number_format = SHORT_DATA;
			file->sh->ndim = 3;
			file->sh->dim1 = dim[0];
			file->sh->dim2 = dim[1];
			file->sh->dim3 = dim[2];
			k = get_field_number (imgstr, imgnum, "pixel_width");
			if (k >= 0)
				file->sh->sample_size_1 = 0.1 * atof (img[k]);
			k = get_field_number (imgstr, imgnum, "pixel_height");
			if (k >= 0)
				file->sh->sample_size_2 = 0.1 * atof (img[k]);
			k = get_field_number (imgstr, imgnum, "image_thickness");
			if (k >= 0)
				file->sh->sample_size_3 = 0.1 * atof (img[k]);
			file->mh->slicesep = file->sh->sample_size_3;
			k = get_field_number (imgstr, imgnum, "image_time");
			if (k >= 0)
				file->sh->start_time = atol (img[k]);
			if (order == 0) {
				if (file->sh->start_time == 0)
					order = 1;	/* first frame first */
				else 
					order = 2;
			}
			k = get_field_number (imgstr, imgnum, "image_duration");
			if (k >= 0)
				file->sh->duration = 1000 * atol (img[k]);
			dcor = 1;
			if (decay_corrected > 0) {
				k = get_field_number (imgstr, imgnum, "decay_factor");
				if (k >= 0)
					dcor = atof (img[k]);
			}
			file->sh->decay_corr = dcor;
			file->m7->sh->decay_corr_fctr = dcor;
			(void) fill_mh7 (file);
			(void) strncpy (file->m7->mh->original_file_name, GE_img, 31);
			k = get_field_number (exmstr, exmnum, "hospital_name");
			if (k >= 0)
				(void) strncpy (file->m7->mh->facility_name, exm[k], 19);
			k = get_field_number (exmstr, exmnum, "scanner_desc");
			if (k >= 0)
				(void) strcpy (system, exm[k]);
			k = get_field_number (patstr, patnum, "patient_identifier");
			if (k >= 0)
				(void) strcpy (pid, pat[k]);
			(void) save_rcs (file, rcsid, runstamp);

			(void) strcpy (file->mode, "w");
			if (open_imgfile (file) == ERROR) {
				fprintf (stderr, "ERROR [ge2img]: Cannot open %s\n", ecatimg);
				return (ERROR);
			}
			if (put_mh (file) == ERROR) {
				fprintf (stderr, "ERROR [ge2img]: Cannot write %s\n", ecatimg);
				return (ERROR);
			}
		}
		k = get_field_number (imgstr, imgnum, "frame_id");
		if (k >= 0) {
			if (strcmp (fid, img[k]) != 0) {	/* New Frame */
				(void) strcpy (fid, img[k]);
				if (frame > 0) {
					if (order == 1)
						indx.frm = frame;
					else
						indx.frm = nframes - frame + 1;
					fprintf (stderr, "Input Frame:%3ld    Max:  %f   Time:%9d   Output Frame:%3ld\n", frame, frm_max,
						 file->sh->start_time, indx.frm);
					if (writetensor (file, &indx, vol) == ERROR) {
						fprintf (stderr, "ERROR [ge2img]: Cannot write %s\n", ecatimg);
						return (ERROR);
					}
					frm_max = 0;
					frm_min = 0;
				}
				frame++;
				k = get_field_number (imgstr, imgnum, "image_time");
				if (k >= 0)
					file->sh->start_time = atol (img[k]);
				k = get_field_number (imgstr, imgnum, "image_duration");
				if (k >= 0)
					file->sh->duration = 1000 * atol (img[k]);
				dcor = 1;
				if (decay_corrected > 0) {
					k = get_field_number (imgstr, imgnum, "decay_factor");
					if (k >= 0)
						dcor = atof (img[k]);
				}
				file->sh->decay_corr = dcor;
				file->m7->sh->decay_corr_fctr = dcor;
			}
		}
		k = get_field_number (imgstr, imgnum, "slice_number");
		if (k >= 0) {
			slice = atoi (img[k]);
		} else {
			fprintf (stderr, "ERROR [ge2img]: slice_number not found for frame %ld of  %s\n", frame, GE_img);
			return (ERROR);
		}
		if (slice > dim[2] || slice < 1) {
			fprintf (stderr, "ERROR [ge2img]: Out-of-Range slice_number= %ld  Planes= %ld\n", slice, dim[2]);
			return (ERROR);
		}
		k = get_field_number (imgstr, imgnum, "scale_factor");
		if (k >= 0)
			fac = atof (img[k]);
		if (fgets (line, maxlen, fd_ge) == 0) {
			fprintf (stderr, "ERROR [ge2img]: reading %s\n", GE_img);
			return (ERROR);
		}
		if ((fread (pln, sizeof (short), plnsize, fd_ge)) != plnsize)
			fprintf (stderr, "ERROR [ge2img]: Reading %s plane %ld\n", GE_img, slice);
		m = 0;
		for (j = 1; j <= dim[1]; j++) {
			for (i = dim[0]; i >= 1; i--) {
				val = fac * pln[m];
				if (val > frm_max)
					frm_max = val;
				if (val < frm_min)
					frm_min = val;
				vol[slice][j][i] = val;
				m++;
			}
		}
		for (i = 0; i < imgn; i++)
			free (img[i]);
		free (img);
	}

	(void) fclose (fd_ge);

	if (order == 1)
		indx.frm = frame;
	else
		indx.frm = nframes - frame + 1;
	fprintf (stderr, "Input Frame:%3ld    Max:  %f   Time:%9d   Output Frame:%3ld\n", frame, frm_max,
		 file->sh->start_time, indx.frm);
	if (writetensor (file, &indx, vol) == ERROR) {
		fprintf (stderr, "ERROR [ge2img]: Cannot write %s\n", ecatimg);
		return (ERROR);
	}
	fprintf (stdout, "Converted: %s to %s\n", GE_img, ecatimg);

/*	for Purify	*/

	free (pln);
	free (line);
	free_imgfile (file);
	free_f3tensor (vol, 1, dim[2], 1, dim[1], 1, dim[0]);

	for (i = 0; i < patnum; i++)
		free (patstr[i]);
	free (patstr);
	for (i = 0; i < exmnum; i++)
		free (exmstr[i]);
	free (exmstr);
	for (i = 0; i < scnnum; i++)
		free (scnstr[i]);
	free (scnstr);
	for (i = 0; i < frmnum; i++)
		free (frmstr[i]);
	free (frmstr);
	for (i = 0; i < setnum; i++)
		free (setstr[i]);
	free (setstr);
	for (i = 0; i < imgnum; i++)
		free (imgstr[i]);
	free (imgstr);
	for (i = 0; i < patn; i++)
		free (pat[i]);
	free (pat);
	for (i = 0; i < exmn; i++)
		free (exm[i]);
	free (exm);
	for (i = 0; i < scnn; i++)
		free (scn[i]);
	free (scn);
	for (i = 0; i < frmn; i++)
		free (frm[i]);
	free (frm);
	for (i = 0; i < setn; i++)
		free (set[i]);
	free (set);

	return (OK);
}
@


2.0
log
@Feb 2004
@
text
@d2 3
d42 1
a42 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.10 2003/10/06 13:41:46 tom Exp tom $";
d108 1
d124 1
d243 3
d262 1
a262 1
			fprintf (stderr, "Frame %ld  Slice %ld\n", frame, slice);
d368 8
a375 5
			k = get_field_number (imgstr, imgnum, "decay_factor");
			if (k >= 0)
				file->sh->decay_corr = atof (img[k]);
			else
				file->sh->decay_corr = 1.0;
a376 1
			file->m7->sh->decay_corr_fctr = 1.0;
d408 1
a408 1
					fprintf (stderr, "Frame:%3ld    Max:  %f   Time:%9d   Idx:%d\n", frame, frm_max,
d424 8
d477 1
a477 1
	fprintf (stderr, "Frame:%3ld    Max:  %f   Time:%9d   Idx:%d\n", frame, frm_max,
@


1.10
log
@determine frame order from start time of first frame
@
text
@d2 3
d39 1
a39 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.9 2003/10/03 17:26:28 tom Exp tom $";
d148 1
d264 1
d275 1
d277 1
d365 1
a365 1
			fill_mh7 (file);
d377 1
a377 1
			save_rcs (file, rcsid, runstamp);
@


1.9
log
@add option to invert frame order
@
text
@d2 3
d36 1
a36 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.8 2003/09/16 17:56:44 tom Exp tom $";
d107 3
a109 1
	int             order;			 /* 0 = last frame first; 1 = first frame first	 */
d344 6
d387 3
a389 1
					if (order == 0)
a390 2
					else
						indx.frm = frame;
d445 1
d448 3
a450 1
	if (order == 0)
a451 2
	else
		indx.frm = frame;
@


1.8
log
@*** empty log message ***
@
text
@d2 3
d33 1
a33 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.7 2003/09/16 17:54:34 tom Exp tom $";
d58 1
a58 1
	char            runstamp[40];	 /* version, date and userid info */
d104 1
d115 2
a116 2
	if (argc != 11) {
		fprintf (stdout, "Usage: ge2img GE_img ECAT_img debug\n");
d121 2
a122 1
	debug = atoi (argv[3]);
d221 1
a221 1
		nn = atoi(set[k]);
a228 1

d376 4
a379 1
					indx.frm = nframes - frame + 1;
d436 4
a439 1
	indx.frm = nframes - frame + 1;
@


1.7
log
@for GE Advance (ecat 9110) get scantime and filter
@
text
@d2 3
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.6 2003/09/12 15:02:55 tom Exp tom $";
a214 1
	printf ("k = %d\n",k);
a216 1
		printf ("nn = %d\n",nn);
@


1.6
log
@*** empty log message ***
@
text
@d2 3
d27 1
a27 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.5 2003/09/11 19:10:00 tom Exp tom $";
d33 1
d49 1
d53 1
d97 1
a97 1
	int             m, n;
a136 1

a155 1

d209 1
d211 12
d257 29
a285 1
			file->mh->start_time = 0;
d288 1
a288 1
				if (strncmp(scn[k],"15O",3) == 0)
d290 1
a290 1
				else if (strncmp(scn[k],"18F",3) == 0)
d292 1
a292 1
				else if (strncmp(scn[k],"11C",3) == 0)
d294 2
@


1.5
log
@*** empty log message ***
@
text
@d2 3
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.4 2003/09/10 19:55:13 tom Exp tom $";
d61 1
a61 1
	int             frmn;
a80 1
	char            study_date[20];
d121 1
a121 1
	dim[2] = 63;
d239 1
a239 1
			file->mh->scanner_type = 0;
d242 10
a251 2
			if (k >= 0)
				(void) strncpy (file->mh->isotope, scn[k], 7);
a303 3
			k = get_field_number (patstr, patnum, "patient_datetime");
			if (k >= 0)
				(void) strcpy (study_date, pat[k]);
@


1.4
log
@fix right/left
@
text
@d2 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.3 2003/09/10 19:17:31 tom Exp $";
d55 7
d85 1
a85 1
	double          fac;
d116 7
d178 3
a180 3
	pat = ge_read_fields (fd_ge, &n, "patient|", "exam|", line, debug);
	exm = ge_read_fields (fd_ge, &n, "exam|", "scan|", line, debug);
	scn = ge_read_fields (fd_ge, &n, "scan|", "frame|", line, debug);
d183 6
a188 1
		frm = ge_read_fields (fd_ge, &n, "frame|", "dummy", line, debug);
d203 1
a203 1
	set = ge_read_fields (fd_ge, &n, "imageset|", "blob", line, debug);
d219 1
a219 1
	while ((img = ge_read_fields (fd_ge, &n, "image|", "blob", line, debug)) != NULL) {
d282 1
a282 1
				file->sh->decay_corr = atof(img[k]);
d319 1
a319 1
						file->sh->start_time, indx.frm);
d368 5
a373 1
	}
d376 1
a376 1
		file->sh->start_time, indx.frm);
d382 3
d386 1
d389 35
@


1.3
log
@reasonable dynamics but scalers unchecked
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.2 2003/02/11 16:14:40 tom Exp $";
d73 2
a74 2
	float           global_max;
	float           global_min;
d194 2
a195 2
	global_max = 0;
	global_min = 0;
d296 1
a296 1
					fprintf (stderr, "Frame:%3ld    Max:  %f   Time:%9d   Idx:%d\n", frame, global_max,
d302 2
d336 1
a336 1
			for (i = 1; i <= dim[0]; i++) {
d338 4
a341 4
				if (val > global_max)
					global_max = val;
				if (val < global_min)
					global_min = val;
d349 1
a349 1
	fprintf (stderr, "Frame:%3ld    Max:  %f   Time:%9d   Idx:%d\n", frame, global_max,
@


1.2
log
@correct pixel size
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.1 2003/02/11 15:52:43 tom Exp tom $";
d68 1
a68 1
	long            dim[4];
d74 1
a74 1
	long            slice, frame;
d161 1
a161 1
	dim[3] = 0;
d164 1
a164 1
		dim[3]++;
d167 1
a167 1
				fprintf (stderr, "ERROR [ge2img]: reading %s after Frame field %ld\n", GE_img, dim[3] + 1);
d175 1
a175 1
	fprintf (stderr, "Frames =%3ld  Planes =%3ld\n", dim[3], dim[2]);
d226 1
a226 1
			file->mh->nframe = dim[3];
d292 3
a294 2
					fprintf (stderr, "Frame:%3ld    Max:  %f\n", frame, global_max);
					indx.frm = frame;
d343 3
a345 2
	fprintf (stderr, "Frame:%3ld    Max:  %f\n", frame, global_max);
	indx.frm = frame;
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ge2img/RCS/ge2img.c,v 1.2 2003/02/10 19:09:53 tom Exp $";
d238 1
a238 1
				file->sh->sample_size_1 = atof (img[k]);
d241 1
a241 1
				file->sh->sample_size_2 = atof (img[k]);
d244 1
a244 1
				file->sh->sample_size_3 = atof (img[k]);
@
