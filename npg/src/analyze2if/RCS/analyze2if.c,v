head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	2010.06.04.19.14.30;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2008.07.02.18.57.49;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.17.43.09;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.15.20.09.00;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.12.19.45.34;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.12.16.17.52.04;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.09.16.15.42.01;	author tom;	state Exp;
branches;
next	;


desc
@@


2.2
log
@allow 3 dimensions
@
text
@/*	$Log: analyze2if.c,v $
 * Revision 2.1  2008/07/02  18:57:49  tom
 * read and convert 8-bit images
 *
 * Revision 2.0  2004/02/13  17:43:09  tom
 * Feb 2004
 *
 * Revision 1.4  2002/08/15  20:09:00  tom
 * fix 1-pixel offset error
 *
 * Revision 1.3  2001/01/12  19:45:34  tom
 * handle float and dynamic images
 *
 * Revision 1.2  1999/12/16  17:52:04  tom
 * sync version
 *
 * Revision 1.1  1999/09/16  15:42:01  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			analyze2if.c
 *	Date:			Sep 1999
 *	Author:			Tom Videen
 *	Description:	Convert Analyze images into Interfile format
 *					flipping to Right-on-Right orientation to speed I/O
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2if/RCS/analyze2if.c,v 2.1 2008/07/02 18:57:49 tom Exp tom $";

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <values.h>
#include <image.h>
#include <nrutil.h>
#include <libnrimg.h>
#include <ANALYZE.h>				 /* dsr */

int main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* header for Analyze */
	FILE           *fd_hdr;			 /* file for Analyze hdr */
	FILE           *fd_img;			 /* file for Analyze image */
	FILE           *fd_ifh;			 /* file for Interfile hdr */
	FILE           *fd_dat;			 /* file for Interfile image */
	char           *in_hdr;			 /* input Analyze header filename  */
	char           *in_img;			 /* input Analyze image filename */
	char           *out_hdr;		 /* input Interfile header filename  */
	char           *out_img;		 /* input Interfile image filename */
	char           *ptr;
	char            version[5];
	char            program_date[12];
	long            dim[4];			 /* dimensions of tensors */
	long            f, i, j, k, n;
	int             nbytes;

	unsigned char  *crow;			 /* single row of input image */

	short        ***img;			 /* output Analyze image */
	short          *row;			 /* single row of input image */
	short           val;
	short           global_max = -MAXSHORT;	 /* global maximum */
	short           global_min = MAXSHORT;	 /* global minimum */

	float        ***fimg;			 /* output Analyze image */
	float          *frow;			 /* single row of input image */
	float           fval;
	float           f_max = 0;		 /* global maximum */
	float           f_min = 0;		 /* global minimum */

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 5) {
		fprintf (stderr, "Usage: analyze2if in_img in_hdr out_img out_hdr\n");
		return (ERROR);
	}
	in_img = argv[1];
	in_hdr = argv[2];
	out_img = argv[3];
	out_hdr = argv[4];

	ptr = strstr (rcsid, "v ");
	ptr += 2;
	(void) strcpy (version, "    ");
	if (ptr != NULL)
		(void) strncpy (version, ptr, 4);
	ptr = strstr (ptr, " ");
	ptr++;
	(void) strcpy (program_date, "           ");
	if (ptr != NULL)
		(void) strncpy (program_date, ptr, 10);
	ptr = strchr (program_date, '/');
	*ptr = ':';
	ptr = strchr (program_date, '/');
	*ptr = ':';

	if ((fd_ifh = fopen (out_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [img2if]: opening %s\n", out_hdr);
		return (ERROR);
	}
	if ((fd_dat = fopen (out_img, "w")) == 0) {
		fprintf (stderr, "ERROR [img2if]: opening %s\n", out_img);
		return (ERROR);
	}
/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (in_hdr, "r")) == 0) {
		fprintf (stderr, "ERROR [analyze2if]: opening %s\n", in_hdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analyze2if]: reading %s\n", in_hdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [analyze2if]: reading %s\n", in_hdr);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.bitpix == 8)
		nbytes = 1;
	else if (hdr.dime.bitpix == 16)
		nbytes = 2;
	else if (hdr.dime.bitpix == 32)
		nbytes = 4;
	else {
		fprintf (stderr, "ERROR [analyze2if]: reading %s\n", in_hdr);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim[0] = hdr.dime.dim[1];
	dim[1] = hdr.dime.dim[2];
	dim[2] = hdr.dime.dim[3];
	dim[3] = hdr.dime.dim[4];
	(void) fclose (fd_hdr);
	fprintf (stderr, "%d %d %d %d\n", (int) dim[0], (int) dim[1], (int) dim[2], (int) dim[3]);

/*
 *	Read the img and flip X, Y & Z from Analyze convention
 *	Find min and max for outout hdr
 */

	if ((fd_img = fopen (in_img, "r")) == 0) {
		fprintf (stderr, "ERROR [analyze2if]: opening %s\n", in_img);
		return (ERROR);
	}
	if (nbytes == 1) {
		if ((img = s3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
			fprintf (stderr, "ERROR [analyze2if]: malloc img\n");
			return (ERROR);
		}
		if ((crow = (unsigned char *) calloc (dim[0], sizeof (unsigned char))) == NULL) {
			fprintf (stderr, "ERROR [analyze2if]: malloc crow\n");
			return (ERROR);
		}
		global_max = -MAXSHORT;
		global_min = MAXSHORT;
		for (f = 1; f <= dim[3]; f++) {
			for (i = dim[2]; i > 0; i--) {
				for (j = dim[1]; j > 0; j--) {
					(void) fread (crow, sizeof (unsigned char), dim[0], fd_img);
					for (k = dim[0]; k > 0; k--) {
						n = dim[0] - k;
						val = (short) crow[n];
						if (val <= -32767)
							val = 0;
						if (val > global_max)
							global_max = val;
						if (val < global_min)
							global_min = val;
						img[i][j][k] = val;
					}
				}
			}
			for (i = 1; i <= dim[2]; i++) {
				for (j = 1; j <= dim[1]; j++)
					(void) fwrite ((img[i][j] + 1), sizeof (short), dim[0], fd_dat);
			}
		}
		free (crow);
		free_s3tensor (img, 1, dim[2], 1, dim[1], 1, dim[0]);

	} else if (nbytes == 2) {
		if ((img = s3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
			fprintf (stderr, "ERROR [analyze2if]: malloc img\n");
			return (ERROR);
		}
		if ((row = (short *) calloc (dim[0], sizeof (short))) == NULL) {
			fprintf (stderr, "ERROR [analyze2if]: malloc row\n");
			return (ERROR);
		}
		global_max = -MAXSHORT;
		global_min = MAXSHORT;
		for (f = 1; f <= dim[3]; f++) {
			for (i = dim[2]; i > 0; i--) {
				for (j = dim[1]; j > 0; j--) {
					(void) fread (row, sizeof (short), dim[0], fd_img);
					for (k = dim[0]; k > 0; k--) {
						n = dim[0] - k;
						val = row[n];
						if (val <= -32767)
							val = 0;
						if (val > global_max)
							global_max = val;
						if (val < global_min)
							global_min = val;
						img[i][j][k] = val;
					}
				}
			}
			for (i = 1; i <= dim[2]; i++) {
				for (j = 1; j <= dim[1]; j++)
					(void) fwrite ((img[i][j] + 1), sizeof (short), dim[0], fd_dat);
			}
		}
		free (row);
		free_s3tensor (img, 1, dim[2], 1, dim[1], 1, dim[0]);

	} else {
		if ((fimg = f3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
			fprintf (stderr, "ERROR [analyze2if]: malloc fimg\n");
			return (ERROR);
		}
		if ((frow = (float *) calloc (dim[0], sizeof (float))) == NULL) {
			fprintf (stderr, "ERROR [analyze2if]: malloc frow\n");
			return (ERROR);
		}
		f_max = 0;
		f_min = 0;
		for (f = 1; f <= dim[3]; f++) {
			for (i = dim[2]; i > 0; i--) {
				for (j = dim[1]; j > 0; j--) {
					(void) fread (frow, sizeof (float), dim[0], fd_img);
					for (k = dim[0]; k > 0; k--) {
						n = dim[0] - k;
						fval = frow[n];
						if (fval <= -32767)
							fval = 0;
						if (fval > f_max)
							f_max = fval;
						if (fval < f_min)
							f_min = fval;
						fimg[i][j][k] = fval;
					}
				}
			}
			for (i = 1; i <= dim[2]; i++) {
				for (j = 1; j <= dim[1]; j++)
					(void) fwrite ((fimg[i][j] + 1), sizeof (float), dim[0], fd_dat);
			}
		}
		free (frow);
		free_f3tensor (fimg, 1, dim[2], 1, dim[1], 1, dim[0]);
	}

	(void) fclose (fd_img);
	(void) fclose (fd_dat);

/*
 * Create Interfile Format header file
 */

	fprintf (fd_ifh, "INTERFILE :=\n");
	fprintf (fd_ifh, "version of keys    := 3.3\n");
	fprintf (fd_ifh, "date of keys       := 1992:01:01\n");
	fprintf (fd_ifh, "conversion program := analyze2if\n");
	fprintf (fd_ifh, "program version    := %s\n", version);
	fprintf (fd_ifh, "program date       := %s\n", program_date);
	fprintf (fd_ifh, ";\n");
	fprintf (fd_ifh, "GENERAL DATA :=\n");
	fprintf (fd_ifh, "original institution := Washington University\n");
	fprintf (fd_ifh, "data starting block  := 0\n");
	fprintf (fd_ifh, "name of data file    := %s\n", out_img);
	fprintf (fd_ifh, ";\n");
	fprintf (fd_ifh, "GENERAL IMAGE DATA :=\n");
	fprintf (fd_ifh, "type of data := tomographic\n");
	fprintf (fd_ifh, "total number of images := %d\n", (int) dim[2]);
	fprintf (fd_ifh, "imagedata byte order   := bigendian\n");
	fprintf (fd_ifh, ";\n");
	fprintf (fd_ifh, "IMAGE STUDY :=\n");
	fprintf (fd_ifh, "process status := reconstructed\n");
	if (dim[3] > 1)
		fprintf (fd_ifh, "number of dimensions := 4\n");
	else
		fprintf (fd_ifh, "number of dimensions := 3\n");
	fprintf (fd_ifh, "number of slices := %d\n", (int) dim[2]);
	fprintf (fd_ifh, "matrix size [1] := %d\n", (int) dim[0]);
	fprintf (fd_ifh, "matrix size [2] := %d\n", (int) dim[1]);
	fprintf (fd_ifh, "matrix size [3] := %d\n", (int) dim[2]);
	if (dim[3] > 1)
		fprintf (fd_ifh, "matrix size [4] := %d\n", (int) dim[3]);
	if (nbytes == 1) nbytes = 2;
	if (nbytes == 2)
		fprintf (fd_ifh, "number format   := signed integer\n");
	else
		fprintf (fd_ifh, "number format   := float\n");
	fprintf (fd_ifh, "number of bytes per pixel  := %d\n", nbytes);
	fprintf (fd_ifh, "scaling factor (mm/pixel) [1]  := %f\n", hdr.dime.pixdim[1]);
	fprintf (fd_ifh, "scaling factor (mm/pixel) [2]  := %f\n", hdr.dime.pixdim[2]);
	fprintf (fd_ifh, "scaling factor (mm/pixel) [3]  := %f\n", hdr.dime.pixdim[3]);
	if (nbytes == 2) {
		fprintf (fd_ifh, "maximum pixel count := %d\n", global_max);
		fprintf (fd_ifh, "minimum pixel count := %d\n", global_min);
	} else {
		fprintf (fd_ifh, "maximum pixel count := %f\n", f_max);
		fprintf (fd_ifh, "minimum pixel count := %f\n", f_min);
	}
	fprintf (fd_ifh, "matrix initial element [1] := left\n");
	fprintf (fd_ifh, "matrix initial element [2] := anterior\n");
	fprintf (fd_ifh, "matrix initial element [3] := superior\n");
	fprintf (fd_ifh, "END OF INTERFILE :=\n");
	(void) fclose (fd_ifh);

	fprintf (stdout, "Converted: %s to %s\n", in_img, out_img);
	return (OK);
}
@


2.1
log
@read and convert 8-bit images
@
text
@d2 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2if/RCS/analyze2if.c,v 2.0 2004/02/13 17:43:09 tom Exp tom $";
d39 1
a39 1
main (argc, argv)
d122 1
a122 1
	if (hdr.dime.dim[0] != 4) {
@


2.0
log
@Feb 2004
@
text
@d2 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2if/RCS/analyze2if.c,v 1.4 2002/08/15 20:09:00 tom Exp tom $";
d57 2
d62 2
a63 2
	short           global_max = -MAXSHORT; /* global maximum */
	short           global_min = MAXSHORT; /* global minimum */
d68 2
a69 2
	float           f_max= 0;		 /* global maximum */
	float           f_min= 0;		 /* global minimum */
d100 1
a100 1
		fprintf (stderr, "ERROR [img2if]: Unable to create Interfile Format header %s\n", out_hdr);
d104 1
a104 1
		fprintf (stderr, "ERROR [img2if]: Unable to create Interfile image %s\n", out_img);
d112 1
a112 1
		fprintf (stderr, "ERROR [analyze2if]: Cannot open: %s\n", in_hdr);
d116 1
a116 1
		fprintf (stderr, "ERROR [analyze2if]: Reading: %s\n", in_hdr);
d120 1
a120 1
		fprintf (stderr, "ERROR [analyze2if]: Reading: %s\n", in_hdr);
d124 3
a126 6
	if (hdr.dime.datatype != 4 && hdr.dime.datatype != 16) {
		fprintf (stderr, "ERROR [analyze2if]: Reading: %s\n", in_hdr);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix == 16)
d131 1
a131 1
		fprintf (stderr, "ERROR [analyze2if]: Reading: %s\n", in_hdr);
d140 1
a140 1
	fprintf (stderr, "%d %d %d %d\n", (int) dim[0], (int) dim[1], (int)dim[2], (int) dim[3]);
d148 1
a148 1
		fprintf (stderr, "ERROR [analyze2if]: Cannot open: %s\n", in_img);
d151 1
a151 1
	if (nbytes == 2) {
d153 1
a153 1
			fprintf (stderr, "ERROR [analyze2if]: Cannot malloc img\n");
d156 36
d193 1
a193 1
			fprintf (stderr, "ERROR [analyze2if]: Cannot malloc memory for row\n");
d225 1
a225 1
			fprintf (stderr, "ERROR [analyze2if]: Cannot malloc fimg\n");
d229 1
a229 1
			fprintf (stderr, "ERROR [analyze2if]: Cannot malloc memory for frow\n");
d296 1
@


1.4
log
@fix 1-pixel offset error
@
text
@d2 3
d16 1
a16 1
 *	Date:			Sep-99
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2if/RCS/analyze2if.c,v 1.3 2001/01/12 19:45:34 tom Exp tom $";
d81 3
a83 2
	strcpy (version, "    ");
	strncpy (version, ptr, 4);
d86 3
a88 2
	strcpy (program_date, "           ");
	strncpy (program_date, ptr, 10);
@


1.3
log
@handle float and dynamic images
@
text
@d2 3
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2if/RCS/analyze2if.c,v 1.2 1999/12/16 17:52:04 tom Exp tom $";
d54 2
a55 2
	short           global_max;		 /* global maximum */
	short           global_min;		 /* global minimum */
d60 2
a61 2
	float           f_max;			 /* global maximum */
	float           f_min;			 /* global minimum */
d68 1
a68 1
		printf ("Usage: analyze2if in_img in_hdr out_img out_hdr\n");
d132 1
a132 1
	fclose (fd_hdr);
d153 2
a154 2
		global_max = -MAXINT;
		global_min = MAXINT;
d158 1
a158 1
					fread (row, sizeof (short), dim[0], fd_img);
d174 1
a174 1
					fwrite (img[i][j], sizeof (short), dim[0], fd_dat);
d194 1
a194 1
					fread (frow, sizeof (float), dim[0], fd_img);
d210 1
a210 1
					fwrite (fimg[i][j], sizeof (float), dim[0], fd_dat);
d217 2
a218 2
	fclose (fd_img);
	fclose (fd_dat);
d272 1
a272 1
	fclose (fd_ifh);
d274 1
a274 1
	printf ("Converted: %s to %s\n", in_img, out_img);
@


1.2
log
@sync version
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2if/RCS/analyze2if.c,v 1.1 1999/09/16 15:42:01 tom Exp tom $";
d44 5
a48 3
	long            dim[3];			 /* dimensions of tensors */
	long            i, j, k, n;
	short          ***img;			 /* output Analyze image */
d50 1
a50 1
	short          val;
d54 6
d111 1
a111 1
	if (hdr.dime.datatype != 4) {
d116 5
a120 1
	if (hdr.dime.bitpix != 16) {
d128 1
d130 1
d141 27
a167 23
	if ((img = s3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
		fprintf (stderr, "ERROR [analyze2if]: Cannot malloc img\n");
		return (ERROR);
	}
	if ((row = (short *) calloc (dim[0], sizeof (short))) == NULL) {
		fprintf (stderr, "ERROR [analyze2if]: Cannot malloc memory for row\n");
		return (ERROR);
	}
	global_max = -MAXINT;
	global_min = MAXINT;
	for (i = dim[2]; i > 0; i--) {
		for (j = dim[1]; j > 0; j--) {
			fread (row, sizeof (short), dim[0], fd_img);
			for (k = dim[0]; k > 0; k--) {
				n = dim[0]-k;
				val = row[n];
				if (val <= -32767)
					val = 0;
				if (val > global_max)
					global_max = val;
				if (val < global_min)
					global_min = val;
				img[i][j][k] = val;
d169 4
d174 38
d213 1
a214 6
	free (row);

	for (i = 1; i <= dim[2]; i++) {
		for (j = 1; j <= dim[1]; j++) 
			fwrite (img[i][j], sizeof (short), dim[0], fd_dat);
	}
a215 1
	free_s3tensor (img, 1, dim[2], 1, dim[1], 1, dim[0]);
d240 4
a243 1
	fprintf (fd_ifh, "number of dimensions := 3\n");
d248 7
a254 2
	fprintf (fd_ifh, "number format   := signed integer\n");
	fprintf (fd_ifh, "number of bytes per pixel  := 2\n");
d258 7
a264 2
	fprintf (fd_ifh, "maximum pixel count := %d\n", global_max);
	fprintf (fd_ifh, "minimum pixel count := %d\n", global_min);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2if/RCS/analyze2if.c,v 2.10 1999/04/07 17:11:58 tom Exp $";
@
