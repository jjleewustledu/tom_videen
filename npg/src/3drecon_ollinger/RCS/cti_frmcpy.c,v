head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.04.01.14.39.42;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*--------------------------------------------------------------------

Program: cti_frmcpy

Purpose: Copy frame two to frame one.

Perpetrator: John Ollinger

Date: August 7, 1990

Copyright 1991-1996, Washington University.
All rights reserved. Unauthorized reproduction prohibited.

---------------------------------------------------------------------*/

#include <stdio.h>
#include <math.h>
#include <fcntl.h>
#include <imagio.h>
#include <cti_proto.h>

#define MAXNAME 120
#define TRUE 1
#define FALSE 0

static char rcsid [] = "$Header: /home/fafner/jmo/src/scatter/scat/RCS/cti_frmcpy.c,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $";

void main(argc,argv)

int	argc;
char	*argv[];

{

void		*sh;
SubHeader	*shscn;
SubHeader	*shimg;
MainHeader     *mh;

FILE	*fp;

int	i,j,k,stat,length,arg,*pln,npln=1,
	outdim,ioff,joff,write_enable=FALSE,
	plane=1,frame=1,gate=1,data=0,bed=0,inframe=2,
	jc,ic,dim1,dim2,ijc;

float	*image,scale,min,max,sum;

char	ans[MAXNAME],*infile,*outfil;

if(argc < 3) {
    fprintf(stderr,"Usage: cti_frmcpy input_file output_file -f frame\n");
    printf("Copies specified frame to frame one of output file.\n");
    exit(-1);
    }

infile  = argv[1];
outfil = argv[2];
if((mh=getmhdr(infile)) == NULL) {
    fprintf(stderr,"Could not read main header., %s\n",infile);
    exit(ERROR);
    }

for(i=1;i<argc;i++) {
    if(!strcmp(argv[i],"-f"))
	inframe = atoi(argv[i+1]);
	++i;
    }

    mh->nframe = 1;
    for(plane=1;plane<=mh->nplane;plane++) {
        if((image=rdimg(infile,plane,inframe,gate,data,bed)) == NULL) {
            fprintf(stderr,"Error reading %s, plane %d\n",infile,plane);
            exit(ERROR);
            }
        if((sh=getsbhdr(infile,plane,inframe,gate,data,bed)) == NULL) {
            fprintf(stderr,"Could not read main header., %s\n",infile);
            exit(ERROR);
            }

        if(strstr(infile,".scn") || strstr(infile,".S")) {
	    shscn = (SubHeader *)sh;
	    for(i=0;i<shscn->dim1*shscn->dim2;i++)
	        image[i] /= shscn->deadtime_corr;
min = 1.e20; max = -1.e20;
for(i=0;i<shscn->dim1*shscn->dim2;i++) {
    if(image[i] > max)
	max = image[i];
    else if(image[i] < min)
	min = image[i];
    }
	    }
        else if(strstr(infile,".img") || strstr(infile,".v")) {
	    shimg = (SubHeader *)sh;
for(i=0,sum=0.;i<shimg->dim1*shimg->dim2;i++)
sum += image[i];
	    }
	else {
	    fprintf(stderr,"Invalid file type, %s\n",infile);
	    exit(-1);
	    }

        frame = 1;
        if((stat=wrimg(outfil,image,mh,sh,plane,1,gate,data,bed)) != OK) {
            fprintf(stderr,"Error writing %s, plane %d\n",outfil,plane);
            exit(ERROR);
            }
    }

}
@
