head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.04.01.14.39.42;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*$Id: makenorm.c,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $*/
/*$Log: makenorm.c,v $
 * Revision 3.1  1998/03/24  23:43:10  jmo
 * ..
 *
 * Revision 3.0  1997/10/29  19:26:43  jmo
 * Support Exact HR.
 *
 * Revision 2.7  1997/08/06  18:22:04  jmo
 * Last version before adding CTI rev 7 support.
 *
 * Revision 2.6  1997/04/04  20:50:17  jmo
 * Prior to mods for multiple bed positions.
 *
 * Revision 2.5  1996/06/27  19:15:05  jmo
 * Fix bug inserted during debugging GE code with Steve Vannoy.
 *
 * Revision 2.4  1996/06/19  11:20:19  jmo
 *
 * Revision 2.3  1996/04/23  15:02:05  jmo
 * Version released April 23, 1996
 *
 * Revision 2.2  1996/04/23  14:56:14  jmo
 * Version Released on Web site, April 23, 1996
 *
 * Revision 2.1  1996/03/15  21:57:19  jmo
 * Version installed in St. Louis.
 *
 * Revision 2.0  1996/01/27  13:44:52  jmo
 * Version installed at Neuro-imaging group, January 1996
 *
 * Revision 1.2  1996/01/18  16:10:02  jmo
 * Modified file formats, Interfile and Matrix Rev 7.0 support.
 *
 * Revision 1.1  1996/01/12  18:09:15  jmo
 * Initial revision
 *
 * Revision 1.18  1995/10/25  16:36:24  jmo
 * *** empty log message ***
 *
 * Revision 1.17  1995/09/20  15:01:55  jmo
 * Version sent to Pittsburgh
 *
 * Revision 1.16  95/09/19  10:44:02  jmo
 * Version for revised paper to physics in medicine and biology.
 * 
 * Revision 1.15  95/08/07  10:04:35  jmo
 * *** empty log message ***
 * 
 * Revision 1.14  95/06/19  16:46:38  jmo
 * Modify method for mashed sinograms.
 * 
 * Revision 1.13  95/06/17  09:13:09  jmo
 * Last version before modification to fix mashing.
 * 
 * Revision 1.12  95/05/26  14:29:38  jmo
 * Version sent to Pittsburgh, 5/26/95
 * 
 * Revision 1.11  95/05/12  16:17:19  jmo
 * Before adding call to scatscl
 * 
 * Revision 1.10  95/05/04  10:37:25  jmo
 * Modified normalization files.
 * 
 * Revision 1.9  1995/04/27  17:43:24  jmo
 * Version used for 3d95
 *
 * Revision 1.8  95/03/31  15:47:30  jmo
 *  Version for 951 sent to Pittsburgh.
 * 
 * Revision 1.7  95/03/03  16:25:19  jmo
 * Partially modified for cti951
 * 
 * Revision 1.6  95/01/30  21:55:18  jmo
 * Fix memory leak.
 * 
 * Revision 1.5  1995/01/27  16:13:56  ty7777
 * Use GetVersion () in the local directory.
 *
 * Revision 1.4  1995/01/20  23:25:05  ty7777
 * Added petutil.h.
 *
 * Revision 1.3  1995/01/20  23:13:26  ty7777
 * Added program version to the main_header.
 *
 * Revision 1.2  1995/01/20  16:31:32  ty7777
 * Deleted escape sequences.
 *
 * Revision 1.1  1995/01/19  22:40:20  ty7777
 * Initial revision
 **/

/*--------------------------------------------------------------------

Program: makenorm

Purpose: Calculate detector efficiency normalization factors.

Perpetrator: John Ollinger

Date: August 7, 1990

Copyright 1991-1996, Washington University.
All rights reserved. Unauthorized reproduction prohibited.

---------------------------------------------------------------------*/

#include <stdio.h>
#include <math.h>
#include <fcntl.h>
#include <string.h>
#include <imagio.h>
#include <petutil.h>
#include <cti_proto.h>
#include <scatter.h>

static char rcsid [] = "$Header: /home/fafner/jmo/src/scatter/scat/RCS/makenorm.c,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $";

#define abs(a) (((a)<0)?-(a):(a))

int	lenblk,numray,numray_raw,numang,lensin,lensin_raw,
	scanner_type;

float	*sinocor,*geo,*geosino,
	**scatin,*centers;

char	*plneffil,*geofile=NULL,nrmfil[MAXNAME],
	tranfil[MAXNAME];

SubHeader	*shg;
NormData 	*read_norm();
struct  ringinfo *rng;

/******************/
void main(argc,argv)
/******************/

int	argc;
char	*argv[];

{

MainHeader     	*mh;
SubHeader  	*sh;
NormData 	*nrm;
Scan3D_subheader7  *sh7;

FILE	*fp;

int	i,j,joff,stat,iter=0,ioff,iang,numiter=1,m,
	plane=1,frame=1,gate=1,data=0,bed=0,pad,
	noscatcomp=FALSE,scatdim=1,jang,nsum,pln,dpln,
	num_dir_rings,num_scat_rings,*dir_ring_list,*scat_ring_list,
	**ring_tab,num_scat_sinos,dir_ring,scat_ring,ring_diff,
        ring_list[LEN_RING_LIST] = RING_LIST,irings[2],
	***tran_sup;

float	*norm,*normsc,*scat,x,avgscl,sum,*scale,*sino,sclcnts,rings[2],
	*scat_interp(),scatscl(),**tran,tran_extend_up_dwn,emis_extend_up_dwn,
	packing_scl;

float 	scl,*ringnum_rev7();
	

SubHeader *sh1;

char	*ptr,*blank_file=NULL,*scat_file,dum[MAXNAME],version[5],date[9];

void	upsamp(),compute_detsum(),compute_eff();
int     ***get_tran_support();

sscanf(rcsid,"%s %s %s %s %s %s %s %s",dum,dum,version,date,dum,dum,dum,dum);
printf("\nmakenorm Version %s, %s\n\n",version,date);
printf ("Copyright 1991-1994, Washington University\n");
printf ("All rights reserved. Unauthorized reproduction prohibited.\n");
if(argc < 2) {
        fprintf(stderr,"Usage: makenorm plane_eff_3d [-nf norm_filename\n");
	fprintf(stderr,"       -scat scat_file -iter numiter -noscatcomp -scatdim imgdim -f]\n");
	fprintf(stderr,"       -os norm_scat_output -geo geofile -blank blank_file\n");
        printf("-noscatcomp: Do not iteratively recompute scatter distribution.\n");
	printf("-scatdim argument specifies the ratio of imgdim/40 to be used in the scatter correction.\n");
        exit(-1);
        }

plneffil  = argv[1];

for(i=1;i<argc;i++) {
    if(!strcmp(argv[i],"-noscatcomp"))
	noscatcomp = TRUE;
    else if(!strcmp(argv[i],"-nf") && i < argc-1)
	strcpy(nrmfil,argv[i+1]);
    else if(!strcmp(argv[i],"-iter") && i < argc-1)
	numiter = atoi(argv[i+1]);
    else if(!strcmp(argv[i],"-scatdim") && i < argc-1)
	scatdim = atoi(argv[i+1]);
    else if(!strcmp(argv[i],"-blank") && i < argc-1) {
	blank_file = argv[i+1];
	}
    else if(!strcmp(argv[i],"-scat") && i < argc-1) {
	scat_file = argv[i+1];
	}
    else if(!strcmp(argv[i],"-geo") && i < argc-1) {
	geofile = argv[i+1];
	}
    }

fprintf(stdout,"---------------------------------------------------------\n");
fprintf(stdout,"Plane efficiency file: %s\n",plneffil);
fprintf(stdout,"Scatter estimates: %s\n",scat_file);
fprintf(stdout,"Scatter estimated using %dx%d images.\n",scatdim*40,scatdim*40);
fprintf(stdout,"Geometric factors: %s\n",geofile);
fprintf(stdout,"Blank file: %s\n",blank_file);
fprintf(stdout,"Output file for normalization factors: %s\n",nrmfil);
fprintf(stdout,"---------------------------------------------------------\n");

if((mh=getmhdr(plneffil)) == NULL) {
    fprintf(stderr,"Could not read main header., %s\n",plneffil);
    exit(ERROR);
    }
scanner_type = mh->scanner_type;
if((sh1=(SubHeader *)getsbhdr(plneffil,1,1,gate,data,bed)) == NULL) {
    fprintf(stderr,"Could not read main header., %s\n",plneffil);
    exit(ERROR);
    }
numray_raw = sh1->dim1;
numang = sh1->dim2;
numray = numray_raw;
#ifdef CHOP
    numray = NUMRAY;
#endif
lensin = numray*numang;
lensin_raw = numray_raw*numang;
lenblk = numray*DET_STRIDE;

/* Malloc memory for scatter estimates. */
rng = (struct ringinfo *)malloc(sizeof(struct ringinfo));
rng->nring = 0;

norm = (float *)malloc(lensin*sizeof(float));
normsc = (float *)malloc(lensin*sizeof(float));
sinocor = (float *)malloc(lensin*sizeof(float));
geosino = (float *)malloc(lensin*sizeof(float));
scale = (float *)malloc((mh->nplane+1)*sizeof(float));
for(i=0;i<mh->nplane+1;i++)
    scale[i] = 0.;
centers = (float *)malloc(numang*sizeof(float));
for(i=0;i<numang;i++) 
    centers[i] = 0.;
nrm = (NormData *)malloc(sizeof(NormData));
nrm->true_plane_eff = 1.;
nrm->scat_plane_eff = 1.;


/* Set up scatter correction script. */
strcpy(tranfil,plneffil);
ptr = strstr(tranfil,".");
*ptr = NULL;
if(SOFTWARE_REVISION == 7)
    sprintf(tranfil,"%s_tr.ifs",tranfil);
else
    sprintf(tranfil,"%s_2d_tr.scn",tranfil);
fp = fopen("scatnorm_tmp.csh","w");
fprintf(fp,"#!/bin/csh\n\n");
fprintf(fp,"set EMIS = %s\n\n",plneffil);
/*fprintf(fp,"if( ! -e $EMIS:r_2d.scn) then\n");
fprintf(fp,"    sino_2d_extract $EMIS\n");
fprintf(fp,"endif\n\n");
fprintf(fp,"if( ! -e $EMIS:r_2d_tr.scn) then\n");
fprintf(fp,"    make_eff_tr $EMIS:r_2d.scn\n");
fprintf(fp,"endif\n\n");*/
tran_extend_up_dwn = (CYL_OUTSIDE_LENGTH - AXIAL_FOV)/2;
if(tran_extend_up_dwn < 0.)
    tran_extend_up_dwn = 0.;
emis_extend_up_dwn = (CYL_INSIDE_LENGTH - AXIAL_FOV)/2;
if(emis_extend_up_dwn < 0.)
    emis_extend_up_dwn = 0.;
fprintf(fp,"scat.csh $EMIS %s %s %s %s -tu %f -td %f -eu %f -ed %f -iter 5 -if %d -np %d\n",tranfil,blank_file,nrmfil,geofile,tran_extend_up_dwn,tran_extend_up_dwn,emis_extend_up_dwn,emis_extend_up_dwn,scatdim,scatdim);
fprintf(fp,"if($status != 0) then\n");
fprintf(fp,"    unalias rm\n");
fprintf(fp,"    rm %s\n",nrmfil);
fprintf(fp,"    exit(-1)\n");
fprintf(fp,"endif\n");
fclose(fp);

if(SOFTWARE_REVISION == 7) {
    num_dir_rings = LEN_RING_LIST;
    num_scat_rings = LEN_RING_LIST;
    num_scat_sinos = 0;
    dir_ring_list = (int *)malloc(LEN_RING_LIST*sizeof(int));
    scat_ring_list = (int *)malloc(LEN_RING_LIST*sizeof(int));
    ring_tab = (int **)malloc(LEN_RING_LIST*sizeof(int));
    for(i=0;i<LEN_RING_LIST;i++) {
        dir_ring_list[i] = ring_list[i];
        scat_ring_list[i] = ring_list[i];
        ring_tab[i] = (int *)malloc(LEN_RING_LIST*sizeof(int));
        }
    for(i=0;i<LEN_RING_LIST;i++) {
        dir_ring = dir_ring_list[i];
        for(j=0;j<LEN_RING_LIST;j++) {
            scat_ring = scat_ring_list[j];
            ring_diff = abs(dir_ring-scat_ring);
            if((ring_diff <= MAX_RING_DIFF)&&(ring_diff%SPAN==0)) {
                ring_tab[i][j] = num_scat_sinos;
                ++num_scat_sinos;
                }
            else
                ring_tab[i][j] = -1;
            }
        }
    }

if(noscatcomp == TRUE) {
    loadscat(scat_file,&scatin,rng);
    close_if(scat_file);
    }

for(iter=0;iter<numiter;iter++) {
    printf("\nIteration #%d\n",iter);

    if(iter > 0) {
        if(noscatcomp == FALSE) {
	    printf("Recalculating scatter distribution.\n");
            if(system("csh scatnorm_tmp.csh") != 0) {
		fprintf(stderr,"***** Scatter correction aborted in makenorm. *****\n");
		exit(-1);
		}
    	    }

        /* Load scatter data. */
        loadscat(scat_file,&scatin,rng);
        close_if(scat_file);

	if(iter == 1) {
	    /* Find boundaries of transmission data exactly as in scatter 
	       correction algorithm. */
	    tran = (float **)malloc((MAX_PLANE+1)*sizeof(float *));
	    for(pln=1,dpln=1;pln<=MAX_PLANE;pln+=2,dpln++) {
                if((tran[dpln]=rdimg(tranfil,pln,frame,gate,data,bed))==NULL) {
                    fprintf(stderr,"Error reading %s, plane %d\n",tranfil,pln);
                    exit(ERROR);
                    }
	        if((sh=(SubHeader *)
 	            getsbhdr(tranfil,pln,frame,gate,data,bed))==NULL) {
        	    fprintf(stderr,"Could not read main header., %s\n",tranfil);
        	    exit(ERROR);
        	    }
#ifdef CHOP
        	/* Chop out central bins from sinograms. */
        	pad = (sh->dim1 - NUMRAY)/2;
	        for(i=0,ioff=pad,joff=0;i<NUMANG;
					i++,ioff+=sh->dim1,joff+=NUMRAY) {
	            for(j=0;j<NUMRAY;j++)
	                tran[dpln][j+joff] = tran[dpln][j+ioff];
	            }
	        sh->dim1 = NUMRAY;
#endif
	 	for(i=0;i<lensin;i++)
		    tran[dpln][i] = (float)log((double)(1./tran[dpln][i]));
                free(sh);
	    	}
	    tran_sup = get_tran_support(tran,numray,numang,NUM_RINGS);
	    for(pln=0;pln<=NUM_RINGS;pln++)
		free(tran[pln]);
	    free(tran);
	    }
        }

    avgscl = 0.;
    for(plane=1;plane<=mh->nplane;plane++) {

	if(plane%4 == 0) {
            fprintf(stdout,".");
            fflush(stdout);
	    }

        if((sino=rdimg(plneffil,plane,frame,gate,data,bed)) == NULL) {
            fprintf(stderr,"Error reading %s, plane %d\n",plneffil,plane);
            exit(ERROR);
            }
	if((sh=(SubHeader *)
			getsbhdr(plneffil,plane,frame,gate,data,bed))==NULL) {
	    fprintf(stderr,"Could not read main header., %s\n",plneffil);
	    exit(ERROR);
	    }
#ifdef CHOP
        /* Chop out central bins from sinograms. */
        pad = (sh->dim1 - NUMRAY)/2;
        for(i=0,ioff=pad,joff=0;i<NUMANG;i++,ioff+=sh->dim1,joff+=NUMRAY) {
            for(j=0;j<NUMRAY;j++)
                sino[j+joff] = sino[j+ioff];
            }
        sh->dim1 = NUMRAY;
#endif

        if((geo=rdimg(geofile,plane,frame,gate,data,bed)) == NULL) {
            fprintf(stderr,"Error reading %s, plane %d\n",geofile,plane);
            exit(ERROR);
            }
	if((shg=(SubHeader *)
			getsbhdr(geofile,plane,frame,gate,data,bed))==NULL) {
	    fprintf(stderr,"Could not read main header., %s\n",geofile);
	    exit(ERROR);
	    }
#ifdef CHOP
        /* Chop out central bins from sinograms. */
        pad = (shg->dim1 - NUMRAY)/2;
        for(i=0,ioff=pad,joff=0;i<DET_STRIDE+1;i++,ioff+=shg->dim1,joff+=NUMRAY) {
            for(j=0;j<NUMRAY;j++)
                geo[j+joff] = geo[j+ioff];
            }
        shg->dim1 = NUMRAY;
#endif
#ifdef cti951m
	for(iang=0,ioff=0,joff=0;iang<DET_STRIDE/MASH;iang++,ioff+=NUMRAY) {
	    for(m=0;m<MASH;m++,joff+=NUMRAY) {
		if(m == 0) {
		    for(i=0;i<NUMRAY;i++)
		        geo[i+ioff] = geo[i+joff];
		    }
		else {
		    for(i=0;i<NUMRAY;i++)
                        geo[i+ioff] += geo[i+joff];
		    }
		}
	    }
#endif

	fit_ctrs(centers,sino,numray,numang);

	/* Get scatter normalization factors. */
	if(iter > 0) {
	    if((nrm=read_norm(nrmfil,plane)) == NULL) {
	        fprintf(stderr,"Error reading %s, plane %d\n",nrmfil,plane);
	        exit(ERROR);
	        }
            compute_eff(normsc,numang,numray,nrm);
	    for(i=0;i<LENSIN;i++)
		normsc[i] *=  nrm->scat_scale;

	    /* Correct the data. */
    	    ringnum(plane,irings,scanner_type);
	    rings[0] = (float)irings[0]; rings[1] = (float)irings[1];
            if(SOFTWARE_REVISION == 7) {
		if((sh7=getsbhdr7(plneffil,1,gate,data,bed)) == NULL) {
		    fprintf(stderr,"Could not read main header., %s\n",plneffil);
		    exit(ERROR);
		    }
                scat = scat_interp_rev7(rings,ring_tab,scatin,NUM_RINGS);
		packing_scl = packing_scale_961(plane);
		}
            else {
                scat = scat_interp(scatin,rng,plane,scanner_type);
		packing_scl = 1.;
		}

	    /* Denormalize scatter estimate. */
	    for(iang=0,ioff=0;iang<numang/DET_STRIDE;iang++) {
                joff = 0;
 	        for(jang=0;jang<DET_STRIDE;jang++,ioff+=numray,joff+=numray)
	            for(i=0;i<numray;i++)
	                if(normsc[i+ioff] > 0. && geo[i+joff] > 0.)
                            scat[i+ioff] *= packing_scl/(normsc[i+ioff]*
					geo[i+joff]*(1.+geo[i+GEOFF+2*NUMRAY]));
			else
			    scat[i+joff] = 0.;
                }
	    nrm->scat_plane_eff = scatscl(plane,scat,sino,numang,
    		mh->scanner_type,numray,numang,tran_sup,&sclcnts,rings);
/*fp = fopen("sino.raw","w");
stat = fwrite(sino,sizeof(float),lensin,fp);
fclose(fp);
for(i=0;i<lensin;i++) 
    scat[i] *= nrm->scat_plane_eff;
fp = fopen("scat.raw","w");
stat = fwrite(scat,sizeof(float),lensin,fp);
fclose(fp);*/
            for(i=0;i<lensin;i++) {
                sinocor[i] = sino[i] - nrm->scat_plane_eff*scat[i];
                scat[i] *= normsc[i];
                }
/*fp = fopen("sinocor.raw","w");
stat = fwrite(sinocor,sizeof(float),lensin,fp);
fclose(fp);*/
	    }
 	else {
            for(i=0;i<lensin;i++)
                sinocor[i] = sino[i];
	    }

        /* Remove geometric effect. */
	for(iang=0,ioff=0;iang<numang/DET_STRIDE;iang++) {
 	    for(jang=0,joff=0;jang<DET_STRIDE;jang++,ioff+=numray,joff+=numray)
	        for(i=0;i<numray;i++)
                    sinocor[i+ioff] *= geo[i+joff]*(geo[i+GEOFF]+geo[i+GEOFF+NUMRAY]);
            }
/*if(iter > 0) {
fp = fopen("sinocor_nogeo.raw","w");
stat = fwrite(sinocor,sizeof(float),lensin,fp);
fclose(fp);
}*/

        /* Compute detector efficiencies. */
        compute_detsum(numang,numray,sinocor,nrm);
        compute_eff(norm,numang,numray,nrm);

        /* Calculate scatter normalization factors. */
	sum = 0.; nsum = 0;
        for(i=0;i<lensin;i++)
	    if(norm[i] > 0) {
	        sum += norm[i];
	        ++nsum;
	        }
	nrm->scat_scale = (float)nsum/sum;
        for(i=0;i<lensin;i++)
            normsc[i] = norm[i]*nrm->scat_scale;

        /* Compute true normalization factors. */
	sum = 0.; nsum = 0;
	for(iang=0,ioff=0;iang<numang/DET_STRIDE;iang++) {
 	    for(jang=0,joff=0;jang<DET_STRIDE;jang++,ioff+=numray,joff+=numray)
	        for(i=0;i<numray;i++) {
                    norm[i+ioff] *= geo[i+joff]*(geo[i+GEOFF]+geo[i+GEOFF+NUMRAY]);
		    if(norm[i+ioff] > 0) {
                        sum += norm[i+ioff];
	                ++nsum;
	                }
		    }
            }
	nrm->true_scale = (float)nsum/sum;
        for(i=0;i<lensin;i++)
            norm[i] *= nrm->true_scale;
/*if(iter > 0) {
fp = fopen("normtr.raw","w");
stat = fwrite(norm,sizeof(float),lensin,fp);
fclose(fp);
fp = fopen("normsc.raw","w");
stat = fwrite(normsc,sizeof(float),lensin,fp);
fclose(fp);
}*/

	if(iter > 0) {
	    /* Calculate scatter plane efficiency. First, denormalize 
	       scatter estimate. */
            for(i=0;i<lensin;i++) {
	        if(normsc[i] > .0001)
	    	    scat[i] /= normsc[i];
	        else
	            scat[i] = 0.;
		}
	    nrm->scat_plane_eff = scatscl(plane,scat,sino,numang,
	    		mh->scanner_type,numray,numang,tran_sup,&sclcnts,rings);
	    avgscl += nrm->scat_plane_eff;
	    }
	else {
	    nrm->scat_plane_eff = 1.;
	    }
        if((stat=write_norm(nrmfil,nrm,plane)) != OK) {
            fprintf(stderr,"Error writing %s, plane %d\n",nrmfil,plane);
            exit(ERROR);
            }

	if(iter > 0) {
            for(i=0;i<lensin;i++)
                sinocor[i] = sino[i] - nrm->scat_plane_eff*scat[i];
 	    }
	scale[plane] = 0.;
	for(iang=0,ioff=0;iang<numang/DET_STRIDE;iang++) {
 	    for(jang=0,joff=0;jang<DET_STRIDE;jang++,ioff+=numray,joff+=numray)
	        for(i=0;i<numray;i++)
		    if(geo[i+joff] > 0.)
			/* Geometric factors already applied to sinocor.*/
	    	        scale[plane]+=norm[i+ioff]*sinocor[i+ioff]/(geo[i+joff]*(geo[i+GEOFF]+geo[i+GEOFF+NUMRAY]));
	    }

	free(sino);
	free(geo);
	free(sh);
	free(shg);
	if(iter > 0) {
	    free(scat);
	    free(nrm);
	    }
        }
    if(iter == 0)
	avgscl = mh->nplane;
    printf("\nAverage scatter scale factor: %f\n",avgscl/(float)mh->nplane);

    /* Now calculate trues plane efficiency and store in subheaders. */
    for(sum=0.,plane=1;plane<=mh->nplane;plane++)
    	sum += scale[plane];
avgscl = 0.;
    for(plane=1;plane<=mh->nplane;plane++) {
        scale[plane] = sum/((float)mh->nplane*scale[plane]);
	avgscl += scale[plane];
	}
printf("Average true_plane_eff: %f\n",avgscl/mh->nplane);
    if((write_true_plane_eff(nrmfil,scale,mh->nplane)) != NULL) {
        fprintf(stderr,"Could not write to %s,plane %d in makenorm\n",nrmfil,plane);
        exit(ERROR);
        }

    for(i=0;i<rng->nring;i++) free(scatin[i]);
    free(scatin);

    }

}


/*****************************************/
void compute_detsum(numang,numray,sino,nrm)
/*****************************************/

float 	*sino;
int 	numang, 
	numray;
NormData *nrm;

{
int iang,deta,detb,i,ioff,ray,m;

float mean;

for(i=0;i<NCRYSTALS;i++) nrm->detsum[i] = 0.;
for (iang=0,ioff=0;iang<numang; iang++,ioff+=numray) {
    for(m=0;m<MASH;m++) {
        for (ray=0; ray<numray; ray++) {
            get_dets(iang*MASH+m,ray-numray/2,&deta,&detb);
	    nrm->detsum[deta] += sino[ray+ioff];
	    nrm->detsum[detb] += sino[ray+ioff];
	    }
	}
    }

mean = 0.;
for(i=0;i<NCRYSTALS;i++) mean += nrm->detsum[i];
mean /= NCRYSTALS;
for(i=0;i<NCRYSTALS;i++)  {
    if(nrm->detsum[i] > 0.)
	nrm->detsum[i] = mean/nrm->detsum[i];
    else
	nrm->detsum[i] = 1.;
    }

/* Compute sums over banks of detectors. */
/*for(deta=0;deta<NCRYSTALS;deta++) {
    nrm->detsum_bank[deta] = 0.;
    for(ray=-NUMRAY/2;ray<NUMRAY/2;ray++) {
	detb = (deta - ray + NCRYSTALS/2)%NCRYSTALS;
	nrm->detsum_bank[deta] += nrm->detsum[detb];
	}
    }*/

}

/**************************************/
void compute_eff(norm,numang,numray,nrm)
/**************************************/

float 	*norm;
int 	numang, 
	numray;
NormData *nrm;

{
int iang,deta,detb,i,ray;

float norm1;

for(i=0;i<numang*numray;i++) 
    norm[i] = 0.;
for (iang=0;iang<numang*MASH;iang++) {
    for (ray=0; ray<numray; ray++) {
        get_dets(iang,ray-numray/2,&deta,&detb);
/*        norm1 = (nrm->detsum_bank[deta] + nrm->detsum_bank[detb] 
		- nrm->detsum[deta] - nrm->detsum[detb])/
				(nrm->detsum[deta]*nrm->detsum[detb]);*/
        norm1 = 1./(nrm->detsum[deta]*nrm->detsum[detb]);
        norm[ray+numray*(iang/MASH)] += norm1;
	}
    }
for(i=0;i<numang*numray;i++) 
    norm[i] = MASH/norm[i];


}
@
