head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.04.01.14.39.42;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*$Id: sbhdrdmp.c,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $*/
/*$Log: sbhdrdmp.c,v $
 * Revision 3.1  1998/03/24  23:43:10  jmo
 * ..
 *
 * Revision 3.0  1997/10/29  19:26:43  jmo
 * Support Exact HR.
 *
 * Revision 2.6  1997/08/06  18:22:04  jmo
 * Last version before adding CTI rev 7 support.
 *
 * Revision 2.5  1996/06/27  19:15:30  jmo
 * Bugs fixed by Mark Kaufman.
 *
 * Revision 2.4  1996/05/30  19:04:20  jmo
 * *** empty log message ***
 *
 * Revision 2.3  1996/04/23  15:02:05  jmo
 * Version released April 23, 1996
 *
 * Revision 2.1  1996/04/23  14:56:14  jmo
 * Version Released on Web site, April 23, 1996
 *
 * Revision 2.0  1996/01/27  13:46:16  jmo
 * Version installed at Neuro-imaging group, January 1996
 *
 * Revision 1.2  1996/01/18  16:10:11  jmo
 * Modified file formats, Interfile and Matrix Rev 7.0 support.
 *
 * Revision 1.1  1996/01/12  18:09:27  jmo
 * Initial revision
 *
 * Revision 1.5  1995/11/08  14:08:31  jmo
 * Initial tests on version 6 and 7 combined I/O.
 *
 * Revision 1.4  1995/10/25  16:36:32  jmo
 * *** empty log message ***
 *
 * Revision 1.3  1995/09/19  10:44:23  jmo
 * Version for revised paper to physics in medicine and biology.
 *
 * Revision 1.2  95/05/04  10:37:40  jmo
 * Modified normalization files.
 * 
 * Revision 1.1  95/01/19  22:40:20  ty7777
 * Initial revision
 * */

/*--------------------------------------------------------------------

Program: sbhdrdmp

Purpose: Display information from UCLA file image subheader.

Perpetrator: John Ollinger

Date: November 15, 1988

Copyright 1991-1996, Washington University.
All rights reserved. Unauthorized reproduction prohibited.

---------------------------------------------------------------------*/

#include <stdio.h>
#include <fcntl.h>
#include <math.h>
#include <imagio.h>
#include <matrix.h>

static char rcsid [] = "$Header: /home/fafner/jmo/src/scatter/scat/RCS/sbhdrdmp.c,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $";

main(argc,argv)

int	argc;
char	*argv[];

{

SubHeader  *scansh;
SubHeader  *imgsh;
Norm_subheader *nrmsh;
Attn_subheader *atnsh;

char    *filnam,     /* Input file name. */
	*dtyp;
long    stat;
long    mode,
	plane,
	frame = 1,
	gate = 1,
	data = 0,
	bed = 0;
int	i;
float	duration,min,max;

if(argc < 3) {
	printf("Usage: sbhdrdmp file-name plane [-f frame -g gate -d data -b bed].\n");
	exit(0);
	}

filnam = argv[1];
plane = atoi(argv[2]);
for(i=0;i<argc;i++) {
    if(!strcmp(argv[i],"-f")) {
	frame = atoi(argv[i+1]);
	++i;
	}
    else if(!strcmp(argv[i],"-g")) {
	gate = atoi(argv[i+1]);
	++i;
	}
    else if(!strcmp(argv[i],"-d")) {
	data = atoi(argv[i+1]);
	++i;
	}
    else if(!strcmp(argv[i],"-b")) {
	bed = atoi(argv[i+1]);
	++i;
	}
    }

if(strstr(argv[1],".scn") || strstr(argv[1],".S")) {

    if( (scansh = (SubHeader *)
	getsbhdr(filnam,plane,frame,gate,data,bed)) == NULL) {
	printf("Error in getscansh->\n");
	exit(ERROR);
	}

    switch (scansh->number_format) {
        case BYTE_DATA:
    	    dtyp = "byte";
	    break;
        case SHORT_DATA:
    	    dtyp = "short";
	    break;
        case FLOAT_DATA:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
    duration = .001*(float)scansh->duration;
    min = scansh->min*scansh->scale_factor;
    max = scansh->max*scansh->scale_factor;

printf("\n*** Scan subheader ***\n\
Data type: %s, X dimension: %d, Y dimension: %d, Sampling distance: %6.3f mm\n\
Minimum: %f, Maximum: %f, Scale factor  %9.7f\n\
Prompts: %d, Delayeds: %d, Multiples: %d\n\
Net trues: %d, Total coincidence rate: %d, Deadtime Correction: %6.4f\n\
Start time: %d seconds, Duration: %8.3f seconds\n",
dtyp, scansh->dim1, scansh->dim2, 10.*scansh->sample_size_1,
min, max, scansh->scale_factor,
scansh->total, scansh->delayeds, scansh->multiples,
scansh->trues, scansh->count_rate, scansh->deadtime_corr,
scansh->start_time, duration);

}
else if(strstr(argv[1],".img") || strstr(argv[1],".v")) {

    if( (imgsh = (SubHeader *)
	getsbhdr(filnam,plane,frame,gate,data,bed)) == NULL) {
	printf("Error in getsbhdr\n");
	exit(ERROR);
	}

    switch (imgsh->number_format) {
        case BYTE_DATA:
    	    dtyp = "byte";
	    break;
        case SHORT_DATA:
    	    dtyp = "short";
	    break;
        case FLOAT_DATA:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
    duration = .001*(float)imgsh->duration;
    min = imgsh->min*imgsh->scale_factor;
    max = imgsh->max*imgsh->scale_factor;
printf("max: %d\n",imgsh->max);

printf("\n*** Image subheader ***\n\
Data type: %s, Minimum: %f, Maximum: %f\n\
X dimension: %d, Y dimension: %d, Z dimension: %d\n\
Pixel size: %8.5f mm, Slice thickness: %6.3f mm\n\
Quantification scale factor: %g, Deadtime correction factor: %6.4f\n\
Frame Duration: %6.1f seconds, Frame start time: %d seconds.\n",
dtyp,min,max,imgsh->dim1,imgsh->dim2,imgsh->dim3,10.*imgsh->sample_size_1,
10.*imgsh->sample_size_3,imgsh->scale_factor,imgsh->deadtime_corr,
imgsh->duration/1000.,imgsh->start_time);

    }
else if(strstr(argv[1],".nrm")) {

    if( (nrmsh = (Norm_subheader *)
	getsbhdr6(filnam,plane,frame,gate,data,bed)) == NULL) {
	printf("Error in getsbhdr->\n");
	exit(ERROR);
	}

    switch (nrmsh->data_type) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case VAX_I2:
    	    dtyp = "VAX short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
printf("\n*** Norm subheader ***\n\
Data type: %s, X dimension: %d, Y dimension: %d\n\
Scale factor  %9.7f, FOV source width: %f\n\
Calibration factor: %9.4f\n",
dtyp, nrmsh->dimension_1, nrmsh->dimension_2, 
nrmsh->scale_factor,nrmsh->fov_source_width,nrmsh->ecat_calib_factor);

    }
else if(strstr(argv[1],".atn")) {

    if( (atnsh = (Attn_subheader *)
	getsbhdr6(filnam,plane,frame,gate,data,bed)) == NULL) {
	printf("Error in getsbhdr->\n");
	exit(ERROR);
	}

    switch (atnsh->data_type) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case VAX_I2:
    	    dtyp = "VAX short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
printf("\n*** Attn subheader ***\n\
Data type: %s, X dimension: %d, Y dimension: %d\n\
Scale factor  %9.7f, Attenuation coefficient: %f\n\
Sampling distance: %9.4f X origin: %9.4f, Y origin: %9.4f\n\
X radius: %9.4f, Y radius %9.4f, Type: %d\n",
dtyp, atnsh->dimension_1, atnsh->dimension_2, 
atnsh->scale_factor,atnsh->attenuation_coeff,atnsh->sample_distance,
atnsh->x_origin,atnsh->y_origin,atnsh->x_radius,atnsh->y_radius,
atnsh->attenuation_type);

    }
else
    printf("Unsupported image type.\n");


exit(0);
}
@
