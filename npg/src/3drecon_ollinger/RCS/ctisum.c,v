head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.04.01.14.39.42;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*--------------------------------------------------------------------

Program: scansum

Purpose: Add two cti files.

Perpetrator: John Ollinger

Date: August 7, 1990

Copyright 1991-1996, Washington University.
All rights reserved. Unauthorized reproduction prohibited.

---------------------------------------------------------------------*/

#include <stdio.h>
#include <math.h>
#include <fcntl.h>
#include <string.h>
#include <imagio.h>
#include <cti_proto.h>

#define MAXNAME 120
#define TRUE 1
#define FALSE 0

static char rcsid [] = "$Header: /home/fafner/jmo/src/scatter/scat/RCS/ctisum.c,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $";

void main(argc,argv)

int	argc;
char	*argv[];

{

SubHeader	*shimg;
SubHeader	*shscan;
MainHeader     *mh;
void		*sh;

FILE	*fp;

int	i,j,k,stat,length,arg,lcforce,*pln,npln=1,ipln,nfil=0,ifil,
	outdim,ioff,joff,write_enable=FALSE,
	plane=1,frame1=1,gate=1,data=0,bed=0,
	jc,ic,dim1,dim2,ijc,*frm;

float	*sum,*img,scale;

char	ans[MAXNAME],**files,*outfil,*ptr;

if(argc < 3) {
        fprintf(stderr,"Usage: scansum output file1,frm1 file2,frm2 file3,frm3 ... [-f]\n");
        exit(-1);
        }

outfil = argv[1];

files = (char **)malloc(argc*sizeof(char *));
frm =    (int  *)malloc(argc*sizeof(int));

lcforce = FALSE;
for(i=2;i<argc;i++) {
    if(!strcmp(argv[i],"-f"))
	lcforce = TRUE;
    else {
	ptr = strstr(argv[i],",");
	frm[nfil] = atoi(ptr+1);
	*ptr = NULL;
	files[nfil] = argv[i];
	++nfil;
	}
    }

if((mh=getmhdr(files[0])) == NULL) {
    fprintf(stderr,"Could not read main header., %s\n",files[0]);
    exit(ERROR);
    }
if((sh=getsbhdr(files[0],plane,frm[0],gate,data,bed)) == NULL) {
    fprintf(stderr,"Could not read main header., %s\n",files[0]);
    exit(ERROR);
    }
if(strstr(files[0],".scn")) {
    shscan = (SubHeader *)sh;
    dim1 = shscan->dim1;
    dim2 = shscan->dim2;
    length = dim1*dim2;
    shscan->deadtime_corr = 1.;
    }
else if(strstr(files[0],".img")) {
    shimg = (SubHeader *)sh;
    dim1 = shimg->dim1;
    dim2 = shimg->dim2;
    length = dim1*dim2;
    }
else {
    fprintf(stderr,"Invalid file name: %s.\n",files[0]);
    exit(-1);
    }

if((fp = fopen(outfil,"r")) == NULL | lcforce == TRUE) {
    /* File does not exist, write to it. */
    write_enable = TRUE;
    }
else {
    fclose(fp);
    ans[0] = NULL;
    do {
        fprintf(stderr,"Write output to %s? (y/n)\n",outfil);
        scanf("%s",ans);
        if(!strcmp(ans,"y")) 
    	    write_enable = TRUE;
	else if(!strcmp(ans,"n"))
	    exit(OK);
        } while(strcmp(ans,"y") && strcmp(ans,"n"));
    }

/*mh->number_format = IEEE_R4;*/
for(plane=1;plane<=mh->nplane;plane++) {
    if(plane == 1)
        printf("Reading %s\n",files[0]);
    if((sum=rdimg(files[0],plane,frm[0],gate,data,bed)) == NULL) {
        fprintf(stderr,"Error reading %s, plane %d, frame %d\n",files[0],plane,frm[0]);
        exit(ERROR);
        }
    for(i=0;i<length;i++) {
	if(sum[i] < -16384) {
	    sum[i] += 65536;
	    printf("Underflow encountered.\n");
	    }
	}
    for(ifil=1;ifil<nfil;ifil++) {
        if(plane == 1)
            printf("Reading %s, frame %d\n",files[ifil],frm[ifil]);
        free(sh);
        if((sh=getsbhdr(files[ifil],plane,frm[ifil],gate,data,bed)) == NULL) {
            fprintf(stderr,"Could not read subheader., %s, frame %d\n",files[0],frm[0]);
            exit(ERROR);
            }
        if((img=rdimg(files[ifil],plane,frm[ifil],gate,data,bed)) == NULL) {
            fprintf(stderr,"Error reading %s, plane %d, frame %d\n",files[ifil],plane,frm[ifil]);
            exit(ERROR);
            }
        for(i=0;i<length;i++) {
	    if(img[i] < -16384) {
		img[i] += 65536;
		printf("Underflow encountered.\n");
		}
 	    sum[i] += img[i];
	    }
        free(img);
        }

    shscan = (SubHeader *)sh;
    shscan->deadtime_corr = 1.;
/*    shscan->number_format = IEEE_R4;*/
    mh->nframe = 1;
    if((stat=wrimg(outfil,sum,mh,shscan,plane,frame1,gate,data,bed)) != OK) {
        fprintf(stderr,"Error writing %s, plane %d\n",outfil,plane);
        exit(ERROR);
        }
    free(sum);

    }

}
@
