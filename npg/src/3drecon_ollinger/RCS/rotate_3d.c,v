head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.04.01.14.39.42;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*$Id: rotate_3d.c,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $*/
/*$Log: rotate_3d.c,v $
 * Revision 3.1  1998/03/24  23:43:10  jmo
 * ..
 *
 * Revision 3.0  1997/10/29  19:26:43  jmo
 * Support Exact HR.
 *
 * Revision 2.6  1997/08/06  18:33:42  jmo
 * Last version before cti rev 7 capability added.
 *
 * Revision 2.4  1996/06/19  11:20:39  jmo
 *
 * Revision 2.3  1996/04/23  15:02:05  jmo
 * Version released April 23, 1996
 *
 * Revision 2.0  1996/01/27  13:46:13  jmo
 * Version installed at Neuro-imaging group, January 1996
 *
 * Revision 1.2  1996/01/18  16:10:09  jmo
 * Modified file formats, Interfile and Matrix Rev 7.0 support.
 *
 * Revision 1.1  1996/01/12  18:09:24  jmo
 * Initial revision
 *
 * Revision 1.4  1995/03/31  15:47:52  jmo
 *  Version for 951 sent to Pittsburgh.
 *
 * Revision 1.3  95/03/10  16:07:16  jmo
 * Remove last modification.
 * 
 * Revision 1.2  95/03/10  15:31:01  jmo
 * Scale xmax_ends by cpsi to fix error in upper bound.
 * 
 * Revision 1.1  95/01/19  22:40:20  ty7777
 * Initial revision
 * */

/*---------------------------------------------------------------

Subroutine: rotate_3d

Purpose: Use trilinear interpolation to calculate samples of a plane that
	 intersects a conical volume of finite extent at an arbitrary 
	 angle and z axis position.

Coordinate system: This routine assumes that the pixel represented
	by volume[0][0][0] in "C" lies at the upper left corner 
	in the rear of the volume. 

By: John Ollinger

Date: July 29, 1992

Copyright 1991-1996, Washington University.
All rights reserved. Unauthorized reproduction prohibited.

----------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <math.h>

#include <matrix.h>
#include <imagio.h>
#include <scatter.h>

#define TRUE 1
#define FALSE 0
#define PAD 1 /* Amount to pad inscribed circle. */

static char rcsid [] = "$Header: /home/fafner/jmo/src/scatter/scat/RCS/rotate_3d.c,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $";

/*****************************************************************/
void rotate_3d(
/*****************************************************************/

float	theta,		/* Rotation about z axis.		*/
float	psi,		/* Oblique angle of output plane.	*/
float	***volume, 	/* Images in lab coordinates.	*/
float	rotpln[],	/* Rotated image.			*/
int	plnmin,		/* Minimum plane number.		*/
int	plnmax,		/* Maximum plane number.		*/
int	plane,		/* Transverse plane which intersects detector ring.*/
float	fill,		/* Value non-interpolated values set to.*/
ScatterTable *sc)

{

static int 
	first=TRUE,imgdimm1=0,
	planem1 = -1,
	*imin,			/* Starting pixel of circle.	*/
	*imax,			/* Ending pixel of circle.	*/
	jmin,jmax,
	jpsi,
	jpsi0,
	*fillmin,
	*fillmax;

static float 
	*tab,
	center,
	slc_pix_ratio,
	pix_slc_ratio,
	*locfill,
	radius,
	spsi,
	cpsi;

static double
	psim1 = 1.e20;

int	i,j,ki,joff,ix,iy,iz,radsq,ray,physpln;

float	xcord,cdsq,
	ctht,stht,spsi_scl,
	cpsictht,cpsistht,tpsi,
	x,y,z,dx,dy,dz,dx1,dy1,dz1,
	x_cnst,y_cnst,z_cnst,xmax_ends;

if(first == TRUE) {
    /* Compute boundaries of plane region to be rotated..*/
    first = FALSE;
    if(NULL==(imin =(int *)malloc((unsigned)(IMGDIM*sizeof(int))))) {
        printf("Could not malloc memory for imin, \"rotate\".\n");
        exit(-1);
        }
    if(NULL==(imax =(int *)malloc((unsigned)(IMGDIM*sizeof(int))))) {
        printf("Could not malloc memory for imax, \"rotate\".\n");
        exit(-1);
        }
    if(NULL==(fillmin =(int *)malloc((unsigned)(IMGDIM*sizeof(int))))) {
        printf("Could not malloc memory for fillmin, \"rotate\".\n");
        exit(-1);
        }
    if(NULL==(fillmax =(int *)malloc((unsigned)(IMGDIM*sizeof(int))))) {
        printf("Could not malloc memory for fillmax, \"rotate\".\n");
        exit(-1);
        }
    if(NULL==(locfill =(float *)malloc((unsigned)(IMGDIM*sizeof(float))))) {
        printf("Could not malloc memory for locfill, \"rotate\".\n");
        exit(-1);
        }
    if(NULL==(tab =(float *)malloc((unsigned)(2*IMGDIM*sizeof(float))))) {
        printf("Could not malloc memory for tab, \"rotate\".\n");
        exit(-1);
        }
    tab += IMGDIM;
    }

/* Recompute sampled region if new value of psi. */
if((psi != psim1) | (plane != planem1) | (sc->imgdim != imgdimm1)) {
    /* Recompute region of image to be sampled. */
    imgdimm1 = sc->imgdim;
    planem1 = plane;
    jpsi = (int)((psi - PSIC_MIN)*PSIC_RATE + .5);
    jpsi0 =(int)((    - PSIC_MIN)*PSIC_RATE + .5);
    cpsi = (float)cos((double)psi);
    spsi = (float)sin((double)psi);
    tpsi = spsi/cpsi;
    slc_pix_ratio = SLCTHK/sc->pixsiz;
    pix_slc_ratio = sc->pixsiz/SLCTHK;
    radius = (float)(sc->imgdim-1)/2.; /* Reduce radius by 1 to allow for 
				      eccentricity of rotated plane. */
    center = radius;
    radsq = radius*radius;
    physpln = sc->physpln[plane];
    /* Find upper and lower bounds for i' in rotated plane. */
    for(j=0,ray=0;j<sc->imgdim;j++,ray+=sc->ray_step) {
	locfill[j] = fill;
        cdsq = (float)j - radius;
        cdsq = radsq - cdsq*cdsq;
	/* Find boundaries of circular region of rotated image.  Check
	   upper bounds for range of cylindrical volume. */
        if(cdsq > 0) 
            xcord = (float)sqrt((float)cdsq);
        else
            xcord = 0;
        /* Find upper bounds on x as determined by ends of cylindrical volume.*/
        if(psi > 0) {
	    if(psi <= sc->psi_shldmax[physpln][j])
	        xmax_ends =  (plnmax - plane)*slc_pix_ratio/spsi - sc->xl10c[jpsi][ray]/sc->pixsiz;
	    else { /*This ray intersects the end-shield, assume no penetration*/
		xmax_ends = 0;
	 	locfill[j] = 0.;
		}
	    }
        else if(psi < 0) {
	    if(psi >= sc->psi_shldmin[physpln][j])
	        xmax_ends = -(plane - plnmin)*slc_pix_ratio/spsi - sc->xl10c[jpsi][ray]/sc->pixsiz;
	    else {/*This ray intersects the end-shield, assume no penetration.*/
		xmax_ends = 0;
	 	locfill[j] = 0.;
		}
	    }
        else
    	    xmax_ends = 2.*radius;
        /* Inscribe region to be rotated by two pixels inside actual limits. */
        if(radius + xcord > xmax_ends) {
            imin[j]  = (int)(radius - xcord) + PAD; 
            imax[j] = (int)(xmax_ends) - PAD;
    	    }
        else {
            imin[j]  = (int)(radius - xcord) + PAD; 
            imax[j] = (int)(radius + xcord) - PAD;
    	    }
	fillmin[j] = imax[j];
	fillmax[j] = (int)(radius + xcord) - PAD;
	/* Skip first and last two rows. */
	imin[0] = 1; imin[1] = 1;
	imax[0] = 1; imax[1] = 1;
	fillmin[0] = 0;
	fillmin[1] = 0;
	fillmax[0] = -1;
	fillmax[1] = -1;
	imax[sc->imgdim-2] = 0;
	imax[sc->imgdim-1] = 0;
	fillmin[sc->imgdim-2] = 0;
	fillmin[sc->imgdim-1] = 0;
	fillmax[sc->imgdim-2] = -1;
	fillmax[sc->imgdim-1] = -1;
        }
    jmin = sc->imgdim+1; jmax = -1;
    for(j=0;j<sc->imgdim;j++) {
 	if(jmin > sc->imgdim && imax[j] > 0)
	    jmin = j;
	}
    for(j=sc->imgdim-1;j>=0;j--) {
 	if(jmax < 0 && imax[j] > 0 )
	    jmax = j;
	}
    /* Compute float table of integer to real indices. */
    for(i=-IMGDIM;i<IMGDIM;i++)
        tab[i] = (float)i;
    psim1 = psi;
    }

ctht = (float)cos((double)theta);
stht = (float)sin((double)theta);
cpsictht = cpsi*ctht;
cpsistht = cpsi*stht;
spsi_scl = spsi*pix_slc_ratio;
tpsi = spsi/cpsi;

x_cnst   =  radius*(1 - cpsictht - stht);
y_cnst   =  radius*(1 + cpsistht - ctht);
z_cnst   = -radius*spsi*pix_slc_ratio + plane;
for(j=0,ray=0,joff=0;j<sc->imgdim;j++,joff+=sc->imgdim,ray+=sc->ray_step) {
    x =  (float)imin[j]*cpsictht + x_cnst;
    y = -(float)imin[j]*cpsistht + y_cnst;
    z =  (float)imin[j]*pix_slc_ratio*spsi + z_cnst +
			(sc->xl10c[jpsi0][ray]+RADIUS_MM)*tpsi/SLCTHK;
    for(i=imin[j];i<imax[j];i++) {
	ix = (int)x;
	iy = (int)y;
	iz = (int)(z + IMGDIM) - IMGDIM; /* Ensure proper truncation. */
	dx = x - tab[ix];
	dy = y - tab[iy];
	dz = z - tab[iz];
	dx1 = 1. - dx;
	dy1 = 1. - dy;
	dz1 = 1. - dz;
	ki = ix + iy*sc->imgdim;
	rotpln[i+joff]  = 
    	  dx1*dy1*dz1*(*(*volume+  iz))[ki]          
	+ dz *dx1*dy1*(*(*volume+iz+1))[ki]
	+ dx1*dy *dz1*(*(*volume+  iz))[ki+sc->imgdim]  
	+ dx1*dy *dz *(*(*volume+iz+1))[ki+sc->imgdim]
	+ dx *dy1*dz1*(*(*volume+  iz))[ki+1]        
	+ dx *dy1*dz *(*(*volume+iz+1))[ki+1]
	+ dx *dy *dz1*(*(*volume+  iz))[ki+sc->imgdim+1] 
	+ dx *dy *dz *(*(*volume+iz+1))[ki+sc->imgdim];
	x += cpsictht;
        y -= cpsistht;
	z += spsi_scl;
	}
    x_cnst += stht;
    y_cnst += ctht;
    /* Assume last pixel value continues outside of region imaged. */
    for(i=fillmin[j];i<fillmax[j];i++)
	rotpln[i+joff] = locfill[j];
    if(imax[j]   < sc->imgdim) rotpln[imax[j]+joff]   = rotpln[imax[j]-1+joff];
    if(imax[j]+1 < sc->imgdim) rotpln[imax[j]+1+joff] = rotpln[imax[j]+joff];
    }

}
@
