head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.04.01.14.39.42;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*$Id: scatter.h,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $*/
/*$Log: scatter.h,v $
 * Revision 3.1  1998/03/24  23:43:10  jmo
 * ..
 *
 * Revision 3.0  1997/10/29  19:26:43  jmo
 * Support Exact HR.
 *
 * Revision 2.4  1997/04/04  20:50:17  jmo
 * Prior to mods for multiple bed positions.
 *
 * Revision 2.3  1996/04/23  15:03:19  jmo
 * Version released April 23, 1996
 *
 * Revision 2.0  1996/01/27  13:46:51  jmo
 * Version installed at Neuro-imaging group, January 1996
 *
 * Revision 1.2  1996/01/18  16:11:21  jmo
 * Modified file formats, Interfile and Matrix Rev 7.0 support.
 *
 * Revision 1.1  1996/01/12  18:09:33  jmo
 * Initial revision
 *
 * Revision 1.8  1995/10/25  16:37:22  jmo
 *
 * Revision 1.7  95/09/19  10:44:41  jmo
 * Version for revised paper to physics in medicine and biology.
 * 
 * Revision 1.6  95/06/19  16:48:41  jmo
 * Add mashed version of cti951
 * 
 * Revision 1.5  95/04/27  17:44:33  jmo
 * Version used for 3d95
 * 
 * Revision 1.4  95/03/31  15:50:28  jmo
 *  Version for 951 sent to Pittsburgh.
 * 
 * Revision 1.3  95/03/03  16:40:12  jmo
 * Add support for CTI 951 and CTI 961 scanners.
 * 
 * Revision 1.2  95/02/18  10:09:58  jmo
 * Fix path to include files.
 * 
 * Revision 1.1  95/01/19  22:40:20  ty7777
 * Initial revision
 * */

/*
Copyright 1991-1996, Washington University.
All rights reserved. Unauthorized reproduction prohibited.
*/

#ifndef SCATTER_INCLUDED
#define SCATTER_INCLUDED

/* This file specifies which include file is to be used. */

#ifdef cti953b
#define SCANNER cti953b
#include <scatter_cti953b.h>
#endif

#ifdef cti951
#define SCANNER cti951
#define CHOP yes
#include <scatter_cti951.h>
#endif

#ifdef cti951m
#define SCANNER cti951m
#define CHOP yes
#include <scatter_cti951m.h>
#endif

#ifdef cti961
#define SCANNER cti961
#define CHOP yes
#include <scatter_cti961.h>
#endif

#ifndef ERROR
#define ERROR   -1
#define OK 0
#endif

#ifdef f3d
#define SEPTA_MODEL f3d
#endif

#ifdef septa
#define SEPTA_MODEL septa
#endif

#define MAXNAME 140
#define TRUE    1
#define FALSE   0

#define ENERGY_THRESH 380. /* Energy threshold in keV.			*/
#define M0C 	511.	/* Product of electron mass and c in keV.	*/
#define PI	3.1415926
#define RAD2DEG 57.295779
#define DEG2RAD .01745329
#define FWHM2SG   (.4246609)	/* Converts from fwhm to std dev. 	*/
#define SG2FWHM   (1./FWHM2SG)	/* Converts from std dev. to FWHM. 	*/
#define FWHM    12.    		/* Resolution of simulated scanner.	*/
#define SIGMA_RES (FWHM*FWHM2SG) /* Std deviation of scanner resolution.*/
#define TC_F18  (157.253)	/* Time constant of decay for f18 in 1/min.  */
#define PHOTON_ANG_FWHM_DEG .3	/* FWHM of deviation of annihilation 
				   photons from 180 degrees (in degrees).*/
#define PHOTON_ANG_FWHM	   (PHOTON_ANG_FWHM_DEG*DEG2RAD)
#define PHOTON_ANG_SIG     (PHOTON_ANG_FWHM_DEG*FWHM2SG*DEG2RAD)

#define MUS_511 0.257   /* Approximate atten. coeff. of tungsten in 1./mm */
#define MU_H2O	.0096	/* Linear atten coeff of water at 511keV in 1/mm.*/
#define MU_GEL	.0099	/* Linear atten coeff of gel phantom at 511keV (1/mm.)*/
#define MU_CSF	.044	/* Linear atten coeff of CsF at 511keV in 1/mm.	*/
#define MU_BGO	.092	/* Linear atten coeff of BGO at 511keV in 1/mm.	*/
#define MU_AL	.0225	/* Linear atten coeff of aluminum at 511keV in 1/mm.*/
#define PR_AL2CSF .47	/* Probability of scatter from aluminum septa to
			   crystal.  */
#define MU_XTAL MU_BGO

#define NONE	0
#define POSITIVE 1
#define NEGATIVE 2
#define ALL 3

#define FOV_ONLY 1
#define OUT_OF_FOV_ONLY 2
#define ALL_DATA 3

/* Defines for tail scaling. */
#define NO_SCALE 0
#define HI_COUNT 1
#define LOW_COUNT 2

#define SS 0
#define EM 1

#define CUBE_HDR_LEN 256

#define MU_FILL 1.    /* rotmu set to this value outside interpolated area.*/
#define EMIS_FILL 0.  /* rotemis set to this value outside interpolated area.*/

/* Defines parameters used to integrate Klein-Nishina equation. */
#define	R0   2.818e-13
#define R0SQ R0*R0
#define DELTA_PSI (PI/360)	/* Step size for Simpson's-rule 
				   integration along psi (oblique angle).*/
#define RK_BOUND .001		/* Error bound of Runge-Kutta integration
			           over theta (in-plane angle).	*/
#define RK_STEP  .001		/* Initial step size as a fraction of
				   interval for Runge-Kutta integration.*/
#define KN_4PI	7.216		/* Integral of Klein-Nishina Equation
				   over 4pi steradians.			*/

#define L_PSI L_INTERP2
#define PSI_ZERO (L_INTERP/2)
#define PSI_MAX  MAXPSI
#define PSI_MIN (-MAXPSI)
#define PSI_INC (2.*MAXPSI/L_PSI)
#define PSI_RATE (1./PSI_INC)

#define L_PSIO L_PSI  /* Parameters for PSIO must equal those for PSI.  */
#define PSIO_MAX PSI_MAX
#define PSIO_MIN PSI_MIN
#define PSIO_INC PSI_INC
#define PSIO_RATE PSI_RATE

#define L_PSI_DIFF   L_INTERP4
#define PSI_DIFF_MIN (PSI_MIN - PSIO_MAX)
#define PSI_DIFF_MAX (PSI_MAX - PSIO_MIN)
#define PSI_DIFF_INC ((PSI_DIFF_MAX - PSI_DIFF_MIN)/L_PSI_DIFF)
#define PSI_DIFF_RATE (1./PSI_DIFF_INC)

#define L_SPSI_DIFF L_INTERP2
#define SPSI_DIFF_MAX (2.*COS_MAXPSI*SIN_MAXPSI) 
#define SPSI_DIFF_MIN (-SPSI_DIFF_MAX)
#define SPSI_DIFF_INC ((SPSI_DIFF_MAX - SPSI_DIFF_MIN)/L_SPSI_DIFF)
#define SPSI_DIFF_RATE (1./SPSI_DIFF_INC)

/*#define L_L L_INTERP
#define L_MIN   (.96*(float)sqrt((double)(RADIUS_DET*RADIUS_DET-DMIN*DMIN)))
#define L_MAX   (2.*RADIUS_DET/COS_MAXPSI)
#define L_INC   ((L_MAX - L_MIN)/L_L)
#define L_RATE  (1./L_INC)
#define LMIN_OVER_LMAX  (L_MIN/L_MAX)*/ /* Ratio of min to max ray length.*/

#define L_L10 L_INTERP
#define L10_MIN (.5*L_MIN - .5*IMGDIM*PIXSIZ)
#define L10_MAX (.5*L_MAX)
#define L10_INC ((L10_MAX - L10_MIN)/L_L10)
#define L10_RATE (1./L10_INC)

#define L_LOVERL L_INTERP
#define LOVERL_MIN  0.
#define LOVERL_MAX  1.3
#define LOVERL_INC  ((LOVERL_MAX - LOVERL_MIN)/L_LOVERL)
#define LOVERL_RATE (1./LOVERL_INC)

#define L_LXOVERL L_INTERP2
#define LXOVERL_MAX (LOVERL_MAX*SPSI_DIFF_MAX)
#define LXOVERL_MIN (-LXOVERL_MAX)
#define LXOVERL_INC ((LXOVERL_MAX - LXOVERL_MIN)/L_LXOVERL)
#define LXOVERL_RATE (1./LXOVERL_INC)

#define L_L3OVERL2 L_INTERP2
#define L3OVERL2_MIN ((RADIUS_DET - RADIUS_MM)/(RADIUS_DET + RADIUS_MM))
#define L3OVERL2_MAX (1./L3OVERL2_MIN)
#define L3OVERL2_INC ((L3OVERL2_MAX - L3OVERL2_MIN)/L_L3OVERL2)
#define L3OVERL2_RATE (1./L3OVERL2_INC)

#define L_L1 L_INTERP
#define L1_MIN  (RADIUS_DET-RADIUS_MM)
#define L1_MAX  (1.05*(RADIUS_DET+RADIUS_MM)/COS_MAXPSI)
#define L1_INC  ((L1_MAX - L1_MIN)/L_L1)
#define L1_RATE (1./L1_INC)

#define L_L2       L_INTERP4
#define L2_MIN     (0)
#define L2_MAX     (LOVERL_MAX*L_MAX)
#define L2_INC     ((L2_MAX - L2_MIN)/L_L2)
#define L2_RATE    (1./L2_INC)

#define L_LP L_INTERP
#define LP_MIN  L1_MIN
#define LP_MAX  L1_MAX
#define LP_INC  L1_INC
#define LP_RATE L1_RATE

#define L_LOVERL_SPSI L_INTERP
#define LOVERL_SPSI L_INTERP
#define LOVERL_SPSI_MAX  (1.5*LOVERL_MAX*SIN_MAXPSI)
#define LOVERL_SPSI_MIN  (-LOVERL_SPSI_MAX)
#define LOVERL_SPSI_INC  ((LOVERL_SPSI_MAX - LOVERL_SPSI_MIN)/L_LOVERL_SPSI)
#define LOVERL_SPSI_RATE (1./LOVERL_SPSI_INC)

#define L_L1OVERL2 L_INTERP
#define L1OVERL2_MAX (SIN_MAXPSI*LOVERL_MAX/LOVERL_MIN)
#define L1OVERL2_MIN (-L1OVERL2_MAX)
#define L1OVERL2_INC ((L1OVERL2_MAX - L1OVERL2_MIN)/L_L1OVERL2)
#define L1OVERL2_RATE (1./L1OVERL2_INC)

#define L_L1OVERL2_SPSI L_INTERP
#define L1OVERL2_SPSI_MAX (SIN_MAXPSI*LOVERL_MAX/LOVERL_MIN)
#define L1OVERL2_SPSI_MIN (-L1OVERL2_SPSI_MAX)
#define L1OVERL2_SPSI_INC ((L1OVERL2_SPSI_MAX-L1OVERL2_SPSI_MIN)/L_L1OVERL2_SPSI)
#define L1OVERL2_SPSI_RATE (1./L1OVERL2_SPSI_INC)

#define L_PSIC_P_PSIO L_INTERP4
#define PSIC_P_PSIO_MAX (PSIC_MAX + PSIO_MAX)
#define PSIC_P_PSIO_MIN (PSIC_MIN + PSIO_MIN)
#define PSIC_P_PSIO_INC ((PSIC_P_PSIO_MAX - PSIC_P_PSIO_MIN) /L_PSIC_P_PSIO)
#define PSIC_P_PSIO_RATE (1./PSIC_P_PSIO_INC)

#define L_PSIS L_INTERP4
#define PSIS_MAX (PSIC_MAX + PSI_MAX)
#define PSIS_MIN (PSIC_MIN + PSI_MIN)
#define PSIS_INC ((PSIS_MAX - PSIS_MIN)/L_PSIS)
#define PSIS_RATE (1./PSIS_INC)

#define L_THETAS L_INTERP2
#define THETAS_MAX  (120*DEG2RAD)
#define THETAS_MIN  (-THETAS_MAX)
#define THETAS_INC  ((THETAS_MAX - THETAS_MIN)/(L_THETAS))
#define THETAS_RATE (1./THETAS_INC)

#define L_THETA_DIFF L_INTERP2
#define THETA_DIFF_MAX  (PI)
#define THETA_DIFF_MIN  (-THETA_DIFF_MAX)
#define THETA_DIFF_INC  ((THETA_DIFF_MAX - THETA_DIFF_MIN)/L_THETA_DIFF)
#define THETA_DIFF_RATE (1./THETA_DIFF_INC)

#define L_UPS L_THETAS
#define UPS_MIN THETAS_MIN
#define UPS_MAX THETAS_MAX  
#define UPS_INC THETAS_INC
#define UPS_RATE THETAS_RATE

#define L_DET_SURV  L_INTERP4
#define DET_SURV_MIN 0.
#define DET_SURV_MAX 1.
#define DET_SURV_INC (1./L_DET_SURV)
#define DET_SURV_RATE (1./DET_SURV_INC)

#define L_ATTEN L_INTERP
#define ATTEN_MIN  0
#define ATTEN_MAX  1.10
#define ATTEN_INC  ((ATTEN_MAX - ATTEN_MIN)/L_ATTEN)
#define ATTEN_RATE (1./ATTEN_INC)

#define MAXPSI_ATTEN_OVER_MAXPSI 1 /* Minimum factor relating num_psi to 
		num_psi_att.  Also gives ration of MAXPSI to MAXPSI_ATTEN.  */

#define NUM_ENERGY 5
#define L_ATTEN_SCL L_INTERP
#define ATTEN_SCL_MAX 1.427
#define ATTEN_SCL_MIN 1.
#define ATTEN_SCL_INC ((ATTEN_SCL_MAX - ATTEN_SCL_MIN)/L_ATTEN_SCL)
#define ATTEN_SCL_RATE (1./ATTEN_SCL_INC)

/* Structures used to define plane sampling for scatter correction. */
struct  ringdefine {
    int	ring1;
    int	ring2;
    int	ringdiff;
    };

struct ringinfo {
    int xdim;		/* X dimension of scatter estimate. 		*/
    int ydim;		/* Y dimension of scatter estimate. 		*/
    int minring;
    int maxring;
    int nring;		/* Number of rings for which scatter computed. */
    int nringpair;	/* Number of ring-pairs for which scatter computed. */
    int rings[50];	/*  Number of rings for which scatter estimated. */
    struct ringdefine ringdef[NUM_RINGPAIR];
    };

/* Structure containing tables relating direct d,theta to scattered d,theta */
struct coord_entry {
    int	N;		/* Number of entries for this position. 	*/
    float *fo;		/* Fraction that intersect output detector. 	*/
    int *deltht;	/* Theta offset to output point.		*/
    int	*d2;		/* Distance offset to output point. (may overflow) */
    int	*idout;		/* Distance in downsampled output array.        */
    };

struct output_coordinates {
    struct coord_entry entry[NUMRAY][ANG_DSAMP];
    };

#ifdef DEBUG

#define PSIO_FP(A,B) 	 B = (A*PSIO_INC    + PSIO_MIN)*RAD2DEG
#define L_FP(A,B) 	 B =  A*L_INC       + L_MIN
#define L1_FP(A,B) 	 B =  A*L1_INC      + L1_MIN
#define L2_FP(A,B) 	 B =  A*L2_INC      + L2_MIN
#define L20_FP(A,B) 	 B =  A*L2_INC      + L2_MIN
#define L1P_FP(A,B) 	 B =  A*LP_INC      + LP_MIN
#define LOVERL_FP(A,B) 	 B =  A*LOVERL_INC  + LOVERL_MIN
#define LXOVERL_FP(A,B)  B =  A*LXOVERL_INC + LXOVERL_MIN
#define L3OVERL2_FP(A,B) B =  A*L3OVERL2_INC + L3OVERL2_MIN
#define PSIC_PSIO_FP(A,B) B =((A*PSIC_P_PSIO_INC + PSIC_P_PSIO_MIN)*RAD2DEG)
#define THETAS_FP(A,B) 	 B =((A*THETAS_INC  + THETAS_MIN)*RAD2DEG)
#define PSIC_FP(A,B) 	 B =((A*PSIC_INC    + PSIC_MIN)*RAD2DEG)
#define PSIS_FP(A,B) 	 B =((A*PSIS_INC    + PSIS_MIN)*RAD2DEG)
#define UPS_FP(A,B) 	 B =((A*UPS_INC     + UPS_MIN )*RAD2DEG)
#define THT_DIFF_FP(A,B) B =((A*THETA_DIFF_INC+THETA_DIFF_MIN)*RAD2DEG)
#define ATTEN_FP(A,B)    B =(A*ATTEN_INC   + ATTEN_MIN)
#define PSI_DIFF_FP(A,B) B =((A*PSI_DIFF_INC+ PSI_DIFF_MIN)*RAD2DEG)
#define DTHT_FP(A,B)     B =((float)A*sc->ang_inc*RAD2DEG)
#define ATT_SCL_FP(A,B)  B =(A*ATTEN_SCL_INC + ATTEN_SCL_MIN)

#else

#define PSIO_FP(A,B)
#define L_FP(A,B)
#define L1P_FP(A,B)
#define L2_FP(A,B)
#define L20_FP(A,B)
#define LOVERL_FP(A,B)
#define LXOVERL_FP(A,B)
#define L3OVERL2_FP(A,B)
#define PSIC_PSIO_FP(A,B)
#define THETAS_FP(A,B)
#define PSIC_FP(A,B)
#define PSIS_FP(A,B)
#define UPS_FP(A,B)
#define THT_DIFF_FP(A,B)
#define ATTEN_FP(A,B)
#define PSI_DIFF_FP(A,B)
#define DTHT_FP(A,B)
#define ATT_SCL_FP(A,B)

#endif

struct bed_pos {
    float min;		/* Minimum bed position.		*/
    float max;		/* Maximum bed position. 		*/
    int npos;		/* Length of bed_pos table.		*/
    float *pos;		/* Table of bed positions.		*/
    int	  num_virtplns;	/* Number of virtual planes.		*/
    int	  *phys_plane;	/* Table relating virtual plns to true pln.*/
    int   *pln_offset; /* Table relating virtual plane to file offset.*/
    int	  F3d;		/* TRUE: Fully 3d scan.			*/
    float  duration;
    };

struct scatter_tab {
int imgdim;	/* Dimension of reconstructed image. */
int imgsq;	/* Length of reconstructed image. */
float pixsiz;	/* Pixel size in mm.			*/
int numray;	/* Number of rays to be used. */
float raysiz;	/* Width of rays in mm. */
int numang;	/* Number of angles to be used. */
int ang_step;	/* Step size between processed angles. */
int img_step;	/* Ratio of ray step size to pixel step size. */
int ray_step;	/* Number of RAYSIZ rays corresponding to an image pixel.*/
int frame;	/* Frame number to be processed. */
float ang_inc;	/* Angular increment between projection in radians. */
int lensin;	/* Length of sinogram.		*/
int numpln;	/* Number of planes to be processed. */
int numvpln;    /* Number of virtual planes in multiple scans. */
int *physvpln;   /* Physical plane corresponding to virtual plane. */
int *physpln;   /* Physical plane corresponding to downsampled plane. */
int *filenum;   /* Number of file containing plane.  */
float *plnpos;  /* Position of physical plane corresponding to virtual plane.*/
float *bed_pos;		/* Bed position for specific file. */
int   nfile;		/* Number of emission (and transmission) files. */
int  mainvplane1;/* Virtual plane number of plane 1 of fov of interest. */
int  mainplane1;/* Downsampled plane number of plane 1 of fov of interest. */

float *emis_duration; /* Duration of emission files in minutes. */
float *tran_duration; /* Duration of transmission files in minutes. */
float *blank_duration; /* Duration of blank files in minutes. */
float *start_time; /* Time scan started in minutes since 1900. */
int tran_plnmin; /* Minimum plane number stored in transmission volume. */
int tran_plnmax; /* Maximum plane number stored in transmission volume. */
int emis_plnmin; /* Minimum plane number stored in emission volume. */
int emis_plnmax; /* Maximum plane number stored in emission volume. */
int iter_type;   /* SS: successive subsitutions; EM: EM algorithm. */
float emis_cutoff; /* Cutoff freq of Hanning filter, fraction of Nyquist rate.*/
float tran_cutoff; /* Cutoff freq of Hanning filter, fraction of Nyquist rate.*/
char  table_name[MAXNAME];  /* File containing lookup tables.	*/
int lmin[IMGDIM];  /* Minimum coordinate of circle in image.	*/
int lmax[IMGDIM];  /* Maximum coordinate of circle in image.	*/
int *L[L_PSI]/*[NUMRAY]*/;   /* Table of max length, L. 	*/
int Lp[NUMRAY];   /* Table of max length, L. 			*/
int *l10[L_PSI]/*[NUMRAY]*/; /* Distance from detector to region imaged  */
int *l20[L_PSIC]/*[NUMRAY]*/; /* Distance from detector to region imaged  */
float *xl10[L_PSI]/*[NUMRAY]*/; /* Distance from det to region imaged  */
float *xl10c[L_PSIC]/*[NUMRAY]*/; /* Distance from det to region imaged  */
int *l1p [L_PSI]/*[L_L1]*/;   /* Distance from detector to region imaged  */
int *loverL[L_L1]/*[L_L]*/; /* Ratio of l1/L, l1p/L, l2/L, l2p/L given l,L */
int *l2poverL[NUMANG2]/*[L_LOVERL]*/; /*  fcn of [l1poverL][angle].   */
int *lxoverL[L_LOVERL]/*[L_PSI_DIFF]*/;
int *l1overl2[L_LOVERL]/*[L_LOVERL]*/; /* Ratio of l1/l2 */
int *thetas[NUMANG2]/*[L_LOVERL]*/;    /* Transverse scattering angle. */
int thts_cvt[L_THETAS]; /* Convert sampling of thetas to ANG_INC. */
int **dthtpp/*[sc->numang][L_PSIO]*/; /* Thetas in output plane. */
int *l1ppoverL[L_LOVERL]/*[L_PSI_DIFF]*/;
int *l2ppoverL[L_THETAS]/*[L_LOVERL]*/;
int *l3ppoverl2pp[L_LOVERL]/*[L_LOVERL]*/;
int *l2overL[L_PSI_DIFF]/*[L_LXOVERL]*/;
int *psic_p_psio[L_LXOVERL]/*[L_LOVERL]*/; /* psic + psio */
int *psic[L_PSIC_P_PSIO]/*[L_PSIO]*/; /* Angle of incidence at scatter xtal.*/
int *psiopp[L_PSIO]/*[L_L3OVERL2]*/; /* angle of incident photon with inclined plane. */
int *psis[L_PSIC]/*[PSI]*/; /* Table of psic + (psi - psio). */
short ***upsilons/*[num_psi][L_PSIS][L_THETAS]*/; /* Total scattering angle. */
int *theta_diff[L_THETAS]/*[NUMANG]*/; /* Difference of theta and thetas. */
int *ds[L_THETA_DIFF]/*[NUMRAY]*/; /* Table giving distance of scatter-ray. */
int *l2[L_L2]/*[L_LOVERL]*/; /* Length traversed by scattered photon. */
int *l2_att[L_PSIC]/*[L_L2]*/; /*Get l2_att from incidence angle and l2.*/
int *angle_wrap_atten[NUMANG3]/*[NUMRAY]*/;/* Maps negative angles into 
					positives for attenuation correction.*/
int *angle_wrap_scat[NUMANG3]/*[NUMRAY]*/;/* Maps negative angles into 
					positives for scat_360 tablle.*/
int npsic[L_PSIC];	/* Table to round down on output psi.	*/

int energy_corr[L_UPS]; /* Table of attenuation coeff corrections as
				    as function of energy.  Stored as indices
				    to exponentiation table. */
int det_surv_511[L_PSIC]; /*Prob of photon not interacting in detector.*/
float energy_thresh;	/* Energy threshold. */
float energy_frac[L_UPS]; /* Fraction accepted by energy threshold.*/
float *pow[L_ATTEN]/*[L_ATTEN_SCL]*/; /* exp[atten][exp] yields atten**exp. */
float *septal_pen_l2[L_INTERP]/*[L_INTERP4]*/; 
				   /*Probability of a photon penetrating 
				     the septa without scattering at 
				     angle psi and distance l2 or l1. 
				     Indexed as septal_pen[l2][psi]. */
int	  num_psi;	    /* Number of oblique angles to be used.	*/
float *psi;    /* Table of oblique angles stored. */
float *delpsi; /* Table of differences between oblique angles. */
float **psi_shldmin/*[sc->numpln][sc->imgdim]*/; /* Minimum oblique angle 
						contained in end shields.*/
float **psi_shldmax/*[sc->numpln][sc->imgdim]*/; /* Maximum oblique angle 
						contained in end shields.*/
int   num_psi_att; /* Number of oblique angles in atten table. */
float   *psi_att; /* Table of oblique angles of attenuation table. */
float **septal_pen_l1;  /* prob[psi][l1], probability of direct 
			       photon penetrating septa. */
float *prthts[L_UPS]/*[L_L2]*/; /* Pr[thetas] as fcn of upsilon, l1/L.*/
int num_dir_rings;  /* Number of direct rings to process. 		*/
int num_scat_rings; /* Number of rings photons scattere to . 	*/
int num_scat_sinos; /* Number of estimated scatter sinograms. */
int *dir_ring;	    /* Direct ring in given computed sinogram. */
int *scat_ring;	    /* Scatter ring in given computed sinogram. */
int *dir_ring_list; /* List of direct rings. 		*/
int *scat_ring_list; /* List of rings scatter computed to. */
int **ring_tab; /* Table relating rings involved in est.scatter
sinos. */
float *ring_psio/*[2*NUM_RINGS]*/; /* List of oblique angles corres-
				     ponding to ring-pairs in 3D acq.*/
int   *phys_ring;	/* Maps virtual plane to physical plane. */
int   num_iter;		/* Number of iterations. */
float relax;		/* Relaxation parameter. */
float   ext_tran_up;	/* Length to extend transmission images outside FOV. */
float   ext_tran_dwn;	/* Length to extend transmission images outside FOV. */
float   ext_emis_up;	/* Length to extend emission images outside FOV. */
float   ext_emis_dwn;	/* Length to extend emission images outside FOV. */
int  line_source;	/* Source is a line source. */
float mult_krnl[NUMRAY_OUT]; /* Kernel for multiple scatter model. */
float mult_A; /* Ratio of total multiple scatters to total single scatter.*/
float **mult_scl; /* Angle-dependent scale factor for multiple scatter kernel. */
float mult_sigma; /* Std. deviation of multiple scattering kernel. */
int   mult_len;	/* Length of multiples kernel. */
int   ***tran_sup; /* Range of sinogram bins that sample the subject. */
float	***tran_width; /*Tables of width of transmission images for use in multiple scatter model. */
int   scanner_type; /* Scanner type as defined in the main header. */
struct output_coordinates coords;
};

typedef struct scatter_tab ScatterTable;

#endif /* SCATTER_INCLUDED */.

float *get_2d_sino( char *sinofile,int plane,float *duration,struct scatter_tab *sc);

float *get_emis_sino(char *sinofile,char *nrmfil,char *geofil,float *normtr,float *normsc,int plane,float *duration,struct scatter_tab *sc);

void sino_axl_dsamp(float **sino,float **sino_dsamp,ScatterTable *sc,int dsamp_factor);

int ***get_tran_support(float **tran_sino_dsamp,int numray,int numang,int numpln);

int plnnum_f3d(
/* Convert ring1 and ring2 to plane number. */
int     ring1,
int     ring2,
int     system_type);

float scatscl(
int     plane,
float   *scatpln,
float   *sino,
int     numang,         /* Number of angles in sino and scatpln. */
int     scanner_type,   /* Scanner type as stored in main header. */
int     numray,         /* Number of rays in CTI sinogram.      */
int     numang_dsamp,   /* Number of angles after downsampling. */
int     ***tran_sup,    /* Array giving support of transmission image. */
float   *sclcnts,
float	*rings);

float *fbp(ScatterTable *sc,float *sino,float cutoff);

void rotate_2d(float theta,float *image,float *rotimg,ScatterTable *sc);

float *get_961_sino(
/* Read specified plane from cti-file, returns sinogram.  Note that
   the returned array is overwritten on the next call. */
char    *sinofile,      /* Sinogram file to be read. */
char    *geofil,
char    *nrmfil,        /* Normalization files. */
float   *normtr,
float   *normsc,
int     plane,          /* Plane number in 3D file. */
float   *duration,      /* Duration in seconds. */
struct  scatter_tab *sc,
int     frame);

float *get_3dto2d_sino(
/* Get sinogram "plane" using combinations to yield 31 planes, with
   straight slices from two crosses, one straight and cross planes
   from four crosses. */
char    *sinofile,
char    *geofil,
char    *nrmfil,        /* Normalization files. */
float   *normtr,
float   *normsc,
int     plane,
float   *duration,
struct scatter_tab *sc);

float *get_3d_sino(
char    *sinofile,      /* Sinogram file to be read. */
char    *geofil,
char    *nrmfil,        /* Normalization files. */
float   *normtr,
float   *normsc,
int     ring1,
int     ring2,    /* Rings defining plane to read. */
float   *duration,      /* Duration in seconds. */
struct  scatter_tab *sc);

float *get_cti_sino(
/* Read specified plane from cti-file, returns sinogram.  Note that
   the returned array is overwritten on the next call. */
char    *sinofile,      /* Sinogram file to be read. */
char    *geofil,
char    *nrmfil,        /* Normalization files. */
float   *normtr,
float   *normsc,
int     plane,          /* Plane number in 3D file. */
float   *duration,      /* Duration in seconds. */
struct  scatter_tab *sc,
int     frame);

NormData *read_norm(
	char    *filnam,
	int     plane);

float **inflate_norm(
	NormData *nrm,
	float   *geo);

void ramp_fltr_c(
	float   *filter,
	int     numray);

void hanning_fltr(float   *filter,float   cutoff);

void recfbp(
	ScatterTable *sc,
	float   *sino,
	float   *image,
	float   *filter);

void bakpro(
	float   theta,       /* Angle of projection in radians.      */
	float   *prodat,     /* Projection data.                     */
	float   *image,      /* Reconstructed image.                 */
	float   sino_offset, /* Offset of sinogram center from image center. */
	ScatterTable *sc);

void realft_(float *filter,int *numray,int *ifwd);

void getbed(ScatterTable *sc,char **emisfile, char **tranfile);

int getpln(int ring1,int ring2,struct ringinfo *rng);

float	*ringnum_rev7(int plane);

void ringnum_if(int plane,int *ring,int system_type);

int ringnum(int plane,int *ring,int system_type);

void close_img(char *filename);

void get_dets(int iang,int d,int *deta,int *detb);

float *scat_interp(float **scat,struct ringinfo *rng,int plane,int scanner_type);

void process_args(ScatterTable *sc,int argc,char **argv);

int scat_init(ScatterTable *sc,int num_psi_factor);

void getmem(ScatterTable *sc);

int scat_reinit(ScatterTable *sc);

void recon (
	char    **emisfile,
	char    **tranfile,
	char    **blankfile,
	char    *nrmfil,
	char    *geofil,
	ScatterTable *sc,
	float   **emis_img,
	float   **tran_img,
	int     iter,
	float   *scat_sino[NUM_RINGS],
	int      quiet,
	float   **emis_sino_dsamp,
	int	recon_mode);

void calc_atten(ScatterTable *sc);

void calc_scat(ScatterTable *sc,int iter);

float *interp(int ring,float **scatdsamp);

void write_scatter(ScatterTable *sc,char *tag);

void scatcor_rev6(
	float   **scatter,
	ScatterTable *sc,
	MainHeader *mh,
	int     scale_tails,
	char    *emisbody,
	char    *emisfile,
	char    *nrmfil,
	char    *geofil,
	float   version,
	float 	scale_factor);

void scatcor_rev7(
	float   **scatter,
	ScatterTable *sc,
	MainHeader *mh,
	int     scale_tails,
	char    *emisbody,
	char    *emisfile,
	char    *nrmfil,
	char    *geofil,
	float   version,
	float 	scale_factor,
	int	scatter_only,
	int	norm_only);


void rotate_3d(
float   theta,          /* Rotation about z axis.               */
float   psi,            /* Oblique angle of output plane.       */
float   ***volume,      /* Images in lab coordinates.   */
float   *rotpln,       /* Rotated image.                       */
int     plnmin,         /* Minimum plane number.                */
int     plnmax,         /* Maximum plane number.                */
int     plane,          /* Transverse plane which intersects detector ring.*/
float   fill,           /* Value non-interpolated values set to.*/
ScatterTable *sc);

void rotate_wedge(
float   theta,          /* Rotation about z axis.               */
float   psi,            /* Oblique angle of output plane.       */
float   delpsi,         /* Increment of psi.                    */
float   **volume,       /* Images in lab coordinates.        */
float   *rotpln,        /* Rotated image.                       */
int     plnmin,         /* Minimum plane number.                */
int     plnmax,         /* Maximum plane number.                */
int     plane,          /* Transverse plane which intersects detector ring.*/
ScatterTable *sc,
float   delpsi_max);     /* Maximum increment for psi.           */

void rotate_attn(
float   theta,          /* Rotation about z axis.               */
float   psi,            /* Oblique angle of output plane.       */
float   delpsi,         /* Increment of psi.                    */
float   **volume,       /* Images in lab coordinates.        */
float   *rotpln,        /* Rotated image.                       */
int     plnmin,         /* Minimum plane number.                */
int     plnmax,         /* Maximum plane number.                */
int     plane,          /* Transverse plane which intersects detector ring.*/
ScatterTable *sc,
float   delpsi_max);     /* Maximum increment for psi.           */

void define_rings(ScatterTable *sc,int iter);

void alloc_scatsinos(ScatterTable *sc);

float *scat_interp_rev7(
	float   *rings,
	int     **ring_tab,
	float   **scatter,
	int	numrings);

float packing_scale_961(int plane);

float scatscl_lowcount(
ScatterTable *sc,
struct ringinfo *rng,
char    *emisfile,
int     plane,          /* 3d plane to be scaled. */
float   **scatter,      /* Scatter estimate. */
float   *scale_counts,  /* Number of counts used to compute scale factor. */
char    *nrmfil,
char    *geofil);
@
