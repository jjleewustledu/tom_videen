head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.04.01.14.39.42;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*$Id: mhdrdmp6.c,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $*/
/*$Log: mhdrdmp6.c,v $
 * Revision 3.1  1998/03/24  23:43:10  jmo
 * ..
 *
 * Revision 3.0  1997/10/29  19:26:43  jmo
 * Support Exact HR.
 *
 * Revision 1.2  1997/08/06  18:22:04  jmo
 * Last version before adding CTI rev 7 support.
 *
 * Revision 1.1  1997/04/04  20:50:17  jmo
 * Initial revision
 *
 * Revision 1.4  1995/09/19  10:44:13  jmo
 * Version for revised paper to physics in medicine and biology.
 *
 * Revision 1.3  95/05/04  10:37:28  jmo
 * Modified normalization files.
 * 
 * Revision 1.2  95/03/31  15:49:56  jmo
 *  Version for 951 sent to Pittsburgh.
 * 
 * Revision 1.1  95/01/19  22:40:20  ty7777
 * Initial revision
 * */

/*--------------------------------------------------------------------

Program: mhdr->mp

Purpose: Display information from UCLA file header.

Perpetrator: John Ollinger

Date: November 15, 1988

---------------------------------------------------------------------*/
#include <stdio.h>
#include <fcntl.h>
#include <matrix.h>

#define MAXNAME 120

static char rcsid [] = "$Header: /home/fafner/jmo/src/scatter/scat/RCS/mhdrdmp6.c,v 3.1 1998/03/24 23:43:10 jmo Exp jmo $";

main(argc,argv)

int	argc;
char	*argv[];

{

Main_header *mhdr,
	*getmhdr6();

char    *filnam,date[10],time[10],*dtyp;
int     stat,mode,i,nmat;

if(argc != 2) {
	printf("Usage: mhdr->mp file-name.\n");
	exit(0);
	}

filnam = argv[1];
if((mhdr =  getmhdr6(filnam)) == NULL) {
	printf("Error in getmhdr6.\n");
	exit(-1);
	}
sprintf(date,"%d/%d/%d",mhdr->scan_start_month,mhdr->scan_start_day,mhdr->scan_start_year);
sprintf(time,"%d:%02d:%02d",mhdr->scan_start_hour,mhdr->scan_start_minute,mhdr->scan_start_second);

switch (mhdr->data_type) {
    case SUN_I2:
	dtyp = "Sun short";
	break;
    case SUN_R4:
	dtyp = "IEEE float";
	break;
    case SUN_I4:
	dtyp = "int";
	break;
    case VAX_I2:
	dtyp = "VAX short";
	break;
    default:
	dtyp = "unknown";
	break;
    }

/*switch (mhdr->system_type) {*/


printf("\n\
Date: %s, Time: %s, Original file name: %s\n\
Software version: %d, File type: %d, Acquisition mode: %d, Data type: %s\n\
Number of planes: %d, Number of frames: %d, Number of gates: %d\n\
Number of bed positions: %d, Calibration factor: %6.2f, Transaxial fov: %6.2f\n\
Gantry tilt: %7.3f, Gantry rotation: %7.3f, Bed elevation: %7.2f\n\
Initial bed position: %7.2f, Axial fov: %7.3f, Isotope: %s,\n\
Axial sampling mode: %d, Transaxial sampling mode: %d, Collimator: %6.2f\n\
Coincidence sampling mode: %d, Wobble speed: %d\n\
Lower scatter threshold: %d, Lower true threshold: %d, Upper true threshold: %d\n\
System type: %d, Versions: %s\n\n",
date,time, 		mhdr->original_file_name,
mhdr->sw_version, 	mhdr->file_type, 		mhdr->acquisition_mode,
dtyp,
mhdr->num_planes, 	mhdr->num_frames, 		mhdr->num_gates,
mhdr->num_bed_pos, 	mhdr->calibration_factor, 	mhdr->transaxial_fov,
mhdr->gantry_tilt, 	mhdr->gantry_rotation, 		mhdr->bed_elevation,
mhdr->init_bed_position,	mhdr->axial_fov,	mhdr->isotope_code,
mhdr->axial_samp_mode, 	mhdr->transaxial_samp_mode,	mhdr->collimator,
mhdr->coin_samp_mode, 	mhdr->wobble_speed,
mhdr->lwr_sctr_thres, 	mhdr->lwr_true_thres, 		mhdr->upr_true_thres,
mhdr->system_type,	mhdr->physician_name);

for(i=0;i<mhdr->num_bed_pos;i++)
    printf("Bed offset #%d: %f\n",i,mhdr->bed_offset[i]);
}
@
