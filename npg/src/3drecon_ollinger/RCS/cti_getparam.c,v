head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.04.01.14.39.42;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*--------------------------------------------------------------------

Program: cti_getparam

Purpose: Display information from UCLA file image subheader.

Perpetrator: John Ollinger

Date: November 15, 1988

Copyright 1991-1996, Washington University.
All rights reserved. Unauthorized reproduction prohibited.

---------------------------------------------------------------------*/

#include <stdio.h>
#include <fcntl.h>
#include <math.h>
#include <imagio.h>
#include <cti_proto.h>
#include <matrix.h>

main(argc,argv)

int	argc;
char	*argv[];

{

MainHeader     *mh;
SubHeader  *scansh;
SubHeader  *imgsh;
Norm_subheader *nrmsh;
Attn_subheader *atnsh;

char    *filnam,     /* Input file name. */
	*dtyp;
long    stat;
long    mode,
	plane= -1,
	frame = 1,
	gate = 1,
	data = 0,
	bed = 0;
int	i;
float	duration;

if(argc < 2) {
	printf("Usage: cti_getparam file-name keyword [-p plane -f frame -g gate -d data -b bed].\n");
	printf("Keywords: -scale_factor -ecat_calib_factor -scanner_type -deadtime -xdim -ydim(require -p option) -nplane\n");
	exit(0);
	}

filnam = argv[1];
for(i=0;i<argc;i++) {
    if(!strcmp(argv[i],"-f")) {
	frame = atoi(argv[i+1]);
	++i;
	}
    if(!strcmp(argv[i],"-p")) {
	plane = atoi(argv[i+1]);
	++i;
	}
    else if(!strcmp(argv[i],"-g")) {
	gate = atoi(argv[i+1]);
	++i;
	}
    else if(!strcmp(argv[i],"-d")) {
	data = atoi(argv[i+1]);
	++i;
	}
    else if(!strcmp(argv[i],"-b")) {
	bed = atoi(argv[i+1]);
	++i;
	}
    }

if((mh=getmhdr(filnam)) == NULL) {
    fprintf(stdout,"-1");
    exit(ERROR);
    }
for(i=0;i<argc;i++) {
    if(!strcmp(argv[i],"-scanner_type")) {
        fprintf(stdout,"%d",mh->scanner_type);
	exit(NULL);
	}
    if(!strcmp(argv[i],"-nplane")) {
        fprintf(stdout,"%d",mh->nplane);
	exit(NULL);
	}
    if(!strcmp(argv[i],"-nframe")) {
        fprintf(stdout,"%d",mh->nframe);
        exit(NULL);
        }
    }

if(plane > 0) {
  if(strstr(argv[1],".scn")) {

    if( (scansh = (SubHeader *)
	getsbhdr(filnam,plane,frame,gate,data,bed)) == NULL) {
	fprintf(stdout,"-1\n");
	exit(ERROR);
	}

    switch (scansh->number_format) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
    duration = .001*(float)scansh->duration;

    for(i=0;i<argc;i++) {
        if(!strcmp(argv[i],"-scale_factor"))
	    fprintf(stdout,"%g",scansh->scale_factor);
        else if(!strcmp(argv[i],"-deadtime"))
	    fprintf(stdout,"%g",scansh->deadtime_corr);
        else if(!strcmp(argv[i],"-xdim"))
	    fprintf(stdout,"%d",scansh->dim1);
        else if(!strcmp(argv[i],"-ydim"))
	    fprintf(stdout,"%d",scansh->dim2);
        else if(!strcmp(argv[i],"-duration"))
	    fprintf(stdout,"%d",(int)duration);
	}
    }
  else if(strstr(argv[1],".img")) {

    if( (imgsh = (SubHeader *)
	getsbhdr(filnam,plane,frame,gate,data,bed)) == NULL) {
	fprintf(stdout,"-1");
	exit(ERROR);
	}

    switch (imgsh->number_format) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
    duration = .001*(float)imgsh->duration;

    for(i=0;i<argc;i++) {
        if(!strcmp(argv[i],"-scale_factor"))
	    fprintf(stdout,"%g",imgsh->scale_factor);
        else if(!strcmp(argv[i],"-scanner_type"))
	    fprintf(stdout,"%g",imgsh->scale_factor);
        else if(!strcmp(argv[i],"-deadtime"))
	    fprintf(stdout,"%g",imgsh->deadtime_corr);
        else if(!strcmp(argv[i],"-xdim"))
	    fprintf(stdout,"%d",imgsh->dim1);
        else if(!strcmp(argv[i],"-ydim"))
	    fprintf(stdout,"%d",imgsh->dim2);
        else if(!strcmp(argv[i],"-duration"))
	    fprintf(stdout,"%d",(int)duration);
	}
    }
  else if(strstr(argv[1],".nrm")) {

    if( (nrmsh = (Norm_subheader *)
	getsbhdr6(filnam,plane,frame,gate,data,bed)) == NULL) {
	fprintf(stdout,"-1");
	exit(ERROR);
	}

    switch (nrmsh->data_type) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }

    for(i=0;i<argc;i++) {
        if(!strcmp(argv[i],"-scale_factor"))
	    fprintf(stdout,"%g",nrmsh->scale_factor);
        else if(!strcmp(argv[i],"-ecat_calib_factor"))
	    fprintf(stdout,"%g",nrmsh->ecat_calib_factor);
        else if(!strcmp(argv[i],"-xdim"))
	    fprintf(stdout,"%d",nrmsh->dimension_1);
        else if(!strcmp(argv[i],"-ydim"))
	    fprintf(stdout,"%d",nrmsh->dimension_2);
	}

    }
  else if(strstr(argv[1],".atn")) {

    if( (atnsh = (Attn_subheader *)
	getsbhdr6(filnam,plane,frame,gate,data,bed)) == NULL) {
	fprintf(stdout,"-1\n");
	exit(ERROR);
	}

    switch (atnsh->data_type) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }

    for(i=0;i<argc;i++) {
        if(!strcmp(argv[i],"-scale_factor"))
	    fprintf(stdout,"%g",atnsh->scale_factor);
	}

    }
else {
    if( (scansh = (SubHeader *)
	getsbhdr(filnam,plane,frame,gate,data,bed)) == NULL) {
	fprintf(stdout,"-1\n");
	exit(ERROR);
	}

    switch (scansh->number_format) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
    duration = .001*(float)scansh->duration;

    for(i=0;i<argc;i++) {
        if(!strcmp(argv[i],"-scale_factor"))
	    fprintf(stdout,"%g",scansh->scale_factor);
        else if(!strcmp(argv[i],"-deadtime"))
	    fprintf(stdout,"%g",scansh->deadtime_corr);
        else if(!strcmp(argv[i],"-xdim"))
	    fprintf(stdout,"%d",scansh->dim1);
        else if(!strcmp(argv[i],"-ydim"))
	    fprintf(stdout,"%d",scansh->dim2);
        else if(!strcmp(argv[i],"-duration"))
	    fprintf(stdout,"%d",(int)duration);
	}
    }
  }

exit(0);
}
@
