head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.01.19.22.40.20;	author ty7777;	state Exp;
branches;
next	;


desc
@initial checking in, working version.
@


1.1
log
@Initial revision
@
text
@/*$Id$*/
/*$Log$*/

/*---------------------------------------------------------------

Subroutine: rotate_wedge

Purpose: Integrate over the intersection of a wedge and a cylinder of
	finite extent.  We assume a curved detector geometry, such that
 	the z-coordinate of the intersection of each ray with the cylinder
	depends on the lateral position of the ray.  Therefore, the output
	does not correspond to a plane, since there are step discontinuites in the
	ranges of integration over z.  For this reason, we use a nearest
	neighbor approach to the rotation in theta, (interpolation is
	invalid, because adjacent rays represent differect z-positions).
	Better methods can be developed, but computational complexity is
	a hindrance.

Coordinate system: This routine assumes that the pixel represented
	by volume[0][0][0] in "C" lies at the upper left corner 
	in the rear of the volume. 

By: John Ollinger

Date: July 29, 1992

----------------------------------------------------------------*/

#include <stdio.h>
#include <math.h>

#include "scatter.h"
#include "cube.h"

#define ERROR 	-1
#define PAD 1

static char rcsid [] = "$Header$";

/* CUB_WR(filnam,image,xdim,ydim,type,id)*/
#define CUB_WR(A,B,C,D,E) PutCubePlaneZero(A,B,C,D,E,A);

/****************************************************************************/
rotate_wedge(theta,psi,delpsi,volume,rotpln,plnmin,plnmax,plane,sc,delpsi_max)
/****************************************************************************/

float	theta,		/* Rotation about z axis.		*/
	psi,		/* Oblique angle of output plane.	*/
	delpsi,		/* Increment of psi.			*/
	*volume[], /* Images in lab coordinates.	*/
	rotpln[],	/* Rotated image.			*/
	delpsi_max;	/* Maximum increment for psi.		*/

int	plnmin,		/* Minimum plane number.		*/
	plnmax,		/* Maximum plane number.		*/
	plane;		/* Transverse plane which intersects detector ring.*/

struct  scatter_tab *sc;

{

static int 
	first = TRUE,imgdimm1=0,
	planem1 = -1,
	*imin,			/* Starting pixel of circle.		*/
	*imax,			/* Ending pixel of circle.		*/
        *imax_wdg,              /* Ending pixel of wedge.               */
	*kmin,			/* Smallest z-offset as fcn of psi. 	*/
	 kmax,			/* Largest z-offset as fcn of psi. 	*/
	*klen;

static float 
	*wedge,			/* Integral along z-axis through wedge. */
	xmax,zmaxmax,
	*tab,
	**zcoff,		/* Coefficient for each z at psi.	*/
	cpsi,
	slc_pix_ratio,
	radius;

static double	psim1 = 1.e20;
	
int	i,j,k,ki,ioff,joff,ix,iy,radsq,jpsi,ray;

float	xcord,cdsq,zmax,sum,
	ctht,stht,
	tpsimin,tpsimax,
	x,y,dx,dy,dxdy,zmin,
	x_cnst,y_cnst,tmpimg[IMGSQ];

if(first == TRUE) {
    /* Compute boundaries of plane region to be rotated.*/
    first = FALSE;
    if(NULL==(imin =(int *)malloc((unsigned)(IMGDIM*sizeof(int))))) {
        printf("Could not malloc memory for imin, \"rotate_wedge\".\n");
        exit(ERROR);
        }
    if(NULL==(imax =(int *)malloc((unsigned)(IMGDIM*sizeof(int))))) {
        printf("Could not malloc memory for imax, \"rotate_wedge\".\n");
        exit(ERROR);
        }
    if(NULL==(imax_wdg =(int *)malloc((unsigned)(IMGDIM*sizeof(int))))) {
        printf("Could not malloc memory for imax_wdg, \"rotate_wedge\".\n");
        exit(ERROR);
        }
    for(i=0;i<sc->imgdim;i++) imax_wdg[i] = sc->imgdim;
    if(NULL==(tab =(float *)malloc((unsigned)(2*IMGDIM*sizeof(float))))) {
        printf("Could not malloc memory for tab, \"rotate_wedge\".\n");
        exit(ERROR);
        }
    tab += IMGDIM;
    if(NULL==(kmin =(int *)malloc((unsigned)((IMGSQ)*sizeof(int))))) {
        printf("Could not malloc memory for zmin, \"rotate_wedge\".\n");
        exit(ERROR);
        }
    if(NULL==(klen =(int *)malloc((unsigned)((IMGSQ)*sizeof(int))))) {
        printf("Could not malloc memory for klen, \"rotate_wedge\".\n");
        exit(ERROR);
        }
    if(NULL==(zcoff =(float **)malloc((unsigned)((IMGSQ)*sizeof(float))))) {
        printf("Could not malloc memory for zcoff, \"rotate_wedge\".\n");
        exit(ERROR);
        }
    /* Allocate memory for coefficient table assuming largest axial
       extent at each pixel. */
    xmax = RADIUS_DET + .5*IMGDIM*PIXSIZ/COS_MAXPSI;
    zmaxmax = 2.*xmax*(float)tan((double)delpsi_max);
    kmax = zmaxmax/SLCTHK + 2;
    if(NULL==(zcoff[0]=(float *)malloc((unsigned)(IMGSQ*kmax*sizeof(float))))) {
    	printf("Could not malloc memory for zcoff, \"rotate_wedge\"\n");
    	exit(ERROR);
    	}
    for(j=0;j<IMGSQ*kmax;j++)
        zcoff[0][j] = 0.;
    for(i=1;i<IMGSQ;i++)
	zcoff[i] = zcoff[i-1] + kmax;

    if(NULL==(wedge =(float *)
	malloc((unsigned)((sc->imgsq)*sizeof(float))))) {
        printf("Could not malloc memory for wedge, \"rotate_wedge\".\n");
        exit(ERROR);
        }
    for(i=0;i<sc->imgsq;i++) wedge[i] = 0.;
    /* Initialize coefficient table length outside of region being rotated.*/
    for(i=0;i<IMGSQ;i++) {
	kmin[i] = plane;
	klen[i] = 0;
	}
    }

/* Recompute sampled region if new value of psi. */
if((psi != psim1) | (plane != planem1) | (sc->imgdim != imgdimm1)) {
    /* Recompute region of image to be sampled. */
    jpsi = (int)((psi - PSI_MIN)*PSI_RATE + .5);
    cpsi = (float)cos((double)psi);
    tpsimin = (float)tan((double)(psi - .5*delpsi));
    tpsimax = (float)tan((double)(psi + .5*delpsi));
    slc_pix_ratio = SLCTHK/sc->pixsiz;
    radius = (float)(sc->imgdim-1)/2.;
    radsq = radius*radius;
    for(j=0,ray=0;j<sc->imgdim;j++,ray+=sc->ray_step) {

	/* Model effect of end-shields. */
	if((psi+.5*delpsi) < sc->psi_shldmin[plane][j]) {
	    tpsimin = 0.; tpsimax = 0.; /* Entire wedge blocked. */
	    }
        else if((psi-.5*delpsi) < sc->psi_shldmin[plane][j])
	    tpsimin = (float)tan((double)(sc->psi_shldmin[plane][j]));
	if((psi-.5*delpsi) > sc->psi_shldmax[plane][j]) {
	    tpsimin = 0.; tpsimax = 0.;
	    }
        else if((psi+.5*delpsi) > sc->psi_shldmax[plane][j])
	    tpsimax = (float)tan((double)(sc->psi_shldmax[plane][j]));

        cdsq = (float)j - radius;
        cdsq = radsq - cdsq*cdsq;
        /* Find coordinates of ellipse defined by intersection of plane
           of interest with conical volume. */
        if(cdsq > 0) 
            xcord = (float)sqrt((float)cdsq);
        else
            xcord = 0;
        imin[j] = (int)(radius - xcord) + PAD; 
        imax[j] = (int)(radius + xcord) - PAD;
        imax_wdg[j] = imax[j];
	/* Ensure two-pixel pad around region being rotated. */
	if(j < PAD | j > sc->imgdim-PAD-1) {
	    imin[j] = 1;
	    imax[j] = 0;
            imax_wdg[j] = 0;
	    }
        }
    /* Compute float table of integer to real indices. */
    for(i=-IMGDIM;i<IMGDIM;i++)
        tab[i] = (float)i;

    /* Compute bounds and coefficients for integration along z-axis at
       this oblique angle. */
    for(i=0,ray=0,joff=0;i<sc->imgdim;i++,joff+=sc->imgdim,ray+=sc->ray_step) {
	for(j=sc->lmin[ray],x=sc->xl10[jpsi][ray];j<sc->lmax[ray];
							j++,x+=sc->pixsiz) {
	    zmin = x*cpsi*tpsimin/SLCTHK + plane;
	    zmax = x*cpsi*tpsimax/SLCTHK + plane;
	    kmin[j+joff] = (int)(zmin + IMGDIM) - IMGDIM;
	    kmax         = (int)(zmax + IMGDIM) - IMGDIM;
	    if(kmin[j+joff] < plnmin) {
		kmin[j+joff] = plnmin;
		zmin = (float)plnmin;
		}
	    if(kmax > plnmax) {
		kmax = plnmax;
		zmax = (float)plnmax + 1;
		}
	    klen[j+joff] = kmax - kmin[j+joff] + 1;
	    if(klen[j+joff] > 1) {
	        zcoff[j+joff][0] = (float)kmin[j+joff] - zmin + 1;
	        zcoff[j+joff][klen[j+joff]-1] = zmax-(float)kmax;
	        for(k=1;k<klen[j+joff]-1;k++) 
		    zcoff[j+joff][k] = 1.;
	        }
	    else if(klen[j+joff] == 1 ) {
		/* Only one output point, equal to fraction of slice. */
		klen[j+joff] = 1;
		zcoff[j+joff][0] = zmax - zmin;
		}
	    else {
		if(imax[i] > j) imax_wdg[i] = j;
	        klen[j+joff] = 0;
		kmin[j+joff] = plnmax;
		zcoff[j+joff][0] = 0.;
		}
	    }
	}
/*sum = 0.;
for(j=0,ioff=0;j<sc->imgdim;j++,ioff+=sc->imgdim) {
    for(i=0;i<sc->imgdim;i++)
	for(k=0;k<klen[i+ioff];k++)
	    sum += zcoff[i+ioff][k]*volume[k+kmin[i+ioff]][i+ioff];
    }
printf("*** Unrotated wedge sums to %f at init ***\n",sum/1.e6);*/
    psim1 = psi;
    planem1 = plane;
    imgdimm1 = sc->imgdim;
    }

ctht = (float)cos((double)theta);
stht = (float)sin((double)theta);

/* First integrate axially over the wedges.  Use nearest-neighbor
   rule for finding appropriate axial integration factors. */
x_cnst = radius*(1. - ctht + stht);
y_cnst = radius*(1. - ctht - stht);
for(i=0;i<sc->imgsq;i++) wedge[i] = 0.;
for(j=0,ioff=0;j<sc->imgdim;j++,ioff+=sc->imgdim) {
    x =  (float)imin[j]*ctht + x_cnst;
    y =  (float)imin[j]*stht + y_cnst;
    for(i=imin[j];i<imax[j];i++) {
	ix = (int)(x + .5);
	iy = (int)(y + .5);
	ki = ix + iy*sc->imgdim;
	wedge[i+ioff] = 0.;
	for(k=0;k<klen[ki];k++)
	    wedge[i+ioff] += zcoff[ki][k]*volume[k+kmin[ki]][i+ioff];
	x += ctht;
        y += stht;
	}
    x_cnst -= stht;
    y_cnst += ctht;
    }
/*for(i=0,sum=0;i<sc->imgsq;i++) sum += wedge[i];
printf("Wedge sums to %f,",sum/1.e6);*/

/* Now use the integrated wedges to rotate in theta. */
for(i=0;i<sc->imgsq;i++) rotpln[i] = 0.;
x_cnst = radius*(1. - ctht - stht);
y_cnst = radius*(1. + stht - ctht);
for(j=0,ioff=0;j<sc->imgdim;j++,ioff+=sc->imgdim) {
    x =  (float)imin[j]*ctht + x_cnst;
    y = -(float)imin[j]*stht + y_cnst;
    for(i=imin[j];i<imax_wdg[j];i++) {
	ix = (int)x;
	iy = (int)y;
	ki = ix + iy*sc->imgdim;
	dx = x - tab[ix];
	dy = y - tab[iy];
	dxdy = dx*dy;
	rotpln[i+ioff]  = 
    	  (1. - dx - dy + dxdy)*wedge[ki]
	+ (     dx      - dxdy)*wedge[ki + 1]  
	+ (          dy - dxdy)*wedge[ki + sc->imgdim]
	+ (               dxdy)*wedge[ki + sc->imgdim+1];
	x += ctht;
        y -= stht;
	}
    x_cnst += stht;
    y_cnst += ctht;
    }
/*for(i=0,sum=0;i<sc->imgsq;i++) sum += rotpln[i];
printf(" rotpln sums to %f\n",sum/1.e6);*/
}
@
