head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.01.19.22.40.20;	author ty7777;	state Exp;
branches;
next	;


desc
@initial checking in, working version.
@


1.1
log
@Initial revision
@
text
@/*$Id$*/
/*$Log$*/

/*---------------------------------------------------------------

Subroutine: rotate_2d

Purpose: Use bilinear interpolation to rotate image with same 
	 reference frame as rotate_3d

Coordinate system: This routine assumes that the pixel represented
	by volume[0][0][0] in "C" lies at the upper left corner 
	in the rear of the volume. 

By: John Ollinger

Date: July 29, 1992

----------------------------------------------------------------*/

#include <stdio.h>
#include <math.h>
#include "scatter.h"

#define TRUE 1
#define FALSE 0
#define PAD 1 /* Amount to pad inscribed circle. */

static char rcsid [] = "$Header$";

/***********************************/
void rotate_2d(theta,image,rotimg,sc)
/***********************************/

float	theta,		/* Rotation about z axis.		*/
	*image, 	/* Images in lab coordinates.	*/
        *rotimg;	/* Rotated image. */
struct scatter_tab *sc;

{

static int 
	first=TRUE,
	*imin,			/* Starting pixel of circle.	*/
	*imax;			/* Ending pixel of circle.	*/

static float 
	*tab,
	radius;

int	i,j,ki,joff,ix,iy,iz,radsq,ray;

float	xcord,cdsq,ctht,stht,x,y,dx,dy,dx1,dy1,
	x_cnst,y_cnst;

if(first == TRUE) {
    /* Compute boundaries of plane region to be rotated. */
    first = FALSE;
    if(NULL==(imin =(int *)malloc((unsigned)(IMGDIM*sizeof(int))))) {
        printf("Could not malloc memory for imin, \"rotate\".\n");
        exit();
        }
    if(NULL==(imax =(int *)malloc((unsigned)(IMGDIM*sizeof(int))))) {
        printf("Could not malloc memory for imax, \"rotate\".\n");
        exit();
        }
    radius = (float)(sc->imgdim-1)/2.;
    radsq = radius*radius;
    for(j=0;j<sc->imgdim;j++) {
        cdsq = (float)j - radius;
        cdsq = radsq - cdsq*cdsq;
	if(cdsq > 0) {
            imin[j] = (int)(radius - sqrt((double)cdsq)) + PAD;
            imax[j] = (int)(radius + sqrt((double)cdsq)) - PAD;
	    }
	else {
            imin[j] = 0;
            imax[j] = 0;
	    }
	}
    if(NULL==(tab =(float *)malloc((unsigned)(sc->imgdim*sizeof(float))))) {
        printf("Could not malloc memory for tab, \"rotate\".\n");
        exit();
        }
    for(i=0;i<sc->imgdim;i++) tab[i] = (float)i;
    }

for(i=0;i<sc->imgsq;i++)
    rotimg[i] = 0.;
ctht = (float)cos((double)theta);
stht = (float)sin((double)theta);
x_cnst   =  radius*(1 - ctht - stht); 
y_cnst   =  radius*(1 + stht - ctht); 
for(j=0,ray=0,joff=0;j<sc->imgdim;j++,joff+=sc->imgdim,ray+=sc->ray_step) {
    x =  (float)imin[j]*ctht + x_cnst;
    y = -(float)imin[j]*stht + y_cnst;
    for(i=imin[j];i<imax[j];i++) {
	ix = (int)x;
	iy = (int)y;
	dx = x - tab[ix];
	dy = y - tab[iy];
	dx1 = 1. - dx;
	dy1 = 1. - dy;
	ki = ix + iy*sc->imgdim;
	rotimg[i+joff] = dx1*dy1*image[ki]  + dx1*dy*image[ki+sc->imgdim]
		       + dx*dy1*image[ki+1] + dx*dy*image[ki+sc->imgdim+1];
	x += ctht;
        y -= stht;
	}
    x_cnst += stht;
    y_cnst += ctht;
    }

}
@
