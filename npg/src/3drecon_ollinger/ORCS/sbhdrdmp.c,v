head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.01.19.22.40.20;	author ty7777;	state Exp;
branches;
next	;


desc
@nitial checking in, working version.
@


1.1
log
@Initial revision
@
text
@/*$Id$*/
/*$Log$*/

/*--------------------------------------------------------------------

Program: sbhdrdmp

Purpose: Display information from UCLA file image subheader.

Perpetrator: John Ollinger

Date: November 15, 1988

---------------------------------------------------------------------*/

#include <stdio.h>
#include <fcntl.h>
#include <math.h>
#include <petutil/matrix.h>

#define ERROR -1

static char rcsid [] = "$Header$";

main(argc,argv)

int	argc;
char	*argv[];

{

Scan_subheader  *scansh;
Image_subheader  *imgsh;
Norm_subheader *nrmsh;
Attn_subheader *atnsh;

void	*getsbhdr();

char    *filnam,     /* Input file name. */
	*dtyp;
long    stat;
long    mode,
	plane,
	frame = 1,
	gate = 1,
	data = 0,
	bed = 0;
int	i;
float	duration;

if(argc < 3) {
	printf("Usage: sbhdrdmp file-name plane [-f frame -g gate -d data -b bed].\n");
	exit(0);
	}

filnam = argv[1];
plane = atoi(argv[2]);
for(i=0;i<argc;i++) {
    if(!strcmp(argv[i],"-f")) {
	frame = atoi(argv[i+1]);
	++i;
	}
    else if(!strcmp(argv[i],"-g")) {
	gate = atoi(argv[i+1]);
	++i;
	}
    else if(!strcmp(argv[i],"-d")) {
	data = atoi(argv[i+1]);
	++i;
	}
    else if(!strcmp(argv[i],"-b")) {
	bed = atoi(argv[i+1]);
	++i;
	}
    }

if(strstr(argv[1],".scn")) {

    if( (scansh = (Scan_subheader *)
	getsbhdr(filnam,plane,frame,gate,data,bed)) == NULL) {
	printf("Error in getscansh->\n");
	exit(ERROR);
	}

    switch (scansh->data_type) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case VAX_I2:
    	    dtyp = "VAX short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
    duration = .001*(float)scansh->frame_duration;

printf("\n*** Scan subheader ***\n\
Data type: %s, X dimension: %d, Y dimension: %d, Sampling distance: %6.3f mm\n\
Minimum: %d, Maximum: %d, Scale factor  %9.7f\n\
Prompts: %d, Delayeds: %d, Multiples: %d\n\
Net trues: %d, Total coincidence rate: %d, Deadtime Correction: %6.4f\n\
Start time: %d, Duration: %8.3f sec\n",
dtyp, scansh->dimension_1, scansh->dimension_2, 10.*scansh->sample_distance,
scansh->scan_min, scansh->scan_max, scansh->scale_factor,
scansh->prompts, scansh->delayed, scansh->multiples,
scansh->net_trues, scansh->total_coin_rate, scansh->loss_correction_fctr,
scansh->frame_start_time, duration);

}
else if(strstr(argv[1],".img")) {

    if( (imgsh = (Image_subheader *)
	getsbhdr(filnam,plane,frame,gate,data,bed)) == NULL) {
	printf("Error in getsbhdr->\n");
	exit(ERROR);
	}

    switch (imgsh->data_type) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case VAX_I2:
    	    dtyp = "VAX short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
    duration = .001*(float)imgsh->frame_duration;

printf("\n*** Image subheader ***\n\
Minimum: %d, Maximum: %d, Slice location: %d\n\
Pixel size: %8.5f, Slice thickness: %6.3f\n\
Recon scale factor: %6.4f, Quantification scale factor: %g\n\
Plane efficiency scale factor: %6.4f, Deadtime correction factor: %6.4f\n\
Decay correction factor: %6.4f, ECAT calibration factor: %6.4f\n\
Filter params: %f %f %f %f %f %f\n",
imgsh->image_min,imgsh->image_max,imgsh->slice_location,imgsh->pixel_size,
imgsh->slice_width,imgsh->recon_scale,imgsh->quant_scale,
imgsh->plane_eff_corr_fctr,
imgsh->loss_corr_fctr,imgsh->decay_corr_fctr,imgsh->ecat_calibration_fctr,
imgsh->filter_params[0],imgsh->filter_params[1],imgsh->filter_params[2],
imgsh->filter_params[3],imgsh->filter_params[4],imgsh->filter_params[5]);

    }
else if(strstr(argv[1],".nrm")) {

    if( (nrmsh = (Norm_subheader *)
	getsbhdr(filnam,plane,frame,gate,data,bed)) == NULL) {
	printf("Error in getsbhdr->\n");
	exit(ERROR);
	}

    switch (nrmsh->data_type) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case VAX_I2:
    	    dtyp = "VAX short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
printf("\n*** Norm subheader ***\n\
Data type: %s, X dimension: %d, Y dimension: %d\n\
Scale factor  %9.7f, FOV source width: %f\n\
Calibration factor: %9.4f\n",
dtyp, nrmsh->dimension_1, nrmsh->dimension_2, 
nrmsh->scale_factor,nrmsh->fov_source_width,nrmsh->ecat_calib_factor);

    }
else if(strstr(argv[1],".atn")) {

    if( (atnsh = (Attn_subheader *)
	getsbhdr(filnam,plane,frame,gate,data,bed)) == NULL) {
	printf("Error in getsbhdr->\n");
	exit(ERROR);
	}

    switch (atnsh->data_type) {
        case SUN_I2:
    	    dtyp = "short";
	    break;
        case VAX_I2:
    	    dtyp = "VAX short";
	    break;
        case SUN_R4:
    	    dtyp = "IEEE float";
	    break;
        default:
	    dtyp = "unknown";
	    break;
        }
printf("\n*** Attn subheader ***\n\
Data type: %s, X dimension: %d, Y dimension: %d\n\
Scale factor  %9.7f, Attenuation coefficient: %f\n\
Sampling distance: %9.4f X origin: %9.4f, Y origin: %9.4f\n\
X radius: %9.4f, Y radius %9.4f, Type: %d\n",
dtyp, atnsh->dimension_1, atnsh->dimension_2, 
atnsh->scale_factor,atnsh->attenuation_coeff,atnsh->sample_distance,
atnsh->x_origin,atnsh->y_origin,atnsh->x_radius,atnsh->y_radius,
atnsh->attenuation_type);

    }
else
    printf("Unsupported image type.\n");


exit(0);
}
@
