head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	95.02.21.17.55.06;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.01.27.16.12.36;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.2
log
@Get rid of .c,v.
@
text
@/*$Id: GetVersion.c,v 1.1 1995/01/27 16:12:36 ty7777 Exp ty7777 $*/
/*$Log: GetVersion.c,v $
 * Revision 1.1  1995/01/27  16:12:36  ty7777
 * Initial revision
 **/

/*_______________________________________________________________________
File:		GetVersion.c

Function:	int GetVersion (char *rcsid_string, char *program_version)

Arguments:	rcsid_string:		string containing RCS Header information.
		program_version:	main program name with version.

Return Value:	SUCCEED:	program_version is obtained successfully.
		FAIL:		rcsid_string does noe have the correct format.

Description:	This function gets the program name with version number from
		the rcsid string.
_______________________________________________________________________*/

#include <petutil/imglist.h>

static char rcsid [] = "$Header$";

extern int GetVersion (rcsid_string, program_version)
	char	*rcsid_string;
	char	*program_version;
{
	char	string [MAXLINE];
	char	program [MAXLINE];
	char	program_name [MAXLINE];
	char	*sbuffer;
	char	version [MAXLINE];
	int	num_scanned;

	memset (string, 0, MAXLINE);
	memset (program, 0, MAXLINE);
	memset (version, 0, MAXLINE);
	num_scanned	= sscanf (rcsid_string, "%s %s %s", string, program, version);
	if (num_scanned == 3)
	{
		if (strstr (string, "Header") != NULL)
		{
			sbuffer	= strrchr (program, '/');
			if (sbuffer != NULL)
				strcpy (program_name, sbuffer + 1);
			else
				strcpy (program_name, program);
		}
		else
		{
			strcpy (program_name, program);
		}


		sbuffer		= strrchr (program_name, '.');
		if (sbuffer && *sbuffer)
			strncpy (program_version, program_name, strlen (program_name)  - strlen (sbuffer));
		else
			strcpy (program_version, program_name);

		strcat (program_version, " ");
		strcat (program_version, version);
	}
	else
		return FAIL;

	return SUCCEED;
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d26 1
a26 1
PUBLIC int GetVersion (rcsid_string, program_version)
d30 1
a30 1
	char	cbuffer [MAXLINE];
d32 2
a33 1
	char	*tail;
d37 1
a37 1
	memset (cbuffer, 0, MAXLINE);
d40 1
a40 1
	num_scanned	= sscanf (rcsid_string, "%s %s %s", cbuffer, program, version);
d43 1
a43 1
		if (strstr (cbuffer, "Header") != NULL)
d45 3
a47 3
			tail	= strrchr (program, '/');
			if (tail != NULL)
				strcpy (program_version, tail + 1);
d49 1
a49 1
				strcpy (program_version, program);
d53 1
a53 1
			strcpy (program_version, program);
d55 8
@
