head	1.3;
access;
symbols;
locks
	jmo:1.3; strict;
comment	@ * @;


1.3
date	95.02.22.19.50.54;	author jmo;	state Exp;
branches;
next	1.2;

1.2
date	95.02.22.15.27.52;	author jmo;	state Exp;
branches;
next	1.1;

1.1
date	95.01.19.22.40.20;	author ty7777;	state Exp;
branches;
next	;


desc
@initial checking in, working version.
@


1.3
log
@Modify maximium value of LOVERL to 1.1 to permit values of l1 slightly
greater than one. This can occur near the edge of the patient aperture.
@
text
@/*$Id: scatter_953b.h,v 1.2 1995/02/22 15:27:52 jmo Exp jmo $*/
/*$Log: scatter_953b.h,v $
 * Revision 1.2  1995/02/22  15:27:52  jmo
 * Change minimum chord length from 600-mm to 550-mm to eliminate
 * out-of-bounds index near the edge of the patient aperture.
 *
 * Revision 1.1  1995/01/19  22:40:20  ty7777
 * Initial revision
 **/

#ifndef SCATTER_953B_INCLUDED
#define SCATTER_953B_INCLUDED

static char rcsid_scatter_953b [] = "$Header: /home/usrb/jmo/tmp/RCS/scatter_953b.h,v 1.2 1995/02/22 15:27:52 jmo Exp jmo $";

#define MAXNAME 140
#define TRUE    1
#define FALSE   0

#define ENERGY_THRESH 380. /* Energy threshold in keV.			*/
#define M0C 	511.	/* Product of electron mass and c in keV.	*/
#define PI	3.1415926
#define RAD2DEG 57.295779
#define DEG2RAD .01745329
#define FWHM2SG   (.4246609)	/* Converts from fwhm to std dev. 	*/
#define SG2FWHM   (1./FWHM2SG)	/* Converts from std dev. to FWHM. 	*/
#define FWHM    12.    		/* Resolution of simulated scanner.	*/
#define SIGMA_RES (FWHM*FWHM2SG) /* Std deviation of scanner resolution.*/

#define PHOTON_ANG_FWHM_DEG .3	/* FWHM of deviation of annihilation 
				   photons from 180 degrees (in degrees).*/
#define PHOTON_ANG_FWHM	   (PHOTON_ANG_FWHM_DEG*DEG2RAD)
#define PHOTON_ANG_SIG     (PHOTON_ANG_FWHM_DEG*FWHM2SG*DEG2RAD)

#define MUS_511 0.257   /* Approximate atten. coeff. of tungsten in 1./mm */
#define MU_H2O	.0096	/* Linear atten coeff of water at 511keV in 1/mm.*/
#define MU_CSF	.044	/* Linear atten coeff of CsF at 511keV in 1/mm.	*/
#define MU_BGO	.092	/* Linear atten coeff of BGO at 511keV in 1/mm.	*/
#define MU_AL	.0225	/* Linear atten coeff of aluminum at 511keV in 1/mm.*/
#define PR_AL2CSF .47	/* Probability of scatter from aluminum septa to
			   crystal.  */
#define MU_XTAL MU_BGO

#define NONE	0
#define POSITIVE 1
#define NEGATIVE 2
#define ALL 3

#define SS 0
#define EM 1

#define CUBE_HDR_LEN 256

#define MU_FILL 1.    /* rotmu set to this value outside interpolated area.*/
#define EMIS_FILL 0.  /* rotemis set to this value outside interpolated area.*/

/* Defines parameters used to integrate Klein-Nishina equation. */
#define	R0   2.818e-13
#define R0SQ R0*R0
#define DELTA_PSI (PI/360)	/* Step size for Simpson's-rule 
				   integration along psi (oblique angle).*/
#define RK_BOUND .001		/* Error bound of Runge-Kutta integration
			           over theta (in-plane angle).	*/
#define RK_STEP  .001		/* Initial step size as a fraction of
				   interval for Runge-Kutta integration.*/
#define KN_4PI	7.216		/* Integral of Klein-Nishina Equation
				   over 4pi steradians.			*/

#define OUTPUT_MODULUS 8	/* Sampling modulus for output.		*/
#define NUMRAY_CTI 160
#define NUMRAY	NUMRAY_CTI	/* Number of rays per profile. 		*/
#define NUMRAY_OUT (NUMRAY/OUTPUT_MODULUS)
#define NUMANG	192 		/* Number of angles in sinogram.	*/
#define NUMANG2	(2*NUMANG)
#define NUMANG3	(3*NUMANG)
#define NUMANG_OUT  (NUMANG/OUTPUT_MODULUS)
#define NUMANG2_OUT (2*NUMANG/OUTPUT_MODULUS)
#define LENSIN  (NUMRAY*NUMANG)
#define LENSIN_CTI (NUMRAY_CTI*NUMANG)
#define LENSIN_OUT  (NUMRAY_OUT*NUMANG_OUT)
#define LENSIN2_OUT (2*LENSIN_OUT)
#define ANG_INC (PI/NUMANG) 	/* Angular increment.		*/
#define NUMRAY_OUT (NUMRAY/OUTPUT_MODULUS)
#define SCATTER_SLOPE .5  /* Slope of line of possible detectors in sinogram.*/

/* Define oblique angles.	*/
#define MAX_PSI_LEN 31		/* Max number of oblique angles.*/
#define LEN_PSI_TAB (MAX_PSI_LEN*10 + 1)
#define PSI_TAB_OFF (LEN_PSI_TAB/2)

/* Scale direct coincidences to correct for field-of-view of detector ring.
   It is calculated from the solid angle subtended by a single ring.*/
#define MULT_DETEFF_CORR 1.
/*#define DIRECT_SCL (PI*112.6*MULT_DETEFF_CORR)*/ /* Uniform detector efficiency,
assume activity at center. */
#define DIRECT_SCL (PI*126.67*MULT_DETEFF_CORR) /* Uniform detector efficiency. */
/*#define DIRECT_SCL (PI*137.29*MULT_DETEFF_CORR)*/ /* Average of uniform and nonuniform. */
/*#define DIRECT_SCL (PI*147.9*MULT_DETEFF_CORR)*/ /* Model detector efficiency. */

#define MULT_SIG 69.0	/* Std Dev. of Multiple scatter model in mm. */
#define MULT_SIGSQ (MULT_SIG*MULT_SIG)
#define MULT_MEAN {0 4 10} /* Line source positions for kernel estimtaes.*/
#define MULT_FRAC .20 /* Ratio of multiple to single scatters. */
#define MULT_SCALE (.00135)  /* Multiple scatter scale factor in 1/mm. */

#define RADIUS_DET_PHYS	    380	/* Radius of detector ring in mm.	*/
#define AVG_DEPTH_INTER 7.53 /* Average depth of interaction for CsF */
#define RADIUS_DET (RADIUS_DET_PHYS + AVG_DEPTH_INTER)
#define RAYSIZ   3.13		/* Width of "rays" in mm.		*/
#define PIXSIZ	RAYSIZ		/* Pixel size in mm.			*/
#define PIXSIZ_CM (.1*PIXSIZ)
#define OUT_RAYSPC (PIXSIZ*OUTPUT_MODULUS) /* Output ray spacing. 	*/
#define RADIUS_PIX ((NUMRAY-1)/2.) /* Radius of region imaged in pixels.*/
#define RADIUS_MM (RAYSIZ*RADIUS_PIX) /* Radius of region being imaged in mm.*/
#define DMIN	(-RADIUS_MM) 	/* Minimum transverse distance in mm. 	*/
#define DMAX	 RADIUS_MM  	/* Minimum transverse distance in mm.	*/
#define RSQ_DET (RADIUS_DET*RADIUS_DET)
#define RSQ_DET_PHYS (RADIUS_DET_PHYS*RADIUS_DET_PHYS)
#define RSQ_MM (RADIUS_MM*RADIUS_MM)
#define RSQ_PIX (RADIUS_PIX*RADIUS_PIX)
#define RINGRAD 225.	   	/* Radius of rod sources in mm.        	*/
#define ENERGY_RESOL (FWHM2SG*.23) /* Sigma of Gaussian energy resolution
				   function as a fraction of 511. */
#define PATIENT_APERTURE 400  	/* Patient aperture in cm. (+40-cm). */

#define SCATROI_SEP (20./RAYSIZ) /* Separation of ROI used to scale final
				estimate from bins sampling subject. */
#define SCATROI_WIDTH 8	/* Width of ROI used to scale final estimate in bins.*/

/* Define limits and increments for tables. */
#define L_INTERP 200 		/* Base number of samples. */
#define L_INTERP2 (2*L_INTERP)
#define L_INTERP4 (4*L_INTERP)
#define L_INTERP16 (16*L_INTERP)

#define MAXPSI  (20.*DEG2RAD)
/************** Following must be changed for each scanner type.**********/
#define SIN_MAXPSI .3420
#define COS_MAXPSI .9396
/*************************************************************************/
#define L_PSI L_INTERP
#define PSI_ZERO (L_INTERP/2)
#define PSI_MAX  MAXPSI
#define PSI_MIN (-MAXPSI)
#define PSI_INC (2.*MAXPSI/L_INTERP)
#define PSI_RATE (1./PSI_INC)

#define L_PSIO L_INTERP  /* Parameters for PSIO must equal those for PSI.  */
#define PSIO_MAX PSI_MAX
#define PSIO_MIN PSI_MIN
#define PSIO_INC PSI_INC
#define PSIO_RATE PSI_RATE

#define L_PSI_DIFF   L_INTERP2
#define PSI_DIFF_MIN (PSI_MIN - PSIO_MAX)
#define PSI_DIFF_MAX (PSI_MAX - PSIO_MIN)
#define PSI_DIFF_INC ((PSI_DIFF_MAX - PSI_DIFF_MIN)/L_PSI_DIFF)
#define PSI_DIFF_RATE (1./PSI_DIFF_INC)

#define L_SPSI_DIFF L_INTERP
#define SPSI_DIFF_MAX (2.*COS_MAXPSI*SIN_MAXPSI) 
#define SPSI_DIFF_MIN (-SPSI_DIFF_MAX)
#define SPSI_DIFF_INC ((SPSI_DIFF_MAX - SPSI_DIFF_MIN)/L_SPSI_DIFF)
#define SPSI_DIFF_RATE (1./SPSI_DIFF_INC)

/************** Following must be changed for each scanner type.**********/
#define L_L L_INTERP
#define L_MIN   (550.) 	/* Minimum ray length in mm.*/
#define L_MAX   (2.*RADIUS_DET/COS_MAXPSI)
#define L_INC   ((L_MAX - L_MIN)/L_INTERP)
#define L_RATE  (1./L_INC)
#define LMIN_OVER_LMAX  (L_MIN/L_MAX) /* Ratio of min to max ray length.*/
/************************************************************************/

#define L_L10 L_INTERP
#define L10_MIN (.5*L_MIN - .5*IMGDIM*PIXSIZ)
#define L10_MAX (.5*L_MAX)
#define L10_INC ((L10_MAX - L10_MIN)/L_L10)
#define L10_RATE (1./L10_INC)

#define L_LOVERL L_INTERP
#define LOVERL_MIN  0.
#define LOVERL_MAX  1.1
#define LOVERL_INC  ((LOVERL_MAX - LOVERL_MIN)/L_LOVERL)
#define LOVERL_RATE (1./LOVERL_INC)

#define L_LXOVERL L_INTERP2
#define LXOVERL_MAX (LOVERL_MAX*SPSI_DIFF_MAX)
#define LXOVERL_MIN (-LXOVERL_MAX)
#define LXOVERL_INC ((LXOVERL_MAX - LXOVERL_MIN)/L_LXOVERL)
#define LXOVERL_RATE (1./LXOVERL_INC)

#define L_L3OVERL2 L_INTERP2
#define L3OVERL2_MIN ((RADIUS_DET - RADIUS_MM)/(RADIUS_DET + RADIUS_MM))
#define L3OVERL2_MAX (1./L3OVERL2_MIN)
#define L3OVERL2_INC ((L3OVERL2_MAX - L3OVERL2_MIN)/L_L3OVERL2)
#define L3OVERL2_RATE (1./L3OVERL2_INC)

#define L_L1 L_INTERP
#define L1_MIN  (RADIUS_DET-RADIUS_MM)
#define L1_MAX  (1.05*(RADIUS_DET+RADIUS_MM)/COS_MAXPSI)
#define L1_INC  ((L1_MAX - L1_MIN)/L_L1)
#define L1_RATE (1./L1_INC)

#define L_L2       L_INTERP2
#define L2_MIN     (LOVERL_MIN*L_MIN)
#define L2_MAX     (LOVERL_MAX*L_MAX)
#define L2_INC     ((L2_MAX - L2_MIN)/L_L2)
#define L2_RATE    (1./L2_INC)

#define L_LP L_INTERP
#define LP_MIN  L1_MIN
#define LP_MAX  L1_MAX
#define LP_INC  L1_INC
#define LP_RATE L1_RATE

#define L_LOVERL_SPSI L_INTERP
#define LOVERL_SPSI L_INTERP
#define LOVERL_SPSI_MAX  (1.5*LOVERL_MAX*SIN_MAXPSI)
#define LOVERL_SPSI_MIN  (-LOVERL_SPSI_MAX)
#define LOVERL_SPSI_INC  ((LOVERL_SPSI_MAX - LOVERL_SPSI_MIN)/L_LOVERL_SPSI)
#define LOVERL_SPSI_RATE (1./LOVERL_SPSI_INC)

#define L_L1OVERL2 L_INTERP
#define L1OVERL2_MAX (SIN_MAXPSI*LOVERL_MAX/LOVERL_MIN)
#define L1OVERL2_MIN (-L1OVERL2_MAX)
#define L1OVERL2_INC ((L1OVERL2_MAX - L1OVERL2_MIN)/L_L1OVERL2)
#define L1OVERL2_RATE (1./L1OVERL2_INC)

#define L_L1OVERL2_SPSI L_INTERP
#define L1OVERL2_SPSI_MAX (SIN_MAXPSI*LOVERL_MAX/LOVERL_MIN)
#define L1OVERL2_SPSI_MIN (-L1OVERL2_SPSI_MAX)
#define L1OVERL2_SPSI_INC ((L1OVERL2_SPSI_MAX-L1OVERL2_SPSI_MIN)/L_L1OVERL2_SPSI)
#define L1OVERL2_SPSI_RATE (1./L1OVERL2_SPSI_INC)

#define L_PSIC L_INTERP4
#define PSIC_MAX  (60*DEG2RAD)
#define PSIC_MIN (-PSIC_MAX)
#define PSIC_INC ((PSIC_MAX - PSIC_MIN)/L_PSIC)
#define PSIC_RATE (1./PSIC_INC)

#define L_PSIC_P_PSIO L_INTERP4
#define PSIC_P_PSIO_MAX (PSIC_MAX + PSIO_MAX)
#define PSIC_P_PSIO_MIN (PSIC_MIN + PSIO_MIN)
#define PSIC_P_PSIO_INC ((PSIC_P_PSIO_MAX - PSIC_P_PSIO_MIN) /L_PSIC_P_PSIO)
#define PSIC_P_PSIO_RATE (1./PSIC_P_PSIO_INC)

#define L_PSIS L_INTERP4
#define PSIS_MAX (PSIC_MAX + PSI_MAX)
#define PSIS_MIN (PSIC_MIN + PSI_MIN)
#define PSIS_INC ((PSIS_MAX - PSIS_MIN)/L_PSIS)
#define PSIS_RATE (1./PSIS_INC)

#define THETA_START ( 105.*DEG2RAD)	/* Starting value of theta. 	*/
#define THETA_DIR   (-1)		/* Direction of rotaton. 	*/

#define L_THETAS L_INTERP2
#define THETAS_MAX  (120*DEG2RAD)
#define THETAS_MIN  (-THETAS_MAX)
#define THETAS_INC  ((THETAS_MAX - THETAS_MIN)/(L_THETAS))
#define THETAS_RATE (1./THETAS_INC)

#define L_THETA_DIFF L_INTERP2
#define THETA_DIFF_MAX  (PI)
#define THETA_DIFF_MIN  (-THETA_DIFF_MAX)
#define THETA_DIFF_INC  ((THETA_DIFF_MAX - THETA_DIFF_MIN)/L_THETA_DIFF)
#define THETA_DIFF_RATE (1./THETA_DIFF_INC)

#define L_UPS L_THETAS
#define UPS_MIN THETAS_MIN
#define UPS_MAX THETAS_MAX  
#define UPS_INC THETAS_INC
#define UPS_RATE THETAS_RATE

#define L_DET_SURV  L_INTERP4
#define DET_SURV_MIN 0.
#define DET_SURV_MAX 1.
#define DET_SURV_INC (1./L_DET_SURV)
#define DET_SURV_RATE (1./DET_SURV_INC)

#define L_ATTEN L_INTERP
#define ATTEN_MIN  0
#define ATTEN_MAX  1.10
#define ATTEN_INC  ((ATTEN_MAX - ATTEN_MIN)/L_ATTEN)
#define ATTEN_RATE (1./ATTEN_INC)

#define MAXPSI_ATTEN_OVER_MAXPSI 1 /* Minimum factor relating num_psi to 
		num_psi_att.  Also gives ration of MAXPSI to MAXPSI_ATTEN.  */

#define NUM_ENERGY 5
#define L_ATTEN_SCL L_INTERP
#define ATTEN_SCL_MAX 1.427
#define ATTEN_SCL_MIN 1.
#define ATTEN_SCL_INC ((ATTEN_SCL_MAX - ATTEN_SCL_MIN)/L_ATTEN_SCL)
#define ATTEN_SCL_RATE (1./ATTEN_SCL_INC)

#define BLOCK_DIM 8		/* Number of detector elements along side of block. */
#define DC	30.		/* Depth of crystal in mm.		*/
#define WC      6.11		/* Axial dimension of detector element in mm.*/
#define WCT     5.62		/* Transverse dimension of detector element.*/
#define WC2     (.5*WC)		/* Width of detector element in mm.	*/
#define WS	1.00		/* Width of septa in mm.		*/
#define WS2	(.5*WS)
#define WICS	.64		/* Width of inter-crystal septa.	*/
#define WICS2	(.5*WICS)
#define WCT_TOT (WCT+WICS)	/* Spacing between detector elements.	*/
#define SEPTA_IR 289.08		/* Inner radius of septa in mm.*/
#define SEPTA_OR 366.78		/* Outer radius of septa in mm.*/
#define SEPTA_IRSQ (SEPTA_IR*SEPTA_IR)
#define SEPTA_ORSQ (SEPTA_OR*SEPTA_OR)
#define SHLD_IR 289.08		/* Inner radius of septa in mm.*/
#define SHLD_OR 366.78		/* Outer radius of septa in mm.*/
#define SHLD_IRSQ (SHLD_IR*SHLD_IR)
#define SHLD_ORSQ (SHLD_OR*SHLD_OR)
#define GS_PHYS 11.66		/* Physical gap separating septa from 
				   crystal at center of scanner. */
#define GS	(GS_PHYS + AVG_DEPTH_INTER) /* Effective gap.	*/
#define LS	(SEPTA_OR-SEPTA_IR) /* Length of septa in mm at center of scanner*/
#define DET_WIDTH (WC+WICS)	/* Physical width of detector ring with
				   septum.				*/
#define SLCTHK (WC+WICS)	/* Slice thickness in mm.		*/
#define RINGTHK (WC+WICS)	/* Ring thickness in mm.		*/
#define MIN_PLANE 1		/* Minimum plane number. 		*/
#define MAX_PLANE 31		/* Maximum number of planes 2d scan.	*/
#define MAX_PLANE_3D 256	/* Maximum numbef of plane in 3d scan.  */
#define NUM_PLANE 16		/* Number of planes used in calc. 	*/
#define NUM_RINGPAIR (NUM_PLANE*NUM_PLANE)/* Number of ring pairs. 	*/
#define MAX_PLANE_CTI 31	/* Maximum number of planes.		*/
#define NUM_RINGS 16		/* Number of detector rings. 		*/
#define LEN_RING_LIST 4
#define RING_LIST {2, 6, 10, 14}
/*#define LEN_RING_LIST 16
#define RING_LIST {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}*/
#define NUM_CALC_PLANES (LEN_RING_LIST*LEN_RING_LIST)
#define NUM_NORM (NUMANG*NUM_RINGPAIR) /* Number of row-normalization factors.*/

#define IMGDIM  NUMRAY		/* Dimension of image array.		*/
#define XMIN    (-(IMGDIM-1)/2.)/* Minimum value of x in pixels.	*/
#define XMAX    ((IMGDIM-1)/2.) /* Maximum value of x in pixels.	*/
#define IMGDIM_HLF  IMGDIM/2	/* Dimension of image array.		*/
#define IMGSQ	(IMGDIM*IMGDIM) /* Length of image array.		*/
#define IMGCTR  ((IMGDIM-1.)/2.)

#define NUM_PSI_F3D 7
#define NUM_NUMPSI 6
#define NUM_PSI_MAX 31
#define NUM_PSI_VALS num_psi_val[NUM_NUMPSI] = {1, 3, 5, 9, 15, NUM_PSI_MAX}

/* Structures used to define plane sampling for scatter correction. */
struct  ringdefine {
    int	ring1;
    int	ring2;
    int	ringdiff;
    };

struct ringinfo {
    int xdim;		/* X dimension of scatter estimate. 		*/
    int ydim;		/* Y dimension of scatter estimate. 		*/
    int minring;
    int maxring;
    int nring;		/* Number of rings for which scatter computed. */
    int nringpair;	/* Number of ring-pairs for which scatter computed. */
    int rings[50];	/*  Number of rings for which scatter estimated. */
    struct ringdefine ringdef[NUM_RINGPAIR];
    };

/* Structure containing axial deconvolution matrices. */
struct axdecon_mat {
    float **ainv;	/* Inverse of axial transfer function matrix.	*/
    float dummy;	/* No function, makes debugger work. 		*/
    };

/* Structure containing tables relating direct d,theta to scattered d,theta */
struct coord_entry {
    int	N;		/* Number of entries for this position. 	*/
    float *fo;		/* Fraction that intersect output detector. 	*/
    int *deltht;	/* Theta offset to output point.		*/
    int	*d2;		/* Distance offset to output point. (may overflow) */
    int	*idout;		/* Distance in downsampled output array.        */
    };

struct output_coordinates {
    struct coord_entry entry[NUMRAY][OUTPUT_MODULUS];
    };

#ifdef DEBUG

#define PSIO_FP(A,B) 	 B = (A*PSIO_INC    + PSIO_MIN)*RAD2DEG
#define L_FP(A,B) 	 B =  A*L_INC       + L_MIN
#define L1_FP(A,B) 	 B =  A*L1_INC      + L1_MIN
#define L2_FP(A,B) 	 B =  A*L2_INC      + L2_MIN
#define L20_FP(A,B) 	 B =  A*L2_INC      + L2_MIN
#define L1P_FP(A,B) 	 B =  A*LP_INC      + LP_MIN
#define LOVERL_FP(A,B) 	 B =  A*LOVERL_INC  + LOVERL_MIN
#define LXOVERL_FP(A,B)  B =  A*LXOVERL_INC + LXOVERL_MIN
#define L3OVERL2_FP(A,B) B =  A*L3OVERL2_INC + L3OVERL2_MIN
#define PSIC_PSIO_FP(A,B) B =((A*PSIC_P_PSIO_INC + PSIC_P_PSIO_MIN)*RAD2DEG)
#define THETAS_FP(A,B) 	 B =((A*THETAS_INC  + THETAS_MIN)*RAD2DEG)
#define PSIC_FP(A,B) 	 B =((A*PSIC_INC    + PSIC_MIN)*RAD2DEG)
#define PSIS_FP(A,B) 	 B =((A*PSIS_INC    + PSIS_MIN)*RAD2DEG)
#define UPS_FP(A,B) 	 B =((A*UPS_INC     + UPS_MIN )*RAD2DEG)
#define THT_DIFF_FP(A,B) B =((A*THETA_DIFF_INC+THETA_DIFF_MIN)*RAD2DEG)
#define ATTEN_FP(A,B)    B =(A*ATTEN_INC   + ATTEN_MIN)
#define PSI_DIFF_FP(A,B) B =((A*PSI_DIFF_INC+ PSI_DIFF_MIN)*RAD2DEG)
#define DTHT_FP(A,B)     B =((float)A*sc->ang_inc*RAD2DEG)
#define ATT_SCL_FP(A,B)  B =(A*ATTEN_SCL_INC + ATTEN_SCL_MIN)

#else

#define PSIO_FP(A,B)
#define L_FP(A,B)
#define L1P_FP(A,B)
#define L2_FP(A,B)
#define L20_FP(A,B)
#define LOVERL_FP(A,B)
#define LXOVERL_FP(A,B)
#define L3OVERL2_FP(A,B)
#define PSIC_PSIO_FP(A,B)
#define THETAS_FP(A,B)
#define PSIC_FP(A,B)
#define PSIS_FP(A,B)
#define UPS_FP(A,B)
#define THT_DIFF_FP(A,B)
#define ATTEN_FP(A,B)
#define PSI_DIFF_FP(A,B)
#define DTHT_FP(A,B)
#define ATT_SCL_FP(A,B)

#endif

    struct bed_pos {
	float min;		/* Minimum bed position. 			*/
	float max;		/* Maximum bed position. 			*/
	int npos;		/* Length of bed_pos table.			*/
	float *pos;		/* Table of bed positions.			*/
	int	  num_virtplns;	/* Number of virtual planes.			*/
	int	  *phys_plane;	/* Table relating virtual planes to true planes.*/
	int   *pln_offset;	/* Table relating virtual plane to file offset.	*/
	int	  F3d;		/* TRUE: Fully 3d scan.				*/
	float  duration;
	};

    struct scatter_tab {
    int imgdim;	/* Dimension of reconstructed image. */
    int imgsq;	/* Length of reconstructed image. */
    float pixsiz;	/* Pixel size in mm.			*/
    int numray;	/* Number of rays to be used. */
    float raysiz;	/* Width of rays in mm. */
    int numang;	/* Number of angles to be used. */
    int ang_step;	/* Step size between processed angles. */
    int img_step;	/* Ratio of ray step size to pixel step size. */
    int ray_step;	/* Number of RAYSIZ rays corresponding to an image pixel.*/
    int frame;	/* Frame number to be processed. */
    float ang_inc;	/* Angular increment between projection in radians. */
    int lensin;	/* Length of sinogram.		*/
    int numpln;	/* Number of planes to be processed. */
    int tran_plnmin; /* Minimum plane number stored in transmission volume. */
    int tran_plnmax; /* Maximum plane number stored in transmission volume. */
    int emis_plnmin; /* Minimum plane number stored in emission volume. */
    int emis_plnmax; /* Maximum plane number stored in emission volume. */
    int iter_type;   /* SS: successive subsitutions; EM: EM algorithm. */
    float emis_cutoff;	/* Cutoff freq of Hanning filter, fraction of Nyquist rate.*/
    float tran_cutoff;	/* Cutoff freq of Hanning filter, fraction of Nyquist rate.*/
    char  table_name[MAXNAME];  /* File containing lookup tables.	*/
    int lmin[IMGDIM];	    /* Minimum coordinate of circle in image.	*/
    int lmax[IMGDIM];	    /* Maximum coordinate of circle in image.	*/
    int *L[L_PSI]/*[NUMRAY]*/;   /* Table of max length, L. 	*/
    int Lp[NUMRAY];   /* Table of max length, L. 			*/
    int *l10[L_PSI]/*[NUMRAY]*/;   /* Distance from detector to region imaged  */
    int *l20[L_PSIC]/*[NUMRAY]*/;   /* Distance from detector to region imaged  */
    float *xl10[L_PSI]/*[NUMRAY]*/; /* Distance from detector to region imaged  */
    float *xl10c[L_PSIC]/*[NUMRAY]*/; /* Distance from detector to region imaged  */
    int *l1p [L_PSI]/*[L_L1]*/;   /* Distance from detector to region imaged  */
    int *loverL[L_L1]/*[L_L]*/;  /* Ratio of l1/L, l1p/L, l2/L, l2p/L given l,L */
    int *l2poverL[NUMANG2]/*[L_LOVERL]*/; /*  fcn of [l1poverL][angle].   */
    int *lxoverL[L_LOVERL]/*[L_PSI_DIFF]*/;
    int *l1overl2[L_LOVERL]/*[L_LOVERL]*/; /* Ratio of l1/l2 */
    int *thetas[NUMANG2]/*[L_LOVERL]*/;    /* Transverse scattering angle. */
    int thts_cvt[L_THETAS]; /* Convert sampling of thetas to ANG_INC. */
    int **dthtpp/*[sc->numang][L_PSIO]*/; /* Thetas in output plane. */
int *l1ppoverL[L_LOVERL]/*[L_PSI_DIFF]*/;
int *l2ppoverL[L_THETAS]/*[L_LOVERL]*/;
int *l3ppoverl2pp[L_LOVERL]/*[L_LOVERL]*/;
int *l2overL[L_PSI_DIFF]/*[L_LXOVERL]*/;
int *psic_p_psio[L_LXOVERL]/*[L_LOVERL]*/; /* psic + psio */
int *psic[L_PSIC_P_PSIO]/*[L_PSIO]*/; /* Angle of incidence at scatter crystal.*/
int *psiopp[L_PSIO]/*[L_L3OVERL2]*/; /* angle of incident photon with inclined plane. */
int *psis[L_PSIC]/*[PSI]*/; /* Table of psic + (psi - psio). */
int *upsilons[L_PSIS]/*[L_THETAS]*/; /* Total scattering angle. 	*/
int *theta_diff[L_THETAS]/*[NUMANG]*/; /* Difference of theta and thetas. */
int *ds[L_THETA_DIFF]/*[NUMRAY]*/; /* Table giving distance of scatter-ray. */
int *l2[L_L2]/*[L_LOVERL]*/; /* Length traversed by scattered photon. */
int *l2_att[L_PSIC]/*[L_L2]*/; /*Get l2_att from incidence angle and l2.*/
int *angle_wrap_atten[NUMANG3]/*[NUMRAY]*/;/* Maps negative angles into 
					positives for attenuation correction.*/
int *angle_wrap_scat[NUMANG3]/*[NUMRAY]*/;/* Maps negative angles into 
					positives for scat_360 tablle.*/
int npsic[L_PSIC];	/* Table to round down on output psi.	*/

int energy_corr[L_UPS]; /* Table of attenuation coeff corrections as
				    as function of energy.  Stored as indices
				    to exponentiation table. */
int det_surv_511[L_PSIC]; /*Prob of photon not interacting in detector.*/
float energy_thresh;	/* Energy threshold. */
float energy_frac[L_UPS]; /* Fraction accepted by energy threshold.*/
float *pow[L_ATTEN]/*[L_ATTEN_SCL]*/; /* exp[atten][exp] yields atten**exp. */
float *septal_pen_l2[L_INTERP]/*[L_INTERP4]*/; 
				   /*Probability of a photon penetrating 
				     the septa without scattering at 
				     angle psi and distance l2 or l1. 
				     Indexed as septal_pen[l2][psi]. */
int	  num_psi;	    /* Number of oblique angles to be used.	*/
float *psi;    /* Table of oblique angles stored. */
float *delpsi; /* Table of differences between oblique angles. */
float **psi_shldmin/*[sc->numpln][sc->imgdim]*/; /* Minimum oblique angle 
						contained in end shields.*/
float **psi_shldmax/*[sc->numpln][sc->imgdim]*/; /* Maximum oblique angle 
						contained in end shields.*/
int   num_psi_att; /* Number of oblique angles in atten table. */
float   *psi_att; /* Table of oblique angles of attenuation table. */
float **septal_pen_l1;  /* prob[psi][l1], probability of direct 
			       photon penetrating septa. */
float *prthts[L_UPS]/*[L_L2]*/; /* Pr[thetas] as fcn of upsilon, l1/L.*/
int num_dir_rings;  /* Number of direct rings to process. 		*/
int num_scat_rings; /* Number of rings photons scattere to . 	*/
int dir_ring_list[NUM_RINGS]; /* List of direct rings. 		*/
int scat_ring_list[NUM_RINGS]; /* List of rings scatter computed to. */
float *ring_psio/*[2*NUM_RINGS]*/; /* List of oblique angles corres-
				     ponding to ring-pairs in 3D acq.*/
float *norm3d/*[NUM_NORM]*/; /* Axial nomalization table. */
float norm2d[MAX_PLANE_CTI];	/* Axial nomalization table. */
int   *phys_ring;	/* Maps virtual plane to physical plane. */
int   num_iter;		/* Number of iterations. */
float relax;		/* Relaxation parameter. */
float   ext_tran_up;	/* Length to extend transmission images outside FOV. */
float   ext_tran_dwn;	/* Length to extend transmission images outside FOV. */
float   ext_emis_up;	/* Length to extend emission images outside FOV. */
float   ext_emis_dwn;	/* Length to extend emission images outside FOV. */
int  line_source;	/* Source is a line source. */
float mult_krnl[NUMRAY_OUT]; /* Kernel for multiple scatter model. */
float mult_frac; /* Ratio of total multiple scatters to total single scatter.*/
float *mult_scl[LEN_RING_LIST*LEN_RING_LIST]; /* Angle-dependent scale factor for multiple scatter kernel. */
float mult_sigma; /* Std. deviation of multiple scattering kernel. */
int   mult_len;	/* Length of multiples kernel. */
int   ***tran_sup; /* Range of sinogram bins that sample the subject. */
float	**tran_width[LEN_RING_LIST]; /*Tables of width of transmission images for use in multiple scatter model. */
struct output_coordinates coords;
};

#endif /* SCATTER_953B_INCLUDED */
@


1.2
log
@Change minimum chord length from 600-mm to 550-mm to eliminate
out-of-bounds index near the edge of the patient aperture.
@
text
@d1 1
a1 1
/*$Id: scatter_953b.h,v 1.1 1995/01/19 22:40:20 ty7777 Exp jmo $*/
d3 4
d14 1
a14 1
static char rcsid_scatter_953b [] = "$Header: /home/usrb/jmo/tmp/RCS/scatter_953b.h,v 1.1 1995/01/19 22:40:20 ty7777 Exp jmo $";
d183 1
a183 1
#define LOVERL_MAX  1.
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d10 1
a10 1
static char rcsid_scatter_953b [] = "$Header$";
d164 1
a164 1
#define L_MIN   (600.) 	/* Minimum ray length in mm.*/
@
