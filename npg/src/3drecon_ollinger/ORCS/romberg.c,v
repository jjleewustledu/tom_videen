head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.01.19.22.40.20;	author ty7777;	state Exp;
branches;
next	;


desc
@initial checking in, working version.
@


1.1
log
@Initial revision
@
text
@/*$Id$*/
/*$Log$*/

/*****************************************************************

Function: romberg(func,a,b)

Purpose: Use Romberg method to integrate "func" from "a" to "b".

Source: Numerical Recipes in C, pp. 90 and 124.

Comment: Two copies of the same coded are included for the case where
	a double integral is evaluated.  This is necessary because the
	code is not reentrant.

Date: 7/3/91

Copied right by J.M. Ollinger

*****************************************************************/


#include <math.h>

#define EPS 1.0e-6 	/* Desired fractional accuracy.		*/
#define JMAX 20		/* Maximum total number of steps. 	*/
#define JMAXP JMAX+1
#define K 5		/* Number of points used in extrapolation.*/
#define FUNC(x) ((*func)(x))

static char rcsid [] = "$Header$";

/*********************/
float romberg(func,a,b)
/*********************/

float 	a,		/* Starting point of integration.	*/
	b;		/* Endpoint of integration.		*/
float 	(*func)();	/* Routine that computed function to be integrated.*/

{
	float ss,dss,trapzd();
	float s[JMAXP+1],h[JMAXP+1];
	int j;
	void polint(),nrerror();

	h[1]=1.0;
	for (j=1;j<=JMAX;j++) {
		s[j]=trapzd(func,a,b,j);
		if (j >= K) {
			polint(&h[j-K],&s[j-K],K,0.0,&ss,&dss);
			if (fabs(dss) < EPS*fabs(ss)) return ss;
		}
		s[j+1]=s[j];
		h[j+1]=0.25*h[j];
	}
	printf("Romberg: ");
	nrerror("Too many steps in routine QROMB");
}

/*************************/
void polint(xa,ya,n,x,y,dy)
/*************************/

float 	xa[],	
	ya[],
	x,
	*y,
	*dy;

int 	n;
{
	int i,m,ns=1;
	float den,dif,dift,ho,hp,w;
	float *c,*d,*vector();
	void nrerror(),free_vector();

	dif=fabs(x-xa[1]);
	c=vector(1,n);
	d=vector(1,n);
	for (i=1;i<=n;i++) {
		if ( (dift=fabs(x-xa[i])) < dif) {
			ns=i;
			dif=dift;
		}
		c[i]=ya[i];
		d[i]=ya[i];
	}
	*y=ya[ns--];
	for (m=1;m<n;m++) {
		for (i=1;i<=n-m;i++) {
			ho=xa[i]-x;
			hp=xa[i+m]-x;
			w=c[i+1]-d[i];
			if ( (den=ho-hp) == 0.0) nrerror("Error in routine POLINT");
			den=w/den;
			d[i]=hp*den;
			c[i]=ho*den;
		}
		*y += (*dy=(2*ns < (n-m) ? c[ns+1] : d[ns--]));
	}
	free_vector(d,1,n);
	free_vector(c,1,n);
}



/**********************/
float trapzd(func,a,b,n)
/**********************/

float a,b;
float (*func)();	/* ANSI: float (*func)(float); */
int n;

{
	float x,tnm,sum,del;
	static float s=0.;
	static int it;
	int j;

	if (n == 1) {
		it=1;
		return (s=0.5*(b-a)*(FUNC(a)+FUNC(b)));
	} else {
		tnm=it;
		del=(b-a)/tnm;
		x=a+0.5*del;
		for (sum=0.0,j=1;j<=it;j++,x+=del) sum += FUNC(x);
		it *= 2;
		s=0.5*(s+(b-a)*sum/tnm);
		return s;
	}
}
@
