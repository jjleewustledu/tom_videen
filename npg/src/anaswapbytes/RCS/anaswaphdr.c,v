head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2011.12.29.16.40.55;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Log$ */
/*	===============================================================================
 *	Module:			anaswaphdr.c
 *	Date:			Dec 2011
 *	Author:			Tom Videen
 *	Description:	Swap bytes in analyze hdr to fix endian
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaswaphdr/RCS/anaswaphdr.c,v 2.2 2009/05/15 15:19:22 tom Exp $";
#endif

#include <stdio.h>
#include <dbh.h>				 /* dsr */

void swapbytes(void *, const size_t, const size_t);

int             main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;
	FILE           *fd_hdr;
	char           *ANALYZE_hdr;
	int             i;
	short           sptr[5];
	float           forg[4];

	if (argc != 2) {
		fprintf (stdout, "Usage: anaswaphdr ANALYZE_hdr\n");
		return (1);
	}
	ANALYZE_hdr = argv[1];
	if ((fd_hdr = fopen (ANALYZE_hdr, "r")) == 0) {
		fprintf (stderr, "ERROR [anaswaphdr]: Opening: %s\n", ANALYZE_hdr);
		return (1);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anaswaphdr]: Reading: %s\n", ANALYZE_hdr);
		return (1);
	}
	(void) fclose (fd_hdr);

	swapbytes (&(hdr.hk.sizeof_hdr), sizeof (hdr.hk.sizeof_hdr) / 2, 1);
	if (hdr.hk.sizeof_hdr != (int) sizeof (struct dsr)) {
		fprintf (stderr, "NOTE: hdr file does not require byte swap\n");
		return (1);
	}
	swapbytes (&(hdr.hk.extents), sizeof (hdr.hk.extents) / 2, 1);
	for (i = 0; i <= 4; i++)
		swapbytes (&(hdr.dime.dim[i]), sizeof (hdr.dime.dim[i]) / 2, 1);
	swapbytes (&(hdr.dime.datatype), sizeof (hdr.dime.datatype) / 2, 1);
	swapbytes (&(hdr.dime.bitpix), sizeof (hdr.dime.bitpix) / 2, 1);
	for (i = 1; i <= 3; i++)
		swapbytes (&(hdr.dime.pixdim[i]), sizeof (hdr.dime.pixdim[i]) / 2, 1);
	swapbytes (&(hdr.dime.glmax), sizeof (hdr.dime.glmax) / 2, 1);
	swapbytes (&(hdr.dime.glmin), sizeof (hdr.dime.glmin) / 2, 1);

	printf ("sizeof_hdr    %d\n", hdr.hk.sizeof_hdr);
	printf ("data_type     %s\n", hdr.hk.data_type);
	printf ("db_name       %s\n", hdr.hk.db_name);
	printf ("extents       %d\n", hdr.hk.extents);
	for (i = 0; i < 8; i++)
		printf ("dim[%d]      %d\n", i, hdr.dime.dim[i]);
	printf ("datatype    %d\n", hdr.dime.datatype);
	printf ("bitpix      %d\n", hdr.dime.bitpix);
	printf ("dim_un0     %d\n", hdr.dime.dim_un0);
	for (i = 0; i < 8; i++)
		printf ("pixdim[%d]   %f\n", i, hdr.dime.pixdim[i]);
	printf ("vox_offset  %f\n", hdr.dime.vox_offset);
	printf ("glmax       %d\n", hdr.dime.glmax);
	printf ("glmin       %d\n\n", hdr.dime.glmin);
	for (i = 0; i < 5; i++)
		printf ("orig[%d]   %d\n", i + 1, sptr[i]);
	for (i = 0; i < 4; i++)
		printf ("origin[%d]   %f\n", i + 1, forg[i]);

	if ((fd_hdr = fopen (ANALYZE_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [anaswaphdr]: Cannot open: %s\n", ANALYZE_hdr);
		return (1);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anaswaphdr]: Writing: %s\n", ANALYZE_hdr);
		return (1);
	}
	(void) fclose (fd_hdr);

	return (0);
}
@
