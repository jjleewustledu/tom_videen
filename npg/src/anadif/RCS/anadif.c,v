head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	2008.11.07.14.04.18;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2005.06.15.16.58.44;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.17.11.34;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.26.20.09.18;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.15.20.34.26;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.09.17.55.40;	author tom;	state Exp;
branches;
next	;


desc
@@


2.2
log
@permit dim = 3
@
text
@/*	$Log: anadif.c,v $
 * Revision 2.1  2005/06/15  16:58:44  tom
 * read/write floats
 *
 * Revision 2.0  2004/02/13  17:11:34  tom
 * Feb 2004
 *
 * Revision 1.3  2002/11/26  20:09:18  tom
 * *** empty log message ***
 *
 * Revision 1.2  2002/08/15  20:34:26  tom
 * add stdlib
 *
 * Revision 1.1  1999/02/09  17:55:40  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anadif.c
 *	Date:			Jun 2005
 *	Author:			Tom Videen
 *	Description:	Subtract on analyze image from another
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadif/RCS/anadif.c,v 2.1 2005/06/15 16:58:44 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anadif
 *	----------------------------
 */
int main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* input file */
	char           *img3, *hdr3;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	short          *imga, *imgb;		 /* image */
	float          *fimga, *fimgb;		 /* float image */
	int             itype1 = 0;		 /* 0 = int, 1 = float	 */
	int             itype2 = 0;		 /* 0 = int, 1 = float	 */

	if (argc != 7) {
		printf ("Usage: anadif img1 hdr1 img2 hdr2 img3 hdr3\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	hdr3 = argv[5];
	img3 = argv[6];

/*	Get first image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anadif]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anadif]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anadif]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);

	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype1 = 0;
		imga = (short *) calloc (num, sizeof (short));
		if (imga == NULL) {
			fprintf (stderr, "ERROR [anadif]: calloc imga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anadif]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anadif]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype1 = 1;
		fimga = (float *) calloc (num, sizeof (float));
		if (fimga == NULL) {
			fprintf (stderr, "ERROR [anadif]: calloc fimga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anadif]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anadif]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else {
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

/*	Get second image */

	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anadif]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anadif]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anadif]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);
	if (num != dim1 * dim2 * dim3) {
		fprintf (stderr, "ERROR [anadif]: images are not same size\n");
		return (ERROR);
	}
	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype2 = 0;
		imgb = (short *) calloc (num, sizeof (short));
		if (imgb == NULL) {
			fprintf (stderr, "ERROR [anadif]: calloc imgb\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anadif]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (imgb, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anadif]: reading: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype2 = 1;
		fimgb = (float *) calloc (num, sizeof (float));
		if (fimgb == NULL) {
			fprintf (stderr, "ERROR [anadif]: calloc fimgb\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anadif]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (fimgb, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anadif]: reading: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
	} else {
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

/*	Subtract and write difference image */

	if ((fd_img = fopen (img3, "w")) == 0) {
		fprintf (stderr, "ERROR [anadif]: opening %s\n", img3);
		return (ERROR);
	}
	if (itype1 == 0 && itype2 == 0) {
		for (i = 0; i < num; i++)
			imga[i] -= imgb[i];
		if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anadif]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as integer\n", img3);
		free (imga);
		free (imgb);
	} else if (itype1 == 0 && itype2 == 1) {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			fimgb[i] -= imga[i];
		if ((fwrite (fimgb, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anadif]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (imga);
		free (fimgb);
	} else if (itype1 == 1 && itype2 == 0) {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			fimga[i] -= imgb[i];
		if ((fwrite (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anadif]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (fimga);
		free (imgb);
	} else {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			fimga[i] -= fimgb[i];
		if ((fwrite (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anadif]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (fimga);
		free (fimgb);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr3, "w")) == 0) {
		fprintf (stderr, "ERROR [anadif]: openng %s\n", hdr3);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anadif]: writing %s\n", hdr3);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	return (OK);
}
@


2.1
log
@read/write floats
@
text
@d2 3
d26 1
a26 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadif/RCS/anadif.c,v 2.1 2005/04/21 19:28:42 tom Exp $";
d38 1
a38 1
main (argc, argv)
d77 1
a77 1
	if (hdr.dime.dim[0] != 4) {
d139 1
a139 1
	if (hdr.dime.dim[0] != 4) {
@


2.0
log
@Feb 2004
@
text
@d2 3
d16 1
a16 1
 *	Date:			Feb 1999
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadif/RCS/anadif.c,v 1.3 2002/11/26 20:09:18 tom Exp tom $";
d43 3
a45 3
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* input file */
	char           *img3, *hdr3;	 /* output file */
d48 4
a51 1
	short          *imga, *imgb;	 /* image */
d67 1
a67 1
		fprintf (stderr, "ERROR [anadif]: Cannot open: %s\n", hdr1);
d71 1
a71 1
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", hdr1);
d75 1
a75 1
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", hdr1);
a78 10
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
d82 1
a83 1
	num = dim1*dim2*dim3;
d85 38
a122 3
	imga = (short*) calloc (num, sizeof (short));
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anadif]: Cannot calloc imga\n");
a124 10
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anadif]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (imga, sizeof(short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout,"Read %s\n", img1);
d129 1
a129 1
		fprintf (stderr, "ERROR [anadif]: Cannot open: %s\n", hdr2);
d133 1
a133 1
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", hdr2);
d137 1
a137 1
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", hdr2);
a140 10
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", hdr2);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
d144 1
d146 2
a147 3
	
	if (num != dim1*dim2*dim3) {
		fprintf (stderr, "ERROR [anadif]: Images are not same size\n");
d150 38
a187 4

	imgb = (short*) calloc (num, sizeof (short));
	if (imgb == NULL) {
		fprintf (stderr, "ERROR [anadif]: Cannot calloc imgb\n");
a189 10
	if ((fd_img = fopen (img2, "r")) == 0) {
		fprintf (stderr, "ERROR [anadif]: Cannot open: %s\n", img2);
		return (ERROR);
	}
	if ((fread (imgb, sizeof(short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anadif]: Reading: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout,"Read %s\n", img2);
a192 4
	for (i = 0; i < num; i++)
		imga[i] -= imgb[i];
	fprintf (stdout,"Subtracted\n");

d194 1
a194 1
		fprintf (stderr, "ERROR [anadif]: Unable to open %s\n", img3);
d197 46
a242 3
	if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anadif]: Error writing to: %s\n", img3);
		return (ERROR);
d247 1
a247 1
		fprintf (stderr, "ERROR [anadif]: Unable to open %s\n", hdr3);
d251 1
a251 1
		fprintf (stderr, "ERROR [anadif]: Error writing to: %s\n", hdr3);
a254 3

	free (imga);
	free (imgb);
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d13 1
a13 1
 *	Date:			Feb-99
d18 1
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadif/RCS/anadif.c,v 1.2 2002/08/15 20:34:26 tom Exp tom $";
d86 1
a86 1
	fclose (fd_hdr);
d102 1
a102 1
	fclose (fd_img);
d133 1
a133 1
	fclose (fd_hdr);
d153 1
a153 1
	fclose (fd_img);
d170 1
a170 1
	fclose (fd_img);
d180 1
a180 1
	fclose (fd_hdr);
@


1.2
log
@add stdlib
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadif/RCS/anadif.c,v 1.1 1999/02/09 17:55:40 tom Exp tom $";
a20 1
#include <string.h>
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadif/RCS/anasum.c,v 1.1 1999/01/29 16:34:14 tom Exp $";
d17 1
@
