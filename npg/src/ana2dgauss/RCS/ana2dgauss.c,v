head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.17.02.06;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.09.15.45.30;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.09.15.44.27;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.08.12.19.41.20;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: ana2dgauss.c,v $
 * Revision 1.3  2000/10/09  15:45:30  tom
 * *** empty log message ***
 *
 * Revision 1.2  2000/10/09  15:44:27  tom
 * filter multiple planes
 *
 * Revision 1.1  1999/08/12  19:41:20  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			ana2dgauss.c
 *	Date:			Aug 1999
 *	Author:			Tom Videen
 *	Description:	Apply 2D Gaussian filter to an image file.
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana2dgauss/RCS/ana2dgauss.c,v 1.3 2000/10/09 15:45:30 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <image.h>
#include <nr.h>
#include <nrutil.h>
#include <myvalues.h>
#include <ANALYZE.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	float        ***img;			 /* image array and frequency spectrum */
	float         **spec;			 /* contains portion of frequency spectrum not in */
	short          *row;			 /* single row of input image */
	float        ***data;
	unsigned long   dim1, dim2, dim3; /* array dimensions */
	unsigned long   nx, ny, nz;		 /* padded array dimensions */
	long            i, j, k;
	long            x0, y0;
	float           f0;			 /* half frequency 1/cm	 */
	float           fc;			 /* -log(2.)/f0	 */
	float           fac;		 /* filter factor */
	float           dx, dy;		 /* delta frequency for each dimension */
	float           fx, fy;		 /* frequency in each dimension */
	float           f;			 /* square of radial frequency */
	float           fnorm;		 /* required to normalize inverse FFT */

	if (argc != 6) {
		printf ("Usage: ana2dgauss inhdr inimg outhdr outimg freq\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	f0 = atof (argv[5]);

/*  Read hdr */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [ana2dgauss]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [ana2dgauss]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [ana2dgauss]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	dim1 = (unsigned long) hdr.dime.dim[1];
	dim2 = (unsigned long) hdr.dime.dim[2];
	dim3 = (unsigned long) hdr.dime.dim[3];

	row = (short *) calloc (dim1, sizeof (short));
	if (row == NULL) {
		fprintf (stderr, "ERROR [ana2dgauss]: Cannot calloc row\n");
		return (ERROR);
	}
	img = f3tensor (1, dim3, 1, dim2, 1, dim1);
	if (img == NULL) {
		fprintf (stderr, "ERROR [ana2dgauss]: Cannot malloc img\n");
		return (NULL);
	}
/*	Read img (flip unnecessary) */

	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [ana2dgauss]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	for (i = 1; i <= dim3; i++) {
		for (j = 1; j <= dim2; j++) {
			if ((fread (row, sizeof (short), dim1, fd_img)) != dim1) {
				fprintf (stderr, "ERROR [ana2dgauss]: Reading: %s\n", img1);
				return (ERROR);
			}
			for (k = 1; k <= dim1; k++) {
				if (row[k] == -32768)
					img[i][j][k] = 0;
				else
					img[i][j][k] = (float) row[k];
			}
		}
	}
	(void) fclose (fd_img);

/*	Pad before FFT */

	if (dim1 <= 128)
		nx = 128;
	else if (dim1 <= 256)
		nx = 256;
	else
		nx = 512;
	if (dim2 <= 128)
		ny = 128;
	else if (dim2 <= 256)
		ny = 256;
	else
		ny = 512;
	nz = 1;
	x0 = (nx - dim1) / 2;
	y0 = (ny - dim2) / 2;
	dx = 1.0 / ((float) nx * (hdr.dime.pixdim[1]));
	dy = 1.0 / ((float) ny * (hdr.dime.pixdim[2]));

	data = f3tensor (1, 1, 1, ny, 1, nx);
	spec = matrix (1, nz, 1, 2 * ny);
	fnorm = 2.0 / ((float) nx * (float) ny);

/*	Order of elements in freq spectrum defined on pp 526-7 of Numerical Recipes in C */

	fc = -log (2.0) / pow (f0, 2.0);

	for (i = 1; i <= dim3; i++) {
		for (j = 1; j < ny; j++)
			for (k = 1; k < nx; k++)
				data[1][j][k] = 0;
		for (j = 1; j <= dim2; j++)
			for (k = 1; k <= dim1; k++)
				data[1][j + y0][k + x0] = img[i][j][k];
		rlft3 (data, spec, 1, ny, nx, 1);/* wants dimensions z,y,x */
		for (j = 1; j <= ny; j++) {
			if (j <= ny / 2 + 1)
				fy = (j - 1) * dy;
			else
				fy = (ny - j + 1) * dy;
			for (k = 1; k <= nx / 2; k++) {
				fx = (k - 1) * dx;
				f = pow (fx, 2.0) + pow (fy, 2.0);
				fac = exp (f * fc);
				data[1][j][2 * k - 1] *= fac;
				data[1][j][2 * k] *= fac;
			}
			fx = (nx / 2) * dx;
			f = pow (fx, 2.0) + pow (fy, 2.0);
			fac = exp (f * fc);
			spec[1][2 * j - 1] *= fac;	/* effectively 0 */
			spec[1][2 * j] *= fac;
		}
		rlft3 (data, spec, 1, ny, nx, -1);
		for (j = 1; j <= dim2; j++)
			for (k = 1; k <= dim1; k++)
				img[i][j][k] = fnorm * data[1][j + y0][k + x0];
	}

/*	Write image */

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [ana2dgauss]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [ana2dgauss]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [ana2dgauss]: Unable to open %s\n", img2);
		return (ERROR);
	}
	for (i = 1; i <= dim3; i++) {
		for (j = 1; j <= dim2; j++) {
			for (k = 1; k <= dim1; k++)
				row[k] = (short) img[i][j][k];
			if (fwrite (row, sizeof (short), dim1, fd_img) != dim1) {
				fprintf (stderr, "ERROR [ana2dgauss]: Error writing to: %s\n", img2);
				return (ERROR);
			}
		}
	}

	(void) fclose (fd_img);
	free_matrix (spec, 1, 1, 1, 2 * ny);
	free_f3tensor (img, 1, nz, 1, ny, 1, nx);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d13 1
a13 1
 *	Date:			Aug-99
d18 1
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana2dgauss/RCS/ana2dgauss.c,v 1.2 2000/10/09 15:44:27 tom Exp tom $";
d77 1
a77 1
	fclose (fd_hdr);
d117 1
a117 1
	fclose (fd_img);
d189 1
a189 1
	fclose (fd_hdr);
d205 1
a205 2
	fclose (fd_img);
	free (img);
@


1.2
log
@filter multiple planes
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana2dgauss/RCS/ana2dgauss.c,v 1.1 1999/08/12 19:41:20 tom Exp tom $";
a141 1
	fprintf (stdout, "fc = %f\n",fc);
a143 1
		fprintf (stdout, "z = %d\n",i);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana2dgauss/RCS/ana2dgauss.c,v 1.1 1998/12/02 20:20:15 tom Exp $";
d139 4
a142 1
	for (i = 1; i <= nz; i++) {
d159 2
a160 2
				data[i][j][2 * k - 1] *= fac;
				data[i][j][2 * k] *= fac;
d165 2
a166 2
			spec[i][2 * j - 1] *= fac;	/* effectively 0 */
			spec[i][2 * j] *= fac;
@
