head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.09.07.15.05.12;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Log$ */
/*	===============================================================================
 *	Module:			chkmotion.c
 *	Date:			Sep 2006
 *	Author:			Tom Videen
 *	Description:	Check for motion in AIR log files
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/getprms_t88.c,v 2.2 2004/02/20 16:15:35 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <myvalues.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char          **argv;
{

	char           *fname;
	FILE           *fp;
	char            line[MAXLINE];
	float           x0, y0, z0, c0, mincost;
	float          *dx, *dy, *dz;
	float          *x, *y, *z, *cost;
	char            flag1, flag2;
	int             pct;
	int             frm;
	int             i;
	int             n = 0;

	fname = argv[1];
	frm = atoi (argv[2]) + 1;
	fp = fopen (fname, "r");
	if (fp == (FILE *) NULL) {
		fprintf (stderr,"ERROR [chkmotion]: opening %s\n", fname);
		return (ERROR);
	}
	x = (float *) calloc (50, sizeof (float));
	y = (float *) calloc (50, sizeof (float));
	z = (float *) calloc (50, sizeof (float));
	dx = (float *) calloc (50, sizeof (float));
	dy = (float *) calloc (50, sizeof (float));
	dz = (float *) calloc (50, sizeof (float));
	cost = (float *) calloc (50, sizeof (float));

	while (fgets (line, MAXLINE, fp) != NULL) {
		if (sscanf (line, "%f %f,%f,%f", &c0, &x0, &y0, &z0) != 0) {
			cost[n] = c0;
			x[n] = x0;
			y[n] = y0;
			z[n] = z0;
			if (n == 0) {
				dx[n] = 0;
				dy[n] = 0;
				dz[n] = 0;
				mincost = cost[n];
			} else {
				dx[n] = fabs (x0 - x[n - 1]);
				dy[n] = fabs (y0 - y[n - 1]);
				dz[n] = fabs (z0 - z[n - 1]);
				if (cost[n] < mincost)
					mincost = cost[n];
			}
			n++;
		}
	}
	for (i = 0; i < n; i++) {
		pct = (int) (100 * (cost[i] - mincost) / mincost);
		flag1 = ' ';
		if (pct > 25)
			flag1 = '*';
		flag2 = ' ';
		if (dx[i] > 2 || dy[i] > 2 || dz[i] > 2)
			flag2 = '*';
		fprintf (stdout, "%2d %9.0f %5d %c %6.1f %4.1f %4.1f %c\n",
			 frm + i, cost[i], pct, flag1, dx[i], dy[i], dz[i], flag2);
	}

	(void) fclose (fp);
	free (x);
	free (y);
	free (z);
	free (dx);
	free (dy);
	free (dz);
	free (cost);
	return (OK);
}
@
