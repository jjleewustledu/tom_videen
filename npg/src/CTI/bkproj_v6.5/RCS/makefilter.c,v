head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	95.04.10.18.17.27;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.04.10.17.44.24;	author tom;	state Exp;
branches;
next	;


desc
@original v6.5 from CTI
@


1.2
log
@initial 961 version
@
text
@/*
$Id$
$Log$
*/
/*  ===============================================================================
 *  Module:         makefilter.c
 *  Author:         CTI PET Systems, Inc
 *  Description:    Make the frequency filter
 *  History:
 *      10-Apr-95   Version for 961 TOV with rcsid
 *  ===============================================================================
 */

static char     rcsid[] = "$Header$";

/* $Revision:   1.0  $ $Date:   12/12/94 17:17:10  $                                            */
/* Copyright (c) 1993 CTI PET Systems, Inc.                     */

static char     whatInfo[] = "@@(#) $Workfile:   makefilter.c  $ $Revision:   1.0  $ $Date:   12/12/94 17:17:10  $ Copyright (c) 1994 CTI PET Systems, Inc.";

#include <math.h>

#define	NO_FILTER	0
#define	RAMP		1
#define	BUTTERWORTH	2
#define	HANN		3
#define	HAMMING		4
#define	PARZEN		5
#define	SHEPP		6
#define EXP		7
#define SCATTER		16
#define ADD_SCATTER	17

makefilter (nprojs, fx, fcode, fpars, buf1, buf2)
	int             fcode, nprojs;
	float          *fx, fpars[], *buf1, *buf2;

{
	int             i, retcode;
	float          *ptr, temp, x;

	retcode = 1;
	switch (fcode) {
	case NO_FILTER:
		printf ("makefilter: no filter specified\n");
		ptr = fx;
		for (i = 0; i < nprojs / 2; i++) {
			*ptr++ = 1.0;
			*ptr++ = 0.0;
		}
		fx[1] = 1.0;
		break;
	case RAMP:
		ramp (fx, fpars, nprojs);
		break;
	case BUTTERWORTH:
		ramp (fx, fpars, nprojs);
		butter (fx, fpars, nprojs);
		break;
	case HANN:
		ramp (fx, fpars, nprojs);
		hann (fx, fpars, nprojs);
		break;
	case HAMMING:
		ramp (fx, fpars, nprojs);
		hamm (fx, fpars, nprojs);
		break;
	case PARZEN:
		ramp (fx, fpars, nprojs);
		parz (fx, fpars, nprojs);
		break;
	case SHEPP:
		ramp (fx, fpars, nprojs);
		shepp (fx, fpars, nprojs);
		break;
	case EXP:
		exp_filter (fx, fpars, nprojs);
		break;
	case -RAMP:
		xramp (fx, fpars, nprojs, buf1, buf2);
		break;
	case -BUTTERWORTH:
		xramp (fx, fpars, nprojs, buf1, buf2);
		butter (fx, fpars, nprojs);
		break;
	case -HANN:
		xramp (fx, fpars, nprojs, buf1, buf2);
		hann (fx, fpars, nprojs);
		break;
	case -HAMMING:
		xramp (fx, fpars, nprojs, buf1, buf2);
		hamm (fx, fpars, nprojs);
		break;
	case -PARZEN:
		xramp (fx, fpars, nprojs, buf1, buf2);
		parz (fx, fpars, nprojs);
		break;
	case -SHEPP:
		xramp (fx, fpars, nprojs, buf1, buf2);
		shepp (fx, fpars, nprojs);
		break;
	case -EXP:
		exp_filter (fx, fpars, nprojs);
		break;
	case SCATTER:
		ptr = fx;
		for (i = 0; i < nprojs / 2; i++) {
			*ptr++ = 1.0;
			*ptr++ = 0.0;
		}
		scatter_correction (fx, fpars, nprojs);
		break;
	case ADD_SCATTER:
		ptr = fx;
		for (i = 0; i < nprojs / 2; i++) {
			*ptr++ = 1.0;
			*ptr++ = 0.0;
		}
		add_scatter (fx, fpars, nprojs);
		break;
	default:
		retcode = 0;
		break;
	}					 /* end switch */
/*
	for (i=0 ; i<nprojs ; i+=4)
	    printf("i, fx[i] = %d, %f\n", i, fx[i]) ;
*/
	return retcode;
}


#define MAXFFT 2048

xramp (fx, fpars, nprojs, tramp, h)
	float          *fx, fpars[], *tramp, *h;
	int             nprojs;
{
	int             i, n;
	int             tramp_size = 0;
	float           tau, ra;

	if (tramp_size != nprojs) {
		tau = 1.0;			 /* cm */
		n = nprojs / 2;

		for (i = 0; i < nprojs; i++)
			h[i] = 0.0;		 /* h[even] = 0.0 */
		h[n] = 1.0 / (4 * tau * tau);	 /* h[0] */
		for (i = 1; i < n; i += 2)
			h[n - i] = h[n + i] = -1.0 / (((float) i * M_PI * tau) * ((float) i * M_PI * tau));
		xfrf_ (tramp, &ra, h, &n);
		xldone_ (tramp);
		for (i = 0; i < n; i++) {
			tramp[2 * i] = 0.5 * sqrt ((double) (tramp[2 * i] * tramp[2 * i] +
							     tramp[2 * i + 1] * tramp[2 * i + 1]));
			tramp[2 * i + 1] = 0.0;
		}
		tramp[1] = 0.5 * ra;
		tramp_size = nprojs;
	}
	for (i = 0; i < nprojs; i++)
		fx[i] = (((float) (i >> 1) * 0.5 / (float) n > fpars[0]) ? 0.0 : tramp[i]);
}

ramp (fx, fpars, nprojs)
	float          *fx, fpars[];
	int             nprojs;

{
	int             i;
	float          *ptr;
	float           cutoff, dc_component, ramp_slope, v;

	cutoff = (fpars[0] == 0.0) ? 0.5 : fpars[0];
	dc_component = fpars[1];
	ramp_slope = (fpars[2] == 0.0) ? 0.5 : fpars[2];
	v = ramp_slope / (float) (nprojs / 2);

	fx[0] = dc_component * v;
	fx[1] = (ramp_slope <= cutoff) ? ramp_slope : 0.0;
	ptr = fx + 2;
	for (i = 1; i < nprojs / 2; i++) {
		*ptr++ = ((float) i * v <= cutoff) ? (float) i *v : 0.0;

		*ptr++ = 0.0;
	}
}

hann (fx, fpars, nprojs)
	float          *fx, fpars[];
	int             nprojs;
{
	int             i;
	float           x;

	fx[1] *= 0.5 * (1.0 + cos (M_PI * fx[1] / fpars[0]));
	for (i = 1; i < nprojs / 2; i++) {
		fx[2 * i] *= 0.5 * (1.0 + cos (M_PI * fx[2 * i] / fpars[0]));
	}
}

hamm (fx, fpars, nprojs)
	float          *fx, fpars[];
	int             nprojs;
{
	int             i;

	fx[1] *= 0.54 + 0.46 * cos (M_PI * fx[1] / fpars[0]);
	for (i = 1; i < nprojs / 2; i++)
		fx[2 * i] *= 0.54 + 0.46 * cos (M_PI * fx[2 * i] / fpars[0]);

}

parz (fx, fpars, nprojs)
	float          *fx, fpars[];
	int             nprojs;
{
	int             i;
	float           q;

	q = fx[1] / fpars[0];
	fx[1] *= (q < 0.5) ? 1.0 - 6.0 * q * q * (1.0 - q) :
		2.0 * (1.0 - q) * (1.0 - q) * (1.0 - q);

	for (i = 1; i < nprojs / 2; i++) {
		q = fx[2 * i] / fpars[0];
		fx[2 * i] *= (q < 0.5) ? 1.0 - 6.0 * q * q * (1.0 - q) :
			2.0 * (1.0 - q) * (1.0 - q) * (1.0 - q);
	}
}

shepp (fx, fpars, nprojs)
	float          *fx, fpars[];
	int             nprojs;
{
	double          sin ();
	float           cutoff, q, x;
	int             i;

	cutoff = fpars[0];
	if (cutoff <= 0.0)
		cutoff = 0.5;
	q = 2.0 * cutoff / M_PI;
	for (i = 0; i < nprojs / 2; i++) {
		fx[2 * i] = q * sin ((double) fx[2 * i] / q);
		if (fx[2 * i] < 0)
			fx[2 * i] = 0;
	}
}

butter (fx, fpars, nprojs)
	float          *fx, fpars[];
	int             nprojs;
{
	double          sqrt ();
	float           cutoff, x, orderx, xipow ();
	int             i;

	cutoff = fpars[4];
	if (cutoff <= 0.0)
		cutoff = 0.5;
	orderx = fpars[3];
	if (orderx <= 0.0)
		orderx = 6.0;

	for (i = 0; i < nprojs / 2; i++) {
		x = 0.5 / ((nprojs - 2) / 2.0);
		fx[2 * i] *= sqrt (1.0 / (1.0 + xipow (i * x / cutoff, (int) orderx)));
	}
}

float           xipow (x, p)
	float           x;
	int             p;
{
	float           r = 1.0;
	int             i;

	for (i = 0; i < p; i++)
		r = r * x;
	return r;
}

exp_filter (fx, fpars, nprojs)
	float          *fx, fpars[];
	int             nprojs;
{
	int             i, pow;
	float           x, cutoff, xp;

	cutoff = fpars[0];
	if (cutoff <= 0.0)
		cutoff = 0.5;
	pow = (int) fpars[1];
	if (pow < 1)
		pow = 1;
	for (i = 0; i < nprojs / 2; i++) {
		x = (float) i / (float) (nprojs / 2);
		xp = xipow (2.0 * x / cutoff, pow);
		fx[2 * i] = x * exp (-xp);
		fx[2 * i + 1] = 0.0;
	}
	x = 1.0;
	xp = xipow (2.0 * x / cutoff, pow);
	fx[1] = x * exp (-xp);
}

scatter_correction (fx, fpars, nprojs)
	float          *fx, fpars[];
	int             nprojs;
{
	int             i;
	float           sf, slope, pix_size;
	float           v, a2, w2, fmod, aa, freq;

	if (fpars[4] <= 0.0)
		return;
	if (fpars[5] <= 0.0)
		return;
	sf = fpars[4];
	slope = fpars[5];
	pix_size = fpars[6];
	v = 0.5 / ((float) nprojs / 2.0);
	a2 = (slope * pix_size) * (slope * pix_size);
	for (i = 1; i < nprojs / 2; i++) {
		freq = (float) i *v;

		w2 = (2 * M_PI * freq) * (2 * M_PI * freq);
		aa = a2 / (a2 + w2);
		fmod = 1.0 / (1.0 + sf * (aa - 1.0));
		fx[2 * i] = fmod;
	}

	/* last point */
	freq = 0.5;
	w2 = (2 * M_PI * freq) * (2 * M_PI * freq);
	aa = a2 / (a2 + w2);
	fmod = 1.0 / (1.0 + sf * (aa - 1.0));
	fx[1] = fmod;

}

add_scatter (fx, fpars, nprojs)
	float          *fx, fpars[];
	int             nprojs;
{
	int             i;
	float           sf, slope, pix_size;
	float           v, a2, w2, fmod, aa, freq;

	if (fpars[4] <= 0.0)
		return;
	if (fpars[5] <= 0.0)
		return;
	sf = fpars[4];
	slope = fpars[5];
	pix_size = fpars[6];
	v = 0.5 / ((float) nprojs / 2.0);
	a2 = (slope * pix_size) * (slope * pix_size);
	for (i = 1; i < nprojs / 2; i++) {
		freq = (float) i *v;

		w2 = (2 * M_PI * freq) * (2 * M_PI * freq);
		aa = a2 / (a2 + w2);
		fmod = 1.0 / (1.0 + sf * (aa - 1.0));
		fx[2 * i] = 1.0 / fmod;
	}

	/* last point */
	freq = 0.5;
	w2 = (2 * M_PI * freq) * (2 * M_PI * freq);
	aa = a2 / (a2 + w2);
	fmod = 1.0 / (1.0 + sf * (aa - 1.0));
	fx[1] = 1.0 / fmod;
}
@


1.1
log
@Initial revision
@
text
@d1 15
a17 4
 
static char whatInfo[] = "@@(#) $Workfile:   makefilter.c  $ $Revision:   1.0  $ $Date:   12/12/94 17:17:10  $ Copyright (c) 1994 CTI PET Systems, Inc.";
 
/*  makefilter.c : Make the frequency filter */
d19 2
d34 3
a36 1
makefilter(nprojs, fx, fcode, fpars, buf1, buf2)
a37 3
int	fcode, nprojs ;
float	*fx, fpars[], *buf1, *buf2 ;

d39 2
a40 2
int	i, retcode ;
float	*ptr, temp, x ;
d42 1
a42 1
	retcode = 1 ;
d44 81
a124 81
	  case NO_FILTER :
	     printf("makefilter: no filter specified\n") ;
	     ptr = fx ;
	     for (i=0 ; i<nprojs/2 ; i++) {
		*ptr++ = 1.0 ;
		*ptr++ = 0.0 ;
	     } 
	     fx[1] = 1.0;
	     break ;
	  case RAMP :
	     ramp(fx, fpars, nprojs) ;
    	     break ;
	  case BUTTERWORTH :
	     ramp(fx, fpars, nprojs) ;
	     butter(fx, fpars, nprojs ) ;
	     break ;
	  case HANN :
	     ramp(fx, fpars, nprojs) ;
	     hann(fx, fpars, nprojs) ;
	     break ;
	  case HAMMING:
	     ramp(fx, fpars, nprojs) ;
	     hamm(fx, fpars, nprojs) ;
	     break ;
	  case PARZEN :
	     ramp(fx, fpars, nprojs) ;
	     parz(fx, fpars, nprojs) ;
	     break ;
	  case SHEPP :
	     ramp(fx, fpars, nprojs) ;
	     shepp(fx, fpars, nprojs) ;
	     break ;
	  case EXP:
	     exp_filter(fx, fpars, nprojs);
	     break;
	  case -RAMP :
	     xramp(fx, fpars, nprojs, buf1, buf2) ;
	     break ;
	  case -BUTTERWORTH :
	     xramp(fx, fpars, nprojs, buf1, buf2) ;
	     butter(fx, fpars, nprojs ) ;
	     break ;
	  case -HANN :
	     xramp(fx, fpars, nprojs, buf1, buf2) ;
	     hann(fx, fpars, nprojs) ;
	     break ;
	  case -HAMMING:
	     xramp(fx, fpars, nprojs, buf1, buf2) ;
	     hamm(fx, fpars, nprojs) ;
	     break ;
	  case -PARZEN :
	     xramp(fx, fpars, nprojs, buf1, buf2) ;
	     parz(fx, fpars, nprojs) ;
	     break ;
	  case -SHEPP :
	     xramp(fx, fpars, nprojs, buf1, buf2) ;
	     shepp(fx, fpars, nprojs) ;
	     break ;
	  case -EXP:
	     exp_filter(fx, fpars, nprojs);
	     break;
	  case SCATTER:
	     ptr = fx ;
	     for (i=0 ; i<nprojs/2 ; i++) {
		*ptr++ = 1.0 ;
		*ptr++ = 0.0 ;
	     } 
	     scatter_correction(fx, fpars, nprojs) ;
	     break ;
	  case ADD_SCATTER:
	     ptr = fx ;
	     for (i=0 ; i<nprojs/2 ; i++) {
		*ptr++ = 1.0 ;
		*ptr++ = 0.0 ;
	     } 
	     add_scatter(fx, fpars, nprojs) ;
	     break ;
	  default :
	     retcode = 0 ;
	     break ;
	}  /* end switch */
d129 1
a129 1
	return retcode ;
d135 3
a137 3
xramp( fx, fpars, nprojs, tramp, h)
  float *fx, fpars[], *tramp, *h ;
  int nprojs;
d139 3
a141 3
	int i,n;
	int tramp_size=0;
	float tau, ra ;
d143 3
a145 4
	if (tramp_size != nprojs)
	{
	  tau = 1.0; /* cm */
	  n=nprojs/2;
d147 14
a160 15
	  for (i=0; i<nprojs; i++)
	    h[i] = 0.0;			/* h[even] = 0.0 */
	  h[n] = 1.0/(4*tau*tau);		/* h[0] */
	  for (i=1; i<n; i+=2)
	    h[n-i] = h[n+i] = -1.0/(((float)i*M_PI*tau)*((float)i*M_PI*tau));
	  xfrf_( tramp, &ra, h, &n);
	  xldone_(tramp) ; 
	  for (i=0; i<n; i++)
	  {
	    tramp[2*i] = 0.5*sqrt((double)(tramp[2*i]*tramp[2*i]+
			        tramp[2*i+1]*tramp[2*i+1]));
	    tramp[2*i+1] = 0.0;
	  }
	  tramp[1] = 0.5*ra;
	  tramp_size = nprojs ;
d162 2
a163 2
	for (i=0; i<nprojs; i++)
	  fx[i] = (((float)(i>>1)*0.5/(float)n > fpars[0]) ? 0.0 : tramp[i]);
d166 3
a168 1
ramp(fx, fpars, nprojs)
a169 3
float	*fx, fpars[] ;
int	nprojs ;

d171 3
a173 3
int	i ;
float	*ptr ;
float	cutoff, dc_component, ramp_slope, v ;
d175 4
a178 4
	cutoff = (fpars[0] == 0.0) ? 0.5 : fpars[0] ;
	dc_component = fpars[1] ;
	ramp_slope = (fpars[2] == 0.0) ? 0.5 : fpars[2] ;
	v = ramp_slope/(float)(nprojs/2) ;
d180 2
a181 2
	fx[0] = dc_component * v ;
	fx[1] = ( ramp_slope <= cutoff) ? ramp_slope : 0.0;
d183 4
a186 3
	for (i=1 ; i<nprojs/2 ; i++) {
	  *ptr++ = ((float)i*v <= cutoff) ? (float)i*v : 0.0;
	  *ptr++ = 0.0 ;
d190 3
a192 3
hann( fx, fpars, nprojs)
  float *fx, fpars[];
  int nprojs;
d194 2
a195 2
	int i;
	float x ;
d197 3
a199 4
	fx[1] *= 0.5*(1.0+cos(M_PI*fx[1]/fpars[0])); 
	for (i=1; i<nprojs/2; i++)
	{
	  fx[2*i] *= 0.5*(1.0+cos(M_PI*fx[2*i]/fpars[0]));
d203 3
a205 3
hamm( fx, fpars, nprojs)
  float *fx, fpars[];
  int nprojs;
d207 1
a207 1
	int i;
d209 3
a211 3
	fx[1] *= 0.54+0.46*cos(M_PI*fx[1]/fpars[0]);
	for (i=1; i<nprojs/2; i++)
	  fx[2*i] *= 0.54+0.46*cos(M_PI*fx[2*i]/fpars[0]);
d215 3
a217 3
parz( fx, fpars, nprojs)
  float *fx, fpars[];
  int nprojs;
d219 2
a220 2
	int i;
	float q;
d222 3
a224 3
	q = fx[1]/fpars[0];
	fx[1] *= (q<0.5)? 1.0-6.0*q*q*(1.0-q) :
			     2.0*(1.0-q)*(1.0-q)*(1.0-q);
d226 4
a229 4
	for (i=1; i<nprojs/2; i++)
	{ q = fx[2*i]/fpars[0];
	  fx[2*i] *= (q<0.5)? 1.0-6.0*q*q*(1.0-q) :
			     2.0*(1.0-q)*(1.0-q)*(1.0-q);
d233 3
a235 3
shepp( fx, fpars, nprojs)
  float *fx, fpars[] ;
  int nprojs ;
d237 3
a239 3
	double	sin() ;
	float	cutoff, q, x ;
	int	i ;
d241 8
a248 7
	cutoff = fpars[0] ;
	if (cutoff <= 0.0) cutoff = 0.5 ;
	q = 2.0 * cutoff / M_PI ;
	for (i=0 ; i<nprojs/2 ; i++)
	{
	   fx[2*i] = q * sin( (double) fx[2*i]/q) ;
	   if (fx[2*i] < 0) fx[2*i] = 0 ;
d252 3
a254 3
butter( fx, fpars, nprojs)
  float *fx, fpars[] ;
  int	nprojs ;
d256 3
a258 3
	double sqrt() ;
	float	cutoff, x, orderx, xipow() ;
	int	i ;
d260 6
a265 4
	cutoff = fpars[4] ;
	if (cutoff <= 0.0) cutoff = 0.5 ;
	orderx = fpars[3] ;
	if (orderx <= 0.0) orderx = 6.0 ;
d267 3
a269 4
	for (i=0 ; i<nprojs/2 ; i++)
	{
	   x = 0.5/((nprojs-2)/2.0) ;
	   fx[2*i] *= sqrt(1.0/(1.0 + xipow( i*x/cutoff, (int) orderx)));
d273 3
a275 2
float xipow( x, p)
  float x;  int p;
d277 2
a278 1
	float r=1.0; int i;
d280 2
a281 1
	for (i=0; i<p; i++) r=r*x;
d285 3
a287 3
exp_filter( fx, fpars, nprojs)
  float *fx, fpars[];
  int nprojs;
d289 2
a290 2
	int i, pow;
	float x, cutoff, xp;
d293 2
a294 1
	if (cutoff <= 0.0) cutoff = 0.5;
d296 7
a302 7
	if (pow < 1) pow = 1;
	for( i=0; i<nprojs/2; i++)
	{
	  x = (float) i/(float)(nprojs/2);
	  xp = xipow(2.0*x/cutoff, pow);
	  fx[2*i] = x*exp(-xp);
	  fx[2*i+1] = 0.0;
d305 2
a306 2
	xp = xipow(2.0*x/cutoff, pow);
	fx[1] = x*exp(-xp);
d309 3
a311 3
scatter_correction(fx, fpars, nprojs)
  float *fx, fpars[] ;
  int	nprojs ;
d313 3
a315 3
  int	i ;
  float sf, slope, pix_size ;
  float	v, a2, w2, fmod, aa , freq ;
d317 16
a332 14
	if (fpars[4] <= 0.0) return ;
	if (fpars[5] <= 0.0) return ;
	sf = fpars[4] ;
	slope = fpars[5] ;
	pix_size = fpars[6] ;
	v = 0.5/((float) nprojs/2.0) ;
	a2 = (slope*pix_size) * (slope*pix_size) ;
	for (i=1 ; i<nprojs/2 ; i++)
	{
	   freq = (float) i * v ;
	   w2 = (2*M_PI*freq) * ( 2*M_PI*freq) ;
	   aa = a2 /(a2 + w2) ;
	   fmod = 1.0/(1.0 + sf * (aa - 1.0)) ;
	   fx[2*i] = fmod ;
d336 5
a340 5
	freq = 0.5 ;
	w2 = (2*M_PI*freq) * (2*M_PI*freq) ;
	aa = a2 / (a2 + w2) ;
	fmod = 1.0/(1.0 + sf * (aa -1.0)) ;
	fx[1] = fmod ;
d344 3
a346 3
add_scatter(fx, fpars, nprojs)
  float *fx, fpars[] ;
  int	nprojs ;
d348 3
a350 3
  int i ;
  float sf, slope, pix_size ;
  float	v, a2, w2, fmod, aa , freq ;
d352 16
a367 14
	if (fpars[4] <= 0.0) return ;
	if (fpars[5] <= 0.0) return ;
	sf = fpars[4] ;
	slope = fpars[5] ;
	pix_size = fpars[6] ;
	v = 0.5/((float) nprojs/2.0) ;
	a2 = (slope*pix_size) * (slope*pix_size) ;
	for (i=1 ; i<nprojs/2 ; i++)
	{
	   freq = (float) i * v ;
	   w2 = (2*M_PI*freq) * ( 2*M_PI*freq) ;
	   aa = a2 /(a2 + w2) ;
	   fmod = 1.0/(1.0 + sf * (aa - 1.0)) ;
	   fx[2*i] = 1.0/fmod ;
d371 5
a375 5
	freq = 0.5 ;
	w2 = (2*M_PI*freq) * (2*M_PI*freq) ;
	aa = a2 / (a2 + w2) ;
	fmod = 1.0/(1.0 + sf * (aa -1.0)) ;
	fx[1] = 1.0/fmod ;
@
