head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.02.16.14.39.49;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.26.20.55.32;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.02.08.18.39.07;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.01.19.19.58;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Feb 2004
@
text
@/*	$Log: expandor.c,v $
 * Revision 1.3  2002/11/26  20:55:32  tom
 * *** empty log message ***
 *
 * Revision 1.2  1999/02/08  18:39:07  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/02/01  19:19:58  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			expandor.c
 *	Date:			Jan 1999
 *	Author:			Tom Videen
 *	Description:	Set to val all connected pixels which are <= min OR >= max.
 *					and connected to a pixel with specified old value.
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/expandor/RCS/expandor.c,v 1.3 2002/11/26 20:55:32 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <image.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			expandor
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	void			expand_or ();
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	int             fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            i, j, k;
	short           min, max; 		 /* include all <= or >= these pixel values */
	short        	old;			 /* pixels have this value in old mask */
	short        	val;			 /* set pixels to this value */
	short        ***img;			 /* image */
	short        ***set;			 /* pixels set if in skull */
	short          *row;			 /* single row of input image */
	long            npixels = 0;

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 9) {
		printf ("Usage: expandor img1 hdr1 img2 hdr2 oldval newval min max\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	old = atoi (argv[5]);
	val = atoi (argv[6]);
	min = atoi (argv[7]);
	max = atoi (argv[8]);

/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [expandor]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [expandor]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [expandor]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [expandor]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [expandor]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

/*
 *	Read img
 */

	if ((fd_img = open (img1, O_RDONLY, 0444)) < 0) {
		fprintf (stderr, "ERROR [expandor]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((img = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [expandor]: Cannot malloc img\n");
		return (ERROR);
	}
	if (NULL == (row = (short *) calloc (dim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [expandor]: Cannot calloc memory for row\n");
		return (ERROR);
	}
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			read (fd_img, row, dim1 * 2);
			for (k = 1; k <= dim1; k++)
				img[i][j][dim1 - (k - 1)] = row[k - 1];
		}
	}

	(void) close (fd_img);

	if ((set = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [expandor]: Cannot calloc set\n");
		return (ERROR);
	}
/*
 *	Mask
 */

	expand_or (img, set, old, val, min, max, dim1, dim2, dim3, &npixels);
	printf ("Total Newly Masked Pixels = %li\n",npixels);

/*
 * Write to output file
 */

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [expandor]: Unable to create ANALYZE header %s\n", hdr2);
		return (ERROR);
	}
	if ((fd_img = open (img2, O_CREAT | O_RDWR, 0666)) == 0) {
		fprintf (stderr, "ERROR [expandor]: Unable to create ANALYZE image %s\n", img2);
		return (ERROR);
	}
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			for (k = 1; k <= dim1; k++)
				row[k - 1] = img[i][j][dim1 - (k - 1)];
			write (fd_img, (char *) row, dim1 * 2);
		}
	}

	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [expandor]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}

	printf ("Converted: %s to %s\n", img1, img2);
	free_s3tensor (img, 1, dim3, 1, dim2, 1, dim1);
	free_s3tensor (set, 1, dim3, 1, dim2, 1, dim1);
	free (row);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d13 1
a13 1
 *	Date:			Jan-99
d19 1
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/expandor/RCS/expandor.c,v 1.2 1999/02/08 18:39:07 tom Exp tom $";
d104 1
a104 1
	fclose (fd_hdr);
d130 1
a130 1
	close (fd_img);
d141 1
a141 1
	printf ("Total Newly Masked Pixels = %i\n",npixels);
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/expandor/RCS/expandor.c,v 1.1 1999/02/01 19:19:58 tom Exp tom $";
d21 1
a21 1
#include <string.h>
a23 1
#include <libimage.h>
a25 1
#include <matrixlib.h>
d111 1
a111 1
		fprintf (stderr, "ERROR [expandor]: Cannot calloc img\n");
d115 1
a115 1
		fprintf (stderr, "ERROR [expandor]: Cannot malloc memory for row\n");
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d10 1
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/expandor/RCS/expandor.c,v 1.1 1999/01/12 15:44:41 tom Exp tom $";
a156 9
/*
	for (i = 1; i <= dim3; i++) {
		for (j = 1; j <= dim2; j++) {
			for (k = 1; k <= dim1; k++)
				row[k] = (short) img[i][j][k];
			write (fd_img, (char *) row, dim1 * 2);
		}
	}
*/
a161 3
/*
 *	Free & Exit
 */
@
