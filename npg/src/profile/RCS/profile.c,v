head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2004.09.16.15.52.26;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* ===============================================================================
 *	Module:			profile.c
 *	Date:			Sep 2004
 *	Author:			Tom Videen
 *	Description:	Get profile from an image
 * ===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/profile/RCS/profile.c,v 3.0 2004/02/16 15:25:45 tom Exp $";

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <pettable.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	SubHeader      *sh;
	float        ***img;
	char           *fname1;
	int				y, z;
	long   			nx, ny, nz;
	long            frm, i;

/*	Get command line arguments	*/

	fname1 = argv[1];
	y = atoi (argv[2]);
	z = atoi (argv[3]);

	frm = 1;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file = make_imgfile (fname1);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [profile]: opening %s\n", fname1);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [profile]: getting MainHeader from %s\n", fname1);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		if (frm == 1) {
			indx.frm = 2;
			if (existimgfrm (file, &indx) == ERROR) {
				indx.frm = 3;
				if (existimgfrm (file, &indx) == ERROR) {
					fprintf (stderr, "ERROR [profile]: cannot find %s frame 1, 2 or 3\n", fname1);
					return (ERROR);
				}
			}
		} else {
			fprintf (stderr, "ERROR [profile]: cannot find %s frame %ld\n", fname1, frm);
			return (ERROR);
		}
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [profile]: Could not read file subheader in %s\n", fname1);
		return (ERROR);
	}
	sh = file->sh;

	nx = (unsigned long) sh->dim1;
	ny = (unsigned long) sh->dim2;
	nz = (unsigned long) sh->dim3;

	if ((img = readtensor (file, &indx)) == NULL)
		return (ERROR);

	for (i = 1; i <= nx; i++)
		fprintf (stdout, "%3ld %8.4f\n", i, img[z][y][i]);

	close_imgfile (file);
	free_f3tensor (img, 1, nz, 1, ny, 1, nx);
	free_imgfile (file);
	return (OK);
}
@
