head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	2011.02.17.22.08.31;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2008.12.19.17.40.18;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.17.12.31;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.21.18.13.52;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.20.18.53.03;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.20.13.39.49;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.20.13.36.40;	author tom;	state Exp;
branches;
next	;


desc
@@


2.2
log
@read floats or short ints
@
text
@/*	$Log: anadiv.c,v $
 * Revision 2.1  2008/12/19  17:40:18  tom
 * read if 3 dimensions (SPM5)
 *
 * Revision 2.0  2004/02/13  17:12:31  tom
 * Feb 2004
 *
 * Revision 1.4  2002/08/21  18:13:52  tom
 * fix bug (type float)
 *
 * Revision 1.3  2002/08/20  18:53:03  tom
 * write floating pt image
 *
 * Revision 1.2  2002/08/20  13:39:49  tom
 * *** empty log message ***
 *
 * Revision 1.1  2002/08/20  13:36:40  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anadiv.c
 *	Date:			Aug 2002
 *	Author:			Tom Videen
 *	Description:	Divide one Analyze image by another; output is always a floating pt image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadiv/RCS/anadiv.c,v 2.1 2008/12/19 17:40:18 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anadiv
 *	----------------------------
 */
int             main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* input file */
	char           *img3, *hdr3;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	short          *imga, *imgb;		 /* image */
	float          *fimga, *fimgb;		 /* float image */
	float          *imgc;			 /* output ratio image */
	float           maxi = 0;
	int             itype1;			 /* 0 = int, 1 = float   */
	int             itype2;			 /* 0 = int, 1 = float   */

	if (argc != 7) {
		fprintf (stderr, "Usage: anadiv img1 hdr1 img2 hdr2 img3 hdr3\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	hdr3 = argv[5];
	img3 = argv[6];

/*	Get first image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anadiv]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anadiv]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anadiv]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);

	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype1 = 0;
		imga = (short *) calloc (num, sizeof (short));
		if (imga == NULL) {
			fprintf (stderr, "ERROR [anasum]: calloc imga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anasum]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype1 = 1;
		fimga = (float *) calloc (num, sizeof (float));
		if (fimga == NULL) {
			fprintf (stderr, "ERROR [anasum]: calloc fimga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anasum]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else {
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

/*	Get second image */

	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anasum]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anasum]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anasum]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);
	if (num != dim1 * dim2 * dim3) {
		fprintf (stderr, "ERROR [anasum]: images are not same size\n");
		return (ERROR);
	}
	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype2 = 0;
		imgb = (short *) calloc (num, sizeof (short));
		if (imgb == NULL) {
			fprintf (stderr, "ERROR [anasum]: calloc imgb\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anasum]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (imgb, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: reading: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype2 = 1;
		fimgb = (float *) calloc (num, sizeof (float));
		if (fimgb == NULL) {
			fprintf (stderr, "ERROR [anasum]: calloc fimgb\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anasum]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (fimgb, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: reading: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
	} else {
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

/*	Divide and write ratio image */

	imgc = (float *) calloc (num, sizeof (float));
	if (imgc == NULL) {
		fprintf (stderr, "ERROR [anadiv]: Cannot calloc imgc\n");
		return (ERROR);
	}
	if (itype1 == 0) {
		if (itype2 == 0) {
			for (i = 0; i < num; i++) {
				if (imgb[i] != 0)
					imgc[i] = (float) imga[i] / (float) imgb[i];
				else
					imgc[i] = 0;
				if (imgc[i] > maxi)
					maxi = imgc[i];
			}
		} else {
			for (i = 0; i < num; i++) {
				if (fimgb[i] != 0)
					imgc[i] = (float) imga[i] / fimgb[i];
				else
					imgc[i] = 0;
				if (imgc[i] > maxi)
					maxi = imgc[i];
			}
		}
	} else {
		if (itype2 == 0) {
			for (i = 0; i < num; i++) {
				if (imgb[i] != 0)
					imgc[i] = fimga[i] / (float) imgb[i];
				else
					imgc[i] = 0;
				if (imgc[i] > maxi)
					maxi = imgc[i];
			}
		} else {
			for (i = 0; i < num; i++) {
				if (fimgb[i] != 0)
					imgc[i] = fimga[i] / fimgb[i];
				else
					imgc[i] = 0;
				if (imgc[i] > maxi)
					maxi = imgc[i];
			}
		}
	}

	fprintf (stdout, "Max = %f\n", maxi);

	if ((fd_img = fopen (img3, "w")) == 0) {
		fprintf (stderr, "ERROR [anadiv]: Unable to open %s\n", img3);
		return (ERROR);
	}
	if ((fwrite (imgc, sizeof (float), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anadiv]: Error writing to: %s\n", img3);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr3, "w")) == 0) {
		fprintf (stderr, "ERROR [anadiv]: Unable to open %s\n", hdr3);
		return (ERROR);
	}
	hdr.dime.datatype = 16;			 /* floating pt */
	hdr.dime.bitpix = 32;
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anadiv]: Error writing to: %s\n", hdr3);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	free (imgc);
	return (OK);
}
@


2.1
log
@read if 3 dimensions (SPM5)
@
text
@d2 3
d29 1
a29 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadiv/RCS/anadiv.c,v 2.0 2004/02/13 17:12:31 tom Exp tom $";
d41 1
a41 1
int main (argc, argv)
d49 4
a52 4
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* input file */
	char           *img3, *hdr3;	 /* output file */
	long            dim1, dim2, dim3; /* dimensions of image */
d54 2
a55 1
	short          *imga, *imgb;	 /* image */
d58 2
a86 10
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anadiv]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anadiv]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
d92 1
d94 38
a131 3
	imga = (short *) calloc (num, sizeof (short));
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anadiv]: Cannot calloc imga\n");
a133 10
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anadiv]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anadiv]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img1);
d138 1
a138 1
		fprintf (stderr, "ERROR [anadiv]: Cannot open: %s\n", hdr2);
d142 1
a142 1
		fprintf (stderr, "ERROR [anadiv]: Reading: %s\n", hdr2);
d146 1
a146 1
		fprintf (stderr, "ERROR [anadiv]: Reading: %s\n", hdr2);
a149 10
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anadiv]: Reading: %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anadiv]: Reading: %s\n", hdr2);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
d153 1
a154 1

d156 1
a156 1
		fprintf (stderr, "ERROR [anadiv]: Images are not same size\n");
d159 38
a196 3
	imgb = (short *) calloc (num, sizeof (short));
	if (imgb == NULL) {
		fprintf (stderr, "ERROR [anadiv]: Cannot calloc imgb\n");
a198 10
	if ((fd_img = fopen (img2, "r")) == 0) {
		fprintf (stderr, "ERROR [anadiv]: Cannot open: %s\n", img2);
		return (ERROR);
	}
	if ((fread (imgb, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anadiv]: Reading: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img2);
d207 40
a246 7
	for (i = 0; i < num; i++) {
		if (imgb[i] != 0)
			imgc[i] = (float) imga[i] / (float) imgb[i];
		else
			imgc[i] = 0;
		if (imgc[i] > maxi)
			maxi = imgc[i];
d248 1
a271 3

	free (imga);
	free (imgb);
@


2.0
log
@Feb 2004
@
text
@d2 3
d26 1
a26 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadiv/RCS/anadiv.c,v 1.4 2002/08/21 18:13:52 tom Exp tom $";
d38 1
a38 1
main (argc, argv)
d76 1
a76 1
	if (hdr.dime.dim[0] != 4) {
d123 1
a123 1
	if (hdr.dime.dim[0] != 4) {
@


1.4
log
@fix bug (type float)
@
text
@d2 3
d21 1
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadiv/RCS/anadiv.c,v 1.3 2002/08/20 18:53:03 tom Exp tom $";
@


1.3
log
@write floating pt image
@
text
@d2 3
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadiv/RCS/anadiv.c,v 1.2 2002/08/20 13:39:49 tom Exp tom $";
d177 1
a177 1
	if ((fwrite (imgc, sizeof (short), num, fd_img)) != num) {
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d12 1
a12 1
 *	Description:	Divide one Analyze image by another
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadiv/RCS/anadiv.c,v 1.1 2002/08/20 13:36:40 tom Exp tom $";
d39 1
a39 1
	long            dim1, dim2, dim3;	 /* dimensions of image */
d42 2
d85 1
a85 1
	num = dim1*dim2*dim3;
d87 1
a87 1
	imga = (short*) calloc (num, sizeof (short));
d96 1
a96 1
	if ((fread (imga, sizeof(short), num, fd_img)) != num) {
d101 1
a101 1
	fprintf (stdout,"Read %s\n", img1);
d132 2
a133 2
	
	if (num != dim1*dim2*dim3) {
d137 1
a137 2

	imgb = (short*) calloc (num, sizeof (short));
d146 1
a146 1
	if ((fread (imgb, sizeof(short), num, fd_img)) != num) {
d151 1
a151 1
	fprintf (stdout,"Read %s\n", img2);
d155 5
d162 1
a162 1
			imga[i] /= imgb[i];
d164 3
a166 1
			imga[i] = 0;
d168 1
a168 1
	fprintf (stdout,"Divide %s by %s\n", img1, img2);
d174 1
a174 1
	if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
d184 2
d194 1
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anadiv/RCS/anadiv.c,v 1.2 2002/08/15 20:34:26 tom Exp $";
d155 1
a155 1
			imga[i] == 0;
@
