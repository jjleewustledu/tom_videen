head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.13.22.19.33;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.26.20.49.17;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.10.12.13.23.55;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.12.09.19.11.53;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/*$Log: dmean.c,v $
 * Revision 1.3  2002/11/26  20:49:17  tom
 * *** empty log message ***
 *
 * Revision 1.2  1999/10/12  13:23:55  tom
 * new libimgutil with updated arc path
 *
 * Revision 1.1  1998/12/09  19:11:53  tom
 * Initial revision
 * */
/*	=========================================================================
 *	Module:			dmean.c
 *	Author:			Tom Videen
 *	Description:	dmean was created for align_oxygen;
 *		dmean computes means values for 2 images in an imagelist
 *		which will change the sign of the second image in the
 *		list to minus (1st minus 2nd)
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: dmean.c,v 1.3 2002/11/26 20:49:17 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <nrutil.h>
#include <myvalues.h>
#include <imgutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	int				template();
	int             oxygen;			 /* true-> OEF or CMRO2 processing */
	IMAGE_LIST_DATA *list;			 /* image list */
	PARAMETER_DATA  prm;			 /* parameters */
	SXR_DATA       *sxr;			 /* skull xray file data */
	char           *prmname;		 /* parameter filename */
	char           *listname;		 /* filename of image list */
	char           *(imgname[6]);		 /* image filenames */
	char           *sxrname;		 /* sxr filenames */
	char           *tmpname;		 /* temporary filename */
	char           *mskname;		 /* mask image filename */
	char           *mskscan;		 /* scan number to mask to for all images */
	char           *normslices;		 /* slice range to use for normalization */
	char           *dtype;			 /* data type (for archive paths to files */
	int             filtmode;
	int             nfiles;
	int             listsize;
	int             firstslice, lastslice;
	int             peakslice = 0;
	int             i, j;

/*
 *	Get command line arguments.
 */
	prmname = argv[1];
	listname = argv[2];
	mskscan = argv[3];
	normslices = argv[4];
	for (i = 0; i < 6; i++)
		imgname[i] = (char *) malloc (MAXPATH);
	sxrname = (char *) malloc (MAXPATH);
	mskname = (char *) malloc (MAXPATH);
	tmpname = (char *) malloc (MAXPATH);
	dtype = (char *) malloc (MAXPATH);
	if (sxrname == NULL) return (ERROR);
	if (mskname == NULL) return (ERROR);
	if (tmpname == NULL) return (ERROR);
	if (dtype == NULL) return (ERROR);
	filtmode = IMGFILTER_MODE;

/*
 *	Read parameter file into the structure INFO_TYPE finfo.
 */
	if (readprm (prmname, &prm) == ERROR) {
		fprintf (stderr, "ERROR [dmean]: reading parameters from %s\n", prmname);
		return (ERROR);
	}
	prm.voi_norm = 0.;

/*
 *	Override slice range in parameter list for normalization with range from command line
 */

	if (strncmp (normslices, "all", 3) != 0) {
		if (sscanf (normslices, "%dto%d", &firstslice, &lastslice) == 2) {
			if (firstslice <= lastslice) {
				prm.first_slice = firstslice;
				prm.last_slice = lastslice;
			} else {
				prm.first_slice = lastslice;
				prm.last_slice = firstslice;
			}
		}
	}
/*
 *	Read listname into IMAGE_LIST_DATA structure
 */
	list = (IMAGE_LIST_DATA *) malloc (sizeof (IMAGE_LIST_DATA) * MAX_IMAGE_LIST_SIZE);
	if (list == NULL) return (ERROR);
	if (readimglist (listname, list, &listsize) == ERROR) {
		fprintf (stderr, "ERROR [dmean]: reading imagelist %s\n", listname);
		free (list);
		return (ERROR);
	}
/*
 *	Set additional parameters
 */
	if (prm.processing == PROC_OEF || prm.processing == PROC_CMRO2)
		oxygen = TRUE;
	else
		oxygen = FALSE;

/*
 *	Compute the mean for each image in the imagelist
 */
	for (i = 0; i < listsize; i++) {

/*
 *	If activation & control means are > 0 in the input list, skip to next
 */
		if (list[i].mean1 > 0.0 && (strlen (list[i].scanset2_id) == 0 ||
				       (strlen (list[i].scanset2_id) > 0 && list[i].mean2 > 0.0)))
			continue;

		if (buildnames (prm, list[i], filtmode, &nfiles, imgname, sxrname) == ERROR) {
			fprintf (stderr, "Error building filenames from %s %s %f %s %f %s\n",
				 list[i].subject_id, list[i].scanset1_id, list[i].mean1,
				 list[i].scanset2_id, list[i].mean2, list[i].sxrid);
		}
		if ((oxygen == TRUE && prm.imglist_mode == MULTITRACER_IMAGE_MODE
		     && nfiles != 3 && nfiles != 6)
		    || ((oxygen == FALSE || prm.imglist_mode != MULTITRACER_IMAGE_MODE)
			&& nfiles != 1 && nfiles != 2)) {
			fprintf (stderr, "ERROR [dmean]: There are %d image files for one subject\n", nfiles);
			return (ERROR);
		}
/*
 *	Determine the mask image to use.
 *	Note: if the flag "-s" appears in command line, then that scan is used
 */
		if (strncmp (mskscan, "0", 1) != 0) {
			(void) strcpy (tmpname, prm.species);
			(void) strcat (tmpname, list[i].subject_id);
			(void) strcat (tmpname, prm.tracer);
			(void) strcat (tmpname, mskscan);
			(void) strcat (tmpname, prm.extension);
			prm.mskimg_type = MASK_CONTROL;	/* make sure MASK_SPECIFIED is disabled */
			build_mskname (tmpname, mskname, prm);

		} else if (prm.mskimg_type == MASK_CONTROL && strlen (list[i].scanset2_id) > 0) {
			if (oxygen == TRUE)
				(void) strcpy (mskname, imgname[3]);
			else {
				(void) strcpy (tmpname, prm.species);
				(void) strcat (tmpname, list[i].subject_id);
				(void) strcat (tmpname, prm.tracer);
				(void) strcat (tmpname, list[i].scanset2_id);
				(void) strcat (tmpname, prm.extension);
				build_mskname (tmpname, mskname, prm);
			}

		} else if (prm.mskimg_type == MASK_CONTROL) {
			(void) strcpy (mskname, imgname[0]);
			(void) strcpy (tmpname, prm.species);
			(void) strcat (tmpname, list[i].subject_id);
			(void) strcat (tmpname, prm.tracer);
			(void) strcat (tmpname, list[i].scanset1_id);
			(void) strcat (tmpname, prm.extension);
			build_mskname (tmpname, mskname, prm);

		} else if (prm.mskimg_type == MASK_SPECIFIED)
			(void) strcpy (mskname, prm.mskimg);

		else {
			fprintf (stderr, "ERROR [dmean]: Illegal parameter for mskimg in %s\n", prmname);
			free (list);
			return (ERROR);
		}

/*
 *	Get complete paths to files
 */
		(void) strcpy (dtype, prm.scanner);
		(void) strcat (dtype, "_");
		(void) strcat (dtype, prm.acquisition);
		(void) strcat (dtype, "_");
		(void) strcat (dtype, prm.reconstruction);
		(void) strcat (dtype, "_");
		(void) strcat (dtype, prm.recfilter);
		for (j = 0; j < nfiles; j++) {
			imgname[j] = getpath (imgname[j], dtype, prm);
			if (strcmp (imgname[j], "") == 0)
				return (ERROR);
		}
		mskname = getpath (mskname, dtype, prm);
		if (strcmp (mskname, "") == 0)
			return (ERROR);

/*
 *	If sxr file has a defined peak slice, use it
 */
		(void) strcpy (dtype, "data");
		sxrname = getpath (sxrname, dtype, prm);
		if (strcmp (sxrname, "") != 0) {
			sxr = getsxr (sxrname);
			if (sxr->peakslice > 0)
				peakslice = sxr->peakslice;
		}
/*
 * Compute mean(s) and update the list
 */
		(void) template (imgname, oxygen, mskname, prm, &list[i], peakslice);
	}

	list[1].mean1 = -1 * list[1].mean1;
	(void) savelist (listname, listsize, list);
	free (list);
	free (sxr);
	free (dtype);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d20 1
d22 1
a22 1
static char     rcsid[] = "$Id: dmean.c,v 1.2 1999/10/12 13:23:55 tom Exp tom $";
d70 4
d104 1
d135 1
a135 1
		if ((oxygen && prm.imglist_mode == MULTITRACER_IMAGE_MODE
d137 1
a137 1
		    || ((!oxygen || prm.imglist_mode != MULTITRACER_IMAGE_MODE)
d147 5
a151 5
			strcpy (tmpname, prm.species);
			strcat (tmpname, list[i].subject_id);
			strcat (tmpname, prm.tracer);
			strcat (tmpname, mskscan);
			strcat (tmpname, prm.extension);
d156 2
a157 2
			if (oxygen)
				strcpy (mskname, imgname[3]);
d159 5
a163 5
				strcpy (tmpname, prm.species);
				strcat (tmpname, list[i].subject_id);
				strcat (tmpname, prm.tracer);
				strcat (tmpname, list[i].scanset2_id);
				strcat (tmpname, prm.extension);
d168 6
a173 6
			strcpy (mskname, imgname[0]);
			strcpy (tmpname, prm.species);
			strcat (tmpname, list[i].subject_id);
			strcat (tmpname, prm.tracer);
			strcat (tmpname, list[i].scanset1_id);
			strcat (tmpname, prm.extension);
d177 1
a177 1
			strcpy (mskname, prm.mskimg);
d188 7
a194 7
		strcpy (dtype, prm.scanner);
		strcat (dtype, "_");
		strcat (dtype, prm.acquisition);
		strcat (dtype, "_");
		strcat (dtype, prm.reconstruction);
		strcat (dtype, "_");
		strcat (dtype, prm.recfilter);
d207 1
a207 1
		strcpy (dtype, "data");
d217 1
a217 1
		template (imgname, oxygen, mskname, prm, &list[i], peakslice);
d221 1
a221 1
	savelist (listname, listsize, list);
@


1.2
log
@new libimgutil with updated arc path
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Id: dmean.c,v 1.1 1998/12/09 19:11:53 tom Exp tom $";
d22 1
d32 1
d73 1
a73 1
		exit (ERROR);
d99 1
a99 1
		exit (ERROR);
d131 1
a131 1
			exit (ERROR);
d173 1
a173 1
			exit (ERROR);
d189 1
a189 1
				exit (ERROR);
d193 1
a193 1
			exit (ERROR);
d216 1
a216 1
	exit (OK);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*$Log$ */
d15 1
a15 1
static char     rcsid[] = "$Id$";
@
