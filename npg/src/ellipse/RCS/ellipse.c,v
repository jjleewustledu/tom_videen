head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.02.16.14.22.09;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.25.21.08.28;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Feb 2004
@
text
@/*	$Log: ellipse.c,v $
 * Revision 1.1  2002/11/25  21:08:28  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			ellipse.c
 *	Date:			May 2002
 *	Author:			Tom Videen
 *	Description:	Create simulated ellipse in image file.
 * ===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/ellipse/RCS/ellipse.c,v 1.1 2002/11/25 21:08:28 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <math.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	float        ***img;
	double          size1, size2, size3;
	double          a, b, c;
	double          a2, b2, c2;
	double          x, y;
	double          x2, y2, xy;
	char           *fname1;			 /* input */
	char           *fname2;			 /* output */
	int             frm;			 /* frame number */
	unsigned long   dim1, dim2, dim3;	 /* array dimensions */
	long            i, j, k;

/*	Get command line arguments */

	fname1 = argv[1];
	fname2 = argv[2];
	a = 58.;
	b = 44.;
	c = 60.;
	x = 64.;
	y = 64.;

	frm = 1;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file = make_imgfile (fname1);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [ellipse]: Could not open %s\n", fname1);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [ellipse]: Could not get MainHeader from %s\n", fname1);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		if (frm == 1) {
			indx.frm = 2;
			if (existimgfrm (file, &indx) == ERROR) {
				fprintf (stderr, "ERROR [ellipse]: cannot find %s frame 1 or 2\n", fname1);
				return (ERROR);
			}
		} else {
			fprintf (stderr, "ERROR [ellipse]: cannot find %s frame %d\n",
				 fname1, frm);
			return (ERROR);
		}
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [ellipse]: Could not read file subheader in %s\n", fname1);
		return (ERROR);
	}
	mh = file->mh;
	sh = file->sh;

	dim1 = (unsigned long) sh->dim1;
	dim2 = (unsigned long) sh->dim2;
	dim3 = (unsigned long) sh->dim3;
	size1 = sh->sample_size_1;
	size2 = sh->sample_size_2;
	size3 = sh->sample_size_3;
	printf ("%f %f %f\n", size1, size2, size3);

/*	Read image */

	printf ("Reading %s, frame %d\n", fname1, indx.frm);
	if ((img = readtensor (file, &indx)) == NULL)
		return (ERROR);

	a2 = a*a;
	b2 = b*b;
	c2 = c*c;
	for (i = 1; i <= dim3; i++) {
		for (j = 1; j <= dim2; j++) {
			for (k = 1; k <= dim1; k++) {
				img[i][j][k] = 0;
				x2 = pow (((double) j - x) * size2, 2.0);
				y2 = pow (((double) k - y) * size1, 2.0);
				xy = ((double) j - x) * size2 * ((double) k - y) * size1;
				if (x2/a2 + y2/b2 + xy/c2 < 1)
					img[i][j][k] = 1000;
			}
		}
	}

/*	Write image */

	indx.frm = 1;
	printf ("Writing %s\n", fname2);
	close_imgfile (file);
	(void) strcpy (file->name, fname2);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [ellipse]: Could not open %s\n", fname2);
		return (ERROR);
	}
	mh->nframe = indx.frm;
	if (put_mh (file) == ERROR)
		return (ERROR);
	if (writetensor (file, &indx, img) == ERROR)
		return (ERROR);
	free_f3tensor (img, 1, dim3, 1, dim2, 1, dim1);
	free_imgfile (file);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 2
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ellipse/RCS/ellipse.c,v 1.3 2001/10/16 21:06:25 tom Exp tom $";
d25 1
d125 2
a126 2
	strcpy (file->name, fname2);
	strcpy (file->mode, "w");
@
