head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.02.20.15.38.35;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.27.18.13.16;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.06.19.47.11;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.12.09.16.07.15;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.12.09.22.42.52;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Feb 2004
@
text
@/* $Log: threshpct.c,v $
 * Revision 1.4  2002/11/27  18:13:16  tom
 * *** empty log message ***
 *
 * Revision 1.3  2000/09/06  19:47:11  tom
 * strcpy filename
 *
 * Revision 1.2  1998/12/09  16:07:15  tom
 * fix bug in threshtensor
 *
 * Revision 1.1  1996/12/09  22:42:52  tom
 * Initial revision
 * */
/*	=========================================================================
 *	Module:			threshpct.c
 *	Author:			Tom Videen
 *	Description:	Create a thresholded image based on percent of max counts
 *					in specified range of slices.
 *	=========================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: threshpct.c,v 1.4 2002/11/27 18:13:16 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>
#include <libnrimg.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	char           *imgname;		 /* image filenames */
	char           *mskname;		 /* mask image filename */
	char           *range;		  	 /* slice range to use for peak */
	int             mskpct;			 /* percent to mask by */
	int             firstpln;		 /* first plane to use in computing mean */
	int             lastpln;		 /* last plane to use in computing mean */
	int             peakpln = 0;	 /* plane in which peak to use is located */
	long            npixels = 0;
	long            dim[3];			 /* dimensions of tensors */
	float        ***image;			 /* primary image tensor */

/*
 *	Get command line arguments.
 */
	imgname = argv[1];
	mskname = argv[2];
	mskpct = atoi (argv[3]);
	range = argv[4];
/*
 *	Initializations
 */
	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*
 *	Read image and generate mask
 */

	file = make_imgfile (imgname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [threshpct]: Cannot open %s\n", imgname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [threshpct]: Cannot get MainHeader from %s\n", imgname);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [threshpct]: Cannot read file subheader in %s\n", imgname);
		return (ERROR);
	}
	dim[0] = (long) file->sh->dim1;
	dim[1] = (long) file->sh->dim2;
	dim[2] = (long) file->sh->dim3;
	if ((image = readtensor (file, &indx)) == NULL) {
		fprintf (stderr, "ERROR [threshpct]: Cannot read %s\n", imgname);
		return (ERROR);
	}
	if (strncmp (range, "all", 3) == 0) {
		firstpln = 1;
		lastpln = dim[2];
	} else if (sscanf (range, "%dto%d", &firstpln, &lastpln) != 2) {
		fprintf (stderr, "ERROR [threshpct]: Format error in %s\n", range);
		return (ERROR);
	}
	threshtensor (file, image, mskpct, firstpln, lastpln, peakpln, &npixels);

/*	Write the masked image */

	fprintf (stdout, "Writing masked image %s\n", mskname);
	fprintf (stdout, "Pixels in mask = %ld\n", npixels);
	close_imgfile (file);
	(void) strcpy (file->name, mskname);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [threshpct]: Cannot open %s\n", mskname);
		return (ERROR);
	}
	if (put_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [threshpct]: Cannot write %s\n", mskname);
		return (ERROR);
	}
	if (writetensor (file, &indx, image) == ERROR) {
		fprintf (stderr, "ERROR [threshpct]: Cannot write %s\n", mskname);
		return (ERROR);
	}
	free_imgfile (file);
	return (OK);
}
@


1.4
log
@*** empty log message ***
@
text
@d2 3
d21 1
d23 1
a23 1
static char     rcsid[] = "$Id: threshpct.c,v 1.3 2000/09/06 19:47:11 tom Exp tom $";
d35 1
d103 2
a104 2
	printf ("Writing masked image %s\n", mskname);
	printf ("Pixels in mask = %ld\n", npixels);
@


1.3
log
@strcpy filename
@
text
@d2 3
d19 1
a19 1
static char     rcsid[] = "$Id: threshpct.c,v 1.2 1998/12/09 16:07:15 tom Exp tom $";
a26 1
#include <nr.h>
a28 1
#include <imgutil.h>
d45 1
a45 1
	float        ***image = NULL;	 /* primary image tensor */
d99 1
a99 1
	printf ("Pixels in mask = %d\n", npixels);
d101 2
a102 2
	strcpy (file->name, mskname);
	strcpy (file->mode, "w");
@


1.2
log
@fix bug in threshtensor
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Id: threshpct.c,v 1.1 1996/12/09 22:42:52 tom Exp tom $";
d100 1
a100 2
	free (file->name);
	file->name = mskname;
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d8 3
a10 2
 *	Description:	Create a thresholded image based on percent of max counts.
 *	=================================================================================
d13 1
a13 1
static char     rcsid[] = "$Id: threshpct.c,v 2.10 1996/10/16 16:47:45 tom Exp $";
@
