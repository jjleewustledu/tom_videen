head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.02.13.21.05.06;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.20.25.59;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.10.12.13.20.46;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.05.07.18.52.47;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	97.03.11.19.18.55;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Feb 2004
@
text
@/* $Log: chklist.c,v $
 * Revision 1.4  2002/11/26  20:25:59  tom
 * *** empty log message ***
 *
 * Revision 1.3  1999/10/12  13:20:46  tom
 * new libimgutil with updated arc path
 *
 * Revision 1.2  1999/05/07  18:52:47  tom
 * remove Warning and change Error messages
 *
 * Revision 1.1  1997/03/11  19:18:55  tom
 * Initial revision
 *
 */
/*	=========================================================================
 *	Module:			chklist.c
 *	Author:			Tom Videen
 *	Description:	check for existence of files in an imagelist
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: chklist.c,v 1.4 2002/11/26 20:25:59 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <nrutil.h>
#include <myvalues.h>
#include <imgutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	IMAGE_LIST_DATA *list;			 /* image list */
	PARAMETER_DATA  prm;			 /* parameters */
	int             oxygen;			 /* true-> OEF or CMRO2 processing */
	char           *prmname;		 /* parameter filename */
	char           *listname;		 /* filename of image list */
	char           *(imgname[6]);	 /* image filenames */
	char           *sxrname;		 /* sxr filenames */
	char           *dtype;			 /* data type (for archive paths to files */
	char		   *temp;
	int             filtmode;
	int             nfiles;
	int             listsize;
	int             i, j;
	int				allimg = 0;
	int				allsxr = 0;

/*	Command line arguments */
 
	prmname = argv[1];
	listname = argv[2];
	for (i = 0; i < 6; i++)
		imgname[i] = (char *) malloc (MAXPATH);
	sxrname = (char *) malloc (MAXPATH);
	if (sxrname == NULL) return (ERROR);
	temp = (char *) malloc (MAXPATH);
	if (temp == NULL) return (ERROR);
	dtype = (char *) malloc (MAXPATH);
	if (dtype == NULL) return (ERROR);
	filtmode = IMGFILTER_MODE;

/*	Parameter file */

	if (readprm (prmname, &prm) == ERROR) {
		fprintf (stderr, "ERROR [chklist]: reading parameters from %s\n", prmname);
		return (ERROR);
	}

/*	Image list */

	list = (IMAGE_LIST_DATA *) malloc (sizeof (IMAGE_LIST_DATA) * MAX_IMAGE_LIST_SIZE);
	if (readimglist (listname, list, &listsize) == ERROR) {
		fprintf (stderr, "ERROR [chklist]: reading imagelist %s\n", listname);
		free (list);
		return (ERROR);
	}

/*	Set additional parameters */

	if (prm.processing == PROC_OEF || prm.processing == PROC_CMRO2)
		oxygen = TRUE;
	else
		oxygen = FALSE;

/*
 *	For each image in the imagelist
 */
	for (i = 0; i < listsize; i++) {
		if (buildnames (prm, list[i], filtmode, &nfiles, imgname, sxrname) == ERROR) {
			fprintf (stderr, "Error building filenames from %s %s %f %s %f %s\n",
				 list[i].subject_id, list[i].scanset1_id, list[i].mean1,
				 list[i].scanset2_id, list[i].mean2, list[i].sxrid);
		}
		if ((oxygen == TRUE && prm.imglist_mode == MULTITRACER_IMAGE_MODE
		     && nfiles != 3 && nfiles != 6)
		    || ((oxygen == FALSE || prm.imglist_mode != MULTITRACER_IMAGE_MODE)
			&& nfiles != 1 && nfiles != 2)) {
			fprintf (stderr, "ERROR [chklist]: There are %d image files for one subject\n", nfiles);
			continue;
		}
		(void) strcpy (dtype, prm.scanner);
		(void) strcat (dtype, "_");
		(void) strcat (dtype, prm.acquisition);
		(void) strcat (dtype, "_");
		(void) strcat (dtype, prm.reconstruction);
		(void) strcat (dtype, "_");
		(void) strcat (dtype, prm.recfilter);
		for (j = 0; j < nfiles; j++) {
			(void) strcpy (temp, imgname[j]);
			imgname[j] = getpath (imgname[j], dtype, prm);
			if (strcmp (imgname[j], "") == 0) {
				fprintf (stderr, "Missing File: %s\n",temp);
				allimg++;
			}
		}
		(void) strcpy (dtype, "data");
		(void) strcpy (temp, sxrname);
		sxrname = getpath (sxrname, dtype, prm);
		if (strcmp (sxrname, "") == 0) {
			fprintf (stderr, "Missing File: %s\n",temp);
			allsxr++;
		}
	}

	printf ("----------------------------\n");
	if (allimg == 0) 
		printf ("All image files found\n");
	else
		printf ("%d missing image files\n", allimg);
	if (allsxr == 0) 
		printf ("All sxr files found\n");
	else
		printf ("%d missing sxr files\n", allsxr);
	free (list);
	free (dtype);
	if (allimg > 0 || allsxr < 0)
		return (ERROR);
	else
		return (OK);
}
@


1.4
log
@*** empty log message ***
@
text
@d2 3
d21 1
d23 1
a23 1
static char     rcsid[] = "$Id: chklist.c,v 1.3 1999/10/12 13:20:46 tom Exp tom $";
d60 1
d62 1
d64 1
d99 1
a99 1
		if ((oxygen && prm.imglist_mode == MULTITRACER_IMAGE_MODE
d101 1
a101 1
		    || ((!oxygen || prm.imglist_mode != MULTITRACER_IMAGE_MODE)
d106 7
a112 7
		strcpy (dtype, prm.scanner);
		strcat (dtype, "_");
		strcat (dtype, prm.acquisition);
		strcat (dtype, "_");
		strcat (dtype, prm.reconstruction);
		strcat (dtype, "_");
		strcat (dtype, prm.recfilter);
d114 1
a114 1
			strcpy (temp, imgname[j]);
d121 2
a122 2
		strcpy (dtype, "data");
		strcpy (temp, sxrname);
@


1.3
log
@new libimgutil with updated arc path
@
text
@d2 3
d19 1
a19 1
static char     rcsid[] = "$Id: chklist.c,v 1.2 1999/05/07 18:52:47 tom Exp tom $";
d23 1
d64 1
a64 1
		exit (ERROR);
d73 1
a73 1
		exit (ERROR);
d135 1
a135 1
		exit (ERROR);
d137 1
a137 1
		exit (OK);
@


1.2
log
@remove Warning and change Error messages
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Id: chklist.c,v 1.1 1997/03/11 19:18:55 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$
d13 1
a13 1
static char     rcsid[] = "$Id: chklist.c,v 2.15 1997/01/24 18:20:46 tom Exp $";
d103 1
a103 1
				fprintf (stderr, "ERROR [chklist]: Image file not found: %s\n",temp);
d111 1
a111 1
			fprintf (stderr, "ERROR [chklist]: SXR file not found: %s\n",temp);
d120 1
a120 1
		printf ("%d IMAGE FILES NOT FOUND\n", allimg);
d124 1
a124 1
		printf ("%d SXR FILES NOT FOUND\n", allsxr);
d128 1
a128 1
		exit(ERROR);
@
