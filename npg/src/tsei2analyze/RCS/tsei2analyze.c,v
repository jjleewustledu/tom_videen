head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.02.20.15.50.21;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.25.14.15.36;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.13.15.08.09;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Feb 2004
@
text
@/* $Log: tsei2analyze.c,v $
 * Revision 1.2  2002/09/25  14:15:36  tom
 * fix bug in RAH view
 *
 * Revision 1.1  2002/08/13  15:08:09  tom
 * Initial revision
 * */
/*  ===============================================================================
 *  Module:         tsei2analyze.c
 *  Date:           Aug 2002
 *  Author:         Tom Videen
 *  Description:    Transform Siemens MRI images into Analyze format.
 *      Output images will be displayed by Analyze with left brain on the left
 *      and with the lower slices first.  This allows the 3D volume rendered
 *      brains to appear upright.
 *		An Interfile Format header file is created.
 *	Notes:
 *		Checked for proper orientation for View_LtoR (4) and View_HEAD (2).
 *  ===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/tsei2analyze/RCS/tsei2analyze.c,v 1.2 2002/09/25 14:15:36 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <matrixlib.h>
#include <image.h>
#include <lib3_file_transform.h>		 /* Numaris 3 User's Library */
#include <ANALYZE.h>				 /* dsr */

#define U_LONG unsigned long
#define U_SHORT unsigned short
#define BytesPerPixelShort 2
#define BytesPerPixelLong 4
#define U3_isStatusError(s,e) (((s)^(e)) == 0)
#define MAXSTR 256
#define PERMS  0666
#define TRANSVERSE '\000'
#define CORONAL    '\001'
#define SAGITTAL   '\002'

/*  ----------------------------
 *  Function:   tsei2analyze
 *  ----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	FILE           *FileInp_p;		 /* input file pointer */
	char            InFile[60];		 /* input file name */
	long            Status;			 /* shows an actual status */
	U3_header_type_t HeadType;
	U3_data_type_t  DataType;
	U3_size_type_t  DataSize;
	header_t       *HeadBuffer;		 /* header buffer */
	U_SHORT        *DataBuffer;		 /* pixel data buffer */
	long unsigned   NumPixels_ul, NumRows_ul, NumColumns_ul, StartOffset_ul;

	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* output ANALYZE image  */
	FILE           *fd_if;			 /* file for Interfile Format header */
	struct dsr      hdr;			 /* header for ANALYZE */
	char           *root1, *root2;
	char           *ptr;
	char            ANALYZE_hdr[MAXSTR]; /* output Analyze header filename */
	char            ANALYZE_img[MAXSTR]; /* output Analyze image filename */
	char            IF_hdr[MAXSTR];		 /* output Interfile Format header filename */
	char            view[6][10];
	char            num[12];
	char            version[5];
	char            program_date[12];
	char            study_date[12];
	char            institution[MAXSTR];
	char            model[MAXSTR];
	char            subject_id[MAXSTR];
	char            ParameterFileName[MAXSTR];
	char            SequenceFileName[MAXSTR];
	char            SequenceDescription[MAXSTR];
	char           *order;

	int             orientation;
	int             first1, last1;
	int             first2, last2;
	short           datum;
	int             global_max;		 /* global maximum */
	int             global_min;		 /* global minimum */
	int             slice, slc;
	int             count;
	int             chk;
	int             i, j, k, n;

	short        ***img;			 /* output Analyze image */
	short           num_slices;		 /* number of slices or frames in MRI */
	short           xdim = 0;		 /* image dimensions */
	short           ydim = 0;
	short           zdim = 0;
	float           xpix = 0;		 /* pixel sizes (mm) */
	float           ypix = 0;
	float           zpix = 0;
	int             bitsperpix = 0;

	(void) strcpy (view[1], "View_FEET");
	(void) strcpy (view[2], "View_HEAD");
	(void) strcpy (view[3], "View_AtoP");
	(void) strcpy (view[4], "View_LtoR");
	(void) strcpy (view[5], "View_PtoA");
	(void) strcpy (view[6], "View_RtoL");
	(void) strcpy (version, "    ");
	(void) strcpy (program_date, "          ");
	ptr = strstr (rcsid, "v ");
	if (ptr != NULL) {
		ptr += 2;
		(void) strncpy (version, ptr, 4);
		ptr = strstr (ptr, " ");
		if (ptr != NULL) {
			ptr++;
			(void) strncpy (program_date, ptr, 10);
			ptr = strchr (program_date, '/');
			if (ptr != NULL)
				*ptr = ':';
			ptr = strchr (program_date, '/');
			if (ptr != NULL)
				*ptr = ':';
		}
	}

/*
 *  Get command line arguments and initialize filenames:
 *  ---------------------------------------------------
 */

	if (argc != 8) {
		fprintf (stderr, "Usage: tsei2analyze <root1> <first1> <last1> <root2> <first2> <last2> <output_root>\n");
		return (ERROR);
	}
	root1 = argv[1];
	first1 = atoi (argv[2]);
	last1 = atoi (argv[3]);
	root2 = argv[4];
	first2 = atoi (argv[5]);
	last2 = atoi (argv[6]);
	if (first1 < first2)
		num_slices = last2 - first1 + 1;
	else
		num_slices = last1 - first2 + 1;
	(void) strcpy (ANALYZE_img, argv[7]);
	(void) strcat (ANALYZE_img, ".img");
	(void) strcpy (ANALYZE_hdr, argv[7]);
	(void) strcat (ANALYZE_hdr, ".hdr");
	(void) strcpy (IF_hdr, argv[7]);
	(void) strcat (IF_hdr, ".ifh");

	if ((fd_hdr = fopen (ANALYZE_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [tsei2analyze]: creating Analyze hdr %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if ((fd_img = fopen (ANALYZE_img, "w")) == 0) {
		fprintf (stderr, "ERROR [tsei2analyze]: creating Analyze img %s\n", ANALYZE_img);
		return (ERROR);
	}
	if ((fd_if = fopen (IF_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [tsei2analyze]: creating Interfile hdr %s\n", IF_hdr);
		return (ERROR);
	}
	global_max = 0;
	global_min = 32000;
	order = (char *) calloc (4, sizeof (char));
	if (order == NULL) return (ERROR);

/*	Loop for root1 and root 2 images */

	chk = 0;
	count = 0;
	for (slice = 0; slice < num_slices; slice++) {
		if (chk == 0) {
			(void) strcpy (InFile, root1);
			slc = first1 + count;
			chk = 1;
		} else {
			(void) strcpy (InFile, root2);
			slc = first2 + count;
			(void) sprintf (num, "%d", first2 + count);
			chk = 0;
			count += 1;
		}
		(void) sprintf (num, "%d", slc);
		(void) strcat (InFile, num);
		(void) strcat (InFile, ".ima");

/* open file and check for success */

		Status = U3Open (&FileInp_p, InFile, "r");
		if (Status == 0) {
			fprintf (stdout, "Reading %s ", InFile);
		} else if (U3_isStatusError (Status, U3_NO_PERMISSION)) {
			fprintf (stderr, "ERROR [tsei2analyze]: no read premission on %s\n", InFile);
			return (ERROR);
		} else if (U3_isStatusError (Status, U3_INVLD_FILE_PATH)) {
			fprintf (stderr, "ERROR [tsei2analyze]: invalid path for %s\n", InFile);
			return (ERROR);
		} else if (U3_isStatusError (Status, U3_UNKNOWN_HEADER)) {
			fprintf (stderr, "ERROR [tsei2analyze]: invalid image for %s\n", InFile);
			return (ERROR);
		} else
			return (ERROR);

/* determine header type */

		Status = U3GetHeaderType (FileInp_p, &HeadType);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tsei2analyze]: unknown type for %s\n", InFile);
			return (ERROR);
		}
		switch (HeadType) {
		case U3_internal_head_type:
			fprintf (stdout, " (Numaris 3 format");
			break;

		case U3_nema_head_type:
			fprintf (stdout, " (ACR-NEMA format");
			break;

		case U3_numaris1_head_type:
			fprintf (stdout, " (Numaris 1 format");
			break;

		case U3_numaris2_head_type:
			fprintf (stdout, " (Numaris 2 format");
			break;

		default:
			fprintf (stderr, "ERROR [tsei2analyze]: unknown format for %s\n", InFile);
			return (ERROR);
		}

/* check data type and data size */

		Status = U3GetDataType (FileInp_p, &DataType, &DataSize);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tsei2analyze]: unknown data type for %s\n", InFile);
			return (ERROR);
		}
/* make sure it is an Image file */

		if (DataType == U3_image_data_type) {
			fprintf (stdout, "--image file)\n");
		} else {
			fprintf (stderr, "ERROR [tsei2analyze]: not an image file: %s\n", InFile);
			return (ERROR);
		}


/* allocate memory space for the header buffer */

		if ((HeadBuffer = (header_t *) calloc (1, sizeof (header_t))) == 0) {
			fprintf (stderr, "ERROR [tsei2analyze]: calloc header\n");
			return (ERROR);
		}
/* get the header buffer */

		Status = U3GetHeader (FileInp_p, HeadBuffer);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tsei2analyze]: reading header\n");
			free (HeadBuffer);
			return (ERROR);
		}
/* allocate memory space for the  data buffer */

		/* calculate the number of bytes per pixel */
		NumRows_ul = HeadBuffer->G28.Pre.Rows;
		NumColumns_ul = HeadBuffer->G28.Pre.Columns;
		NumPixels_ul = NumRows_ul * NumColumns_ul;

		/* set the offset to start reading the data */
		StartOffset_ul = 0;

		/* allocate memory space according to the data size */
		switch (DataSize) {
		case U3_set_m_short:
			if ((DataBuffer = (U_SHORT *) calloc (NumPixels_ul, BytesPerPixelShort)) == 0) {
				fprintf (stderr, "ERROR [tsei2analyze]: calloc data buffer\n");
				return (ERROR);
			}
			break;

		case U3_set_m_long:
			fprintf (stderr, "ERROR [tsei2analyze]: cannot read long integer format\n");
			return (ERROR);

		default:
			fprintf (stderr, "ERROR [tsei2analyze]: incompatible data type\n");
			return (ERROR);
		}

/* read the pixel data into the buffer */

		Status = U3ReadPixData (FileInp_p, StartOffset_ul, NumPixels_ul, &DataSize,
					DataBuffer);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tsei2analyze]: reading data\n");
			free (HeadBuffer);
			free (DataBuffer);
			return (ERROR);
		}
/*
 *	Get image header information and orientation
 */
		if (slice == 0) {
			(void) strcpy (institution, HeadBuffer->G08.Ide.InstitutionID);
			(void) strcpy (model, HeadBuffer->G08.Ide.ManufacturerModel);
			(void) strcpy (subject_id, HeadBuffer->G10.Pat.PatientId);
			(void) sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Year);
			(void) strcpy (study_date, num);
			(void) strcat (study_date, ":");
			(void) sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Month);
			(void) strcat (study_date, num);
			(void) strcat (study_date, ":");
			(void) sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Day);
			(void) strcat (study_date, num);
			(void) strcpy (ParameterFileName, HeadBuffer->G19.Acq4.CM.ParameterFileName);
			(void) strcpy (SequenceFileName, HeadBuffer->G19.Acq4.CM.SequenceFileName);
			(void) strcpy (SequenceDescription, HeadBuffer->G19.Acq4.CM.SequenceDescription);
			bitsperpix = HeadBuffer->G28.Pre.BitsAllocated;
			(void) strncpy (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.X, 1);
			(void) strncat (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.Y, 1);
			(void) strncat (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.Z, 1);

			orientation = HeadBuffer->G21.Rel1.CM.ViewDirection;
			if (orientation < 1 && orientation > 6) {
				fprintf (stderr, "ERROR [tsei2analyze]: incompatible view direction\n");
				return (ERROR);
			}
			fprintf (stdout, "%s  (%s)\n", view[orientation], order);

			switch (orientation) {

			case 1:		 /* View_FEET */
			case 2:		 /* View_HEAD */
				xdim = HeadBuffer->G28.Pre.Columns;
				ydim = HeadBuffer->G28.Pre.Rows;
				zdim = num_slices;
				xpix = HeadBuffer->G28.Pre.PixelSize.Row;
				ypix = HeadBuffer->G28.Pre.PixelSize.Row;
				zpix = HeadBuffer->G18.Acq.SliceThickness;
				break;

			case 3:		 /* View_AtoP */
			case 5:		 /* View_PtoA */
				xdim = HeadBuffer->G28.Pre.Columns;
				ydim = num_slices;
				zdim = HeadBuffer->G28.Pre.Rows;
				xpix = HeadBuffer->G28.Pre.PixelSize.Row;
				ypix = HeadBuffer->G18.Acq.SliceThickness;
				zpix = HeadBuffer->G28.Pre.PixelSize.Row;
				break;

			case 4:		 /* View_LtoR */
			case 6:		 /* View_RtoL */
				xdim = num_slices;
				ydim = HeadBuffer->G28.Pre.Columns;
				zdim = HeadBuffer->G28.Pre.Rows;
				xpix = HeadBuffer->G18.Acq.SliceThickness;
				ypix = HeadBuffer->G28.Pre.PixelSize.Row;
				zpix = HeadBuffer->G28.Pre.PixelSize.Row;
				break;

			default:
				fprintf (stderr, "ERROR [tsei2analyze]: incompatible view direction\n");
				return (ERROR);
			}

			fprintf (stdout, "x = %d (%f mm)  y = %d (%f mm)  z = %d (%f mm)\n",
				 xdim, xpix, ydim, ypix, zdim, zpix);

			if ((img = s3tensor (0, zdim - 1, 0, ydim - 1, 0, xdim - 1)) == NULL) {
				fprintf (stderr, "ERROR [tsei2analyze]: malloc img\n");
				return (ERROR);
			}
		}
		if (strncmp (order, "LAF", 3) == 0) {	/* View_FEET */
			n = 0;
			k = slice;
			for (j = ydim - 1; j >= 0; j--) {
				for (i = xdim - 1; i >= 0; i--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "RAH", 3) == 0) {	/* View_HEAD */
			n = 0;
			k = slice+1;		 /* subtract 1 from zdim in loop */
			for (j = ydim - 1; j >= 0; j--) {
				for (i = 0; i < xdim; i++) {
					datum = DataBuffer[n];
					img[zdim - k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "RHA", 3) == 0) {	/* View_AtoP */
			n = 0;
			j = slice+1;		 /* subtract 1 from ydim in loop */
			for (k = zdim - 1; k >= 0; k--) {
				for (i = 0; i < xdim; i++) {
					datum = DataBuffer[n];
					img[k][ydim - j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "LHP", 3) == 0) {	/* View_PtoA */
			n = 0;
			j = slice;
			for (k = zdim - 1; k >= 0; k--) {
				for (i = xdim - 1; i >= 0; i--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "AHR", 3) == 0) {	/* View_LtoR */
			n = 0;
			i = slice;
			for (k = zdim - 1; k >= 0; k--) {
				for (j = ydim - 1; j >= 0; j--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "PHL", 3) == 0) {	/* View_RtoL */
			n = 0;
			i = slice+1;		 /* subtract 1 from xdim in loop */
			for (k = zdim - 1; k >= 0; k--) {
				for (j = 0; j <= ydim; j++) {
					datum = DataBuffer[n];
					img[k][j][xdim - i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else {
			fprintf (stderr, "ERROR [tsei2analyze]: incompatible order %s\n", order);
			return (ERROR);
		}

		free (HeadBuffer);
		free (DataBuffer);
		Status = U3Close (FileInp_p);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tsei2analyze]: closing file\n");
			return (ERROR);
		}
	}

/*
 * Write to output file
 */

	for (k = 0; k < zdim; k++) {
		for (j = 0; j < ydim; j++) {
			if ((fwrite (img[k][j], sizeof (short), xdim, fd_img)) != xdim) {
				fprintf (stderr, "ERROR [tsei2analyze]: writing %s\n", ANALYZE_img);
				return (ERROR);
			}
		}
	}

/*
 * Create Analyze hdr file
 */

	(void) strncpy (hdr.hk.db_name, InFile, 17);
	hdr.hk.sizeof_hdr = sizeof (struct dsr); /* required by developers */
	hdr.hk.extents = 16384;			 /* recommended by developers  */
	hdr.hk.regular = 'r';			 /* required by developers */
	hdr.dime.dim[0] = 4;			 /* 4 dimensions  */
	hdr.dime.dim[1] = xdim;
	hdr.dime.dim[2] = ydim;
	hdr.dime.dim[3] = zdim;
	hdr.dime.dim[4] = 1;			 /* one volume */
	hdr.dime.unused8 = 0;			 /* despite the label, some of this is used */
	hdr.dime.unused9 = 0;
	hdr.dime.unused10 = 0;
	hdr.dime.unused11 = 0;
	hdr.dime.unused12 = 0;
	hdr.dime.unused13 = 0;
	hdr.dime.unused14 = 0;
	hdr.dime.datatype = 4;			 /* 16 bit signed integer  */
	hdr.dime.bitpix = bitsperpix;
	hdr.dime.pixdim[1] = xpix;
	hdr.dime.pixdim[2] = ypix;
	hdr.dime.pixdim[3] = zpix;
	hdr.dime.funused8 = 0;
	hdr.dime.funused9 = 0;
	hdr.dime.funused10 = 0;
	hdr.dime.funused11 = 0;
	hdr.dime.funused12 = 0;
	hdr.dime.funused13 = 0;
	hdr.dime.glmax = global_max;
	hdr.dime.glmin = global_min;
	(void) strncpy (hdr.hist.descrip, InFile, 79);
	(void) strcpy (hdr.hist.originator, "tse2analy");
	(void) strncpy (hdr.hist.patient_id, version, 4);
	hdr.hist.orient = TRANSVERSE;

	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [tsei2analyze]: writing %s\n", ANALYZE_hdr);
		return (ERROR);
	}
/*
 * Create Interfile Format header file
 */

	fprintf (fd_if, "INTERFILE :=\n");
	fprintf (fd_if, "version of keys	:= 3.3\n");
	fprintf (fd_if, "image modality	:= mri\n");
	fprintf (fd_if, "originating system	:= %s\n", model);
	fprintf (fd_if, "conversion program	:= tsei2analyze\n");
	fprintf (fd_if, "program version	:= %4s\n", version);
	fprintf (fd_if, "program date	:= %s\n", program_date);
	fprintf (fd_if, "original institution	:= %s\n", institution);
	fprintf (fd_if, "name of data file	:= %s\n", ANALYZE_img);
	fprintf (fd_if, "subject ID := %s\n", subject_id);
	fprintf (fd_if, "study date	:= %s\n", study_date);

	fprintf (fd_if, "number format	:= signed integer\n");
	fprintf (fd_if, "number of bytes per pixel	:= %d\n", bitsperpix / 8);
	fprintf (fd_if, "number of dimensions	:= 3\n");
	fprintf (fd_if, "matrix size [1]	:= %d\n", xdim);
	fprintf (fd_if, "matrix size [2]	:= %d\n", ydim);
	fprintf (fd_if, "matrix size [3]	:= %d\n", zdim);
	fprintf (fd_if, "scaling factor (mm/pixel) [1]	:= %f\n", xpix);
	fprintf (fd_if, "scaling factor (mm/pixel) [2]	:= %f\n", ypix);
	fprintf (fd_if, "scaling factor (mm/pixel) [3]	:= %f\n", zpix);
	fprintf (fd_if, "matrix initial element [1]	:= right\n");
	fprintf (fd_if, "matrix initial element [2]	:= posterior\n");
	fprintf (fd_if, "matrix initial element [3]	:= inferior\n");
	fprintf (fd_if, "mri parameter file name	:= %s\n", ParameterFileName);
	fprintf (fd_if, "mri sequence file name	:= %s\n", SequenceFileName);
	fprintf (fd_if, "mri sequence description	:= %s\n", SequenceDescription);

/* free all buffers and return */

	fprintf (stdout, "Successfully created %s\n", ANALYZE_img);
	(void) fclose (fd_hdr);
	(void) fclose (fd_img);
	(void) fclose (fd_if);
	return (OK);
}
@


1.2
log
@fix bug in RAH view
@
text
@d2 3
d21 2
a41 2
static char     rcsid[] = "$Header: /home/npggw/tom/src/tsei2analyze/RCS/tsei2analyze.c,v 1.1 2002/08/13 15:08:09 tom Exp $";

d104 8
a111 6
	strcpy (view[1], "View_FEET");
	strcpy (view[2], "View_HEAD");
	strcpy (view[3], "View_AtoP");
	strcpy (view[4], "View_LtoR");
	strcpy (view[5], "View_PtoA");
	strcpy (view[6], "View_RtoL");
d113 15
a127 11
	ptr += 2;
	strcpy (version, "    ");
	strncpy (version, ptr, 4);
	ptr = strstr (ptr, " ");
	ptr++;
	strcpy (program_date, "          ");
	strncpy (program_date, ptr, 10);
	ptr = strchr (program_date, '/');
	*ptr = ':';
	ptr = strchr (program_date, '/');
	*ptr = ':';
d148 6
a153 6
	strcpy (ANALYZE_img, argv[7]);
	strcat (ANALYZE_img, ".img");
	strcpy (ANALYZE_hdr, argv[7]);
	strcat (ANALYZE_hdr, ".hdr");
	strcpy (IF_hdr, argv[7]);
	strcat (IF_hdr, ".ifh");
d170 1
d178 1
a178 1
			strcpy (InFile, root1);
d182 1
a182 1
			strcpy (InFile, root2);
d184 1
a184 1
			sprintf (num, "%d", first2 + count);
d188 3
a190 3
		sprintf (num, "%d", slc);
		strcat (InFile, num);
		strcat (InFile, ".ima");
d258 1
a258 1
			fprintf (stderr, "ERROR [tsei2analyze]: malloc header\n");
d283 1
a283 1
				fprintf (stderr, "ERROR [tsei2analyze]: malloc data buffer\n");
d311 14
a324 14
			strcpy (institution, HeadBuffer->G08.Ide.InstitutionID);
			strcpy (model, HeadBuffer->G08.Ide.ManufacturerModel);
			strcpy (subject_id, HeadBuffer->G10.Pat.PatientId);
			sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Year);
			strcpy (study_date, num);
			strcat (study_date, ":");
			sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Month);
			strcat (study_date, num);
			strcat (study_date, ":");
			sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Day);
			strcat (study_date, num);
			strcpy (ParameterFileName, HeadBuffer->G19.Acq4.CM.ParameterFileName);
			strcpy (SequenceFileName, HeadBuffer->G19.Acq4.CM.SequenceFileName);
			strcpy (SequenceDescription, HeadBuffer->G19.Acq4.CM.SequenceDescription);
d326 3
a328 3
			strncpy (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.X, 1);
			strncat (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.Y, 1);
			strncat (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.Z, 1);
d503 1
a503 1
	strncpy (hdr.hk.db_name, InFile, 17);
d532 3
a534 3
	strncpy (hdr.hist.descrip, InFile, 79);
	strcpy (hdr.hist.originator, "tse2analy");
	strncpy (hdr.hist.patient_id, version, 4);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d15 1
a15 1
 *		Checked for proper orientation for View_LtoR (4) ONLY!
d37 1
a37 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/tsei2analyze/RCS/tsei2analyze.c,v 1.7 2002/01/11 16:05:37 tom Exp $";
d389 1
a389 1
			k = slice;		 /* subtract 1 from zdim in loop */
d404 1
a404 1
			j = slice;		 /* subtract 1 from ydim in loop */
d449 1
a449 1
			i = slice;		 /* subtract 1 from xdim in loop */
@
