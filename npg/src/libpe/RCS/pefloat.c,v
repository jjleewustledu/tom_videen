head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.12.22.21.45;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.12.22.19.09;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.12.14.15.56.50;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	96.09.26.18.31.37;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	96.09.25.16.48.22;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	92.04.13.19.07.06;	author tom;	state Exp;
branches;
next	;


desc
@OS32 files for spideram.
@


2.0
log
@Feb 2004
@
text
@/* $Log: pefloat.c,v $
 * Revision 1.5  2004/02/12  22:19:09  tom
 * Feb 2004
 *
 * Revision 1.4  1999/12/14  15:56:50  tom
 * lint cleaning
 *
 * Revision 1.3  1996/09/26  18:31:37  tom
 * MUST HAVE DIFFERENT VERSIONS FOR 4.1.3 AND SOLARIS
 * */
/*________________________________________________________________
 *	pefloat.c
 *
 *	Converts Perkin Elmer 4 byte floating point numbers
 *	to IEEE floating point representation.
 *
 *	Author: Unknown
 *	Source: Gary Hoffman
 *
 *	Changed the type of f from unsigned int to int and changed
 *	function name to make it compatible with Sun Fortran.
 *	Date:	Oct. 2, 1991
 *	By:	Tom Yang
 _______________________________________________________________*/

#include <math.h>

/* Declaration for Sun 4.1.3
FLOATFUNCTIONTYPE pefloat_ (f)
 */

float           pefloat_ (f)
	int            *f;			 /* 4 byte float from OS32 */
{
	float           c;
	int             j;
	int             iexp;
	int             idata;
	double          value;

	idata = *f;
	if (idata != 0) {
		j = idata & 0xffffff;
		if ((idata & 0x80000000) != 0)
			j = -j;
		iexp = (idata >> 24) & 0x7f;
		value = (double) j *pow ((double) 16, (double) (iexp - 0x46));
		c = (float) value;
	} else
		c = 0.0;
	return (c);				 /* return 4 byte IEEE float for UNIX */

/* return for Sun 4.1.3
	RETURNFLOAT (c);
 */
}
@


1.5
log
@Feb 2004
@
text
@d2 3
@


1.4
log
@lint cleaning
@
text
@d2 3
@


1.3
log
@MUST HAVE DIFFERENT VERSIONS FOR 4.1.3 AND SOLARIS
@
text
@d1 5
a5 2
/* $Log$ */
/*________________________________________________________________  
d8 1
a8 1
 *	Converts Perkin Elmer 4 byte floating point numbers 
d14 1
a14 1
 *	Changed the type of f from unsigned int to int and changed 
d26 2
a27 2
float pefloat_ (f)
int 	*f;		/* 4 byte float from OS32 */
d29 5
a33 6
	float 	c;
	int 	j; 
	int	iexp; 
	int	idata;
	double 	value; 
	double	pow ();
d35 3
a37 4
	idata	= *f;
	if (idata != 0) 
	{
		j	= idata & 0xffffff;
d39 7
a45 8
			j	= -j;
		iexp	= (idata >> 24) & 0x7f;
		value	= (double) j * pow ((double) 16, (double) (iexp - 0x46));
		c	= (float)value;
	}
	else 
		c	= 0.0;
	return (c);		/* return 4 byte IEEE float for UNIX */
@


1.2
log
@change declaration and return
@
text
@d1 1
d19 4
d46 4
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
FLOATFUNCTIONTYPE pefloat_ (f)
d40 1
a40 1
	RETURNFLOAT (c);		/* return 4 byte IEEE float for UNIX */
@
