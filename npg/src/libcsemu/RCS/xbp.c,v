head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	99.12.13.19.12.55;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	94.02.09.16.23.09;	author tom;	state Exp;
branches;
next	;


desc
@original
@


1.2
log
@clean with lint
@
text
@/*  emulation of xbp  --  backprojection  */

#ifdef  EMUVERSION
void            emu_xbp_ (image, ra, proj, nproj, size)
#else
void            xbp_ (image, ra, proj, nproj, size)
#endif						 /* EMUVERSION */

	float           image[], ra[], proj[];
	long           *nproj, *size;

 /*
  * nproj not used; for compatibility with microcode version, only
  */
{
	long            x, y, j;		 /* indices = x,y;   j = int part of r */
	float           r0, rdx, rdy;		 /* three elements of ra[] */
	float           r, w, temp;		 /* w = frac part of r; temp = float(j) */
	float           one = 1.0;
	void            xsfl4_ ();

	r0 = ra[0];
	rdx = ra[1];
	rdy = ra[2];

	for (y = 0; y < *size; y++) {
		r = r0;
		for (x = 0; x < *size; x++) {
			j = (long) r;
			xsfl4_ (&temp, &j);
			w = r - temp;
			*image = *image + (one - w) * proj[j] + w * proj[j + 1];
			image++;
			r += rdx;
		}
		r0 += rdy;
	}
}

@


1.1
log
@Initial revision
@
text
@a2 2
#include "qcemulib.h"

d4 1
a4 1
	void  emu_xbp_ ( image,   ra,   proj,   nproj,  size)
d6 2
a7 3
	void      xbp_ ( image,   ra,   proj,   nproj,  size)
#endif /* EMUVERSION */
 
d9 2
a10 2
  float                  image[], ra[], proj[];
  long                                         *nproj, *size;
d12 3
a14 2
                                /*  nproj not used; for compatibility
                                    with microcode version, only      */
d16 5
a20 5
	long x, y, j;		/* indices = x,y;   j = int part of r */
	float r0, rdx, rdy;	/* three elements of ra[] */
	float r, w, temp;	/* w = frac part of r; temp = float(j) */
        float one = 1.0;
	void xsfl4_();
d22 1
a22 1
	r0  = ra[0];
d26 11
a36 13
	for (y=0; y<*size; y++)
	{
	    r = r0;
	    for (x=0; x<*size; x++)
	    {
		j = (long) r;
                xsfl4_(&temp,&j);
		w = r-temp;
		*image = *image + (one-w)*proj[j] + w*proj[j+1];
                image++; 
		r += rdx;
	    }
	    r0 += rdy;
a38 14



/*  emulation of xsfl4  --  float an integer*4 scalar  */

void  xsfl4_ (a,b)

float   *a;
long    *b;
{
 *a = *b;
}

/*********************************************************************/
@
