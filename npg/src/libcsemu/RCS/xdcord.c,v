head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	99.12.13.19.12.55;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	94.02.09.16.23.09;	author tom;	state Exp;
branches;
next	;


desc
@original
@


1.2
log
@clean with lint
@
text
@#ifdef  EMUVERSION
void            emu_xdcord_ (y, id, u, v, ny, nv)
#else
void            xdcord_ (y, id, u, v, ny, nv)
#endif						 /* EMUVERSION */

	float           y[], u[], v[];
	long           *id, *ny, *nv;
{
	float           temp, *yy, *vv;
	long            k, j, indu;

	yy = y - 1;

	for (indu = 0, k = 0; k < *ny; indu += *id, k++) {
		vv = v - 1;
		for (temp = 0.0, j = 0; j < *nv; j++)
			temp += (float) (u[indu + j] * *++vv);
		*++yy = temp;
	}
}

/*********************************************************************/
@


1.1
log
@Initial revision
@
text
@a0 2
#include "qcemulib.h"

d2 1
a2 1
void  emu_xdcord_ (y,id,u,v,ny,nv)
d4 2
a5 2
void  xdcord_ (y,id,u,v,ny,nv)
#endif /* EMUVERSION */
d7 2
a8 2
float   y[], u[], v[];
long    *id, *ny, *nv;
d10 2
a11 2
 float  temp, *yy, *vv;
 long   k, j, indu;
d13 1
a13 1
 yy = y - 1;
d15 6
a20 6
 for (indu=0, k=0; k < *ny; indu += *id, k++) {
 vv = v -1;
      for (temp=0.0, j=0; j < *nv; j++)
           temp += (float)(u[indu+j] * *++vv);
      *++yy = temp;
    }
a23 1

@
