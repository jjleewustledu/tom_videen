head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	99.12.13.19.12.55;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	94.02.09.16.23.09;	author tom;	state Exp;
branches;
next	;


desc
@original
@


1.2
log
@clean with lint
@
text
@#ifdef  EMUVERSION
void            emu_xvrmp_ (y, a, b, c, ny)
#else
void            xvrmp_ (y, a, b, c, ny)
#endif						 /* EMUVERSION */

	float           y[], *a, *b, *c;
	long           *ny;
{
	long            i;
	float           temp1, temp2, temp3;

/*   note that the reason the emulation is so lengthy is that it
     had to go thru the same steps as the primitives to avoid roundoff
     error in the chip */

	temp1 = *c + *c;
	temp2 = *c + temp1;
	temp3 = *c + temp2;
	y[0] = *b;
	y[1] = *b + *c;
	y[2] = *b + temp1;
	y[3] = *b + temp2;
	for (i = 4; i < *ny; i = i + 4) {
		y[i] = y[i - 4] + temp3;
		y[i + 1] = y[i - 3] + temp3;
		y[i + 2] = y[i - 2] + temp3;
		y[i + 3] = y[i - 1] + temp3;
	};
/*     handle remainder */
	for ( /* i is set */ ; i < *ny; i++)
		y[i] = y[i - 4] + temp3;
	*a = (y[*ny - 1] + *c);
}

/*********************************************************************/
@


1.1
log
@Initial revision
@
text
@a0 2
#include "qcemulib.h"

d2 1
a2 1
void  emu_xvrmp_ (y,a,b,c,ny)
d4 5
a8 5
     void  xvrmp_ (y,a,b,c,ny)
#endif /* EMUVERSION */
     
     float   y[], *a, *b, *c;
     long    *ny;
d10 2
a11 2
  long  i;
  float temp1,temp2,temp3 ;
d13 1
a13 1
/*   note that the reason the emulation is so lengthy is that it 
d17 5
a21 5
	temp1 = *c + *c ;
	temp2 = *c + temp1 ; 
	temp3 = *c + temp2 ; 
	y[0] = *b ;
	y[1] = *b + *c ;
d24 5
a28 6
	for (i=4; i < *ny; i=i+4)
	{
	   y[i] = y[i-4] + temp3;
	   y[i+1] = y[i-3] + temp3;
	   y[i+2] = y[i-2] + temp3;
	   y[i+3] = y[i-1] + temp3;
d31 3
a33 3
	for (/* i is set */; i < *ny; i++ )
	   y[i] = y[i-4] + temp3 ;
	*a = (y[*ny-1] + *c) ;
a36 1

@
