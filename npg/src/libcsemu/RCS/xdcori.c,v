head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	99.12.13.19.12.55;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	94.02.09.16.23.09;	author tom;	state Exp;
branches;
next	;


desc
@original
@


1.2
log
@clean with lint
@
text
@#ifdef  EMUVERSION
void            emu_xdcori_ (y, u, iu, v, iv, n, ny)
#else
void            xdcori_ (y, u, iu, v, iv, n, ny)
#endif						 /* EMUVERSION */

	float           y[], u[], v[];
	long            iu[], iv[], *n, *ny;
{
	float           temp, *yy;
	long            k, j, indiu, indu, indv;

	yy = y - 1;

	for (indiu = 0, k = 0; k < *ny; indiu += 2, k++) {
		temp = 0.0;
		indu = iu[indiu];
		indv = iv[indiu];
		for (j = 0; j < *n; j++)
			temp += (float) (u[indu + j] * v[indv + j]);
		*++yy = temp;
	}
}

/*********************************************************************/
@


1.1
log
@Initial revision
@
text
@a0 2
#include "qcemulib.h"

d2 1
a2 1
void  emu_xdcori_ (y,u,iu,v,iv,n,ny)
d4 2
a5 2
void  xdcori_ (y,u,iu,v,iv,n,ny)
#endif /* EMUVERSION */
d7 2
a8 2
float   y[], u[], v[];
long    iu[], iv[], *n, *ny;
d10 2
a11 2
 float  temp, *yy;
 long   k, j, indiu, indu, indv;
d13 1
a13 1
 yy = y - 1;
d15 8
a22 8
 for (indiu=0, k=0; k < *ny; indiu += 2, k++) {
      temp = 0.0;  
      indu = iu[indiu];
      indv = iv[indiu];
      for (j=0; j < *n; j++)
           temp += (float)(u[indu+j] * v[indv+j]);
      *++yy = temp;
    }
a25 1

@
