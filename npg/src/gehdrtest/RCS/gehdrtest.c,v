head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2005.07.06.21.36.12;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Log$ */
/*	===============================================================================
 *	Module:			gehdrtest.c
 *	Date:			Jul 2005
 *	Author:			Tom Videen
 *	Description:	Check GEMS PET Export file 
 *	===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/gehdrtest/RCS/gehdrtest.c,v 2.0 2004/02/16 15:40:37 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <time.h>
#include <image.h>
#include <nrutil.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	char          **ge_read_fields ();
	int             get_field_number ();

	FILE           *fd_ge;			 /* input GE Export file */
	struct tm      *ptm;
	char           *GE_img;			 /* input GEMS Export image filename */
	char           *str1;
	char           *line;

	char          **pat;
	char          **exm;
	char          **scn;
	char          **frm;
	char          **set;
	char          **img;

	int             patn;
	int             exmn;
	int             scnn;
	int             frmn = 0;
	int             setn;
	int             imgn;

	char          **patstr;
	char          **exmstr;
	char          **scnstr;
	char          **frmstr;
	char          **setstr;
	char          **imgstr;

	int             patnum;
	int             exmnum;
	int             scnnum;
	int             frmnum;
	int             setnum;
	int             imgnum;

	char            fid[100];
	long            dim[3];
	long            plnsize;
	int             duration;
	float           frm_max;
	double          fac = 1.0;

	long            slice, frame, nframes;
	long            i, k;
	int             nn;
	int             debug = 0;

	short			*pln;
	int             maxlen = 256;

/*	Get command line arguments and initialize filenames:	*/

	GE_img = argv[1];

	dim[0] = 128;				 /* for lint	 */
	dim[1] = 128;
	dim[2] = 35;
	plnsize = dim[0] * dim[1];
	(void) strcpy (fid, "");

	line = (char *) calloc (maxlen + 1, sizeof (char));
	if (line == NULL) return (ERROR);

	if ((fd_ge = fopen (GE_img, "r")) == 0) {
		fprintf (stderr, "ERROR [gehdrtest]: Unable to open %s\n", GE_img);
		return (ERROR);
	}

/*	Read Header Field Names	*/

	if (fgets (line, maxlen, fd_ge) == 0) {
		fprintf (stderr, "ERROR [gehdrtest]: reading %s\n", GE_img);
		return (ERROR);
	}
	if (strstr (line, "GEMS PET Export File") == NULL) {
		fprintf (stderr, "ERROR [gehdrtest]: not a GEMS PET Export File  %s\n", GE_img);
		return (ERROR);
	}
	if (fgets (line, maxlen, fd_ge) == 0) {
		fprintf (stderr, "ERROR [gehdrtest]: reading %s\n", GE_img);
		return (ERROR);
	}
	patstr = ge_read_fields (fd_ge, &patnum, "patient|", "exam|", line, debug);
	exmstr = ge_read_fields (fd_ge, &exmnum, "exam|", "scan|", line, debug);
	scnstr = ge_read_fields (fd_ge, &scnnum, "scan|", "frame|", line, debug);
	frmstr = ge_read_fields (fd_ge, &frmnum, "frame|", "imageset|", line, debug);
	setstr = ge_read_fields (fd_ge, &setnum, "imageset|", "image|", line, debug);
	imgstr = ge_read_fields (fd_ge, &imgnum, "image|", "patient|", line, debug);

/*	Read Header Values and get image array dimensions */

	pat = ge_read_fields (fd_ge, &patn, "patient|", "exam|", line, debug);
	exm = ge_read_fields (fd_ge, &exmn, "exam|", "scan|", line, debug);
	scn = ge_read_fields (fd_ge, &scnn, "scan|", "frame|", line, debug);
	nframes = 0;
	while (strncmp (line, "imageset|", 9) != 0) {
		if (nframes > 0) {
			for (i = 0; i < frmn; i++)
				free (frm[i]);
			free (frm);
		}
		frm = ge_read_fields (fd_ge, &frmn, "frame|", "dummy", line, debug);
		nframes++;
		for (i = 0; i < 3; i++) {
			if (fgets (line, maxlen, fd_ge) == 0) {
				fprintf (stderr, "ERROR [gehdrtest]: reading %s after Frame field %ld\n", GE_img, nframes + 1);
				return (ERROR);
			}
		}
	}
	k = get_field_number (frmstr, frmnum, "slice_count");
	if (k >= 0)
		dim[2] = atoi (frm[k]);
	fprintf (stderr, "Frames =%3ld  Planes =%3ld\n", nframes, dim[2]);
	if (dim[2] > 35)
		dim[2] = 35;

	set = ge_read_fields (fd_ge, &setn, "imageset|", "blob", line, debug);

/*	Read Images	*/

	frame = 0;
	slice = 1;
	frm_max = 0;

	while ((img = ge_read_fields (fd_ge, &imgn, "image|", "blob", line, debug)) != NULL) {
		if (frame == 0) {
			k = get_field_number (imgstr, imgnum, "image_array_height");
			if (k >= 0)
				dim[0] = atol (img[k]);
			k = get_field_number (imgstr, imgnum, "image_array_width");
			if (k >= 0)
				dim[1] = atol (img[k]);
			plnsize = dim[0] * dim[1];
			pln = (short *) calloc (plnsize, sizeof (short));
			if (pln == NULL) return (ERROR);
		}
		k = get_field_number (imgstr, imgnum, "frame_id");
		if (k >= 0) {
			if (strcmp (fid, img[k]) != 0) {	/* New Frame */
				(void) strcpy (fid, img[k]);
				/* fprintf (stderr, "Frm:%3d  %2d sec   Max: %f  Decay_factor: %f\n", frame, duration, frm_max, fac);
				*/
				fprintf (stdout, "%2d  %f\n", frame+1, fac);
				frm_max = 0;
				frame++;
				k = get_field_number (imgstr, imgnum, "image_duration");
				if (k >= 0)
					duration = atoi (img[k]);
				k = get_field_number (imgstr, imgnum, "decay_factor");
					if (k >= 0)
				fac = atof (img[k]);
			}
		}
		if (fgets (line, maxlen, fd_ge) == 0) {
			fprintf (stderr, "ERROR [gehdrtest]: reading %s\n", GE_img);
			return (ERROR);
		}
		if ((fread (pln, sizeof (short), plnsize, fd_ge)) != plnsize)
			fprintf (stderr, "ERROR [gehdrtest]: Reading %s plane %ld\n", GE_img, slice);
	}
	free (pln);
	(void) fclose (fd_ge);
	return (OK);
}
@
