head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2006.04.21.14.21.46;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.12.15.53.58;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.23.15.37.19;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@angles in degrees
@
text
@/*	$Log: fidlist.c,v $
 * Revision 1.2  2006/04/12  15:53:58  tom
 * *** empty log message ***
 *
 * Revision 1.1  2006/02/23  15:37:19  tom
 * Initial revision
 *
 * Revision 1.1  2006/01/31  14:04:06  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:		fidlist.c
 *	Date:		Feb 2006
 *	Author:		Tom Videen
 *	Intent:		Get listing of 2 sets of fiducial points
 *				0 = list of coordinates; 1 = difference
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidlist/RCS/fidlist.c,v 1.2 2006/04/12 15:53:58 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <image.h>
#include <nrutil.h>
#include <myvalues.h>

/*	----------------------------
 *	Function:			fidlist
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	FILE           *fd;
	char           *dbid;
	char           *pts1;
	char           *pts2;
	char            line[MAXLINE];
	char            name[4];

	float           fx, fy, fz;
	float           dx, dy, dz;
	float           x1, y1, z1;
	float           x2, y2, z2;
	float           v;
	float           dz1, dz2;
	float           ang1, ang2;

	struct point {
		char            name[4];
		float           x;
		float           y;
		float           z;
	};
	struct point    pt1[13];		 /* array of fiducial points	 */
	struct point    pt2[13];		 /* array of fiducial points	 */
	int             npt, n, type;

	if (argc != 5) {
		fprintf (stdout, "Usage: fidlist dbid file1.pts file2.pts type\n");
		return (ERROR);
	}
	dbid = argv[1];
	pts1 = argv[2];
	pts2 = argv[3];
	type = atoi (argv[4]);

/*	=========================================================
 *	Read fiducial points
 *	Note that Analyze image array is reversed and interpolated (x2)
 */
	if ((fd = fopen (pts1, "r")) == 0) {
		fprintf (stderr, "ERROR [fidlist]: opening %s\n", pts1);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd) == NULL) {
		fprintf (stderr, "ERROR [fidlist]: Reading %s\n", pts1);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd) == NULL) {
		fprintf (stderr, "ERROR [fidlist]: Reading %s\n", pts1);
		return (ERROR);
	}
	npt = 0;
	while (fgets (line, MAXLINE, fd) != NULL) {
		if (sscanf (line, "%3s %f %f %f", name, &fx, &fy, &fz) == 4) {
			(void) strcpy (pt1[npt].name, name);
			pt1[npt].x = fx;
			pt1[npt].y = fy;
			pt1[npt].z = fz;
			(npt)++;
		}
	}
	(void) fclose (fd);

	if ((fd = fopen (pts2, "r")) == 0) {
		fprintf (stderr, "ERROR [fidlist]: opening %s\n", pts2);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd) == NULL) {
		fprintf (stderr, "ERROR [fidlist]: Reading %s\n", pts2);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd) == NULL) {
		fprintf (stderr, "ERROR [fidlist]: Reading %s\n", pts2);
		return (ERROR);
	}
	npt = 0;
	while (fgets (line, MAXLINE, fd) != NULL) {
		if (sscanf (line, "%3s %f %f %f", name, &fx, &fy, &fz) == 4) {
			(void) strcpy (pt2[npt].name, name);
			pt2[npt].x = fx;
			pt2[npt].y = fy;
			pt2[npt].z = fz;
			(npt)++;
		}
	}
	(void) fclose (fd);

/*	Compare	*/

	fprintf (stdout, "%5s", dbid);
	if (type == 0) {
		for (n = 0; n < npt-2; n++) {
			x1 = pt1[n].x;
			y1 = pt1[n].y;
			z1 = pt1[n].z;
			x2 = pt2[n].x;
			y2 = pt2[n].y;
			z2 = pt2[n].z;
			fprintf (stdout, " %5.1f %5.1f %5.1f %5.1f %5.1f %5.1f", x1, y1, z1, x2, y2, z2);
		}
	} else {
		for (n = 0; n < npt-2; n++) {
			dx = (pt1[n].x - pt2[n].x);
			dy = (pt1[n].y - pt2[n].y);
			dz = (pt1[n].z - pt2[n].z);
			v = sqrt (dx * dx + dy * dy + dz * dz);
			fprintf (stdout, "%5.1f %4.1f %4.1f %6.3f", dx, dy, dz, v);
		}
	}

/*	Compute tilt angle	*/

	dz1 = pt1[npt-2].z - pt1[npt-1].z;
	dz2 = pt2[npt-2].z - pt2[npt-1].z;
	ang1 = atan(dz1/255.) * 180/M_PI;
	ang2 = atan(dz2/255.) * 180/M_PI;
	if (type == 0)
		fprintf (stdout, " %6.3f %6.3f", ang1, ang2);
	else
		fprintf (stdout, "%8.3f", ang1-ang2);
	fprintf (stdout, "\n");
	return (OK);
}
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidlist/RCS/fidlist.c,v 1.1 2006/02/23 15:37:19 tom Exp tom $";
d53 2
d131 1
a131 1
		for (n = 0; n < npt; n++) {
d141 1
a141 1
		for (n = 0; n < npt; n++) {
d149 11
@


1.1
log
@Initial revision
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidlist/RCS/fidlist.c,v 1.1 2006/01/31 14:04:06 tom Exp $";
d141 1
a141 1
			fprintf (stdout, "%4.1f %4.1f %4.1f %6.3f", dx, dy, dz, v);
@
