head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	94.02.09.19.58.37;	author tom;	state Exp;
branches;
next	;


desc
@unused
@


1.1
log
@Initial revision
@
text
@/* @@(#)bkprojMultPlanes.c	1.1 3/10/93 */

/* bkprojMultPlanes.c

   Backprojection program running under SUN 4.01, 4.1 kernel.
   Uses CSPI emulation package to do numerical computation

   Environment: RECON_DEBUG 	for turning recon debug on
   Variables	RECON_TIME 	when set to 1 will display recon time
		SCATDIR 	is the path to locate the scatparms.dat file 
				being used for scatter correction.

   10-Mar-1993   HPG   Adapted from bkproj_sun.c version 1.3.
*/

#include <stdio.h>
#include <math.h>
#include "matrix.h"
#include "isotope_info.h"
#include <string.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/timeb.h>
#include <sys/file.h>

#define SCATTER 16

#ifndef lint
static char sccsid[]="@@(#)bkprojMultPlanes.c	1.1 3/10/93  Copyright(c) 1989-1993 CTI PET Systems, Inc.";
#endif
 
main(argc, argv)
  int 		argc;
  char 		*argv[];
{
   short int	*scan, *imagei, *scanp;
   int       	numProjs, numViews, i, j, size, debug, recon_time;
   int       	fcode, fft_size, fft_size2, fft_offset;
   int       	decayFlag=0, scatFlag=0, arcorFlag=0;
   int        	normFlag=0, atnFlag=0;
   int       	atnum, frame, plane, gate, sino, bed=0, data=0;
   int       	bkp_type, bkp_start_view, bkp_numViews;
   int 		numPlanes, startPlane, normNumPlanes, attnNumPlanes, imageSize;
   int       	arg, matnum, atn_matnum=0, nrm_matnum=0;
   int      	TotalNviews=0, MultFactor=1, intrinsicTilt=0;
   register int	scanSize;

   long       	timeval, time(), one=1;

   float       *cbufr, *tbufr, scalef=1.0;
   float       *image, *proj, zoom=1.0, imageMin, imageMax, zoomSpec;
   float       *fs, *fsp, *scatParams, *scatterBufr, branchFrac=1.0;
   float       xoff=0.0, yoff=0.0, rotoff=0.0, irot=0.0, x0, y0;
   float       fparms[10], *filterBufr, *fftBufr, *fftBufr2;
   float       fdummy0, offset=0.0, ra=0.0;
   float       *norm, *attn, *normp, *attnp, *buf1, *buf2;
   float       halfLife, decayFactor=1.0, dtcor, frameStartTime;
   float       radius, gprofile[512], w, frameDuration;
   float       sf=0.0, fone=1.0;

   double      ln2, exp(), log(), lamdaT;
   double      cost, sint, r0, rdx, rdy, rx0, ry0, theta;
   double      t0, t1, t2, t3, t4, t5;
   double      m0, m1, m2, m3, m4, m5;

   char        scanFileName[256], attnFileName[256], normFileName[256];
   char        imageFileName[256], *getEnviron(), strVal[10];

   FILE        *fptr, *mat_create();

   Main_header     mhead, nmain, amain;
   Scan_subheader  shead;
   Image_subheader ihead;
   Norm_subheader  nhead;
   Attn_subheader  ahead;
   MatrixFile    *sfp=NULL, *nfp=NULL, *afp=NULL, *ifp=NULL;
   MatrixFile    *matrix_open(), *matrix_create();
   MatrixData    *scanMatrixData, *normMatrixData, *attnMatrixData; 
   MatrixData	 *matrix_read();   
   struct timeb  *tp;

   if (argc < 6) {
      printf("usage: %s scanspec\n\t\t", argv[0]);
      printf("size[,zoom,xoff,yoff,rot,decay,scatFlag,arcCorr,intTilt]");
      printf("\n\t\timagespec\n\t\t");
      printf("filtCode,filtCutoff[,filtOffset,scatFrac,scatSlope,pixSize]");
      printf("\n\t\tnumPlanes");
      printf("\n\t\t-a attenFileSpec\n"); 
      printf("\t\t-b bkprojType,startView,numViews\n");
      printf("\t\t-n normFileSpec\n");
      printf("\t\t-o offset\n");
      exit(1);
   }
   sprintf (strVal, "%s", (char*)getenv("RECON_DEBUG"));
   debug = atoi (strVal);
   sprintf (strVal, "%s", (char*)getenv("RECON_TIME"));
   recon_time = atoi (strVal);

   tp = (struct timeb *) malloc (sizeof (struct timeb));
   ftime(tp);
   t0 = (double)tp->time;
   m0 = (double)tp->millitm;
   t0 = t0 + m0/1000.0;

   size = 128;
   zoom = 1.0;
   xoff = 0.0;
   yoff = 0.0;
   rotoff = 0.0;
   fft_size = 512;
   fcode = 0;
   fdummy0 = 0.5;
   bkp_type = 0;

   buf1 = (float *) malloc (1024*sizeof(float));
   buf2 = (float *) malloc (1024*sizeof(float));

   numPlanes = atoi (argv[5]);

   getMatSpec (argv[1], scanFileName, &frame, &plane, &gate, &data, &bed);
   startPlane = plane;

   matspec(argv[1], scanFileName, &matnum);
   sfp = matrix_open(scanFileName, "r");
   if (sfp == NULL)
      crash("%s: error opening scan file %s\n", argv[0], scanFileName);

   fptr = sfp->fptr;        /* copy file descriptor */
   mhead = *(sfp->mhptr);   /* copy main header */
   if (mhead.file_type != 1)
      crash("%s: matrix file '%s' is not a SCAN file\n", argv[0], scanFileName);

   scanMatrixData = matrix_read(sfp, matnum);
   if (scanMatrixData == NULL)
      crash("%s: error reading %s\n", argv[0], argv[1]);

   shead = *((Scan_subheader *) scanMatrixData->shptr);
   numProjs = shead.dimension_1;
   numViews = shead.dimension_2;
   scanSize = numProjs*numViews;
   if (debug)
      fprintf (stdout,"\nnumProjs = %3d  numViews = %3d\n", numProjs, numViews);

   scalef = shead.scale_factor;
   if (scalef <= 0.0) 
      scalef = 1.0;
   scan = (short int *) scanMatrixData->data_ptr;
   scanp = scan;

   sscanf(argv[2], "%d,%f,%f,%f,%f,%d,%d,%d,%d",
          &size, &zoom, &xoff, &yoff, &rotoff, &decayFlag, &scatFlag, 
          &arcorFlag, &intrinsicTilt);
   if (zoom <= 0.5) 
      zoom = 1.0;
   if (size < 32) 
      size = 32;
   ihead.pixel_size = shead.sample_distance*(float)numProjs/((float)size*zoom);
   if (ihead.pixel_size <= 0.0) 
      ihead.pixel_size = 1.0;

   /* Read filter type and other parameters and make the recon filter */
   for (i=0; i<10; fparms[i++] = 0.0);

   sscanf(argv[4], "%d,%f,%f,%f,%f,%f,%f,%f", &fcode, &fparms[0],
          &fparms[1], &fparms[2], &fparms[3],
          &fparms[4], &fparms[5], &fparms[6]);

        /* Default value of fft_size is  512 */
   while (fft_size < 2*numProjs)
         fft_size *= 2;
   fft_offset = (fft_size - numProjs)/2;
   fft_size2 = fft_size/2;

   /* Compute scatter correction vector */
   if (scatFlag) {
      scatParams = (float *) malloc (2*sizeof(float));
      if ((readScatter (scatParams, plane)) != 0) {
         fprintf (stdout, "bkproj_sun: Warning - turning off scatter correction\n");
         scatFlag = 0;
      }
      if (debug) {
         fprintf (stdout, "scatter fraction = %f\n", scatParams[0]);
         fprintf (stdout, "scatter slope = %f\n", scatParams[1]);
         fprintf (stdout, "sample spacing = %f\n", shead.sample_distance);
      }
      fparms[4] = scatParams[0];   /* scatter fraction */
      fparms[5] = scatParams[1];   /* scatter slope */
      fparms[6] = shead.sample_distance;   /* pixel size */

      scatterBufr = (float *) malloc(fft_size * sizeof(float));
      makefilter (fft_size, scatterBufr, fcode, fparms, buf1, buf2);
   } /* scatter correction specified */

   if (fcode != 0) {
      filterBufr = (float*) malloc(fft_size * sizeof(float));
      fftBufr = (float*) malloc(fft_size * sizeof(float));
      fftBufr2 = (float*) malloc(fft_size * sizeof(float));

      if (fcode < 0 && debug)
         fprintf (stdout, "Modified ramp is being used ...\n");
      makefilter(fft_size, filterBufr, fcode, fparms, buf1, buf2);
   } /* End if code */

   imageSize = size * size;
   proj = (float*) malloc(fft_size*sizeof(float));
   image = (float*) malloc(imageSize*sizeof(float));

   arg = 6;
   offset = 0.0;
   while (arg < argc) {
     if (!strcmp(argv[arg], "-b")) { 
        arg++;
        sscanf(argv[arg++], "%d,%d,%d", &bkp_type, &bkp_start_view,
               &bkp_numViews);
        continue;
     }
     else if (!strcmp(argv[arg], "-o")) {
        arg++;
        sscanf(argv[arg++], "%f", &offset);
        continue;
     }
     else if (!strcmp(argv[arg], "-n")) {
        arg++;
        matspec (argv[arg++], normFileName, &nrm_matnum);
        if (debug)
           fprintf (stdout, "Opening normalization file %s\n", normFileName);
        nfp = matrix_open(normFileName, "r");
        if (nfp == NULL)
           crash("%s: error opening norm file %s\n", argv[0], normFileName);

        if (nfp->mhptr->file_type != 4)
           crash("%s: file '%s' is not a NORM file\n", argv[0], normFileName);

        normNumPlanes = nfp->mhptr->num_planes;
        normMatrixData = matrix_read(nfp, nrm_matnum);
        if (normMatrixData == NULL)
           crash("%s: error reading %s\n", argv[0], argv[arg]);
        nhead = *((Norm_subheader *) normMatrixData->shptr);
        norm = (float *) normMatrixData->data_ptr; 
        normp = norm;
        normFlag = 1;
        continue;
     }
     else if (!strcmp(argv[arg], "-a")) {
        arg++;
        matspec(argv[arg++], attnFileName, &atn_matnum);
        if (debug)
           fprintf (stdout, "Opening attenuation file %s\n", attnFileName);
        afp = matrix_open(attnFileName, "r");
        if (afp == NULL)
           crash("%s: error opening atten file %s\n", argv[0], attnFileName);

        if (afp->mhptr->file_type != 3)
           crash("%s: file '%s' is not an ATTEN file\n", argv[0], attnFileName);

        attnNumPlanes = afp->mhptr->num_planes;
        attnMatrixData = matrix_read(afp, atn_matnum);
        if (attnMatrixData == NULL)
           crash("%s: error reading %s\n", argv[0], argv[arg]);

        ahead = *((Attn_subheader *) attnMatrixData->shptr);
        attn = (float *) attnMatrixData->data_ptr;
        attnp = attn;
        atnFlag = 1;
        continue;
     }
     else 
        crash("%s: unknown option '%s'\n", argv[0], argv[arg]);
   } /* End while arg */

   dtcor = shead.loss_correction_fctr;
   if (dtcor < 1.0) 
      dtcor = 1.0;
   frameStartTime = (float) (shead.frame_start_time/1000);
   frameDuration = (float) (shead.frame_duration/1000);
   if (frameDuration <= 0.0) 
      frameDuration = 1.0;

   /* get branching fraction and halfLife if its not transmission scan */
   halfLife = 0.0;
   if (mhead.acquisition_type != 2) {
      j = 0 ;
      while (j < NumberOfIsotopes && 
             strcmp (mhead.isotope_code, isotope_info[j].name) != 0) 
            j++;
      if (j < NumberOfIsotopes) {
	 sscanf(isotope_info[j].branch_ratio, "%f", &branchFrac);
	 halfLife = isotope_info[j].hl;
      }
      else {
	 /* Warn the user if the specified isotope in the main header  
          * was not located in the isotope_info file. */
	  fprintf (stdout, "Warning: improper or missing value for isotope(#%2d) in the main header\n", j);
          if (decayFlag) {
             decayFlag = 0;
             fprintf (stdout, "Warning: decay correction has been turned off\n");
          }
      }
   }
   else
      arcorFlag = 0;

   /* Compute decay correction factor */
   if (decayFlag) {
      /* If halfLife is not available from isotope_info.h then get it from 
       * scan subheader */
      if (halfLife == 0.0)
         halfLife = shead.isotope_halflife;
      if (halfLife > 0) {
         ln2 = log(2.0);
         lamdaT = frameDuration * ln2/halfLife;
         decayFactor = exp(frameStartTime*ln2/halfLife)/(1-lamdaT/2.0
            +lamdaT*lamdaT/6.0
            -lamdaT*lamdaT*lamdaT/24.0
            +lamdaT*lamdaT*lamdaT*lamdaT/120.0 
            -lamdaT*lamdaT*lamdaT*lamdaT*lamdaT/720.0);
      }
   }

   ftime(tp);
   t1 = (double)tp->time;
   m1 = (double)tp->millitm;
   t1 = t1 + m1/1000.0;

   /* Compute various parameters for arc correction */
   MultFactor = ((int)mhead.compression_code) ? (int)mhead.compression_code * 2 : 1;
   TotalNviews = shead.dimension_2 * MultFactor;
   if (debug) {
      fprintf (stdout, "\nCompression code = %3d", (int)mhead.compression_code);
      fprintf (stdout, "\nTotalNviews = %3d\n", TotalNviews);
   }

   radius = 0.0;
   if (arcorFlag) {
      switch (mhead.system_type) {
         case 931:
         case 951:
            radius = 102.0/2 + 1.0;   	/* 951/931 model */
            break;
         case 933:
         case 953:
            radius = 76.0/2 + 1.0;   	/* 953/933 model */
            break;
         case 961:
            radius = 82.4/2 + 1.0;  	/* 961 model */
            break;
         case 921:
            radius = 82.0/2 + 1.0;  	/* 921 model */
            break;
         case 831:
            radius = 64.0/2 + 1.0;  	/* 831 model */
            break;
         default:
            arcorFlag = 0;
            radius = 0.0;
	    fprintf (stdout, "%s:Warning...Unknown system type. Turning off arc correction\n", argv[0]);
      } /* End switch */

      if (arcorFlag && radius > 0.0) {
         for (i=0; i<numProjs; i++)
             gprofile[i] = numProjs/2 + radius * sin(M_PI*(i-numProjs/2)/(2*
                                           TotalNviews))/shead.sample_distance;
         w = shead.sample_distance * TotalNviews * 2 / M_PI /radius;
         if (debug)
            fprintf(stdout, "arc correction profile made, radius = %f\n", radius);   
      } /* End if arcorFlag */
   }   

   /* Correct for intrinsic tilt if specified */
   if (!intrinsicTilt) 
      irot = 0.0;
   else {
      /* 953, 933, and 921 models */
      if ((numViews % 96) == 0)
         irot = -15.0;
      /* 961 model */
      else if ((numViews % 98) == 0)
         irot = -12.86;
      else
         irot = 0.0;
      }
   if (debug)
      fprintf (stdout, "Applying intrisic tilt...irot=%f\n", irot);

   sincos(M_PI*rotoff/180.0, &sint, &cost);
   x0 = xoff*cost + yoff*sint;
   y0 = -xoff*sint + yoff*cost;

   fs = (float *) malloc(scanSize*sizeof(float)); 
   if (fs == NULL)
      crash("%s: error allocating %d bytes memory\n", argv[0], 
            scanSize*sizeof(float));

   mhead.data_type = 2;
   mhead.file_type = 2;
   matspec(argv[3], imageFileName, &matnum);
   fptr = mat_open(imageFileName, "r+");
   if (!fptr) 
      fptr = mat_create(imageFileName, &mhead);

   ftime(tp);
   t2 = (double)tp->time;
   m2 = (double)tp->millitm;
   t2 = t2 + m2/1000.0;

   zoomSpec = zoom;
   zoom = (float) numProjs / (float) size / zoom;
   rx0 = (float) (size/2) - x0/ihead.pixel_size + offset;
   ry0 = (float) (size/2) + y0/ihead.pixel_size + offset;
   imagei = (short int *) malloc(size*size*sizeof(short int));

   while (numPlanes) {
      numPlanes--;
      if (plane != startPlane) {
         matnum = mat_numcod (frame, plane, gate, data, bed);

         scanMatrixData = matrix_read(sfp, matnum);
         if (scanMatrixData == NULL)
            crash("%s:Error...unable to read matrix %x from file %s\n", argv[0], matnum, scanFileName);

         shead = *((Scan_subheader *) scanMatrixData->shptr);

         scalef = shead.scale_factor;
         if (scalef <= 0.0)
            scalef = 1.0;
         scan = (short int *) scanMatrixData->data_ptr;
         scanp = scan;

         if (normFlag) {
            if (normNumPlanes != 1) {
               nrm_matnum = matnum;
               normMatrixData = matrix_read(nfp, nrm_matnum);
               if (normMatrixData == NULL)
                  crash("%s:Error...unable to read matrix %x from file %s\n", argv[0], nrm_matnum, normFileName);
               nhead = *((Norm_subheader *) normMatrixData->shptr);
               norm = (float *) normMatrixData->data_ptr;
            }
            normp = norm;
         }

         if (atnFlag) {
            if (attnNumPlanes != 1) {
               atn_matnum = matnum;
               attnMatrixData = matrix_read(afp, atn_matnum);
               if (attnMatrixData == NULL)
                  crash("%s:Error...unable to read matrix %x from file %s\n", argv[0], atn_matnum, attnFileName);

               ahead = *((Attn_subheader *) attnMatrixData->shptr);
               attn = (float *) attnMatrixData->data_ptr;
            }
            attnp = attn;
         }
      }

      for (j=0; j<scanSize; fs[j++]=0.0);

      fprintf (stdout, "Reconstructing plane:%3d\n", plane);
      /* Perform arc correction if specified */
      if (arcorFlag)
         arcCorrect (numProjs, numViews, scan, fs, gprofile, w);
      else
         for (j=0; j<scanSize; j++)
             fs[j] = (float) scan[j];

      fsp = fs;
      xvclr_ (image, &imageSize, &one);
      for (i=0; i<numViews; i++) {
          theta = M_PI*i/numViews + (rotoff+irot)*M_PI/180.;
          sincos(theta, &sint, &cost);
          rdx = cost * zoom;
          rdy = sint * zoom;
          xvclr_ (proj, &fft_size, &one);
          xvclr_ (fftBufr, &fft_size, &one);

          if (scatFlag) {
             if (normFlag)
                for (j=0; j<numProjs; j++)
                    proj[j+fft_offset] = *fsp++ * (*normp++);
             else
                for (j=0; j<numProjs; j++)
                    proj[j+fft_offset] = *fsp++;

             sf = (float) ((1.0-fparms[4])/(2.0*fft_size));
             ra = 0.0;
             xfrf_ (fftBufr, &ra, proj, &fft_size2);
             xcvmls_ (fftBufr, &fone, fftBufr, scatterBufr, &fft_size2);
             ra = ra * scatterBufr[1];
             xfri_ (proj, &ra, fftBufr, proj, &fft_size2);
             xvsml_ (proj, &sf, &fft_size);

             if (atnFlag)
                for (j=0; j<numProjs; j++)
                    proj[j+fft_offset] *= *attnp++;
          }
          else {
            /* if no scatter correction */
            if (normFlag && atnFlag)
               for (j=0; j<numProjs; j++)
                   proj[j+fft_offset] = *fsp++ * (*normp++) * (*attnp++);
            else 
               if (normFlag)
                  for (j=0; j<numProjs; j++)
                      proj[j+fft_offset] = *fsp++ * (*normp++);
            else 
               if (atnFlag)
                  for (j=0; j<numProjs; j++)
                      proj[j+fft_offset] = *fsp++ * (*attnp++);
            else
               for (j=0; j<numProjs; j++)
                   proj[j+fft_offset] = *fsp++;
          }

          if (fcode != 0) {
             ra = 0.0;
             xfrf_ (fftBufr, &ra, proj, &fft_size2);
             xcvmls_ (fftBufr, &fone, fftBufr, filterBufr, &fft_size2);
             ra = ra * filterBufr[1];
             xfri_ (proj, &ra, fftBufr, fftBufr2, &fft_size2);
          }
          else
             if (i == 0) 
                fprintf(stdout, "%s:Warning...no filter specified\n", argv[0]);

          r0 = (float) fft_size2 - rx0*rdx - ry0*rdy;

          switch (bkp_type) { 
             case 1:   /* trapazoidal backprojection */
                bkprojViewTrap(proj, r0, rdx, rdy, image, size, theta);
                break;
             case 0:   /* normal */
             default:
                bkprojView(proj, r0, rdx, rdy, image, size);
                break;
          }
      }

      imageMax = image[0];
      imageMin = image[0];
      for (i=1; i<size*size; i++) {
        imageMax = (image[i] > imageMax) ? image[i] : imageMax;
        imageMin = (image[i] < imageMin) ? image[i] : imageMin;
      }
      if (debug)
         fprintf (stdout, "Image min = %f  max = %f\n", imageMin, imageMax);
      for (i=0; i<imageSize; i++)
        imagei[i] = 32767.*image[i]/imageMax;

      if (plane == startPlane) {
         ihead.data_type = 2;
         ihead.num_dimensions = 2;
         ihead.dimension_1 = ihead.dimension_2 = size;
         ihead.x_origin = xoff;
         ihead.y_origin = yoff;
         ihead.recon_scale = zoomSpec;
         ihead.image_min = 0;
         ihead.image_max = 32767;
         ihead.slice_width = 0.675;
         ihead.intrinsic_tilt = irot;
         ihead.image_rotation = rotoff;
         ihead.slice_width = mhead.plane_separation;
         ihead.filter_code = fcode;
         ihead.frame_start_time = frameStartTime;
         ihead.frame_duration = shead.frame_duration;
         ihead.quant_units = 2;
         ihead.plane_eff_corr_fctr = 1.0;
         ihead.decay_corr_fctr = decayFactor;
         ihead.loss_corr_fctr = dtcor;
         for (i=0; i<6; i++) 
             ihead.filter_params[i] = fparms[i];
         ihead.well_counter_cal_fctr = 1.0;
         strcpy (ihead.annotation, "SUN reconstruction with AP emu library");
      }

      if (normFlag)
         scalef *= nhead.scale_factor;
      if (atnFlag)
         scalef *= ahead.scale_factor;
      scalef = scalef * dtcor * decayFactor/frameDuration;   
      ihead.quant_scale = scalef * M_PI * imageMax/(32767.*numViews*2*fft_size);

      if (debug)
         fprintf (stdout, "Image quant_scale = %e\n", ihead.quant_scale);
      ihead.scan_matrix_num = matnum;
      ihead.norm_matrix_num = nrm_matnum;
      ihead.atten_cor_matrix_num = atn_matnum;
      if (normFlag) {
         mhead.calibration_units = nfp->mhptr->calibration_units;
         ihead.plane_eff_corr_fctr = nhead.scale_factor;
         if (nhead.ecat_calib_factor > 0.0)
            ihead.ecat_calibration_fctr = nhead.ecat_calib_factor/branchFrac;
         else
            ihead.ecat_calibration_fctr = 1.0/branchFrac;
      }
     
      mat_write_image(fptr, matnum, &ihead, imagei, imageSize*2);
      plane++;
   } /* End while */

   mat_close(fptr);

   ftime(tp);
   t3 = (double)tp->time;
   m3 = (double)tp->millitm;
   t3 = t3 + m3/1000.0;
   if (debug || recon_time) {
      fprintf (stdout, "\n t1-t0   t2-t1   t3-t2   t3-t0\n");
      fprintf (stdout, "%6.3f  %6.3f  %6.3f  %6.3f\n\n\n", t1-t0, 
              t2-t1, t3-t2, t3-t0);
   }

   free (imagei);
}

bkprojView (proj, r0, rdx, rdy, image, size)
   float 	*proj, *image;
   double 	r0, rdx, rdy;
   int 		size;
{
   int 		x, y, j;
   double 	r, w;

   for (y=0; y<size; y++) {
       r = r0;
       for (x=0; x<size; x++) {
           j = (int) r;
           w = r-j;
           (*image++) += (1.0-w)*proj[j] + w*proj[j+1];
           r += rdx;
       }
       r0 += rdy;
   }
}

bkprojViewTrap(proj, r0, rdx, rdy, image, size, theta)
   int 		size;
   float 	*proj, *image;
   double 	r0, rdx, rdy, theta;
{
   int 		x, y, b1, b2, b3, b4;
   static int 	flag=1;
   double 	r, w, w1, w2, r1, r2, r3, r4, f1, f2, f3, q, q1;

   w1=M_SQRT2*fabs(cos(theta+M_PI/4));
   w2=M_SQRT2*fabs(cos(theta-M_PI/4));
   if (w1>w2) {
      w = w1;
      w1 = w2;
      w2 = w;
   }
   f1 = 0.5*(w2-w1)/(w2+w1);
   f2 = 2.0*w1/(w2+w1);
   f3 = f1;
   r0 += 0.5;
   for (y=0; y< size; y++, r0+=rdy) { 
       r = r0;
       for (x=0; x< size; x++, image++, r+=rdx) {
           r1 = r-w2/2;
           b1 = (int) r1;
           r2 = r-w1/2;
           b2 = (int) r2;
           r3 = r+w1/2;
           b3 = (int) r3;
           r4 = r+w2/2;
           b4 = (int) r4;
           if (b1 == b2)
              (*image) += f1*proj[b1];
           else {
             q = b2;
             q1 = (q-r1)*(q-r1)/((r2-r1)*(r2-r1));
             (*image) += f1*q1*proj[b1]+f1*(1.0-q1)*proj[b2];
           }
           if (b2 == b3)
              (*image) += f2*proj[b2];
           else {   
              q = b3;
              q1 = (q-r2)/(r3-r2);
              (*image) += f2*q1*proj[b2]+f2*(1.0-q1)*proj[b3];
           }
           if (b3 == b4)
              (*image) += f3*proj[b3];
           else {
              q = b4;
              q1 = (r4-q)*(r4-q)/((r4-r3)*(r4-r3));
              (*image) += f3*q1*proj[b4]+f3*(1.0-q1)*proj[b3];
           }
       } /* next x */
   } /* next y */
}


arcCorrect(numProjs, numViews, scan_in, scan_out, profile, w)
   int       	numProjs, numViews;
   short int	*scan_in;
   float    	*scan_out, *profile, w;
{
   int       	i, j, o, in;

   float    	f1, f2;

   for (i=0; i<numProjs; i++) {
       o = (int) profile[i];
       f1 = profile[i] -  o;
       f2 = 1.0 - f1;

       if (i == numProjs/2) 
          f2 = w;
       for (j=0; j<numViews; j++) {
           in = scan_in[i+j*numProjs];
           scan_out[o+j*numProjs] += in * f2;
           scan_out[o+j*numProjs+1] += in * f1;
       }
   }
}


int readScatter(scatParam, planeNum)
   float    	*scatParam;
   int		planeNum;
{
   int       	plane, status = 0;

   char    	*s, temp[256], filename[256];

   FILE    	*fptr, *fopen();

   s = (char *)malloc (256);
  
   sprintf (temp, "%s", (char*)getEnviron("SCATDIR"));
   sprintf (filename, "%s/scatparms.dat", temp);

   if ((fptr=fopen(filename, "r")) != NULL) {
      while ((s=fgets(s, 256, fptr)) != NULL) {
         sscanf (s, "%d %f %f", &plane, &scatParam[0], &scatParam[1]);
         if (plane == planeNum)
            break;
      }
      fclose (fptr);
   }
   else {
     fprintf (stdout, "readScatter:Error...unable to open the file %s\n", filename);
     status = -1;
   }

   free (s);
   return(status);
}

/* get environment variables */
 
char *getEnviron(variable)
   char 	*variable;
{
   char 	*string;
 
   if ((string=(char*)getenv(variable)) == (char*)NULL) {
      fprintf (stdout, "getEnviron:Error - environment variable %s is not defined\n", 
              variable);
      return(NULL);
   }
   else
      return(string);
}

getMatSpec (fileSpec, fileName, f, p, g, d, b)
   int       	*f, *p, *g, *d, *b;
   char    	*fileSpec, *fileName;
{
   char    	*cp;

   strcpy(fileName, fileSpec);
   cp = strchr(fileName, ',');
   if (cp) {
      *cp++ = '\0';
      sscanf(cp, "%d,%d,%d,%d,%d", &(*f), &(*p), &(*g), &(*d), &(*b));
   }
}
@
