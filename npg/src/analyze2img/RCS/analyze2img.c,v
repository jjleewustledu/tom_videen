head	2.25;
access;
symbols;
locks; strict;
comment	@ * @;


2.25
date	2008.08.07.20.06.26;	author tom;	state Exp;
branches;
next	2.24;

2.24
date	2008.07.01.20.56.17;	author tom;	state Exp;
branches;
next	2.23;

2.23
date	2007.06.22.21.29.14;	author tom;	state Exp;
branches;
next	2.22;

2.22
date	2005.09.12.20.55.37;	author tom;	state Exp;
branches;
next	2.21;

2.21
date	2004.04.06.15.36.16;	author tom;	state Exp;
branches;
next	2.20;

2.20
date	2004.02.13.17.45.22;	author tom;	state Exp;
branches;
next	2.15;

2.15
date	2003.02.12.14.45.58;	author tom;	state Exp;
branches;
next	2.14;

2.14
date	2000.09.06.19.21.50;	author tom;	state Exp;
branches;
next	2.13;

2.13
date	2000.03.29.15.34.22;	author tom;	state Exp;
branches;
next	2.12;

2.12
date	99.12.14.19.21.26;	author tom;	state Exp;
branches;
next	2.11;

2.11
date	99.09.28.15.06.21;	author tom;	state Exp;
branches;
next	2.10;

2.10
date	99.04.07.17.11.58;	author tom;	state Exp;
branches;
next	2.9;

2.9
date	98.10.12.21.32.42;	author tom;	state Exp;
branches;
next	2.8;

2.8
date	98.01.14.17.45.55;	author tom;	state Exp;
branches;
next	2.7;

2.7
date	98.01.14.17.41.16;	author tom;	state Exp;
branches;
next	2.6;

2.6
date	97.05.20.14.41.49;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	97.05.20.14.01.45;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	97.05.14.19.18.01;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	96.10.16.16.20.17;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.09.25.20.29.50;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.09.03.19.50.52;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.08.16.20.09.26;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	96.06.05.17.32.46;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.06.04.17.23.17;	author tom;	state Exp;
branches;
next	;


desc
@@


2.25
log
@include decay correction factor
@
text
@/*	$Log: analyze2img.c,v $
 * Revision 2.24  2008/07/01  20:56:17  tom
 * convert 8-bit as unsigned char
 *
 * Revision 2.23  2007/06/22  21:29:14  tom
 * 3-D floats
 *
 * Revision 2.22  2005/09/12  20:55:37  tom
 * make with updated libimage.a
 *
 * Revision 2.21  2004/04/06  15:36:16  tom
 * convert floating point
 *
 * Revision 2.20  2004/02/13  17:45:22  tom
 * Feb 2004
 *
 * Revision 2.15  2003/02/12  14:45:58  tom
 * add 5th parameter
 *
 * Revision 2.14  2000/09/06  19:21:50  tom
 * strcpy filename
 *
 * Revision 2.13  2000/03/29  15:34:22  tom
 * convert either 8- or 16-bit images
 *
 * Revision 2.12  1999/12/14  19:21:26  tom
 * lint cleaning
 *
 * Revision 2.11  1999/09/28  15:06:21  tom
 * fix bug in orientation when a std image is used
 * the orientation of the output image is always Right-on-Right
 *
 * Revision 2.10  1999/04/07  17:11:58  tom
 * set decay_corr in sh
 *
 * Revision 2.9  1998/10/12  21:32:42  tom
 * clean up messages
 *
 * Revision 2.8  1998/01/14  17:45:55  tom
 * *** empty log message ***
 *
 * Revision 2.7  1998/01/14  17:41:16  tom
 * correct bug in calloc
 *
 * Revision 2.6  1997/05/20  14:41:49  tom
 * savercs order
 *
 * Revision 2.5  1997/05/20  14:01:45  tom
 * if std header, use odim3 and runstamp from current
 *
 * Revision 2.4  1997/05/14  19:18:01  tom
 * permit standard image for header info
 *
 * Revision 2.3  1996/10/16  16:20:17  tom
 * fprintf
 *
 * Revision 2.2  1996/09/25  20:29:50  tom
 * *** empty log message ***
 *
 * Revision 2.1  1996/09/03  19:50:52  tom
 * new libraries
 *
 * Revision 2.0  1996/08/16  20:09:26  tom
 * new libraries
 *
 * Revision 1.2  1996/06/05  17:32:46  tom
 * set points with values -32768 to 0
 *
 * Revision 1.1  1996/06/04  17:23:17  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			analyze2img.c
 *	Date:			Jun 1996
 *	Author:			Tom Videen
 *	Description:	Transform Analyze images into ECAT 7.0 format.
 *	Notes:
 *		reslice16 (AIR package) sets unsampled points to -32768;
 *			This program resets these to 0.
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.24 2008/07/01 20:56:17 tom Exp $";

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <ANALYZE.h>				 /* dsr */

#define MAXSTR 256

/*	----------------------------
 *	Function:			analyze2img
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	ImageFile      *file;
	Index           indx;
	struct dsr      hdr;			 /* header for ANALYZE */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	int             stdfrm;
	char           *stdimg;			 /* image filename for default header values */
	char           *ecatimg;		 /* output PET image filename */
	char           *ANALYZE_hdr;		 /* input Analyze header filename  */
	char           *ANALYZE_img;		 /* input Analyze image filename */
	char            runstamp[40];		 /* version, date and userid info */
	long            odim1, odim2, odim3;	 /* dimensions of img */
	long            ndim1, ndim2, ndim3;	 /* dimensions of image */
	float			ovox1, ovox2, ovox3;	 /* voxel sizes of input image */
	long            xoffset, yoffset;	 /* offsets for recutting img */
	int             bytes;
	int             keepvox;		 /* 1 = use input file voxel size;
										0 = use std image vox size */
	int             i, j, k, m, n;

	float        ***img;			 /* intermediate image */
	float        ***image;			 /* output image */
	float          *frow;			 /* single row of input image */
	short          *srow;			 /* single row of input image */
	unsigned char  *crow;			 /* single row of input image */

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 14) {
		fprintf (stdout, "Usage: analyze2img ANALYZE_img ANALYZE_hdr ecatimg stdimg stdfrm vox\n");
		return (ERROR);
	}
	ANALYZE_img = argv[1];
	ANALYZE_hdr = argv[2];
	ecatimg = argv[3];
	stdimg = argv[4];
	stdfrm = atoi (argv[5]);
	keepvox = atoi (argv[6]);
	n = 7;
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[n], argv[n + 1], argv[n + 2],
		 argv[n + 3], argv[n + 5], argv[n + 6]);

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (ANALYZE_hdr, "r")) == NULL) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot open: %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.bitpix == 8)
		bytes = 1;
	else if (hdr.dime.bitpix == 16)
		bytes = 2;
	else if (hdr.dime.bitpix == 32)
		bytes = 4;
	else {
		fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	odim1 = hdr.dime.dim[1];
	odim2 = hdr.dime.dim[2];
	odim3 = hdr.dime.dim[3];
	ovox1 = hdr.dime.pixdim[1];
	ovox2 = hdr.dime.pixdim[2];
	ovox3 = hdr.dime.pixdim[3];
	(void) fclose (fd_hdr);

/*
 *	Read the img and flip X, Y & Z from Analyze convention
 */

	if ((fd_img = fopen (ANALYZE_img, "r")) == NULL) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot open: %s\n", ANALYZE_img);
		return (ERROR);
	}
	if ((img = f3tensor (1, odim3, 1, odim2, 1, odim1)) == NULL) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot malloc img\n");
		return (ERROR);
	}
	if (bytes == 1) {
		if (NULL == (crow = (unsigned char *) calloc (odim1, sizeof (unsigned char)))) {
			fprintf (stderr, "ERROR [analyze2img]: Cannot malloc memory for row\n");
			return (ERROR);
		}
		for (i = odim3; i > 0; i--) {
			for (j = odim2; j > 0; j--) {
				if ((fread (crow, sizeof (unsigned char), odim1, fd_img)) != odim1) {
					fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", ANALYZE_img);
					return (ERROR);
				}
				for (k = 1; k <= odim1; k++)
					img[i][j][odim1 - (k - 1)] = (float) crow[k - 1];
			}
		}

	} else if (bytes == 2) {
		if (NULL == (srow = (short *) calloc (odim1, sizeof (short)))) {
			fprintf (stderr, "ERROR [analyze2img]: Cannot malloc memory for row\n");
			return (ERROR);
		}
		for (i = odim3; i > 0; i--) {
			for (j = odim2; j > 0; j--) {
				if ((fread (srow, sizeof (short), odim1, fd_img)) != odim1) {
					fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", ANALYZE_img);
					return (ERROR);
				}
				for (k = 1; k <= odim1; k++) {
					if (srow[k - 1] == -32768)
						img[i][j][odim1 - (k - 1)] = 0.;
					else
						img[i][j][odim1 - (k - 1)] = (float) srow[k - 1];
				}
			}
		}

	} else {
		if (NULL == (frow = (float *) calloc (odim1, sizeof (float)))) {
			fprintf (stderr, "ERROR [analyze2img]: Cannot malloc memory for row\n");
			return (ERROR);
		}
		for (i = odim3; i > 0; i--) {
			for (j = odim2; j > 0; j--) {
				if ((fread (frow, sizeof (float), odim1, fd_img)) != odim1) {
					fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", ANALYZE_img);
					return (ERROR);
				}
				for (k = 1; k <= odim1; k++) 
					img[i][j][odim1 - (k - 1)] = frow[k - 1];
			}
		}
	}
	(void) fclose (fd_img);

/*
 *	Generate 128x128 slices from img
 */

	ndim1 = 128;
	ndim2 = 128;
	ndim3 = odim3;
	xoffset = (odim1 - ndim1) / 2;
	yoffset = (odim2 - ndim2) / 2;
	if ((image = f3tensor (1, ndim3, 1, ndim2, 1, ndim1)) == NULL) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot malloc image\n");
		return (ERROR);
	}
	for (i = 1; i <= ndim3; i++) {
		for (j = 1; j <= ndim2; j++) {
			m = j + yoffset;
			for (k = 1; k <= ndim1; k++) {
				n = k + xoffset;
				if (m > 0 && m <= odim2 && n > 0 && n <= odim1)
					image[i][j][k] = img[i][m][n];
				else
					image[i][j][k] = 0.;
			}
		}
	}

/*
 *	Create ECAT file
 */

	file = make_imgfile (ecatimg);
	if (make_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot make mh for %s\n", ecatimg);
		return (ERROR);
	}
	if (make_sh (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot make sh for %s\n", ecatimg);
		return (ERROR);
	}
/*
 *	Define ECAT file properties
 */

	file->mh->file_format = MATRIX_REV7;
	file->mh->filetype = PetVolume;
	file->mh->scanner_type = 0;
	file->mh->start_time = 0;
	for (i = 0; i < 8; i++)
		file->mh->isotope[i] = ' ';
	for (i = 0; i < 32; i++)
		file->mh->radiopharmaceutical[i] = ' ';
	file->mh->bed_elevation = 0;
	file->mh->wobble_speed = 0;
	file->mh->calibration_factor = 1;
	file->mh->sw_revision = (char *) calloc (32, sizeof (char));
	file->mh->filetime = (char *) calloc (32, sizeof (char));
	file->mh->nplane = odim3;
	file->mh->nframe = 1;
	file->mh->ngate = 1;
	file->mh->nbed = 1;
	file->mh->init_bed_pos = 0;
	for (i = 0; i < 16; i++)
		file->mh->bed_off[i] = 0;
	file->mh->slicesep = 0.1 * ovox3;

	file->sh->number_format = SHORT_DATA;
	file->sh->ndim = 3;
	file->sh->dim1 = ndim1;
	file->sh->dim2 = ndim2;
	file->sh->dim3 = ndim3;
	file->sh->sample_size_1 = 0.1 * ovox1;
	file->sh->sample_size_2 = 0.1 * ovox2;
	file->sh->sample_size_3 = 0.1 * ovox3;
	file->sh->start_time = 0;
	file->sh->duration = 1;
	(void) save_rcs (file, rcsid, runstamp);

	if (make_mh7 (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot make mh7 for %s\n", ecatimg);
		return (ERROR);
	}
	(void) fill_mh7 (file);
	if (make_sh7 (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot make sh7 for %s\n", ecatimg);
		return (ERROR);
	}
/*
 *	Read std image
 */
	if (stdfrm > 0) {
		fprintf (stdout, "Using header info from %s frm=%d\n", stdimg, stdfrm);
		(void) strcpy (file->name, stdimg);
		if (open_imgfile (file) == ERROR) {
			fprintf (stderr, "ERROR [analyze2img]: Cannot open %s\n", stdimg);
			return (ERROR);
		}
		if (get_mh (file) == ERROR) {
			fprintf (stderr, "ERROR [analyze2img]: Cannot get MainHeader from %s\n", stdimg);
			return (ERROR);
		}
		indx.frm = stdfrm;
		if (existimgfrm (file, &indx) == ERROR) {
			fprintf (stderr, "ERROR [analyze2img]: cannot find %s frame %d\n",
				 stdimg, stdfrm);
			return (ERROR);
		}
		if (get_sh (file, &indx) == ERROR) {
			fprintf (stderr, "ERROR [analyze2img]: Cannot read file subheader in %s\n", stdimg);
			return (ERROR);
		}
		close_imgfile (file);
	} else {
		file->sh->decay_corr = 1.0;
		file->m7->sh->decay_corr_fctr = 1.0;
	}
	if (keepvox > 0) {
		file->sh->sample_size_1 = 0.1 * ovox1;
		file->sh->sample_size_2 = 0.1 * ovox2;
		file->sh->sample_size_3 = 0.1 * ovox3;
		file->mh->slicesep = 0.1 * ovox3;
		file->m7->sh->x_pixel_size = ovox1;
		file->m7->sh->y_pixel_size = ovox2;
		file->m7->sh->z_pixel_size = ovox3;
		file->m7->mh->plane_separation = ovox3;
	}
	file->mh->nplane = odim3;
	file->mh->orientation = 0;
	file->sh->dim3 = odim3;
	(void) save_rcs (file, rcsid, runstamp);

/*
 *	Write ECAT image file
 */

	(void) strcpy (file->name, ecatimg);
	(void) strcpy (file->mode, "w");
	indx.frm = 1;
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot open %s\n", ecatimg);
		return (ERROR);
	}
	if (put_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot write %s\n", ecatimg);
		return (ERROR);
	}
	if (writetensor (file, &indx, image) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot write %s\n", ecatimg);
		return (ERROR);
	}
/*
 *	Free & Exit
 */

	fprintf (stdout, "Converted: %s to %s\n", ANALYZE_img, ecatimg);
	free_imgfile (file);
	if (bytes == 1)
		free (crow);
	else if (bytes == 2)
		free (srow);
	else
		free (frow);
	free_f3tensor (img, 1, odim3, 1, odim2, 1, odim1);
	free_f3tensor (image, 1, ndim3, 1, ndim2, 1, ndim1);
	return (OK);
}
@


2.24
log
@convert 8-bit as unsigned char
@
text
@d2 3
d82 1
a82 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.23 2007/06/22 21:29:14 tom Exp tom $";
d368 3
a381 2
	file->sh->decay_corr = 1.0;
	file->m7->sh->decay_corr_fctr = 1.0;
@


2.23
log
@3-D floats
@
text
@d2 3
d79 1
a79 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.22 2005/09/12 20:55:37 tom Exp tom $";
d126 1
a126 1
	char           *crow;			 /* single row of input image */
d201 1
a201 1
		if (NULL == (crow = (char *) calloc (odim1, sizeof (char)))) {
d207 1
a207 1
				if ((fread (crow, sizeof (char), odim1, fd_img)) != odim1) {
@


2.22
log
@make with updated libimage.a
@
text
@d2 3
d76 1
a76 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.21 2004/04/06 15:36:16 tom Exp tom $";
d161 1
a161 1
	if (hdr.dime.dim[0] != 4) {
@


2.21
log
@convert floating point
@
text
@d2 3
d73 1
a73 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.20 2004/02/13 17:45:22 tom Exp tom $";
@


2.20
log
@Feb 2004
@
text
@d2 3
d70 1
a70 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.15 2003/02/12 14:45:58 tom Exp tom $";
d115 1
d164 2
d207 1
a207 1
	} else {
d226 16
d401 2
d404 1
a404 1
		free (srow);
@


2.15
log
@add 5th parameter
@
text
@d2 3
d59 1
a59 1
 *	Date:			Jun-96
d67 1
a67 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.14 2000/09/06 19:21:50 tom Exp tom $";
d130 1
a130 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[n], argv[n + 1], argv[n + 2],
d171 1
a171 1
	fclose (fd_hdr);
d221 1
a221 1
	fclose (fd_img);
d298 1
a298 1
	save_rcs (file, rcsid, runstamp);
d304 1
a304 1
	fill_mh7 (file);
d314 1
a314 1
		strcpy (file->name, stdimg);
d350 1
a350 1
	save_rcs (file, rcsid, runstamp);
d356 2
a357 2
	strcpy (file->name, ecatimg);
	strcpy (file->mode, "w");
@


2.14
log
@strcpy filename
@
text
@d2 3
d64 1
a64 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.13 2000/03/29 15:34:22 tom Exp tom $";
d100 1
d103 2
d116 2
a117 2
	if (argc != 13) {
		fprintf (stdout, "Usage: analyze2img ANALYZE_img ANALYZE_hdr ecatimg stdimg stdfrm\n");
d125 2
a126 1
	n = 6;
d165 3
d283 1
a283 1
	file->mh->slicesep = 0.1 * hdr.dime.pixdim[3];
d290 3
a292 3
	file->sh->sample_size_1 = 0.1 * hdr.dime.pixdim[1];
	file->sh->sample_size_2 = 0.1 * hdr.dime.pixdim[2];
	file->sh->sample_size_3 = 0.1 * hdr.dime.pixdim[3];
d332 10
@


2.13
log
@convert either 8- or 16-bit images
@
text
@d2 3
d61 1
a61 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.12 1999/12/14 19:21:26 tom Exp tom $";
d301 1
a301 1
		file->name = stdimg;
d333 1
a334 1
	file->name = ecatimg;
@


2.12
log
@lint cleaning
@
text
@d2 3
d58 1
a58 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.11 1999/09/28 15:06:21 tom Exp tom $";
a63 1
#include <fcntl.h>
d83 3
a85 3
	struct dsr      hdr;				 /* header for ANALYZE */
	FILE           *fd_hdr;				 /* file for ANALYZE hdr */
	int             fd_img;				 /* file for ANALYZE image */
d87 2
a88 2
	char           *stdimg;				 /* image filename for default header values */
	char           *ecatimg;		 	 /* output PET image filename */
d92 2
a93 2
	long            odim1, odim2, odim3; /* dimensions of img */
	long            ndim1, ndim2, ndim3; /* dimensions of image */
d95 1
d100 2
a101 1
	short          *row;			 /* single row of input image */
d108 1
a108 1
		printf ("Usage: analyze2img ANALYZE_img ANALYZE_hdr ecatimg stdimg stdfrm\n");
d130 1
a130 1
	if ((fd_hdr = fopen (ANALYZE_hdr, "r")) == 0) {
d143 5
a147 1
	if (hdr.dime.datatype != 4) {
a148 5
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", ANALYZE_hdr);
d161 1
a161 1
	if ((fd_img = open (ANALYZE_img, O_RDONLY, 0444)) < 0) {
d169 15
a183 4
	if (NULL == (row = (short *) calloc (odim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot malloc memory for row\n");
		return (ERROR);
	}
d185 17
a201 8
	for (i = odim3; i > 0; i--) {
		for (j = odim2; j > 0; j--) {
			read (fd_img, row, odim1 * 2);
			for (k = 1; k <= odim1; k++) {
				if (row[k - 1] == -32768)
					img[i][j][odim1 - (k - 1)] = 0.;
				else
					img[i][j][odim1 - (k - 1)] = (float) row[k - 1];
d205 1
a205 1
	close (fd_img);
d261 2
a262 2
	file->mh->sw_revision = (char *) calloc (32, sizeof(char));
	file->mh->filetime = (char *) calloc (32, sizeof(char));
d297 1
a297 1
		printf ("Using header info from %s frm=%d\n", stdimg, stdfrm);
a318 1

d349 1
a349 1
	printf ("Converted: %s to %s\n", ANALYZE_img, ecatimg);
d351 4
a354 1
	free (row);
@


2.11
log
@fix bug in orientation when a std image is used
the orientation of the output image is always Right-on-Right
@
text
@d2 4
d55 1
a55 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.10 1999/04/07 17:11:58 tom Exp tom $";
d58 2
a65 1
#include <matrixlib.h>
a82 1
	FILE           *fopen ();			 /* the fopen stuff  */
@


2.10
log
@set decay_corr in sh
@
text
@d2 3
d51 1
a51 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.9 1998/10/12 21:32:42 tom Exp tom $";
d296 1
@


2.9
log
@clean up messages
@
text
@d2 3
d48 1
a48 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.8 1998/01/14 17:45:55 tom Exp tom $";
d289 3
a291 1
	file->m7->sh->decay_corr_fctr = 1;
@


2.8
log
@*** empty log message ***
@
text
@d2 3
d45 1
a45 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.7 1998/01/14 17:41:16 tom Exp tom $";
a159 1
	printf ("Converting %s\n", ANALYZE_img);
d314 1
a314 1
	printf ("Successful conversion to %s\n", ecatimg);
@


2.7
log
@correct bug in calloc
@
text
@d2 3
d42 1
a42 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.6 1997/05/20 14:41:49 tom Exp tom $";
a152 3
/*
	if (NULL == (row = (short *) calloc ((short) (odim1 * sizeof (short))))) {
*/
@


2.6
log
@savercs order
@
text
@d2 3
d39 1
a39 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.5 1997/05/20 14:01:45 tom Exp tom $";
d150 1
d152 2
d226 2
a227 2
	file->mh->sw_revision = (char *) calloc (32);
	file->mh->filetime = (char *) calloc (32);
@


2.5
log
@if std header, use odim3 and runstamp from current
@
text
@d2 3
d36 1
a36 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.4 1997/05/14 19:18:01 tom Exp tom $";
d241 1
@


2.4
log
@permit standard image for header info
@
text
@d2 3
d33 1
a33 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.3 1996/10/16 16:20:17 tom Exp tom $";
d92 1
a92 1
		 argv[n + 4], argv[n + 5], argv[n + 6]);
a226 1
	save_rcs (file, rcsid, runstamp);
d275 3
@


2.3
log
@fprintf
@
text
@d2 3
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.2 1996/09/25 20:29:50 tom Exp tom $";
d55 10
a64 9
	struct dsr      hdr;			 /* header for ANALYZE */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fopen ();		 /* the fopen stuff  */
	int             fd_img;			 /* file for ANALYZE image */

	char           *PET_img;		 /* input PET image filename */
	char           *ANALYZE_hdr;	 /* output Analyze header filename  */
	char           *ANALYZE_img;	 /* output Analyze image filename */
	char            runstamp[40];	 /* version, date and userid info */
d67 1
a67 1
	long            xoffset, yoffset; /* offsets for recutting img */
d71 1
a71 1
	float        ***image;			 /* output PET image */
d78 2
a79 2
	if (argc != 11) {
		printf ("Usage: analyze2img ANALYZE_img ANALYZE_hdr ECAT_img\n");
d84 6
a89 3
	PET_img = argv[3];
	sprintf (runstamp, "%s %s %s %s %s %s", argv[4], argv[5], argv[6],
		 argv[8], argv[9], argv[10]);
d190 1
a190 1
	file = make_imgfile (PET_img);
d192 1
a192 1
		fprintf (stderr, "ERROR [analyze2img]: Cannot make mh for %s\n", PET_img);
d196 1
a196 1
		fprintf (stderr, "ERROR [analyze2img]: Cannot make sh for %s\n", PET_img);
a198 1

d237 9
d247 28
d279 2
d282 1
a282 1
		fprintf (stderr, "ERROR [analyze2img]: Cannot open %s\n", PET_img);
a284 10
	if (make_mh7 (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot make mh7 for %s\n", PET_img);
		return (ERROR);
	}
	fill_mh7 (file);
	if (make_sh7 (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot make sh7 for %s\n", PET_img);
		return (ERROR);
	}
	file->m7->sh->decay_corr_fctr = 1;
d286 1
a286 1
		fprintf (stderr, "ERROR [analyze2img]: Cannot write %s\n", PET_img);
d290 1
a290 1
		fprintf (stderr, "ERROR [analyze2img]: Cannot write %s\n", PET_img);
d297 1
a297 1
	printf ("\nSuccessful conversion to %s\n", PET_img);
@


2.2
log
@*** empty log message ***
@
text
@d2 3
d27 1
a27 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.1 1996/09/03 19:50:52 tom Exp tom $";
d104 1
a104 1
		fprintf ("Dimensions = %d\n", hdr.dime.dim[0]);
d109 1
a109 1
		fprintf ("Datatype = %d\n", hdr.dime.datatype);
d114 1
a114 1
		fprintf ("Bits/pixel = %d\n", hdr.dime.bitpix);
@


2.1
log
@new libraries
@
text
@d2 3
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 2.0 1996/08/16 20:09:26 tom Exp tom $";
d58 4
a61 2
	long            dim[3];			 /* dimensions of tensors */
	int             i, j, k;
d63 1
d114 3
a116 3
	dim[0] = hdr.dime.dim[1];
	dim[1] = hdr.dime.dim[2];
	dim[2] = hdr.dime.dim[3];
d120 1
a120 1
 *	Read the image and flip X, Y & Z from Analyze convention
d127 2
a128 2
	if ((image = f3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot malloc image\n");
d131 1
a131 1
	if (NULL == (row = (short *) calloc ((short) (dim[0] * sizeof (short))))) {
d137 4
a140 4
	for (i = dim[2]; i > 0; i--) {
		for (j = dim[1]; j > 0; j--) {
			read (fd_img, row, dim[0] * 2);
			for (k = 1; k <= dim[0]; k++) {
d142 1
a142 1
					image[i][j][dim[0] - (k - 1)] = 0.;
d144 1
a144 1
					image[i][j][dim[0] - (k - 1)] = (float) row[k - 1];
d151 26
d207 1
a207 1
	file->mh->nplane = dim[2];
d219 3
a221 3
	file->sh->dim1 = dim[0];
	file->sh->dim2 = dim[1];
	file->sh->dim3 = dim[2];
d262 2
a263 1
	free_f3tensor (image, 1, dim[2], 1, dim[1], 1, dim[0]);
@


2.0
log
@new libraries
@
text
@d2 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img/RCS/analyze2img.c,v 1.2 1996/06/05 17:32:46 tom Exp tom $";
@


1.2
log
@set points with values -32768 to 0
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/analyze2img/RCS/analyze2img.c,v 1.1 1996/06/04 17:23:17 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d10 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/analyze2img/RCS/analyze2img.c,v 2.2 1996/06/03 13:44:06 tom Exp $";
d128 6
a133 2
			for (k = 1; k <= dim[0]; k++)
				image[i][j][dim[0] - (k - 1)] = (float) row[k - 1];
@
