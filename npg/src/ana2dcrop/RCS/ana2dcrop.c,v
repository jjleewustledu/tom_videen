head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.16.58.45;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.08.11.16.56.57;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: ana2dcrop.c,v $
 * Revision 1.1  1999/08/11  16:56:57  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			ana2dcrop.c
 *	Date:			Aug 1999
 *	Author:			Tom Videen
 *	Description:	Crop an Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana2dcrop/RCS/ana2dcrop.c,v 1.1 1999/08/11 16:56:57 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <nrutil.h>
#include <ANALYZE.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* output file */
	int             x0, y0, xlen, ylen;
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            i, j, k;
	long            num;
	short          *img;
	int           **image;

	if (argc != 9) {
		printf ("Usage: ana2dcrop inhdr inimg outhdr outimg x0 y0 xlen ylen\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	x0 = atoi (argv[5]);
	y0 = atoi (argv[6]);
	xlen = atoi (argv[7]);
	ylen = atoi (argv[8]);

/*	Read image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [ana2dcrop]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [ana2dcrop]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	if (dim3 != 1) {
		fprintf (stderr, "ERROR [ana2dcrop]: Not a 2D image: %s\n", img1);
		return (ERROR);
	}
	num = dim1 * dim2;
	img = (short *) calloc (num, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [ana2dcrop]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [ana2dcrop]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [ana2dcrop]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((image = imatrix (1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [anasumlaterl]: Cannot malloc image\n");
		return (NULL);
	}
	k = 0;
	for (j = 1; j <= dim2; j++) {
		for (i = 1; i <= dim1; i++) {
			image[j][i] = img[k];
			k++;
		}
	}
	free (img);
	num = xlen * ylen;
	img = (short *) calloc (num, sizeof (short));
	if (img == NULL)
		return (ERROR);
	k = 0;
	x0 = dim1 - x0 - xlen + 1;
	y0 = dim2 - y0 - ylen + 1;
	for (j = y0; j < y0 + ylen; j++) {
		for (i = x0; i < x0 + xlen; i++) {
			img[k] = image[j][i];
			k++;
		}
	}

	hdr.dime.dim[1] = xlen;
	hdr.dime.dim[2] = ylen;
	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [ana2dcrop]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [ana2dcrop]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [ana2dcrop]: Unable to open %s\n", img2);
		return (ERROR);
	}
	if ((fwrite (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [ana2dcrop]: Error writing to: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	free (img);
	free_imatrix (image, 1, dim2, 1, dim1);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d7 1
a7 1
 *	Date:			Aug-99
d12 1
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana2dcrop/RCS/ana2dcrop.c,v 1.1 1999/08/11 16:38:05 tom Exp $";
d62 1
a62 1
	fclose (fd_hdr);
d84 1
a84 1
	fclose (fd_img);
d100 2
d122 1
a122 1
	fclose (fd_hdr);
d132 1
a132 1
	fclose (fd_img);
@
