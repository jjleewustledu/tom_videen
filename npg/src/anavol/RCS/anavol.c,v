head	2.1;
access;
symbols;
locks; strict;
comment	@ * @;


2.1
date	2005.06.20.14.21.23;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.18.23.09;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.06.15.31.58;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.12.14.19.43.08;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.01.19.15.10;	author tom;	state Exp;
branches;
next	;


desc
@@


2.1
log
@read floats
@
text
@/*	$Log: anavol.c,v $
 * Revision 2.0  2004/02/13  18:23:09  tom
 * Feb 2004
 *
 * Revision 1.3  2001/02/06  15:31:58  tom
 * *** empty log message ***
 *
 * Revision 1.2  1999/12/14  19:43:08  tom
 * lint cleaning
 *
 * Revision 1.1  1999/02/01  19:15:10  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anavol.c
 *	Date:			Jan 1999
 *	Author:			Tom Videen
 *	Description:	Determine volume of an object defined by all pixels in an
 *					Analyze image which are >= min and <= max.
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anavol/RCS/anavol.c,v 2.0 2004/02/13 18:23:09 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anavol
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	float           unitvol;
	long            count, num, i;
	double          sum;
	int             min, max, itype;
	short          *img;
	float          *fimg;

	if (argc != 5) {
		printf ("Usage: anavol hdr1 img1 min max\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	min = atoi (argv[3]);
	max = atoi (argv[4]);

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anavol]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anavol]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	unitvol = hdr.dime.pixdim[1] * hdr.dime.pixdim[2] * hdr.dime.pixdim[3] * 0.001;
	(void) fclose (fd_hdr);

	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype = 0;
		img = (short *) calloc (num, sizeof (short));
		if (img == NULL) {
			fprintf (stderr, "ERROR [anavol]: calloc img\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anavol]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (img, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anavol]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype = 1;
		fimg = (float *) calloc (num, sizeof (float));
		if (fimg == NULL) {
			fprintf (stderr, "ERROR [anavol]: calloc fimg\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anavol]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (fimg, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anavol]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else {
		fprintf (stderr, "ERROR [anavol]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

	count = 0;
	sum = 0;
	if (itype == 0) {
		for (i = 0; i < num; i++)
			if (img[i] >= min && img[i] <= max) {
				count++;
				sum = sum + img[i];
			}
	} else {
		for (i = 0; i < num; i++)
			if (fimg[i] >= min && fimg[i] <= max) {
				count++;
				sum = sum + fimg[i];
			}
	}

	fprintf (stdout, "Volume = %d voxels or %.3f cc\n", (int) count, (float) count * unitvol);
	fprintf (stdout, "Sum = %.2f\n", sum);

	free (img);
	return (OK);
}
@


2.0
log
@Feb 2004
@
text
@d2 3
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anavol/RCS/anavol.c,v 1.3 2001/02/06 15:31:58 tom Exp tom $";
d44 2
a45 2
	char           *img1, *hdr1;	 /* input file */
	long            dim1, dim2, dim3;/* dimensions of image */
d49 3
a51 2
	short           min, max;
	short          *img;			 /* image */
d59 2
a60 2
	min  = atoi (argv[3]);
	max  = atoi (argv[4]);
a69 15
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anavol]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anavol]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anavol]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
d73 1
a75 1
	num = dim1*dim2*dim3;
d77 38
a114 3
	img = (short *) calloc (num, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [anavol]: Cannot calloc img\n");
a116 9
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anavol]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anavol]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
d120 13
a132 5
	for (i = 0; i < num; i++) 
		if (img[i] >= min && img[i] <= max) {
			count++;
			sum = sum + img[i];
		}
d134 2
a135 2
	fprintf (stdout,"Volume = %d voxels or %.3f cc\n", (int) count, (float) count*unitvol);
	fprintf (stdout,"Sum = %d000\n", (int) (sum * .001) );
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d13 1
a13 1
 *	Date:			Jan-99
d19 1
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anavol/RCS/anavol.c,v 1.2 1999/12/14 19:43:08 tom Exp tom $";
d85 1
a85 1
	fclose (fd_hdr);
d101 1
a101 1
	fclose (fd_img);
d111 1
a111 1
	fprintf (stdout,"Volume = %d voxels or %.3f cc\n", (int) count, count*unitvol);
@


1.2
log
@lint cleaning
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anavol/RCS/anavol.c,v 1.1 1999/02/01 19:15:10 tom Exp tom $";
d41 1
d100 1
d102 1
a102 1
		if (img[i] >= min && img[i] <= max)
d104 2
d108 1
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anavol/RCS/anavol.c,v 1.1 1999/01/29 16:34:14 tom Exp $";
d18 1
a18 1
#include <string.h>
d93 1
a93 1
	close (fd_img);
d100 1
a100 1
	fprintf (stdout,"Volume = %i voxels or %.3f cc\n", count, count*unitvol);
@
