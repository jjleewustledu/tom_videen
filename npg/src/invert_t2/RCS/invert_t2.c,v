head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2012.12.05.18.25.00;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.12.16.36.28;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.07.20.47.40;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.08.19.35.27;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.08.19.30.22;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@fix new values when original is exactly 0
@
text
@/*	$Log */
/*	===============================================================================
 *	Module:			invert_t2.c
 *	Date:			Dec 2004
 *	Author:			Tom Videen
 *	Description:    Invert pixel intensities in T2-weighted MR image
 *	History:
 *		Sept 2012 -- changed scaling to enhance contrast of low intensities (bone)
 *		Dec  2012 -- fix new values when original is exactly 0
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/invert_t2/RCS/invert_t2.c,v 1.4 2012/09/12 16:36:28 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <image.h>
#include <ANALYZE.h>

int             main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fp;			 /* file pointer */
	char           *in, *inhdr;		 /* input file */
	char           *out, *outhdr;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            len, i;
	int             maxval;
	float           fval, fmax;
	float           scaler;
	short          *img;			 /* input image */

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 5) {
		fprintf (stderr, "Usage: invert_t2 inhdr in outhdr out\n");
		return (ERROR);
	}
	inhdr = argv[1];
	in = argv[2];
	outhdr = argv[3];
	out = argv[4];

/*
 * Read input image
 */
	if ((fp = fopen (inhdr, "r")) == 0) {
		fprintf (stderr, "ERROR [invert_t2]: opening: %s\n", inhdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fp)) != 1) {
		fprintf (stderr, "ERROR [invert_t2]: reading: %s\n", inhdr);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [invert_t2]: reading: %s\n", inhdr);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	len = dim1 * dim2 * dim3;
	(void) fclose (fp);

	if ((fp = fopen (in, "r")) == 0) {
		fprintf (stderr, "ERROR [invert_t2]: opening: %s\n", in);
		return (ERROR);
	}
	img = (short *) calloc (len, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [invert_t2]: calloc img\n");
		return (ERROR);
	}
	if ((fread (img, sizeof (short), len, fp)) != len) {
		fprintf (stderr, "ERROR [invert_t2]: reading: %s\n", in);
		return (ERROR);
	}
	(void) fclose (fp);

	maxval = 0;
	for (i = 0; i < len; i++)
		if (img[i] > maxval)
			maxval = img[i];

	fprintf (stdout, "maxval %d\n", maxval);
	fmax = maxval;
	scaler = fmax * fmax * fmax;

	fmax = 0;
	for (i = 0; i < len; i++) {
		if (img[i] >= 0) {
			fval = maxval - img[i];
			fval = fval * fval * fval * fval / scaler;
			if (fval > fmax)
				fmax = fval;
			img[i] = (int) fval;
		} else
			img[i] = 0;
	}
	fprintf (stdout, "max %f\n", fmax);

/* Write output */

	if ((fp = fopen (outhdr, "w")) == 0) {
		fprintf (stderr, "ERROR [invert_t2]: creating ANALYZE header %s\n", outhdr);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fp)) != 1) {
		fprintf (stderr, "ERROR [invert_t2]: writing: %s\n", outhdr);
		return (ERROR);
	}
	(void) fclose (fp);

	if ((fp = fopen (out, "w")) == 0) {
		fprintf (stderr, "ERROR [invert_t2]: creating ANALYZE image %s\n", out);
		return (ERROR);
	}
	if ((fwrite (img, sizeof (short), len, fp)) != len) {
		fprintf (stderr, "ERROR [invert_t2]: writing: %s\n", out);
		return (ERROR);
	}
	(void) fclose (fp);
	free (img);
	return (OK);
}
@


1.4
log
@change scaling
@
text
@d9 1
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/invert_t2/RCS/invert_t2.c,v 1.3 2012/07/07 20:47:40 tom Exp tom $";
d99 1
a99 1
		if (img[i] > 0) {
@


1.3
log
@change scaler
@
text
@d7 2
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/invert_t2/RCS/invert_t2.c,v 1.2 2004/12/08 19:35:27 tom Exp tom $";
a19 2
#include <math.h>
#include <values.h>
d22 1
a22 1
main (argc, argv)
d27 1
a27 1
	FILE           *fp;				 /* file pointer */
d29 2
a30 2
	char           *out, *outhdr;	 /* output file */
	long            dim1, dim2, dim3; /* dimensions of image */
d32 3
a34 2
	int				val, maxval;
	int				scaler;
d92 3
a94 1
	scaler = maxval;
d96 1
a96 5
/* Remove this code 7/7/2012 TOV
	if (10*maxval < MAXSHORT)
		scaler = maxval/10;
*/
	fprintf (stdout, "scaler %d\n", scaler);
d99 5
a103 2
			val = maxval - img[i];
			img[i] = (val*val/scaler);
d107 1
@


1.2
log
@*** empty log message ***
@
text
@d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/invert_t2/RCS/invert_t2.c,v 1.1 2004/12/08 19:30:22 tom Exp tom $";
d92 2
d96 2
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/invert_t2/RCS/invert_t2.c,v 1.3 2004/02/19 22:29:51 tom Exp $";
d92 2
a93 2
	if (10*scaler < MAXSHORT)
		scaler = 10*scaler;
@
