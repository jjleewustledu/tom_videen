head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.16.19.33.16;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.02.15.54.12;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.01.20.13.00;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/*	$Log: iowa2img.c,v $
 * Revision 1.2  2003/07/02  15:54:12  tom
 * correct right/left orientation
 *
 * Revision 1.1  2003/07/01  20:13:00  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			iowa2img.c
 *	Date:			Jul 2003
 *	Author:			Tom Videen
 *	Description:	Transform Iowa Interfile images into ECAT 7.0 format.
 *	Notes:			Input image is assumed to be oriented: right/anterior/inferior
 *	===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/iowa2img/RCS/iowa2img.c,v 1.2 2003/07/02 15:54:12 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>

#define MAXSTR 256

/*	----------------------------
 *	Function:			iowa2img
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	ImageFile      *file;
	Index           indx;
	FILE           *ifh;			 /* Interfile ifh file */
	FILE           *ifi;			 /* Interfile img file */
	char           *ifhdr;			 /* Interfile header filename */
	char           *ifname;			 /* Interfile image filename */
	char           *ecat;			 /* output PET image filename */
	char            str[MAXSTR];
	char            imagename[MAXSTR] = "";
	char           *ptr;
	float           size[3];
	float        ***img;
	short          *srow;			 /* single row of input image */
	int             max;
	int             i, j, k, m;
	int             dim[4];
	int             ndim = 4;
	int             nbytes = 0;

/*	Get command line arguments and initialize filenames	*/

	if (argc != 4) {
		fprintf (stdout, "Usage: iowa2img ecat ifh ifi\n");
		return (ERROR);
	}
	ecat = argv[1];
	ifhdr = argv[2];
	ifname = argv[3];

	dim[0] = 128;
	dim[1] = 128;
	dim[2] = 15;
	dim[3] = 60;

/* Read Interfile header	*/

	if ((ifh = fopen (ifhdr, "r")) == 0) {
		(void) printf ("Unable to open Interfile header %s\n", ifhdr);
		return (ERROR);
	}
	if (fgets (str, sizeof (str), ifh) == NULL) {
		(void) printf ("ERROR [iowa2img]: reading %s\n", ifhdr);
		return (ERROR);
	}
	if (strstr (str, "INTERFILE") == NULL) {
		(void) printf ("ERROR [iowa2img]: %s is not type INTERFILE\n", ifhdr);
		return (ERROR);
	}
	while (fgets (str, sizeof (str), ifh) != NULL) {
		ptr = strstr (str, ":=");
		if (ptr != NULL) {
			ptr += 2;
			if (strstr (str, "name of data file") != NULL) {
				(void) sscanf (ptr, "%s", imagename);
				continue;
			}
			if (strstr (str, "number format") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (strstr (ptr, "integer") == NULL) {
					(void) printf ("ERROR [iowa2img]: image format is not integer\n");
					return (ERROR);
				}
				continue;
			}
			if (strstr (str, "number of bytes per pixel") != NULL) {
				(void) sscanf (ptr, "%d", &nbytes);
				continue;
			}
			if (strstr (str, "matrix size [1]") != NULL) {
				(void) sscanf (ptr, "%d", &dim[0]);
				continue;
			}
			if (strstr (str, "matrix size [2]") != NULL) {
				(void) sscanf (ptr, "%d", &dim[1]);
				continue;
			}
			if (strstr (str, "matrix size [3]") != NULL) {
				(void) sscanf (ptr, "%d", &dim[2]);
				continue;
			}
			if (strstr (str, "matrix size [4]") != NULL) {
				(void) sscanf (ptr, "%d", &dim[3]);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [1]") != NULL) {
				(void) sscanf (ptr, "%f", &size[0]);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [2]") != NULL) {
				(void) sscanf (ptr, "%f", &size[1]);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [3]") != NULL) {
				(void) sscanf (ptr, "%f", &size[2]);
				continue;
			}
		}
	}
	(void) fclose (ifh);

/*	Read image data */

	(void) printf ("open %s\n", ifname);
	if ((ifi = fopen (ifname, "r")) == 0) {
		(void) printf ("ERROR [iowa2img]: Unable to open Interfile image %s\n", ifname);
		return (ERROR);
	}
	(void) printf ("Reading %s  %d %d %d %d\n", ifname, dim[0], dim[1], dim[2], dim[3]);
	if ((img = f3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
		(void) fprintf (stderr, "ERROR [iowa2img]: Cannot malloc img\n");
		return (ERROR);
	}
	if (NULL == (srow = (short *) calloc (dim[0], sizeof (short)))) {
		(void) fprintf (stderr, "ERROR [iowa2img]: Cannot malloc srow\n");
		return (ERROR);
	}
/*	Adjust orientation from right/anterior/inferior to left/anterior/superior	*/

	max = 0;
	for (i = dim[2]; i > 0; i--) {
		for (j = 1; j <= dim[1]; j++) {
			if ((fread (srow, sizeof (short), dim[0], ifi)) != dim[0]) {
				(void) fprintf (stderr, "ERROR [iowa2img]: Reading frame 1 %s\n", ifname);
				return (ERROR);
			}
			for (k = 0; k <= dim[0]; k++) {
				if (srow[k] == -32768)
					img[i][j][dim[0] - k] = 0;
				else
					img[i][j][dim[0] - k] = (float) srow[k];
				if (srow[k] > max)
					max = srow[k];
			}
		}
	}
	(void) printf ("Frame  1 Max = %d\n", max);

/*	Create ECAT file	*/

	file = make_imgfile (ecat);
	if (make_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [iowa2img]: Cannot make mh for %s\n", ecat);
		return (ERROR);
	}
	if (make_sh (file) == ERROR) {
		fprintf (stderr, "ERROR [iowa2img]: Cannot make sh for %s\n", ecat);
		return (ERROR);
	}
/*	Define ECAT file properties	*/

	file->mh->file_format = MATRIX_REV7;
	file->mh->filetype = PetVolume;
	file->mh->scanner_type = 0;
	file->mh->start_time = 0;
	for (i = 0; i < 8; i++)
		file->mh->isotope[i] = ' ';
	for (i = 0; i < 32; i++)
		file->mh->radiopharmaceutical[i] = ' ';
	file->mh->orientation = 0;
	file->mh->bed_elevation = 0;
	file->mh->wobble_speed = 0;
	file->mh->calibration_factor = 1.0;
	file->mh->sw_revision = (char *) calloc (32, sizeof (char));
	file->mh->filetime = (char *) calloc (32, sizeof (char));
	file->mh->nplane = dim[2];
	file->mh->nframe = dim[3];
	file->mh->ngate = 1;
	file->mh->nbed = 1;
	file->mh->init_bed_pos = 0;
	for (i = 0; i < 16; i++)
		file->mh->bed_off[i] = 0;
	file->mh->slicesep = 0.1 * size[2];

	file->sh->number_format = SHORT_DATA;
	file->sh->ndim = ndim;
	file->sh->dim1 = dim[0];
	file->sh->dim2 = dim[1];
	file->sh->dim3 = dim[2];
	file->sh->sample_size_1 = 0.1 * size[0];
	file->sh->sample_size_2 = 0.1 * size[1];
	file->sh->sample_size_3 = 0.1 * size[2];
	file->sh->start_time = 0;
	file->sh->duration = 2000;
	file->sh->decay_corr = 1.0;
	file->sh->scale_factor = 1.0;

	if (make_mh7 (file) == ERROR) {
		fprintf (stderr, "ERROR [iowa2img]: Cannot make mh7 for %s\n", ecat);
		return (ERROR);
	}
	(void) fill_mh7 (file);
	if (make_sh7 (file) == ERROR) {
		fprintf (stderr, "ERROR [iowa2img]: Cannot make sh7 for %s\n", ecat);
		return (ERROR);
	}
	file->m7->sh->x_pixel_size = size[0];
	file->m7->sh->y_pixel_size = size[1];
	file->m7->sh->z_pixel_size = size[2];
	file->m7->mh->plane_separation = size[2];
	file->m7->sh->decay_corr_fctr = 1.0;

/*	Write ECAT image file	*/

	(void) strcpy (file->name, ecat);
	(void) strcpy (file->mode, "w");
	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [iowa2img]: Cannot open %s\n", ecat);
		return (ERROR);
	}
	if (put_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [iowa2img]: Cannot write %s\n", ecat);
		return (ERROR);
	}
	if (writetensor (file, &indx, img) == ERROR) {
		fprintf (stderr, "ERROR [iowa2img]: Cannot write %s\n", ecat);
		return (ERROR);
	}
/*	Convert additional frames	*/

	for (m = 2; m <= dim[3]; m++) {
		max = 0;
		for (i = dim[2]; i > 0; i--) {
			for (j = 1; j <= dim[1]; j++) {
				if ((fread (srow, sizeof (short), dim[0], ifi)) != dim[0]) {
					(void) fprintf (stderr, "ERROR [iowa2img]: Reading frame %d %s\n", m, ifname);
					return (ERROR);
				}
				for (k = 0; k <= dim[0]; k++) {
					if (srow[k] == -32768)
						img[i][j][dim[0] - k] = 0;
					else
						img[i][j][dim[0] - k] = (float) srow[k];
					if (srow[k] > max)
						max = srow[k];
				}
			}
		}
		indx.frm = m;
		file->sh->start_time += file->sh->duration;
		if (writetensor (file, &indx, img) == ERROR) {
			fprintf (stderr, "ERROR [iowa2img]: Cannot write %s\n", ecat);
			return (ERROR);
		}
		(void) printf ("Frame %2d Max = %d\n", m, max);
	}

	fprintf (stdout, "Converted: %s to %s\n", ifhdr, ecat);
	free_imgfile (file);
	free_f3tensor (img, 1, dim[2], 1, dim[1], 1, dim[0]);
	free (srow);
	return (OK);
}
@


1.2
log
@correct right/left orientation
@
text
@d2 3
d16 2
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/iowa2img/RCS/iowa2img.c,v 1.1 2003/07/01 20:13:00 tom Exp tom $";
d230 1
a230 1
	fill_mh7 (file);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d10 1
a10 1
 *	Notes:
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/iowa2img/RCS/iowa2img.c,v 2.15 2003/02/12 14:45:58 tom Exp $";
d152 1
a153 2
/*	Adjust orientation	*/

d161 1
a161 1
			for (k = 0; k < dim[0]; k++) {
d163 1
a163 1
					img[i][j][k + 1] = 0;
d165 1
a165 1
					img[i][j][k + 1] = (float) srow[k];
d269 1
a269 1
				for (k = 0; k < dim[0]; k++) {
d271 1
a271 1
						img[i][j][k + 1] = 0;
d273 1
a273 1
						img[i][j][k + 1] = (float) srow[k];
@
