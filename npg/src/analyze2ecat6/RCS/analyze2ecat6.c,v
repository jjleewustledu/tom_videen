head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.17.40.21;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.27.14.36.08;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.06.19.21.00;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.12.16.17.50.52;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.12.14.19.15.42;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.05.18.15.13.47;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.10.22.18.06.15;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: analyze2ecat6.c,v $
 * Revision 1.6  2002/11/27  14:36:08  tom
 * *** empty log message ***
 *
 * Revision 1.5  2000/09/06  19:21:00  tom
 * strcpy filename
 *
 * Revision 1.4  1999/12/16  17:50:52  tom
 * sync version
 *
 * Revision 1.3  1999/12/14  19:15:42  tom
 * lint cleaning
 *
 * Revision 1.2  1999/05/18  15:13:47  tom
 * set orientation to X:r in study_description
 *
 * Revision 1.1  1998/10/22  18:06:15  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			analyze2ecat6.c
 *	Date:			Oct 1998
 *	Author:			Tom Videen
 *	Description:	Transform Analyze images into ECAT 6 format.
 *	Notes:
 *		reslice16 (AIR package) sets unsampled points to -32768;
 *			This program resets these to 0.
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2ecat6/RCS/analyze2ecat6.c,v 1.6 2002/11/27 14:36:08 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <ANALYZE.h>				 /* dsr */

#define MAXSTR 256

/*	----------------------------
 *	Function:			analyze2ecat6
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	ImageFile      *file;
	Index           indx;
	struct dsr      hdr;			 /* header for ANALYZE */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	int             fd_img;			 /* file for ANALYZE image */
	int             stdfrm;
	char           *stdimg;			 /* image filename for default header values */
	char           *ecatimg;		 /* output PET image filename */
	char           *ANALYZE_hdr;		 /* input Analyze header filename  */
	char           *ANALYZE_img;		 /* input Analyze image filename */
	char            runstamp[40];		 /* version, date and userid info */
	long            odim1, odim2, odim3; /* dimensions of img */
	long            ndim1, ndim2, ndim3; /* dimensions of image */
	long            xoffset, yoffset;	 /* offsets for recutting img */
	int             i, j, k, m, n;

	float        ***img;			 /* intermediate image */
	float        ***image;			 /* output image */
	short          *row;			 /* single row of input image */

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 13) {
		printf ("Usage: analyze2ecat6 ANALYZE_img ANALYZE_hdr ecatimg stdimg stdfrm\n");
		return (ERROR);
	}
	ANALYZE_img = argv[1];
	ANALYZE_hdr = argv[2];
	ecatimg = argv[3];
	stdimg = argv[4];
	stdfrm = atoi (argv[5]);
	n = 6;
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[n], argv[n + 1], argv[n + 2],
		 argv[n + 3], argv[n + 5], argv[n + 6]);

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (ANALYZE_hdr, "r")) == 0) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot open: %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Reading: %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	odim1 = hdr.dime.dim[1];
	odim2 = hdr.dime.dim[2];
	odim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

/*
 *	Read the img and flip X, Y & Z from Analyze convention
 */

	if ((fd_img = open (ANALYZE_img, O_RDONLY, 0444)) < 0) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot open: %s\n", ANALYZE_img);
		return (ERROR);
	}
	if ((img = f3tensor (1, odim3, 1, odim2, 1, odim1)) == NULL) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot malloc img\n");
		return (ERROR);
	}
	if (NULL == (row = (short *) calloc (odim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot malloc memory for row\n");
		return (ERROR);
	}
	for (i = odim3; i > 0; i--) {
		for (j = odim2; j > 0; j--) {
			(void) read (fd_img, row, odim1 * 2);
			for (k = 1; k <= odim1; k++) {
				if (row[k - 1] == -32768)
					img[i][j][odim1 - (k - 1)] = 0.;
				else
					img[i][j][odim1 - (k - 1)] = (float) row[k - 1];
			}
		}
	}
	(void) close (fd_img);

/*
 *	Generate 128x128 slices from img
 */

	ndim1 = 128;
	ndim2 = 128;
	ndim3 = odim3;
	xoffset = (odim1 - ndim1) / 2;
	yoffset = (odim2 - ndim2) / 2;
	if ((image = f3tensor (1, ndim3, 1, ndim2, 1, ndim1)) == NULL) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot malloc image\n");
		return (ERROR);
	}
	for (i = 1; i <= ndim3; i++) {
		for (j = 1; j <= ndim2; j++) {
			m = j + yoffset;
			for (k = 1; k <= ndim1; k++) {
				n = k + xoffset;
				if (m > 0 && m <= odim2 && n > 0 && n <= odim1)
					image[i][j][k] = img[i][m][n];
				else
					image[i][j][k] = 0.;
			}
		}
	}

/*
 *	Create ECAT file
 */

	file = make_imgfile (ecatimg);
	if (make_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot make mh for %s\n", ecatimg);
		return (ERROR);
	}
	if (make_sh (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot make sh for %s\n", ecatimg);
		return (ERROR);
	}
/*
 *	Define ECAT file properties
 */

	file->mh->file_format = MATRIX_REV6;
	file->mh->filetype = PetVolume;
	file->mh->scanner_type = 0;
	file->mh->start_time = 0;
	for (i = 0; i < 8; i++)
		file->mh->isotope[i] = ' ';
	for (i = 0; i < 32; i++)
		file->mh->radiopharmaceutical[i] = ' ';
	file->mh->bed_elevation = 0;
	file->mh->wobble_speed = 0;
	file->mh->calibration_factor = 1;
	file->mh->sw_revision = (char *) calloc (32, sizeof (char));
	file->mh->filetime = (char *) calloc (32, sizeof (char));
	file->mh->nplane = odim3;
	file->mh->nframe = 1;
	file->mh->ngate = 1;
	file->mh->nbed = 1;
	file->mh->init_bed_pos = 0;
	for (i = 0; i < 16; i++)
		file->mh->bed_off[i] = 0;
	file->mh->slicesep = 0.1 * hdr.dime.pixdim[3];

	file->sh->number_format = SHORT_DATA;
	file->sh->ndim = 3;
	file->sh->dim1 = ndim1;
	file->sh->dim2 = ndim2;
	file->sh->dim3 = ndim3;
	file->sh->sample_size_1 = 0.1 * hdr.dime.pixdim[1];
	file->sh->sample_size_2 = 0.1 * hdr.dime.pixdim[2];
	file->sh->sample_size_3 = 0.1 * hdr.dime.pixdim[3];
	file->sh->start_time = 0;
	file->sh->duration = 1;
	(void) save_rcs (file, rcsid, runstamp);

	if (make_mh6 (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot make mh6 for %s\n", ecatimg);
		return (ERROR);
	}
	(void) fill_mh6 (file);
	if (make_sh6 (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot make sh6 for %s\n", ecatimg);
		return (ERROR);
	}
/*
 *	Read std image
 */
	(void) strcpy (file->name, stdimg);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot open %s\n", stdimg);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot get MainHeader from %s\n", stdimg);
		return (ERROR);
	}
	indx.frm = stdfrm;
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: cannot find %s frame %d\n",
			 stdimg, stdfrm);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot read file subheader in %s\n", stdimg);
		return (ERROR);
	}
	close_imgfile (file);
	file->m6->sh->decay_corr_fctr = 1;
	file->mh->nplane = odim3;
	file->mh->orientation = 0;		/* image has been flipped from Analyze orientation */
	file->sh->dim3 = odim3;
	(void) save_rcs (file, rcsid, runstamp);

/*
 *	Write ECAT image file
 */

	(void) strcpy (file->name, ecatimg);
	(void) strcpy (file->mode, "w");
	indx.frm = 1;
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot open %s\n", ecatimg);
		return (ERROR);
	}
	if (put_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot write %s\n", ecatimg);
		return (ERROR);
	}
	if (writetensor (file, &indx, image) == ERROR) {
		fprintf (stderr, "ERROR [analyze2ecat6]: Cannot write %s\n", ecatimg);
		return (ERROR);
	}
/*
 *	Free & Exit
 */

	printf ("Converted: %s to %s\n", ANALYZE_img, ecatimg);
	free (file->mh->sw_revision);
	free (file->mh->filetime);
	free_imgfile (file);
	free (row);
	free_f3tensor (img, 1, odim3, 1, odim2, 1, odim1);
	free_f3tensor (image, 1, ndim3, 1, ndim2, 1, ndim1);
	return (OK);
}
@


1.6
log
@*** empty log message ***
@
text
@d2 3
d22 1
a22 1
 *	Date:			Oct-98
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2ecat6/RCS/analyze2ecat6.c,v 1.5 2000/09/06 19:21:00 tom Exp tom $";
d88 1
a88 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[n], argv[n + 1], argv[n + 2],
d127 1
a127 1
	fclose (fd_hdr);
d147 1
a147 1
			read (fd_img, row, odim1 * 2);
d156 1
a156 1
	close (fd_img);
d233 1
a233 1
	save_rcs (file, rcsid, runstamp);
d239 1
a239 1
	fill_mh6 (file);
d247 1
a247 1
	strcpy (file->name, stdimg);
d271 1
a271 1
	save_rcs (file, rcsid, runstamp);
d277 2
a278 2
	strcpy (file->name, ecatimg);
	strcpy (file->mode, "w");
@


1.5
log
@strcpy filename
@
text
@d2 3
d27 1
a27 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2ecat6/RCS/analyze2ecat6.c,v 1.4 1999/12/16 17:50:52 tom Exp tom $";
d294 2
@


1.4
log
@sync version
@
text
@d2 3
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2ecat6/RCS/analyze2ecat6.c,v 1.3 1999/12/14 19:15:42 tom Exp tom $";
d241 1
a241 1
	file->name = stdimg;
d271 1
a272 1
	file->name = ecatimg;
@


1.3
log
@lint cleaning
@
text
@d2 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2ecat6/RCS/analyze2ecat6.c,v 1.2 1999/05/18 15:13:47 tom Exp tom $";
@


1.2
log
@set orientation to X:r in study_description
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2ecat6/RCS/analyze2ecat6.c,v 1.1 1998/10/22 18:06:15 tom Exp tom $";
d21 2
a28 1
#include <matrixlib.h>
a45 1
	FILE           *fopen ();		 /* the fopen stuff  */
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2ecat6/RCS/analyze2ecat6.c,v 2.9 1998/10/12 21:32:42 tom Exp $";
d254 1
@
