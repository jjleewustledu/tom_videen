head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.02.20.14.45.23;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.19.20.20.13;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.30.19.57.40;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.30.19.06.16;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Feb 2004
@
text
@/*	$Log: spm2if.c,v $
 * Revision 1.3  2001/12/19  20:20:13  tom
 * add type double
 *
 * Revision 1.2  2001/11/30  19:57:40  tom
 * add data description
 *
 * Revision 1.1  2001/11/30  19:06:16  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			spm2if.c
 *	Date:			Nov 2001
 *	Author:			Tom Videen
 *	Description:	Create an Interfile header from an SPM Analyze header
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/spm2if/RCS/spm2if.c,v 1.3 2001/12/19 20:20:13 tom Exp tom $";

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <image.h>
#include <nrutil.h>
#include <ANALYZE.h>				 /* dsr */

main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* header for Analyze */
	FILE           *fd_hdr;			 /* file for Analyze hdr */
	FILE           *fd_ifh;			 /* file for Interfile hdr */
	char           *in_hdr;			 /* input Analyze header filename  */
	char           *out_hdr;		 /* output Interfile header filename  */
	char           *out_img;		 /* output Interfile image filename  */
	char           *ptr;
	char            version[5];
	char            program_date[12];
	int             nbytes;

/*	Get command line arguments and initialize filenames */

	if (argc != 4) {
		fprintf (stdout, "Usage: spm2if in_hdr out_hdr out_img\n");
		return (ERROR);
	}
	in_hdr = argv[1];
	out_hdr = argv[2];
	out_img = argv[3];

	(void) strcpy (version, "    ");
	(void) strcpy (program_date, "           ");
	ptr = strstr (rcsid, "v ");
	if (ptr != NULL) {
		ptr += 2;
		(void) strncpy (version, ptr, 4);
		ptr = strstr (ptr, " ");
		if (ptr != NULL) {
			ptr++;
			(void) strncpy (program_date, ptr, 10);
			ptr = strchr (program_date, '/');
			if (ptr != NULL) 
				*ptr = ':';
			ptr = strchr (program_date, '/');
			if (ptr != NULL)
				*ptr = ':';
		}
	}

	if ((fd_ifh = fopen (out_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [img2if]: Unable to create Interfile Format header %s\n", out_hdr);
		return (ERROR);
	}
/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (in_hdr, "r")) == 0) {
		fprintf (stderr, "ERROR [spm2if]: Cannot open: %s\n", in_hdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [spm2if]: Reading: %s\n", in_hdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [spm2if]: Reading: %s\n", in_hdr);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4 && hdr.dime.datatype != 16 && hdr.dime.datatype != 64) {
		fprintf (stderr, "ERROR [spm2if]: Reading: %s\n", in_hdr);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix == 16)
		nbytes = 2;
	else if (hdr.dime.bitpix == 32)
		nbytes = 4;
	else if (hdr.dime.bitpix == 64)
		nbytes = 8;
	else {
		fprintf (stderr, "ERROR [spm2if]: Reading: %s\n", in_hdr);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

/*
 * Create Interfile Format header file
 */

	fprintf (fd_ifh, "INTERFILE :=\n");
	fprintf (fd_ifh, "version of keys    := 3.3\n");
	fprintf (fd_ifh, "date of keys       := 1992:01:01\n");
	fprintf (fd_ifh, "conversion program := spm2if\n");
	fprintf (fd_ifh, "program version    := %s\n", version);
	fprintf (fd_ifh, "program date       := %s\n", program_date);
	fprintf (fd_ifh, ";\n");
	fprintf (fd_ifh, "GENERAL DATA :=\n");
	fprintf (fd_ifh, "original institution := Washington University\n");
	fprintf (fd_ifh, "data starting block  := 0\n");
	fprintf (fd_ifh, "name of data file    := %s\n", out_img);
	fprintf (fd_ifh, "data description     := %s\n", hdr.hist.descrip);
	fprintf (fd_ifh, ";\n");
	fprintf (fd_ifh, "GENERAL IMAGE DATA :=\n");
	fprintf (fd_ifh, "type of data := tomographic\n");
	fprintf (fd_ifh, "total number of images := %d\n", hdr.dime.dim[3]);
	fprintf (fd_ifh, "imagedata byte order   := bigendian\n");
	fprintf (fd_ifh, ";\n");
	fprintf (fd_ifh, "IMAGE STUDY :=\n");
	if (hdr.dime.dim[4] > 1)
		fprintf (fd_ifh, "number of dimensions := 4\n");
	else
		fprintf (fd_ifh, "number of dimensions := 3\n");
	fprintf (fd_ifh, "number of slices := %d\n", hdr.dime.dim[3]);
	fprintf (fd_ifh, "matrix size [1] := %d\n", hdr.dime.dim[1]);
	fprintf (fd_ifh, "matrix size [2] := %d\n", hdr.dime.dim[2]);
	fprintf (fd_ifh, "matrix size [3] := %d\n", hdr.dime.dim[3]);
	if (hdr.dime.dim[4] > 1)
		fprintf (fd_ifh, "matrix size [4] := %d\n", hdr.dime.dim[4]);
	if (nbytes == 2)
		fprintf (fd_ifh, "number format   := signed integer\n");
	else if (nbytes == 4)
		fprintf (fd_ifh, "number format   := float\n");
	else
		fprintf (fd_ifh, "number format   := double\n");
	fprintf (fd_ifh, "number of bytes per pixel  := %d\n", nbytes);
	fprintf (fd_ifh, "scaling factor (mm/pixel) [1]  := %f\n", hdr.dime.pixdim[1]);
	fprintf (fd_ifh, "scaling factor (mm/pixel) [2]  := %f\n", hdr.dime.pixdim[2]);
	fprintf (fd_ifh, "scaling factor (mm/pixel) [3]  := %f\n", hdr.dime.pixdim[3]);
	fprintf (fd_ifh, "matrix initial element [1] := left\n");
	fprintf (fd_ifh, "matrix initial element [2] := posterior\n");
	fprintf (fd_ifh, "matrix initial element [3] := inferior\n");
	fprintf (fd_ifh, "atlas origin [1] := %.2f\n", ((float) hdr.dime.dim[1] + 1.)/2.);
	fprintf (fd_ifh, "atlas origin [2] := %.2f\n", ((float) hdr.dime.dim[2] + 1.)/2.);
	fprintf (fd_ifh, "atlas origin [3] := %d\n", (hdr.dime.dim[3] + 1)/2);
	fprintf (fd_ifh, "END OF INTERFILE :=\n");
	(void) fclose (fd_ifh);
	return (OK);
}
@


1.3
log
@add type double
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/spm2if/RCS/spm2if.c,v 1.2 2001/11/30 19:57:40 tom Exp tom $";
d53 2
d56 15
a70 11
	ptr += 2;
	strcpy (version, "    ");
	strncpy (version, ptr, 4);
	ptr = strstr (ptr, " ");
	ptr++;
	strcpy (program_date, "           ");
	strncpy (program_date, ptr, 10);
	ptr = strchr (program_date, '/');
	*ptr = ':';
	ptr = strchr (program_date, '/');
	*ptr = ':';
d109 1
a109 1
	fclose (fd_hdr);
d161 1
a161 1
	fclose (fd_ifh);
@


1.2
log
@add data description
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/spm2if/RCS/spm2if.c,v 1.1 2001/11/30 19:06:16 tom Exp tom $";
d84 1
a84 1
	if (hdr.dime.datatype != 4 && hdr.dime.datatype != 16) {
d93 2
d137 2
d140 1
a140 1
		fprintf (fd_ifh, "number format   := float\n");
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/spm2if/RCS/spm2if.c,v 1.3 2001/01/12 19:45:34 tom Exp $";
d112 1
@
