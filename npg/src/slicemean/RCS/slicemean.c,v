head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.19.22.37.52;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.21.19.38.41;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/* $Id: slicemean.c,v 1.1 2002/08/21 19:38:41 tom Exp tom $ */
/* $Log: slicemean.c,v $
 * Revision 1.1  2002/08/21  19:38:41  tom
 * Initial revision
 * */
/*	=========================================================================
 *	Module:			slicemean.c
 *	Author:			Tom Videen
 *	Description:	Compute mean for each slice of a masked image
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: slicemean.c,v 1.1 2002/08/21 19:38:41 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <imgutil.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <myvalues.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	char           *fname;
	char           *mskname;
	float        ***mask;
	float        ***img;
	double          val, sum, sumsqrs, mean, sd;
	long            nvox;
	long            dim[3];
	int             i, j, pln;

	fname = argv[1];
	mskname = argv[2];

	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/* Read Mask */

	file = make_imgfile (mskname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [slicemean]: Cannot open %s\n", mskname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [slicemean]: Cannot get MainHeader from %s\n", mskname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [slicemean]: cannot find %s frame 1, 2 or 3\n", mskname);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [slicemean]: Cannot read file subheader in %s\n", mskname);
		return (ERROR);
	}
	dim[0] = (long) file->sh->dim1;
	dim[1] = (long) file->sh->dim2;
	dim[2] = (long) file->sh->dim3;
	if ((mask = readtensor (file, &indx)) == NULL)
		return (ERROR);
	close_imgfile (file);
	free_imgfile (file);

/* Read OH */

	file = make_imgfile (fname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [slicemean]: Cannot open %s\n", fname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [slicemean]: Cannot get MainHeader from %s\n", fname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [slicemean]: cannot find %s frame 1, 2 or 3\n", fname);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [slicemean]: Cannot read file subheader in %s\n", fname);
		return (ERROR);
	}
	dim[0] = (long) file->sh->dim1;
	dim[1] = (long) file->sh->dim2;
	dim[2] = (long) file->sh->dim3;
	if ((img = readtensor (file, &indx)) == NULL)
		return (ERROR);
	close_imgfile (file);
	free_imgfile (file);

/* Compute mean within mask for OH */

	fprintf (stdout, "Image= %s  Mask= %s (pln mean sd nvoxels)\n", fname, mskname);
	fprintf (stdout, "%d %d\n", (int) dim[2], 4);
	for (pln = 1; pln <= dim[2]; pln++) {
		nvox = 0;
		sum = 0.0;
		mean = 0.0;
		sumsqrs = 0.0;
		sd = 0.0;
		for (j = 1; j <= dim[1]; j++) {
			for (i = 1; i <= dim[0]; i++) {
				if (mask[pln][j][i] > 0.) {
					val = (double) img[pln][j][i];
					sum += val;
					sumsqrs += DSQR (val);
					nvox++;
				}
			}
		}
		if (nvox > 0)
			mean = sum / nvox;
		if (nvox > 1) {
			val = ((sumsqrs - nvox * DSQR (mean)) / (nvox - 1.0));
			if (val > 0.0)
				sd = sqrt (val);
		}
		fprintf (stdout, "%3d %12.4f %12.4f %8d\n", pln, mean, sd, (int) nvox);
	}
	free_f3tensor (mask, 1, dim[2], 1, dim[1], 1, dim[0]);
	free_f3tensor (img, 1, dim[2], 1, dim[1], 1, dim[0]);
	free_imgfile (file);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/* $Id$ */
/* $Log$ */
d12 1
d14 1
a14 1
static char     rcsid[] = "$Id: slicemean.c,v 1.6 2000/12/05 19:26:31 tom Exp $";
d28 1
@
