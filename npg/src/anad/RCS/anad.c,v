head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2004.09.16.15.55.10;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	===============================================================================
 *	Module:			anad.c
 *	Date:			Sep 2004
 *	Author:			Tom Videen
 *	===============================================================================
 */
#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <nrutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	FILE           *fd;
	char           *img1, *img2;
	long            dim, dima;
	long            i, j, k;
	long            ii, jj;
	long            pln, plna;
	short          *img, *imga;
	int           **image;

	if (argc != 3) {
		fprintf (stderr,"Usage: anad in out\n");
		return (ERROR);
	}
	img1 = argv[1];
	img2 = argv[2];

	dim = 512;
	dima = 128;
	pln = dim * dim;
	plna = dima * dima;
	img = (short *) calloc (pln, sizeof (short));
    if (img == NULL) {
        fprintf (stderr, "ERROR [anad]: calloc img\n");
        return (ERROR);
    }
	imga = (short *) calloc (plna, sizeof (short));
    if (imga == NULL) {
        fprintf (stderr, "ERROR [anad]: calloc imga\n");
        return (ERROR);
    }
    if ((image = imatrix (1, dim, 1, dim)) == NULL) {
        fprintf (stderr, "ERROR [anad]: malloc image\n");
        return (NULL);
    }

	if ((fd = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anad]: opening %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), pln, fd)) != pln) {
		fprintf (stderr, "ERROR [anad]: reading %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd);

	k = 0;
	for (j = 1; j <= dim; j++) {
		for (i = 1; i <= dim; i++) {
			image[j][i] = img[k];
			k++;
		}
	}
	k = 0;
	for (j = 1; j <= dima; j++) {
		for (i = 1; i <= dima; i++) {
			ii = (4*i)-2;
			jj = (4 * j) - 2;
			imga[k] = image[jj][ii];
			k++;
		}
	}

	if ((fd = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [anad]: opening %s\n", img2);
		return (ERROR);
	}
	if ((fwrite (imga, sizeof (short), plna, fd)) != plna) {
		fprintf (stderr, "ERROR [anad]: writing %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd);
	free (img);
	free (imga);
	free_imatrix (image, 1, dim, 1, dim);
	return (OK);
}
@
