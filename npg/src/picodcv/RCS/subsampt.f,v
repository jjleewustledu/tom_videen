head	1.4;
access;
symbols;
locks; strict;
comment	@c @;


1.4
date	2004.02.17.15.10.36;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.06.29.19.20.25;	author tom;	state Exp;
branches;
next	;


desc
@joanne version 29-Jun-99
@


1.4
log
@Feb 2004
@
text
@c   Interpolation using frequency domain sampling theory
c
c   Assume output curve is larger than input and x coord
c   matches input points
C
C   Given N equally spaced samples of a function over
C   the interval [a,b], the function can be computed
C   from the samples at any point in the interval
C   (under certain conditions--bandlimited), using
C   the following equation
C
C
C
C             f(x) = sum (m=0 to N-1) sinc (x/delx - m)
C
C             where sinc (z) =  sin (pi*z)/(pi*z)
C
C             sinc(0) =1
C
C
C  Joanne Markham June 1999
C
C
C  Since data doesn't start at zero, shift curve so that the
C  first point is 0 at time = 0 
C
c
        subroutine sampt (nin,delin,din, nout,delout,dout)
        
        integer nin,nout
        real*4 delin,delout, din(*),dout(*) 
	
         real *8 sum
         real *4 pi 
         data pi/3.1415927/
c
c    zero output array
c
	       kk =  (delin+ 1.0e-5) /delout
	       nn  =nout + kk
              do 100 i=1,nn
100           dout(i) =0.
c
c  use sampling theory to interpolate
c
c   move original data and interpolate between points only
c

        

	     do 200 i=1,nin
             k = (i)*kk +1
             dout(k) = din(i)
200      continue
            if (kk.eq.1) return
C
C   Interpolation:   
C
C 

                   tt =delout
                   do 300 i=kk+2,nn
                 
                   ii = mod((i-1), kk)
                   if (ii.eq.0) go to 300 
                   sum   =0.0d0
               
                   do 250 j=1,nin
                   jj = j-1 
                   xx = tt/delin - jj
                  if (xx.eq.0.) then
                    sc =1.0
                    else
                    sc = sin (pi*xx) /(pi*xx)
                    endif
                     
                    sum = sum + sc*din(j)
250      continue
                   dout(i)= sum
300      tt = tt +delout

c   
            return
           end
@


1.1
log
@Initial revision
@
text
@@
