head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2008.10.16.17.12.22;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.05.45;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.09.16.56.36;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update for Matrix6 and Matrix7
@
text
@/* $Log: imgmax.c,v $
 * Revision 1.2  2005/09/12  21:05:45  tom
 * add Global max/min
 *
 * Revision 1.1  2005/09/09  16:56:36  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			imgmax.c
 *	Date:			Oct 2008
 *	Author:			Tom Videen
 *	Description:	Read max and min from headers from ECAT, PETT VI or Interfiles
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: imgmax.c,v 1.2 2005/09/12 21:05:45 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <image.h>
#include <string.h>
#include <libimage.h>
#include <pettable.h>

int             main (argc, argv)
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	int             frm, frm1, pln, pc;
	float           minval, maxval, gmin, gmax;
	float           calfac, subscaler, decay, dur, tval;
	float           maxtmp, mintmp, sfrac;
	char           *fname;
	MainHeader     *mh;
	SubHeader      *sh;

/*
 *	Get command line arguments.
 */

	if (argc != 2) {
		fprintf (stderr, "Usage: imgmax filename\n");
		return (ERROR);
	}
	fname = argv[1];
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	file = make_imgfile (fname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [imgmax]: Could not open %s\n", fname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [imgmax]: Could not get MainHeader from %s\n", fname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [imgmax]: cannot find %s frame 1-%d\n", fname, -indx.frm);
		return (ERROR);
	}
	mh = file->mh;
	frm1 = indx.frm;
	calfac = mh->calibration_factor;

	fprintf (stdout, "------------------------------------------------------------------\n");
	fprintf (stdout, "%s     %s  %d slices   %d frames  (%s)\n", file->name, mh->date_time,
		 mh->nplane, mh->nframe, mh->isotope);
	fprintf (stdout, "Frame        Max          Min\n");
	fprintf (stdout, "-----       -----        -----\n");

	gmin = 0;
	gmax = 0;
	for (frm = frm1; frm <= mh->nframe; frm++) {
		indx.frm = frm;
		if (get_sh (file, &indx) == OK) {
			sh = file->sh;
			if (mh->file_format == MATRIX_REV6) {
				dur = sh->duration;
				if (dur == 0)
					tval = ATNSCALER;
				else
					tval = dur;
				if (sh->scale_factor > 0.)
					subscaler = tval * sh->scale_factor;
				else
					subscaler = tval;
				if (sh->calibration_factor > 0.)
					subscaler *= sh->calibration_factor;
				maxval = calfac * subscaler * sh->max;
				minval = calfac * subscaler * sh->min;
				for (pln = 2; pln <= mh->nplane; pln++) {
					indx.pln = pln;
					if (get_sh (file, &indx) != ERROR) {
						if (sh->scale_factor > 0.)
							subscaler = tval * sh->scale_factor;
						else
							subscaler = tval;
						if (sh->calibration_factor > 0.)
							subscaler *= sh->calibration_factor;
						maxtmp = calfac * subscaler * sh->max;
						mintmp = calfac * subscaler * sh->min;
						if (maxtmp > maxval)
							maxval = maxtmp;
						if (mintmp < minval)
							minval = mintmp;
					}
				}

			} else if (mh->file_format == MATRIX_REV7) {
				decay = file->m7->sh->decay_corr_fctr;
				sfrac = sh->filter_scatter_fraction;
				dur = sh->duration;
				pc = sh->processing_code;
				if (mh->scanner_type == 220)
					tval = 1;
				else if (dur == 0 || strncmp (file->m7->mh->data_units, "1/cm", 4) == 0)	/* transmission */
					tval = ATNSCALER;
				else if (calfac > 1 && (sfrac > 0 || pc & 64 || pc & 128))	/* quantitative	 */
					tval = REV7SCALER * dur / decay;	/* 0.000001	 */
				else		 /* non-quantitative */
					tval = REV7NSCALE * dur / decay;	/* 20.0	 */
				if (sh->scale_factor > 0.)
					subscaler = tval * sh->scale_factor;
				else
					subscaler = tval;
				if (sh->calibration_factor > 0.)
					subscaler *= sh->calibration_factor;
				maxval = calfac * subscaler * sh->max;
				minval = calfac * subscaler * sh->min;
			}
			fprintf (stdout, "%3d    %12.2f %12.2f\n", frm, maxval, minval);
			if (maxval > gmax)
				gmax = maxval;
			if (minval < gmin)
				gmin = minval;
		}
	}
	fprintf (stdout, "Global %12.2f %12.2f\n", gmax, gmin);
	free (file->name);
	free_imgfile (file);
	return (OK);
}
@


1.2
log
@add Global max/min
@
text
@d2 3
d10 1
a10 1
 *	Date:			Sep 2005
d17 1
a17 1
static char     rcsid[] = "$Id: imgmax.c,v 1.1 2005/09/09 16:56:36 tom Exp tom $";
d24 1
d28 1
a28 1
main (argc, argv)
d34 4
a37 3
	int             frm, frm1;
	float           minv, maxv, minval, maxval, gmin, gmax;
	float           calfac, scalefac, decay_cor;
d40 1
d85 55
a139 6
			minv = (float) file->sh->min;
			maxv = (float) file->sh->max;
			scalefac = (float) file->sh->scale_factor;
			decay_cor = (float) file->sh->decay_corr;
			minval = minv * calfac * scalefac / decay_cor;
			maxval = maxv * calfac * scalefac / decay_cor;
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d14 1
a14 1
static char     rcsid[] = "$Id: imgmax.c,v 1.5 2004/02/16 17:27:40 tom Exp $";
d31 1
a31 1
	float           minv, maxv, minval, maxval;
d68 5
a72 5
	fprintf (stdout,"------------------------------------------------------------------\n");
	fprintf (stdout,"%s     %s  %d slices   %d frames  (%s)\n", file->name, mh->date_time,
		mh->nplane, mh->nframe, mh->isotope);
	fprintf (stdout,"Frame        Max          Min\n");
	fprintf (stdout,"-----       -----        -----\n");
d74 2
d85 5
a89 1
			fprintf (stdout,"%3d  %12.2f %12.2f\n", frm, maxval, minval);
d92 1
@
