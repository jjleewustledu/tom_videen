head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.02.13.21.28.22;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.11.21.45.50;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Feb 2004
@
text
@/* $Log: convcoord.c,v $
 * Revision 1.1  2000/07/11  21:45:50  tom
 * Initial revision
 * */
/* ===============================================================================
 *  Module:         convcoord.c
 *  Date:           Jul 2000
 *  Author:         Tom Videen
 *  Description:	Multiply x,y,z by transformation matrix from an AIR file
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/convcoord/RCS/convcoord.c,v 1.1 2000/07/11 21:45:50 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <nrutil.h>
#include <matrixlib.h>
#include <air.h>

int             read_air ();

main (argc, argv)
	int             argc;
	char          **argv;
{
	char           *airfile;
	struct air2		air;
	float         **mat1, **mat2, **mat3;
	float      	   *pt0, *pt1, *pt2, *pt3;
    float           stdpix[3];       /* standard pixel size */
    float           respix[3];       /* reslice pixel size */
    float           minpix;
	float           sxoom, syoom, szoom;
	int				i, j;
	int				debug = 0;

	if (argc != 8) {
		fprintf (stderr, "Usage: convcoord file.air x0 y0 z0 x y z\n");
		return 1;
	}
	mat1 = matrix (1, 4, 1, 4);
	mat2 = matrix (1, 4, 1, 4);
	mat3 = matrix (1, 4, 1, 4);
	pt0 = vector (1, 4);
	pt1 = vector (1, 4);
	pt2 = vector (1, 4);
	pt3 = vector (1, 4);

	airfile = argv[1];
	pt0[1] = atof(argv[2]) - 1;		/* pixel indices for AIR begin with 0 */
	pt0[2] = atof(argv[3]) - 1;
	pt0[3] = atof(argv[4]) - 1;
	pt0[4] = 1;
	pt1[1] = atof(argv[5]);			/* atlas coordinates (mm) */
	pt1[2] = atof(argv[6]);
	pt1[3] = atof(argv[7]);
	pt1[4] = 1;

	if (read_air (airfile, &air, mat1) != 0) {
		fprintf (stderr, "ERROR: cannot read %s\n", airfile);
		return 1;
	}
	if (debug == 1) matrix_print (mat1, 4, 4);

	stdpix[0] = air.std.xsize;
    stdpix[1] = air.std.ysize;
    stdpix[2] = air.std.zsize;
	for (i = 1; i<= 3; i++)
		pt2[i] = pt1[i]/stdpix[i-1] + pt0[i];	/* scale atlas coord with pixel size, then offset */
	pt2[4] = 1;
	if (debug == 1) fprintf (stdout, "stdsize: %f %f %f\n", stdpix[0], stdpix[1], stdpix[2]);

/*	mat2 is a correction described in the .air file documentation */
    respix[0] = air.res.xsize;
    respix[1] = air.res.ysize;
    respix[2] = air.res.zsize;
	minpix = respix[0];
	if (respix[1] < minpix) minpix = respix[1];
	if (respix[2] < minpix) minpix = respix[2];
	sxoom = minpix / respix[0];
	syoom = minpix / respix[1];
	szoom = minpix / respix[2];
	for (i = 1; i<= 4; i++)
		for (j = 1; j<= 4; j++)
			mat2[i][j] = 0;
	mat2[1][1] = sxoom;
	mat2[2][2] = syoom;
	mat2[3][3] = szoom;
	mat2[4][4] = 1;
	matrix_mult (mat2, mat1, mat3, 4, 4, 4);
	if (debug == 1) matrix_print (mat2, 4, 4);
	if (debug == 1) matrix_print (mat3, 4, 4);

/*	Atlas image pixel coordinates are indexed from 1 instead of 0 */
	fprintf (stdout, "Atlas Image Origin (pixel):       %8.2f %8.2f %8.2f\n", pt0[1]+1, pt0[2]+1, pt0[3]+1);

/*	These atlas coordinates are in mm and ordered as in Talairach */
	fprintf (stdout, "Atlas Image Coordinate (mm):      %8.2f %8.2f %8.2f\n", pt1[1], pt1[2], pt1[3]);

/*	The pixel to convert is in ANALYZE order; hence the inversion along all 3 axes */
	fprintf (stdout, "Atlas Image Coordinate (pixel):   %8.2f %8.2f %8.2f\n",
			(float) air.std.xdim-pt2[1], (float) air.std.ydim-pt2[2], (float) air.std.zdim-pt2[3]);

	vector_mult (mat3, pt2, pt3, 4, 4, 1);

	pt3[1] = air.res.xdim - pt3[1] - 1;
	pt3[2] = air.res.ydim - pt3[2] - 1;
	pt3[3] = air.res.zdim - pt3[3] - 1;

/*	The final coordinates are in image pixels */
	fprintf (stdout, "Reslice Image Coordinate (pixel): %8.2f %8.2f %8.2f\n", pt3[1], pt3[2], pt3[3]);

	free_matrix (mat1, 1, 4, 1, 4);
	free_matrix (mat2, 1, 4, 1, 4);
	free_matrix (mat3, 1, 4, 1, 4);
	free_vector (pt0, 1, 4);
	free_vector (pt1, 1, 4);
	free_vector (pt2, 1, 4);
	free_vector (pt3, 1, 4);
	return 0;
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d12 1
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/convcoord/RCS/convcoord.c,v 1.4 1996/04/30 13:53:52 tom Exp $";
d105 1
a105 1
			air.std.xdim-pt2[1], air.std.ydim-pt2[2], air.std.zdim-pt2[3]);
@
