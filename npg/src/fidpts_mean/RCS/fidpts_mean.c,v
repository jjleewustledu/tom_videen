head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2009.03.11.19.21.10;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.29.15.04.12;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.03.20.19.17;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.02.22.02.57;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@added IPF point
@
text
@/*	$Log: fidpts_mean.c,v $
 * Revision 1.3  2006/09/29  15:04:12  tom
 * change output format
 *
 * Revision 1.2  2006/02/03  20:19:17  tom
 * use all 13 fiducials
 *
 * Revision 1.1  2006/02/02  22:02:57  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:		fidpts_mean.c
 *	Date:		Feb 2006
 *	Author:		Tom Videen
 *	Intent:		Read fiducial points from 2 files, average, write to AIR ucf file
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidpts_mean/RCS/fidpts_mean.c,v 1.3 2006/09/29 15:04:12 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <nrutil.h>
#include <myvalues.h>

/*	----------------------------
 *	Function:			fidpts_mean
 *	----------------------------
 */
int main (argc, argv)
	int             argc;
	char           *argv[];
{
	float           round_to_halfint ();
	FILE           *fd_pts;
	char           *pts1;
	char           *pts2;
	char            line[MAXLINE];
	char            line1[MAXLINE];
	char            name[4];
	float           fx, fy, fz;
	int             npt, n;

	struct point {
		char            name[4];
		int             x;
		int             y;
		int             z;
	};
	struct point    pt1[14];

	if (argc != 3) {
		fprintf (stdout, "Usage: fidpts_mean file1.pts file2.pts\n");
		return (ERROR);
	}
	pts1 = argv[1];
	pts2 = argv[2];

/*
 *	Read fiducial points
 *	Analyze array is reversed; therefore, fiducials are reverse when read
 */

	if ((fd_pts = fopen (pts1, "r")) == 0) {
		fprintf (stderr, "ERROR [fidpts_mean]: opening %s\n", pts1);
		return (ERROR);
	}
	if (fgets (line1, MAXLINE, fd_pts) == NULL) {
		fprintf (stderr, "ERROR [fidpts_mean]: Reading %s\n", pts1);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd_pts) == NULL) {
		fprintf (stderr, "ERROR [fidpts_mean]: Reading %s\n", pts1);
		return (ERROR);
	}
	npt = 0;
	while (fgets (line, MAXLINE, fd_pts) != NULL) {
		if (sscanf (line, "%3s %f %f %f", name, &fx, &fy, &fz) == 4) {
			(void) strcpy (pt1[npt].name, name);
			pt1[npt].x = (2 * fx);
			pt1[npt].y = (2 * fy);
			pt1[npt].z = (2 * fz);
			(npt)++;
		}
	}
	(void) fclose (fd_pts);

	if ((fd_pts = fopen (pts2, "r")) == 0) {
		fprintf (stderr, "ERROR [fidpts_mean]: opening %s\n", pts2);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd_pts) == NULL) {
		fprintf (stderr, "ERROR [fidpts_mean]: Reading %s\n", pts2);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd_pts) == NULL) {
		fprintf (stderr, "ERROR [fidpts_mean]: Reading %s\n", pts2);
		return (ERROR);
	}
	npt = 0;
	while (fgets (line, MAXLINE, fd_pts) != NULL) {
		if (sscanf (line, "%3s %f %f %f", name, &fx, &fy, &fz) == 4) {
			pt1[npt].x = pt1[npt].x + (2 * fx);
			pt1[npt].y = pt1[npt].y + (2 * fy);
			pt1[npt].z = pt1[npt].z + (2 * fz);
			(npt)++;
		}
	}
	(void) fclose (fd_pts);

/*	Adjust for halfmm_crop image
 *  input is halfmm   = initial atlas interpolated to 0.5 mm pixels (512x512x256)
 *  halfmm_crop = cropped atlas interpolated to 0.5 mm pixels (300x128x64)
 */

	printf ("%s", line1);
	printf ("%s %s\n", pts1, pts2);
	for (n = 0; n < npt; n++) {
		fx = round_to_halfint (0.25 * pt1[n].x);
		fy = round_to_halfint (0.25 * pt1[n].y);
		fz = round_to_halfint (0.25 * pt1[n].z);
		printf ("%3s %7.1f %7.1f %7.1f\n", pt1[n].name, fx, fy, fz);
	}
	return (OK);
}
@


1.3
log
@change output format
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidpts_mean/RCS/fidpts_mean.c,v 1.2 2006/02/03 20:19:17 tom Exp tom $";
d34 1
a34 1
main (argc, argv)
d54 1
a54 1
	struct point    pt1[13];
@


1.2
log
@use all 13 fiducials
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidpts_mean/RCS/fidpts_mean.c,v 1.1 2006/02/02 22:02:57 tom Exp tom $";
d123 1
a123 1
		printf ("%3s %5.1f %5.1f %5.1f\n", pt1[n].name, fx, fy, fz);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidpts_mean/RCS/fidpts_mean.c,v 1.1 2006/02/01 19:31:26 tom Exp $";
d37 1
d66 1
a66 1
	if (fgets (line, MAXLINE, fd_pts) == NULL) {
d114 3
a116 1
	for (n = 0; n < npt - 2; n++) {
@
