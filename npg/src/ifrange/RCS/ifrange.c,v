head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.02.16.16.26.03;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.25.21.11.19;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Feb 2004
@
text
@/*	$Log: ifrange.c,v $
 * Revision 1.1  2002/11/25  21:11:19  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			ifrange.c
 *	Date:			Jul 2002
 *	Author:			Tom Videen
 *	Description:	Set all pixels > max to max value in Interfile image
 *					optionally, set all pixels < min to min
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/ifrange/RCS/ifrange.c,v 1.1 2002/11/25 21:11:19 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <myvalues.h>

#define MAXSTR 256

/*	----------------------------
 *	Function:			ifrange
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	FILE           *ifh;			 /* Interfile hdr */
	FILE           *ifi;			 /* Interfile image data */
	char           *ifhname;		 /* hdr filename */
    char            str[MAXSTR];
    char            ifiname[MAXSTR] = "";	/* data filename */
    char           *ptr;
	long            len, i;
	short          *simg;			 /* image */
	float          *fimg;			 /* image */
    int             dim[3];			/* image dimensions */
	int             setmin;
	int             top;			 /* limits of range */
	int             bot = 0;		 /* limits of range */
    int             ntype = 0;
    int             ndim = 0;

	if (argc < 3 || argc > 4) {
		fprintf (stderr, "Usage: ifrange ifh top [bot]\n");
		return (ERROR);
	}
	ifhname = argv[1];
	top = atoi (argv[2]);
	if (argc == 4) {
		setmin = 1;
		bot = atoi (argv[3]);
	} else
		setmin = 0;
	for (i = 0; i < 3; i++)
		dim[i] = 1;

/*
 * Read Interfile header
 */

	if ((ifh = fopen (ifhname, "r")) == 0) {
		(void) printf ("Unable to open Interfile header %s\n", ifhname);
		return (ERROR);
	}
	if (fgets (str, sizeof (str), ifh) == NULL) {
		(void) printf ("ERROR [ifrange]: reading %s\n", ifhname);
		return (ERROR);
	}
	if (strstr (str, "INTERFILE") == NULL) {
		(void) printf ("ERROR [ifrange]: %s is not an Interfile header\n", ifhname);
		return (ERROR);
	}
	while (fgets (str, sizeof (str), ifh) != NULL) {
		ptr = strstr (str, ":=");
		if (ptr != NULL) {
			ptr += 2;
			if (strstr (str, "name of data file") != NULL) {
				(void) sscanf (ptr, "%s", ifiname);
				continue;
			}
			if (strstr (str, "number format") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (strstr (ptr, "signed integer") != NULL)
					ntype = 4;
				else if (strstr (ptr, "float") != NULL)
					ntype = 16;
				else {
					(void) printf ("ERROR [ifrange]: image is not signed integer or float\n");
					return (ERROR);
				}
				continue;
			}
			if (strstr (str, "number of dimensions") != NULL) {
				(void) sscanf (ptr, "%d", &ndim);
				if (ndim != 3) {
					(void) printf ("ERROR [ifrange]: image must have 3-dimensions\n");
					return (ERROR);
				}
				continue;
			}
			if (strstr (str, "matrix size [1]") != NULL) {
				(void) sscanf (ptr, "%d", &dim[0]);
				continue;
			}
			if (strstr (str, "matrix size [2]") != NULL) {
				(void) sscanf (ptr, "%d", &dim[1]);
				continue;
			}
			if (strstr (str, "matrix size [3]") != NULL) {
				(void) sscanf (ptr, "%d", &dim[2]);
				continue;
			}
		}
	}
	(void) fclose (ifh);

/*
 *	Read image data and compute min and max
 */

	if ((ifi = fopen (ifiname, "r")) == 0) {
		(void) printf ("ERROR [ifrange]: Unable to open Interfile image %s\n", ifiname);
		return (ERROR);
	}
	len = dim[0]*dim[1]*dim[2];
	if (ntype == 4) {
		if (NULL == (simg = (short *) calloc (len, sizeof (short)))) {
			(void) fprintf (stderr, "ERROR [ifrange]: Cannot calloc img\n");
			return (ERROR);
		}
		if ((fread (simg, sizeof (short), len, ifi)) != len) {
			(void) fprintf (stderr, "ERROR [ifrange]: Reading: %s\n", ifiname);
			return (ERROR);
		}
		for (i = 0; i < len; i++)
			if (simg[i] > top)
				simg[i] = top;
		if (setmin > 0)
			for (i = 0; i < len; i++)
				if (simg[i] < bot)
					simg[i] = bot;
	} else {
		if (NULL == (fimg = (float *) calloc (len, sizeof (float)))) {
			(void) fprintf (stderr, "ERROR [ifrange]: Cannot calloc img\n");
			return (ERROR);
		}
		if ((fread (fimg, sizeof (float), len, ifi)) != len) {
			(void) fprintf (stderr, "ERROR [ifrange]: Reading: %s\n", ifiname);
			return (ERROR);
		}
		for (i = 0; i < len; i++)
			if (fimg[i] > top)
				fimg[i] = top;
		if (setmin > 0)
			for (i = 0; i < len; i++)
				if (fimg[i] < bot)
					fimg[i] = bot;
	}
	(void) fclose (ifi);

	if ((ifi = fopen (ifiname, "w")) == 0) {
		fprintf (stderr, "ERROR [ifrange]: Opening %s\n", ifiname);
		return (ERROR);
	}
	if (ntype == 4) {
		if ((fwrite (simg, sizeof (short), len, ifi)) != len) {
			fprintf (stderr, "ERROR [ifrange]: Writing %s\n", ifiname);
			return (ERROR);
		}
	} else {
		if ((fwrite (fimg, sizeof (float), len, ifi)) != len) {
			fprintf (stderr, "ERROR [ifrange]: Writing %s\n", ifiname);
			return (ERROR);
		}
	}
	(void) fclose (ifi);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ifrange/RCS/ifrange.c,v 1.1 2000/05/05 16:04:43 tom Exp $";
d184 1
a184 1
	fclose (ifi);
@
