head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2004.09.15.16.24.09;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* ===============================================================================
 *	Module:			donut.c
 *	Date:			Sep 2004
 *	Author:			Tom Videen
 *	Description:	donut image
 * ===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/donut/RCS/donut.c,v 1.4 2004/02/20 14:25:50 tom Exp $";

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <math.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	float        ***img;
	float           x, y;
	float           r1, r2;
	double          size1, size2;
	double          a, b;
	char           *fname1;
	char           *fname2;
	int             frm;
	long            nx, ny, nz;
	long            i, j, k;

/*	Get command line arguments */

	fname1 = argv[1];
	fname2 = argv[2];
	r1 = atof (argv[3]);
	r2 = atof (argv[4]);

	x = 64;
	y = 64;
	frm = 1;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file = make_imgfile (fname1);
	if (file == NULL) {
		fprintf (stderr, "ERROR [donut]: making file\n");
		return (ERROR);
	}
	if (get_imgh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [donut]: opening %s\n", fname1);
		return (ERROR);
	}
	mh = file->mh;
	sh = file->sh;

	nx = (long) sh->dim1;
	ny = (long) sh->dim2;
	nz = (long) sh->dim3;
	size1 = sh->sample_size_1;
	size2 = sh->sample_size_2;

/*	Read image */

	fprintf (stdout, "Reading %s, frame %d\n", fname1, indx.frm);
	if ((img = readtensor (file, &indx)) == NULL)
		return (ERROR);

	for (i = 1; i <= nz; i++) {
		for (j = 1; j <= ny; j++) {
			for (k = 1; k <= nx; k++) {
				img[i][j][k] = 0;
				a = pow (((double) k - x) * size1, 2.0);
				b = pow (((double) j - y) * size2, 2.0);
				if ((a + b <= r2) && (a + b > r1))
					img[i][j][k] = 1000;

			}
		}
	}

/*	Write image */

	indx.frm = 1;
	fprintf (stdout, "Writing %s\n", fname2);
	close_imgfile (file);
	(void) strcpy (file->name, fname2);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [donut]: Could not open %s\n", fname2);
		return (ERROR);
	}
	mh->nframe = indx.frm;
	if (put_mh (file) == ERROR)
		return (ERROR);
	if (writetensor (file, &indx, img) == ERROR)
		return (ERROR);
	free_f3tensor (img, 1, nz, 1, ny, 1, nx);
	free_imgfile (file);
	return (OK);
}
@
