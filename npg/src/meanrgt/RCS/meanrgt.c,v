head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.16.21.43.51;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.16.19.53;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.17.20.30.39;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.17.20.14.32;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/* $Log: meanrgt.c,v $
 * Revision 1.3  2002/11/27  16:19:53  tom
 * *** empty log message ***
 *
 * Revision 1.2  2001/10/17  20:30:39  tom
 * *** empty log message ***
 *
 * Revision 1.1  2001/10/17  20:14:32  tom
 * Initial revision
 * */
/* ===============================================================================
 *  Module:         meanrgt.c
 *  Date:           Oct 2001
 *  Author:         Tom Videen
 *  Description:    Combine spideram rgt values into prm files
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/meanrgt/RCS/meanrgt.c,v 1.3 2002/11/27 16:19:53 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <myvalues.h>

#define MAXLEN	256
#define MAXPLN	31

main (argc, argv)
	int             argc;
	char           *argv[];
{
	FILE           *fp, *fdat;
	char           *id;
	char           *tracer;
	char           *num;
	char           *reg[MAXPLN];
	int             pln[MAXPLN];
	char            fname[MAXLEN];
	char            line[MAXLEN];
	char            item[MAXLEN];
	char            rname[8][11];
	float           f0=0.;
	float           f1=0.;
	float           f2=0.;
	float           f3=0.;
	float           f4=0.;
	float           f5=0.;
	float           f6=0.;
	float           f7=0.;
	float           time[40];
	float           act[8][40];
	float           rput[40], lput[40];
	int             len;
	int             i, j, n, p, r, t;
	int             rnum[8];
	int             npln;
	int             nfrm = 0;
	int             nrow = 0;
	int             ncol = 0;
	int             m = 0;

/*	Standard ROI names used by Joel	*/

	(void) strcpy (rname[0], "caud_l");
	(void) strcpy (rname[1], "caud_r");
	(void) strcpy (rname[2], "putant_l");
	(void) strcpy (rname[3], "putant_r");
	(void) strcpy (rname[4], "putpost_l");
	(void) strcpy (rname[5], "putpost_r");
	(void) strcpy (rname[6], "occip");
	(void) strcpy (rname[7], "cblm");

	for (i = 0; i < 40; i++) {
		for (j = 0; j < 8; j++)
			act[j][i] = 0;
		rput[i] = 0;
		lput[i] = 0;
	}

	id = argv[1];
	tracer = argv[2];
	len = strlen (tracer);
	num = (char *) calloc (10, sizeof (char));
	if (num == NULL) return (ERROR);

/*	Get number of planes from REG file names */

	p = 0;
	for (i = 3; i < argc; i++) {
		reg[p] = argv[i];
		num = strstr (reg[p], tracer) + len;
		pln[p] = atoi (num);
		p++;
	}
	npln = p;
	if (npln <= 0) {
		fprintf (stderr, "ERROR [meanrgt]: No .reg files found\n");
		return (ERROR);
	}
	printf ("Number of image planes = %d\n", npln);

/*	Read the TIME file (tim.dat) */

	(void) strcpy (fname, "");
	(void) strcpy (fname, id);
	(void) strcat (fname, tracer);
	(void) strcat (fname, "tim.dat");
	fp = fopen (fname, "r");
	if (fp == NULL) {
		fprintf (stderr, "ERROR [meanrgt]: Cannot open time file %s\n", fname);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fp) == NULL) {
		fprintf (stderr, "ERROR [meanrgt]: reg file %s is empty\n", fname);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fp) == NULL) {
		fprintf (stderr, "ERROR [meanrgt]: reading time file %s\n", fname);
		return (ERROR);
	}
	if (sscanf (line, "%d", &nfrm) != 1) {
		fprintf (stderr, "ERROR [meanrgt]: reading time file %s\n", fname);
		fprintf (stderr, "%s\n", line);
		return (ERROR);
	}
	printf ("Number of time frames = %d\n", nfrm);
	if (nfrm > 40) {
		fprintf (stderr, "ERROR [meanrgt]: too many frames %d\n", nfrm);
		return (ERROR);
	}
	for (n = 0; n < nfrm; n++) {
		if (fgets (line, MAXLINE, fp) == NULL) {
			fprintf (stderr, "ERROR [meanrgt]: reading time file %s line %d\n",
				 fname, n + 3);
			return (ERROR);
		}
		if (sscanf (line, "%s", item) == 1)
			time[n] = atof (item);
	}
	(void) fclose (fp);

/*	for (n = 0; n < nfrm; n++)
		fprintf (stdout, "%8.2f\n", time[n]); */

/*	Read the REG and RGT files */

	for (p = 0; p < npln; p++) {
		if (sprintf (num, "%d", pln[p]) == 0) {
			fprintf (stderr, "ERROR [meanrgt]: plane %d\n", pln[p]);
			return (ERROR);
		}
		/* Read the REG file to associate RGT columns with specific ROI names */

		(void) strcpy (fname, "");
		(void) strcpy (fname, id);
		(void) strcat (fname, tracer);
		(void) strcat (fname, num);
		(void) strcat (fname, ".reg");
		fp = fopen (fname, "r");
		if (fp == NULL) {
			fprintf (stderr, "ERROR [meanrgt]: Cannot open reg file %s\n", fname);
			return (ERROR);
		}
		for (n = 0; i < 4; n++) {
			if (fgets (line, MAXLINE, fp) == NULL) {
				fprintf (stderr, "ERROR [meanrgt]: REG file %s is too short\n", fname);
				return (ERROR);
			}
		}
		for (i = 0; i < 8; i++)
			rnum[i] = -1;
		n = 1;
		while (n) {
			if (fgets (line, MAXLINE, fp) == NULL) {
				fprintf (stderr, "ERROR [meanrgt]: reading reg file %s\n", fname);
				return (ERROR);
			}
			if (strstr (line, "END LIST") != NULL)
				n = 0;
			else {
				for (i = 0; i < 8; i++) {
					if (strstr (line, rname[i]) != NULL)
						rnum[i] = i;
				}
			}
		}
		(void) fclose (fp);

		/* Read data from RGT files */

		for (r = 0; r < 2; r++) {
			(void) strcpy (fname, "");
			(void) strcpy (fname, id);
			(void) strcat (fname, tracer);
			(void) strcat (fname, num);
			if (r == 0)
				(void) strcat (fname, "a.rgt");
			else
				(void) strcat (fname, "b.rgt");
			fp = fopen (fname, "r");
			if (fp == NULL) {
				fprintf (stderr, "ERROR [meanrgt]: Cannot open rgt file %s\n", fname);
				return (ERROR);
			}
			if (fgets (line, MAXLINE, fp) == NULL) {
				fprintf (stderr, "ERROR [meanrgt]: RGT file %s is empty\n", fname);
				return (ERROR);
			}
			if (sscanf (line, "%d", &m) != 1) {
				fprintf (stderr, "ERROR [meanrgt]: reading rgt file %s\n", fname);
				fprintf (stderr, "%s\n", line);
				return (ERROR);
			}
			if (m != 11) {
				fprintf (stderr, "ERROR [meanrgt]: rgt file %s does not begin with code 11\n", fname);
				return (ERROR);
			}
			if (fgets (line, MAXLINE, fp) == NULL) {
				fprintf (stderr, "ERROR [meanrgt]: RGT file %s is too short\n", fname);
				return (ERROR);
			}
			if (sscanf (line, "%d, %d", &nrow, &ncol) != 2) {
				fprintf (stderr, "ERROR [meanrgt]: reading rgt file %s rows, columns\n", fname);
				fprintf (stderr, "%s\n", line);
				return (ERROR);
			}
			printf ("  reading  %s  %d frames   %d rois\n", fname, nrow, ncol);
			for (i = 0; i < nrow; i++) {
				if (fgets (line, MAXLINE, fp) == NULL) {
					fprintf (stderr, "ERROR [meanrgt]: reading rgt file %s line %d\n", fname, i + 3);
					return (ERROR);
				}
				j = sscanf (line, "%f %f %f %f %f %f %f %f", &f0, &f1, &f2, &f3, &f4, &f5, &f6, &f7);
				if (j == 0) {
					fprintf (stderr, "ERROR [meanrgt]: reading rgt file %s line %d\n", fname, i + 3);
					fprintf (stderr, "%s\n", line);
					return (ERROR);
				}
				if (r == 0)
					t = i;
				else
					t = 20 + i;
				if (rnum[0] >= 0)
					act[rnum[0]][t] += f0;
				if (rnum[1] >= 0)
					act[rnum[1]][t] += f1;
				if (rnum[2] >= 0)
					act[rnum[2]][t] += f2;
				if (rnum[3] >= 0)
					act[rnum[3]][t] += f3;
				if (rnum[4] >= 0)
					act[rnum[4]][t] += f4;
				if (rnum[5] >= 0)
					act[rnum[5]][t] += f5;
				if (rnum[6] >= 0)
					act[rnum[6]][t] += f6;
				if (rnum[7] >= 0)
					act[rnum[7]][t] += f7;
			}
			(void) fclose (fp);
		}
	}

	for (i = 0; i < nfrm; i++) {
		for (j = 0; j < 6; j++)
			act[j][i] /= (float) npln;
		lput[i] = (act[2][i] + act[4][i]) / 2.;
		rput[i] = (act[3][i] + act[5][i]) / 2.;
	}

/*	Create striat.dat output file */

	(void) strcpy (fname, "");
	(void) strcpy (fname, id);
	(void) strcat (fname, "striatal.dat");
	fdat = fopen (fname, "w");
	if (fdat == NULL) {
		fprintf (stderr, "ERROR [meanrgt]: Cannot open output file %s\n", fname);
		return (ERROR);
	}
	fprintf (fdat, "   24    94\n");
	(void) strcpy (fname, "");
	(void) strcpy (fname, id);
	(void) strcat (fname, tracer);
	(void) strcat (fname, "tim.dat");
	fprintf (fdat, "%s\n", fname);

/*	Create occip.prm output file */

	(void) strcpy (fname, "");
	(void) strcpy (fname, id);
	(void) strcat (fname, "occip.prm");
	fp = fopen (fname, "w");
	if (fp == NULL) {
		fprintf (stderr, "ERROR [meanrgt]: Cannot open output file %s\n", fname);
		return (ERROR);
	}
	fprintf (fp, "%s time,occip\n", fname);
	fprintf (fp, "%d  %d\n", nfrm, 2);
	for (i = 0; i < nfrm; i++)
		fprintf (fp, "%11.2f%11.2f\n", time[i], act[6][i]);
	(void) fclose (fp);
	fprintf (fdat, "%s\n", fname);

/*	Create cblm.prm output file */

	(void) strcpy (fname, "");
	(void) strcpy (fname, id);
	(void) strcat (fname, "cblm.prm");
	fp = fopen (fname, "w");
	if (fp == NULL) {
		fprintf (stderr, "ERROR [meanrgt]: Cannot open output file %s\n", fname);
		return (ERROR);
	}
	fprintf (fp, "%s time,cblm\n", fname);
	fprintf (fp, "%d  %d\n", nfrm, 2);
	for (i = 0; i < nfrm; i++)
		fprintf (fp, "%11.2f%11.2f\n", time[i], act[7][i]);
	(void) fclose (fp);

/*	Create striatal.prm output file */

	(void) strcpy (fname, "");
	(void) strcpy (fname, id);
	(void) strcat (fname, "striatal.prm");
	fp = fopen (fname, "w");
	if (fp == NULL) {
		fprintf (stderr, "ERROR [meanrgt]: Cannot open output file %s\n", fname);
		return (ERROR);
	}
	fprintf (fp, "%s time,cal,car,apul,apur,ppul,ppur,pul,pur\n", fname);
	fprintf (fp, "%d  %d\n", nfrm, 9);
	for (i = 0; i < nfrm; i++)
		fprintf (fp, "%11.2f %10.2f %10.2f %10.2f %10.2f %10.2f %10.2f %10.2f %10.2f\n",
			 time[i], act[0][i], act[1][i], act[2][i], act[3][i],
			 act[4][i], act[5][i], lput[i], rput[i]);
	(void) fclose (fp);
	fprintf (fdat, "%s\n", fname);
	(void) fclose (fdat);

	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d18 1
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/meanrgt/RCS/meanrgt.c,v 1.2 2001/10/17 20:30:39 tom Exp tom $";
d67 8
a74 8
	strcpy (rname[0], "caud_l");
	strcpy (rname[1], "caud_r");
	strcpy (rname[2], "putant_l");
	strcpy (rname[3], "putant_r");
	strcpy (rname[4], "putpost_l");
	strcpy (rname[5], "putpost_r");
	strcpy (rname[6], "occip");
	strcpy (rname[7], "cblm");
d87 1
d107 4
a110 4
	strcpy (fname, "");
	strcpy (fname, id);
	strcat (fname, tracer);
	strcat (fname, "tim.dat");
d157 5
a161 5
		strcpy (fname, "");
		strcpy (fname, id);
		strcat (fname, tracer);
		strcat (fname, num);
		strcat (fname, ".reg");
d195 4
a198 4
			strcpy (fname, "");
			strcpy (fname, id);
			strcat (fname, tracer);
			strcat (fname, num);
d200 1
a200 1
				strcat (fname, "a.rgt");
d202 1
a202 1
				strcat (fname, "b.rgt");
d276 3
a278 3
	strcpy (fname, "");
	strcpy (fname, id);
	strcat (fname, "striatal.dat");
d285 4
a288 4
	strcpy (fname, "");
	strcpy (fname, id);
	strcat (fname, tracer);
	strcat (fname, "tim.dat");
d293 3
a295 3
	strcpy (fname, "");
	strcpy (fname, id);
	strcat (fname, "occip.prm");
d310 3
a312 3
	strcpy (fname, "");
	strcpy (fname, id);
	strcat (fname, "cblm.prm");
d326 3
a328 3
	strcpy (fname, "");
	strcpy (fname, id);
	strcat (fname, "striatal.prm");
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/meanrgt/RCS/meanrgt.c,v 1.1 2001/10/17 20:14:32 tom Exp tom $";
d41 8
a48 1
	float           f0, f1, f2, f3, f4, f5, f6, f7;
d138 1
a138 1
	fclose (fp);
d185 1
a185 1
		fclose (fp);
d258 1
a258 1
			fclose (fp);
d300 1
a300 1
	fclose (fp);
d317 1
a317 1
	fclose (fp);
d335 1
a335 1
	fclose (fp);
d337 1
a337 1
	fclose (fdat);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header$";
d83 1
a83 1
	npln = p-1;
a176 4
		/*
		 * for (n = 0; n < 8; n++) printf ("%d %s\n", rnum[n], rname[n]);
		 */

d263 1
a263 1
	strcat (fname, "striatal.dtest");
d280 1
a280 1
	strcat (fname, "occip.test");
d297 1
a297 1
	strcat (fname, "cblm.test");
d313 1
a313 1
	strcat (fname, "striatal.test");
@
