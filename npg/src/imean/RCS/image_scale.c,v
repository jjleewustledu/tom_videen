head	3.1;
access;
symbols;
locks; strict;
comment	@ * @;


3.1
date	2004.05.26.21.23.40;	author tom;	state Exp;
branches;
next	3.0;

3.0
date	2004.02.16.17.07.18;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	97.01.08.22.47.32;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.04.24.23.24.52;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.04.24.23.19.44;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.04.24.23.18.56;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	96.04.24.23.18.32;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	96.04.24.23.18.05;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	94.10.12.20.17.28;	author tom;	state Exp;
branches;
next	;


desc
@initial version
@


3.1
log
@fix major bug
@
text
@/* $Log: image_scale.c,v $
 * Revision 3.0  2004/02/16  17:07:18  tom
 * Feb 2004
 *
 * Revision 2.3  1997/01/08  22:47:32  tom
 * create sd and n images
 * use parameters: smg_divisor, smg_included, smg_sdimage, smg_nimage
 * use weights from imagelist
 *
 * Revision 2.2  1996/04/24  23:24:52  tom
 * this one works...
 *
 * Revision 2.1  1996/04/24  23:19:44  tom
 * *** empty log message ***
 *
 * Revision 2.0  1996/04/24  23:18:56  tom
 * new library release
 *
 * Revision 1.3  1996/04/24  23:18:32  tom
 * new library release
 *
 * Revision 1.2  1996/04/24  23:18:05  tom
 * new release
 *
 * Revision 1.1  1994/10/12  20:17:28  tom
 * Initial revision
 *
 */
/*	========================================================================
 *	Module:			image_scale.c
 *	Date:			Jan 1997
 *	Author:			Tom Videen
 *	========================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/imean/RCS/image_scale.c,v 3.0 2004/02/16 17:07:18 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

void            image_scale (a, totwt, sd, dim, maxwt, scaler, smg_divisor, smg_included, compute_sd)
	float        ***a, ***totwt, ***sd;
	int            *dim;
	float           maxwt;
	float           scaler;
	char           *smg_divisor;
	char           *smg_included;
	int         	compute_sd;

{
	float           n, f;
	float           sum;
	float           sumsqrs;		 /* sum of the squares */
	float           ssqr;			 /* sigma squared */
	int             i, j, k;
	int             nmask;			 /* optional; specifies min number of subjects for
						  * each non-zero pixel */

	if (compute_sd != 0) {
		for (i = 1; i <= dim[2]; ++i) {
			for (j = 1; j <= dim[1]; ++j) {
				for (k = 1; k <= dim[0]; ++k) {
					n = totwt[i][j][k];
					sum = a[i][j][k];
					sumsqrs = sd[i][j][k];
					if (n > 1 && sumsqrs > 0) {
						ssqr = (sumsqrs - ((sum * sum) / n)) / (n - 1);
						if (ssqr > 0)
							sd[i][j][k] = sqrt (ssqr);
						else
							sd[i][j][k] = 0;
					} else
						sd[i][j][k] = 0;
				}
			}
		}
	}
/*
 *  All pixels; divide by total weighted number of images
 */

	if (strcmp (smg_included, "all") == 0) {
		if (strcmp (smg_divisor, "global") == 0) {
			f = scaler / maxwt;
			for (i = 1; i <= dim[2]; ++i) {
				for (j = 1; j <= dim[1]; ++j) {
					for (k = 1; k <= dim[0]; ++k) {
						a[i][j][k] *= f;
					}
				}
			}

/*
 *  All pixels; divide by weighted number of images contributing to each pixel
 */

		} else if (strcmp (smg_divisor, "local") == 0) {
			for (i = 1; i <= dim[2]; ++i) {
				for (j = 1; j <= dim[1]; ++j) {
					for (k = 1; k <= dim[0]; ++k) {
						if (totwt[i][j][k] > 0)
							a[i][j][k] *= scaler / totwt[i][j][k];
					}
				}
			}
		}
/* Not that smg_included = "all" and smg_divisor = "none" drops through with no processing */

/*
 *  All pixels which had at least nmask images contributing to them;
 *  divide by number of images contributing to each pixel
 */

	} else if (strncmp (smg_included, "n=", 2) == 0) {
		nmask = atoi (smg_included + 2);
		for (i = 1; i <= dim[2]; ++i) {
			for (j = 1; j <= dim[1]; ++j) {
				for (k = 1; k <= dim[0]; ++k) {
					if (totwt[i][j][k] + .001 >= (float) nmask)
						a[i][j][k] *= scaler / totwt[i][j][k];
					else
						a[i][j][k] = 0;
				}
			}
		}

/*
 *  Only fully sampled pixels; divide by total weighted number of images
 */

	} else {
		f = scaler / maxwt;
		for (i = 1; i <= dim[2]; ++i) {
			for (j = 1; j <= dim[1]; ++j) {
				for (k = 1; k <= dim[0]; ++k) {
					if (fabs (totwt[i][j][k] - maxwt) < .001)
						a[i][j][k] *= f;
					else
						a[i][j][k] = 0;
				}
			}
		}
	}
}
@


3.0
log
@Feb 2004
@
text
@d2 3
d37 1
a37 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/imean/RCS/image_scale.c,v 2.3 1997/01/08 22:47:32 tom Exp tom $";
@


2.3
log
@create sd and n images
use parameters: smg_divisor, smg_included, smg_sdimage, smg_nimage
use weights from imagelist
@
text
@d2 5
d28 1
a28 1
 *	Date:			Jan-97
d32 1
d34 1
a34 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/imean/RCS/image_scale.c,v 2.2 1996/04/24 23:24:52 tom Exp $";
a40 1
#include <myvalues.h>
d49 1
a49 1
	BOOLEAN         compute_sd;
d60 1
a60 1
	if (compute_sd) {
@


2.2
log
@this one works...
@
text
@d2 3
d23 1
a23 1
 *	Date:			Apr-96
a24 12
 *	Description:	Scale image by specified factor.
 *
 *	Inputs:
 *		a   - image
 *		dim - dimensions of image array
 *		f   - scale factor
 *
 *	Output:
 *		a   - scaled image
 *
 *	Algorithm:
 *	    a = a * f
d28 1
a28 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/imean/RCS/image_scale.c,v 2.1 1996/04/24 23:19:44 tom Exp tom $";
d32 2
d35 1
d37 2
a38 2
void            image_scale (a, dim, f)
	float        ***a;
d40 5
a44 1
	float           f;
d47 4
d52 2
d55 16
a70 4
	for (i = 1; i <= dim[2]; ++i) {
		for (j = 1; j <= dim[1]; ++j) {
			for (k = 1; k <= dim[0]; ++k) {
				a[i][j][k] *= f;
d73 66
@


2.1
log
@*** empty log message ***
@
text
@d2 3
d37 1
a37 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/imean/RCS/image_scale.c,v 2.0 1996/04/24 23:18:56 tom Exp tom $";
d46 1
a46 1
	int             f;
@


2.0
log
@new library release
@
text
@d2 3
d34 1
a34 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/imean/RCS/image_scale.c,v 1.3 1996/04/24 23:18:32 tom Exp tom $";
a39 1
*/
@


1.3
log
@new library release
@
text
@d2 3
d31 1
a31 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/imean/RCS/image_scale.c,v 1.2 1996/04/24 23:18:05 tom Exp tom $";
@


1.2
log
@new release
@
text
@d2 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/imean/RCS/image_scale.c,v 1.1 1994/10/12 20:17:28 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$
d8 1
a8 1
 *	Date:			12-Oct-94
d10 2
a11 2
 *	Description:	Scale image by number of images in list
 *	 
d13 4
a16 4
 *		a[nz][DIM][DIM]   - image array
 *		nz              -   number of slices
 *		lstsize         -   number of images processed
 *		 
d18 2
a19 2
 *		a[nz][DIM][DIM]   - scaled image array
 *		
d21 1
a21 3
 *	    a = a / lstsize
 *		
 *	History:
d24 3
a29 2
#include <petutil/petutil.h>
#include "imean.h"	/* REAL_SLICE */
d31 5
a35 1
static char     rcsid[] = "$Header$";
a36 10
/*	-----------------------
 *	Function image_scale
 *	-----------------------
 */
void 
image_scale (a, nz, lstsize)
	REAL_SLICE     *a;
	int             nz;
	int             lstsize;

a38 1
	float           f;
d40 3
a42 8
/*
 *	divide by total number of images
 */

	f = 1. / lstsize;
	for (i = 0; i < nz; ++i) {
		for (j = 0; j < DIM; ++j) {
			for (k = 0; k < DIM; ++k) {
@
