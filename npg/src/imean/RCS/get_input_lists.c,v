head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	94.10.12.20.17.28;	author tom;	state Exp;
branches;
next	;


desc
@initial version
@


1.1
log
@Initial revision
@
text
@/* $Log$
 */
/*	===============================================================================
 *	Module:			get_input_lists.c
 *	Date:			28-Jul-93
 *	Author:			Tom Videen
 *	Description:	Read an input image list file and an input image parameter file.
 *
 *	Input:
 *		prmfile         -   parameter filename
 *		lstfile         -   image list filename
 *		image_mode      -   used to expand the image list
 *			(STDIMAGE_MODE, DIFIMAGE_MODE, MULTITRACER_IMAGE_MODE in imglist.h)
 *		filter_mode     -   used to expand the image list
 *			(IMGFILTER_MODE in imglist.h)
 *
 *	Output:
 *		parameter_data  -   structure PARAMETER_DATA (petutil.h)
 *		image_list      -   structure IMAGE_LIST_DATA (petutil.h)
 *		scan            -   structure SCANLIST_ARRAY (petutil.h)
 *		lstsize         -   number of scan (pairs) in image list
 *
 *	Algorithm:
 *	1)  Read the parameter file into parameter_data.
 *	2)  Read the image list into image_list.
 *	3)  Get full names of activation  and control scans and store in scan.
 *
 *	History:		Modification of chklist.c
 *		12-Oct-94	Modified version of the function in t88mean which omits sxrfile.
 *	===============================================================================
 */

#include <stdio.h>
#include <string.h>
#include <values.h>
#include <petutil/petutil.h>
#include <petutil/imglist.h>	/* IMAGE_LIST_DATA, MAXPATH */
#include "imean.h"				/* SCANLIST_ARRAY */

static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/get_input_lists.c,v 1.10 1994/10/03 16:17:13 tom Exp $";

void
get_input_lists (prmfile, lstfile, lstsize, image_mode, filter_mode, scan,
		 parameter_data, image_list)
	char           *prmfile;
	char           *lstfile;
	int             lstsize;
	int             image_mode;
	int             filter_mode;
	PARAMETER_DATA *parameter_data;
	SCANLIST_ARRAY *scan;
	IMAGE_LIST_DATA *image_list;

{
	char            short_imgfile[6][MAXLINE];
	char            full_imgfile[6][MAXPATH];
	int             nfiles;
	int             i, j;
	BOOLEAN         demigrate = TRUE;

/*
 * Read parameters into finfo.
 */

	if (readparm (prmfile, parameter_data) == FAIL) {
		fprintf (stderr, "Error: reading %s\n", prmfile);
		exit (FAIL);
	}
/*
 * Get full names of activation and control files.
 */

	for (i = 0; i < lstsize; i++) {
		if (buildnames (parameter_data, image_list[i], image_mode, filter_mode,
				&nfiles, short_imgfile) == FAIL) {
			fprintf (stderr, "Error in build_short_names using: %s %s %f %s %f %s\n",
			 image_list[i].subject_id, image_list[i].scanset1_id, image_list[i].mean1,
				 image_list[i].scanset2_id, image_list[i].mean2);
			exit (FAIL);
		}
/*
 * Clean the array of complete image files.
 */

		for (j = 0; j < nfiles; j++)
			strcpy (full_imgfile[j], "");

/*
 * there is no distinction between single & paired multitracer in this function, hence...
 */

		if (nfiles == 3)
			for (j = 3; j < 6; j++)
				strcpy (full_imgfile[j], "");

		if (checkimg (parameter_data, image_list[i], image_mode, demigrate, nfiles,
			      short_imgfile, full_imgfile) == FAIL) {
			fprintf (stderr, "Error in checkimg using: %s %s %f %s %f\n",
			 image_list[i].subject_id, image_list[i].scanset1_id, image_list[i].mean1,
				 image_list[i].scanset2_id, image_list[i].mean2);
			exit (FAIL);
		}
		for (j = 0; j < nfiles; j++)
			strcpy (scan[i][j], full_imgfile[j]);
	}
}
@
