head	3.1;
access;
symbols;
locks; strict;
comment	@ * @;


3.1
date	2004.05.26.21.23.40;	author tom;	state Exp;
branches;
next	3.0;

3.0
date	2004.02.16.17.07.18;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	97.01.08.22.47.32;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.04.24.23.05.51;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	94.10.12.20.22.56;	author tom;	state Exp;
branches;
next	;


desc
@initial version
@


3.1
log
@fix major bug
@
text
@/* $Log: getprms_imean.c,v $
 * Revision 3.0  2004/02/16  17:07:18  tom
 * Feb 2004
 *
 * Revision 2.1  1997/01/08  22:47:32  tom
 * create sd and n images
 * use parameters: smg_divisor, smg_included, smg_sdimage, smg_nimage
 * use weights from imagelist
 *
 * Revision 2.0  1996/04/24  23:05:51  tom
 * new library release
 *
 * Revision 1.1  1994/10/12  20:22:56  tom
 * Initial revision
 *
 */
/*	===============================================================================
 *	Module:			getprms_imean.c
 *	Date:			Apr 1996
 *	Author:			Tom Videen
 *	Description:	Read program-specific parameters from the parameter file.
 *
 *	Input:
 *		prmfile	-	name of parameter file
 *
 *	Output (parameters assigned values):
 *	Required:
 *		smg_norm
 *		smg_mode
 *      smg_divisor
 *      smg_included
 *	Optional:
 *		smg_sdimage
 *		smg_nimage
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/imean/RCS/getprms_imean.c,v 3.0 2004/02/16 17:07:18 tom Exp tom $";
#endif

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <imgutil.h>

int             getprms_imean (prmfile, smg_norm, smg_divisor, smg_included, smg_mode,
			                       smg_sdimage, smg_nimage)
	char           *prmfile;
	float          *smg_norm;
	char           *smg_divisor;
	char           *smg_included;
	char           *smg_mode;
	char           *smg_sdimage;
	char           *smg_nimage;

{
	FILE           *fp;
	char            line[MAXLINE];
	char            label[MAXLINE];
	char            parameter[MAXLINE];

	*smg_norm = 0;
	(void) strcpy (smg_divisor, "NONE");
	(void) strcpy (smg_included, "NONE");
	(void) strcpy (smg_mode, "NONE");
	(void) strcpy (smg_sdimage, "no");
	(void) strcpy (smg_nimage, "no");

	fp = fopen (prmfile, "r");
	if (fp == (FILE *) NULL) {
		printf ("Error opening parameter file %s\n", prmfile);
		return (ERROR);
	}
/*
 *	Read each line of parameter file.
 *	If the line has 2 strings, compare the label with the list of eligible keys:
 *	and if the key is found, set the appropriate parameter.
 */

	while (fgets (line, MAXLINE, fp) != NULL) {
		if (sscanf (line, "%s %s", label, parameter) == 2) {

/*
 *	Get smg_norm
 */

			if (strcmp (label, "smg_norm:") == 0) {
				*smg_norm = atof (parameter);

/*
 *	Get smg_mode
 */

			} else if (strcmp (label, "smg_mode:") == 0) {
				if (strcmp (parameter, "single") == 0 ||
				    strcmp (parameter, "paired") == 0 ||
				    strcmp (parameter, "diff") == 0)
					(void) strcpy (smg_mode, parameter);
				else {
					printf ("Error reading smg_mode from %s\n", prmfile);
					return (ERROR);
				}

/*
 *  Get smg_divisor
 */
			} else if (strcmp (label, "smg_divisor:") == 0) {
				if (strcmp (parameter, "global") == 0 ||
				    strcmp (parameter, "local") == 0 ||
				    strcmp (parameter, "none") == 0)
					(void) strcpy (smg_divisor, parameter);
				else {
					printf ("Error reading smg_divisor from %s\n", prmfile);
					return (ERROR);
				}
/*
 *  Get smg_included
 */
			} else if (strcmp (label, "smg_included:") == 0) {
				if (strcmp (parameter, "all") == 0 ||
				    strcmp (parameter, "sampled") == 0 ||
				    strncmp (parameter, "n=", 2) == 0)
					(void) strcpy (smg_included, parameter);
				else {
					printf ("Error reading smg_included from %s\n", prmfile);
					return (ERROR);
				}

/*
 *  Get smg_sdimage
 */
			} else if (strcmp (label, "smg_sdimage:") == 0) {
				(void) strcpy (smg_sdimage, parameter);
/*
 *  Get smg_nimage
 */
			} else if (strcmp (label, "smg_nimage:") == 0) {
				(void) strcpy (smg_nimage, parameter);

			}
		}
	}
/*
 *	Check that all required parameters have been assigned new values before exiting.
 */

	if (*smg_norm == 0) {
		printf ("Error:  smg_norm not found in %s\n", prmfile);
		return (ERROR);
	}
	if (strcmp (smg_divisor, "NONE") == 0) {
		printf ("Error:  smg_divisor not found in %s\n", prmfile);
		return (ERROR);
	}
	if (strcmp (smg_included, "NONE") == 0) {
		printf ("Error:  smg_included not found in %s\n", prmfile);
		return (ERROR);
	}
	if (strcmp (smg_mode, "NONE") == 0) {
		printf ("Error:  smg_mode not found in %s\n", prmfile);
		return (ERROR);
	}
	return (OK);
}
@


3.0
log
@Feb 2004
@
text
@d2 3
d39 1
a39 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/imean/RCS/getprms_imean.c,v 2.1 1997/01/08 22:47:32 tom Exp tom $";
@


2.1
log
@create sd and n images
use parameters: smg_divisor, smg_included, smg_sdimage, smg_nimage
use weights from imagelist
@
text
@d2 5
d16 1
a16 1
 *	Date:			Apr-96
d34 1
d36 1
a36 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/imean/RCS/getprms_imean.c,v 2.0 1996/04/24 23:05:51 tom Exp tom $";
d61 5
a65 5
	strcpy (smg_divisor, "NONE");
	strcpy (smg_included, "NONE");
	strcpy (smg_mode, "NONE");
	strcpy (smg_sdimage, "no");
	strcpy (smg_nimage, "no");
d96 1
a96 1
					strcpy (smg_mode, parameter);
d109 1
a109 1
					strcpy (smg_divisor, parameter);
d121 1
a121 1
					strcpy (smg_included, parameter);
d131 1
a131 1
				strcpy (smg_sdimage, parameter);
d136 1
a136 1
				strcpy (smg_nimage, parameter);
@


2.0
log
@new library release
@
text
@d2 3
d22 5
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/imean/RCS/getprms_imean.c,v 1.1 1994/10/12 20:22:56 tom Exp tom $";
d38 2
a39 1
int             getprms_imean (prmfile, smg_norm, smg_mode)
d42 2
d45 2
d55 2
d58 2
d96 36
a134 1

d143 8
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$
d8 1
a8 1
 *	Date:			12-Oct-94
a18 3
 *		processing
 *	
 *	History:
d21 3
d27 2
a28 1
#include <petutil/petutil.h>
d30 1
a30 4
static char     rcsid[] = "$Header$";

int
getprms_imean (prmfile, smg_norm, processing, smg_mode)
a32 1
	char           *processing;
a42 1
	strcpy (processing, "NONE");
d47 1
a47 1
		return FAIL;
d63 1
a63 7
				if (DetermineType (parameter) == DATA_TYPE_REAL ||
				    DetermineType (parameter) == DATA_TYPE_INTEGER)
					*smg_norm = atof (parameter);
				else {
					printf ("Error reading smg_norm from %s\n", prmfile);
					return FAIL;
				}
d76 1
a76 1
					return FAIL;
a78 16
/*
 *	Get processing
 */

			} else if (strcmp (label, "processing:") == 0) {
				if (strcmp (parameter, "none") == 0 ||
				    strcmp (parameter, "cbf") == 0 ||
				    strcmp (parameter, "cbv") == 0 ||
				    strcmp (parameter, "oef") == 0 ||
				    strcmp (parameter, "cmro2") == 0)
					strcpy (processing, parameter);
				else {
					printf ("Error reading processing from %s\n", prmfile);
					return FAIL;
				}

d89 1
a89 1
		return FAIL;
d93 1
a93 1
		return FAIL;
d95 1
a95 4
	if (strcmp (processing, "NONE") == 0) {
		printf ("Error:  processing not found in %s\n", prmfile);
		return FAIL;
	}
@
