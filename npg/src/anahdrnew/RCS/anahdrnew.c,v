head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2005.11.22.14.37.30;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id */
/* $Log */
/*	===============================================================================
 *	Module:			anahdrnew.c
 *	Date:			22-Nov-2005
 *	Author:			Tom Videen
 *	Description:	Create Analyze hdr
 *	===============================================================================
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <image.h>
#include <ANALYZE.h>				 /* dsr */

#define MAXSTR 256
#define TRANSVERSE '\000'

/*	----------------------------
 *	Function:			anahdrnew
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;
	FILE           *fd_hdr;
	char           *fname;
	short           xdim, ydim, zdim;
	float           xpix, ypix, zpix;

	if (argc != 8) {
		fprintf (stdout, "Usage: anahdrnew hdr xdim ydim zdim xpix ypix zpix\n");
		return (ERROR);
	}
	fname = argv[1];
	xdim = atoi (argv[2]);
	ydim = atoi (argv[3]);
	zdim = atoi (argv[4]);
	xpix = atof (argv[5]);
	ypix = atof (argv[6]);
	zpix = atof (argv[7]);

	if ((fd_hdr = fopen (fname, "w")) == 0) {
		fprintf (stderr, "ERROR [anahdrnew]: creating %s\n", fname);
		return (ERROR);
	}
	(void) strncpy (hdr.hk.db_name, fname, 17);
	hdr.hk.sizeof_hdr = sizeof (struct dsr); /* required by developers */
	hdr.hk.extents = 16384;			 /* recommended by developers  */
	hdr.hk.regular = 'r';			 /* required by developers */
	hdr.dime.dim[0] = 4;			 /* typically only 4 dimensions  */
	hdr.dime.dim[1] = xdim;			 /* x dimension of atlas   */
	hdr.dime.dim[2] = ydim;			 /* y dimension of atlas   */
	hdr.dime.dim[3] = zdim;			 /* number of slices in volume */
	hdr.dime.dim[4] = 1;			 /* only one volume typically  */
	hdr.dime.unused8 = 0;			 /* despite the label, some of this is used */
	hdr.dime.unused9 = 0;
	hdr.dime.unused10 = 0;
	hdr.dime.unused11 = 0;
	hdr.dime.unused12 = 0;
	hdr.dime.unused13 = 0;
	hdr.dime.unused14 = 0;
	hdr.dime.datatype = 4;			 /* 16 bit signed integer  */
	hdr.dime.bitpix = 16;			 /* number of bits/pixel */
	hdr.dime.pixdim[1] = xpix;		 /* mm */
	hdr.dime.pixdim[2] = ypix;		 /* mm */
	hdr.dime.pixdim[3] = zpix;		 /* mm */
	hdr.dime.funused8 = 0;
	hdr.dime.funused9 = 0;
	hdr.dime.funused10 = 0;
	hdr.dime.funused11 = 0;
	hdr.dime.funused12 = 0;
	hdr.dime.funused13 = 0;
	hdr.dime.glmax = 0;
	hdr.dime.glmin = 0;
	hdr.hist.orient = TRANSVERSE;

	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anahdrnew]: writing %s\n", fname);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	return (OK);
}
@
