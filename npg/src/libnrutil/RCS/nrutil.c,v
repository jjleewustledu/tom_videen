head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.12.22.17.35;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.12.14.15.46.10;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.12.13.22.15.43;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.04.29.14.49.24;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/* $Id: nrutil.c,v 1.3 1999/12/14 15:46:10 tom Exp tom $ */
/* $Log: nrutil.c,v $
 * Revision 1.3  1999/12/14  15:46:10  tom
 * add Id
 */
#include <stdio.h>
#include <stdlib.h>

static void         nrerror (error_text)

char            error_text[];
{
	(void) fprintf (stderr, "Numerical Recipes run-time error...\n");
	(void) fprintf (stderr, "%s\n", error_text);
	(void) fprintf (stderr, "...now exiting to system...\n");
	exit (EXIT_FAILURE);
}


float          *vector (nl, nh)
	int             nl, nh;
{
	float          *v;

	v = (float *) malloc ((unsigned) (nh - nl + 1) * sizeof (float));
	if (!v)
		nrerror ("allocation failure in vector()");
	return v - nl;
}


int            *ivector (nl, nh)
	int             nl, nh;
{
	int            *v;

	v = (int *) malloc ((unsigned) (nh - nl + 1) * sizeof (int));
	if (!v)
		nrerror ("allocation failure in ivector()");
	return v - nl;
}


double         *dvector (nl, nh)
	int             nl, nh;
{
	double         *v;

	v = (double *) malloc ((unsigned) (nh - nl + 1) * sizeof (double));
	if (!v)
		nrerror ("allocation failure in dvector()");
	return v - nl;
}


float         **matrix (nrl, nrh, ncl, nch)
	int             nrl, nrh, ncl, nch;
{
	int             i;
	float         **m;

	m = (float **) malloc ((unsigned) (nrh - nrl + 1) * sizeof (float *));
	if (!m)
		nrerror ("allocation failure 1 in matrix()");
	m -= nrl;

	for (i = nrl; i <= nrh; i++) {
		m[i] = (float *) malloc ((unsigned) (nch - ncl + 1) * sizeof (float));
		if (!m[i])
			nrerror ("allocation failure 2 in matrix()");
		m[i] -= ncl;
	}
	return m;
}


double        **dmatrix (nrl, nrh, ncl, nch)
	int             nrl, nrh, ncl, nch;
{
	int             i;
	double        **m;

	m = (double **) malloc ((unsigned) (nrh - nrl + 1) * sizeof (double *));
	if (!m)
		nrerror ("allocation failure 1 in dmatrix()");
	m -= nrl;

	for (i = nrl; i <= nrh; i++) {
		m[i] = (double *) malloc ((unsigned) (nch - ncl + 1) * sizeof (double));
		if (!m[i])
			nrerror ("allocation failure 2 in dmatrix()");
		m[i] -= ncl;
	}
	return m;
}


int           **imatrix (nrl, nrh, ncl, nch)
	int             nrl, nrh, ncl, nch;
{
	int             i, **m;

	m = (int **) malloc ((unsigned) (nrh - nrl + 1) * sizeof (int *));
	if (!m)
		nrerror ("allocation failure 1 in imatrix()");
	m -= nrl;

	for (i = nrl; i <= nrh; i++) {
		m[i] = (int *) malloc ((unsigned) (nch - ncl + 1) * sizeof (int));
		if (!m[i])
			nrerror ("allocation failure 2 in imatrix()");
		m[i] -= ncl;
	}
	return m;
}


float         **submatrix (a, oldrl, oldrh, oldcl, oldch, newrl, newcl)
	float         **a;
	int             oldrl, oldrh, oldcl, newrl, newcl;
/*@@unused@@*/
	int             oldch;
{
	int             i, j;
	float         **m;

	m = (float **) malloc ((unsigned) (oldrh - oldrl + 1) * sizeof (float *));
	if (!m)
		nrerror ("allocation failure in submatrix()");
	m -= newrl;

	for (i = oldrl, j = newrl; i <= oldrh; i++, j++)
		m[j] = a[i] + oldcl - newcl;

	return m;
}


void            free_vector (v, nl, nh)
	float          *v;
	int             nl;
/*@@unused@@*/
	int             nh;
{
	free ((char *) (v + nl));
}


void            free_ivector (v, nl, nh)
	int            *v;
	int             nl;
/*@@unused@@*/
	int             nh;
{
	free ((char *) (v + nl));
}

void            free_dvector (v, nl, nh)
	double         *v;
	int             nl;
/*@@unused@@*/
	int             nh;
{
	free ((char *) (v + nl));
}


void            free_matrix (m, nrl, nrh, ncl, nch)
	float         **m;
	int             nrl, ncl;
/*@@unused@@*/
	int             nrh, nch;
{
	int             i;

	for (i = nrh; i >= nrl; i--)
		free ((char *) (m[i] + ncl));
	free ((char *) (m + nrl));
}


void            free_dmatrix (m, nrl, nrh, ncl, nch)
	double        **m;
	int             nrl, ncl;
/*@@unused@@*/
	int             nrh, nch;
{
	int             i;

	for (i = nrh; i >= nrl; i--)
		free ((char *) (m[i] + ncl));
	free ((char *) (m + nrl));
}


void            free_imatrix (m, nrl, nrh, ncl, nch)
	int           **m;
	int             nrl, ncl;
/*@@unused@@*/
	int             nrh, nch;
{
	int             i;

	for (i = nrh; i >= nrl; i--)
		free ((char *) (m[i] + ncl));
	free ((char *) (m + nrl));
}


void            free_submatrix (b, nrl, nrh, ncl, nch)
	float         **b;
	int             nrl;
/*@@unused@@*/
	int             nrh, ncl, nch;
{
	free ((char *) (b + nrl));
}


float         **convert_matrix (a, nrl, nrh, ncl, nch)
	float          *a;
	int             nrl, nrh, ncl, nch;
{
	int             i, j, nrow, ncol;
	float         **m;

	nrow = nrh - nrl + 1;
	ncol = nch - ncl + 1;
	m = (float **) malloc ((unsigned) (nrow) * sizeof (float *));
	if (!m)
		nrerror ("allocation failure in convert_matrix()");
	m -= nrl;
	for (i = 0, j = nrl; i <= nrow - 1; i++, j++)
		m[j] = a + ncol * i - ncl;
	return m;
}


void            free_convert_matrix (b, nrl, nrh, ncl, nch)
	float         **b;
	int             nrl;
/*@@unused@@*/
	int             nrh, ncl, nch;
{
	free ((char *) (b + nrl));
}


float         ***array (nrl, nrh, ncl, nch, nsl, nsh)
	int             nrl, nrh, ncl, nch, nsl, nsh;
{
	int             i, j;
	float         ***a;

	a = (float ***) malloc ((unsigned) (nrh - nrl + 1) * sizeof (float **));
	if (!a)
		nrerror ("allocation failure 1 in array()");
	a -= nrl;

	for (i = nrl; i <= nrh; i++) {
		a[i] = (float **) malloc ((unsigned) (nch - ncl + 1) * sizeof (float *));
		if (!a[i])
			nrerror ("allocation failure 2 in array()");
		a[i] -= ncl;
		for (j = nsl; j <= nsh; j++) {
			a[i][j] = (float *) malloc ((unsigned) (nsh - nsl + 1) * sizeof (float));
			if (!a[i][j])
				nrerror ("allocation failure 3 in array()");
			a[i][j] -= nsl;
		}
	}
	return a;
}


int         ***iarray (nrl, nrh, ncl, nch, nsl, nsh)
	int             nrl, nrh, ncl, nch, nsl, nsh;
{
	int             i, j;
	int         ***a;

	a = (int ***) malloc ((unsigned) (nrh - nrl + 1) * sizeof (int **));
	if (!a)
		nrerror ("allocation failure 1 in iarray()");
	a -= nrl;

	for (i = nrl; i <= nrh; i++) {
		a[i] = (int **) malloc ((unsigned) (nch - ncl + 1) * sizeof (int *));
		if (!a[i])
			nrerror ("allocation failure 2 in iarray()");
		a[i] -= ncl;
		for (j = nsl; j <= nsh; j++) {
			a[i][j] = (int *) malloc ((unsigned) (nsh - nsl + 1) * sizeof (int));
			if (!a[i][j])
				nrerror ("allocation failure 3 in iarray()");
			a[i][j] -= nsl;
		}
	}
	return a;
}


@


1.3
log
@add Id
@
text
@d1 5
a5 3
/* $Id$ */
/* $Log$ */
#include <malloc.h>
d7 1
a12 2
	void            exit ();

d16 1
a16 1
	exit (1);
d120 3
a122 1
	int             oldrl, oldrh, oldcl, oldch, newrl, newcl;
d141 3
a143 1
	int             nl, nh;
d150 4
a153 1
	int            *v, nl, nh;
d160 3
a162 1
	int             nl, nh;
d170 3
a172 1
	int             nrl, nrh, ncl, nch;
d184 3
a186 1
	int             nrl, nrh, ncl, nch;
d198 3
a200 1
	int             nrl, nrh, ncl, nch;
d212 3
a214 1
	int             nrl, nrh, ncl, nch;
d241 3
a243 1
	int             nrl, nrh, ncl, nch;
@


1.2
log
@lint cleanup
@
text
@d1 2
@


1.1
log
@Initial revision
@
text
@d4 3
a6 2
void            nrerror (error_text)
	char            error_text[];
d10 3
a12 3
	fprintf (stderr, "Numerical Recipes run-time error...\n");
	fprintf (stderr, "%s\n", error_text);
	fprintf (stderr, "...now exiting to system...\n");
@
