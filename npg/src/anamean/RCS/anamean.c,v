head	2.3;
access;
symbols;
locks; strict;
comment	@ * @;


2.3
date	2010.06.04.19.03.18;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2007.01.15.21.01.27;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2006.10.25.14.37.32;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.18.04.01;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.12.16.17.58.54;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.10.11.14.59.01;	author tom;	state Exp;
branches;
next	;


desc
@@


2.3
log
@accept 3 dimensions
@
text
@/*	$Log: anamean.c,v $
 * Revision 2.2  2007/01/15  21:01:27  tom
 * *** empty log message ***
 *
 * Revision 2.1  2006/10/25  14:37:32  tom
 * fix bug in sum
 *
 * Revision 2.0  2004/02/13  18:04:01  tom
 * Feb 2004
 *
 * Revision 1.2  1999/12/16  17:58:54  tom
 * new libs, sync version
 *
 * Revision 1.1  1999/10/11  14:59:01  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anamean.c
 *	Date:			Oct 2006
 *	Author:			Tom Videen
 *	Description:	Compute mean of 2 or more Analyze images
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamean/RCS/anamean.c,v 2.2 2007/01/15 21:01:27 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anamean
 *	----------------------------
 */
int	main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* output file names */
	char           *img2, *hdr2;		 /* input file names */
	char           *name;
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	int             n, nimg;
	int             first = 4;
	char           *fval;
	int             flag;
	long           *limg;			 /* long image */
	long           *nn;			 /* images contributing to mean	 */
	short          *simg;			 /* short image */

	if (argc < 6) {
		fprintf (stderr, "Usage: anamean num flag img1 img2 img3 ...\n");
		return (ERROR);
	}
	hdr1 = (char *) calloc (256, sizeof (char));
	img1 = (char *) calloc (256, sizeof (char));
	hdr2 = (char *) calloc (256, sizeof (char));
	img2 = (char *) calloc (256, sizeof (char));
	if (hdr1 == NULL)
		return (ERROR);
	if (img1 == NULL)
		return (ERROR);
	if (hdr2 == NULL)
		return (ERROR);
	if (img2 == NULL)
		return (ERROR);

	nimg = atoi (argv[1]) - 2;
	fval = argv[2];
	name = argv[3];
	(void) strcpy (hdr1, name);
	(void) strcpy (img1, name);
	(void) strcat (hdr1, ".hdr");
	(void) strcat (img1, ".img");

	if (strncmp (fval, "all", 3) == 0) {
		fprintf (stdout, "Mean of all pixels of %d images\n", nimg);
		flag = 0;
	} else if (strncmp (fval, "nz", 2) == 0) {
		fprintf (stdout, "Mean of all non-zero pixels of %d images\n", nimg);
		flag = 1;
	} else {
		fprintf (stderr, "ERROR [anamean]: select all or nz\n");
		return (ERROR);
	}

/*	Get first image */

	name = argv[first];
	(void) strcpy (hdr2, name);
	(void) strcpy (img2, name);
	(void) strcat (hdr2, ".hdr");
	(void) strcat (img2, ".img");
	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamean]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamean]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anamean]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
/*	Get first image */

	name = argv[first];
	(void) strcpy (hdr2, name);
	(void) strcpy (img2, name);
	(void) strcat (hdr2, ".hdr");
	(void) strcat (img2, ".img");
	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamean]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamean]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anamean]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anamean]: reading %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anamean]: reading %s\n", hdr2);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1 * dim2 * dim3;

	simg = (short *) calloc (num, sizeof (short));
	if (simg == NULL) {
		fprintf (stderr, "ERROR [anamean]: calloc simg\n");
		return (ERROR);
	}
	nn = (long *) calloc (num, sizeof (long));
	if (nn == NULL) {
		fprintf (stderr, "ERROR [anamean]: calloc nn\n");
		return (ERROR);
	}
	limg = (long *) calloc (num, sizeof (long));
	if (limg == NULL) {
		fprintf (stderr, "ERROR [anamean]: calloc limg\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamean]: opening %s\n", img2);
		return (ERROR);
	}
	if ((fread (simg, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamean]: reading %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img2);
	for (i = 0; i < num; i++) {
		limg[i] = (long) simg[i];
		if (simg[i] > 0)
			nn[i] = 1;
	}

/*	Get other images */

	for (n = first + 1; n <= nimg + 1; n++) {
		name = argv[n + 1];
		(void) strcpy (hdr2, name);
		(void) strcpy (img2, name);
		(void) strcat (hdr2, ".hdr");
		(void) strcat (img2, ".img");
		if ((fd_hdr = fopen (hdr2, "r")) == 0) {
			fprintf (stderr, "ERROR [anamean]: opening %s\n", hdr2);
			return (ERROR);
		}
		if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
			fprintf (stderr, "ERROR [anamean]: reading %s\n", hdr2);
			return (ERROR);
		}
		if (hdr.dime.dim[0] < 3) {
			fprintf (stderr, "ERROR [anamean]: reading %s\n", hdr2);
			fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
			return (ERROR);
		}
		if (hdr.dime.datatype != 4) {
			fprintf (stderr, "ERROR [anamean]: reading %s\n", hdr2);
			fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
			return (ERROR);
		}
		if (hdr.dime.bitpix != 16) {
			fprintf (stderr, "ERROR [anamean]: reading %s\n", hdr2);
			fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
			return (ERROR);
		}
		dim1 = hdr.dime.dim[1];
		dim2 = hdr.dime.dim[2];
		dim3 = hdr.dime.dim[3];
		(void) fclose (fd_hdr);

		if (num != dim1 * dim2 * dim3) {
			fprintf (stderr, "ERROR [anamean]: images are not same size\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anamean]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (simg, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamean]: reading %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
		for (i = 0; i < num; i++) {
			limg[i] += (long) simg[i];
			if (simg[i] > 0)
				nn[i] += 1;
		}
	}

/*	Write mean image */

	fprintf (stderr, "n = %d\n", nimg);
	if (flag == 0) {
		simg[i] = (short) ((float) limg[i] / (float) nimg);
	} else {
		for (i = 0; i < num; i++) {
			if (nn[i] > 0)
				simg[i] = (short) ((float) limg[i] / (float) nn[i]);
			else
				simg[i] = 0;
		}
	}
	if ((fd_img = fopen (img1, "w")) == 0) {
		fprintf (stderr, "ERROR [anamean]: opening %s\n", img1);
		return (ERROR);
	}
	fprintf (stdout, "Writing %s\n", img1);
	if ((fwrite (simg, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamean]: writing %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr1, "w")) == 0) {
		fprintf (stderr, "ERROR [anamean]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamean]: writing %s\n", hdr1);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	free (simg);
	free (limg);
	free (nn);
	return (OK);
}
@


2.2
log
@*** empty log message ***
@
text
@d2 3
d26 1
a26 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamean/RCS/anamean.c,v 2.1 2006/10/25 14:37:32 tom Exp tom $";
d39 1
a39 1
main (argc, argv)
d111 1
a111 1
	if (hdr.dime.dim[0] != 4) {
d131 1
a131 1
	if (hdr.dime.dim[0] != 4) {
d199 1
a199 1
		if (hdr.dime.dim[0] != 4) {
@


2.1
log
@fix bug in sum
@
text
@d2 3
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamean/RCS/anamean.c,v 2.0 2004/02/13 18:04:01 tom Exp tom $";
d44 2
a45 2
	char           *img1, *hdr1;	 /* output file names */
	char           *img2, *hdr2;	 /* input file names */
d47 1
a47 1
	long            dim1, dim2, dim3; /* dimensions of image */
d50 3
d54 1
d57 2
a58 2
	if (argc < 5) {
		fprintf (stderr, "Usage: anamean num img1 img2 img3 ...\n");
d65 8
a72 4
	if (hdr1 == NULL) return (ERROR);
	if (img1 == NULL) return (ERROR);
	if (hdr2 == NULL) return (ERROR);
	if (img2 == NULL) return (ERROR);
d74 3
a76 2
	nimg = atoi (argv[1]) - 1;
	name = argv[2];
d82 11
d95 1
a95 1
	name = argv[3];
d113 20
d154 5
d174 1
a174 1
	for (i = 0; i < num; i++)
d176 3
d182 1
a182 1
	for (n = 3; n <= nimg+1; n++) {
d230 1
a230 1
		for (i = 0; i < num; i++)
d232 3
a234 1

d240 1
a240 1
	for (i = 0; i < num; i++)
d242 8
d273 1
@


2.0
log
@Feb 2004
@
text
@d2 3
d13 1
a13 1
 *	Date:			Oct 1999
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamean/RCS/anamean.c,v 1.2 1999/12/16 17:58:54 tom Exp tom $";
d51 1
a51 1
		printf ("Usage: anamean num img1 img2 img3 ...\n");
d63 1
a63 1
	nimg = atoi (argv[1]);
d78 1
a78 1
		fprintf (stderr, "ERROR [anamean]: Cannot open: %s\n", hdr2);
d82 1
a82 1
		fprintf (stderr, "ERROR [anamean]: Reading: %s\n", hdr2);
d86 1
a86 1
		fprintf (stderr, "ERROR [anamean]: Reading: %s\n", hdr2);
d91 1
a91 1
		fprintf (stderr, "ERROR [anamean]: Reading: %s\n", hdr2);
d96 1
a96 1
		fprintf (stderr, "ERROR [anamean]: Reading: %s\n", hdr2);
d108 1
a108 1
		fprintf (stderr, "ERROR [anamean]: Cannot calloc simg\n");
d113 1
a113 1
		fprintf (stderr, "ERROR [anamean]: Cannot calloc limg\n");
d117 1
a117 1
		fprintf (stderr, "ERROR [anamean]: Cannot open: %s\n", img2);
d121 1
a121 1
		fprintf (stderr, "ERROR [anamean]: Reading: %s\n", img2);
d131 1
a131 1
	for (n = 3; n <= nimg; n++) {
d138 1
a138 1
			fprintf (stderr, "ERROR [anamean]: Cannot open: %s\n", hdr2);
d142 1
a142 1
			fprintf (stderr, "ERROR [anamean]: Reading: %s\n", hdr2);
d146 1
a146 1
			fprintf (stderr, "ERROR [anamean]: Reading: %s\n", hdr2);
d151 1
a151 1
			fprintf (stderr, "ERROR [anamean]: Reading: %s\n", hdr2);
d156 1
a156 1
			fprintf (stderr, "ERROR [anamean]: Reading: %s\n", hdr2);
d166 1
a166 1
			fprintf (stderr, "ERROR [anamean]: Images are not same size\n");
d170 1
a170 1
			fprintf (stderr, "ERROR [anamean]: Cannot open: %s\n", img2);
d174 1
a174 1
			fprintf (stderr, "ERROR [anamean]: Reading: %s\n", img2);
a178 3

/*	Add images */

d186 1
d188 1
a188 1
		simg[i] += (short) ((float) limg[i] / (float) n);
d190 1
a190 1
		fprintf (stderr, "ERROR [anamean]: Unable to open %s\n", img1);
d195 1
a195 1
		fprintf (stderr, "ERROR [anamean]: Error writing to: %s\n", img1);
d201 1
a201 1
		fprintf (stderr, "ERROR [anamean]: Unable to open %s\n", hdr1);
d205 1
a205 1
		fprintf (stderr, "ERROR [anamean]: Error writing to: %s\n", hdr1);
@


1.2
log
@new libs, sync version
@
text
@d2 3
d10 1
a10 1
 *	Date:			Oct-99
d15 1
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamean/RCS/anamean.c,v 1.1 1999/10/11 14:59:01 tom Exp tom $";
d55 4
d62 4
a65 4
	strcpy (hdr1, name);
	strcpy (img1, name);
	strcat (hdr1, ".hdr");
	strcat (img1, ".img");
d70 4
a73 4
	strcpy (hdr2, name);
	strcpy (img2, name);
	strcat (hdr2, ".hdr");
	strcat (img2, ".img");
d100 1
a100 1
	fclose (fd_hdr);
d121 1
a121 1
	fclose (fd_img);
d130 4
a133 4
		strcpy (hdr2, name);
		strcpy (img2, name);
		strcat (hdr2, ".hdr");
		strcat (img2, ".img");
d160 1
a160 1
		fclose (fd_hdr);
d174 1
a174 1
		fclose (fd_img);
d197 1
a197 1
	fclose (fd_img);
d207 1
a207 1
	fclose (fd_hdr);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamean/RCS/anamean.c,v 1.1 1999/02/11 17:36:28 tom Exp $";
@
