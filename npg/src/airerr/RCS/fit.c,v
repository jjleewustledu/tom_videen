head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	96.01.12.21.32.43;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Driver for routine gaussj */

#include <stdio.h>
#include <nr.h>
#include <nrutil.h>

#define NP 20
#define MP 20
#define MAXSTR 80

main ()
{
	int             j, k, l, m, n;
	float         **a, **ai, **u, **b, **x, **t;
	char            dummy[MAXSTR];
	FILE           *fp;

	a = matrix (1, NP, 1, NP);
	ai = matrix (1, NP, 1, NP);
	u = matrix (1, NP, 1, NP);
	b = matrix (1, NP, 1, MP);
	x = matrix (1, NP, 1, MP);
	t = matrix (1, NP, 1, MP);

/* invert matrix */

	gaussj (ai, n, x, m);
	printf ("\nInverse of matrix a : \n");
	for (k = 1; k <= n; k++) {
		for (l = 1; l <= n; l++)
			printf ("%12.6f", ai[k][l]);
		printf ("\n");
	}
/* check inverse */
	printf ("\na times a-inverse:\n");
	for (k = 1; k <= n; k++) {
		for (l = 1; l <= n; l++) {
			u[k][l] = 0.0;
			for (j = 1; j <= n; j++)
				u[k][l] += (a[k][j] * ai[j][l]);
		}
		for (l = 1; l <= n; l++)
			printf ("%12.6f", u[k][l]);
		printf ("\n");
	}
	free_matrix (t, 1, NP, 1, MP);
	free_matrix (x, 1, NP, 1, MP);
	free_matrix (b, 1, NP, 1, MP);
	free_matrix (u, 1, NP, 1, NP);
	free_matrix (ai, 1, NP, 1, NP);
	free_matrix (a, 1, NP, 1, NP);
	return 0;
}
@
