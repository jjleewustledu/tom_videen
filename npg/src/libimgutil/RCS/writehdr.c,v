head	3.3;
access;
symbols;
locks; strict;
comment	@ * @;


3.3
date	2004.02.12.22.08.52;	author tom;	state Exp;
branches;
next	3.2;

3.2
date	2004.01.02.21.23.12;	author tom;	state Exp;
branches;
next	3.0;

3.0
date	2003.08.21.15.16.40;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	99.12.13.17.04.17;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	99.07.07.15.19.36;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.09.03.18.23.46;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.04.24.23.07.41;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.03.12.23.00.34;	author tom;	state Exp;
branches;
next	;


desc
@@


3.3
log
@Feb 2004
@
text
@/* $Log: writehdr.c,v $
 * Revision 3.2  2004/01/02  21:23:12  tom
 * splint cleaning
 *
 * Revision 3.0  2003/08/21  15:16:40  tom
 * 21Aug2003
 *
 * Revision 2.3  1999/12/13  17:04:17  tom
 * tov revision
 *
 * Revision 2.2  1999/07/07  15:19:36  tom
 * get scaling constants from imgutil.h
 *
 * Revision 2.1  1996/09/03  18:23:46  tom
 * set ntype properly
 *
 * Revision 2.0  1996/04/24  23:07:41  tom
 * new library release
 *
 * Revision 1.1  1996/03/12  23:00:34  tom
 * Initial revision
 *
 * Revision 1.4  1995/11/10  18:48:23  tom
 * remove petutil parent directory from include statements
 *
 * Revision 1.3  1994/10/03  16:17:13  tom
 * standard format with indent
 *
 * Revision 1.2  1994/05/18  15:53:30  tom
 * changed $Id: writehdr.c,v 3.2 2004/01/02 21:23:12 tom Exp tom $ to $Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 3.2 2004/01/02 21:23:12 tom Exp tom $
 * */
/*	========================================================================
 *	Module:			writehdr.c
 *	Date:			Mar 2003
 *	Author:			Tom Videen
 *	Description:	Write an hdr file
 *	Algorithm:
 *	1)  Copy the hdr structure to OS32_header structure (tmp).
 *		All real numbers must be converted from IEEE format to OS32 format.
 *	2)  Add or change the following to the header:
 *			outfile -   name of output file
 *			uid     -   user's id
 *			today   -   date
 *			ntype   -   code number for type of processing
 *			nslices -   number of slces
 *	3)  Write new structure to output file 
 *	========================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 3.2 2004/01/02 21:23:12 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <imgutil.h>
#include <endian.h>

int             writehdr (hdr, outfile, uid, today, processing, nslices)
	HEADER_DATA    *hdr;
	char           *outfile;
	char           *uid;
	char           *today;
	int             processing;
	short           nslices;
{
    union temp_short {
        short           s[128];
        char            c[256];
    }               tmp;

    union temp_long {
        long            l;
        short           s[2];
    }               conv;

    union temp_zero {
        long            l;
        short           s[2];
    }               zero;

	FILE           *fp;
	char            fname[MAXFNAME];
	char           *ext;
	float           factor;
	int				i, j;
    long            nbytes = 256;
	float           fzero = 0.;

	zero.l = ieee2pe (&fzero);

	(void) strcpy (fname, outfile);
	ext = strrchr (fname, '.');
	if (ext != NULL)
		(void) strcpy (ext, ".hdr");

	if ((fp = fopen (fname, "w")) == (FILE *) NULL) {
		fprintf (stderr, "ERROR [writehdr]: opening %s\n", fname);
		return (ERROR);
	}

	/* Shorts	*/

	tmp.s[15] = nslices;
    tmp.s[16] = hdr->scantime;
    tmp.s[28] = hdr->rcontype;
    tmp.s[29] = hdr->resolution;
    tmp.s[36] = hdr->ntype;
    tmp.s[37] = hdr->unused_1;
    for (i = 0; i < 26; i++)
        tmp.s[102 + i] = hdr->unused_2[i];

    /* Longs and Floats */
    /* CONSTCOND */
    if (__BYTE_ORDER == __LITTLE_ENDIAN)
        j = 1;
    else
        j = 0;

	conv.l = ieee2pe (&hdr->totalcnts);
    tmp.s[42] = conv.s[0 + j];
    tmp.s[43] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->scancnts);
    tmp.s[44] = conv.s[0 + j];
    tmp.s[45] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->scanst);
    tmp.s[46] = conv.s[0 + j];
    tmp.s[47] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->scanlen);
    tmp.s[48] = conv.s[0 + j];
    tmp.s[49] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->framelen);
    tmp.s[50] = conv.s[0 + j];
    tmp.s[51] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->tau);
    tmp.s[52] = conv.s[0 + j];
    tmp.s[53] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->pettcnv1);
    tmp.s[54] = conv.s[0 + j];
    tmp.s[55] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->aflow1);
    tmp.s[56] = conv.s[0 + j];
    tmp.s[57] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->bflow1);
    tmp.s[58] = conv.s[0 + j];
    tmp.s[59] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->bvfactor1);
    tmp.s[60] = conv.s[0 + j];
    tmp.s[61] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->aoxygen1);
    tmp.s[62] = conv.s[0 + j];
    tmp.s[63] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->boxygen1);
    tmp.s[64] = conv.s[0 + j];
    tmp.s[65] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->awater1);
    tmp.s[66] = conv.s[0 + j];
    tmp.s[67] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->bwater1);
    tmp.s[68] = conv.s[0 + j];
    tmp.s[69] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->o2cnts1);
    tmp.s[70] = conv.s[0 + j];
    tmp.s[71] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->oxycont1);
    tmp.s[72] = conv.s[0 + j];
    tmp.s[73] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->decay_factor1);
    tmp.s[74] = conv.s[0 + j];
    tmp.s[75] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->pettcnv2);
    tmp.s[76] = conv.s[0 + j];
    tmp.s[77] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->aflow2);
    tmp.s[78] = conv.s[0 + j];
    tmp.s[79] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->bflow2);
    tmp.s[80] = conv.s[0 + j];
    tmp.s[81] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->bvfactor2);
    tmp.s[82] = conv.s[0 + j];
    tmp.s[83] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->aoxygen2);
    tmp.s[84] = conv.s[0 + j];
    tmp.s[85] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->boxygen2);
    tmp.s[86] = conv.s[0 + j];
    tmp.s[87] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->awater2);
    tmp.s[88] = conv.s[0 + j];
    tmp.s[89] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->bwater2);
    tmp.s[90] = conv.s[0 + j];
    tmp.s[91] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->o2cnts2);
    tmp.s[92] = conv.s[0 + j];
    tmp.s[93] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->oxycont2);
    tmp.s[94] = conv.s[0 + j];
    tmp.s[95] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->decay_factor2);
    tmp.s[96] = conv.s[0 + j];
    tmp.s[97] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->pieslope);
    tmp.s[98] = conv.s[0 + j];
    tmp.s[99] = conv.s[1 - j];

	conv.l = ieee2pe (&hdr->efactor);
    tmp.s[100] = conv.s[0 + j];
    tmp.s[101] = conv.s[1 - j];

	if (processing == PROC_OEF) {
		tmp.s[36] = 11;					/* ntype	*/
		factor = 1 / SCALE_OEF;
		conv.l = ieee2pe (&factor);
    	tmp.s[62] = conv.s[0 + j];		/* aoxygen1	*/
    	tmp.s[63] = conv.s[1 - j];
    	tmp.s[64] = zero.s[0 + j];		/* boxygen1	*/
    	tmp.s[65] = zero.s[1 - j];
    	tmp.s[66] = zero.s[0 + j];		/* awater1	*/
    	tmp.s[67] = zero.s[1 - j];
    	tmp.s[68] = zero.s[0 + j];		/* bwater1	*/
    	tmp.s[69] = zero.s[1 - j];
    	tmp.s[70] = zero.s[0 + j];		/* o2cnts1	*/
    	tmp.s[71] = zero.s[1 - j];
    	tmp.s[72] = zero.s[0 + j];		/* oxycont1	*/
    	tmp.s[73] = zero.s[1 - j];
		conv.l = ieee2pe (&hdr->pettcnv1);
    	tmp.s[54] = conv.s[0 + j];		/* pettcnv1	*/
    	tmp.s[55] = conv.s[1 - j];

	} else if (processing == PROC_CMRO2) {
		tmp.s[36] = 12;					/* ntype	*/
		factor = 1 / SCALE_CMRO2;
		conv.l = ieee2pe (&factor);
    	tmp.s[62] = conv.s[0 + j];		/* aoxygen1	*/
    	tmp.s[63] = conv.s[1 - j];
    	tmp.s[64] = zero.s[0 + j];		/* boxygen1	*/
    	tmp.s[65] = zero.s[1 - j];
    	tmp.s[66] = zero.s[0 + j];		/* awater1	*/
    	tmp.s[67] = zero.s[1 - j];
    	tmp.s[68] = zero.s[0 + j];		/* bwater1	*/
    	tmp.s[69] = zero.s[1 - j];
    	tmp.s[70] = zero.s[0 + j];		/* o2cnts1	*/
    	tmp.s[71] = zero.s[1 - j];
    	tmp.s[72] = zero.s[0 + j];		/* oxycont1	*/
    	tmp.s[73] = zero.s[1 - j];
		conv.l = ieee2pe (&hdr->pettcnv1);
    	tmp.s[54] = conv.s[0 + j];		/* pettcnv1	*/
    	tmp.s[55] = conv.s[1 - j];

	} else if (processing == PROC_CBF) {
		tmp.s[36] = 2;					/* ntype	*/
    	tmp.s[56] = zero.s[0 + j];		/* aflow1	*/
    	tmp.s[57] = zero.s[1 - j];
		factor = 1 / SCALE_CBF;
		conv.l = ieee2pe (&factor);
    	tmp.s[58] = conv.s[0 + j];		/* bflow1	*/
    	tmp.s[59] = conv.s[1 - j];
		conv.l = ieee2pe (&hdr->pettcnv1);
    	tmp.s[54] = conv.s[0 + j];		/* pettcnv1	*/
    	tmp.s[55] = conv.s[1 - j];

	} else if (processing == PROC_CBV) {
		tmp.s[36] = 3;					/* ntype	*/
		factor = 1 / SCALE_CBV;
		conv.l = ieee2pe (&factor);
    	tmp.s[60] = conv.s[0 + j];		/* bvfactor1	*/
    	tmp.s[61] = conv.s[1 - j];
		conv.l = ieee2pe (&hdr->pettcnv1);
    	tmp.s[54] = conv.s[0 + j];		/* pettcnv1	*/
    	tmp.s[55] = conv.s[1 - j];
	}

    /* CONSTCOND  */
    if (__BYTE_ORDER == __LITTLE_ENDIAN)
        swap_byte (tmp.c, nbytes);

	/* Strings	*/
    for (i = 0; i < 14; i++)
        tmp.c[i] = hdr->scanner[i];
    for (i = 0; i < 8; i++)
        tmp.c[14 + i] = hdr->scanname[i];
    for (i = 0; i < 8; i++)
        tmp.c[22 + i] = hdr->scandate[i];
    for (i = 0; i < 10; i++)
        tmp.c[34 + i] = hdr->compound[i];
    for (i = 0; i < 12; i++)
        tmp.c[44 + i] = hdr->filter[i];
    for (i = 0; i < 8; i++)
        tmp.c[60 + i] = today[i];
    for (i = 0; i < 4; i++)
        tmp.c[68 + i] = uid[i];
    for (i = 0; i < 8; i++)
        tmp.c[76 + i] = hdr->piename[i];

	if (fwrite (tmp.c, 1, nbytes, fp) != nbytes) {
		fprintf (stderr, "ERROR [writehdr]: writing %s\n", fname);
		return (ERROR);
	}
	(void) fclose (fp);
	return (OK);
}
@


3.2
log
@splint cleaning
@
text
@d2 3
d30 1
a30 1
 * changed $Id: writehdr.c,v 3.0 2003/08/21 15:16:40 tom Exp tom $ to $Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 3.0 2003/08/21 15:16:40 tom Exp tom $
d51 1
a51 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 3.0 2003/08/21 15:16:40 tom Exp tom $";
@


3.0
log
@21Aug2003
@
text
@d2 3
d27 1
a27 1
 * changed $Id: writehdr.c,v 2.3 1999/12/13 17:04:17 tom Exp tom $ to $Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 2.3 1999/12/13 17:04:17 tom Exp tom $
d46 1
d48 1
a48 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 2.3 1999/12/13 17:04:17 tom Exp tom $";
d94 2
a95 1
	(void) strcpy (ext, ".hdr");
@


2.3
log
@tov revision
@
text
@d2 3
d24 1
a24 1
 * changed $Id: writehdr.c,v 2.2 1999/07/07 15:19:36 tom Exp tom $ to $Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 2.2 1999/07/07 15:19:36 tom Exp tom $
d28 1
a28 1
 *	Date:			27-Sep-93
a30 12
 *
 *	Input:
 *		header  -   hdr structure
 *		outfile -   name of output file
 *		userid  -   user's id  
 *		today   -   date
 *		processing - type of processing
 *		nslices -   number of slces
 *	 
 *	Output:
 *		creates the file "outfile"
 *	 
d32 1
a32 2
 *	1)  Open the outfile.
 *	2)  Copy the hdr structure in "header" to a OS32-hdr structure:
d34 1
a34 1
 *	3)  Add or change the following to the header:
d36 1
a36 1
 *			userid  -   user's id  
d40 1
a40 2
 *	4)  Write the new structure to the output file and close.
 *	
d44 1
a44 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 2.2 1999/07/07 15:19:36 tom Exp tom $";
d53 1
d55 2
a56 2
int	writehdr (header, outfile, userid, today, processing, nslices)
	HEADER_DATA    *header;
d58 1
a58 1
	char           *userid;
d63 17
a79 1
	char            filename[255];
a80 1
	float           zero = 0.;
d82 3
a84 2
	FILE           *hdrfp;
	OS32_HEADER_DATA *os32_header;
d86 1
a86 3
	strcpy (filename, outfile);
	ext = strrchr (filename, '.');
	strcpy (ext, ".hdr");
d88 6
a93 2
	if ((hdrfp = fopen (filename, "w")) == (FILE *) NULL) {
		printf (" Error: Cannot open header file %s\n", filename);
a95 2
	os32_header = (OS32_HEADER_DATA *) malloc (sizeof (HEADER_DATA));
	memcpy (os32_header, header, sizeof (OS32_HEADER_DATA));
d97 1
a97 3
	os32_header->slices = nslices;
	strncpy (os32_header->initials, userid, sizeof (os32_header->initials));
	strncpy (os32_header->procdate, today, sizeof (os32_header->procdate));
d99 8
a106 30
	os32_header->totalcnts = ieee2pe (&header->totalcnts);
	os32_header->scancnts = ieee2pe (&header->scancnts);
	os32_header->scanst = ieee2pe (&header->scanst);
	os32_header->scanlen = ieee2pe (&header->scanlen);
	os32_header->framelen = ieee2pe (&header->framelen);
	os32_header->tau = ieee2pe (&header->tau);
	os32_header->pettcnv1 = ieee2pe (&header->pettcnv1);
	os32_header->aflow1 = ieee2pe (&header->aflow1);
	os32_header->bflow1 = ieee2pe (&header->bflow1);
	os32_header->bvfactor1 = ieee2pe (&header->bvfactor1);
	os32_header->aoxygen1 = ieee2pe (&header->aoxygen1);
	os32_header->boxygen1 = ieee2pe (&header->boxygen1);
	os32_header->awater1 = ieee2pe (&header->awater1);
	os32_header->bwater1 = ieee2pe (&header->bwater1);
	os32_header->o2cnts1 = ieee2pe (&header->o2cnts1);
	os32_header->oxycont1 = ieee2pe (&header->oxycont1);
	os32_header->decay_factor1 = ieee2pe (&header->decay_factor1);
	os32_header->pettcnv2 = ieee2pe (&header->pettcnv2);
	os32_header->aflow2 = ieee2pe (&header->aflow2);
	os32_header->bflow2 = ieee2pe (&header->bflow2);
	os32_header->bvfactor2 = ieee2pe (&header->bvfactor2);
	os32_header->aoxygen2 = ieee2pe (&header->aoxygen2);
	os32_header->boxygen2 = ieee2pe (&header->boxygen2);
	os32_header->awater2 = ieee2pe (&header->awater2);
	os32_header->bwater2 = ieee2pe (&header->bwater2);
	os32_header->o2cnts2 = ieee2pe (&header->o2cnts2);
	os32_header->oxycont2 = ieee2pe (&header->oxycont2);
	os32_header->decay_factor2 = ieee2pe (&header->decay_factor2);
	os32_header->pieslope = ieee2pe (&header->pieslope);
	os32_header->efactor = ieee2pe (&header->efactor);
d108 127
d236 18
a253 9
		os32_header->ntype = 11;
		factor = 1/SCALE_OEF;
		os32_header->aoxygen1 = ieee2pe (&factor);
		os32_header->boxygen1 = ieee2pe (&zero);
		os32_header->awater1 = ieee2pe (&zero);
		os32_header->bwater1 = ieee2pe (&zero);
		os32_header->o2cnts1 = ieee2pe (&zero);
		os32_header->oxycont1 = ieee2pe (&zero);
		os32_header->pettcnv1 = ieee2pe (&header->pettcnv1);
d256 18
a273 9
		os32_header->ntype = 12;
		factor = 1/SCALE_CMRO2;
		os32_header->aoxygen1 = ieee2pe (&factor);
		os32_header->boxygen1 = ieee2pe (&zero);
		os32_header->awater1 = ieee2pe (&zero);
		os32_header->bwater1 = ieee2pe (&zero);
		os32_header->o2cnts1 = ieee2pe (&zero);
		os32_header->oxycont1 = ieee2pe (&zero);
		os32_header->pettcnv1 = ieee2pe (&header->pettcnv1);
d276 10
a285 5
		os32_header->ntype = 2;
		factor = 1/SCALE_CBF;
		os32_header->aflow1 = ieee2pe (&zero);
		os32_header->bflow1 = ieee2pe (&factor);
		os32_header->pettcnv1 = ieee2pe (&header->pettcnv1);
d288 8
a295 4
		os32_header->ntype = 3;
		factor = 1/SCALE_CBV;
		os32_header->bvfactor1 = ieee2pe (&factor);
		os32_header->pettcnv1 = ieee2pe (&header->pettcnv1);
a296 1
	fwrite (os32_header, sizeof (HEADER_DATA), 1, hdrfp);
d298 27
a324 2
	fclose (hdrfp);
	free (os32_header);
@


2.2
log
@get scaling constants from imgutil.h
@
text
@d2 3
d21 1
a21 1
 * changed $Id: writehdr.c,v 2.1 1996/09/03 18:23:46 tom Exp tom $ to $Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 2.1 1996/09/03 18:23:46 tom Exp tom $
d55 1
a55 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 2.1 1996/09/03 18:23:46 tom Exp tom $";
d61 2
d149 1
a149 1
		os32_header->ntype == 2;
d156 1
a156 1
		os32_header->ntype == 3;
@


2.1
log
@set ntype properly
@
text
@d2 3
d18 1
a18 1
 * changed $Id: writehdr.c,v 2.0 1996/04/24 23:07:41 tom Exp tom $ to $Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 2.0 1996/04/24 23:07:41 tom Exp tom $
d52 1
a52 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/writehdr.c,v 2.0 1996/04/24 23:07:41 tom Exp tom $";
d123 1
a123 1
		factor = 0.001;
d134 1
a134 1
		factor = 0.001;
d145 1
a145 1
		factor = 0.02;
d152 1
a152 1
		factor = 0.01;
@


2.0
log
@new library release
@
text
@d2 3
d15 1
a15 1
 * changed $Id: writehdr.c,v 1.1 1996/03/12 23:00:34 tom Exp tom $ to $Header: /home/petsun19/tom/src/libimgutil/RCS/writehdr.c,v 1.1 1996/03/12 23:00:34 tom Exp tom $
d49 1
a49 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libimgutil/RCS/writehdr.c,v 1.1 1996/03/12 23:00:34 tom Exp tom $";
d62 1
a62 1
	char           *processing;
d118 10
a127 5
	if (os32_header->ntype == 1) {
		if (strcmp (processing, "oef") == 0)
			os32_header->ntype = 11;
		else if (strcmp (processing, "cmro2") == 0)
			os32_header->ntype = 12;
d129 2
d140 2
a141 1
	} else if (os32_header->ntype == 2 || os32_header->ntype == 4) {
d147 2
a148 1
	} else if (os32_header->ntype == 3) {
@


1.1
log
@Initial revision
@
text
@d2 3
d12 1
a12 1
 * changed $Id: writehdr.c,v 1.4 1995/11/10 18:48:23 tom Exp tom $ to $Header: /home/npggw/tom/src/t88mean/RCS/writehdr.c,v 1.4 1995/11/10 18:48:23 tom Exp tom $
d45 4
d50 1
d52 1
a52 2
#include <myvalues.h>	/* ERROR */
#include <imgutil.h>	/* ieee2pe */
d54 1
a54 6
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/writehdr.c,v 1.4 1995/11/10 18:48:23 tom Exp tom $";
#endif

int 
writehdr (header, outfile, userid, today, processing, nslices)
d78 1
a78 1
	bcopy (header, os32_header, sizeof (OS32_HEADER_DATA));
@
