head	3.3;
access;
symbols;
locks; strict;
comment	@ * @;


3.3
date	2004.02.12.22.08.52;	author tom;	state Exp;
branches;
next	3.2;

3.2
date	2004.01.02.21.23.12;	author tom;	state Exp;
branches;
next	3.0;

3.0
date	2003.08.21.15.16.40;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2000.07.18.15.57.37;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.05.16.19.44.00;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.04.24.23.07.41;	author tom;	state Exp;
branches;
next	;


desc
@new library release
@


3.3
log
@Feb 2004
@
text
@/*	$Id: readhdr.c,v 3.2 2004/01/02 21:23:12 tom Exp tom $
	$Log: readhdr.c,v $
 * Revision 3.2  2004/01/02  21:23:12  tom
 * splint cleaning
 *
 * Revision 3.0  2003/08/21  15:16:40  tom
 * 21Aug2003
 *
 * Revision 2.2  2000/07/18  15:57:37  tom
 * remove error message
 *
 * Revision 2.1  1996/05/16  19:44:00  tom
 * check existence of fp before writing
 *
 * Revision 2.0  1996/04/24  23:07:41  tom
 * new library release
 *
 */
/* ===============================================================================
 *	Module:			readhdr.c
 *	Date:			Apr 1996
 *	Author:			Tom Videen
 *	Description:	Read an 'hdr' file into HEADER_DATA.
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/readhdr.c,v 3.2 2004/01/02 21:23:12 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <imgutil.h>

int             readhdr (fname, hdr, fp)
	char           *fname;			 /* image file name */
	HEADER_DATA    *hdr;			 /* hdr structure */
	FILE           *fp;			 /* rec file pointer */
{
	char           *hdrname;		 /* hdr fname */
	char           *local_hdrname;	 /* local hdr fname */
	char           *c;

	hdrname = (char *) calloc (MAXPATH, sizeof (char));
	if (hdrname == NULL)
		return (ERROR);
	local_hdrname = (char *) calloc (MAXPATH, sizeof (char));
	if (local_hdrname == NULL) {
		free (hdrname);
		return (ERROR);
	}
	(void) strcpy (hdrname, fname);
	c = strrchr (hdrname, '.');
	if (c == NULL)
		c = strrchr (hdrname, '\0');
	(void) strcpy (c, ".hdr");

	c = strrchr (hdrname, '/');
	if (c == NULL)
		(void) strcpy (local_hdrname, hdrname);
	else
		(void) strcpy (local_hdrname, c + 1);

	if (gethdr (local_hdrname, hdr) == 0) {
		fprintf (stdout, "HDR = %s\n", local_hdrname);
		if (fp != NULL)
			fprintf (fp, "%s\n", local_hdrname);
	} else if (gethdr (hdrname, hdr) == 0) {
		fprintf (stdout, "HDR = %s\n", hdrname);
		if (fp != NULL)
			fprintf (fp, "%s\n", hdrname);
	} else {
		free (hdrname);
		free (local_hdrname);
		return (ERROR);
	}
	free (hdrname);
	free (local_hdrname);
	return (OK);
}
@


3.2
log
@splint cleaning
@
text
@d1 1
a1 1
/*	$Id: readhdr.c,v 3.0 2003/08/21 15:16:40 tom Exp tom $
d3 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/readhdr.c,v 3.0 2003/08/21 15:16:40 tom Exp tom $";
@


3.0
log
@21Aug2003
@
text
@d1 1
a1 1
/*	$Id: readhdr.c,v 2.2 2000/07/18 15:57:37 tom Exp $
d3 3
d18 1
a18 1
 *	Date:			Apr-96
d23 1
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/readhdr.c,v 2.2 2000/07/18 15:57:37 tom Exp $";
d30 1
a30 1
#include <string.h>
d43 2
d46 4
@


2.2
log
@remove error message
@
text
@d1 1
a1 1
/*	$Id: readhdr.c,v 2.1 1996/05/16 19:44:00 tom Exp tom $
d3 3
d7 1
a7 1
 * check existence of recfp before writing
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/readhdr.c,v 2.1 1996/05/16 19:44:00 tom Exp tom $";
d29 2
a30 2
int             readhdr (filename, hdr, recfp)
	char           *filename;		 /* image file name */
d32 1
a32 1
	FILE           *recfp;			 /* rec file pointer */
d34 2
a35 2
	char           *hdrname;		 /* hdr filename */
	char           *local_hdrname;	 /* local hdr filename */
d40 1
a40 1
	strcpy (hdrname, filename);
d44 1
a44 1
	strcpy (c, ".hdr");
d48 1
a48 1
		strcpy (local_hdrname, hdrname);
d50 1
a50 1
		strcpy (local_hdrname, c + 1);
d53 3
a55 3
		printf ("HDR = %s\n", local_hdrname);
		if (recfp != NULL)
			fprintf (recfp, "%s\n", local_hdrname);
d57 3
a59 3
		printf ("HDR = %s\n", hdrname);
		if (recfp != NULL)
			fprintf (recfp, "%s\n", hdrname);
a60 1
		/* printf ("ERROR [readhdr]:  hdrfile not found as %s or %s\n", local_hdrname, hdrname); */
@


2.1
log
@check existence of recfp before writing
@
text
@d1 1
a1 1
/*	$Id: readhdr.c,v 2.0 1996/04/24 23:07:41 tom Exp tom $
d3 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libimgutil/RCS/readhdr.c,v 2.0 1996/04/24 23:07:41 tom Exp tom $";
d58 1
a58 2
		printf ("ERROR [readhdr]:  hdrfile not found\n as %s\n or %s\n", local_hdrname,
			hdrname);
@


2.0
log
@new library release
@
text
@d1 5
a5 2
/*	$Id$
	$Log$
d15 1
a15 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libimgutil/RCS/readhdr.c,v 1.1 1996/03/12 23:00:34 tom Exp tom $";
d48 2
a49 1
		fprintf (recfp, "%s\n", local_hdrname);
d52 2
a53 1
		fprintf (recfp, "%s\n", hdrname);
@
