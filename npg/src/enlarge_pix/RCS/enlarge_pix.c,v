head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.02.16.14.26.23;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.26.20.53.46;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.07.12.21.09.55;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.07.12.15.46.11;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Feb 2004
@
text
@/*	$Log: enlarge_pix.c,v $
 * Revision 1.3  2002/11/26  20:53:46  tom
 * *** empty log message ***
 *
 * Revision 1.2  1999/07/12  21:09:55  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/07/12  15:46:11  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			enlarge_pix.c
 *	Date:			Jul 1999
 *	Author:			Tom Videen
 *	Description:	Resample ECAT image creating larger pixels.
 * ===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/enlarge_pix/RCS/enlarge_pix.c,v 1.3 2002/11/26 20:53:46 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <imgutil.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <pettable.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	FILE           *recfp;			 /* rec file pointer */
	char           *recfile;		 /* rec filename */
	float        ***img;			 /* input image */
	float        ***new;			 /* output image */
	char           *fname1;			 /* file to process */
	char           *fname2;			 /* file to write */
	int             frm;			 /* frame number to process */
	int             trmult;			 /* transaxial multiplier */
	int             axmult;			 /* axial multiplier */
	char            runstamp[40];	 /* version, date and userid info */
	int             nx1, ny1, nz1;	 /* array dimensions */
	int             nx2, ny2, nz2;	 /* array dimensions */
	long            x0, y0, z0;		 /* array indices */
	long            x, y, z;		 /* array indices */
	long            i, j, k;		 /* array indices */
	long            num;
	float           sum;

/*
 *	Get command line arguments and open rec file
 */

	fname1 = argv[1];
	fname2 = argv[2];
	trmult = atoi (argv[3]);
	axmult = atoi (argv[4]);
	if (trmult < 1 || trmult > 10 || axmult < 1 || axmult > 10) {
		fprintf (stderr, "ERROR [enlarge_pix]: Choose factors from 1-10\n");
		return (ERROR);
	}
	recfile = argv[5];
	i = 6;
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[i], argv[i + 1], argv[i + 2],
		 argv[i + 4], argv[i + 5], argv[11]);

	recfp = fopen (recfile, "a");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [enlarge_pix]: Cannot open %s\n", recfile);
		return (ERROR);
	}
/*
 *	Get main header and subheader.
 *	Store RCS version in mh->sw_revision.
 */

	frm = 1;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file = make_imgfile (fname1);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [enlarge_pix]: Could not open %s\n", fname1);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [enlarge_pix]: Could not get MainHeader from %s\n", fname1);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		if (frm == 1) {
			indx.frm = 2;
			if (existimgfrm (file, &indx) == ERROR) {
				indx.frm = 3;
				if (existimgfrm (file, &indx) == ERROR) {
					fprintf (stderr, "ERROR [enlarge_pix]: cannot find %s frame 1, 2 or 3\n", fname1);
					return (ERROR);
				}
			}
		} else {
			fprintf (stderr, "ERROR [enlarge_pix]: cannot find %s frame %d\n",
				 fname1, frm);
			return (ERROR);
		}
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [enlarge_pix]: Could not read file subheader in %s\n", fname1);
		return (ERROR);
	}
	mh = file->mh;
	sh = file->sh;
	if ((img = readtensor (file, &indx)) == NULL)
		return (ERROR);
	recout (recfp, fname1);
	(void) save_rcs (file, rcsid, runstamp);
	nx1 = sh->dim1;
	ny1 = sh->dim2;
	nz1 = sh->dim3;
	nx2 = (long) ((float) nx1 / (float) trmult + 0.95);
	ny2 = (long) ((float) ny1 / (float) trmult + 0.95);
	nz2 = (long) ((float) nz1 / (float) axmult + 0.95);
	fprintf (stdout, "New dimensions = %d x %d x %d   (%.4f x %.4f x %.4f cm)\n",
		nx2, ny2, nz2, sh->sample_size_1 * (float) trmult,
		sh->sample_size_2 * (float) trmult, sh->sample_size_3 * (float) axmult);

	if ((new = f3tensor (1, nz2, 1, ny2, 1, nx2)) == NULL) {
		fprintf (stderr, "ERROR [enlarge_pix]: malloc\n");
		return (ERROR);
	}

/*	Resample  */

	for (z0 = 1; z0 <= nz2; z0++) {
		for (y0 = 1; y0 <= ny2; y0++) {
			for (x0 = 1; x0 <= nx2; x0++) {
				num = 0;
				sum = 0.;
				for (i = 0; i < axmult; i++) {
					z = (z0 - 1) * axmult + 1 + i;
					if (z <= nz1) {
						for (j = 0; j < trmult; j++) {
							y = (y0 - 1) * trmult + 1 + j;
							if (y <= ny1) {
								for (k = 0; k < trmult; k++) {
									x = (x0 - 1) * trmult + 1 + k;
									if (x <= nx1) {
										sum += img[z][y][x];
										num++;
									}
								}
							}
						}
					}
				}
				if (num > 0)
					new[z0][y0][x0] = sum / (float) num;
				else
					new[z0][y0][x0] = 0;
			}
		}
	}

/*
 *	Write image.
 */

	indx.frm = 1;
	printf ("Writing filtered image %s, frame %d\n", fname2, indx.frm);
	close_imgfile (file);
	free (file->name);
	file->name = fname2;
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [enlarge_pix]: Could not open %s\n", fname2);
		return (ERROR);
	}
	mh->nframe = indx.frm;
	mh->nplane = nz2;
	mh->slicesep = mh->slicesep * (float) axmult;
	sh->dim1 = nx2;
	sh->dim2 = ny2;
	sh->dim3 = nz2;
	sh->sample_size_1 = sh->sample_size_1 * (float) trmult;
	sh->sample_size_2 = sh->sample_size_2 * (float) trmult;
	sh->sample_size_3 = sh->sample_size_3 * (float) axmult;

	if (put_mh (file) == ERROR)
		return (ERROR);
	if (writetensor (file, &indx, new) == ERROR)
		return (ERROR);
	free_f3tensor (img, 1, nz1, 1, ny1, 1, nx1);
	free_f3tensor (new, 1, nz2, 1, ny2, 1, nx2);
	free_imgfile (file);
	(void) fclose (recfp);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d13 1
a13 1
 *	Date:			Jul-99
d18 2
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/enlarge_pix/RCS/enlarge_pix.c,v 1.2 1999/07/12 21:09:55 tom Exp tom $";
d32 1
d72 1
a72 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[i], argv[i + 1], argv[i + 2],
d125 1
a125 1
	save_rcs (file, rcsid, runstamp);
d182 1
a182 1
	strcpy (file->mode, "w");
d204 1
a204 1
	fclose (recfp);
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/enlarge_pix/RCS/enlarge_pix.c,v 1.1 1999/07/12 15:46:11 tom Exp tom $";
d19 1
a19 1
#include <math.h>
a23 1
#include <nr.h>
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/enlarge_pix/RCS/enlarge_pix.c,v 1.2 1999/07/12 15:45:18 tom Exp tom $";
d159 1
a159 1
					new[z0][y0][x0] = sum / num;
@
