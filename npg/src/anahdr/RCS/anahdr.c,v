head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	2009.05.15.15.19.22;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2008.10.28.21.25.30;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.17.26.49;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.27.21.26.29;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.49.12;	author tom;	state Exp;
branches;
next	;


desc
@@


2.2
log
@*** empty log message ***
@
text
@/*	$Log: anahdr.c,v $
 * Revision 2.1  2008/10/28  21:25:30  tom
 * use dbh.h
 *
 * Revision 2.0  2004/02/13  17:26:49  tom
 * Feb 2004
 *
 * Revision 1.2  2000/01/27  21:26:29  tom
 * *** empty log message ***
 *
 * Revision 1.1  1997/04/30  18:49:12  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anahdr.c
 *	Date:			Apr 1997
 *	Author:			Tom Videen
 *	Description:	Read analyze hdr
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anahdr/RCS/anahdr.c,v 2.1 2008/10/28 21:25:30 tom Exp tom $";
#endif

#include <stdio.h>
#include <string.h>
#include <dbh.h>				 /* dsr */

int main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;
	FILE           *fd_hdr;
	char           *ANALYZE_hdr;
	int				i;
	short			sptr[5];
	float			forg[4];

	if (argc != 2) {
		fprintf (stdout, "Usage: anahdr ANALYZE_hdr\n");
		return (1);
	}
	ANALYZE_hdr = argv[1];
	if ((fd_hdr = fopen (ANALYZE_hdr, "r")) == 0) {
		fprintf (stderr, "ERROR [anahdr]: Cannot open: %s\n", ANALYZE_hdr);
		return (1);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anahdr]: Reading: %s\n", ANALYZE_hdr);
		return (1);
	}
	(void) fclose (fd_hdr);

	memcpy (sptr,&(hdr.hist.originator), 10); 
	memcpy (forg,&(hdr.hist.generated[1]), 16);

	printf ("sizeof_hdr    %d\n", hdr.hk.sizeof_hdr);
	printf ("data_type     %s\n", hdr.hk.data_type);
	printf ("db_name       %s\n", hdr.hk.db_name);
	printf ("extents       %d\n", hdr.hk.extents);
	printf ("session_error %d\n", hdr.hk.session_error);
	printf ("regular       %c\n", hdr.hk.regular);
	printf ("hkey_un0      %c\n\n", hdr.hk.hkey_un0);

	for (i=0; i < 8; i++)
		printf ("dim[%d]      %d\n", i, hdr.dime.dim[i]);
	printf ("vox_units   %s\n", hdr.dime.vox_units);
	printf ("cal_units   %s\n", hdr.dime.cal_units);
	printf ("unused1     %d\n", hdr.dime.unused1);
	printf ("datatype    %d\n", hdr.dime.datatype);
	printf ("bitpix      %d\n", hdr.dime.bitpix);
	printf ("dim_un0     %d\n", hdr.dime.dim_un0);
	for (i=0; i < 8; i++)
		printf ("pixdim[%d]   %f\n", i, hdr.dime.pixdim[i]);
	printf ("vox_offset  %f\n", hdr.dime.vox_offset);
	printf ("roi_scale   %f\n", hdr.dime.roi_scale);
	printf ("funused1    %f\n", hdr.dime.funused1);
	printf ("funused2    %f\n", hdr.dime.funused2);
	printf ("cal_max     %f\n", hdr.dime.cal_max);
	printf ("cal_min     %f\n", hdr.dime.cal_min);
	printf ("compressed  %d\n", hdr.dime.compressed);
	printf ("verified    %d\n", hdr.dime.verified);
	printf ("glmax       %d\n", hdr.dime.glmax);
	printf ("glmin       %d\n\n", hdr.dime.glmin);

	printf ("descrip     %s\n", hdr.hist.descrip);
	printf ("aux_file    %s\n", hdr.hist.aux_file);
	printf ("orient      %c\n", hdr.hist.orient);
/*
	printf ("originator  %s\n", hdr.hist.originator);
*/
	for (i = 0; i < 5; i++) 
		printf ("orig[%d]   %d\n", i+1, sptr[i]);
	for (i = 0; i < 4; i++) 
		printf ("origin[%d]   %f\n", i+1, forg[i]);

	printf ("generated   %s\n", hdr.hist.generated);
	printf ("scannum     %s\n", hdr.hist.scannum);
	printf ("patient_id  %s\n", hdr.hist.patient_id);
	printf ("exp_date    %s\n", hdr.hist.exp_date);
	printf ("exp_time    %s\n", hdr.hist.exp_time);
	printf ("hist_un0    %s\n", hdr.hist.hist_un0);
	printf ("views       %d\n", hdr.hist.views);
	printf ("vols_added  %d\n", hdr.hist.vols_added);
	printf ("start_field %d\n", hdr.hist.start_field);
	printf ("field_skip  %d\n", hdr.hist.field_skip);
	printf ("omax        %d\n", hdr.hist.omax);
	printf ("omin        %d\n", hdr.hist.omin);
	printf ("smax        %d\n", hdr.hist.smax);
	printf ("smin        %d\n", hdr.hist.smin);

	return (0);
}
@


2.1
log
@use dbh.h
@
text
@d2 3
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anahdr/RCS/anahdr.c,v 2.0 2004/02/13 17:26:49 tom Exp tom $";
d27 1
d38 2
d56 3
d91 1
d93 6
@


2.0
log
@Feb 2004
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anahdr/RCS/anahdr.c,v 1.2 2000/01/27 21:26:29 tom Exp tom $";
d24 1
a24 1
#include <ANALYZE.h>				 /* dsr */
d26 1
a26 1
main (argc, argv)
d60 3
a62 7
	printf ("unused8     %d\n", hdr.dime.unused8);
	printf ("unused9     %d\n", hdr.dime.unused9);
	printf ("unused10    %d\n", hdr.dime.unused10);
	printf ("unused11    %d\n", hdr.dime.unused11);
	printf ("unused12    %d\n", hdr.dime.unused12);
	printf ("unused13    %d\n", hdr.dime.unused13);
	printf ("unused14    %d\n", hdr.dime.unused14);
d68 8
a75 8
	printf ("funused8    %f\n", hdr.dime.funused8);
	printf ("funused9    %f\n", hdr.dime.funused9);
	printf ("funused10   %f\n", hdr.dime.funused10);
	printf ("funused11   %f\n", hdr.dime.funused11);
	printf ("funused12   %f\n", hdr.dime.funused12);
	printf ("funused13   %f\n", hdr.dime.funused13);
	printf ("compressed  %f\n", hdr.dime.compressed);
	printf ("verified    %f\n", hdr.dime.verified);
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d10 1
a10 1
 *	Date:			Apr-97
d15 1
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anahdr/RCS/anahdr.c,v 1.1 1997/04/30 18:49:12 tom Exp tom $";
d34 1
a34 1
		return (-1);
d39 1
a39 1
		return (-1);
d43 1
a43 1
		return (-1);
d45 1
a45 1
	fclose (fd_hdr);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 3
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anahdr/RCS/anahdr.c,v 2.3 1996/10/16 16:20:17 tom Exp $";
a16 2
#include <string.h>
#include <fcntl.h>
a24 1
	FILE           *fopen ();
d29 1
a29 1
		printf ("Usage: anahdr ANALYZE_hdr\n");
d46 1
a46 1
	printf ("extents       %d\n", hdr.hk.db_name);
d48 2
a49 2
	printf ("regular       %a\n", hdr.hk.regular);
	printf ("hkey_un0      %a\n\n", hdr.hk.hkey_un0);
d53 10
a62 10
	printf ("unused8     %d\n", i, hdr.dime.unused8);
	printf ("unused9     %d\n", i, hdr.dime.unused9);
	printf ("unused10    %d\n", i, hdr.dime.unused10);
	printf ("unused11    %d\n", i, hdr.dime.unused11);
	printf ("unused12    %d\n", i, hdr.dime.unused12);
	printf ("unused13    %d\n", i, hdr.dime.unused13);
	printf ("unused14    %d\n", i, hdr.dime.unused14);
	printf ("datatype    %d\n", i, hdr.dime.datatype);
	printf ("bitpix      %d\n", i, hdr.dime.bitpix);
	printf ("dim_un0     %d\n", i, hdr.dime.dim_un0);
d78 1
a78 1
	printf ("orient      %a\n", hdr.hist.orient);
@
