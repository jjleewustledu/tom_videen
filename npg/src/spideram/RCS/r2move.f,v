head	2.0;
access;
symbols;
locks; strict;
comment	@c @;


2.0
date	2004.02.20.14.34.10;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.02.21.26.52;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	93.10.04.21.55.32;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	92.04.23.21.25.39;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	92.04.13.19.12.07;	author tom;	state Exp;
branches;
next	;


desc
@Spideram function.
@


2.0
log
@Feb 2004
@
text
@CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     
C     Subroutine:   R2MOVE.FTN
C     Author:       Tom O. Videen
C     Date:         21-May-87
C     Intent:
C     .  Move a rectangular or irregular region by X and Y.
C     
C     .  Changes the values of XLOC and YLOC.
C     .  Erases and redraws the region on the Ramtek
C     .  in the last displayed image (i.e., use current values of
C     .  XLOW, XHIGH, YLOW, and YHIGH of IMAGE(n,n,1)).
C     
C     NOTE: Cannot move a region beyond the edge of the
C     .  currently displayed image.  But note that
C     .  for rectangular regions YMIN and YMAX are always within the image;
C     .  for irregular regions they may border the image
C     .  (hence, the variable I in checking y-values).
C     
C     Common Blocks from SPIDERAM.INC:
C     .  **DISPLAY  - display parameters             (read only)
C     .  **REGION   - region analysis parameters     (read & write)
C     
C     Variable Passed:
C     .  N = region number;
C     .  X,Y = amount to move in X and Y directions
C     .      (positive y-values are DOWN for all images)
C     
C     Variables:
C     .  TXLOC,TYLOC = temporary values for XLOC and YLOC;
C     .  TXMIN,TXMAX = temporary values for XMIN and XMAX;
C     .  TYMIN,TYMAX = temporary values for YMIN and YMAX;
C     
C     Uses:
C     .  P2RECT   - draws a rectangle
C     .  P2NORECT - erases a rectangle
C     .  P2IRREG  - draws an irregular region
C     .  P2NOIRRG - erases an irregular region
C     
C     Called by:  M2REGION
C     
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     rcsheader = "$Id: r2move.f,v 1.4 2002/12/02 21:26:52 tom Exp tom $"

      SUBROUTINE R2MOVE(N,X,Y)

      INTEGER*2  X,Y,TXMIN,TXMAX,TYMIN,TYMAX
      INTEGER*4  N,PTR,I
      REAL       TXLOC,TYLOC

      INCLUDE 'spideram.inc'

C     Get new values of XLOC, YLOC and MIN and MAX values

      TXLOC = XLOC(N) + FLOAT(X)
      TXMIN = XMIN(N) + X
      TXMAX = XMAX(N) + X
      TYLOC = YLOC(N) + FLOAT(Y)
      TYMIN = YMIN(N) + Y
      TYMAX = YMAX(N) + Y

C     Erase region from the old location

      IF (REGTYPE(N).EQ.'R') THEN
         CALL P2NORECT(N,REGPLANE)
      ELSE IF (REGTYPE(N).EQ.'I') THEN
         CALL P2NOIRRG(N,REGPLANE)
      ELSE
         RETURN
      END IF

C     If the region will NOT be moved off the image,
C     assign the new values of XLOC, YLOC and MIN and MAX values

      IF (TXMIN.LT.XLOW .OR. TXMAX.GT.XHIGH) GO TO 100
      IF (ORIENT.EQ.'T') THEN
         IF (TYMIN.LT.YLOW .OR. TYMAX.GT.YHIGH) GO TO 100
      ELSE
         IF (REGTYPE(N).EQ.'R') THEN
            I = 0
         ELSE
            I = 1
         END IF
         IF (TYMIN.LT.YLOW-I .OR. TYMAX.GT.YHIGH+I) GO TO 100
      END IF
      XLOC(N) = TXLOC
      XMIN(N) = TXMIN
      XMAX(N) = TXMAX
      YLOC(N) = TYLOC
      YMIN(N) = TYMIN
      YMAX(N) = TYMAX
      IF (REGTYPE(N).EQ.'I') THEN
         PTR = BVAL(N)
         DO 50 I=1,AVAL(N)
            BOUNDARY(1,PTR) = BOUNDARY(1,PTR) + X
            BOUNDARY(2,PTR) = BOUNDARY(2,PTR) + Y
            PTR = PTR+1
 50      CONTINUE
      END IF

C     Redraw the region at its new location

 100  IF (REGTYPE(N).EQ.'R') THEN
         CALL P2RECT(N,REGPLANE)
      ELSE IF (REGTYPE(N).EQ.'I') THEN
         CALL P2IRREG(N,REGPLANE)
      END IF

      RETURN
      END
@


1.4
log
@format changes plus fixes for g77
@
text
@d43 1
a43 1
C     rcsheader = "$Id: r2move.f,v 1.3 1993/10/04 21:55:32 tom Exp tom $"
@


1.3
log
@added rcsheader
@
text
@d2 40
a41 45
C
C  Subroutine:   R2MOVE.FTN
C
C  Author:       Tom O. Videen
C  Date:         21-May-87
C  Written For:  SPIDERAM Super PETT Image Display Program
C
C  Intent:
C     Move a rectangular or irregular region by X and Y.
C
C     Changes the values of XLOC and YLOC.
C     Erases and redraws the region on the Ramtek
C     in the last displayed image (i.e., use current values of
C     XLOW, XHIGH, YLOW, and YHIGH of IMAGE(n,n,1)).
C
C  NOTE: Cannot move a region beyond the edge of the
C     currently displayed image.  But note that
C     for rectangular regions YMIN and YMAX are always within the image;
C     for irregular regions they may border the image
C     (hence, the variable I in checking y-values).
C
C  Common Blocks from SPIDERAM.INC:
C     **DISPLAY  - display parameters             (read only)
C     **REGION   - region analysis parameters     (read & write)
C
C  Variable Passed:
C     N = region number;
C     X,Y = amount to move in X and Y directions
C         (positive y-values are DOWN for all images)
C
C  Variables:
C     TXLOC,TYLOC = temporary values for XLOC and YLOC;
C     TXMIN,TXMAX = temporary values for XMIN and XMAX;
C     TYMIN,TYMAX = temporary values for YMIN and YMAX;
C
C  Uses:
C
C  SPIDERAM.LIB
C     P2RECT   - draws a rectangle
C     P2NORECT - erases a rectangle
C     P2IRREG  - draws an irregular region
C     P2NOIRRG - erases an irregular region
C
C  Called by:  M2REGION
C
d43 2
a44 1
C
d46 1
a46 1
C
d50 1
a50 2
      character*256 rcsheader
C
d52 3
a54 4
      rcsheader = "$Id$"
C
C  Get new values of XLOC, YLOC and MIN and MAX values
C
d61 3
a63 3
C
C  Erase region from the old location
C
d65 1
a65 1
        CALL P2NORECT(N,REGPLANE)
d67 1
a67 1
        CALL P2NOIRRG(N,REGPLANE)
d69 1
a69 1
        RETURN
d71 4
a74 4
C
C  If the region will NOT be moved off the image,
C  assign the new values of XLOC, YLOC and MIN and MAX values
C
d77 1
a77 1
        IF (TYMIN.LT.YLOW .OR. TYMAX.GT.YHIGH) GO TO 100
d79 6
a84 6
        IF (REGTYPE(N).EQ.'R') THEN
          I = 0
        ELSE
          I = 1
        END IF
        IF (TYMIN.LT.YLOW-I .OR. TYMAX.GT.YHIGH+I) GO TO 100
d93 6
a98 6
        PTR = BVAL(N)
        DO 50 I=1,AVAL(N)
          BOUNDARY(1,PTR) = BOUNDARY(1,PTR) + X
          BOUNDARY(2,PTR) = BOUNDARY(2,PTR) + Y
          PTR = PTR+1
50      CONTINUE
d100 5
a104 5
C
C  Redraw the region at its new location
C
100   IF (REGTYPE(N).EQ.'R') THEN
        CALL P2RECT(N,REGPLANE)
d106 1
a106 1
        CALL P2IRREG(N,REGPLANE)
d108 1
a108 1
C
@


1.2
log
@Save window dump. 04/23/92 by Tom Yang
@
text
@d54 1
d57 1
a57 1
C
@


1.1
log
@Initial revision
@
text
@@
