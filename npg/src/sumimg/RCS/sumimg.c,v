head	2.20;
access;
symbols;
locks; strict;
comment	@ * @;


2.20
date	2004.02.20.14.53.55;	author tom;	state Exp;
branches;
next	2.11;

2.11
date	2002.12.13.20.09.48;	author tom;	state Exp;
branches;
next	2.10;

2.10
date	2002.11.27.18.04.16;	author tom;	state Exp;
branches;
next	2.9;

2.9
date	96.10.31.18.58.36;	author tom;	state Exp;
branches;
next	2.8;

2.8
date	96.10.16.17.09.29;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	96.08.26.18.21.27;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	96.08.15.19.39.39;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.05.24.18.14.07;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.05.14.21.28.50;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.04.30.20.23.52;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	96.04.30.20.23.38;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	96.02.22.15.37.41;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	95.12.20.16.41.52;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	95.12.19.13.32.44;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	95.12.18.23.57.39;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	95.12.18.23.43.10;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	95.11.30.22.07.36;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.11.28.20.31.46;	author tom;	state Exp;
branches;
next	;


desc
@@


2.20
log
@Feb 2004
@
text
@/*  $Id: sumimg.c,v 2.11 2002/12/13 20:09:48 tom Exp tom $
    $Log: sumimg.c,v $
 * Revision 2.11  2002/12/13  20:09:48  tom
 * *** empty log message ***
 *
 * Revision 2.10  2002/11/27  18:04:16  tom
 * *** empty log message ***
 *
 * Revision 2.9  1996/10/31  18:58:36  tom
 * fix serious bug if > 2 images
 *
 * Revision 2.8  1996/10/16  17:09:29  tom
 * sync with Version
 * new libimage
 *
 * Revision 2.4  1996/08/26  18:21:27  tom
 * new libimage with wrimg7 & wrimg6 fixed for scaling
 *
 * Revision 2.3  1996/08/15  19:39:39  tom
 * new libraries
 *
 * Revision 2.2  1996/05/24  18:14:07  tom
 * new libimage, libnrimg
 *
 * Revision 2.1  1996/05/14  21:28:50  tom
 * new libimage.a with altered fill_sh6
 *
 * Revision 2.0  1996/04/30  20:23:52  tom
 * new libimage.a
 *
 * Revision 1.8  1996/04/30  20:23:38  tom
 * *** empty log message ***
 *
 * Revision 1.7  1996/02/22  15:37:41  tom
 * revised libnrimg.a
 *
 * Revision 1.6  1995/12/20  16:41:52  tom
 * new libimg.a
 *
 * Revision 1.5  1995/12/19  13:32:44  tom
 * add printf messages
 *
 * Revision 1.4  1995/12/18  23:57:39  tom
 * debugged
 *
 * Revision 1.3  1995/12/18  23:43:10  tom
 * process entire frame at one time
 *
 * Revision 1.2  1995/11/30  22:07:36  tom
 * *** empty log message ***
 *
 * Revision 1.1  1995/11/28  20:31:46  tom
 * Initial revision
 *
 */
/* =============================================================================
 *  Module:         sumimg.c
 *  Date:           Dec-95
 *  Author:         Tom Videen
 *  Description:    Add image files (ECAT, PETT VI, Interfile)
 * =============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 2.11 2002/12/13 20:09:48 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <imgutil.h>
#include <nrutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];

{

	ImageFile      *file1, *file2;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	FILE           *recfp;			 /* rec file pointer */
	char           *recfile;		 /* rec filename */
	float        ***sum;			 /* tensor in which to accumulate total */
	float        ***img;			 /* input tensor */
	char          **file;			 /* list of files to sum */
	int            *frm;			 /* frame numbers for list of files */
	char           *infile;			 /* file to read */
	char           *outfile;		 /* file to write */
	char            runstamp[40];		 /* version, date and userid info */
	char           *ptr;
	int             nx, ny, nz;		 /* array dimensions */
	int             i, j, k, n;
	int             nfiles = 0;		 /* number of files in list */

	if (argc < 4) {
		fprintf (stderr, "Usage: sumimg output recfile file1,frm1 file2,frm2 file3,frm3 ...\n");
		return (ERROR);
	}
/*
 *	Get list of files and frames to sum from command arguments
 */

	file = (char **) malloc (argc * sizeof (char *));
	frm = (int *) calloc (argc, sizeof (int));
	outfile = argv[1];
	recfile = argv[2];
	for (i = 3; i < argc; i++) {
		if (strcmp (argv[i], "-d")) {
			ptr = strstr (argv[i], ",");
			frm[nfiles] = atoi (ptr + 1);
			*ptr = NULL;
			file[nfiles] = argv[i];
			++nfiles;
		} else {
			(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[i + 1], argv[i + 2], argv[i + 3],
				 argv[i + 4], argv[i + 6], argv[i + 7]);
			break;
		}
	}
	fprintf (stdout, "%d frames\n", nfiles);
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*	Open rec file */

	recfp = fopen (recfile, "a");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [sumimg]: Cannot open %s\n", recfile);
		return (ERROR);
	}
/*
 *	Get main header and subheader of first image.
 *	Store RCS version in mh->sw_revision.
 */

	infile = file[0];
	indx.frm = frm[0];
	file1 = make_imgfile (infile);
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [sumimg]: Cannot open %s\n", infile);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [sumimg]: Cannot get MainHeader from %s\n", infile);
		return (ERROR);
	}
	if (existimgfrm (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [sumimg]: cannot find %s frame %d\n", infile, indx.frm);
		return (ERROR);
	}
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [sumimg]: Cannot read file subheader in %s\n", infile);
		return (ERROR);
	}
	mh = file1->mh;
	sh = file1->sh;
	nx = sh->dim1;
	ny = sh->dim2;
	nz = sh->dim3;
	fprintf (stdout, "Reading %s, frame %d\n", file[0], frm[0]);
	if ((sum = readtensor (file1, &indx)) == NULL) {
		fprintf (stderr, "ERROR [sumimg]: reading image data from %s\n", infile);
		return (ERROR);
	}
	recout (recfp, infile);
	(void) save_rcs (file1, rcsid, runstamp);
	(void) fclose (recfp);

/*
 *	Loop over all images.
 */
	if (nfiles > 1) {
		infile = file[1];
		file2 = make_imgfile (infile);
		for (n = 1; n < nfiles; n++) {
			infile = file[n];
			indx.frm = frm[n];
			(void) strcpy (file2->name, infile);
			fprintf (stdout,"Reading %s, frame %d\n", infile, indx.frm);
			if (open_imgfile (file2) == ERROR)
				return (ERROR);
			if (get_mh (file2) == ERROR)
				return (ERROR);
			if (get_sh (file2, &indx) == ERROR)
				return (ERROR);
			if ((img = readtensor (file2, &indx)) == NULL)
				return (ERROR);
			for (i = 1; i <= nz; i++) {
				for (j = 1; j <= ny; j++) {
					for (k = 1; k <= nx; k++) {
						sum[i][j][k] += img[i][j][k];
					}
				}
			}
			free_f3tensor (img, 1, nz, 1, ny, 1, nx);
		}
		free_imgfile (file2);
	}

/*
 *	Write image (frame number set to 1)
 */
	close_imgfile (file1);
	file1->name = outfile;
	(void) strcpy (file1->mode, "w");
	indx.frm = 1;
	fprintf (stdout,"Writing composite image %s, frame %d\n", outfile, indx.frm);
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [sumimg]: Cannot open %s\n", outfile);
		return (ERROR);
	}
	mh->nframe = indx.frm;
	if (put_mh (file1) == ERROR)
		return (ERROR);
	if (writetensor (file1, &indx, sum) == ERROR)
		return (ERROR);
	free_f3tensor (sum, 1, nz, 1, ny, 1, nx);
	return (OK);
}
@


2.11
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 2.10 2002/11/27 18:04:16 tom Exp tom $
d3 3
d63 1
a63 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 2.10 2002/11/27 18:04:16 tom Exp tom $";
d153 1
a153 1
		fprintf (stderr, "ERROR [sumimg]: cannot find %s frame %d\n", infile, &frm);
d171 1
a171 1
	save_rcs (file1, rcsid, runstamp);
@


2.10
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 2.9 1996/10/31 18:58:36 tom Exp tom $
d3 3
d60 1
a60 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 2.9 1996/10/31 18:58:36 tom Exp tom $";
d120 1
a120 1
	printf ("%d frames\n", nfiles);
d162 1
a162 1
	printf ("Reading %s, frame %d\n", file[0], frm[0]);
d169 1
d181 1
a181 1
			printf ("Reading %s, frame %d\n", infile, indx.frm);
d209 1
a209 1
	printf ("Writing composite image %s, frame %d\n", outfile, indx.frm);
a219 2
	free_imgfile (file1);
	(void) fclose (recfp);
@


2.9
log
@fix serious bug if > 2 images
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 2.8 1996/10/16 17:09:29 tom Exp tom $
d3 3
d57 1
a57 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 2.8 1996/10/16 17:09:29 tom Exp tom $";
a61 1
#include <math.h>
d65 1
a65 1
#include <nr.h>
d101 1
a101 1
	frm = (int *) malloc (argc * sizeof (int));
d112 1
a112 1
			sprintf (runstamp, "%s %s %s %s %s %s", argv[i + 1], argv[i + 2], argv[i + 3],
a117 1
	indx.frm = 1;
d147 1
a147 1
		fprintf (stderr, "ERROR [sumimg]: cannot find %s frame %d\n", infile, frm);
d176 1
a176 1
			strcpy (file2->name, infile);
d203 1
a203 1
	strcpy (file1->mode, "w");
d217 1
a217 1
	fclose (recfp);
@


2.8
log
@sync with Version
new libimage
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 2.4 1996/08/26 18:21:27 tom Exp tom $
d3 4
d54 1
a54 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 2.4 1996/08/26 18:21:27 tom Exp tom $";
a136 1
	strcpy (file1->mode, "r");
a171 1
		strcpy (file1->mode, "r");
d175 2
a176 1
			printf ("Reading %s, frame %d\n", file[n], frm[n]);
@


2.4
log
@new libimage with wrimg7 & wrimg6 fixed for scaling
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 2.3 1996/08/15 19:39:39 tom Exp tom $
d3 3
d50 1
a50 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 2.3 1996/08/15 19:39:39 tom Exp tom $";
@


2.3
log
@new libraries
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 2.2 1996/05/24 18:14:07 tom Exp tom $
d3 3
d47 1
a47 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 2.2 1996/05/24 18:14:07 tom Exp tom $";
@


2.2
log
@new libimage, libnrimg
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 2.1 1996/05/14 21:28:50 tom Exp tom $
d3 3
d44 1
a44 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/sumimg/RCS/sumimg.c,v 2.1 1996/05/14 21:28:50 tom Exp tom $";
@


2.1
log
@new libimage.a with altered fill_sh6
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 2.0 1996/04/30 20:23:52 tom Exp tom $
d3 3
d41 1
a41 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/sumimg/RCS/sumimg.c,v 2.0 1996/04/30 20:23:52 tom Exp tom $";
@


2.0
log
@new libimage.a
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 1.8 1996/04/30 20:23:38 tom Exp tom $
d3 3
d38 1
a38 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/sumimg/RCS/sumimg.c,v 1.8 1996/04/30 20:23:38 tom Exp tom $";
@


1.8
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 1.7 1996/02/22 15:37:41 tom Exp tom $
d3 3
d35 1
a35 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/sumimg/RCS/sumimg.c,v 1.7 1996/02/22 15:37:41 tom Exp tom $";
@


1.7
log
@revised libnrimg.a
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 1.6 1995/12/20 16:41:52 tom Exp tom $
d3 3
d32 1
a32 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 1.6 1995/12/20 16:41:52 tom Exp tom $";
d38 2
a39 1
#include <libimg.h>
d44 1
a44 1
void            main (argc, argv)
d49 7
a55 2
	MainHeader     *mh, *mh1;
	SubHeader      *sh, *sh1;
d58 1
a58 1
	char          **files;			 /* list of files to sum */
d60 6
a66 6
	char           *outfile;
	char           *ptr;
	char            runstamp[40];
	unsigned long   i, j, k;
	unsigned long   nx, ny, nz;
	int             plane = 1, frame1 = 1, gate = 1, data = 0, bed = 0;
d68 3
a70 3
	if (argc < 3) {
		fprintf (stderr, "Usage: sumimg output file1,frm1 file2,frm2 file3,frm3 ...\n");
		exit (ERROR);
d76 1
a76 1
	files = (char **) malloc (argc * sizeof (char *));
d79 2
a80 1
	for (i = 2; i < argc; i++) {
d85 1
a85 1
			files[nfiles] = argv[i];
d93 6
d100 7
d108 1
a108 2
 *	Get main header and subheader from first file.
 *	Keep main header, but free subheader after determining array size.
d112 32
a143 8
	if ((mh = getmhdr (files[0])) == NULL)
		exit (ERROR);
	if ((sh = getsbhdr (mh, files[0], plane, frm[0], gate, data, bed)) == NULL)
		exit (ERROR);
	nx = (unsigned long) sh->dim1;
	ny = (unsigned long) sh->dim2;
	nz = (unsigned long) sh->dim3;
	save_rcs (mh, rcsid, runstamp);
a147 4

	printf ("Reading %s, frame %d\n", files[0], frm[0]);
	if ((sum = readtensor (files[0], frm[0], mh, sh)) == NULL)
		exit (ERROR);
d149 15
a163 8
		for (j = 1; j < nfiles; j++) {
			printf ("Reading %s, frame %d\n", files[j], frm[j]);
			if ((img = readtensor (files[j], frm[j], mh, sh)) == NULL)
				exit (ERROR);
			if ((mh1 = getmhdr (files[j])) == NULL)
				exit (ERROR);
			if ((sh1 = getsbhdr (mh1, files[j], plane, frm[j], gate, data, bed)) == NULL)
				exit (ERROR);
d171 1
a171 1
			freetensor (mh1, sh1, img);
d173 1
d175 22
a196 8
	mh->nframe = 1;
	printf ("Writing %s, frame %d\n", outfile, frame1);
	if (writetensor (outfile, frame1, mh, sh, sum) != OK)
		exit (ERROR);
	freetensor (mh, sh, sum);
	free (files);
	free (frm);
	exit (OK);
@


1.6
log
@new libimg.a
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 1.5 1995/12/19 13:32:44 tom Exp tom $
d3 3
d29 1
a29 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 1.5 1995/12/19 13:32:44 tom Exp tom $";
@


1.5
log
@add printf messages
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 1.4 1995/12/18 23:57:39 tom Exp tom $
d3 3
d26 1
a26 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 1.4 1995/12/18 23:57:39 tom Exp tom $";
@


1.4
log
@debugged
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 1.3 1995/12/18 23:43:10 tom Exp tom $
d3 3
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 1.3 1995/12/18 23:43:10 tom Exp tom $";
d97 1
d120 1
@


1.3
log
@process entire frame at one time
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 1.2 1995/11/30 22:07:36 tom Exp tom $
d3 3
d20 1
a20 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/sumimg/RCS/sumimg.c,v 1.2 1995/11/30 22:07:36 tom Exp tom $";
d23 1
d46 2
a47 2
	int             i, j, k;
	int             nx, ny, nz;
d85 3
a87 3
	nx = sh->dim1;
	ny = sh->dim2;
	nz = sh->dim3;
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: sumimg.c,v 1.1 1995/11/28 20:31:46 tom Exp tom $
d3 3
d12 1
a12 1
 *  Date:           Nov-95
a14 2
 *	History:
 *		Modification of code by John Ollinger
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimg/RCS/sumimg.c,v 1.1 1995/11/28 20:31:46 tom Exp tom $";
a21 1
#include <fcntl.h>
d23 3
d34 3
a36 4
	FILE           *fp;

	int             i, j, len, size;
	int             plane = 1, frame1 = 1, gate = 1, data = 0, bed = 0;
a38 3
	float          *sum;
	float          *img;
	char          **files;			 /* list of files to sum */
d40 5
a44 2
	char           *ptr, *ptr2;
	char			runstamp[40];
d58 1
a58 1
		if (strcmp (argv[i],"-d")) {
d65 2
a66 2
    		sprintf (runstamp, "%s %s %s %s %s %s", argv[i+1], argv[i+2], argv[i+3],
				argv[i+4], argv[i+6], argv[i+7]);
d81 3
a83 2
	size = (sh->dim1) * (sh->dim2);
	free_sh (sh);
d87 1
a87 1
 *	Loop over planes for all images.
d90 3
a92 9
	for (plane = 1; plane <= mh->nplane; plane++) {
		if (plane == 1)
			printf ("Reading %s, frame %d\n", files[0], frm[0]);
		if ((sh = getsbhdr (mh, files[0], plane, frm[0], gate, data, bed)) == NULL)
			exit (ERROR);
		if ((sum = rdimg (mh, files[0], plane, frm[0], gate, data, bed)) == NULL)
			exit (ERROR);
		if (mh->orientation != 0)
			sum = flipimg (sum, mh, sh);
d94 3
a96 2
			if (plane == 1)
				printf ("Reading %s, frame %d\n", files[j], frm[j]);
d101 8
a108 9
			if ((img = rdimg (mh1, files[j], plane, frm[j], gate, data, bed)) == NULL)
				exit (ERROR);
			if (mh1->orientation != 0)
				img = flipimg (img, mh1, sh1);
			for (i = 0; i < size; i++)
				sum[i] += img[i];
			free_sh (sh1);
			free_mh (mh1);
			free (img);
a109 5
		mh->nframe = 1;
		if ((wrimg (outfile, sum, mh, sh, plane, frame1, gate, data, bed)) != OK)
			exit (ERROR);
		free_sh (sh);
		free (sum);
d111 4
a114 1
	free_mh (mh);
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
    $Log$
d16 1
a16 1
static char     rcsid[] = "$Header$";
d19 1
a21 1
#include <string.h>
d29 1
a29 1
	MainHeader     *mh;
d33 1
a33 1
	int             i, j, size;
d41 2
a42 1
	char           *ptr;
a47 1

d56 11
a66 5
		ptr = strstr (argv[i], ",");
		frm[nfiles] = atoi (ptr + 1);
		*ptr = NULL;
		files[nfiles] = argv[i];
		++nfiles;
d72 1
d75 1
a75 1
	if ((mh = getmhdr (files[0])) == NULL) 
d77 1
a77 1
	if ((sh = getsbhdr (files[0], plane, frm[0], gate, data, bed)) == NULL) 
d81 1
a81 4
/*
	mh->sw_revision = malloc (
	strncpy (mh->sw_revision,"sumimg $Id$", 31);
*/
d90 1
a90 1
		if ((sh = getsbhdr (files[0], plane, frm[0], gate, data, bed)) == NULL)
d92 1
a92 1
		if ((sum = rdimg (files[0], plane, frm[0], gate, data, bed)) == NULL)
d94 2
a95 7
		sum = flipimg (sum, mh, sh);
		for (i = 0; i < size; i++) {
			if (sum[i] < -16384) {
				sum[i] += 65536;
				printf ("Underflow encountered.\n");
			}
		}
d99 1
a99 1
			if ((sh1 = getsbhdr (files[j], plane, frm[j], gate, data, bed)) == NULL) 
d101 1
a101 1
			if ((img = rdimg (files[j], plane, frm[j], gate, data, bed)) == NULL)
d103 4
a106 1
			img = flipimg (img, mh, sh1);
d110 1
d122 1
@
