head	3.1;
access;
symbols;
locks; strict;
comment	@ * @;


3.1
date	2004.02.20.16.12.26;	author tom;	state Exp;
branches;
next	3.0;

3.0
date	2004.02.12.22.15.53;	author tom;	state Exp;
branches;
next	;


desc
@Feb 2004
@


3.1
log
@Feb 2004
@
text
@/* =============================================================================
 *	Function:		rdtensor1
 *  Date:           Jan 2004
 *  Author:         Tom Videen
 *  Description:    Open and read first frame of an image into a 3D tensor;
 *					scale it appropriately;
 *					expand input array dimension to odim;
 *					close file before returning.
 *	Note:	Differs from rdtensor.c in that rdtensor1.c opens and closes the file;
 *			i.e., it reads from a file exactly once (1).
 * =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/rdtensor1.c,v 3.0 2004/02/12 22:15:53 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>

float        ***rdtensor1 (fname, odim)
	char           *fname;			 /* filename to read */
	long           *odim;			 /* output image dimensions */
{
	ImageFile      *file1;
	Index           indx;
	float        ***image;
	float          *img;
	int             reverse;
	long            idim[3];		 /* input image dimensions */
	long            i0, j0;			 /* offset to slice dimensions on input */
	long            i, j, ix, pln;		 /* indices in loops */

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	file1 = make_imgfile (fname);
	if (file1 == NULL) {
		fprintf (stderr, "ERROR [rdtensor1]: making file1\n");
		return (NULL);
	}
	if (get_imgh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [rdtensor1]: opening %s\n", fname);
		close_imgfile (file1);
		free_imgfile (file1);
		return (NULL);
	}
	reverse = file1->mh->orientation;
	idim[0] = (long) file1->sh->dim1;
	idim[1] = (long) file1->sh->dim2;
	idim[2] = (long) file1->sh->dim3;
	i0 = (odim[0] - idim[0]) / 2;
	j0 = (odim[1] - idim[1]) / 2;

	if ((image = f3tensor (1, idim[2], 1, odim[1], 1, odim[0])) == NULL) {
		fprintf (stderr, "ERROR [rdtensor1]: alloc image for %s\n", fname);
		close_imgfile (file1);
		free_imgfile (file1);
		return (NULL);
	}
	for (pln = 1; pln <= idim[2]; pln++) {
		for (j = 1; j <= odim[1]; j++) {
			for (i = 1; i <= odim[0]; i++) {
				image[pln][j][i] = 0.;
			}
		}
	}

	for (pln = 1; pln <= idim[2]; pln++) {
		indx.pln = pln;
		if ((img = rdimg (file1, &indx)) == NULL) {
			fprintf (stderr, "ERROR [rdtensor1]: reading frame %d plane %d of %s\n",
				 indx.frm, (int) pln, fname);
			close_imgfile (file1);
			free_imgfile (file1);
			free (image);
			free (img);
			return (NULL);
		}
		if (reverse != 0)
			img = flipimg (file1, img);
		ix = 0;
		for (j = 1; j <= idim[1]; j++) {
			for (i = 1; i <= idim[0]; i++) {
				image[pln][j + j0][i + i0] = img[ix];
				ix++;
			}
		}
		free (img);
	}
	close_imgfile (file1);
	free_imgfile (file1);
	if (reverse != 0)
		file1->mh->orientation = 0;
	return (image);
}
@


3.0
log
@Feb 2004
@
text
@d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/rdtensor1.c,v 2.8 2003/12/23 17:45:49 tom Exp $";
d48 1
a48 1
	if (get_imgh (file1, indx) == ERROR) {
@
