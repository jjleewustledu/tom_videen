head	3.1;
access;
symbols;
locks; strict;
comment	@ * @;


3.1
date	2004.02.20.16.12.26;	author tom;	state Exp;
branches;
next	3.0;

3.0
date	2004.02.12.22.15.53;	author tom;	state Exp;
branches;
next	2.7;

2.7
date	2003.07.01.19.16.56;	author tom;	state Exp;
branches;
next	2.6;

2.6
date	2001.11.21.17.06.12;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	99.12.13.18.21.08;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	96.10.18.22.05.44;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	96.08.05.14.15.37;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.05.24.17.33.35;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.05.08.16.39.06;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.04.24.23.00.22;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	96.02.21.18.59.59;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.12.12.15.31.15;	author tom;	state Exp;
branches;
next	;


desc
@original
@


3.1
log
@Feb 2004
@
text
@/* =============================================================================
 *	Function:		writetensor
 *  Date:           Dec 1995
 *  Author:         Tom Videen
 *	Description:	Write one frame of an image into a Numerical Recipes 3-D tensor.
 * =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/writetensor.c,v 3.0 2004/02/12 22:15:53 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>

int             writetensor (file, indx, image)
	ImageFile      *file;
	Index          *indx;
	float        ***image;
{
	char           *fname;
	float          *img;
	int             fformat;
	long            size;
	long            dim1, dim2, dim3;
	long            pln, ix, i, j;

	fname = file->name;
	fformat = file->mh->file_format;

	if (fformat == MATRIX_REV7) {
		if (file->sh != NULL) {
			if (fill_sh7 (file) != OK) {
				fprintf (stderr, "ERROR [writetensor]: fill_sh7 for %s\n", fname);
				return (ERROR);
			}
		} else {
			if (use_sh7 (file) != OK) {
				fprintf (stderr, "ERROR [writetensor]: use_sh7 for %s\n", fname);
				return (ERROR);
			}
		}
		dim1 = (long) file->sh->dim1;
		dim2 = (long) file->sh->dim2;
		dim3 = (long) file->sh->dim3;
		if (fill_mh7 (file) != OK) {
			fprintf (stderr, "ERROR [writetensor]: fill_mh7 for %s\n", fname);
			return (ERROR);
		}
		size = dim1 * dim2 * dim3;
		if ((img = (float *) malloc (size * sizeof (float))) == NULL) {
			fprintf (stderr, "ERROR [writetensor]: malloc img for writing %s\n", fname);
			return (ERROR);
		}
		ix = 0;
		for (pln = 1; pln <= dim3; pln++) {
			for (j = 1; j <= dim2; j++) {
				for (i = 1; i <= dim1; i++) {
					img[ix] = image[pln][j][i];
					ix++;
				}
			}
		}
		indx->pln = 1;
		if (wrimg7 (file, indx, img) == ERROR) {
			fprintf (stderr, "ERROR [writetensor]: writing frame %d of %s\n", indx->frm, fname);
			free (img);
			return (ERROR);
		}
		free (img);
		return (OK);

	} else if (fformat == MATRIX_REV6) {
		if (file->sh != NULL) {
			if (fill_sh6 (file) != OK) {
				fprintf (stderr, "ERROR [writetensor]: fill_sh6 for %s\n", fname);
				return (ERROR);
			}
		} else {
			if (use_sh6 (file) != OK) {
				fprintf (stderr, "ERROR [writetensor]: use_sh6 for %s\n", fname);
				return (ERROR);
			}
		}
		dim1 = (long) file->sh->dim1;
		dim2 = (long) file->sh->dim2;
		dim3 = (long) file->sh->dim3;
		if (fill_mh6 (file) != OK) {
			fprintf (stderr, "ERROR [writetensor]: fill_mh6 for %s\n", fname);
			return (ERROR);
		}
		size = dim1 * dim2;
		if ((img = (float *) malloc (size * sizeof (float))) == NULL) {
			fprintf (stderr, "ERROR [writetensor]: malloc img for writing %s\n", fname);
			return (ERROR);
		}
		for (pln = 1; pln <= dim3; pln++) {
			indx->pln = pln;
			ix = 0;
			for (j = 1; j <= dim2; j++) {
				for (i = 1; i <= dim1; i++) {
					img[ix] = image[pln][j][i];
					ix++;
				}
			}
			if (wrimg6 (file, indx, img) == ERROR) {
				fprintf (stderr, "ERROR [writetensor]: writing frame %d plane %d of %s\n",
					 indx->frm, (int) pln, fname);
				free (img);
				return (ERROR);
			}
		}
		free (img);
		return (OK);

	} else if (fformat == PETT6) {
/*
		if (file->sh != NULL) {
			if (fill_shp6 (file) != OK) {
				fprintf (stderr, "ERROR [writetensor]: fill_shp6 for %s\n", fname);
				return (ERROR);
			}
		} 
*/
		if (file->sh == NULL) {
			if (use_shp6 (file) != OK) {
				fprintf (stderr, "ERROR [writetensor]: use_shp6 for %s\n", fname);
				return (ERROR);
			}
		}
		dim1 = (long) file->sh->dim1;
		dim2 = (long) file->sh->dim2;
		dim3 = (long) file->sh->dim3;
/*
		if (fill_mhp6 (file, indx) != OK) {
			fprintf (stderr, "ERROR [writetensor]: fill_mhp6 for %s\n", fname);
			return (ERROR);
		}
*/
		size = dim1 * dim2;
		if ((img = (float *) malloc (size * sizeof (float))) == NULL) {
			fprintf (stderr, "ERROR [writetensor]: malloc img for writing %s\n", fname);
			return (ERROR);
		}
		for (pln = 1; pln <= dim3; pln++) {
			indx->pln = pln;
			ix = 0;
			for (j = 1; j <= dim2; j++) {
				for (i = 1; i <= dim1; i++) {
					img[ix] = image[pln][j][i];
					ix++;
				}
			}
			if (wrimgp6 (file, img) == ERROR) {
				fprintf (stderr, "ERROR [writetensor]: writing frame %d plane %d of %s\n",
					 indx->frm, (int) pln, fname);
				free (img);
				return (ERROR);
			}
		}
		free (img);
		return (OK);

	} else if (fformat == INTERFILE) {
		if (open_if (file) == ERROR) {
			fprintf (stderr, "ERROR [writetensor]: cannot open %s\n", fname);
			return (ERROR);
		}
		if (wrimgif (file, image) == ERROR) {
			fprintf (stderr, "ERROR [writetensor]: writing frame %d of %s\n",
				 indx->frm, fname);
			return (ERROR);
		}
		return (OK);

	} else
		return (ERROR);
}
@


3.0
log
@Feb 2004
@
text
@d10 1
a10 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/writetensor.c,v 2.7 2003/07/01 19:16:56 tom Exp tom $";
@


2.7
log
@*** empty log message ***
@
text
@d3 1
a3 1
 *  Date:           Dec-95
d8 1
d10 1
a10 1
static char     rcsid[] = "$Header: /home/tom/src/libnrimg/RCS/writetensor.c,v 2.6 2001/11/21 17:06:12 tom Exp tom $";
a32 3
	dim1 = (long) file->sh->dim1;
	dim2 = (long) file->sh->dim2;
	dim3 = (long) file->sh->dim3;
d35 18
a67 2
		fill_mh7 (file);
		fill_sh7 (file);
d77 18
a99 2
		fill_mh6 (file);
		fill_sh6 (file);
d120 23
a147 1
		fill_hp6 (file, indx);
@


2.6
log
@add wrimgif
@
text
@d9 1
a9 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/writetensor.c,v 2.5 1999/12/13 18:21:08 tom Exp tom $";
d55 1
a55 2
			fprintf (stderr, "ERROR [writetensor]: writing frame %d plane %d of %s\n",
				 indx->frm, (int) pln, fname);
@


2.5
log
@tov revision
@
text
@d9 1
a9 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/writetensor.c,v 2.4 1996/10/18 22:05:44 tom Exp tom $";
d39 1
a39 1
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n", fname);
d55 1
a55 1
			fprintf (stderr, "ERROR [writetensor]: Cannot write frame %d plane %d of %s\n",
d66 1
a66 1
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n", fname);
d81 1
a81 1
				fprintf (stderr, "ERROR [writetensor]: Cannot write frame %d plane %d of %s\n",
d93 1
a93 1
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n", fname);
d107 1
a107 1
				fprintf (stderr, "ERROR [writetensor]: Cannot write frame %d plane %d of %s\n",
d116 11
a126 1
/*	else if (fformat == INTERFILE) */
@


2.4
log
@add indx to fill_hp6
@
text
@a7 1

d9 1
a9 2
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/writetensor.c,v 2.3 1996/08/05 14:15:37 tom Exp tom $";

d13 1
a13 1
#include <string.h>
a15 1
#include <nr.h>
d56 1
a56 1
				 indx->frm, pln, fname);
d82 1
a82 1
					 indx->frm, pln, fname);
d108 1
a108 1
					 indx->frm, pln, fname);
@


2.3
log
@move scaling to wrimg6 & wrimg7
@
text
@d10 1
a10 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/writetensor.c,v 2.2 1996/05/24 17:33:35 tom Exp tom $";
d99 1
a99 1
		fill_hp6 (file);
@


2.2
log
@additional check for version 7 attenuation images
@
text
@d8 1
d10 2
a11 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libnrimg/RCS/writetensor.c,v 2.1 1996/05/08 16:39:06 tom Exp tom $";
a27 1
	float           scaler;
a44 6
		if (file->sh->duration == 0)		 /* Attenuation images have duration = 0 */
			scaler = 1./ATNSCALER;
		else if (strncmp (file->m7->mh->data_units, "1/cm", 4) == 0)
			scaler = 1./ATNSCALER;
		else
			scaler = 1./(REV7SCALER * (float) file->sh->duration);
d49 1
a49 1
					img[ix] = scaler * image[pln][j][i];
d55 2
a56 2
        fill_mh7 (file);
        fill_sh7 (file);
d59 1
a59 1
		 	 	indx->frm, pln, fname);
d72 2
a73 6
		if (file->sh->duration == 0)		 /* Attenuation images have duration = 0 */
			scaler = 1./ATNSCALER;
		else
			scaler = 1./((float) file->sh->duration);
        fill_mh6 (file);
        fill_sh6 (file);
d79 1
a79 1
					img[ix] = scaler * image[pln][j][i];
d85 1
a85 1
			 	 	indx->frm, pln, fname);
d93 1
a93 1
    } else if (fformat == PETT6) {
d99 1
a99 2
		scaler = 1.0;
        fill_hp6 (file);
d105 1
a105 1
					img[ix] = scaler * image[pln][j][i];
d111 1
a111 1
			 	 	indx->frm, pln, fname);
d121 1
a121 1
	} else 
@


2.1
log
@correct use_ to fill_ headers
@
text
@d9 1
a9 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libnrimg/RCS/writetensor.c,v 2.0 1996/04/24 23:00:22 tom Exp tom $";
d13 1
d45 2
@


2.0
log
@new release
@
text
@d9 1
a9 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libnrimg/RCS/writetensor.c,v 1.2 1996/02/21 18:59:59 tom Exp tom $";
d57 2
a58 2
        use_mh7 (file);
        use_sh7 (file);
d78 2
a79 2
        use_mh6 (file);
        use_sh6 (file);
d106 1
a106 2
        use_mhp6 (file);
        use_shp6 (file);
@


1.2
log
@*** empty log message ***
@
text
@d9 1
a9 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/libnrimg/RCS/writetensor.c,v 1.1 1995/12/12 15:31:15 tom Exp tom $";
d13 2
a14 1
#include <libimg.h>
d18 3
a20 5
int             writetensor (filnam, frame, mh, sh, image)
	char           *filnam;
	int             frame;
	MainHeader     *mh;
	SubHeader      *sh;
a21 1

d23 1
a23 5
	Main_header7   *mh7;
	Image_subheader7 *sh7;
	Main_header    *mh6;
	Image_subheader *sh6;
	PETT6HDR       *p6h;
d29 1
a29 3
	long            indx, pln, i, j;
	int             allplanes = 0;
	int             gate = 1, data = 0, bed = 0;
d31 5
a35 4
	fformat = mh->file_format;
	dim1 = (long) sh->dim1;
	dim2 = (long) sh->dim2;
	dim3 = (long) sh->dim3;
d38 1
a38 1
		size = (sh->dim1) * (sh->dim2) * (sh->dim3);
d40 1
a40 1
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n", filnam);
d43 1
a43 3
		mh7 = mh_to_mh7 (mh);
		sh7 = sh_to_ish7 (sh);
		if (sh->duration == 0)		 /* Attenuation images have duration = 0 */
d46 2
a47 2
			scaler = 1./(REV7SCALER * (float) sh->duration);
		indx = 0;
d51 2
a52 2
					img[indx] = scaler * image[pln][j][i];
					indx++;
d56 6
a61 3
		if (wrimg7 (filnam, img, mh7, sh7, allplanes, frame, gate, data, bed) == ERROR) {
			fprintf (stderr, "ERROR [writetensor]: Cannot write frame %d of %s\n",
				 frame, filnam);
d65 2
a66 1
		free (sh7);
d69 1
a69 1
		size = (sh->dim1) * (sh->dim2);
d71 1
a71 1
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n", filnam);
d74 1
a74 3
		mh6 = mh_to_mh6 (mh);
		sh6 = sh_to_ish6 (sh);
		if (sh->duration == 0)		 /* Attenuation images have duration = 0 */
d77 3
a79 1
			scaler = 1./((float) sh->duration);
d81 2
a82 1
			indx = 0;
d85 2
a86 2
					img[indx] = scaler * image[pln][j][i];
					indx++;
d89 1
a89 1
			if (wrimg6 (filnam, img, mh6, sh6, pln, frame, gate, data, bed) == ERROR) {
d91 1
a91 1
					 frame, pln, filnam);
d96 2
d99 2
a100 2
	} else if (fformat == PETT6) {
		size = (sh->dim1) * (sh->dim2);
d102 1
a102 1
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n", filnam);
d105 3
d109 2
a110 2
			p6h = mh_to_p6h (mh, sh);
			indx = 0;
d113 2
a114 2
					img[indx] = image[pln][j][i];
					indx++;
d117 1
a117 1
			if (wrimgp6 (filnam, img, p6h) == ERROR) {
d119 1
a119 1
					 frame, pln, filnam);
d124 2
d127 1
a127 21
	} else if (fformat == INTERFILE) {
		size = (sh->dim1) * (sh->dim2);
		if ((img = (float *) malloc (size * sizeof (float))) == NULL) {
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n", filnam);
			return (ERROR);
		}
		for (pln = 1; pln <= dim3; pln++) {
			indx = 0;
			for (j = 1; j <= dim2; j++) {
				for (i = 1; i <= dim1; i++) {
					img[indx] = image[pln][j][i];
					indx++;
				}
			}
			if (wrimg_if (filnam, img, mh, sh, pln, frame) == ERROR) {
				fprintf (stderr, "ERROR [writetensor]: Cannot write frame %d plane %d of %s\n",
					 frame, pln, filnam);
				free (img);
				return (ERROR);
			}
		}
d129 1
a129 2
	} else {
		free (img);
a130 4
	}

	free (img);
	return (OK);
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
static char     rcsid[] = "$Header$";
d17 1
a17 1
int                 writetensor (filnam, frame, mh, sh, image)
d19 1
a19 1
	int				frame;
d22 1
a22 1
	float		***image;
d26 1
a26 1
	Image_subheader7    *sh7;
d28 10
a37 9
	Image_subheader     *sh6;
	PETT6HDR	   *p6h;
	float			*img;
    int             fformat;
	long			size;
	long			dim1, dim2, dim3;
	long			indx, pln, i, j;
	int				allplanes = 0;
	int				gate = 1, data = 0, bed = 0;
d39 1
a39 1
    fformat = mh->file_format;
d44 1
a44 1
    if (fformat == MATRIX_REV7) {
d46 2
a47 2
		if ((img = (float *) malloc (size * sizeof (float))) ==  NULL) {
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n",filnam);
d50 6
a55 2
        mh7 = mh_to_mh7 (mh);
        sh7 = sh_to_ish7 (sh);
d60 1
a60 1
					img[indx] = image[pln][j][i];
d65 1
a65 1
       	if (wrimg7 (filnam, img, mh7, sh7, allplanes, frame, gate, data, bed) == ERROR) {
d67 1
a67 1
				frame, filnam);
d73 1
a73 1
    } else if (fformat == MATRIX_REV6) {
d75 2
a76 2
		if ((img = (float *) malloc (size * sizeof (float))) ==  NULL) {
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n",filnam);
d79 6
a84 2
        mh6 = mh_to_mh6 (mh);
        sh6 = sh_to_ish6 (sh);
d89 1
a89 1
					img[indx] = image[pln][j][i];
d93 1
a93 1
        	if (wrimg6 (filnam, img, mh6, sh6, pln, frame, gate, data, bed) == ERROR) {
d95 1
a95 1
					frame, pln, filnam);
d101 1
a101 1
    } else if (fformat == PETT6) {
d103 2
a104 2
		if ((img = (float *) malloc (size * sizeof (float))) ==  NULL) {
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n",filnam);
d108 1
a108 1
        	p6h = mh_to_p6h (mh, sh);
d116 1
a116 1
        	if (wrimgp6 (filnam, img, p6h) == ERROR) {
d118 1
a118 1
					frame, pln, filnam);
d124 1
a124 1
    } else if (fformat == INTERFILE) {
d126 2
a127 2
		if ((img = (float *) malloc (size * sizeof (float))) ==  NULL) {
			fprintf (stderr, "ERROR [writetensor]: Cannot malloc img for writing %s\n",filnam);
d138 1
a138 1
        	if (wrimg_if (filnam, img, mh, sh, pln, frame) == ERROR) {
d140 1
a140 1
					frame, pln, filnam);
d146 1
a146 1
    } else {
d148 1
a148 1
        return (ERROR);
d152 1
a152 1
    return (OK);
@
