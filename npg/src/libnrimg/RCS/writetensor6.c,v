head	1.1;
access;
symbols;
locks
	tom:1.1; strict;
comment	@ * @;


1.1
date	96.03.12.22.46.57;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* =============================================================================
 *	Function:		writetensor6
 *  Date:           Mar-96
 *  Author:         Tom Videen
 *	Description:	Write one frame of an image in a Numerical Recipes 3-D tensor
 *					to an output file which is a version 6 matrix file.
 * =============================================================================
 */
#ifndef lint
static char     rcsid[] = "$Header$";
#endif

#include <stdio.h>
#include <string.h>
#include <libimg.h>
#include <nr.h>
#include <nrutil.h>

int             writetensor6 (filnam, frame, mh, sh, image)
	char           *filnam;
	int             frame;
	MainHeader     *mh;
	SubHeader      *sh;
	float        ***image;

{
	Main_header    *mh6;
	Image_subheader *sh6;
	float          *img;
	float           scaler;
	long            size;
	long            dim1, dim2, dim3;
	long            indx, pln, i, j;
	int             gate = 1, data = 0, bed = 0;

	dim1 = (long) sh->dim1;
	dim2 = (long) sh->dim2;
	dim3 = (long) sh->dim3;
	size = (sh->dim1) * (sh->dim2);
	if ((img = (float *) malloc (size * sizeof (float))) == NULL) {
		fprintf (stderr, "ERROR [writetensor6]: Cannot malloc img for writing %s\n", filnam);
		return (ERROR);
	}
	mh6 = mh_to_mh6 (mh);
	sh6 = sh_to_ish6 (sh);
	if (sh->duration == 0)			 /* Attenuation images have duration = 0 */
		scaler = 1./ATNSCALER;
	else if (mh->version == 70)		 /* Version 7 does not scale by duration */
		scaler = 1./(sh->duration);
	else
		scaler = 1.;
	for (pln = 1; pln <= dim3; pln++) {
		indx = 0;
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				img[indx] = scaler * image[pln][j][i];
				indx++;
			}
		}
		if (wrimg6 (filnam, img, mh6, sh6, pln, frame, gate, data, bed) == ERROR) {
			fprintf (stderr, "ERROR [writetensor6]: Cannot write frame %d of %s\n",
				 frame, filnam);
			free (img);
			return (ERROR);
		}
	}
	free (mh6);
	free (sh6);
	free (img);
	return (OK);
}
@
