head	3.1;
access;
symbols;
locks; strict;
comment	@ * @;


3.1
date	2004.02.20.16.12.26;	author tom;	state Exp;
branches;
next	3.0;

3.0
date	2004.02.12.22.15.53;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2003.12.23.17.45.49;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	99.12.13.18.21.08;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.08.05.14.15.27;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.05.24.17.33.35;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.04.24.23.00.22;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	96.02.21.18.59.53;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.12.12.15.31.15;	author tom;	state Exp;
branches;
next	;


desc
@original
@


3.1
log
@Feb 2004
@
text
@/* =============================================================================
 *	Function:		readtensor
 *  Date:           Feb 1996
 *  Author:         Tom Videen
 *  Description:    Read one frame of an image into a Numerical Recipes 3-D tensor
 *					and scale it appropriately.
 * =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/readtensor.c,v 3.0 2004/02/12 22:15:53 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>

float        ***readtensor (file, indx)
	ImageFile      *file;
	Index          *indx;
{
	float        ***image;
	float          *img;
	char           *fname;
	int             reverse;
	long            dim1, dim2, dim3;
	long            i, j, ix, pln;

	fname = file->name;
	reverse = file->mh->orientation;
	dim1 = (long) file->sh->dim1;
	dim2 = (long) file->sh->dim2;
	dim3 = (long) file->sh->dim3;

	if ((image = f3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [readtensor]: Cannot malloc image for %s\n", fname);
		return (NULL);
	}
	for (pln = 1; pln <= dim3; pln++) {
		indx->pln = pln;
		if ((img = rdimg (file, indx)) == NULL) {
			fprintf (stderr, "ERROR [readtensor]: Cannot read frame %d plane %d of %s\n",
				 indx->frm, (int) pln, fname);
			free_f3tensor (image, 1, dim3, 1, dim2, 1, dim1);
			free (image);
			return (NULL);
		}
		if (reverse != 0)
			img = flipimg (file, img);
		ix = 0;
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				image[pln][j][i] = img[ix];
				ix++;
			}
		}
		free (img);
	}
	if (reverse != 0)
		file->mh->orientation = 0;
	return (image);
}
@


3.0
log
@Feb 2004
@
text
@d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/readtensor.c,v 2.4 2003/12/23 17:45:49 tom Exp tom $";
@


2.4
log
@fix flipimg
@
text
@d3 1
a3 1
 *  Date:           Feb-96
d9 1
d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/readtensor.c,v 2.3 1999/12/13 18:21:08 tom Exp tom $";
d46 2
@


2.3
log
@tov revision
@
text
@d10 1
a10 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/readtensor.c,v 2.2 1996/08/05 14:15:27 tom Exp tom $";
d58 2
@


2.2
log
@move scaling to rdimg6 & rdimg7
@
text
@a8 1

d10 1
a10 2
static char     rcsid[] = "$Header: /home/npggw/tom/src/libnrimg/RCS/readtensor.c,v 2.1 1996/05/24 17:33:35 tom Exp tom $";

a14 1
#include <string.h>
a16 1
#include <nr.h>
d44 1
a44 1
				 indx->frm, pln, fname);
@


2.1
log
@additional check for version 7 attenuation images
@
text
@d9 1
d11 2
a12 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libnrimg/RCS/readtensor.c,v 2.0 1996/04/24 23:00:22 tom Exp tom $";
a28 1
	float           scaler;
a29 1
	int             fformat;
a34 1
	fformat = file->mh->file_format;
a43 20
	if (fformat == MATRIX_REV7) {
		if (file->sh->duration == 0)		 /* Attenuation images have duration = 0 */
			scaler = ATNSCALER;
        else if (strncmp (file->m7->mh->data_units, "1/cm", 4) == 0)
            scaler = ATNSCALER;
		else
			scaler = REV7SCALER * (float) file->sh->duration;
	} else if (fformat == MATRIX_REV6) {
		if (file->sh->duration == 0)		 /* Attenuation images have duration = 0 */
			scaler = ATNSCALER;
		else
			scaler = (float) file->sh->duration;
	} else if (fformat == PETT6) {
		scaler = 1.0;

/*	else if (fformat == INTERFILE)  */

	} else
		return (NULL);

d56 1
a56 1
				image[pln][j][i] = scaler * img[ix];
@


2.0
log
@new release
@
text
@d10 1
a10 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libnrimg/RCS/readtensor.c,v 1.2 1996/02/21 18:59:53 tom Exp tom $";
d15 1
d48 2
@


1.2
log
@*** empty log message ***
@
text
@d10 1
a10 1
static char     rcsid[] = "$Header$";
d14 3
a16 1
#include <libimg.h>
d20 3
a22 6
float        ***readtensor (filnam, frame, mh, sh)
	char           *filnam;
	int             frame;
	MainHeader     *mh;
	SubHeader      *sh;

a23 2
	Main_header7   *mh7;
	Main_header    *mh6;
d27 1
d31 1
a31 2
	long            i, j, indx, pln;
	int             gate = 1, data = 0, bed = 0;
d33 6
a38 5
	fformat = mh->file_format;
	reverse = mh->orientation;
	dim1 = (long) sh->dim1;
	dim2 = (long) sh->dim2;
	dim3 = (long) sh->dim3;
d41 1
a41 1
		fprintf (stderr, "ERROR [readtensor]: Cannot malloc image for %s\n", filnam);
d45 1
a45 2
		mh7 = mh_to_mh7 (mh);
		if (sh->duration == 0)		 /* Attenuation images have duration = 0 */
d48 1
a48 18
			scaler = REV7SCALER * (float) sh->duration;
		for (pln = 1; pln <= dim3; pln++) {
			if ((img = rdimg7 (mh7, filnam, pln, frame, gate, data, bed)) == NULL) {
				fprintf (stderr, "ERROR [readimgfrm]: Cannot read frame %d plane %d of %s\n",
					 frame, pln, filnam);
				return (NULL);
			}
			if (reverse != 0)
				img = flipimg (img, mh, sh);
			indx = 0;
			for (j = 1; j <= dim2; j++) {
				for (i = 1; i <= dim1; i++) {
					image[pln][j][i] = scaler * img[indx];
					indx++;
				}
			}
			free (img);
		}
d50 4
a53 22
		mh6 = mh_to_mh6 (mh);
		for (pln = 1; pln <= dim3; pln++) {
			if ((img = rdimg6 (mh6, filnam, pln, frame, gate, data, bed)) == NULL) {
				fprintf (stderr, "ERROR [readimgfrm]: Cannot read frame %d plane %d of %s\n",
					 frame, pln, filnam);
				return (NULL);
			}
			if (reverse != 0)
				img = flipimg (img, mh, sh);
			if (sh->duration == 0)		 /* Attenuation images have duration = 0 */
				scaler = ATNSCALER;
			else
				scaler = (float) sh->duration;
			indx = 0;
			for (j = 1; j <= dim2; j++) {
				for (i = 1; i <= dim1; i++) {
					image[pln][j][i] = scaler * img[indx];
					indx++;
				}
			}
			free (img);
		}
d55 13
a67 14
		for (pln = 1; pln <= dim3; pln++) {
			if ((img = rdimgp6 (filnam, pln)) == NULL) {
				fprintf (stderr, "ERROR [readimgfrm]: Cannot read frame %d plane %d of %s\n",
					 frame, pln, filnam);
				return (NULL);
			}
			indx = 0;
			for (j = 1; j <= dim2; j++) {
				for (i = 1; i <= dim1; i++) {
					image[pln][j][i] = img[indx];
					indx++;
				}
			}
			free (img);
d69 7
a75 6
	} else if (fformat == INTERFILE) {
		for (pln = 1; pln <= dim3; pln++) {
			if ((img = rdimg_if (filnam, pln, frame)) == NULL) {
				fprintf (stderr, "ERROR [readimgfrm]: Cannot read frame %d plane %d of %s\n",
					 frame, pln, filnam);
				return (NULL);
a76 10
			if (reverse != 0)
				img = flipimg (img, mh, sh);
			indx = 0;
			for (j = 1; j <= dim2; j++) {
				for (i = 1; i <= dim1; i++) {
					image[pln][j][i] = img[indx];
					indx++;
				}
			}
			free (img);
d78 2
a79 3
	} else
		return (NULL);

@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 *  Date:           Dec-95
d5 2
a6 1
 *  Description:    Read one frame of an image into a Numerical Recipes 3-D tensor.
d18 1
a18 1
float            ***readtensor (filnam, frame, mh, sh)
d20 1
a20 1
	int				frame;
d27 8
a34 7
	float		 ***image;
	float			*img;
    int             fformat;
	int				reverse;
	long			dim1, dim2, dim3;
	long			i, j, indx, pln;
	int				gate = 1, data = 0, bed = 0;
d36 1
a36 1
    fformat = mh->file_format;
d42 2
a43 2
	if ((image = f3tensor(1, dim3, 1, dim2, 1, dim1)) ==  NULL) {
		fprintf (stderr, "ERROR [readtensor]: Cannot malloc image for %s\n",filnam);
d46 6
a51 3

    if (fformat == MATRIX_REV7) {
        mh7 = mh_to_mh7 (mh);
d53 1
a53 1
        	if ((img = rdimg7 (mh7, filnam, pln, frame, gate, data, bed)) == NULL) {
d55 1
a55 1
					frame, pln, filnam);
d63 1
a63 1
					image[pln][j][i] = img[indx];
d69 2
a70 2
    } else if (fformat == MATRIX_REV6) {
        mh6 = mh_to_mh6 (mh);
d72 1
a72 1
        	if ((img = rdimg6 (mh6, filnam, pln, frame, gate, data, bed)) == NULL) {
d74 1
a74 1
					frame, pln, filnam);
d79 4
d86 1
a86 1
					image[pln][j][i] = img[indx];
d92 1
a92 1
    } else if (fformat == PETT6) {
d94 1
a94 1
        	if ((img = rdimgp6 (filnam, pln)) == NULL) {
d96 1
a96 1
					frame, pln, filnam);
d108 1
a108 1
    } else if (fformat == INTERFILE) {
d110 1
a110 1
        	if ((img = rdimg_if (filnam, pln, frame)) == NULL) {
d112 1
a112 1
					frame, pln, filnam);
d126 2
a127 2
    } else
        return (NULL);
d129 2
a130 2
    return (image);
} 
@
