head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2004.02.17.14.36.45;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.11.16.06.34;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.11.15.45.35;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.04.17.12.00;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.18.19.16.41;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	99.03.19.15.31.57;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	98.01.21.20.45.33;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	96.03.06.14.43.45;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	94.11.29.22.22.22;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	94.11.28.23.10.09;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	94.11.23.21.54.21;	author tom;	state Exp;
branches;
next	;


desc
@original
@


1.20
log
@Feb 2004
@
text
@/*$Id: mri2analyze.c,v 1.10 2002/01/11 16:06:34 tom Exp tom $*/
/*$Log: mri2analyze.c,v $
 * Revision 1.10  2002/01/11  16:06:34  tom
 * *** empty log message ***
 *
 * Revision 1.9  2002/01/11  15:45:35  tom
 * *** empty log message ***
 *
 * Revision 1.8  2002/01/04  17:12:00  tom
 * remove / from ifh filename
 *
 * Revision 1.7  2000/08/18  19:16:41  tom
 * RFA
 *
 * Revision 1.6  1999/03/19  15:31:57  tom
 * change declaration of order
 *
 * Revision 1.5  1998/01/21  20:45:33  tom
 * read order "RHP"
 *
 * Revision 1.4  1996/03/06  14:43:45  tom
 * change path to ANALYZE.h
 *
 * Revision 1.3  1994/11/29  22:22:22  tom
 * changed orientations!
 *
 * Revision 1.2  1994/11/28  23:10:09  tom
 * Interfile Format header added.
 *
 * Revision 1.1  1994/11/23  21:54:21  tom
 * Initial revision
 *
 */
/*  ===============================================================================
 *  Module:         mri2analyze.c
 *  Date:           29-Nov-94
 *  Author:         Tom Videen
 *  Description:    Transform Siemens MRI images into Analyze format.
 *      Output images will be displayed by Analyze with left brain on the left
 *      and with the lower slices first.  This allows the 3D volume rendered
 *      brains to appear upright.
 *		An Interfile Format header file is created.
 *	Notes:
 *		Checked for proper orientation for View_LtoR (4) only.
 *  ===============================================================================
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <matrixlib.h>
#include <image.h>
#include <nrutil.h>
#include <lib3_file_transform.h>		 /* Numaris 3 User's Library */
#include <ANALYZE.h>				 /* dsr */

#define U_LONG unsigned long
#define U_SHORT unsigned short
#define BytesPerPixelShort 2
#define BytesPerPixelLong 4
#define U3_isStatusError(s,e) (((s)^(e)) == 0)
#define MAXSTR 256
#define PERMS  0666
#define TRANSVERSE '\000'
#define CORONAL    '\001'
#define SAGITTAL   '\002'

static char     rcsid[] = "$Header: /home/npggw/tom/src/mri2analyze/RCS/mri2analyze.c,v 1.10 2002/01/11 16:06:34 tom Exp tom $";

/*  ----------------------------
 *  Function:   mri2analyze
 *  ----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	FILE           *FileInp_p;		 /* input file pointer */
	char            InFile[60];		 /* input file name */
	long            Status;			 /* shows an actual status */
	U3_header_type_t HeadType;
	U3_data_type_t  DataType;
	U3_size_type_t  DataSize;
	header_t       *HeadBuffer;		 /* header buffer */
	U_SHORT        *DataBuffer;		 /* pixel data buffer */
	long unsigned   NumPixels_ul, NumRows_ul, NumColumns_ul, StartOffset_ul;

	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* output ANALYZE image  */
	FILE           *fd_if;			 /* file for Interfile Format header */
	struct dsr      hdr;			 /* header for ANALYZE */
	char           *root;
	char           *ptr;
	char           *order;
	char           *newname;		 /* pointer to ANALYZE_img minus path */
	char            ANALYZE_hdr[MAXSTR];	 /* output Analyze header filename */
	char            ANALYZE_img[MAXSTR];	 /* output Analyze image filename */
	char            IF_hdr[MAXSTR];		 /* output Interfile Format header filename */
	char            view[6][10];
	char            num[12];
	char            version[5];
	char            program_date[12];
	char            study_date[12];
	char            institution[MAXSTR];
	char            model[MAXSTR];
	char            subject_id[MAXSTR];
	char            ParameterFileName[MAXSTR];
	char            SequenceFileName[MAXSTR];
	char            SequenceDescription[MAXSTR];

	int             bitsperpix;
	int             orientation;
	int             first, last;
	short           datum;
	int             global_max;		 /* global maximum */
	int             global_min;		 /* global minimum */
	int             slc;
	int             i, j, k, n;

	short        ***img;			 /* output Analyze image */
	short           num_slices;		 /* number of slices or frames in MRI */
	short           xdim, ydim, zdim;	 /* image dimensions */
	float           xpix, ypix, zpix;	 /* pixel sizes (mm) */

	strcpy (view[1], "View_FEET");
	strcpy (view[2], "View_HEAD");
	strcpy (view[3], "View_AtoP");
	strcpy (view[4], "View_LtoR");
	strcpy (view[5], "View_PtoA");
	strcpy (view[6], "View_RtoL");
	ptr = strstr (rcsid, "v ");
	ptr += 2;
	strncpy (version, ptr, 4);
	ptr = strstr (ptr, " ");
	ptr++;
	strncpy (program_date, ptr, 10);
	ptr = strchr (program_date, '/');
	*ptr = ':';
	ptr = strchr (program_date, '/');
	*ptr = ':';

/*	lint free */

	xdim = 0;
	ydim = 0;
	zdim = 0;
	xpix = 0;
	ypix = 0;
	zpix = 0;
	bitsperpix = 0;

/*
 *  Get command line arguments and initialize filenames:
 *  ---------------------------------------------------
 */

	if (argc != 5) {
		fprintf (stderr, "Usage: mri2analyze <input_root> <first#> <last#> <output_root>\n");
		return (ERROR);
	}
	root = argv[1];
	first = atoi (argv[2]);
	last = atoi (argv[3]);
	num_slices = last - first + 1;
	strcpy (ANALYZE_img, argv[4]);
	strcat (ANALYZE_img, ".img");
	strcpy (ANALYZE_hdr, argv[4]);
	strcat (ANALYZE_hdr, ".hdr");
	strcpy (IF_hdr, argv[4]);
	strcat (IF_hdr, ".ifh");
	newname = strrchr (ANALYZE_img, '/');
	if (newname == NULL)
		newname = ANALYZE_img;
	else
		newname += 1;

	if ((fd_hdr = fopen (ANALYZE_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [mri2analyze]: creating Analyze hdr %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if ((fd_img = fopen (ANALYZE_img, "w")) == 0) {
		fprintf (stderr, "ERROR [mri2analyze]: creating Analyze img %s\n", ANALYZE_img);
		return (ERROR);
	}
	if ((fd_if = fopen (IF_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [mri2analyze]: creating Interfile hdr %s\n", IF_hdr);
		return (ERROR);
	}
	global_max = 0;
	global_min = 32000;
	order = (char *) calloc (4, sizeof (char));

/*	Loop for all input images */

	for (slc = first; slc <= last; slc++) {
		strcpy (InFile, root);
		sprintf (num, "%d", slc);
		strcat (InFile, num);
		strcat (InFile, ".ima");

/* open file and check for success */

		Status = U3Open (&FileInp_p, InFile, "r");
		if (Status == 0) {
			fprintf (stdout, "Reading %s ", InFile);
		} else if (U3_isStatusError (Status, U3_NO_PERMISSION)) {
			fprintf (stderr, "ERROR [mri2analyze]: no read premission on %s\n", InFile);
			return (ERROR);
		} else if (U3_isStatusError (Status, U3_INVLD_FILE_PATH)) {
			fprintf (stderr, "ERROR [mri2analyze]: invalid path for %s\n", InFile);
			return (ERROR);
		} else if (U3_isStatusError (Status, U3_UNKNOWN_HEADER)) {
			fprintf (stderr, "ERROR [mri2analyze]: invalid image for %s\n", InFile);
			return (ERROR);
		} else
			return (ERROR);

/* determine header type */

		if ((Status = U3GetHeaderType (FileInp_p, &HeadType)) != 0) {
			fprintf (stderr, "ERROR [mri2analyze]: unknown type for %s\n", InFile);
			return (ERROR);
		}
		switch (HeadType) {
		case U3_internal_head_type:
			fprintf (stdout, " (Numaris 3 format");
			break;

		case U3_nema_head_type:
			fprintf (stdout, " (ACR-NEMA format");
			break;

		case U3_numaris1_head_type:
			fprintf (stdout, " (Numaris 1 format");
			break;

		case U3_numaris2_head_type:
			fprintf (stdout, " (Numaris 2 format");
			break;

		default:
			fprintf (stderr, "ERROR [mri2analyze]: unknown format for %s\n", InFile);
			return (ERROR);
		}

/* check data type and data size */

		if ((Status = U3GetDataType (FileInp_p, &DataType, &DataSize)) != 0) {
			fprintf (stderr, "ERROR [mri2analyze]: unknown data type for %s\n", InFile);
			return (ERROR);
		}
/* make sure it is an Image file */

		if (DataType == U3_image_data_type) {
			fprintf (stdout, "--image file)\n");
		} else {
			fprintf (stderr, "ERROR [mri2analyze]: not an image file: %s\n", InFile);
			return (ERROR);
		}


/* allocate memory space for the header buffer */

		if ((HeadBuffer = (header_t *) malloc (sizeof (header_t))) == 0) {
			fprintf (stderr, "ERROR [mri2analyze]: malloc header\n");
			return (ERROR);
		}
/* get the header buffer */

		if ((Status = U3GetHeader (FileInp_p, HeadBuffer)) != 0) {
			fprintf (stderr, "ERROR [mri2analyze]: reading header\n");
			free (HeadBuffer);
			return (ERROR);
		}
/* allocate memory space for the  data buffer */

		/* calculate the number of bytes per pixel */
		NumRows_ul = HeadBuffer->G28.Pre.Rows;
		NumColumns_ul = HeadBuffer->G28.Pre.Columns;
		NumPixels_ul = NumRows_ul * NumColumns_ul;

		/* set the offset to start reading the data */
		StartOffset_ul = 0;

		/* allocate memory space according to the data size */
		switch (DataSize) {
		case U3_set_m_short:
			if ((DataBuffer = (U_SHORT *) malloc (NumPixels_ul * BytesPerPixelShort)) == 0) {
				fprintf (stderr, "ERROR [mri2analyze]: malloc data buffer\n");
				return (ERROR);
			}
			break;

		case U3_set_m_long:
			fprintf (stderr, "ERROR [mri2analyze]: cannot read long integer format\n");
			return (ERROR);

		default:
			fprintf (stderr, "ERROR [mri2analyze]: incompatible data type\n");
			return (ERROR);
		}

/* read the pixel data into the buffer */

		if ((Status = U3ReadPixData (FileInp_p, StartOffset_ul,
					     NumPixels_ul, &DataSize, DataBuffer)) != 0) {
			fprintf (stderr, "ERROR [mri2analyze]: reading data\n");
			free (HeadBuffer);
			free (DataBuffer);
			return (ERROR);
		}
/*
 *	Get image header information and orientation
 */
		if (slc == first) {
			strcpy (institution, HeadBuffer->G08.Ide.InstitutionID);
			strcpy (model, HeadBuffer->G08.Ide.ManufacturerModel);
			strcpy (subject_id, HeadBuffer->G10.Pat.PatientId);
			sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Year);
			strcpy (study_date, num);
			strcat (study_date, ":");
			sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Month);
			strcat (study_date, num);
			strcat (study_date, ":");
			sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Day);
			strcat (study_date, num);
			strcpy (ParameterFileName, HeadBuffer->G19.Acq4.CM.ParameterFileName);
			strcpy (SequenceFileName, HeadBuffer->G19.Acq4.CM.SequenceFileName);
			strcpy (SequenceDescription, HeadBuffer->G19.Acq4.CM.SequenceDescription);
			bitsperpix = HeadBuffer->G28.Pre.BitsAllocated;
			strncpy (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.X, 1);
			strncat (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.Y, 1);
			strncat (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.Z, 1);

			orientation = HeadBuffer->G21.Rel1.CM.ViewDirection;
			if (orientation < 1 && orientation > 6) {
				fprintf (stderr, "ERROR [mri2analyze]: incompatible view direction\n");
				return (ERROR);
			}
			fprintf (stdout, "%s  (%s)\n", view[orientation], order);

			switch (orientation) {

			case 1:		 /* View_FEET */
			case 2:		 /* View_HEAD */
				xdim = HeadBuffer->G28.Pre.Columns;
				ydim = HeadBuffer->G28.Pre.Rows;
				zdim = num_slices;
				xpix = HeadBuffer->G28.Pre.PixelSize.Row;
				ypix = HeadBuffer->G28.Pre.PixelSize.Row;
				zpix = HeadBuffer->G18.Acq.SliceThickness;
				break;

			case 3:		 /* View_AtoP */
			case 5:		 /* View_PtoA */
				xdim = HeadBuffer->G28.Pre.Columns;
				ydim = num_slices;
				zdim = HeadBuffer->G28.Pre.Rows;
				xpix = HeadBuffer->G28.Pre.PixelSize.Row;
				ypix = HeadBuffer->G18.Acq.SliceThickness;
				zpix = HeadBuffer->G28.Pre.PixelSize.Row;
				break;

			case 4:		 /* View_LtoR */
			case 6:		 /* View_RtoL */
				xdim = num_slices;
				ydim = HeadBuffer->G28.Pre.Columns;
				zdim = HeadBuffer->G28.Pre.Rows;
				xpix = HeadBuffer->G18.Acq.SliceThickness;
				ypix = HeadBuffer->G28.Pre.PixelSize.Row;
				zpix = HeadBuffer->G28.Pre.PixelSize.Row;
				break;

			default:
				fprintf (stderr, "ERROR [mri2analyze]: incompatible view direction\n");
				return (ERROR);
			}

			fprintf (stdout, "x = %d (%f mm)  y = %d (%f mm)  z = %d (%f mm)\n",
				 xdim, xpix, ydim, ypix, zdim, zpix);


			if ((img = s3tensor (0, zdim - 1, 0, ydim - 1, 0, xdim - 1)) == NULL) {
				fprintf (stderr, "ERROR [mri2analyze]: malloc img\n");
				return (ERROR);
			}
		}
		if (strncmp (order, "LAF", 3) == 0) {	/* View_FEET */
			n = 0;
			k = slc - first;
			for (j = ydim - 1; j >= 0; j--) {
				for (i = xdim - 1; i >= 0; i--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "RAH", 3) == 0) {	/* View_HEAD */
			n = 0;
			k = slc - first + 1;	 /* subtract 1 from zdim in loop */
			for (j = ydim - 1; j >= 0; j--) {
				for (i = 0; i < xdim; i++) {
					datum = DataBuffer[n];
					img[zdim - k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "RHA", 3) == 0) {	/* View_AtoP */
			n = 0;
			j = slc - first + 1;	 /* subtract 1 from ydim in loop */
			for (k = zdim - 1; k >= 0; k--) {
				for (i = 0; i < xdim; i++) {
					datum = DataBuffer[n];
					img[k][ydim - j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "RHP", 3) == 0) {	/* ? View_AtoP ? */
			n = 0;
			j = slc - first;
			for (k = zdim - 1; k >= 0; k--) {
				for (i = 0; i < xdim; i++) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "RFA", 3) == 0) {	/* View_PtoA */
			n = 0;
			j = slc - first;
			for (k = zdim - 1; k >= 0; k--) {
				for (i = xdim - 1; i >= 0; i--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "AHR", 3) == 0) {	/* View_LtoR */
			n = 0;
			i = slc - first;
			for (k = zdim - 1; k >= 0; k--) {
				for (j = ydim - 1; j >= 0; j--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "PHL", 3) == 0) {	/* View_RtoL */
			n = 0;
			i = slc - first + 1;	 /* subtract 1 from xdim in loop */
			for (k = zdim - 1; k >= 0; k--) {
				for (j = 0; j <= ydim; j++) {
					datum = DataBuffer[n];
					img[k][j][xdim - i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else {
			fprintf (stderr, "ERROR [mri2analyze]: incompatible order %s\n", order);
			return (ERROR);
		}

		free (HeadBuffer);
		free (DataBuffer);
		Status = U3Close (FileInp_p);
        if (Status != 0) {
            fprintf (stderr, "ERROR [mri2analyze]: closing file\n");
            return (ERROR);
        }
	}

/*
 * Write to output file
 */

	for (k = 0; k < zdim; k++) {
		for (j = 0; j < ydim; j++) {
			if ((fwrite (img[k][j], sizeof (short), xdim, fd_img)) != xdim) {
				fprintf (stderr, "ERROR [mri2analyze]: writing %s\n", ANALYZE_img);
				return (ERROR);
			}
		}
	}

/*
 * Create Analyze hdr file
 */

	strncpy (hdr.hk.db_name, InFile, 17);
	hdr.hk.sizeof_hdr = sizeof (struct dsr); /* required by developers */
	hdr.hk.extents = 16384;			 /* recommended by developers  */
	hdr.hk.regular = 'r';			 /* required by developers */
	hdr.dime.dim[0] = 4;			 /* 4 dimensions  */
	hdr.dime.dim[1] = xdim;
	hdr.dime.dim[2] = ydim;
	hdr.dime.dim[3] = zdim;
	hdr.dime.dim[4] = 1;			 /* one volume */
	hdr.dime.unused8 = 0;			 /* despite the label, some of this is used */
	hdr.dime.unused9 = 0;
	hdr.dime.unused10 = 0;
	hdr.dime.unused11 = 0;
	hdr.dime.unused12 = 0;
	hdr.dime.unused13 = 0;
	hdr.dime.unused14 = 0;
	hdr.dime.datatype = 4;			 /* 16 bit signed integer  */
	hdr.dime.bitpix = bitsperpix;
	hdr.dime.pixdim[1] = xpix;
	hdr.dime.pixdim[2] = ypix;
	hdr.dime.pixdim[3] = zpix;
	hdr.dime.funused8 = 0;
	hdr.dime.funused9 = 0;
	hdr.dime.funused10 = 0;
	hdr.dime.funused11 = 0;
	hdr.dime.funused12 = 0;
	hdr.dime.funused13 = 0;
	hdr.dime.glmax = global_max;
	hdr.dime.glmin = global_min;
	strncpy (hdr.hist.descrip, InFile, 79);
	strcpy (hdr.hist.originator, "mri2analy");
	strncpy (hdr.hist.patient_id, version, 4);
	hdr.hist.orient = TRANSVERSE;

	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [mri2analyze]: writing %s\n", ANALYZE_hdr);
		return (ERROR);
	}
/*
 * Create Interfile Format header file
 */

	fprintf (fd_if, "INTERFILE :=\n");
	fprintf (fd_if, "version of keys	:= 3.3\n");
	fprintf (fd_if, "image modality	:= mri\n");
	fprintf (fd_if, "originating system	:= %s\n", model);
	fprintf (fd_if, "conversion program	:= mri2analyze\n");
	fprintf (fd_if, "program version	:= %s\n", version);
	fprintf (fd_if, "program date	:= %s\n", program_date);
	fprintf (fd_if, "original institution	:= %s\n", institution);
	fprintf (fd_if, "name of data file	:= %s\n", newname);
	fprintf (fd_if, "subject ID := %s\n", subject_id);
	fprintf (fd_if, "study date	:= %s\n", study_date);

	fprintf (fd_if, "number format	:= signed integer\n");
	fprintf (fd_if, "number of bytes per pixel	:= %d\n", bitsperpix / 8);
	fprintf (fd_if, "number of dimensions	:= 3\n");
	fprintf (fd_if, "matrix size [1]	:= %d\n", xdim);
	fprintf (fd_if, "matrix size [2]	:= %d\n", ydim);
	fprintf (fd_if, "matrix size [3]	:= %d\n", zdim);
	fprintf (fd_if, "scaling factor (mm/pixel) [1]	:= %f\n", xpix);
	fprintf (fd_if, "scaling factor (mm/pixel) [2]	:= %f\n", ypix);
	fprintf (fd_if, "scaling factor (mm/pixel) [3]	:= %f\n", zpix);
	fprintf (fd_if, "matrix initial element [1]	:= right\n");
	fprintf (fd_if, "matrix initial element [2]	:= posterior\n");
	fprintf (fd_if, "matrix initial element [3]	:= inferior\n");
	fprintf (fd_if, "mri parameter file name	:= %s\n", ParameterFileName);
	fprintf (fd_if, "mri sequence file name	:= %s\n", SequenceFileName);
	fprintf (fd_if, "mri sequence description	:= %s\n", SequenceDescription);

/* free all buffers and exit */

	fprintf (stdout, "Successfully created %s\n", ANALYZE_img);
	(void) fclose (fd_hdr);
	(void) fclose (fd_img);
	(void) fclose (fd_if);
	return (OK);
}
@


1.10
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*$Id: mri2analyze.c,v 1.9 2002/01/11 15:45:35 tom Exp tom $*/
d3 3
d68 1
a68 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/mri2analyze/RCS/mri2analyze.c,v 1.9 2002/01/11 15:45:35 tom Exp tom $";
@


1.9
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*$Id: mri2analyze.c,v 1.8 2002/01/04 17:12:00 tom Exp $*/
d3 3
d65 1
a65 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/mri2analyze/RCS/mri2analyze.c,v 1.8 2002/01/04 17:12:00 tom Exp $";
d203 1
a203 1
			fprintf (stdout, "mri2analyze : reading %s ", InFile);
d499 4
@


1.8
log
@remove / from ifh filename
@
text
@d1 1
a1 1
/*$Id: mri2analyze.c,v 1.7 2000/08/18 19:16:41 tom Exp tom $*/
d3 3
d42 1
d45 5
a49 2
#include <lib3_file_transform.h>		/* Numaris 3 User's Library */
#include <ANALYZE.h>			 		/* dsr */
d62 1
a62 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/mri2analyze/RCS/mri2analyze.c,v 1.7 2000/08/18 19:16:41 tom Exp tom $";
d81 1
a81 1
	long unsigned   NumPixels_ul, NumBytes_ul, NumRows_ul, NumColumns_ul, StartOffset_ul;
d89 2
a90 2
	char		   *order;
	char		   *newname;				 /* pointer to ANALYZE_img minus path */
d93 2
a94 2
	char            IF_hdr[MAXSTR];			 /* output Interfile Format header filename */
	char			view[6][10];
d99 6
a104 6
	char			institution[MAXSTR];
	char			model[MAXSTR];
	char			subject_id[MAXSTR];
	char			ParameterFileName[MAXSTR];
	char			SequenceFileName[MAXSTR];
	char			SequenceDescription[MAXSTR];
d106 1
a106 1
	int				bitsperpix;
d112 1
a112 1
	int				slc;
d137 10
d153 2
a154 2
		printf ("Usage: mri2analyze <input_root> <first#> <last#> <output_root>\n");
		exit (1);
d166 1
a166 1
	newname = strrchr(ANALYZE_img,'/');
d173 2
a174 2
		printf ("Unable to create ANALYZE header %s\n", ANALYZE_hdr);
		exit (1);
d177 2
a178 2
		printf ("Unable to create ANALYZE image %s\n", ANALYZE_img);
		exit (1);
d181 2
a182 2
		printf ("Unable to create Interfile Format header %s\n", IF_hdr);
		exit (1);
d186 1
a186 1
	order = (char *) calloc(4,sizeof(char));
d200 1
a200 1
			printf ("mri2analyze : reading %s ", InFile);
d202 2
a203 2
			printf ("\nerror: mri2analyze : inadequate permission on data file %s\n", InFile);
			exit (1);
d205 2
a206 2
			printf ("\nerror: mri2analyze : invalid file path for %s\n", InFile);
			exit (1);
d208 2
a209 2
			printf ("\nerror: mri2analyze : file %s is not a valid image file\n", InFile);
			exit (1);
d211 1
a211 1
			exit (1);
d216 2
a217 2
			printf ("\nerror: mri2analyze : unknown header type.\n");
			exit (1);
d221 1
a221 1
			printf (" (Numaris 3 format");
d225 1
a225 1
			printf (" (ACR-NEMA format");
d229 1
a229 1
			printf (" (Numaris 1 format");
d233 1
a233 1
			printf (" (Numaris 2 format");
d237 2
a238 2
			printf ("\nThe data file format is unknown.\n");
			exit (1);
d244 2
a245 2
			printf ("\nerror: mri2analyze : unknown data type.\n");
			exit (1);
d250 1
a250 1
			printf ("--image file)\n");
d252 2
a253 2
			printf ("\nerror: mri2analyze : Data file is not an image file.\n");
			exit (1);
d260 2
a261 2
			printf ("\nerror : mri2analyze : unable to allocate memory.\n");
			exit (1);
d266 1
d268 1
a268 2
			printf ("\nerror: mri2analyze : unable to get the header.\n");
			exit (1);
d284 2
a285 2
				printf ("\nerror : unable to allocate memory space for the data.");
				exit (1);
d290 2
a291 2
			printf ("\nerror : long integer format not acceptable.");
			exit (1);
d294 2
a295 2
			printf ("\nerror: mri2analyze : Incompatible data type.\n");
			exit (1);
d302 1
d305 1
a305 2
			printf ("\nerror: unable to read the pixel data.\n");
			exit (1);
a306 1

d314 1
a314 1
			sprintf (num, "%d", HeadBuffer->G08.Ide.StudyDate.Year);
d317 1
a317 1
			sprintf (num, "%d", HeadBuffer->G08.Ide.StudyDate.Month);
d320 1
a320 1
			sprintf (num, "%d", HeadBuffer->G08.Ide.StudyDate.Day);
d332 2
a333 2
				printf ("\nerror: mri2analyze: Incompatible View Direction.\n");
				exit (1);
d335 1
a335 1
			printf ("%s  (%s)\n", view[orientation], order);
d339 2
a340 2
			case 1:						/* View_FEET */
			case 2:						/* View_HEAD */
d349 2
a350 2
			case 3:						/* View_AtoP */
			case 5:						/* View_PtoA */
d359 2
a360 2
			case 4:						/* View_LtoR */
			case 6:						/* View_RtoL */
d370 2
a371 2
                printf ("\nerror: mri2analyze: Incompatible View Direction.\n");
                exit (1);
d374 2
a375 2
			printf ("x = %d (%f mm)  y = %d (%f mm)  z = %d (%f mm)\n",
				xdim, xpix, ydim, ypix, zdim, zpix);
d377 4
a380 3
			if (NULL == (img = (short ***) malloc ((short) (zdim * sizeof (short **))))) {
				printf ("\nCould not malloc memory for ***img\n");
				exit (1);
a381 12
			for (i = 0; i < zdim; i++) {
				if (NULL == (img[i] = (short **) malloc ((short) (ydim * sizeof (short *))))) {
					printf ("\nCould not malloc memory for **img\n");
					exit (1);
				}
				for (j = 0; j < ydim; j++) {
					if (NULL == (img[i][j] = (short *) malloc ((short) (xdim * sizeof (short))))) {
						printf ("\nCould not malloc memory for *img\n");
						exit (1);
					}
				}
			}
a382 1

d386 2
a387 2
			for (j = ydim-1; j >= 0; j--) {
				for (i = xdim-1; i >= 0; i--) {
d398 1
a398 1
		} else if (strncmp (order, "RAH", 3) == 0) {		/* View_HEAD */
d400 2
a401 2
			k = slc - first + 1;	/* subtract 1 from zdim in loop */
			for (j = ydim-1; j >= 0; j--) {
d413 1
a413 1
        } else if (strncmp (order, "RHA", 3) == 0) {     /* View_AtoP */
d415 2
a416 2
			j = slc - first + 1;	/* subtract 1 from ydim in loop */
			for (k = zdim-1; k >= 0; k--) {
d428 1
a428 1
        } else if (strncmp (order, "RHP", 3) == 0) { /* ? View_AtoP ? */
d431 1
a431 1
			for (k = zdim-1; k >= 0; k--) {
d443 1
a443 1
        } else if (strncmp (order, "RFA", 3) == 0) {     /* View_PtoA */
d446 2
a447 2
			for (k = zdim-1; k >= 0; k--) {
				for (i = xdim-1; i >= 0; i--) {
d458 1
a458 1
        } else if (strncmp (order, "AHR", 3) == 0) {     /* View_LtoR */
d461 2
a462 2
			for (k = zdim-1; k >= 0; k--) {
				for (j = ydim-1; j >= 0; j--) {
d473 1
a473 1
        } else if (strncmp (order, "PHL", 3) == 0) {     /* View_RtoL */
d475 2
a476 2
			i = slc - first + 1;	/* subtract 1 from xdim in loop */
			for (k = zdim-1; k >= 0; k--) {
d489 2
a490 2
            printf ("\nerror: mri2analyze: Incompatible Order:  %s\n", order);
            exit (1);
d501 3
a503 3
 
    for (k = 0; k < zdim ; k++) {
        for (j = 0; j < ydim; j++)  {
d505 2
a506 2
				printf ("Error writing to: %s\n", ANALYZE_img);
				exit (1);
d508 3
a510 3
        }
    }
 
d550 2
a551 2
		printf ("Error writing to: %s\n", ANALYZE_hdr);
		exit (1);
a552 1

d566 1
a566 1
    fprintf (fd_if, "subject ID := %s\n", subject_id);
d570 1
a570 1
	fprintf (fd_if, "number of bytes per pixel	:= %d\n", bitsperpix/8);
d587 5
a591 5
	printf ("\nmri2analyze completed successfully.  %s created.\n", ANALYZE_img);
	close (fd_hdr);
	close (fd_img);
	close (fd_if);
	exit (0);
@


1.7
log
@RFA
@
text
@d1 1
a1 1
/*$Id: mri2analyze.c,v 1.6 1999/03/19 15:31:57 tom Exp tom $*/
d3 3
d55 1
a55 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/mri2analyze/RCS/mri2analyze.c,v 1.6 1999/03/19 15:31:57 tom Exp tom $";
d83 1
d149 5
d562 1
a562 1
	fprintf (fd_if, "name of data file	:= %s\n", ANALYZE_img);
@


1.6
log
@change declaration of order
@
text
@d1 1
a1 1
/*$Id: mri2analyze.c,v 1.5 1998/01/21 20:45:33 tom Exp tom $*/
d3 3
d52 1
a52 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/mri2analyze/RCS/mri2analyze.c,v 1.5 1998/01/21 20:45:33 tom Exp tom $";
d430 1
a430 1
        } else if (strncmp (order, "LHP", 3) == 0) {     /* View_PtoA */
@


1.5
log
@read order "RHP"
@
text
@d1 1
a1 1
/*$Id: mri2analyze.c,v 1.4 1996/03/06 14:43:45 tom Exp tom $*/
d3 3
d49 1
a49 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/mri2analyze/RCS/mri2analyze.c,v 1.4 1996/03/06 14:43:45 tom Exp tom $";
d76 1
a90 1
	char			order[4];
d157 1
@


1.4
log
@change path to ANALYZE.h
@
text
@d1 1
a1 1
/*$Id: mri2analyze.c,v 1.3 1994/11/29 22:22:22 tom Exp tom $*/
d3 3
d46 1
a46 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/mri2analyze/RCS/mri2analyze.c,v 1.3 1994/11/29 22:22:22 tom Exp tom $";
d402 15
@


1.3
log
@changed orientations!
@
text
@d1 1
a1 1
/*$Id: mri2analyze.c,v 1.2 1994/11/28 23:10:09 tom Exp tom $*/
d3 3
a25 1

d29 2
a30 2
#include <lib3_file_transform.h>		 /* Numaris 3 User's Library */
#include <petutil/ANALYZE.h>			 /* dsr */
d43 1
a43 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/mri2analyze/RCS/mri2analyze.c,v 1.2 1994/11/28 23:10:09 tom Exp tom $";
@


1.2
log
@Interfile Format header added.
@
text
@d1 1
a1 1
/*$Id: mri2analyze.c,v 1.1 1994/11/23 21:54:21 tom Exp $*/
d3 3
d12 1
a12 1
 *  Date:           28-Nov-94
d41 1
a41 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/mri2analyze/RCS/mri2analyze.c,v 1.1 1994/11/23 21:54:21 tom Exp $";
d78 1
d82 1
d84 1
d276 1
d288 4
d298 1
a298 1
			printf ("%s\n", view[orientation]);
d358 1
a358 3
		switch (orientation) {

		case 1:						/* View_FEET */
d361 2
a362 2
			for (j = 0; j < ydim; j++) {
				for (i = 0; i < xdim; i++) {
a371 1
			break;
d373 1
a373 1
		case 2:						/* View_HEAD */
d375 3
a377 3
			k = slc - first;
			for (j = 0; j < ydim; j++) {
				for (i = xdim-1; i >= 0; i--) {
a386 1
			break;
d388 1
a388 1
		case 3:						/* View_AtoP */
d390 1
a390 1
			j = slc - first;
a401 1
			break;
d403 1
a403 1
		case 5:						/* View_PtoA */
a416 1
			break;
d418 1
a418 1
		case 4:						/* View_LtoR */
a431 1
			break;
d433 1
a433 1
		case 6:						/* View_RtoL */
d435 1
a435 1
			i = slc - first;
d437 1
a437 1
				for (j = ydim-1; j >= 0; j--) {
a446 1
			break;
d448 2
a449 2
		default:
            printf ("\nerror: mri2analyze: Incompatible View Direction.\n");
d492 1
a492 1
	hdr.dime.bitpix = HeadBuffer->G28.Pre.BitsAllocated;
d527 1
d531 1
a531 1
	fprintf (fd_if, "number of bytes per pixel	:= 2\n");
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$
d9 1
a9 1
 *  Date:           23-Nov-94
d15 1
d38 1
a38 1
static char     rcsid[] = "$Header$";
d61 1
d64 1
d67 1
a67 1
	char            num[10];
d69 9
d98 10
d126 2
d137 4
d265 1
a265 1
 *	Get image orientation
d268 14
d476 1
a476 1
	hdr.dime.dim[0] = 4;			 /* typically only 4 dimensions  */
d480 1
a480 1
	hdr.dime.dim[4] = 1;			 /* only one volume typically  */
d503 1
a503 3
	strcpy (hdr.hist.patient_id, "patientid");
	strcpy (hdr.hist.exp_date, "exp_date");
	strcpy (hdr.hist.exp_time, "exp_time");
d511 31
d547 1
@
