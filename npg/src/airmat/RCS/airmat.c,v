head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.16.19.42;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.26.19.52.08;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	99.12.17.20.49.02;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	96.04.30.13.48.10;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	95.09.26.21.10.37;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.09.26.15.31.46;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*  $Id: airmat.c,v 1.7 2002/11/26 19:52:08 tom Exp tom $
    $Log: airmat.c,v $
 * Revision 1.7  2002/11/26  19:52:08  tom
 * *** empty log message ***
 *
 * Revision 1.6  1999/12/17  20:49:02  tom
 * lint cleanig
 *
 * Revision 1.3  1996/04/30  13:48:10  tom
 * new libmatrix.a
 *
 * Revision 1.2  1995/09/26  21:10:37  tom
 * format change
 *
 * Revision 1.1  1995/09/26  15:31:46  tom
 * Initial revision
 *
 */
/* ===============================================================================
 *  Module:         airmat.c
 *  Date:           29-Sep-95
 *  Author:         Tom Videen
 *  Description:
 *      Find matrix which aligns 2 images using a set of fiducial points.
 *		and compare to an AIR file alignment over a brain volume.
 *	Inputs:
 *		[1] air file from aligning pet (reslice) to mri (standard) images (output from alignpettomri16)
 *		[2] X,Y,Z coordinates of brain midpoint along AC-PC line
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/airmat/RCS/airmat.c,v 1.7 2002/11/26 19:52:08 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <nrutil.h>
#include <matrixlib.h>
#include <AIR1.h>

#define RADTODEG 180./M_PI


main (argc, argv)
	int             argc;
	char          **argv;
{
	int             read_air ();
	char           *airfile;
	struct air      air;			 /* AIR file structure */
	float         **mat;
	float          *pt0, *pt1, *pt2;
	float           fscale[3];		 /* fixed (MR) image mm/pixel */
	float           rscale[3];		 /* reslice (PET) image mm/pixel */
	float			dy, dz;

/* Read arguments, write version to stdout */

	if (argc != 5) {
		(void) fprintf (stderr, "Usage: airmat pettomri.air X Y Z\n");
		return (1);
	}
	mat = matrix (1, 4, 1, 4);
	pt0 = vector (1, 4);
	pt1 = vector (1, 4);
	pt2 = vector (1, 4);
	airfile = argv[1];
	pt0[1] = atof (argv[2]) - 1.;
	pt0[2] = atof (argv[3]) - 1.;
	pt0[3] = atof (argv[4]) - 1.;
	pt0[4] = 1.0;

/*	Read AIR matrix into mat (transform pixels-to-pixels)*/

	if (read_air (airfile, &air, mat) != 0) {
		(void) fprintf (stderr, "ERROR: cannot read %s\n", airfile);
		return (1);
	}
	fscale[0] = air.s.x_size;
	fscale[1] = air.s.y_size;
	fscale[2] = air.s.z_size;
	rscale[0] = air.r.x_size;
	rscale[1] = air.r.y_size;
	rscale[2] = air.r.z_size;

	(void) printf ("MRI pixel size:  %f  %f  %f\n", fscale[0], fscale[1], fscale[2]);
	(void) printf ("PET pixel size:  %f  %f  %f\n", rscale[0], rscale[1], rscale[2]);
	(void) printf ("AIR transformation matrix:\n");
	matrix_print (mat, 4, 4);
	(void) printf ("Input Point:\n");
	matrix_print (pt0, 4, 1);
	(void) printf ("Transformed Point:\n");
	vector_mult (mat, pt0, pt1, 4, 4, 1);
	matrix_print (pt1, 4, 1);

	pt0[2] = pt0[2] + 50.0;
	(void) printf ("Second Point:\n");
	vector_mult (mat, pt0, pt2, 4, 4, 1);
	matrix_print (pt2, 4, 1);

	dy = (pt2[2]-pt1[2]) * rscale[1];
	dz = (pt2[3]-pt1[3]) * rscale[2];
	(void) printf ("Y = %.3f\n", pt1[2] + 1.);
	(void) printf ("Z = %.3f\n", pt1[3] + 1.);
	(void) printf ("Angle = %.3f degrees\n", RADTODEG * atan(dz/dy));

/*	Free memory */

	free_matrix (mat, 1, 4, 1, 4);
	free_vector (pt0, 1, 4);
	free_vector (pt1, 1, 4);
	free_vector (pt2, 1, 4);
	return (0);
}
@


1.7
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: airmat.c,v 1.6 1999/12/17 20:49:02 tom Exp tom $
d3 3
d31 1
d33 1
a33 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/airmat/RCS/airmat.c,v 1.6 1999/12/17 20:49:02 tom Exp tom $";
a49 1
	char            Usage[] = "Usage: airmat pettomri.air X Y Z\n";
d62 1
a62 1
		(void) fprintf (stderr, Usage);
@


1.6
log
@lint cleanig
@
text
@d1 1
a1 1
/*  $Id: airmat.c,v 1.3 1996/04/30 13:48:10 tom Exp tom $
d3 3
d29 1
a29 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/airmat/RCS/airmat.c,v 1.3 1996/04/30 13:48:10 tom Exp tom $";
d37 1
a37 1
#include <AIR.h>
@


1.3
log
@new libmatrix.a
@
text
@d1 1
a1 1
/*  $Id: airmat.c,v 1.2 1995/09/26 21:10:37 tom Exp tom $
d3 3
d25 4
a30 1
#include <string.h>
a31 1
#include <nr.h>
a33 1
#include <ANALYZE.h>
a37 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/airmat/RCS/airmat.c,v 1.2 1995/09/26 21:10:37 tom Exp tom $";
a38 3
char            Usage[] = "Usage: airmat pettomri.air X Y Z\n";
int             read_air ();

d43 2
a51 1
	int             i, j, k, n;
d57 1
a57 1
		exit (1);
d73 1
a73 1
		exit (1);
d99 3
a101 3
	printf ("Y = %.3f\n", pt1[2] + 1.);
	printf ("Z = %.3f\n", pt1[3] + 1.);
	printf ("Angle = %.3f degrees\n", RADTODEG * atan(dz/dy));
d109 1
a109 1
	exit (0);
@


1.2
log
@format change
@
text
@d1 1
a1 1
/*  $Id: airmat.c,v 1.1 1995/09/26 15:31:46 tom Exp tom $
d3 3
d26 5
a30 5
#include <nrecipes/kr/nr.h>
#include <nrecipes/kr/nrutil.h>
#include <petutil/matrixlib.h>
#include <petutil/ANALYZE.h>
#include "AIR.h"
d34 1
a34 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/airmat/RCS/airmat.c,v 1.1 1995/09/26 15:31:46 tom Exp tom $";
d74 6
a79 6
	fscale[0] = air.std.x_size;
	fscale[1] = air.std.y_size;
	fscale[2] = air.std.z_size;
	rscale[0] = air.res.x_size;
	rscale[1] = air.res.y_size;
	rscale[2] = air.res.z_size;
d88 1
a88 1
	matrix_mult (mat, pt0, pt1, 4, 4, 1);
d93 1
a93 1
	matrix_mult (mat, pt0, pt2, 4, 4, 1);
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
    $Log$
d31 1
a31 1
static char     rcsid[] = "$Header$";
d95 3
a97 3
	printf ("Y = %f\n", pt1[2] + 1.);
	printf ("Z = %f\n", pt1[3] + 1.);
	printf ("Angle = %f degrees\n", RADTODEG * atan(dz/dy));
@
