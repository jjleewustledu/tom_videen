head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.13.21.12.29;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.16.21.06.25;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.06.19.23.29;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.03.30.22.45.02;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/*	$Log: circle.c,v $
 * Revision 1.3  2001/10/16  21:06:25  tom
 * remove central hole
 *
 * Revision 1.2  2000/09/06  19:23:29  tom
 * strcpy filename
 *
 * Revision 1.1  1998/03/30  22:45:02  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			circle.c
 *	Date:			Mar 1998
 *	Author:			Tom Videen
 *	Description:	Create simulated circle in image file.
 * ===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/circle/RCS/circle.c,v 1.3 2001/10/16 21:06:25 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <math.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	float        ***img;
	double          size1, size2, size3;
	double          a, b;
	char           *fname1;			 /* file to process */
	char           *fname2;			 /* file to write */
	int             frm;			 /* frame number to process */
	int             n;
	char            runstamp[40];		 /* version, date and userid info */
	unsigned long   dim1, dim2, dim3;	 /* array dimensions */
	long            i, j, k;

/*	Get command line arguments */

	fname1 = argv[1];
	fname2 = argv[2];
	n = 2;
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[n + 1], argv[n + 2], argv[n + 3],
		 argv[n + 5], argv[n + 6], argv[n + 7]);

/*
 *	Get main header and subheader.
 *	Store RCS version in mh->sw_revision.
 */

	frm = 1;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file = make_imgfile (fname1);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [circle]: Could not open %s\n", fname1);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [circle]: Could not get MainHeader from %s\n", fname1);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		if (frm == 1) {
			indx.frm = 2;
			if (existimgfrm (file, &indx) == ERROR) {
				fprintf (stderr, "ERROR [circle]: cannot find %s frame 1 or 2\n", fname1);
				return (ERROR);
			}
		} else {
			fprintf (stderr, "ERROR [circle]: cannot find %s frame %d\n",
				 fname1, frm);
			return (ERROR);
		}
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [circle]: Could not read file subheader in %s\n", fname1);
		return (ERROR);
	}
	mh = file->mh;
	sh = file->sh;

	(void) save_rcs (file, rcsid, runstamp);

	dim1 = (unsigned long) sh->dim1;
	dim2 = (unsigned long) sh->dim2;
	dim3 = (unsigned long) sh->dim3;
	size1 = sh->sample_size_1;
	size2 = sh->sample_size_2;
	size3 = sh->sample_size_3;
	printf ("%f %f %f\n", size1, size2, size3);

/*	Read image */

	printf ("Reading %s, frame %d\n", fname1, indx.frm);
	if ((img = readtensor (file, &indx)) == NULL)
		return (ERROR);

	for (i = 1; i <= dim3; i++)
		for (j = 1; j <= dim2; j++)
			for (k = 1; k <= dim1; k++) {
				img[i][j][k] = 0;
				a = pow (((double) j - 64.) * size2, 2.0);
				b = pow (((double) k - 64.) * size1, 2.0);
				if (a + b <= 100.)
					img[i][j][k] = 1000;

/* The following creates a central hole (donut)
				if (a + b <= pow (2.5, 2.))
					img[i][j][k] = 0;
 */
			}


/*	Write image */

	indx.frm = 1;
	printf ("Writing %s\n", fname2);
	close_imgfile (file);
	(void) strcpy (file->name, fname2);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [circle]: Could not open %s\n", fname2);
		return (ERROR);
	}
	mh->nframe = indx.frm;
	if (put_mh (file) == ERROR)
		return (ERROR);
	if (writetensor (file, &indx, img) == ERROR)
		return (ERROR);
	free_f3tensor (img, 1, dim3, 1, dim2, 1, dim1);
	free_imgfile (file);
	return (OK);
}
@


1.3
log
@remove central hole
@
text
@d2 3
d13 1
a13 1
 *	Date:			Mar-98
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/circle/RCS/circle.c,v 1.2 2000/09/06 19:23:29 tom Exp tom $";
d53 1
a53 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[n + 1], argv[n + 2], argv[n + 3],
d96 1
a96 1
	save_rcs (file, rcsid, runstamp);
d133 2
a134 2
	strcpy (file->name, fname2);
	strcpy (file->mode, "w");
@


1.2
log
@strcpy filename
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/circle/RCS/circle.c,v 1.1 1998/03/30 22:45:02 tom Exp tom $";
d19 1
a23 1
#include <nr.h>
d117 3
a119 1
				if (a + b <= pow(2.5, 2.))
d121 1
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/circle/RCS/circle.c,v 1.1 1998/01/29 23:24:25 tom Exp $";
d124 1
a124 2
	free (file->name);
	file->name = fname2;
@
