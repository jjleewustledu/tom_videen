head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.18.16.08;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.12.16.18.03.08;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.15.24.29;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.08.11.16.10.57;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: anasumlateral.c,v $
 * Revision 1.4  1999/12/16  18:03:08  tom
 * sync version
 *
 * Revision 1.2  1999/08/13  15:24:29  tom
 * fix typo
 *
 * Revision 1.1  1999/08/11  16:10:57  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anasumlateral.c
 *	Date:			Aug 1999
 *	Author:			Tom Videen
 *	Description:	Create a summed lateral projection from an Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasumlateral/RCS/anasumlateral.c,v 1.4 1999/12/16 18:03:08 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <values.h>
#include <myvalues.h>
#include <nrutil.h>
#include <ANALYZE.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	long            dim1, dim2, dim3; /* dimensions of image */
	long            i,j,k,pln;
	long            num;
	short          *imga;
	float         **imgb;
	float        ***image;
	float           fmax, fmin, scl;

	if (argc != 5) {
		printf ("Usage: anasumlateral inhdr inimg outhdr outimg\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];

/*	Read image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anasumlateral]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anasumlateral]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1 * dim2 * dim3;
	imga = (short *) calloc (num, sizeof (short));
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anasumlateral]: Cannot calloc imga\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anasumlateral]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anasumlateral]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((image = f3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [anasumlateral]: Cannot malloc image\n");
		return (NULL);
	}
	fmax = 0;
	fmin = 0;
	k = 0;
	for (pln = 1; pln <= dim3; pln++) {
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				image[pln][j][i] = imga[k];
				k++;
				if (image[pln][j][i] > fmax)
					fmax = image[pln][j][i];
				if (image[pln][j][i] < fmin)
					fmin = image[pln][j][i];
			}
		}
	}
	free (imga);
	fprintf (stdout, "%s  Max = %.1f  Min = %.1f\n", img1, fmax, fmin);

	if ((imgb = matrix (1, dim3, 1, dim2)) == NULL) {
		fprintf (stderr, "ERROR [anasumlateral]: Cannot malloc imgb\n");
		return (NULL);
	}
	fmax = 0;
	for (pln = 1; pln <= dim3; pln++) {
		for (j = 1; j <= dim2; j++) {
			imgb[pln][j] = 0;
			for (i = 1; i <= dim1; i++) 
				imgb[pln][j] += image[pln][j][i];
			if (imgb[pln][j] > fmax) 
				fmax = imgb[pln][j];
		}
	}
	free (image);

	if (fmax > (float) MAXSHORT)
		scl = (float) MAXSHORT / fmax;
	else
		scl = 1;
	printf ("Projection Max = %.1f  scaled by %.4f to %.1f\n", fmax, scl, scl*fmax);
	imga = (short *) calloc (dim2 * dim3, sizeof (short));
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anasumlateral]: Cannot calloc imga\n");
		return (ERROR);
	}
	k = 0;
	for (pln = 1; pln <= dim3; pln++) {
		for (j = 1; j <= dim2; j++) {
			imga[k] = scl * imgb[pln][j];
			k++;
		}
	}
	free (imgb);

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [anasumlateral]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	hdr.dime.dim[1] = dim2;
	hdr.dime.dim[2] = dim3;
	hdr.dime.dim[3] = 1;
	hdr.dime.pixdim[1] = hdr.dime.pixdim[2];
	hdr.dime.pixdim[2] = hdr.dime.pixdim[3];
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anasumlateral]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [anasumlateral]: Unable to open %s\n", img2);
		return (ERROR);
	}
	if ((fwrite (imga, sizeof (short), dim2 * dim3, fd_img)) != dim2 * dim3) {
		fprintf (stderr, "ERROR [anasumlateral]: Error writing to: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	free (imga);
	return (OK);
}
@


1.4
log
@sync version
@
text
@d2 3
d13 1
a13 1
 *	Date:			Aug-99
d18 1
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasumlateral/RCS/anasumlateral.c,v 1.2 1999/08/13 15:24:29 tom Exp tom $";
d66 1
a66 1
	fclose (fd_hdr);
d70 1
a70 1
	fclose (fd_hdr);
d85 1
a85 1
	fclose (fd_img);
d131 4
d157 1
a157 1
	fclose (fd_hdr);
d167 1
a167 1
	fclose (fd_img);
@


1.2
log
@fix typo
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasumlateral/RCS/anasumlateral.c,v 1.1 1999/08/11 16:10:57 tom Exp $";
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasumlateral/RCS/anasumlateral.c,v 1.1 1999/08/10 21:42:32 tom Exp $";
d81 1
a81 1
		fprintf (stderr, "ERROR [anasumlaterl]: Cannot malloc image\n");
d103 1
a103 1
		fprintf (stderr, "ERROR [anasumlaterl]: Cannot malloc imgb\n");
@
