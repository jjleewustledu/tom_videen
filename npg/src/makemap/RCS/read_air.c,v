head	2.9;
access;
symbols;
locks; strict;
comment	@ * @;


2.9
date	2004.02.16.20.14.42;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2002.11.27.15.15.59;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.08.23.18.17.23;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.10.12.17.48.43;	author tom;	state Exp;
branches;
next	;


desc
@@


2.9
log
@Feb 2004
@
text
@/*  $Id: read_air.c,v 2.1 2002/11/27 15:15:59 tom Exp tom $
    $Log: read_air.c,v $
 * Revision 2.1  2002/11/27  15:15:59  tom
 * *** empty log message ***
 *
 * Revision 2.0  1996/08/23  18:17:23  tom
 * ver 2 AIR
 *
 * Revision 1.1  1995/10/12  17:48:43  tom
 * Initial revision
 * */
/* ===============================================================================
 *  Module:         read_air.c
 *  Date:           Oct 1995
 *  Author:         Tom Videen
 *  Description:
 *      Read an AIR file into the structure, air, and
 *      convert the transformation matrix into a matrix, mat, which
 *		might be used in standard matrix multiplications.
 *	Notes:
 *		The AIR matrix is bizarre (see manual appendix section VI)
 *		but the matrix created will work if the fixed image is isotropic.
 *	Return:
 *		0 = success
 *		1 = error
 *	History:
 *		Modified to handle Version 2.0 AIR files (TOV 15-Aug-95)
 * ===============================================================================
*/
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/makemap/RCS/read_air.c,v 2.1 2002/11/27 15:15:59 tom Exp tom $";
#endif

#include <stdio.h>
#include <strings.h>
#include <air.h>

#define MSIZE 4					 /* matrix dimension */

int             read_air (filename, air, mat)
	char           *filename;
	struct air2    *air;
	float         **mat;

{
	struct air1     oldair;
	FILE           *fp;
	int             i, j;

/*	Open file file */

	fp = fopen (filename, "rb");
	if (fp == NULL) {
		(void) fprintf (stderr, "ERROR: cannot open %s\n", filename);
		return 1;
	}
	if (fread ((char *) air, 1, sizeof (struct air2), fp) != sizeof (struct air2)) {
		/* Try reading it as an old 12 parameter air file */
		rewind (fp);
		if (fread ((char *) &oldair, 1, sizeof (struct air1), fp) != sizeof (struct air1)) {
			(void) fprintf (stderr, "ERROR: reading %s\n", filename);
			(void) fclose (fp);
			return 1;
		}
		(void) strncpy (air->stdfile, oldair.stdfile, 127);
		(void) strncpy (air->resfile, oldair.resfile, 127);
		(void) strncpy (air->comment, oldair.comment, 127);
		(void) strncpy (air->reserved, oldair.reserved, 115);
		air->std.bits = oldair.std.bits;
		air->std.xdim = oldair.std.xdim;
		air->std.ydim = oldair.std.ydim;
		air->std.zdim = oldair.std.zdim;
		air->std.xsize = oldair.std.xsize;
		air->std.ysize = oldair.std.ysize;
		air->std.zsize = oldair.std.zsize;
		air->res.bits = oldair.res.bits;
		air->res.xdim = oldair.res.xdim;
		air->res.ydim = oldair.res.ydim;
		air->res.zdim = oldair.res.zdim;
		air->res.xsize = oldair.res.xsize;
		air->res.ysize = oldair.res.ysize;
		air->res.zsize = oldair.res.zsize;
		air->stdhash = oldair.stdhash;
		air->reshash = oldair.reshash;
		air->e[0][0] = oldair.e[1][0];
		air->e[0][1] = oldair.e[1][1];
		air->e[0][2] = oldair.e[1][2];
		air->e[0][3] = 0;
		air->e[1][0] = oldair.e[2][0];
		air->e[1][1] = oldair.e[2][1];
		air->e[1][2] = oldair.e[2][2];
		air->e[1][3] = 0;
		air->e[2][0] = oldair.e[3][0];
		air->e[2][1] = oldair.e[3][1];
		air->e[2][2] = oldair.e[3][2];
		air->e[2][3] = 0;
		air->e[3][0] = oldair.e[0][0];
		air->e[3][1] = oldair.e[0][1];
		air->e[3][2] = oldair.e[0][2];
		air->e[3][3] = 1;
	}
	(void) fclose (fp);

/*	Initialize the matrix */

/*
	mat[4][1] = 0;
	mat[4][2] = 0;
	mat[4][3] = 0;
	mat[4][4] = 1;

	for (i = 1; i <= MSIZE; i++)
		mat[i][4] = (float) air->e[0][i - 1];
*/

	for (i = 1; i <= MSIZE; i++)
		for (j = 1; j <= MSIZE; j++)
			mat[j][i] = (float) air->e[i-1][j - 1];

	return 0;
}
@


2.1
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: read_air.c,v 2.0 1996/08/23 18:17:23 tom Exp tom $
d3 3
d14 1
a14 1
 *  Date:           11-Oct-95
d30 5
d36 2
a37 2
#include <string.h>
#include "air.h"
a40 5
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/makemap/RCS/read_air.c,v 2.0 1996/08/23 18:17:23 tom Exp tom $";

#endif

d66 4
a69 4
		strncpy (air->stdfile, oldair.stdfile, 127);
		strncpy (air->resfile, oldair.resfile, 127);
		strncpy (air->comment, oldair.comment, 127);
		strncpy (air->reserved, oldair.reserved, 115);
@


2.0
log
@ver 2 AIR
@
text
@d1 1
a1 1
/*  $Id: read_air.c,v 1.1 1995/10/12 17:48:43 tom Exp tom $
d3 3
d28 1
d34 1
a34 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/makemap/RCS/read_air.c,v 1.1 1995/10/12 17:48:43 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
    $Log$ */
d11 1
a11 1
 *      Read an AIR file into the structure, air1, and
d20 2
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/airsxr/RCS/read_air.c,v 1.1 1995/09/26 22:05:56 tom Exp $";
d34 1
a34 1
int             read_air (filename, air1, mat)
d36 1
a36 1
	struct air     *air1;
d40 3
a42 2
	FILE           *fptr;
	int             i, j, n;
d46 2
a47 2
	fptr = fopen (filename, "rb");
	if (fptr == NULL) {
d51 44
a94 5
	n = fread ((char *) air1, 1, sizeof (struct air), fptr);
	(void) fclose (fptr);
	if (n != sizeof (struct air)) {
		(void) fprintf (stderr, "ERROR: reading %s\n", filename);
		return 1;
d96 2
d100 1
d106 3
a108 2
	for (i = 1; i < MSIZE; i++)
		mat[i][4] = (float) air1->e[0][i - 1];
d110 3
a112 3
	for (i = 1; i < MSIZE; i++)
		for (j = 1; j < MSIZE; j++)
			mat[j][i] = (float) air1->e[i][j - 1];
@
