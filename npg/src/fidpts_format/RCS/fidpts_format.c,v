head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2006.02.03.14.16.32;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.02.21.52.34;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@separate sides
@
text
@/*	$Log: fidpts_format.c,v $
 * Revision 1.1  2006/02/02  21:52:34  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:		fidpts_format.c
 *	Date:		Feb 2006
 *	Author:		Tom Videen
 *	Intent:		Reformat list of fiducial points
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidpts_format/RCS/fidpts_format.c,v 1.1 2006/02/02 21:52:34 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <nrutil.h>
#include <myvalues.h>

/*	----------------------------
 *	Function:			fidpts_format
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{
	FILE           *fd_pts;
	char           *pts1;
	char           *pts2;
	char            line1[MAXLINE];
	char            line[MAXLINE];
	char            name[4];
	float           fx, fy, fz;
	int             npt, n, i;
	int             side;			 /* 0=all, 1=left, 2=right, 3=axial   */

	struct point {
		char            name[4];
		float           x;
		float           y;
		float           z;
	};
	struct point    pt1[13];

	if (argc != 4) {
		fprintf (stdout, "Usage: fidpts_format in.pts out.pts side\n");
		return (ERROR);
	}
	pts1 = argv[1];
	pts2 = argv[2];
	side = atoi (argv[3]);

	if ((fd_pts = fopen (pts1, "r")) == 0) {
		fprintf (stderr, "ERROR [fidpts_format]: opening %s\n", pts1);
		return (ERROR);
	}
	if (fgets (line1, MAXLINE, fd_pts) == NULL) {
		fprintf (stderr, "ERROR [fidpts_format]: Reading %s\n", pts1);
		return (ERROR);
	}
	npt = 0;
	while (fgets (line, MAXLINE, fd_pts) != NULL) {
		if (sscanf (line, "%3s %f %f %f", name, &fx, &fy, &fz) == 4) {
			(void) strcpy (pt1[npt].name, name);
			pt1[npt].x = fx;
			pt1[npt].y = fy;
			pt1[npt].z = fz;
			(npt)++;
		}
	}
	(void) fclose (fd_pts);

	if ((fd_pts = fopen (pts2, "w")) == 0) {
		fprintf (stderr, "ERROR [fidpts_format]: opening %s\n", pts2);
		return (ERROR);
	}
	fprintf (fd_pts, "%s", line1);
	if (side == 1) {			 /* left hemisphere     */
		n = 1;
		for (i = 0; i < 4; i++) {
			n = n + 2;
			fx = pt1[n].x;
			fy = pt1[n].y;
			fz = pt1[n].z;
			fprintf (fd_pts, "%-3s %8.2f %8.2f %8.2f\n", pt1[n].name, fx, fy, fz);
		}
	} else if (side == 2) {			 /* right hemisphere     */
		n = 2;
		for (i = 0; i < 4; i++) {
			n = n + 2;
			fx = pt1[n].x;
			fy = pt1[n].y;
			fz = pt1[n].z;
			fprintf (fd_pts, "%-3s %8.2f %8.2f %8.2f\n", pt1[n].name, fx, fy, fz);
		}
	} else if (side == 3) {			 /* axial */
		for (n = 0; n < 3; n++) {
			fx = pt1[n].x;
			fy = pt1[n].y;
			fz = pt1[n].z;
			fprintf (fd_pts, "%-3s %8.2f %8.2f %8.2f\n", pt1[n].name, fx, fy, fz);
		}
	} else {				 /* all */
		for (n = 0; n < npt; n++) {
			fx = pt1[n].x;
			fy = pt1[n].y;
			fz = pt1[n].z;
			fprintf (fd_pts, "%-3s %8.2f %8.2f %8.2f\n", pt1[n].name, fx, fy, fz);
		}
	}

	(void) fclose (fd_pts);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidpts_format/RCS/fidpts_format.c,v 1.1 2006/02/01 19:31:26 tom Exp $";
d34 1
d39 2
a40 1
	int             npt, n;
d50 2
a51 2
	if (argc != 2) {
		fprintf (stdout, "Usage: fidpts_format file.pts\n");
d55 2
d78 2
a79 2
	if ((fd_pts = fopen (pts1, "w")) == 0) {
		fprintf (stderr, "ERROR [fidpts_format]: opening %s\n", pts1);
d83 32
a114 5
	for (n = 0; n < npt; n++) {
		fx = pt1[n].x;
		fy = pt1[n].y;
		fz = pt1[n].z;
		fprintf (fd_pts, "%-3s %8.2f %8.2f %8.2f\n", pt1[n].name, fx, fy, fz);
@
