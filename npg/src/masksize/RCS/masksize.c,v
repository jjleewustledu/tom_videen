head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.16.21.14.33;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.15.57.06;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	96.11.13.19.48.47;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.11.13.19.42.49;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/* $Log: masksize.c,v $
 * Revision 1.3  2002/11/27  15:57:06  tom
 * *** empty log message ***
 *
 * Revision 1.2  1996/11/13  19:48:47  tom
 * x<->y
 *
 * Revision 1.1  1996/11/13  19:42:49  tom
 * Initial revision
 *
 * Revision 1.1  1996/11/13  19:42:18  tom
 * Initial revision
 * */
/*	=========================================================================
 *	Module:			masksize.c
 *	Author:			Tom Videen
 *	Description:	Strip pixels from outer edges of an image.
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: masksize.c,v 1.3 2002/11/27 15:57:06 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>
#include <libnrimg.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	char           *imgname;		 /* input image filename */
	int             i, j, k;		 /* indices to array image */
	int             x1=0;
	int             x2=0;
	int             y1=0;
	int             y2=0;
	long            dim[3];			 /* dimensions of tensors */
	float        ***image = NULL;		 /* primary image tensor */

/*
 *	Initializations
 */
	imgname = argv[1];
	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*
 *	Read image
 */

	file = make_imgfile (imgname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [masksize]: Cannot open %s\n", imgname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [masksize]: Cannot get MainHeader from %s\n", imgname);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [masksize]: Cannot read file subheader in %s\n", imgname);
		return (ERROR);
	}
	dim[0] = (long) file->sh->dim1;
	dim[1] = (long) file->sh->dim2;
	dim[2] = (long) file->sh->dim3;
	if ((image = readtensor (file, &indx)) == NULL) {
		fprintf (stderr, "ERROR [masksize]: Cannot read %s\n", imgname);
		return (ERROR);
	}
	printf ("  Z     X     Y      (slice number; width & height in pixels)\n");
	printf (" --    --    --\n");
	for (k = 1; k <= dim[2]; k++) {

		for (j = 1; j <= dim[1]; j++) {
			y1 = -1;
			for (i = 1; i <= dim[0]; i++) {
				if (image[k][j][i] > 0) {
					y1 = j;
					break;
				}
			}
			if (y1 > 0)
				break;
		}
		if (y1 < 0) {
			printf ("%3d %5d %5d\n", k, 0, 0);
			break;
		}
		for (j = dim[1]; j >= 1; j--) {
			y2 = -1;
			for (i = 1; i <= dim[0]; i++) {
				if (image[k][j][i] > 0) {
					y2 = j;
					break;
				}
			}
			if (y2 > 0)
				break;
		}

		for (i = 1; i <= dim[0]; i++) {
			x1 = -1;
			for (j = 1; j <= dim[1]; j++) {
				if (image[k][j][i] > 0) {
					x1 = i;
					break;
				}
			}
			if (x1 > 0)
				break;
		}

		for (i = dim[0]; i >= 1; i--) {
			x2 = -1;
			for (j = 1; j <= dim[1]; j++) {
				if (image[k][j][i] > 0) {
					x2 = i;
					break;
				}
			}
			if (x2 > 0)
				break;
		}

		printf ("%3d %5d %5d\n", k, x2 - x1 + 1, y2 - y1 + 1);
	}
	close_imgfile (file);
	free_imgfile (file);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d20 1
d22 1
a22 1
static char     rcsid[] = "$Id: masksize.c,v 1.2 1996/11/13 19:48:47 tom Exp tom $";
d33 1
@


1.2
log
@x<->y
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Id: masksize.c,v 1.1 1996/11/13 19:42:49 tom Exp tom $";
a22 1
#include <string.h>
a24 1
#include <nr.h>
a26 1
#include <imgutil.h>
d36 4
a39 1
	int             x1, x2, y1, y2;
@


1.1
log
@Initial revision
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Id: masksize.c,v 1.1 1996/11/13 19:42:18 tom Exp $";
d79 1
a79 1
			x1 = -1;
d82 1
a82 1
					x1 = j;
d86 1
a86 1
			if (x1 > 0)
d89 1
a89 1
		if (x1 < 0) {
d94 1
a94 1
			x2 = -1;
d97 1
a97 1
					x2 = j;
d101 1
a101 1
			if (x2 > 0)
d106 1
a106 1
			y1 = -1;
d109 1
a109 1
					y1 = i;
d113 1
a113 1
			if (y1 > 0)
d118 1
a118 1
			y2 = -1;
d121 1
a121 1
					y2 = i;
d125 1
a125 1
			if (y2 > 0)
@
