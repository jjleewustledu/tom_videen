head	3.0;
access;
symbols;
locks; strict;
comment	@ * @;


3.0
date	2004.02.16.15.52.22;	author tom;	state Exp;
branches;
next	2.10;

2.10
date	2003.12.12.17.11.42;	author tom;	state Exp;
branches;
next	2.9;

2.9
date	2002.03.14.15.30.33;	author tom;	state Exp;
branches;
next	2.8;

2.8
date	2001.05.30.14.55.25;	author tom;	state Exp;
branches;
next	2.7;

2.7
date	99.12.16.17.14.34;	author tom;	state Exp;
branches;
next	2.6;

2.6
date	98.04.29.17.34.36;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	96.10.16.16.36.28;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.09.30.22.30.19;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.09.30.22.30.09;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.09.24.16.29.30;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	96.04.23.21.08.07;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	96.04.23.20.56.18;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	93.09.22.15.54.33;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	93.09.22.15.15.45;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	92.09.21.21.40.54;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	92.07.22.22.57.34;	author ty7777;	state Exp;
branches;
next	;


desc
@hdrinfo First Release.
@


3.0
log
@Feb 2004
@
text
@/*$Id: hdrinfo.c,v 2.10 2003/12/12 17:11:42 tom Exp tom $*/
/*$Log: hdrinfo.c,v $
 * Revision 2.10  2003/12/12  17:11:42  tom
 * NPG
 *
 * Revision 2.9  2002/03/14  15:30:33  tom
 * clean output and lint
 *
 * Revision 2.8  2001/05/30  14:55:25  tom
 * add ntype=7
 *
 * Revision 2.7  1999/12/16  17:14:34  tom
 * lint cleaning
 *
 * Revision 2.6  1998/04/29  17:34:36  tom
 * handle NTYPE=6 (cmrglucose)
 *
 * Revision 2.5  1996/10/16  16:36:28  tom
 * sync with Version
 *
 * Revision 2.2  1996/09/30  22:30:19  tom
 * *** empty log message ***
 *
 * Revision 2.1  1996/09/30  22:30:09  tom
 * ntype == 12
 *
 * Revision 2.0  1996/09/24  16:29:30  tom
 * new libraries
 *
 * Revision 1.6  1996/04/23  21:08:07  tom
 * cleanup output of filtername
 *
 * Revision 1.5  1996/04/23  20:56:18  tom
 * revised by TOV to use libimgutil
 *
 * Revision 1.4  1993/09/22  15:54:33  tom
 * Added ntype = 11 for oxygen processing in t88mean -- TOV
 *
 * Revision 1.3  1993/09/22  15:15:45  ty7777
 * Before new changes, the current version is the working version.
 **/

/* ===============================================================================
 *  Module:         hdrinfo.c
 *  Date:           Dec 1992
 *  Author:         Tom Yang
 *  Description:    Read and display an hdr file.
 *  History:
 *		Sep-93		TOV Modified to read ntype = 11.
 *      Apr-96		TOV	Revised
 *		May 2001	TOV Modified to read ntype = 7
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/hdrinfo/RCS/hdrinfo.c,v 2.10 2003/12/12 17:11:42 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <imgutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	char           *hdrfile;
	HEADER_DATA    *hdr;
	char           *res;
	char           *datatype;
	char           *filtername;
	int				n;

	if (argc != 2) {
		fprintf (stderr, "Usage: mrihdr hdrfilename\n");
		return (ERROR);
	}
	hdrfile = argv[1];
	res = (char *) calloc (5, sizeof(char));
	if (res == NULL) return (ERROR);
	datatype = (char *) calloc (41, sizeof(char));
	if (datatype == NULL) return (ERROR);
	filtername = (char *) calloc (13, sizeof(char));
	if (filtername == NULL) return (ERROR);

	hdr = (HEADER_DATA *) malloc (sizeof (HEADER_DATA));
	if (hdr == NULL) return (ERROR);

	if (gethdr (hdrfile, hdr) == ERROR) {
		fprintf (stderr, "ERROR [hdrinfo]: reading %s\n", hdrfile);
		return (ERROR);
	}
	if (hdr->resolution == 1)
		(void) strcpy (res, "High");
	else
		(void) strcpy (res, "Low");
	switch (hdr->rcontype) {
	case 2:
		(void) strcpy (datatype, "RAW DATA");
		break;
	case 8:
		(void) strcpy (datatype, "NORM AVERAGE RECORD");
		break;
	case 10:
		(void) strcpy (datatype, "SLICED RAW DATA (processed by SLEPAL)");
		break;
	case 20:
		(void) strcpy (datatype, "SLICED RAW DATA (processed by SLICESEP)");
		break;
	case 40:
		(void) strcpy (datatype, "SLICED RAW DATA (processed by EMSLICE6)");
		break;
	case 60:
		(void) strcpy (datatype, "REGION OF INTEREST");
		break;
	case 100:
		(void) strcpy (datatype, "UNCORRECTED PROFILE (processed by BINVAL)");
		break;
	case 120:
		(void) strcpy (datatype, "BINNED PROFILE (processed by BINPROF)");
		break;
	case 130:
		(void) strcpy (datatype, "BINNED PROFILE (calculated by CORATCAL)");
		break;
	case 140:
		(void) strcpy (datatype, "BINNED PROFILE (processed by EMBIN6)");
		break;
	case 150:
		(void) strcpy (datatype, "ATTEN PROFILES/RING (processed w/EMRINGC6)");
		break;
	case 200:
		(void) strcpy (datatype, "ATTEN PROFILE");
		break;
	case 205:
		(void) strcpy (datatype, "CALCULATED ATTEN PROFILE");
		break;
	case 230:
		(void) strcpy (datatype, "CALCULATED ATTEN PROFILE (New Reconstr)");
		break;
	case 300:
		(void) strcpy (datatype, "NORM PROFILE");
		break;
	case 320:
		(void) strcpy (datatype, "NORM HEADER (processed by NORMAVE)");
		break;
	case 420:
		(void) strcpy (datatype, "CORRECTED TRANSMISSION PROFILE (w/CORATTEN)");
		break;
	case 500:
		(void) strcpy (datatype, "CORRECTED PROFILE");
		break;
	case 505:
		(void) strcpy (datatype, "CORRECTED PROFILE (TRANSMISSION)");
		break;
	case 520:
		(void) strcpy (datatype, "CORRECTED EMISSION PROFILE (w/CORSCAN)");
		break;
	case 1000:
		(void) strcpy (datatype, "IMAGE (Original Reconstruction)");
		break;
	case 1010:
		(void) strcpy (datatype, "ATTENUATION IMAGE (New Reconstruction)");
		break;
	case 1020:
		(void) strcpy (datatype, "EMISSION IMAGE (New Reconstruction)");
		break;
	case 2000:
		(void) strcpy (datatype, "EMISSION (DGP Maximum Likelihood)");
		break;
	case 2010:
		(void) strcpy (datatype, "EMISSION (DGP Filtered Backprojection)");
		break;
	default:
		(void) strcpy (datatype, "");
		break;
	}

	fprintf (stdout, " Scanner = %.14s            Date = %.8s\n", hdr->scanner, hdr->scandate);
	fprintf (stdout, " File = %.8s     Slices = %2d     Scan Time = %d sec\n", hdr->scanname,
		hdr->slices, hdr->scantime);
	if (hdr->slices != 14)
		fprintf (stdout, " Compound = %.10s\n", hdr->compound);
	else
		fprintf (stdout, " Compound = %.10s               Frame Length = %f sec\n",
			hdr->compound, hdr->framelen);
	(void) strncpy (filtername, hdr->filter, 12);
	if (hdr->rcontype == 4120)
		fprintf (stdout, " Reconstruction with Attenuation %12s\n", filtername);
	else if (hdr->rcontype == 4220)
		fprintf (stdout, " Reconstruction with 2D Emission %12s\n", filtername);
	else if (hdr->rcontype == 4230)
		fprintf (stdout, " Reconstruction with 3D Emission %12s\n", filtername);
	else if (strlen (filtername) > 0) {
		fprintf (stdout, " Reconstruction with %12s    %s Resolution\n", filtername, res);
		fprintf (stdout, " Data Type = %5d    %40s\n", hdr->rcontype, datatype);
	} else {
		fprintf (stdout, " Reconstruction Filter Not Specified   %s Resolution\n", res);
		fprintf (stdout, " Data Type = %5d    %40s\n", hdr->rcontype, datatype);
	}

	for (n = 0; n < 8; n++) {
		if (hdr->procdate[n] == ' ')
			hdr->procdate[n] = '0';
	}
	fprintf (stdout, " Processed by %.4s on %.8s\n", hdr->initials, hdr->procdate);
	fprintf (stdout, " File Type = %d\n", hdr->ntype);

	if (hdr->ntype == 1) {
		fprintf (stdout, " Oxygen Utilization Processing\n");
		fprintf (stdout, " A Coefficient (Oxygen) = %f\n", hdr->aoxygen1);
		fprintf (stdout, " B Coefficient (Oxygen) = %f\n", hdr->boxygen1);
		fprintf (stdout, " A Coefficient (Water)  = %f\n", hdr->awater1);
		fprintf (stdout, " B Coefficient (Water)  = %f\n", hdr->bwater1);
		fprintf (stdout, " PETT Conversion Factor = %f\n", hdr->pettcnv1);
		fprintf (stdout, " Total Oxygen Counts    = %E\n", hdr->o2cnts1);
		fprintf (stdout, " Oxygen Content         = %f\n", hdr->oxycont1);
		fprintf (stdout, " Integral of Blood Counts (from scan start) = %.1f\n", hdr->scancnts);
		fprintf (stdout, " Integral of Blood Counts (from injection) = %.1f\n", hdr->totalcnts);
	} else if (hdr->ntype == 2 || hdr->ntype == 4) {
		if (hdr->ntype == 2)
			fprintf (stdout, " Blood Flow Processing with Water\n");
		else
			fprintf (stdout, " Blood Flow Processing with Butanol\n");
		if (hdr->slices == 14)
			fprintf (stdout, " EVEN Slice Constants:\n");
		fprintf (stdout, " A Coefficient (Flow) = %E\n", hdr->aflow1);
		fprintf (stdout, " B Coefficient (Flow) = %E\n", hdr->bflow1);
		fprintf (stdout, " PETT Conversion Factor = %.3f\n", hdr->pettcnv1);
		if (hdr->slices == 14) {
			fprintf (stdout, " ODD Slice Constants:\n");
			fprintf (stdout, " A Coefficient (Flow) = %E\n", hdr->aflow2);
			fprintf (stdout, " B Coefficient (Flow) = %E\n", hdr->bflow2);
			fprintf (stdout, " PETT Conversion Factor = %f\n", hdr->pettcnv2);
		}
		fprintf (stdout, " Integral of Blood Counts (from scan start) = %.1f\n", hdr->scancnts);
		fprintf (stdout, " Integral of Blood Counts (from scan injection) = %.1f\n", hdr->totalcnts);
	} else if (hdr->ntype == 3) {
		fprintf (stdout, " Blood Volume Processing\n");
		if (hdr->slices == 14)
			fprintf (stdout, " EVEN Slice Constants:\n");
		fprintf (stdout, " Blood Volume Factor = %f\n", hdr->bvfactor1);
		fprintf (stdout, " PETT Conversion Factor = %f\n", hdr->pettcnv1);
		if (hdr->slices == 14) {
			fprintf (stdout, " ODD Slice Constants:\n");
			fprintf (stdout, " Blood Volume Factor = %f\n", hdr->bvfactor2);
			fprintf (stdout, " PETT Conversion Factor = %f\n", hdr->pettcnv2);
		}
		fprintf (stdout, " Integral of Blood Counts (from scan start) = %.1f\n", hdr->scancnts);
		fprintf (stdout, " Integral of Blood Counts (from scan injection) = %.1f\n", hdr->totalcnts);
	} else if (hdr->ntype == 5) {
		fprintf (stdout, " Tissue Activity Processing\n");
		if (hdr->scanlen > 0) {
			fprintf (stdout, " Frame Start Time =  %f sec\n", hdr->scanst);
			fprintf (stdout, " Frame Length   =  %f sec\n", hdr->scanlen);
		}
		if (hdr->slices == 14)
			fprintf (stdout, " EVEN Slice Constants:\n");
		fprintf (stdout, " PETT Conversion Factor = %f", hdr->pettcnv1);
		fprintf (stdout, "   (Not decay-corrected)\n");
		fprintf (stdout, " PETT Conversion Factor = %f", hdr->decay_factor1);
		fprintf (stdout, "   (Decay-corrected to time of adminstration)\n");
		if (hdr->slices == 14) {
			fprintf (stdout, " ODD Slice Constants:\n");
			fprintf (stdout, " PETT Conversion Factor = %f\n", hdr->pettcnv2);
			fprintf (stdout, "    (Not decay-corrected)\n");
			fprintf (stdout, " PETT Conversion Factor = %f\n", hdr->decay_factor2);
			fprintf (stdout, "    (Decay-corrected to time of adminstration)\n");
		}
	} else if (hdr->ntype == 6) {
		fprintf (stdout, " CMRGlucose Processing\n");
		if (hdr->scanlen > 0) {
			fprintf (stdout, " Frame Start Time =  %f sec\n", hdr->scanst);
			fprintf (stdout, " Frame Length   =  %f sec\n", hdr->scanlen);
		}
	} else if (hdr->ntype == 7) {
		fprintf (stdout, " Steady-State Oxygen Processing\n");
		fprintf (stdout, " Water/Oxygen Ratio     = %f\n", hdr->aoxygen1);
		fprintf (stdout, " PETT Conversion Factor = %f\n", hdr->pettcnv1);
		fprintf (stdout, " Oxygen Content         = %f\n", hdr->oxycont1);
	} else if (hdr->ntype == 11 || hdr->ntype == 12) {
		fprintf (stdout, " Oxygen Processed\n");
		fprintf (stdout, " A Coefficient          = %f\n", hdr->aoxygen1);
		fprintf (stdout, " PETT Conversion Factor = %f\n", hdr->pettcnv1);
	} else
		fprintf (stdout, " Unknown Type of Processing -- NTYPE = %d\n", hdr->ntype);

	fprintf (stdout, " Decay Constant used in Processing = %f 1/sec\n", hdr->tau);
	fprintf (stdout, " Pie File Name = %.8s\n", hdr->piename);
	fprintf (stdout, " Pie Slope = %f\n", hdr->pieslope);
	fprintf (stdout, " PETT Efficiency Factor = %f\n", hdr->efactor);

	free (hdr);
	return (OK);
}
@


2.10
log
@NPG
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 2.9 2002/03/14 15:30:33 tom Exp tom $*/
d3 3
d45 1
a45 1
 *  Date:           Dec-92
d54 1
d56 1
a56 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/hdrinfo/RCS/hdrinfo.c,v 2.9 2002/03/14 15:30:33 tom Exp tom $";
d81 1
d83 1
d85 1
d88 1
a88 4
	if (hdr == NULL) {
		fprintf (stderr, "ERROR [hdrinfo]: malloc hdr\n");
		return (ERROR);
	}
@


2.9
log
@clean output and lint
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 2.8 2001/05/30 14:55:25 tom Exp tom $*/
d3 3
d52 1
a52 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/hdrinfo/RCS/hdrinfo.c,v 2.8 2001/05/30 14:55:25 tom Exp tom $";
d64 5
a68 6
	char           *headerfile;
	HEADER_DATA    *header;
	char            res[5];
	char            datatype[41];
	char            filtername[13];
	char           *ptr;
d72 1
a72 1
		fprintf (stderr, "Usage: mrihdr <filename>\n");
d75 4
a78 1
	headerfile = argv[1];
d80 5
a84 1
	header = (HEADER_DATA *) malloc (sizeof (HEADER_DATA));
d86 2
a87 2
	if (gethdr (headerfile, header) == ERROR) {
		fprintf (stderr, "Error in gethdr ().\n");
d90 1
a90 1
	if (header->resolution == 1)
d94 1
a94 1
	switch (header->rcontype) {
d175 5
a179 5
	fprintf (stdout, " Scanner = %.14s            Date = %.8s\n", header->scanner, header->scandate);
	fprintf (stdout, " File = %.8s     Slices = %2d     Scan Time = %d sec\n", header->scanname,
		header->slices, header->scantime);
	if (header->slices != 14)
		fprintf (stdout, " Compound = %.10s\n", header->compound);
d182 3
a184 7
			header->compound, header->framelen);
	(void) strcpy (filtername, "            ");
	(void) strncpy (filtername, header->filter, 12);
	ptr = strstr (filtername, " ");
	if ((int) ptr > 0)
		*ptr = NULL;
	if (header->rcontype == 4120)
d186 1
a186 1
	else if (header->rcontype == 4220)
d188 1
a188 1
	else if (header->rcontype == 4230)
d192 1
a192 1
		fprintf (stdout, " Data Type = %5d    %40s\n", header->rcontype, datatype);
d195 1
a195 1
		fprintf (stdout, " Data Type = %5d    %40s\n", header->rcontype, datatype);
d199 2
a200 2
		if (header->procdate[n] == ' ')
			header->procdate[n] = '0';
d202 2
a203 2
	fprintf (stdout, " Processed by %.4s on %.8s\n", header->initials, header->procdate);
	fprintf (stdout, " File Type = %d\n", header->ntype);
d205 1
a205 1
	if (header->ntype == 1) {
d207 11
a217 11
		fprintf (stdout, " A Coefficient (Oxygen) = %f\n", header->aoxygen1);
		fprintf (stdout, " B Coefficient (Oxygen) = %f\n", header->boxygen1);
		fprintf (stdout, " A Coefficient (Water)  = %f\n", header->awater1);
		fprintf (stdout, " B Coefficient (Water)  = %f\n", header->bwater1);
		fprintf (stdout, " PETT Conversion Factor = %f\n", header->pettcnv1);
		fprintf (stdout, " Total Oxygen Counts    = %E\n", header->o2cnts1);
		fprintf (stdout, " Oxygen Content         = %f\n", header->oxycont1);
		fprintf (stdout, " Integral of Blood Counts (from scan start) = %.1f\n", header->scancnts);
		fprintf (stdout, " Integral of Blood Counts (from injection) = %.1f\n", header->totalcnts);
	} else if (header->ntype == 2 || header->ntype == 4) {
		if (header->ntype == 2)
d221 1
a221 1
		if (header->slices == 14)
d223 4
a226 4
		fprintf (stdout, " A Coefficient (Flow) = %E\n", header->aflow1);
		fprintf (stdout, " B Coefficient (Flow) = %E\n", header->bflow1);
		fprintf (stdout, " PETT Conversion Factor = %.3f\n", header->pettcnv1);
		if (header->slices == 14) {
d228 3
a230 3
			fprintf (stdout, " A Coefficient (Flow) = %E\n", header->aflow2);
			fprintf (stdout, " B Coefficient (Flow) = %E\n", header->bflow2);
			fprintf (stdout, " PETT Conversion Factor = %f\n", header->pettcnv2);
d232 3
a234 3
		fprintf (stdout, " Integral of Blood Counts (from scan start) = %.1f\n", header->scancnts);
		fprintf (stdout, " Integral of Blood Counts (from scan injection) = %.1f\n", header->totalcnts);
	} else if (header->ntype == 3) {
d236 1
a236 1
		if (header->slices == 14)
d238 3
a240 3
		fprintf (stdout, " Blood Volume Factor = %f\n", header->bvfactor1);
		fprintf (stdout, " PETT Conversion Factor = %f\n", header->pettcnv1);
		if (header->slices == 14) {
d242 2
a243 2
			fprintf (stdout, " Blood Volume Factor = %f\n", header->bvfactor2);
			fprintf (stdout, " PETT Conversion Factor = %f\n", header->pettcnv2);
d245 3
a247 3
		fprintf (stdout, " Integral of Blood Counts (from scan start) = %.1f\n", header->scancnts);
		fprintf (stdout, " Integral of Blood Counts (from scan injection) = %.1f\n", header->totalcnts);
	} else if (header->ntype == 5) {
d249 3
a251 3
		if (header->scanlen > 0) {
			fprintf (stdout, " Frame Start Time =  %f sec\n", header->scanst);
			fprintf (stdout, " Frame Length   =  %f sec\n", header->scanlen);
d253 1
a253 1
		if (header->slices == 14)
d255 1
a255 1
		fprintf (stdout, " PETT Conversion Factor = %f", header->pettcnv1);
d257 1
a257 1
		fprintf (stdout, " PETT Conversion Factor = %f", header->decay_factor1);
d259 1
a259 1
		if (header->slices == 14) {
d261 1
a261 1
			fprintf (stdout, " PETT Conversion Factor = %f\n", header->pettcnv2);
d263 1
a263 1
			fprintf (stdout, " PETT Conversion Factor = %f\n", header->decay_factor2);
d266 1
a266 1
	} else if (header->ntype == 6) {
d268 3
a270 3
		if (header->scanlen > 0) {
			fprintf (stdout, " Frame Start Time =  %f sec\n", header->scanst);
			fprintf (stdout, " Frame Length   =  %f sec\n", header->scanlen);
d272 1
a272 1
	} else if (header->ntype == 7) {
d274 4
a277 4
		fprintf (stdout, " Water/Oxygen Ratio     = %f\n", header->aoxygen1);
		fprintf (stdout, " PETT Conversion Factor = %f\n", header->pettcnv1);
		fprintf (stdout, " Oxygen Content         = %f\n", header->oxycont1);
	} else if (header->ntype == 11 || header->ntype == 12) {
d279 2
a280 2
		fprintf (stdout, " A Coefficient          = %f\n", header->aoxygen1);
		fprintf (stdout, " PETT Conversion Factor = %f\n", header->pettcnv1);
d282 1
a282 1
		fprintf (stdout, " Unknown Type of Processing -- NTYPE = %d\n", header->ntype);
d284 4
a287 4
	fprintf (stdout, " Decay Constant used in Processing = %f 1/sec\n", header->tau);
	fprintf (stdout, " Pie File Name = %.8s\n", header->piename);
	fprintf (stdout, " Pie Slope = %f\n", header->pieslope);
	fprintf (stdout, " PETT Efficiency Factor = %f\n", header->efactor);
d289 1
a289 1
	free (header);
@


2.8
log
@add ntype=7
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 2.7 1999/12/16 17:14:34 tom Exp tom $*/
d3 3
d49 1
a49 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/hdrinfo/RCS/hdrinfo.c,v 2.7 1999/12/16 17:14:34 tom Exp tom $";
d65 3
a67 2
	char			filtername[13];
	char		   *ptr;
d69 4
d82 1
a82 1
		strcpy (res, "High");
d84 1
a84 1
		strcpy (res, "Low");
d87 1
a87 1
		strcpy (datatype, "RAW DATA");
d90 1
a90 1
		strcpy (datatype, "NORM AVERAGE RECORD");
d93 1
a93 1
		strcpy (datatype, "SLICED RAW DATA (processed by SLEPAL)");
d96 1
a96 1
		strcpy (datatype, "SLICED RAW DATA (processed by SLICESEP)");
d99 1
a99 1
		strcpy (datatype, "SLICED RAW DATA (processed by EMSLICE6)");
d102 1
a102 1
		strcpy (datatype, "REGION OF INTEREST");
d105 1
a105 1
		strcpy (datatype, "UNCORRECTED PROFILE (processed by BINVAL)");
d108 1
a108 1
		strcpy (datatype, "BINNED PROFILE (processed by BINPROF)");
d111 1
a111 1
		strcpy (datatype, "BINNED PROFILE (calculated by CORATCAL)");
d114 1
a114 1
		strcpy (datatype, "BINNED PROFILE (processed by EMBIN6)");
d117 1
a117 1
		strcpy (datatype, "ATTEN PROFILES/RING (processed w/EMRINGC6)");
d120 1
a120 1
		strcpy (datatype, "ATTEN PROFILE");
d123 1
a123 1
		strcpy (datatype, "CALCULATED ATTEN PROFILE");
d126 1
a126 1
		strcpy (datatype, "CALCULATED ATTEN PROFILE (New Reconstr)");
d129 1
a129 1
		strcpy (datatype, "NORM PROFILE");
d132 1
a132 1
		strcpy (datatype, "NORM HEADER (processed by NORMAVE)");
d135 1
a135 1
		strcpy (datatype, "CORRECTED TRANSMISSION PROFILE (w/CORATTEN)");
d138 1
a138 1
		strcpy (datatype, "CORRECTED PROFILE");
d141 1
a141 1
		strcpy (datatype, "CORRECTED PROFILE (TRANSMISSION)");
d144 1
a144 1
		strcpy (datatype, "CORRECTED EMISSION PROFILE (w/CORSCAN)");
d147 1
a147 1
		strcpy (datatype, "IMAGE (Original Reconstruction)");
d150 1
a150 1
		strcpy (datatype, "ATTENUATION IMAGE (New Reconstruction)");
d153 1
a153 1
		strcpy (datatype, "EMISSION IMAGE (New Reconstruction)");
d156 1
a156 1
		strcpy (datatype, "EMISSION (DGP Maximum Likelihood)");
d159 1
a159 1
		strcpy (datatype, "EMISSION (DGP Filtered Backprojection)");
d162 1
a162 1
		strcpy (datatype, "");
d166 2
a167 2
	printf (" Scanner = %.14s            Date = %.8s\n", header->scanner, header->scandate);
	printf (" File = %.8s     Slices = %2d     Scan Time = %d sec\n", header->scanname,
d170 1
a170 1
		printf (" Compound = %.10s\n", header->compound);
d172 1
a172 1
		printf (" Compound = %.10s               Frame Length = %f sec\n",
d174 2
a175 1
	strncpy (filtername, header->filter, 12);
d180 1
a180 1
		printf (" Reconstruction with Attenuation %12s\n", filtername);
d182 1
a182 1
		printf (" Reconstruction with 2D Emission %12s\n", filtername);
d184 1
a184 1
		printf (" Reconstruction with 3D Emission %12s\n", filtername);
d186 2
a187 2
		printf (" Reconstruction with %12s          %s Resolution\n", filtername, res);
		printf (" Data Type = %5d    %40s\n", header->rcontype, datatype);
d189 2
a190 2
		printf (" Reconstruction Filter Not Specified          %s Resolution\n", res);
		printf (" Data Type = %5d    %40s\n", header->rcontype, datatype);
a191 1
	printf ("\n");
d193 6
a198 2
	printf (" Processed by %.4s on %.8s\n", header->initials, header->procdate);
	printf (" File Type = %d\n", header->ntype);
d201 10
a210 10
		printf (" Oxygen Utilization Processing\n");
		printf (" A Coefficient (Oxygen) = %f\n", header->aoxygen1);
		printf (" B Coefficient (Oxygen) = %f\n", header->boxygen1);
		printf (" A Coefficient (Water)  = %f\n", header->awater1);
		printf (" B Coefficient (Water)  = %f\n", header->bwater1);
		printf (" PETT Conversion Factor = %f\n", header->pettcnv1);
		printf (" Total Oxygen Counts    = %E\n", header->o2cnts1);
		printf (" Oxygen Content         = %f\n", header->oxycont1);
		printf (" Integral of Blood Counts (from scan start) = %.1f\n", header->scancnts);
		printf (" Integral of Blood Counts (from injection) = %.1f\n", header->totalcnts);
d213 1
a213 1
			printf (" Blood Flow Processing with Water\n");
d215 1
a215 1
			printf (" Blood Flow Processing with Butanol\n");
d217 4
a220 4
			printf (" EVEN Slice Constants:\n");
		printf (" A Coefficient (Flow) = %E\n", header->aflow1);
		printf (" B Coefficient (Flow) = %E\n", header->bflow1);
		printf (" PETT Conversion Factor = %.3f\n", header->pettcnv1);
d222 4
a225 4
			printf (" ODD Slice Constants:\n");
			printf (" A Coefficient (Flow) = %E\n", header->aflow2);
			printf (" B Coefficient (Flow) = %E\n", header->bflow2);
			printf (" PETT Conversion Factor = %f\n", header->pettcnv2);
d227 2
a228 2
		printf (" Integral of Blood Counts (from scan start) = %.1f\n", header->scancnts);
		printf (" Integral of Blood Counts (from scan injection) = %.1f\n", header->totalcnts);
d230 1
a230 1
		printf (" Blood Volume Processing\n");
d232 3
a234 3
			printf (" EVEN Slice Constants:\n");
		printf (" Blood Volume Factor = %f\n", header->bvfactor1);
		printf (" PETT Conversion Factor = %f\n", header->pettcnv1);
d236 3
a238 3
			printf (" ODD Slice Constants:\n");
			printf (" Blood Volume Factor = %f\n", header->bvfactor2);
			printf (" PETT Conversion Factor = %f\n", header->pettcnv2);
d240 2
a241 2
		printf (" Integral of Blood Counts (from scan start) = %.1f\n", header->scancnts);
		printf (" Integral of Blood Counts (from scan injection) = %.1f\n", header->totalcnts);
d243 1
a243 1
		printf (" Tissue Activity Processing\n");
d245 2
a246 2
			printf (" Frame Start Time =  %f sec\n", header->scanst);
			printf (" Frame Length   =  %f sec\n", header->scanlen);
d249 5
a253 5
			printf (" EVEN Slice Constants:\n");
		printf (" PETT Conversion Factor = %f\n", header->pettcnv1);
		printf ("    (Not decay-corrected)\n");
		printf (" PETT Conversion Factor = %f\n", header->decay_factor1);
		printf ("    (Decay-corrected to time of adminstration)\n");
d255 5
a259 5
			printf (" ODD Slice Constants:\n");
			printf (" PETT Conversion Factor = %f\n", header->pettcnv2);
			printf ("    (Not decay-corrected)\n");
			printf (" PETT Conversion Factor = %f\n", header->decay_factor2);
			printf ("    (Decay-corrected to time of adminstration)\n");
d262 1
a262 1
		printf (" CMRGlucose Processing\n");
d264 2
a265 2
			printf (" Frame Start Time =  %f sec\n", header->scanst);
			printf (" Frame Length   =  %f sec\n", header->scanlen);
d268 4
a271 4
		printf (" Steady-State Oxygen Processing\n");
		printf (" Water/Oxygen Ratio     = %f\n", header->aoxygen1);
		printf (" PETT Conversion Factor = %f\n", header->pettcnv1);
		printf (" Oxygen Content         = %f\n", header->oxycont1);
d273 3
a275 3
		printf (" Oxygen Processed\n");
		printf (" A Coefficient          = %f\n", header->aoxygen1);
		printf (" PETT Conversion Factor = %f\n", header->pettcnv1);
d277 1
a277 1
		printf (" Unknown Type of Processing -- NTYPE = %d\n", header->ntype);
d279 4
a282 4
	printf (" Decay Constant used in Processing = %f 1/sec\n\n", header->tau);
	printf (" Pie File Name = %.8s\n", header->piename);
	printf (" Pie Slope = %f\n", header->pieslope);
	printf (" PETT Efficiency Factor = %f\n", header->efactor);
@


2.7
log
@lint cleaning
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 2.6 1998/04/29 17:34:36 tom Exp tom $*/
d3 3
d40 3
a42 2
 *		Sep-93	TOV Modified to read ntype = 11.
 *      Apr-96	TOV	Revised
d46 1
a46 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/hdrinfo/RCS/hdrinfo.c,v 2.6 1998/04/29 17:34:36 tom Exp tom $";
d255 5
@


2.6
log
@handle NTYPE=6 (cmrglucose)
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 2.5 1996/10/16 16:36:28 tom Exp tom $*/
d3 3
d42 1
a42 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/hdrinfo/RCS/hdrinfo.c,v 2.5 1996/10/16 16:36:28 tom Exp tom $";
d46 1
@


2.5
log
@sync with Version
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 2.2 1996/09/30 22:30:19 tom Exp tom $*/
d3 3
d39 1
a39 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/hdrinfo/RCS/hdrinfo.c,v 2.2 1996/09/30 22:30:19 tom Exp tom $";
d241 6
@


2.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 2.1 1996/09/30 22:30:09 tom Exp tom $*/
d3 3
d36 1
a36 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/hdrinfo/RCS/hdrinfo.c,v 2.1 1996/09/30 22:30:09 tom Exp tom $";
@


2.1
log
@ntype == 12
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 2.0 1996/09/24 16:29:30 tom Exp tom $*/
d3 3
d33 1
a33 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/hdrinfo/RCS/hdrinfo.c,v 2.0 1996/09/24 16:29:30 tom Exp tom $";
d152 1
a152 1
	strncpy (filtername, header->filter);
d154 1
a154 1
	if (ptr > 0)
@


2.0
log
@new libraries
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 1.6 1996/04/23 21:08:07 tom Exp tom $*/
d3 3
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/hdrinfo/RCS/hdrinfo.c,v 1.6 1996/04/23 21:08:07 tom Exp tom $";
d232 1
a232 1
	} else if (header->ntype == 11) {
@


1.6
log
@cleanup output of filtername
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 1.5 1996/04/23 20:56:18 tom Exp tom $*/
d3 3
d27 1
a27 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/hdrinfo/RCS/hdrinfo.c,v 1.5 1996/04/23 20:56:18 tom Exp tom $";
@


1.5
log
@revised by TOV to use libimgutil
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 1.4 1993/09/22 15:54:33 tom Exp $*/
d3 3
d24 1
a24 1
static char     rcsid[] = "$Header$";
d39 2
d143 4
d148 1
a148 1
		printf (" Reconstruction with Attenuation %12s\n", header->filter);
d150 1
a150 1
		printf (" Reconstruction with 2D Emission %12s\n", header->filter);
d152 3
a154 3
		printf (" Reconstruction with 3D Emission %12s\n", header->filter);
	else if (strlen (header->filter) > 0) {
		printf (" Reconstruction with %12s          %s Resolution\n", header->filter, res);
@


1.4
log
@Added ntype = 11 for oxygen processing in t88mean -- TOV
@
text
@d1 1
a1 1
/*$Id: hdrinfo.c,v 1.3 1993/09/22 15:15:45 ty7777 Exp tom $*/
d3 3
d10 13
a22 4
/*_________________________________________________________________
  Description:	This program reads a PETT VI header file and display 
		the information on screen. The output can be redirected
		to a file.
a23 4
  History:	Created by Tom Yang on 12/17/92. 
  		Modified 9/22/93 TOV to read ntype = 11. 
_________________________________________________________________*/

d26 1
a26 1
#include <petutil/petutil.h>
d29 2
a30 2
int	argc;
char	*argv [];
d32 4
a35 5
	char		*headerfile;
	FILE		*hdrfp;
	HEADER_DATA	*header;
	char		res[5];
	char		datatype[41];
d37 1
a37 1
	headerfile	= argv [1];
d39 1
a39 1
	header	= (HEADER_DATA *) malloc (sizeof (HEADER_DATA));
d41 1
a41 2
	if (gethdr (headerfile, header) == FAIL)
	{
d43 1
a43 1
		exit (FAIL);
a44 1

d49 79
a127 80
	switch (header->rcontype)
	{
		case 2:
			strcpy (datatype, "RAW DATA");
			break;
		case 8:
			strcpy (datatype, "NORM AVERAGE RECORD");
			break;
		case 10:
			strcpy (datatype, "SLICED RAW DATA (processed by SLEPAL)");
			break;
		case 20:
			strcpy (datatype, "SLICED RAW DATA (processed by SLICESEP)");
			break;
		case 40:
			strcpy (datatype, "SLICED RAW DATA (processed by EMSLICE6)");
			break;
		case 60:
			strcpy (datatype, "REGION OF INTEREST");
			break;
		case 100:
			strcpy (datatype, "UNCORRECTED PROFILE (processed by BINVAL)");
			break;
		case 120:
			strcpy (datatype, "BINNED PROFILE (processed by BINPROF)");
			break;
		case 130:
			strcpy (datatype, "BINNED PROFILE (calculated by CORATCAL)");
			break;
		case 140:
			strcpy (datatype, "BINNED PROFILE (processed by EMBIN6)");
			break;
		case 150:
			strcpy (datatype, "ATTEN PROFILES/RING (processed w/EMRINGC6)");
			break;
		case 200:
			strcpy (datatype, "ATTEN PROFILE");
			break;
		case 205:
			strcpy (datatype, "CALCULATED ATTEN PROFILE");
			break;
		case 230:
			strcpy (datatype, "CALCULATED ATTEN PROFILE (New Reconstr)");
			break;
		case 300:
			strcpy (datatype, "NORM PROFILE");
			break;
		case 320:
			strcpy (datatype, "NORM HEADER (processed by NORMAVE)");
			break;
		case 420:
			strcpy (datatype, "CORRECTED TRANSMISSION PROFILE (w/CORATTEN)");
			break;
		case 500:
			strcpy (datatype, "CORRECTED PROFILE");
			break;
		case 505:
			strcpy (datatype, "CORRECTED PROFILE (TRANSMISSION)");
			break;
		case 520:
			strcpy (datatype, "CORRECTED EMISSION PROFILE (w/CORSCAN)");
			break;
		case 1000:
			strcpy (datatype, "IMAGE (Original Reconstruction)");
			break;
		case 1010:
			strcpy (datatype, "ATTENUATION IMAGE (New Reconstruction)");
			break;
		case 1020:
			strcpy (datatype, "EMISSION IMAGE (New Reconstruction)");
			break;
		case 2000:
			strcpy (datatype, "EMISSION (DGP Maximum Likelihood)");
			break;
		case 2010:
			strcpy (datatype, "EMISSION (DGP Filtered Backprojection)");
			break;
		default:
			strcpy (datatype, "");
			break;
d131 2
a132 2
	printf (" File = %.8s     Slices = %2d     Scan Time = %d sec\n", header->scanname, 
				header->slices, header->scantime);
d136 1
a136 1
		printf (" Compound = %.10s               Frame Length = %f sec\n", 
d144 1
a144 2
	else if (strlen (header->filter) > 0)
	{
d147 1
a147 3
	}
	else
	{
d156 1
a156 2
	if (header->ntype == 1)
	{
a157 2
		if (header->slices == PETT6_14)
			printf (" EVEN Slice Constants:\n");
a164 13

		if (header->slices == PETT6_14)
		{
			printf (" ODD Slice Constants:\n");
			printf (" A Coefficient (Oxygen) = %f\n", header->aoxygen2);
			printf (" B Coefficient (Oxygen) = %f\n", header->boxygen2);
			printf (" A Coefficient (Water)  = %f\n", header->awater2);
			printf (" B Coefficient (Water)  = %f\n", header->bwater2);
			printf (" PETT Conversion Factor = %f\n", header->pettcnv2);
			printf (" Total Oxygen Counts    = %E\n", header->o2cnts2);
			printf (" Oxygen Content         = %f\n", header->oxycont2);
		}

d167 1
a167 3
	}
	else if (header->ntype == 2 || header->ntype == 4)
	{
d177 1
a177 2
		if (header->slices == 14)
		{
d182 1
a182 1
		}	
d185 1
a185 3
	}
	else if (header->ntype == 3)
	{
d191 1
a191 2
		if (header->slices == 14)
		{
d198 1
a198 3
	}
	else if (header->ntype == 5)
	{
d200 1
a200 2
		if (header->scanlen > 0)
		{
d210 1
a210 2
		if (header->slices == 14)
		{
d217 1
a217 3
	}
	else if (header->ntype == 11)
	{
d221 1
a221 2
	}
	else
a228 3
	/* 
	 * Close the header file 
	 */
d230 1
@


1.3
log
@Before new changes, the current version is the working version.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d13 1
d157 1
a157 1
		printf (" Oxygon Utilization Processing\n");
d242 6
@


1.2
log
@Move header structure to petutil.h.
@
text
@d1 11
d20 1
a20 1
	char		filename [255];
a24 28
	double		dd;
	float		totalcnts;
	float		scancnts;
	float		scanst;
	float		scanlen;
	float		tau;
	float		pettcnv1;
	float		aflow1;
	float		bflow1;
	float		bvfactor1;
	float		aoxygen1;
	float		boxygen1;
	float		awater1;
	float		bwater1;
	float		o2cnts1;
	float		oxycont1;
	float		decay_factor1;
	float		pettcnv2;
	float		aflow2;
	float		bflow2;
	float		bvfactor2;
	float		aoxygen2;
	float		boxygen2;
	float		awater2;
	float		bwater2;
	float		o2cnts2;
	float		oxycont2;
	float		decay_factor2;
d26 1
a26 3
	float		pieslope;
	float		efactor;
	short		i;
d28 1
a28 5
	if (argc == 1) 
	{
		printf (" Error: No header file are given.\n");
		exit (0);
	}
d30 1
a30 1
	if ((hdrfp = fopen (argv [1], "rb")) == (FILE *) NULL) 
d32 2
a33 19
		strcpy (filename, argv [1]);
		if (strrchr (filename, ".") != filename + strlen (filename) - 1 - 3)
		{
			if (isupper (filename [0]))
				strcat (filename, ".HDR");
			else
				strcat (filename, ".hdr");

			if ((hdrfp = fopen (filename, "rb")) == (FILE *) NULL) 
			{
				printf (" Error: Header file \"%s\" does not exist.\n", argv[1]);
				exit (0);
			}
		}
		else
		{
			printf (" Error: Header file \"%s\" does not exist.\n", argv[1]);
			exit (0);
		}
a35 3
	header	= (HEADER_DATA *) malloc (sizeof (HEADER_DATA));

	fread (header, sizeof (HEADER_DATA), 1, hdrfp); 
a150 30
	totalcnts	= pe2ieee (header->totalcnts);
	scancnts	= pe2ieee (header->scancnts);
	scanst		= pe2ieee (header->scanst);
	scanlen		= pe2ieee (header->scanlen);
	tau		= pe2ieee (header->tau);
	pettcnv1	= pe2ieee (header->pettcnv1);
	aflow1		= pe2ieee (header->aflow1);
	bflow1		= pe2ieee (header->bflow1);
	bvfactor1	= pe2ieee (header->bvfactor1);
	aoxygen1	= pe2ieee (header->aoxygen1);
	boxygen1	= pe2ieee (header->boxygen1);
	awater1		= pe2ieee (header->awater1);
	bwater1		= pe2ieee (header->bwater1);
	o2cnts1		= pe2ieee (header->o2cnts1);
	oxycont1	= pe2ieee (header->oxycont1);
	decay_factor1	= pe2ieee (header->decay_factor1);
	pettcnv2	= pe2ieee (header->pettcnv2);
	aflow2		= pe2ieee (header->aflow2);
	bflow2		= pe2ieee (header->bflow2);
	bvfactor2	= pe2ieee (header->bvfactor2);
	aoxygen2	= pe2ieee (header->aoxygen2);
	boxygen2	= pe2ieee (header->boxygen2);
	awater2		= pe2ieee (header->awater2);
	bwater2		= pe2ieee (header->bwater2);
	o2cnts2		= pe2ieee (header->o2cnts2);
	oxycont2	= pe2ieee (header->oxycont2);
	decay_factor2	= pe2ieee (header->decay_factor2);
	pieslope	= pe2ieee (header->pieslope);
	efactor		= pe2ieee (header->efactor);

d154 1
a154 1
		if (header->slices == 14)
d156 7
a162 7
		printf (" A Coefficient (Oxygen) = %f\n", aoxygen1);
		printf (" B Coefficient (Oxygen) = %f\n", boxygen1);
		printf (" A Coefficient (Water)  = %f\n", awater1);
		printf (" B Coefficient (Water)  = %f\n", bwater1);
		printf (" PETT Conversion Factor = %f\n", pettcnv1);
		printf (" Total Oxygen Counts    = %E\n", o2cnts1);
		printf (" Oxygen Content         = %f\n", oxycont1);
d164 1
a164 1
		if (header->slices == 14)
d167 7
a173 7
			printf (" A Coefficient (Oxygen) = %f\n", aoxygen2);
			printf (" B Coefficient (Oxygen) = %f\n", boxygen2);
			printf (" A Coefficient (Water)  = %f\n", awater2);
			printf (" B Coefficient (Water)  = %f\n", bwater2);
			printf (" PETT Conversion Factor = %f\n", pettcnv2);
			printf (" Total Oxygen Counts    = %E\n", o2cnts2);
			printf (" Oxygen Content         = %f\n", oxycont2);
d176 2
a177 2
		printf (" Integral of Blood Counts (from scan start) = %.1f\n", scancnts);
		printf (" Integral of Blood Counts (from injection) = %.1f\n", totalcnts);
d187 3
a189 3
		printf (" A Coefficient (Flow) = %E\n", aflow1);
		printf (" B Coefficient (Flow) = %E\n", bflow1);
		printf (" PETT Conversion Factor = %.3f\n", pettcnv1);
d193 3
a195 3
			printf (" A Coefficient (Flow) = %E\n", aflow2);
			printf (" B Coefficient (Flow) = %E\n", bflow2);
			printf (" PETT Conversion Factor = %f\n", pettcnv2);
d197 2
a198 2
		printf (" Integral of Blood Counts (from scan start) = %.1f\n", scancnts);
		printf (" Integral of Blood Counts (from scan injection) = %.1f\n", totalcnts);
d205 2
a206 2
		printf (" Blood Volume Factor = %f\n", bvfactor1);
		printf (" PETT Conversion Factor = %f\n", pettcnv1);
d210 2
a211 2
			printf (" Blood Volume Factor = %f\n", bvfactor2);
			printf (" PETT Conversion Factor = %f\n", pettcnv2);
d213 2
a214 2
		printf (" Integral of Blood Counts (from scan start) = %.1f\n", scancnts);
		printf (" Integral of Blood Counts (from scan injection) = %.1f\n", totalcnts);
d221 2
a222 2
			printf (" Frame Start Time =  %f sec\n", scanst);
			printf (" Frame Length   =  %f sec\n", scanlen);
d226 1
a226 1
		printf (" PETT Conversion Factor = %f\n", pettcnv1);
d228 1
a228 1
		printf (" PETT Conversion Factor = %f\n", decay_factor1);
d233 1
a233 1
			printf (" PETT Conversion Factor = %f\n", pettcnv2);
d235 1
a235 1
			printf (" PETT Conversion Factor = %f\n", decay_factor2);
d242 1
a242 1
	printf (" Decay Constant used in Processing = %f 1/sec\n\n", tau);
d244 2
a245 2
	printf (" Pie Slope = %f\n", pieslope);
	printf (" PETT Efficiency Factor = %f\n", efactor);
d247 3
a249 2
	/* close the header file */
	fclose (hdrfp);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 49
#include "petutil.h"

typedef struct {
	char	scanner [14];
	char	scanname [8];
	char	scandate [8];
	short	slices;
	short	scantime;
	char	compound [10];
	char	filter [12];
	short	rcontype;
	short	resolution;
	char	procdate [8];
	char	initials [4];
	short	ntype;
	short	unused_1;
	char	piename [8];
	int	totalcnts;
	int	scancnts;
	int	scanst;
	int	scanlen;
	int	framelen;
	int	tau;
	int	pettcnv1;
	int	aflow1;
	int	bflow1;
	int	bvfactor1;
	int	aoxygen1;
	int	boxygen1;
	int	awater1;
	int	bwater1;
	int	o2cnts1;
	int	oxycont1;
	int	decay_factor1;
	int	pettcnv2;
	int	aflow2;
	int	bflow2;
	int	bvfactor2;
	int	aoxygen2;
	int	boxygen2;
	int	awater2;
	int	bwater2;
	int	o2cnts2;
	int	oxycont2;
	int	decay_factor2;
	int	pieslope;
	int	efactor;
	short	unused_2 [26];
} HEADER_DATA;
@
