head	2.22;
access;
symbols;
locks; strict;
comment	@ * @;


2.22
date	2006.05.09.14.11.54;	author tom;	state Exp;
branches;
next	2.21;

2.21
date	2006.05.03.19.10.16;	author tom;	state Exp;
branches;
next	2.20;

2.20
date	2004.02.16.20.48.50;	author tom;	state Exp;
branches;
next	2.10;

2.10
date	2002.11.27.15.36.51;	author tom;	state Exp;
branches;
next	2.9;

2.9
date	2000.09.06.19.34.50;	author tom;	state Exp;
branches;
next	2.8;

2.8
date	97.05.20.13.20.52;	author tom;	state Exp;
branches;
next	2.7;

2.7
date	97.05.06.15.24.50;	author tom;	state Exp;
branches;
next	2.6;

2.6
date	96.10.30.20.56.40;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	96.10.16.16.44.27;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.05.24.18.01.05;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.05.23.20.06.51;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	96.04.26.22.48.57;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	95.01.11.20.45.26;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	94.05.16.17.14.01;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	94.05.16.17.03.37;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	93.11.08.21.35.05;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	93.11.08.20.06.56;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	93.10.06.19.24.55;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.10.01.20.13.42;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.10.01.20.11.13;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.10.01.18.19.53;	author ty7777;	state Exp;
branches;
next	;


desc
@maskimg initial checking in.
Working version.
@


2.22
log
@*** empty log message ***
@
text
@/* $Log: maskimg.c,v $
 * Revision 2.21  2006/05/03  19:10:16  tom
 * rebuild for fractional thresholds
 *
 * Revision 2.20  2004/02/16  20:48:50  tom
 * Feb 2004
 *
 * Revision 2.10  2002/11/27  15:36:51  tom
 * *** empty log message ***
 *
 * Revision 2.9  2000/09/06  19:34:50  tom
 * strcpy filename
 *
 * Revision 2.8  1997/05/20  13:20:52  tom
 * set indx.pln=1
 *
 * Revision 2.7  1997/05/06  15:24:50  tom
 * permit mask and image to have different indx.frm
 *
 * Revision 2.6  1996/10/30  20:56:40  tom
 * add setval
 *
 * Revision 2.5  1996/10/16  16:44:27  tom
 * sync with Version
 * new libimage
 *
 * Revision 2.1  1996/05/24  18:01:05  tom
 * new libimage, libnrimg
 *
 * Revision 2.0  1996/05/23  20:06:51  tom
 * tov version
 * */
/*	=========================================================================
 *	Module:			maskimg.c
 *	Author:			Tom Videen
 *	Description:	Mask one image using another image.
 *					Threshold is reduced by 0.0001.
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: maskimg.c,v 2.21 2006/05/03 19:10:16 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>
#include <libnrimg.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	char           *imgname;		 /* input image filename */
	char           *mskname;		 /* mask image filename */
	char           *outname;		 /* output image filename */
	float           threshold;		 /* mask all pixels >= this value */
	long            npixels = 0;
	long            dim1, dim2, dim3;	 /* dimensions of tensors */
	long            i, j, pln;
	float        ***image = NULL;		 /* input image tensor */
	float        ***mask = NULL;		 /* mask image tensor */
	int             setflag;
	float           setval;

/*
 *	Get command line arguments.
 */
	imgname = argv[1];
	mskname = argv[2];
	outname = argv[3];
	threshold = atof (argv[4]) - .0001;
	setval = atof (argv[5]);
	setflag = atoi (argv[6]);
	printf ("Threshold = %f\n", threshold);

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*
 *	Read mask
 */
	file = make_imgfile (mskname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot open %s\n", mskname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot get MainHeader from %s\n", mskname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [maskimg]: Cannot find %s frame 1-%d\n", mskname, -indx.frm);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot find %s frame %d\n", mskname, indx.frm);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot read file subheader in %s\n", mskname);
		return (ERROR);
	}
	dim1 = (long) file->sh->dim1;
	dim2 = (long) file->sh->dim2;
	dim3 = (long) file->sh->dim3;
	if ((mask = readtensor (file, &indx)) == NULL) {
		fprintf (stderr, "ERROR [maskimg]: Cannot read %s\n", mskname);
		return (ERROR);
	}
	close_imgfile (file);

/*
 *	Read image to mask
 */
	file = make_imgfile (imgname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot open %s\n", imgname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot get MainHeader from %s\n", imgname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	indx.pln = 1;
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [maskimg]: Cannot find %s frame 1-%d\n", imgname, -indx.frm);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot find %s frame %d\n", imgname, indx.frm);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot read file subheader in %s\n", imgname);
		return (ERROR);
	}
	if (dim1 != (long) file->sh->dim1) {
		fprintf (stderr, "ERROR [maskimg]: Image and mask have different dimensions\n");
		return (ERROR);
	}
	if (dim2 != (long) file->sh->dim2) {
		fprintf (stderr, "ERROR [maskimg]: Image and mask have different dimensions\n");
		return (ERROR);
	}
	if (dim3 != (long) file->sh->dim3) {
		fprintf (stderr, "ERROR [maskimg]: Image and mask have different dimensions\n");
		return (ERROR);
	}
	if ((image = readtensor (file, &indx)) == NULL) {
		fprintf (stderr, "ERROR [maskimg]: Cannot read %s\n", imgname);
		return (ERROR);
	}
/*	Mask the image */

	for (pln = 1; pln <= dim3; pln++) {
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
/*
				fprintf (stderr,"%d %d %d %f %f\n",pln,j,i,mask[pln][j][i],threshold);
*/
				if (mask[pln][j][i] < threshold)
					image[pln][j][i] = 0;
				else {
					if (setflag > 0)
						image[pln][j][i] = setval;
					npixels++;
				}
			}
		}
	}

/*	Write the masked image */

	printf ("Writing masked image %s\n", outname);
	printf ("Pixels in mask = %ld\n", npixels);
	close_imgfile (file);
	(void) strcpy (file->name, outname);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot open %s\n", outname);
		return (ERROR);
	}
	if (put_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot write %s\n", outname);
		return (ERROR);
	}
	if (writetensor (file, &indx, image) == ERROR) {
		fprintf (stderr, "ERROR [maskimg]: Cannot write %s\n", outname);
		return (ERROR);
	}
	free_imgfile (file);
	return (OK);
}
@


2.21
log
@rebuild for fractional thresholds
@
text
@d2 3
d42 1
a42 1
static char     rcsid[] = "$Id: maskimg.c,v 2.20 2004/02/16 20:48:50 tom Exp tom $";
@


2.20
log
@Feb 2004
@
text
@d2 3
d39 1
a39 1
static char     rcsid[] = "$Id: maskimg.c,v 2.10 2002/11/27 15:36:51 tom Exp tom $";
d167 3
@


2.10
log
@*** empty log message ***
@
text
@d2 3
d34 1
d36 1
a36 1
static char     rcsid[] = "$Id: maskimg.c,v 2.9 2000/09/06 19:34:50 tom Exp tom $";
d48 1
d180 2
a181 2
	strcpy (file->name, outname);
	strcpy (file->mode, "w");
@


2.9
log
@strcpy filename
@
text
@d2 3
d32 1
a32 1
static char     rcsid[] = "$Id: maskimg.c,v 2.8 1997/05/20 13:20:52 tom Exp tom $";
a37 1
#include <floatingpoint.h>
a39 1
#include <nr.h>
a41 1
#include <imgutil.h>
d173 1
a173 1
	printf ("Pixels in mask = %d\n", npixels);
@


2.8
log
@set indx.pln=1
@
text
@d2 3
d29 1
a29 1
static char     rcsid[] = "$Id: maskimg.c,v 2.7 1997/05/06 15:24:50 tom Exp tom $";
d175 1
a175 2
	free (file->name);
	file->name = outname;
@


2.7
log
@permit mask and image to have different indx.frm
@
text
@d2 3
d26 1
a26 1
static char     rcsid[] = "$Id: maskimg.c,v 2.6 1996/10/30 20:56:40 tom Exp tom $";
d89 1
a89 1
		fprintf (stderr, "ERROR [maskimg]: cannot find %s frame 1-%d\n", mskname, -indx.frm);
d93 1
a93 1
		fprintf (stderr, "ERROR [maskimg]: cannot find %s frame %d\n", mskname, indx.frm);
d122 1
d124 1
a124 1
		fprintf (stderr, "ERROR [maskimg]: cannot find %s frame 1-%d\n", imgname, -indx.frm);
d128 1
a128 1
		fprintf (stderr, "ERROR [maskimg]: cannot find %s frame %d\n", imgname, indx.frm);
@


2.6
log
@add setval
@
text
@d2 3
d23 1
a23 1
static char     rcsid[] = "$Id: maskimg.c,v 2.5 1996/10/16 16:44:27 tom Exp tom $";
d48 1
a48 1
	long            dim1, dim2, dim3; /* dimensions of tensors */
d50 4
a53 4
	float        ***image = NULL;	 /* input image tensor */
	float        ***mask = NULL;	 /* mask image tensor */
	int				setflag;
	float			setval;
d84 9
d118 9
a146 1

@


2.5
log
@sync with Version
new libimage
@
text
@d2 4
d20 1
a20 1
static char     rcsid[] = "$Id: maskimg.c,v 2.1 1996/05/24 18:01:05 tom Exp tom $";
d49 2
d59 2
d134 3
a136 1
				else
d138 1
@


2.1
log
@new libimage, libnrimg
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Id: maskimg.c,v 2.0 1996/05/23 20:06:51 tom Exp tom $";
@


2.0
log
@tov version
@
text
@d1 4
a4 1
/* $Log$ */
d13 1
a13 1
static char     rcsid[] = "$Id: maskimg.c,v 2.3 1996/05/23 18:47:27 tom Exp $";
@


1.10
log
@indent
@
text
@d1 11
a11 29
/*$Id: maskimg.c,v 1.9 1995/01/11 20:45:26 ty7777 Exp tom $*/
/*$Log: maskimg.c,v $
 * Revision 1.9  1995/01/11  20:45:26  ty7777
 * Added set_value.
 *
 * Revision 1.8  1994/05/16  17:14:01  ty7777
 * Use header for physician name.
 *
 * Revision 1.7  1994/05/16  17:03:37  ty7777
 * Compilied to retain the z0 field.
 *
 * Revision 1.6  1993/11/08  21:35:05  ty7777
 * Added date stamp for the image file.
 *
 * Revision 1.5  1993/11/08  20:06:56  ty7777
 * Added recfile.
 *
 * Revision 1.4  1993/10/06  19:24:55  ty7777
 * Same as the last version, but use the new library with flipping.
 *
 * Revision 1.3  1993/10/01  20:13:42  ty7777
 * Change %s to %d.
 *
 * Revision 1.2  1993/10/01  20:11:13  ty7777
 * Adding number of pixels.
 *
 * Revision 1.1  1993/10/01  18:19:53  ty7777
 * Initial revision
 **/
d13 10
a22 3
/*_________________________________________________________________
  Description:	This program filter an ECAT or PETT VI image by using
		the Gaussian filter.
a23 9
  History:	Created by Tom Yang on 12/17/92.
_________________________________________________________________*/

#include <fcntl.h>
#include <petutil/imglist.h>
#include <petutil/matrix.h>

static char     rcsid[] = "$Header: /home/petsun19/tom/src/maskimg/RCS/maskimg.c,v 1.9 1995/01/11 20:45:26 ty7777 Exp tom $";

d26 1
a26 1
	char          **argv;
d28 11
a38 33
	BOOLEAN         set_value_flag;
	FILE           *recfp;
	Image_subheader **image_subheader_list;
	Image_subheader **mask_subheader_list;
	Main_header    *image_main_header;
	Main_header    *mask_main_header;
	char            date[MAXLINE];
	char            image_recfile[MAXPATH];
	char           *input_image;
	char           *mask_image;
	char           *output_image;
	char            recfile[MAXPATH];
	char           *uid;
	float           threshold_value;
	float          *image3d;
	float           image_pixel_size;
	float           image_plane_separation;
	float          *mask3d;
	float           mask_pixel_size;
	float           mask_plane_separation;
	float           set_value;
	int             dimension;
	int             i;
	int             image_scanner;
	int             mask_scanner;
	int             total_pixel_num;
	short           image_height;
	short           image_num_slices;
	short           image_width;
	short           mask_height;
	short           mask_num_slices;
	short           mask_width;
	struct Matval   matval;
d40 8
a47 13
	/*
	 * ______________________________________________________ Get command line arguments.
	 * ______________________________________________________
	 */
	input_image = argv[1];
	mask_image = argv[2];
	output_image = argv[3];
	threshold_value = atof (argv[4]);
	set_value = atof (argv[5]);
	set_value_flag = atoi (argv[6]);
	sprintf (date, "%s %s %s %s %s %s", argv[7], argv[8], argv[9],
		 argv[10], argv[11], argv[12]);
	uid = argv[13];
d49 13
a61 7
	/*
	 * Get the image dimensions.
	 */
	if (getimagedim (input_image, matval, &image_scanner, &image_width, &image_height,
			 &image_num_slices, &image_pixel_size, &image_pixel_size, &image_plane_separation) == FAIL) {
		fprintf (stderr, "Error: input image file %s cannot be found\n", input_image);
		exit (FAIL);
d63 3
a65 4
	if (getimagedim (mask_image, matval, &mask_scanner, &mask_width, &mask_height, &mask_num_slices,
			 &mask_pixel_size, &mask_pixel_size, &mask_plane_separation) == FAIL) {
		fprintf (stderr, "Error: mask image file %s cannot be found\n", mask_image);
		exit (FAIL);
d67 3
a69 7
	if (image_num_slices != mask_num_slices || image_width != mask_width
	    || image_height != mask_height) {
		fprintf (stderr,
		"Image dimension (%d, %d, %d) is different from that of the mask (%d, %d, %d).\n",
			 image_width, image_height, image_num_slices,
			 mask_width, mask_height, mask_num_slices);
		exit (FAIL);
d71 6
a76 6
	if (image_pixel_size != mask_pixel_size || image_plane_separation != mask_plane_separation) {
		fprintf (stderr,
		"Image voxel size (%f, %f, %f) is different from that of the mask (%f, %f, %f).\n",
			 image_pixel_size, image_pixel_size, image_plane_separation,
			 mask_pixel_size, mask_pixel_size, mask_plane_separation);
		exit (FAIL);
d78 1
d80 7
a86 25
	/*
	 * Read the input image.
	 */
	dimension = image_width * image_height * image_num_slices;

	image_subheader_list = (Image_subheader **) pkg_malloc (image_num_slices * sizeof (caddr_t),
								"maskimg", "image_subheader_list");
	image_main_header = (Main_header *) calloc (1, sizeof (Main_header));
	image3d = (float *) pkg_malloc (dimension * sizeof (float), "maskimg", "image3d");

	mask_subheader_list = (Image_subheader **) pkg_malloc (mask_num_slices * sizeof (caddr_t),
							       "maskimg", "mask_subheader_list");
	mask_main_header = (Main_header *) calloc (1, sizeof (Main_header));
	mask3d = (float *) pkg_malloc (dimension * sizeof (float), "maskimg", "mask3d");

	if (getrealimg (input_image, image_scanner, matval, image_width, image_height,
		    image_num_slices, image3d, image_main_header, image_subheader_list) == FAIL) {
		fprintf (stderr, "Error in getrealimg () for %s.\n", input_image);
		free (image_subheader_list);
		free (image_main_header);
		free (image3d);
		free (mask_subheader_list);
		free (mask_main_header);
		free (mask3d);
		exit (FAIL);
d88 3
a90 10
	if (getrealimg (mask_image, mask_scanner, matval, mask_width, mask_height,
			mask_num_slices, mask3d, mask_main_header, mask_subheader_list) == FAIL) {
		fprintf (stderr, "Error in getrealimg () for %s.\n", mask_image);
		free (image_subheader_list);
		free (image_main_header);
		free (image3d);
		free (mask_subheader_list);
		free (mask_main_header);
		free (mask3d);
		exit (FAIL);
d92 3
a94 13

	/*
	 * Masking image.
	 */
	total_pixel_num = 0;
	for (i = 0; i < dimension; i++) {
		if (mask3d[i] < threshold_value)
			image3d[i] = 0;
		else {
			if (set_value_flag)
				image3d[i] = set_value;
			total_pixel_num++;
		}
d96 3
a98 3

	for (i = 0; i < image_num_slices; i++) {
		free (mask_subheader_list[i]);
d100 12
a111 3
	free (mask_subheader_list);
	free (mask_main_header);
	free (mask3d);
d113 1
a113 5
	/*
	 * Generate the recfile.
	 */
	strcpy (recfile, output_image);
	strcat (recfile, REC_EXT);
d115 9
a123 4
	recfp = fopen (recfile, "w");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "Error in opening rec file %s\n", recfile);
		exit (FAIL);
a124 4
	fprintf (recfp, "rec %s %s %s\n", output_image, date, uid);
	fprintf (recfp, "maskimg %s %s %s %.2f %.0f\n", input_image,
		 mask_image, output_image, threshold_value, set_value);
	fprintf (recfp, "   %s\n\n", rcsid);
d126 1
a126 6
	/*
	 * Copy the input_image rec file if there is any.
	 */
	strcpy (image_recfile, input_image);
	strcat (image_recfile, REC_EXT);
	copyrec (recfp, image_recfile);
d128 9
a136 30
	/*
	 * Copy the mask_image rec file if there is any.
	 */
	strcpy (image_recfile, mask_image);
	strcat (image_recfile, REC_EXT);
	copyrec (recfp, image_recfile);

	fprintf (recfp, "\nTotal number of contributing pixels = %d.\n\n", total_pixel_num);
	fprintf (stdout, "Total number of contributing pixels = %d.\n", total_pixel_num);

	fprintf (recfp, "endrec\n");
	fclose (recfp);

	/*
	 * Write the masked image.
	 */
	matval.frame = 1;
	matval.plane = 1;
	matval.gate = 1;
	matval.data = 0;
	matval.bed = 0;

	strncpy (image_main_header->physician_name, rcsid + 9,
		 sizeof (image_main_header->physician_name) - 1);
	strncpy (image_main_header->operator_name, date,
		 sizeof (image_main_header->operator_name) - 1);

	if (writerealimg (output_image, matval, image_width, image_height, image_num_slices,
			  image3d, image_main_header, image_subheader_list) == FAIL) {
		fprintf (stderr, "Error in writerealimg () for %s.\n", output_image);
d138 3
a140 6

	/*
	 * Free memories.
	 */
	for (i = 0; i < image_num_slices; i++) {
		free (image_subheader_list[i]);
d142 6
a147 3
	free (image_subheader_list);
	free (image_main_header);
	free (image3d);
@


1.9
log
@Added set_value.
@
text
@d1 1
a1 1
/*$Id: maskimg.c,v 1.8 1994/05/16 17:14:01 ty7777 Exp ty7777 $*/
d3 3
d32 1
a32 1
  Description:	This program filter an ECAT or PETT VI image by using 
d35 1
a35 1
  History:	Created by Tom Yang on 12/17/92. 
d42 1
a42 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/maskimg/RCS/maskimg.c,v 1.8 1994/05/16 17:14:01 ty7777 Exp ty7777 $";
d45 2
a46 2
	int	argc;
	char	**argv;
d48 33
a80 33
	BOOLEAN		set_value_flag;
	FILE		*recfp;
	Image_subheader	**image_subheader_list;
	Image_subheader	**mask_subheader_list;
	Main_header	*image_main_header;
	Main_header	*mask_main_header;
	char		date [MAXLINE];
	char		image_recfile [MAXPATH];
	char		*input_image;
	char		*mask_image;
	char		*output_image;
	char		recfile [MAXPATH];
	char		*uid;
	float		threshold_value;
	float		*image3d;
	float		image_pixel_size;
	float		image_plane_separation;
	float		*mask3d;
	float		mask_pixel_size;
	float		mask_plane_separation;
	float		set_value;
	int		dimension;
	int		i;
	int		image_scanner;
	int		mask_scanner;
	int		total_pixel_num;
	short		image_height;
	short		image_num_slices;
	short		image_width;
	short		mask_height;
	short		mask_num_slices;
	short		mask_width;
	struct Matval	matval;
d82 13
a94 12
	/*______________________________________________________
	 * Get command line arguments.
	 *______________________________________________________*/
	input_image		= argv [1];
	mask_image		= argv [2];
	output_image		= argv [3];
	threshold_value		= atof (argv [4]);
	set_value		= atof (argv [5]);
	set_value_flag		= atoi (argv [6]);
	sprintf (date, "%s %s %s %s %s %s", argv [7], argv [8], argv [9], 
					argv [10], argv [11], argv [12]);
	uid			= argv [13];
d99 2
a100 3
	if (getimagedim (input_image, matval, &image_scanner, &image_width, &image_height, 
	&image_num_slices, &image_pixel_size, &image_pixel_size, &image_plane_separation) == FAIL) 
	{
d104 2
a105 4

	if (getimagedim (mask_image, matval, &mask_scanner, &mask_width, &mask_height, &mask_num_slices, 
	&mask_pixel_size, &mask_pixel_size, &mask_plane_separation) == FAIL) 
	{
d109 3
a111 5

	if (image_num_slices != mask_num_slices || image_width != mask_width 
	|| image_height != mask_height)
	{
		fprintf (stderr, 
d113 2
a114 2
		image_width, image_height, image_num_slices, 
		mask_width, mask_height, mask_num_slices);
d117 2
a118 4

	if (image_pixel_size != mask_pixel_size || image_plane_separation != mask_plane_separation)
	{
		fprintf (stderr, 
d120 2
a121 2
		image_pixel_size, image_pixel_size, image_plane_separation, 
		mask_pixel_size, mask_pixel_size, mask_plane_separation);
d128 1
a128 1
	dimension	= image_width * image_height * image_num_slices;
d130 4
a133 4
	image_subheader_list	= (Image_subheader **) pkg_malloc (image_num_slices * sizeof (caddr_t), 
				"maskimg", "image_subheader_list");
	image_main_header	= (Main_header *) calloc (1, sizeof (Main_header));
	image3d			= (float *) pkg_malloc (dimension * sizeof (float), "maskimg", "image3d");
d135 4
a138 4
	mask_subheader_list	= (Image_subheader **) pkg_malloc (mask_num_slices * sizeof (caddr_t), 
				"maskimg", "mask_subheader_list");
	mask_main_header	= (Main_header *) calloc (1, sizeof (Main_header));
	mask3d			= (float *) pkg_malloc (dimension * sizeof (float), "maskimg", "mask3d");
d140 2
a141 3
	if (getrealimg (input_image, image_scanner, matval, image_width, image_height, 
	image_num_slices, image3d, image_main_header, image_subheader_list) == FAIL)
	{
d151 2
a152 4

	if (getrealimg (mask_image, mask_scanner, matval, mask_width, mask_height, 
	mask_num_slices, mask3d, mask_main_header, mask_subheader_list) == FAIL)
	{
d166 5
a170 7
	total_pixel_num	= 0;
	for (i = 0; i < dimension; i++)
	{
		if (mask3d [i] < threshold_value)
			image3d [i]	= 0;
		else
		{
d172 1
a172 1
				image3d [i]	= set_value;
d177 2
a178 3
	for (i = 0; i < image_num_slices; i++)
	{
		free (mask_subheader_list [i]);
d190 2
a191 3
	recfp	= fopen (recfile, "w");
	if (recfp == (FILE *) NULL)
	{
d196 2
a197 2
	fprintf (recfp, "maskimg %s %s %s %.2f %.0f\n", input_image, 
		mask_image, output_image, threshold_value, set_value);
d201 2
a202 2
 	 * Copy the input_image rec file if there is any.
 	 */
d208 2
a209 2
 	 * Copy the mask_image rec file if there is any.
 	 */
d223 5
a227 5
	matval.frame	= 1;
	matval.plane	= 1;
	matval.gate	= 1;
	matval.data	= 0;
	matval.bed	= 0;
d229 4
a232 4
	strncpy (image_main_header->physician_name, rcsid + 9, 
		sizeof (image_main_header->physician_name) - 1);
	strncpy (image_main_header->operator_name, date, 
		sizeof (image_main_header->operator_name) - 1);
d234 2
a235 3
	if (writerealimg (output_image, matval, image_width, image_height, image_num_slices, 
	image3d, image_main_header, image_subheader_list) == FAIL)
	{
d242 2
a243 3
	for (i = 0; i < image_num_slices; i++)
	{
		free (image_subheader_list [i]);
@


1.8
log
@Use header for physician name.
@
text
@d1 1
a1 1
/*$Id: maskimg.c,v 1.7 1994/05/16 17:03:37 ty7777 Exp ty7777 $*/
d3 3
d39 1
a39 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/maskimg/RCS/maskimg.c,v 1.7 1994/05/16 17:03:37 ty7777 Exp ty7777 $";
d65 1
d86 5
a90 4
	set_value_flag		= atoi (argv [5]);
	sprintf (date, "%s %s %s %s %s %s", argv [6], argv [7], argv [8], 
					argv [9], argv [10], argv [11]);
	uid			= argv [12];
d180 1
a180 1
				image3d [i]	= threshold_value;
d206 2
a207 2
	fprintf (recfp, "maskimg %s %s %s %.2f %s\n", input_image, 
		mask_image, output_image, threshold_value, set_value_flag? "-s": "");
@


1.7
log
@Compilied to retain the z0 field.
@
text
@d1 1
a1 1
/*$Id: maskimg.c,v 1.6 1993/11/08 21:35:05 ty7777 Exp ty7777 $*/
d3 3
d36 1
a36 1
static char rcsid [] = "$Header$";
d234 1
a234 1
	strncpy (image_main_header->physician_name, rcsid + 5, 
@


1.6
log
@Added date stamp for the image file.
@
text
@d1 1
a1 1
/*$Id: maskimg.c,v 1.5 1993/11/08 20:06:56 ty7777 Exp ty7777 $*/
d3 3
d33 1
a33 1
static char rcsid [] = "$Id: maskimg.c,v 1.5 1993/11/08 20:06:56 ty7777 Exp ty7777 $";
d39 1
d79 4
a82 2
	sprintf (date, "%s %s %s %s %s %s", argv[5], argv[6], argv[7], argv[8], argv[9], argv[10]);
	uid			= argv [11];
d170 3
d174 1
d198 2
a199 2
	fprintf (recfp, "maskimg %s %s %s %.2f\n", input_image, 
		mask_image, output_image, threshold_value);
@


1.5
log
@Added recfile.
@
text
@d1 1
a1 1
/*$Id: maskimg.c,v 1.4 1993/10/06 19:24:55 ty7777 Exp ty7777 $*/
d3 3
d30 1
a30 1
static char rcsid [] = "$Id: maskimg.c,v 1.4 1993/10/06 19:24:55 ty7777 Exp ty7777 $";
d220 5
@


1.4
log
@Same as the last version, but use the new library with flipping.
@
text
@d1 1
a1 1
/*$Id: maskimg.c,v 1.3 1993/10/01 20:13:42 ty7777 Exp ty7777 $*/
d3 3
d24 1
a24 1
#include <petutil/petutil.h>
d27 1
a27 1
static char rcsid [] = "$Id: maskimg.c,v 1.3 1993/10/01 20:13:42 ty7777 Exp ty7777 $";
d33 1
d38 2
d43 2
d72 2
d173 37
a217 1
	fprintf (stdout, "Total number of contributing pixels = %d.\n", total_pixel_num);
@


1.3
log
@Change %s to %d.
@
text
@d1 1
a1 1
/*$Id: maskimg.c,v 1.2 1993/10/01 20:11:13 ty7777 Exp ty7777 $*/
d3 3
d24 1
a24 1
static char rcsid [] = "$Id: maskimg.c,v 1.2 1993/10/01 20:11:13 ty7777 Exp ty7777 $";
@


1.2
log
@Adding number of pixels.
@
text
@d1 1
a1 1
/*$Id: maskimg.c,v 1.1 1993/10/01 18:19:53 ty7777 Exp ty7777 $*/
d3 3
d21 1
a21 1
static char rcsid [] = "$Id: maskimg.c,v 1.1 1993/10/01 18:19:53 ty7777 Exp ty7777 $";
d168 1
a168 1
	fprintf (stdout, "Total number of contributing pixels = %s.\n", total_pixel_num);
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d18 1
a18 1
static char rcsid [] = "$Id$";
d42 1
d139 1
d144 2
d165 1
@
