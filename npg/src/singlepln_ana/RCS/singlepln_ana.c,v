head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.19.22.33.57;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.17.40.07;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.10.26.20.55.23;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.18.20.14.43;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/*	$Log: singlepln_ana.c,v $
 * Revision 1.3  2002/11/27  17:40:07  tom
 * *** empty log message ***
 *
 * Revision 1.2  1999/10/26  20:55:23  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/02/18  20:14:43  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			singlepln_ana.c
 *	Date:			Feb 1999
 *	Author:			Tom Videen
 *	Description:	Separate an Analyze image into single plane images
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/singlepln_ana/RCS/singlepln_ana.c,v 1.3 2002/11/27 17:40:07 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			singlepln_ana
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *root;			 /* output root */
	char           *img2, *hdr2;	 /* output file */
	char           *num;			 /* number */
	long            dim1, dim2, dim3; /* dimensions of image */
	long            psize, i;
	short          *img, *plane;	 /* image */

	if (argc != 4) {
		printf ("Usage: singlepln_ana img1 hdr1 root\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	root = argv[3];

/*	Read image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [singlepln_ana]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [singlepln_ana]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [singlepln_ana]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [singlepln_ana]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [singlepln_ana]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	psize = dim1*dim2;

	img = (short*) calloc (psize*dim3, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [singlepln_ana]: calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [singlepln_ana]: opening: %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof(short), psize*dim3, fd_img)) != psize*dim3) {
		fprintf (stderr, "ERROR [singlepln_ana]: reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout,"Read %s\n", img1);

/*	Write single-plane images */

	hdr.dime.dim[3] = 1;
	hdr2 = (char *) calloc (100, sizeof (char));
	img2 = (char *) calloc (100, sizeof (char));
	num = (char *) calloc (10, sizeof (char));
	if (hdr2 == NULL) return (ERROR);
	if (img2 == NULL) return (ERROR);
	if (num == NULL) return (ERROR);
	plane = img;

	for (i = 1; i <= dim3; i++) {
		(void) strcpy (hdr2, root);
		(void) sprintf (num,"%-li", dim3-i+1);
		(void) strcat (hdr2, num);
		(void) strcpy (img2, hdr2);
		(void) strcat (hdr2, ".hdr");
		(void) strcat (img2, ".img");
		if ((fd_hdr = fopen (hdr2, "w")) == 0) {
			fprintf (stderr, "ERROR [singlepln_ana]: Unable to open %s\n", hdr2);
			return (ERROR);
		}
		if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
			fprintf (stderr, "ERROR [singlepln_ana]: Error writing to: %s\n", hdr2);
			return (ERROR);
		}
		(void) fclose (fd_hdr);
		if ((fd_img = fopen (img2, "w")) == 0) {
			fprintf (stderr, "ERROR [singlepln_ana]: Unable to open %s\n", img2);
			return (ERROR);
		}
		if ((fwrite (plane, sizeof (short), psize, fd_img)) != psize) {
			fprintf (stderr, "ERROR [singlepln_ana]: Error writing to: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		plane += psize;
	}

	free (img);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d13 1
a13 1
 *	Date:			Feb-99
d18 1
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/singlepln_ana/RCS/singlepln_ana.c,v 1.2 1999/10/26 20:55:23 tom Exp tom $";
d90 1
a90 1
		fprintf (stderr, "ERROR [singlepln_ana]: Cannot calloc img\n");
d94 1
a94 1
		fprintf (stderr, "ERROR [singlepln_ana]: Cannot open: %s\n", img1);
d98 1
a98 1
		fprintf (stderr, "ERROR [singlepln_ana]: Reading: %s\n", img1);
d110 3
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/singlepln_ana/RCS/singlepln_ana.c,v 1.1 1999/02/18 20:14:43 tom Exp tom $";
d20 1
d81 1
a81 1
	fclose (fd_hdr);
d97 1
a97 1
	fclose (fd_img);
d109 6
a114 6
		strcpy (hdr2, root);
		sprintf (num,"%-i", dim3-i+1);
		strcat (hdr2, num);
		strcpy (img2, hdr2);
		strcat (hdr2, ".hdr");
		strcat (img2, ".img");
d123 1
a123 1
		fclose (fd_hdr);
d132 1
a132 1
		fclose (fd_img);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/singlepln_ana/RCS/singlepln_ana.c,v 1.1 1999/02/09 17:55:40 tom Exp $";
d106 1
a106 1
		sprintf (num,"%-i", i);
@
