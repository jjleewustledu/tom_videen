head	2.5;
access;
symbols;
locks; strict;
comment	@ * @;


2.5
date	2008.08.21.17.49.55;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2004.02.20.16.06.24;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2004.02.18.19.56.33;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2004.02.12.22.03.43;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.01.02.18.40.48;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.01.19.14.19;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.13.21.56.41;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.12.13.17.45.50;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	97.05.13.14.51.20;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.04.19.19.33.20;	author tom;	state Exp;
branches;
next	;


desc
@@


2.5
log
@declare bcopy (which should be included with strings.h)
@
text
@/*	$Log: create_dir7.c,v $
 * Revision 2.4  2004/02/20  16:06:24  tom
 * Feb 2004
 *
 * Revision 2.3  2004/02/18  19:56:33  tom
 * Feb 18 (interfile)
 *
 * Revision 2.2  2004/02/12  22:03:43  tom
 * sync Feb 2004
 *
 * Revision 2.0  2004/01/02  18:40:48  tom
 * splint cleanup
 *
 * Revision 1.5  2003/07/01  19:14:19  tom
 * *** empty log message ***
 *
 * Revision 1.4  2002/03/13  21:56:41  tom
 * lint cleaning
 *
 * Revision 1.3  1999/12/13  17:45:50  tom
 * tov revision
 *
 * Revision 1.2  1997/05/13  14:51:20  tom
 * fix bug in creation of >32 frame files
 *
 * Revision 1.1  1996/04/19  19:33:20  tom
 * Initial revision
 *
 *	$Id: create_dir7.c,v 2.4 2004/02/20 16:06:24 tom Exp $ */
/* =============================================================================
 *	Function:		create_dir7
 *	Description:	Create directory entry for an open file.
 *	Returns:		Record number of directory.
 * =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/create_dir7.c,v 2.4 2004/02/20 16:06:24 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <image.h>
#include <libimage.h>
#include <endian.h>

extern void bcopy();

int             create_dir7 (file, matnum, length)
	ImageFile      *file;
	int             matnum;			 /* Matrix number of desired matrix */
	int             length;			 /* Length of matrix to be created in records */
{
	FILE           *fp;			 /* file pointer */
	struct file    *fsr;
	long            buffer[LENREC_L];	 /* read/write directory record */
	int             recnum;
	int             begrec;			 /* Beginning record number */
	int             current_rec;		 /* Current record number */
	int             memsize_old;
	int             i, j;
	int             irec = 0;
	int             highrec = 2;
	int             more = TRUE;		 /* TRUE: More records to search */
	int             free1 = FALSE;		 /* Flag for first free entry */
	int             idx = 0;		 /* Index to first free entry */
	long            nbytes = LENREC;

	if (file->fp == NULL) {
		fprintf (stderr, "ERROR [create_dir7]: %s not open\n", file->name);
		return (ERROR);
	}
	fp = file->fp;
	if (file->m7 == NULL) {
		fprintf (stderr, "ERROR [create_dir7]: Main_header7 not defined\n");
		return (ERROR);
	}
	if (file->m7->fsr == NULL) {
		fprintf (stderr, "ERROR [create_dir7]: Version 7 file not open\n");
		return (ERROR);
	}
	fsr = file->m7->fsr;

/* Search directory entries on disk if not last dir rec	*/

	while (more == TRUE) {
		if (fsr->lstrec > MAX_REC) {
			fprintf (stderr, "ERROR [create_dir7]: exceeded buffer space for directory entries\n");
			return (ERROR);
		}
		if (irec < fsr->lstrec) {	 /* Search records in memory */
			++irec;
			for (i = 0; i < DNOD_REC; i++) {	/* Loop through all directory
								 * entries */
				if (fsr->dir[irec].entry[i].flag == USED) {	/* Entry is used--skip
										 * tests */
					if (fsr->dir[irec].entry[i].endrec > highrec)
						highrec = fsr->dir[irec].entry[i].endrec;
				} else if (fsr->dir[irec].entry[i].flag == REMOVED) {	/* Matrix removed--check
											 * size */
					if ((fsr->dir[irec].entry[i].endrec
					     - fsr->dir[irec].entry[i].begrec + 1) >= length) {	/* Large enough */
						begrec = fsr->dir[irec].entry[i].begrec;
						fsr->dir[irec].entry[i].endrec = begrec + length - 1;
						fsr->dir[irec].entry[i].flag = USED;
						fsr->dir[irec].entry[i].matnum = matnum;
						++fsr->dir[irec].hdr.numused;
						--fsr->dir[irec].hdr.numfree;
						recnum = fsr->dir[irec - 1].hdr.forptr;
						bcopy (&fsr->dir[fsr->lstrec], buffer, LENREC);
						/* CONSTCOND */
						if (__BYTE_ORDER == __LITTLE_ENDIAN) {
							swap_word ((short *) buffer, nbytes / 2);
							swap_byte ((char *) buffer, nbytes);
						}
						if (wrtrec (fp, (char *) buffer, recnum, 1) != 0) {
							fprintf (stderr, "ERROR [create_dir7]: writing directory structure\n");
							return (ERROR);
						} else
							return (begrec);
					}
					if (fsr->dir[irec].entry[i].endrec > highrec)
						highrec = fsr->dir[irec].entry[i].endrec;
				} else if (fsr->dir[irec].entry[i].flag == UNUSED) {	/* Unused entry */
					if (free1 == FALSE) {	/* Save first free for later use */
						free1 = TRUE;
						idx = i;
					}
				} else {
					fprintf (stderr, "ERROR [create_dir7]: invalid directory record\n");
					fprintf (stderr, "dir[%d].entry[%d].flag: %d\n",
						 irec, i, (int) fsr->dir[irec].entry[i].flag);
				}
			}
			if ((fsr->dir[irec].hdr.forptr == DIR_NUM_1) & (fsr->lstrec > 0))
				more = FALSE;

/*	Read next directory record from disk	*/

		} else {
			if (fsr->lstrec >= fsr->memsize - 1) {	/* Allocate more memory */
				memsize_old = fsr->memsize;
				fsr->memsize += SIZE_DIR_MALLOC;
				fsr->dir = (struct directory *) realloc ((char *) fsr->dir,
					   (unsigned) (fsr->memsize * sizeof (struct directory)));
				if (fsr->dir == NULL) {
					fprintf (stderr, "ERROR [create_dir7]: allocating directory structure\n");
					return (ERROR);
				}
				for (i = memsize_old; i < fsr->memsize; i++)	/* Initialize structure */
					for (j = 0; j < DNOD_REC; j++)
						fsr->dir[i].entry[j].flag = UNUSED;
			}
			current_rec = fsr->dir[fsr->lstrec].hdr.forptr;
			if (current_rec > highrec)
				highrec = current_rec;
			++fsr->lstrec;
			if (rdrec (fp, (char *) buffer, current_rec, 1) != 0) {
				fprintf (stderr, "ERROR [create_dir7]: reading directory structure\n");
				return (ERROR);
			}
			/* CONSTCOND */
			if (__BYTE_ORDER == __LITTLE_ENDIAN) {
				swap_byte ((char *) buffer, nbytes);
				swap_word ((short *) buffer, nbytes / 2);
			}
			bcopy (buffer, &fsr->dir[fsr->lstrec], LENREC);
		}
	}					 /* while (more == TRUE) */

/* Unused entry found, use it. */

	if (free1 == TRUE) {
		begrec = highrec + 1;
		fsr->dir[fsr->lstrec].entry[idx].begrec = begrec;
		fsr->dir[fsr->lstrec].entry[idx].endrec = begrec + length - 1;
		/* highrec = fsr->dir[fsr->lstrec].entry[idx].endrec; */
		fsr->dir[fsr->lstrec].entry[idx].flag = USED;
		fsr->dir[fsr->lstrec].entry[idx].matnum = matnum;
		++fsr->dir[fsr->lstrec].hdr.numused;
		--fsr->dir[fsr->lstrec].hdr.numfree;

/* No unused entries, create new directory record. */

	} else {
		++fsr->lstrec;
		if (fsr->lstrec >= fsr->memsize) {	/* Allocate more memory */
			fsr->memsize += SIZE_DIR_MALLOC;
			fsr->dir = (struct directory *)
				realloc ((char *) fsr->dir, (unsigned) (fsr->memsize * sizeof (struct directory)));
			if (fsr->dir == NULL) {
				fprintf (stderr, "ERROR [create_dir7]: realloc directory structure\n");
				return (ERROR);
			}
		}
		fsr->dir[fsr->lstrec].hdr.numused = 1;
		fsr->dir[fsr->lstrec].hdr.numfree = DNOD_REC - 1;
		if (fsr->lstrec == 1)		 /* This is first directory record. */
			fsr->dir[fsr->lstrec].hdr.bakptr = 0;
		else
			fsr->dir[fsr->lstrec].hdr.bakptr = fsr->dir[fsr->lstrec - 2].hdr.forptr;
		fsr->dir[fsr->lstrec].hdr.forptr = 2;

/*	If not first directory record, update forward pointer in last directory record */

		if (fsr->lstrec > 1) {
			++highrec;
			current_rec = highrec;
			fsr->dir[fsr->lstrec - 1].hdr.forptr = current_rec;
			recnum = fsr->dir[fsr->lstrec].hdr.bakptr;
			bcopy (&fsr->dir[fsr->lstrec - 1], buffer, LENREC);
			/* CONSTCOND */
			if (__BYTE_ORDER == __LITTLE_ENDIAN) {
				swap_word ((short *) buffer, nbytes / 2);
				swap_byte ((char *) buffer, nbytes);
			}
			if (wrtrec (fp, (char *) buffer, recnum, 1) != 0) {
				fprintf (stderr, "ERROR [create_dir7]: writing directory structure\n");
				return (ERROR);
			}
		}
/* Write first entry to new directory record	*/

		fsr->dir[fsr->lstrec].entry[0].matnum = matnum;
		fsr->dir[fsr->lstrec].entry[0].begrec = highrec + 1;
		begrec = fsr->dir[fsr->lstrec].entry[0].begrec;
		fsr->dir[fsr->lstrec].entry[0].endrec = fsr->dir[fsr->lstrec].entry[0].begrec + length - 1;
		/* highrec = fsr->dir[fsr->lstrec].entry[0].endrec; */
		fsr->dir[fsr->lstrec].entry[0].flag = USED;
	}
	recnum = fsr->dir[fsr->lstrec - 1].hdr.forptr;
	bcopy (&fsr->dir[fsr->lstrec], buffer, LENREC);
	/* CONSTCOND */
	if (__BYTE_ORDER == __LITTLE_ENDIAN) {
		swap_word ((short *) buffer, nbytes / 2);
		swap_byte ((char *) buffer, nbytes);
	}
	if (wrtrec (fp, (char *) buffer, recnum, 1) != 0) {
		fprintf (stderr, "ERROR [create_dir7]: writing directory structure\n");
		return (ERROR);
	} else
		return (begrec);
}
@


2.4
log
@Feb 2004
@
text
@d2 3
d29 1
a29 1
 *	$Id: create_dir7.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $ */
d38 1
a38 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/create_dir7.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $";
d48 2
@


2.3
log
@Feb 18 (interfile)
@
text
@d2 3
d26 1
a26 1
 *	$Id: create_dir7.c,v 2.2 2004/02/12 22:03:43 tom Exp tom $ */
d35 1
a35 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/create_dir7.c,v 2.2 2004/02/12 22:03:43 tom Exp tom $";
@


2.2
log
@sync Feb 2004
@
text
@d2 3
d23 1
a23 1
 *	$Id: create_dir7.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $ */
d32 1
a32 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/create_dir7.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $";
@


2.0
log
@splint cleanup
@
text
@d2 3
d20 1
a20 1
 *	$Id: create_dir7.c,v 1.5 2003/07/01 19:14:19 tom Exp tom $ */
d29 1
a29 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/create_dir7.c,v 1.5 2003/07/01 19:14:19 tom Exp tom $";
@


1.5
log
@*** empty log message ***
@
text
@d2 3
d17 1
a17 1
 *	$Id: create_dir7.c,v 1.4 2002/03/13 21:56:41 tom Exp tom $ */
d24 1
d26 1
a26 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/create_dir7.c,v 1.4 2002/03/13 21:56:41 tom Exp tom $";
a30 1
#include <unistd.h>
@


1.4
log
@lint cleaning
@
text
@d2 3
d14 1
a14 1
 *	$Id: create_dir7.c,v 1.3 1999/12/13 17:45:50 tom Exp tom $ */
d18 1
a18 1
 *	Returns:		Beginning record
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/create_dir7.c,v 1.3 1999/12/13 17:45:50 tom Exp tom $";
d28 1
d31 1
d34 3
a36 3
	ImageFile      *file ;
	int             matnum;		 	 /* Matrix number of desired matrix */
	int             length;		 	 /* Length of matrix to be created in records */
d38 1
a38 1
	FILE           *fp;			 	 /* file pointer */
d40 1
d42 2
a43 4
	int             begrec;		 	 /* Beginning record number of matrix */
	int             current_rec; 	 /* Current record number */
	int             lenrd;
	int             more;	 		 /* TRUE: More records to search */
d45 1
d48 4
a51 3
	int             free1 = FALSE;	 /* Flag for first free entry */
	int             ifree = 0;		 /* Index to first free entry */
	int             i, j;
d54 1
a54 1
		fprintf (stderr, "ERROR [create_dir7]: No open file %s\n", file->name);
d59 1
a59 1
		fprintf (stderr, "ERROR [create_dir7]: Version 7 header is undefined\n");
d63 1
a63 1
		fprintf (stderr, "ERROR [create_dir7]: Version 7 file is not open\n");
d68 1
a68 1
/* Search directory entries on disk if not last dir rec. */
a69 1
	more = TRUE;
d72 1
a72 1
			fprintf (stderr, "ERROR [create_dir7]: Exceeded buffer space for directory entries\n");
d75 1
a75 1
		if (irec < fsr->lstrec) {	 			/* Search records in memory */
d77 4
a80 2
			for (i = 0; i < DNOD_REC; i++) {	/* Loop through all directory entries */
				if (fsr->dir[irec].entry[i].flag == USED) {	/* Entry is used--skip tests */
d83 2
a84 1
				} else if (fsr->dir[irec].entry[i].flag == REMOVED) {	/* Matrix removed--check size */
d94 8
a101 2
						if (wrtrec (fp, (char *) &fsr->dir[fsr->lstrec], recnum, 1) != 0) {
							fprintf (stderr, "ERROR [create_dir7]: Writing record\n");
d104 1
a104 1
							return (OK);
d109 1
a109 1
					if (free1 == FALSE) {		/* Save first free for later use */
d111 1
a111 1
						ifree = i;
d114 1
a114 1
					fprintf (stderr, "ERROR [create_dir7]: Invalid directory record\n");
d122 1
a122 1
/*	Read next directory record from disk */
d125 1
a125 1
			if (fsr->lstrec >= fsr->memsize - 1) {			/* Allocate more memory */
d131 1
a131 1
					fprintf (stderr, "ERROR [create_dir7]: Error allocating directory\n");
d142 2
a143 3
			lenrd = 1;		 /* Read one record */
			if (rdrec (fp, &fsr->dir[fsr->lstrec], current_rec, lenrd) != 0) {
				fprintf (stderr, "ERROR [create_dir7]: Error reading directory\n");
d146 6
d153 1
a153 1
	}	/* while (more == TRUE) */
d159 5
a163 5
		fsr->dir[fsr->lstrec].entry[ifree].begrec = begrec;
		fsr->dir[fsr->lstrec].entry[ifree].endrec = begrec + length - 1;
		/* highrec = fsr->dir[fsr->lstrec].entry[ifree].endrec; */
		fsr->dir[fsr->lstrec].entry[ifree].flag = USED;
		fsr->dir[fsr->lstrec].entry[ifree].matnum = matnum;
d171 1
a171 1
		if (fsr->lstrec >= fsr->memsize) {			/* Allocate more memory */
d176 1
a176 1
				fprintf (stderr, "ERROR [create_dir7]: Could not realloc memory for image directory\n");
d195 8
a202 2
			if (wrtrec (fp, (char *) &fsr->dir[fsr->lstrec - 1], recnum, 1) != 0) {
				fprintf (stderr, "ERROR [create_dir7]: Error occurred during write\n");
d206 1
a206 1
/* Write first entry to new directory record. */
a214 1

d216 8
a223 1
	if (wrtrec (fp, fsr->dir[fsr->lstrec], recnum, 1) != 0)
d225 1
a225 1
	else
@


1.3
log
@tov revision
@
text
@d2 3
d11 1
a11 1
 *	$Id: create_dir7.c,v 1.2 1997/05/13 14:51:20 tom Exp tom $ */
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/create_dir7.c,v 1.2 1997/05/13 14:51:20 tom Exp tom $";
d134 1
a134 1
	}
d142 1
a142 1
		highrec = fsr->dir[fsr->lstrec].entry[ifree].endrec;
d187 1
a187 1
		highrec = fsr->dir[fsr->lstrec].entry[0].endrec;
@


1.2
log
@fix bug in creation of >32 frame files
@
text
@d2 3
d8 1
a8 1
 *	$Id: create_dir7.c,v 1.1 1996/04/19 19:33:20 tom Exp tom $ */
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/create_dir7.c,v 1.1 1996/04/19 19:33:20 tom Exp tom $";
d83 1
a83 1
						if (wrtrec (fp, (int *) &fsr->dir[fsr->lstrec], recnum, 1) != 0) {
d98 2
a99 2
					fprintf (stderr, "fi[%d].dir[%d].entry[%d].flag: %d\n",
						 fp, irec, i, fsr->dir[irec].entry[i].flag);
a128 2
			} else {		 /* Convert from DEC format. */
				lenrd = lenrd * LENREC_L;
d173 1
a173 1
			if (wrtrec (fp, (int *) &fsr->dir[fsr->lstrec - 1], recnum, 1) != 0) {
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*	$Log$
 *	$Id$ */
d13 1
a13 1
static char     rcsid[] = "$Header$";
d23 3
a25 3
	ImageFile      *file;
	int             matnum;			 	/* Matrix number of desired matrix */
	int             length;			 	/* Length of matrix to be created in records */
d27 1
a27 1
	FILE           *fp;			 		/* file pointer */
d30 2
a31 2
	int             begrec;			 	/* Beginning record number of matrix */
	int             current_rec;		/* Current record number */
d33 1
a33 1
	int             more_to_search;		/* TRUE: More records to search */
d37 2
a38 2
	int             free1 = FALSE;		/* Flag for first free entry */
	int             ifree = 0;		 	/* Index to first free entry */
d58 2
a59 2
	more_to_search = TRUE;
	while (more_to_search == TRUE) {
d64 1
a64 1
		if (irec < fsr->lstrec) {	 					/* Search records in memory */
d66 2
a67 3
			for (i = 0; i < DNOD_REC; i++) {			/* Loop through all directory
								 * entries */
				if (fsr->dir[irec].entry[i].flag == USED) {			/* Entry is used--skip tests */
d70 1
a70 1
				} else if (fsr->dir[irec].entry[i].flag == REMOVED) { /* Matrix removed--check size */
d80 1
a80 1
						if (wrtrec (fp, (int *) &fsr->dir[fsr->lstrec], &recnum, 1) != 0) {
d89 1
a89 1
					if (free1 == FALSE) {						/* Save first free for later use */
d100 1
a100 1
				more_to_search = FALSE;
d105 1
a105 1
			if (fsr->lstrec >= fsr->memsize - 1) {				/* Allocate more memory */
d159 1
a159 1
		if (fsr->lstrec == 1)		 				/* This is first directory record. */
d172 1
a172 1
			if (wrtrec (fp, (int *) &fsr->dir[fsr->lstrec - 1], &recnum, 1) != 0) {
@
