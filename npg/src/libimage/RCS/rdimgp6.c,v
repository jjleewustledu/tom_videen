head	2.4;
access;
symbols;
locks; strict;
comment	@ * @;


2.4
date	2004.02.20.16.06.24;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2004.02.18.19.56.33;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2004.02.12.22.04.10;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.01.02.18.40.48;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.01.19.14.19;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.12.13.17.45.50;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	97.12.02.22.46.28;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.04.19.19.33.20;	author tom;	state Exp;
branches;
next	;


desc
@@


2.4
log
@Feb 2004
@
text
@/*  $Id: rdimgp6.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $
 *  $Log: rdimgp6.c,v $
 * Revision 2.3  2004/02/18  19:56:33  tom
 * Feb 18 (interfile)
 *
 * Revision 2.2  2004/02/12  22:04:10  tom
 * sync Feb 2004
 *
 * Revision 2.0  2004/01/02  18:40:48  tom
 * splint cleanup
 *
 * Revision 1.4  2003/07/01  19:14:19  tom
 * *** empty log message ***
 *
 * Revision 1.3  1999/12/13  17:45:50  tom
 * tov revision
 *
 * Revision 1.2  1997/12/02  22:46:28  tom
 * modify for dynamic
 *
 * Revision 1.1  1996/04/19  19:33:20  tom
 * Initial revision
 *
 */
/* =============================================================================
 *	Function:		rdimgp6
 *  Date:           Mar 2003
 *  Author:         Tom Videen
 *	Description:	Get image data from PETT VI file.
 * =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/rdimgp6.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <image.h>
#include <libimage.h>
#include <endian.h>

float          *rdimgp6 (file, indx)
	ImageFile      *file;
	Index          *indx;
{
	short          *simg;
	float          *img;
	long            offset, slices, n, i;
	long            len = PETT6_DIM * PETT6_DIM;

	if ((get_hp6 (file, indx)) == ERROR) {
		(void) fprintf (stderr, "ERROR [rdimgp6]: Could not read header of %s plane %d\n",
				file->name, indx->pln);
		return (NULL);
	}
	simg = (short *) calloc (len, sizeof (short));
	if (simg == NULL) {
		(void) fprintf (stderr, "ERROR [rdimgp6]: calloc simg\n");
		return (NULL);
	}

	slices = file->p6->number_of_slices;
	if (slices == 0)
		slices = 7;
	n = (long) ((indx->frm) - 1) * slices;
	offset = (n + (long) indx->pln - 1) * PETT6_SLICE_BYTES + RECLEN;
	if ((fseek (file->fp, offset, SEEK_SET)) != 0) {
		(void) fprintf (stderr, "ERROR [rdimgp6]: Reading %s plane %d\n", file->name, indx->pln);
		free (simg);
		return (NULL);
	}
	if ((fread (simg, sizeof (short), len, file->fp)) != len) {
		(void) fprintf (stderr, "ERROR [rdimgp6]: Reading %s plane %d\n", file->name, indx->pln);
		free (simg);
		return (NULL);
	}
	if ((img = (float *) calloc (len, sizeof (float))) == NULL) {
		(void) fprintf (stderr, "ERROR [rdimgp6]: calloc img\n");
		free (simg);
		return (NULL);
	}
	/* CONSTCOND  */
	if (__BYTE_ORDER == __LITTLE_ENDIAN)
		swap_byte ((char *) simg, len * (long) sizeof (short));

	for (i = 0; i < len; i++)
		img[i] = (float) simg[i];
	free (simg);
	return (img);
}
@


2.3
log
@Feb 18 (interfile)
@
text
@d1 1
a1 1
/*  $Id: rdimgp6.c,v 2.2 2004/02/12 22:04:10 tom Exp tom $
d3 3
d34 1
a34 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/rdimgp6.c,v 2.2 2004/02/12 22:04:10 tom Exp tom $";
@


2.2
log
@sync Feb 2004
@
text
@d1 1
a1 1
/*  $Id: rdimgp6.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $
d3 3
d31 1
a31 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/rdimgp6.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $";
@


2.0
log
@splint cleanup
@
text
@d1 1
a1 1
/*  $Id: rdimgp6.c,v 1.4 2003/07/01 19:14:19 tom Exp tom $
d3 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/rdimgp6.c,v 1.4 2003/07/01 19:14:19 tom Exp tom $";
d52 1
a52 1
	simg = (short *) malloc (len * sizeof (short));
d54 1
a54 1
		(void) fprintf (stderr, "ERROR [rdimgp6]: malloc simg\n");
d73 2
a74 2
	if ((img = (float *) malloc (len * sizeof (float))) == NULL) {
		(void) fprintf (stderr, "ERROR [rdimgp6]: Could not malloc memory for img\n");
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: rdimgp6.c,v 1.3 1999/12/13 17:45:50 tom Exp tom $
d3 3
d23 1
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/rdimgp6.c,v 1.3 1999/12/13 17:45:50 tom Exp tom $";
d50 4
d62 1
d67 1
@


1.3
log
@tov revision
@
text
@d1 1
a1 1
/*  $Id: rdimgp6.c,v 1.2 1997/12/02 22:46:28 tom Exp tom $
d3 3
d15 1
a15 1
 *  Date:           Nov-95
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/rdimgp6.c,v 1.2 1997/12/02 22:46:28 tom Exp tom $";
d29 1
d37 2
a38 2
	long            offset, slices, n;
	long            i, len;
d42 1
a42 1
			 file->name, indx->pln);
a44 1
	len = PETT6_DIM * PETT6_DIM;
d47 5
a51 5
    slices = file->p6->number_of_slices;
    if (slices == 0)
        slices = 7;
    n = (long) ((indx->frm) - 1) * slices;
    offset = (n + (long) indx->pln - 1) * PETT6_SLICE_BYTES + RECLEN;
d65 4
@


1.2
log
@modify for dynamic
@
text
@d1 1
a1 1
/*  $Id: rdimgp6.c,v 1.1 1996/04/19 19:33:20 tom Exp tom $
d3 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/rdimgp6.c,v 1.1 1996/04/19 19:33:20 tom Exp tom $";
d37 1
a37 1
		fprintf (stderr, "ERROR [rdimgp6]: Could not read header of %s plane %d\n",
d50 1
a50 1
		fprintf (stderr, "ERROR [rdimgp6]: Reading %s plane %d\n", file->name, indx->pln);
d54 1
a54 1
		fprintf (stderr, "ERROR [rdimgp6]: Reading %s plane %d\n", file->name, indx->pln);
d58 1
a58 1
		fprintf (stderr, "ERROR [rdimgp6]: Could not malloc memory for img\n");
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
 *  $Log$
d15 1
a15 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libimg/RCS/pett6.c,v 1.15 1996/03/12 22:43:17 tom Exp $";
d30 2
a31 2
	long            ptr;
	int             i, len;
d41 6
a46 2
	ptr = (long) (indx->pln - 1) * PETT6_SLICE_BYTES + RECLEN;
	if ((fseek (file->fp, (long) ptr, SEEK_SET)) != 0) {
@
