head	2.5;
access;
symbols;
locks; strict;
comment	@ * @;


2.5
date	2005.11.21.14.57.35;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2004.02.20.16.06.24;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2004.02.18.19.56.33;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2004.02.12.22.04.10;	author tom;	state Exp;
branches;
next	;


desc
@sync Feb 2004
@


2.5
log
@use firstimgfrm to locate first frame
@
text
@/*  $Id: get_imgh.c,v 2.4 2004/02/20 16:06:24 tom Exp tom $
    $Log: get_imgh.c,v $
 * Revision 2.4  2004/02/20  16:06:24  tom
 * Feb 2004
 *
 * Revision 2.3  2004/02/18  19:56:33  tom
 * Feb 18 (interfile)
 *
 * Revision 2.2  2004/02/12  22:04:10  tom
 * sync Feb 2004
 * */
/* =============================================================================
 *	Function:		get_imgh
 *  Date:           Jan 2004
 *  Author:         Tom Videen
 *	Description:	Open file, read main and subheaders, leave indx pointing valid frame
 * =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_imgh.c,v 2.4 2004/02/20 16:06:24 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <libimage.h>

int             get_imgh (file, idx)
	ImageFile      *file;
	Index           idx;
{
	Index          *indx;
	char		   *fname;

	indx = &idx;
	fname = file->name;
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [get_imgh]: opening %s\n", fname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [get_imgh]: reading MainHeader from %s\n", fname);
		return (ERROR);
	}
	if (existimgfrm (file, indx) == ERROR) {
		if (indx->frm > 1) {
			fprintf (stderr, "ERROR [get_imgh]: reading file %s frame %d\n", fname, indx->frm);
			return (ERROR);
		} else {
			indx->frm = firstimgfrm(file);
			if (existimgfrm (file, indx) == ERROR) {
				fprintf (stderr, "ERROR [get_imgh]: reading file %s frame %d\n", fname, indx->frm);
				return (ERROR);
			}
		}
	}
	if (get_sh (file, indx) == ERROR) {
		fprintf (stderr, "ERROR [get_imgh]: reading subheader in %s\n", fname);
		return (ERROR);
	}
	idx.frm = indx->frm;
	return (0);
}
@


2.4
log
@Feb 2004
@
text
@d1 1
a1 1
/*  $Id: get_imgh.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $
d3 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_imgh.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $";
d51 1
a51 1
			indx->frm = 2;
@


2.3
log
@Feb 18 (interfile)
@
text
@d1 1
a1 1
/*  $Id: get_imgh.c,v 2.2 2004/02/12 22:04:10 tom Exp tom $
d3 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_imgh.c,v 2.2 2004/02/12 22:04:10 tom Exp tom $";
d26 1
a26 1
int             get_imgh (file, indx)
d28 2
d31 1
a31 2
{
	char			*fname;
d33 1
d44 1
a44 2
		indx->frm = 2;
		if (existimgfrm (file, indx) == ERROR) {
d47 6
d59 1
@


2.2
log
@sync Feb 2004
@
text
@d1 5
a5 2
/*  $Id$
    $Log$ */
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_sh7.c,v 2.0 2004/01/02 18:40:48 tom Exp $";
@
