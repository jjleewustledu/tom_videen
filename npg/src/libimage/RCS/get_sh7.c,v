head	2.5;
access;
symbols;
locks; strict;
comment	@ * @;


2.5
date	2008.08.21.17.49.55;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2004.02.20.16.06.24;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2004.02.18.19.56.33;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2004.02.12.22.04.10;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.01.02.18.40.48;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.01.19.14.19;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.27.19.03.28;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.04.19.19.33.20;	author tom;	state Exp;
branches;
next	;


desc
@@


2.5
log
@no change
@
text
@/*  $Id: get_sh7.c,v 2.4 2004/02/20 16:06:24 tom Exp tom $
    $Log: get_sh7.c,v $
 * Revision 2.4  2004/02/20  16:06:24  tom
 * Feb 2004
 *
 * Revision 2.3  2004/02/18  19:56:33  tom
 * Feb 18 (interfile)
 *
 * Revision 2.2  2004/02/12  22:04:10  tom
 * sync Feb 2004
 *
 * Revision 2.0  2004/01/02  18:40:48  tom
 * splint cleanup
 *
 * Revision 1.3  2003/07/01  19:14:19  tom
 * *** empty log message ***
 *
 * Revision 1.2  2000/09/27  19:03:28  tom
 * *** empty log message ***
 *
 * Revision 1.1  1996/04/19  19:33:20  tom
 * Initial revision
 *
 */
/* =============================================================================
 *	Function:		get_sh7
 *  Date:           Mar 2003
 *  Author:         Tom Videen
 *	Description:	Get Subheader of Version 7 file.
 * =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_sh7.c,v 2.4 2004/02/20 16:06:24 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <libimage.h>
#include <endian.h>

int             get_sh7 (file, indx)
	ImageFile      *file;
	Index          *indx;
{
	Image_subheader7 *sh7;
	DataSetType     dtype;

	union temporary {
		short           s[NUMREC_ISHDR * LENREC_S];
		char            c[NUMREC_ISHDR * LENREC];
	}               tmp;

	union temp_long {
		float           f;
		int             l;
		short           s[2];
	}               conv;

	int             matnum, begrec, endrec;
	int             i, j;
	int             pln1 = 1;
	long            nbytes = NUMREC_ISHDR * LENREC;

	if (file->m7 == NULL) {
		fprintf (stderr, "ERROR [get_sh7]: no mainheader for %s\n", file->name);
		return (ERROR);
	}
	dtype = (DataSetType) file->m7->mh->file_type;
	if (dtype != PetVolume) {
		fprintf (stderr, "ERROR [get_sh7]: file_type %d not supported for %s\n", dtype, file->name);
		return (ERROR);
	}
	if (file->m7->sh == NULL) {
		if ((make_sh7 (file)) == ERROR) {
			fprintf (stderr, "ERROR [get_sh7]: Could not calloc memory for sh7\n");
			return (ERROR);
		}
	}
	sh7 = file->m7->sh;

	matnum = numcode7 (indx->frm, pln1, indx->gate, indx->data, indx->bed);
	if ((begrec = getmatpos (file, matnum, &endrec)) == ERROR) {
		fprintf (stderr, "ERROR [get_sh7]: Matrix #%x not found\n", (unsigned) matnum);
		return (ERROR);
	}

	if (rdrec (file->fp, tmp.c, begrec, NUMREC_ISHDR) != 0)
		return (ERROR);

	for (i = 0; i < 40; i++)
		sh7->annotation[i] = tmp.c[122 + i];

	/* Shorts  */
	/* CONSTCOND  */
	if (__BYTE_ORDER == __LITTLE_ENDIAN) {
		swap_byte (tmp.c, nbytes);
		j = 1;
	} else
		j = 0;

	sh7->data_type = tmp.s[0];
	sh7->num_dimensions = tmp.s[1];
	sh7->x_dimension = tmp.s[2];
	sh7->y_dimension = tmp.s[3];
	sh7->z_dimension = tmp.s[4];
	sh7->image_min = tmp.s[15];
	sh7->image_max = tmp.s[16];
	sh7->filter_code = tmp.s[27];
	sh7->filter_order = tmp.s[56];
	sh7->rfilter_code = tmp.s[103];
	sh7->rfilter_order = tmp.s[104];
	sh7->zfilter_code = tmp.s[109];
	sh7->zfilter_order = tmp.s[110];
	for (i = 0; i < 145; i++)
		sh7->reserved[i] = tmp.s[111 + i];

	/* Longs and Floats */

	conv.s[0 + j] = tmp.s[5];
	conv.s[1 - j] = tmp.s[6];
	sh7->x_offset = conv.f;

	conv.s[0 + j] = tmp.s[7];
	conv.s[1 - j] = tmp.s[8];
	sh7->y_offset = conv.f;

	conv.s[0 + j] = tmp.s[9];
	conv.s[1 - j] = tmp.s[10];
	sh7->z_offset = conv.f;

	conv.s[0 + j] = tmp.s[11];
	conv.s[1 - j] = tmp.s[12];
	sh7->recon_zoom = conv.f;

	conv.s[0 + j] = tmp.s[13];
	conv.s[1 - j] = tmp.s[14];
	sh7->scale_factor = conv.f;

	conv.s[0 + j] = tmp.s[17];
	conv.s[1 - j] = tmp.s[18];
	sh7->x_pixel_size = conv.f;

	conv.s[0 + j] = tmp.s[19];
	conv.s[1 - j] = tmp.s[20];
	sh7->y_pixel_size = conv.f;

	conv.s[0 + j] = tmp.s[21];
	conv.s[1 - j] = tmp.s[22];
	sh7->z_pixel_size = conv.f;

	conv.s[0 + j] = tmp.s[23];
	conv.s[1 - j] = tmp.s[24];
	sh7->frame_duration = conv.l;

	conv.s[0 + j] = tmp.s[25];
	conv.s[1 - j] = tmp.s[26];
	sh7->frame_start_time = conv.l;

	conv.s[0 + j] = tmp.s[28];
	conv.s[1 - j] = tmp.s[29];
	sh7->x_resolution = conv.f;

	conv.s[0 + j] = tmp.s[30];
	conv.s[1 - j] = tmp.s[31];
	sh7->y_resolution = conv.f;

	conv.s[0 + j] = tmp.s[32];
	conv.s[1 - j] = tmp.s[33];
	sh7->z_resolution = conv.f;

	conv.s[0 + j] = tmp.s[34];
	conv.s[1 - j] = tmp.s[35];
	sh7->num_r_elements = conv.f;

	conv.s[0 + j] = tmp.s[36];
	conv.s[1 - j] = tmp.s[37];
	sh7->num_angles = conv.f;

	conv.s[0 + j] = tmp.s[38];
	conv.s[1 - j] = tmp.s[39];
	sh7->z_rotation_angle = conv.f;

	conv.s[0 + j] = tmp.s[40];
	conv.s[1 - j] = tmp.s[41];
	sh7->decay_corr_fctr = conv.f;

	conv.s[0 + j] = tmp.s[42];
	conv.s[1 - j] = tmp.s[43];
	sh7->processing_code = conv.l;

	conv.s[0 + j] = tmp.s[44];
	conv.s[1 - j] = tmp.s[45];
	sh7->gate_duration = conv.l;

	conv.s[0 + j] = tmp.s[46];
	conv.s[1 - j] = tmp.s[47];
	sh7->r_wave_offset = conv.l;

	conv.s[0 + j] = tmp.s[48];
	conv.s[1 - j] = tmp.s[49];
	sh7->num_accepted_beats = conv.l;

	conv.s[0 + j] = tmp.s[50];
	conv.s[1 - j] = tmp.s[51];
	sh7->filter_cutoff_frequency = conv.f;

	conv.s[0 + j] = tmp.s[52];
	conv.s[1 - j] = tmp.s[53];
	sh7->filter_resolution = conv.f;

	conv.s[0 + j] = tmp.s[54];
	conv.s[1 - j] = tmp.s[55];
	sh7->filter_ramp_slope = conv.f;

	conv.s[0 + j] = tmp.s[57];
	conv.s[1 - j] = tmp.s[58];
	sh7->filter_scatter_fraction = conv.f;

	conv.s[0 + j] = tmp.s[59];
	conv.s[1 - j] = tmp.s[60];
	sh7->filter_scatter_slope = conv.f;

	conv.s[0 + j] = tmp.s[81];
	conv.s[1 - j] = tmp.s[82];
	sh7->da_x_rotation_angle = conv.f;

	conv.s[0 + j] = tmp.s[83];
	conv.s[1 - j] = tmp.s[84];
	sh7->da_y_rotation_angle = conv.f;

	conv.s[0 + j] = tmp.s[85];
	conv.s[1 - j] = tmp.s[86];
	sh7->da_z_rotation_angle = conv.f;

	conv.s[0 + j] = tmp.s[87];
	conv.s[1 - j] = tmp.s[88];
	sh7->da_x_translation = conv.f;

	conv.s[0 + j] = tmp.s[89];
	conv.s[1 - j] = tmp.s[90];
	sh7->da_y_translation = conv.f;

	conv.s[0 + j] = tmp.s[91];
	conv.s[1 - j] = tmp.s[92];
	sh7->da_z_translation = conv.f;

	conv.s[0 + j] = tmp.s[93];
	conv.s[1 - j] = tmp.s[94];
	sh7->da_x_scale_factor = conv.f;

	conv.s[0 + j] = tmp.s[95];
	conv.s[1 - j] = tmp.s[96];
	sh7->da_y_scale_factor = conv.f;

	conv.s[0 + j] = tmp.s[97];
	conv.s[1 - j] = tmp.s[98];
	sh7->da_z_scale_factor = conv.f;

	conv.s[0 + j] = tmp.s[99];
	conv.s[1 - j] = tmp.s[100];
	sh7->rfilter_cutoff = conv.f;

	conv.s[0 + j] = tmp.s[101];
	conv.s[1 - j] = tmp.s[102];
	sh7->rfilter_resolution = conv.f;

	conv.s[0 + j] = tmp.s[105];
	conv.s[1 - j] = tmp.s[106];
	sh7->zfilter_cutoff = conv.f;

	conv.s[0 + j] = tmp.s[107];
	conv.s[1 - j] = tmp.s[108];
	sh7->zfilter_resolution = conv.f;
	return (OK);
}
@


2.4
log
@Feb 2004
@
text
@d1 1
a1 1
/*  $Id: get_sh7.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $
d3 3
d34 1
a34 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_sh7.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $";
d88 1
@


2.3
log
@Feb 18 (interfile)
@
text
@d1 1
a1 1
/*  $Id: get_sh7.c,v 2.2 2004/02/12 22:04:10 tom Exp tom $
d3 3
d31 1
a31 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_sh7.c,v 2.2 2004/02/12 22:04:10 tom Exp tom $";
@


2.2
log
@sync Feb 2004
@
text
@d1 1
a1 1
/*  $Id: get_sh7.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $
d3 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_sh7.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $";
@


2.0
log
@splint cleanup
@
text
@d1 1
a1 1
/*  $Id: get_sh7.c,v 1.3 2003/07/01 19:14:19 tom Exp tom $
d3 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_sh7.c,v 1.3 2003/07/01 19:14:19 tom Exp tom $";
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: get_sh7.c,v 1.2 2000/09/27 19:03:28 tom Exp tom $
d3 3
d20 1
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_sh7.c,v 1.2 2000/09/27 19:03:28 tom Exp tom $";
d73 1
a73 1
		fprintf (stderr, "ERROR [get_sh7]: Matrix #%x not found\n", matnum);
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: get_sh7.c,v 1.1 1996/04/19 19:33:20 tom Exp tom $
d3 3
d12 1
a12 1
 *  Date:           Mar-96
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_sh7.c,v 1.1 1996/04/19 19:33:20 tom Exp tom $";
d25 1
a29 1

a34 2
		float           f[NUMREC_ISHDR * LENREC_S / 2];
		long            l[NUMREC_ISHDR * LENREC_S / 2];
d43 1
a43 1
	}               tmpl;
d45 2
a46 2
	int             lenrd, matnum, begrec, endrec;
	int             i;
d48 1
d56 1
a56 1
		fprintf (stderr, "ERROR [get_sh7]: file type %d not supported for %s\n", dtype, file->name);
d72 1
a72 2
	lenrd = NUMREC_ISHDR;
	if (rdrec (file->fp, (char *) tmp.s, begrec, lenrd) != 0)
d75 11
a90 21

	tmpl.s[0] = tmp.s[5];
	tmpl.s[1] = tmp.s[6];
	sh7->x_offset = tmpl.f;

	tmpl.s[0] = tmp.s[7];
	tmpl.s[1] = tmp.s[8];
	sh7->y_offset = tmpl.f;

	tmpl.s[0] = tmp.s[9];
	tmpl.s[1] = tmp.s[10];
	sh7->z_offset = tmpl.f;

	tmpl.s[0] = tmp.s[11];
	tmpl.s[1] = tmp.s[12];
	sh7->recon_zoom = tmpl.f;

	tmpl.s[0] = tmp.s[13];
	tmpl.s[1] = tmp.s[14];
	sh7->scale_factor = tmpl.f;

d93 8
d102 1
a102 3
	tmpl.s[0] = tmp.s[17];
	tmpl.s[1] = tmp.s[18];
	sh7->x_pixel_size = tmpl.f;
d104 3
a106 3
	tmpl.s[0] = tmp.s[19];
	tmpl.s[1] = tmp.s[20];
	sh7->y_pixel_size = tmpl.f;
d108 3
a110 3
	tmpl.s[0] = tmp.s[21];
	tmpl.s[1] = tmp.s[22];
	sh7->z_pixel_size = tmpl.f;
d112 3
a114 3
	tmpl.s[0] = tmp.s[23];
	tmpl.s[1] = tmp.s[24];
	sh7->frame_duration = tmpl.l;
d116 3
a118 3
	tmpl.s[0] = tmp.s[25];
	tmpl.s[1] = tmp.s[26];
	sh7->frame_start_time = tmpl.l;
d120 3
a122 1
	sh7->filter_code = tmp.s[27];
d124 3
a126 3
	tmpl.s[0] = tmp.s[28];
	tmpl.s[1] = tmp.s[29];
	sh7->x_resolution = tmpl.f;
d128 3
a130 3
	tmpl.s[0] = tmp.s[30];
	tmpl.s[1] = tmp.s[31];
	sh7->y_resolution = tmpl.f;
d132 3
a134 3
	tmpl.s[0] = tmp.s[32];
	tmpl.s[1] = tmp.s[33];
	sh7->z_resolution = tmpl.f;
d136 3
a138 3
	tmpl.s[0] = tmp.s[34];
	tmpl.s[1] = tmp.s[35];
	sh7->num_r_elements = tmpl.f;
d140 3
a142 3
	tmpl.s[0] = tmp.s[36];
	tmpl.s[1] = tmp.s[37];
	sh7->num_angles = tmpl.f;
d144 3
a146 3
	tmpl.s[0] = tmp.s[38];
	tmpl.s[1] = tmp.s[39];
	sh7->z_rotation_angle = tmpl.f;
d148 3
a150 3
	tmpl.s[0] = tmp.s[40];
	tmpl.s[1] = tmp.s[41];
	sh7->decay_corr_fctr = tmpl.f;
d152 3
a154 3
	tmpl.s[0] = tmp.s[42];
	tmpl.s[1] = tmp.s[43];
	sh7->processing_code = tmpl.l;
d156 3
a158 3
	tmpl.s[0] = tmp.s[44];
	tmpl.s[1] = tmp.s[45];
	sh7->gate_duration = tmpl.l;
d160 3
a162 3
	tmpl.s[0] = tmp.s[46];
	tmpl.s[1] = tmp.s[47];
	sh7->r_wave_offset = tmpl.l;
d164 3
a166 3
	tmpl.s[0] = tmp.s[48];
	tmpl.s[1] = tmp.s[49];
	sh7->num_accepted_beats = tmpl.l;
d168 3
a170 3
	tmpl.s[0] = tmp.s[50];
	tmpl.s[1] = tmp.s[51];
	sh7->filter_cutoff_frequency = tmpl.f;
d172 3
a174 3
	tmpl.s[0] = tmp.s[52];
	tmpl.s[1] = tmp.s[53];
	sh7->filter_resolution = tmpl.f;
d176 3
a178 3
	tmpl.s[0] = tmp.s[54];
	tmpl.s[1] = tmp.s[55];
	sh7->filter_ramp_slope = tmpl.f;
d180 3
a182 1
	sh7->filter_order = tmp.s[56];
d184 3
a186 3
	tmpl.s[0] = tmp.s[57];
	tmpl.s[1] = tmp.s[58];
	sh7->filter_scatter_fraction = tmpl.f;
d188 3
a190 3
	tmpl.s[0] = tmp.s[59];
	tmpl.s[1] = tmp.s[60];
	sh7->filter_scatter_slope = tmpl.f;
d192 3
a194 2
	for (i = 0; i < 40; i++)
		sh7->annotation[i] = tmp.c[122 + i];
d196 3
a198 3
	tmpl.s[0] = tmp.s[81];
	tmpl.s[1] = tmp.s[82];
	sh7->da_x_rotation_angle = tmpl.f;
d200 3
a202 3
	tmpl.s[0] = tmp.s[83];
	tmpl.s[1] = tmp.s[84];
	sh7->da_y_rotation_angle = tmpl.f;
d204 3
a206 3
	tmpl.s[0] = tmp.s[85];
	tmpl.s[1] = tmp.s[86];
	sh7->da_z_rotation_angle = tmpl.f;
d208 3
a210 3
	tmpl.s[0] = tmp.s[87];
	tmpl.s[1] = tmp.s[88];
	sh7->da_x_translation = tmpl.f;
d212 3
a214 3
	tmpl.s[0] = tmp.s[89];
	tmpl.s[1] = tmp.s[90];
	sh7->da_y_translation = tmpl.f;
d216 3
a218 3
	tmpl.s[0] = tmp.s[91];
	tmpl.s[1] = tmp.s[92];
	sh7->da_z_translation = tmpl.f;
d220 3
a222 3
	tmpl.s[0] = tmp.s[93];
	tmpl.s[1] = tmp.s[94];
	sh7->da_x_scale_factor = tmpl.f;
d224 3
a226 3
	tmpl.s[0] = tmp.s[95];
	tmpl.s[1] = tmp.s[96];
	sh7->da_y_scale_factor = tmpl.f;
d228 3
a230 3
	tmpl.s[0] = tmp.s[97];
	tmpl.s[1] = tmp.s[98];
	sh7->da_z_scale_factor = tmpl.f;
d232 3
a234 3
	tmpl.s[0] = tmp.s[99];
	tmpl.s[1] = tmp.s[100];
	sh7->rfilter_cutoff = tmpl.f;
d236 3
a238 3
	tmpl.s[0] = tmp.s[101];
	tmpl.s[1] = tmp.s[102];
	sh7->rfilter_resolution = tmpl.f;
d240 3
a242 2
	sh7->rfilter_code = tmp.s[103];
	sh7->rfilter_order = tmp.s[104];
d244 3
a246 3
	tmpl.s[0] = tmp.s[105];
	tmpl.s[1] = tmp.s[106];
	sh7->zfilter_cutoff = tmpl.f;
d248 3
a250 3
	tmpl.s[0] = tmp.s[107];
	tmpl.s[1] = tmp.s[108];
	sh7->zfilter_resolution = tmpl.f;
d252 3
a254 2
	sh7->zfilter_code = tmp.s[109];
	sh7->zfilter_order = tmp.s[110];
d256 3
a258 2
	for (i = 0; i < 145; i++)
		sh7->reserved[i] = tmp.s[111 + i];
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
    $Log$
d15 1
a15 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libimg/RCS/cti7.c,v 1.11 1995/12/15 21:40:17 tom Exp $";
d59 1
a59 1
			fprintf (stderr, "ERROR [get_sh7]: Could not malloc memory for sh7\n");
@
