head	2.4;
access;
symbols;
locks; strict;
comment	@ * @;


2.4
date	2004.02.20.16.06.24;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2004.02.18.19.56.33;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2004.02.12.22.03.43;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.01.02.18.40.48;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.01.19.14.19;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.17.21.55.15;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.28.16.01.08;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.21.17.01.28;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.07.22.24.17;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.12.15.24.56;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.28.14.44.29;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.18.20.08.52;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.18.17.01.59;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.18.15.40.27;	author tom;	state Exp;
branches;
next	;


desc
@add Interfile compatibility
@


2.4
log
@Feb 2004
@
text
@/*  $Id: get_ifh.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $
 *  $Log: get_ifh.c,v $
 * Revision 2.3  2004/02/18  19:56:33  tom
 * Feb 18 (interfile)
 *
 * Revision 2.2  2004/02/12  22:03:43  tom
 * sync Feb 2004
 *
 * Revision 2.0  2004/01/02  18:40:48  tom
 * splint cleanup
 *
 * Revision 1.10  2003/07/01  19:14:19  tom
 * *** empty log message ***
 *
 * Revision 1.9  2002/12/17  21:55:15  tom
 * fix pointer/cast errors found with gcc
 *
 *  Revision 1.8  2002/03/28 16:01:08  tom
 *  read study_date
 *
 * Revision 1.7  2001/11/21  17:01:28  tom
 * remove CR from strings
 *
 * Revision 1.6  2000/12/07  22:24:17  tom
 * fill additional ifh parameters
 *
 * Revision 1.5  2000/10/12  15:24:56  tom
 * *** empty log message ***
 *
 * Revision 1.4  2000/09/28  14:44:29  tom
 * calloc
 *
 * Revision 1.3  2000/07/18  20:08:52  tom
 * *** empty log message ***
 *
 * Revision 1.2  2000/07/18  17:01:59  tom
 * initialize ifh dimensions
 *
 * Revision 1.1  2000/07/18  15:40:27  tom
 * Initial revision
 * */
/* =============================================================================
 *	Function:		get_ifh
 *  Date:           Jul 2002
 *  Author:         Tom Videen
 *	Description:	Read Interfile header and store in IFheader.
 * =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <unistd.h>
#include <image.h>
#include <interfile.h>

#define MAXSTR 256

int             get_ifh (file, indx)
	ImageFile      *file;
	Index		   *indx;
{
	MainHeader_if  *ifh;
	FrameHeader_if *iff;
	char            str[MAXSTR];
	char            hdrfil[MAXSTR];
	char           *ptr, *ptr2;
	float           fval;
	long            lval;
	int             ival;
	int             frm;

	if (file->ih == NULL) {
		file->ih = (IFheader *) calloc (1, sizeof (IFheader));
		if (file->ih == NULL)
			return (ERROR);
		file->ih->mh = (MainHeader_if *) calloc (1, sizeof (MainHeader_if));
		if (file->ih->mh == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: calloc ih->mh\n");
			return (ERROR);
		}
		ifh = (MainHeader_if *) file->ih->mh;
		ifh->modality = calloc (MAXSTR, sizeof (char));
		if (ifh->modality == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: calloc ih->mh\n");
			return (ERROR);
		}
		ifh->sw_name = calloc (MAXSTR, sizeof (char));
		if (ifh->sw_name == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: calloc ih->mh\n");
			return (ERROR);
		}
		ifh->orig_system = calloc (MAXSTR, sizeof (char));
		if (ifh->orig_system == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: calloc ih->mh\n");
			return (ERROR);
		}
		ifh->institution = calloc (MAXSTR, sizeof (char));
		if (ifh->institution == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: calloc ih->mh\n");
			return (ERROR);
		}
		ifh->data_file = calloc (MAXSTR, sizeof (char));
		if (ifh->data_file == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: calloc ih->mh\n");
			return (ERROR);
		}
		ifh->subject_id = calloc (MAXSTR, sizeof (char));
		if (ifh->subject_id == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: calloc ih->mh\n");
			return (ERROR);
		}
		ifh->study_date = calloc (MAXSTR, sizeof (char));
		if (ifh->study_date == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: calloc ih->mh\n");
			return (ERROR);
		}
		file->ih->fh = (FrameHeader_if *) calloc (1, sizeof (FrameHeader_if));
		if (file->ih->fh == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: calloc ih->fh\n");
			return (ERROR);
		}
	} 
	ifh = (MainHeader_if *) file->ih->mh;
	iff = (FrameHeader_if *) file->ih->fh;
	ifh->big_endian = 1;
	ifh->dim1 = 1;
	ifh->dim2 = 1;
	ifh->dim3 = 1;
	ifh->dim4 = 1;
	(void) strcpy (file->ih->mh->initial_1, "");
	(void) strcpy (file->ih->mh->initial_2, "");
	(void) strcpy (file->ih->mh->initial_3, "");
	iff->start_time = 0;
	iff->duration = 0;
	iff->offset = 0;
	iff->scale_factor = 1.0;
	iff->deadtime_correction = 1.0;
	iff->decay_correction = 1.0;

	if (file->fp != NULL)
		if (ftell (file->fp) >= 0)
			(void) fclose (file->fp);

	file->fp = fopen (file->name, file->mode);
	if (file->fp == NULL) {
		(void) fprintf (stderr, "ERROR [get_ifh]: Could not open Interfile header %s\n", file->name);
		return (ERROR);
	}
	if (fgets (str, sizeof (str), file->fp) == NULL) {
		(void) fprintf (stderr, "ERROR [get_ifh]: reading %s\n", file->name);
		return (ERROR);
	}
	ptr = strstr (str, "INTERFILE");
	if (ptr == NULL) {
		(void) strcpy (hdrfil, file->name);
		ptr = strrchr (hdrfil, '.');
		if (ptr != NULL)
			(void) strcpy (ptr, '\0');
		(void) strcat (hdrfil, ".ifh");
		(void) fclose (file->fp);
		file->fp = fopen (hdrfil, file->mode);
		if (file->fp == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: %s is not type Interfile\n", file->name);
			return (ERROR);
		}
		(void) fprintf (stdout, "Reading %s\n", hdrfil);
		if (fgets (str, sizeof (str), file->fp) == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: reading %s\n", hdrfil);
			return (ERROR);
		}
		ptr = strstr (str, "INTERFILE");
		if (ptr == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: %s is not type Interfile\n", hdrfil);
			(void) fclose (file->fp);
			return (ERROR);
		} else
			(void) strcpy (file->name, hdrfil);
	}
	frm = 0;
	while (fgets (str, sizeof (str), file->fp) != NULL) {
		if (strncmp (str, "END OF INTERFILE", 16) == 0) {
			(void) fclose (file->fp);
			return (OK);
		}
		if (frm > indx->frm) {
			(void) fclose (file->fp);
			return (OK);
		}
		ptr = strstr (str, ":=");
		if (ptr != NULL) {
			ptr += 3;
			ptr2 = strrchr (ptr, '\n');
			if (ptr2 != NULL)
				(void) strcpy (ptr2, "\0");
			if (strstr (str, "conversion program") != NULL) {
				if (ifh->sw_name == NULL)
					ifh->sw_name = calloc (MAXSTR, sizeof (char));
				if (ifh->sw_name != NULL)
					(void) sscanf (ptr, "%s", ifh->sw_name);
				continue;
			}
			if (strstr (str, "program version") != NULL) {
				(void) sscanf (ptr, "%d", &ival);
				ifh->sw_version = ival;
				continue;
			}
			if (strstr (str, "name of data file") != NULL) {
				if (ifh->data_file == NULL)
					ifh->data_file = calloc (MAXSTR, sizeof (char));
				if (ifh->data_file != NULL)
					(void) sscanf (ptr, "%s", ifh->data_file);
				continue;
			}
			if (strstr (str, "number format") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (strstr (ptr, "integer") != NULL) {
					ifh->number_format = INT_DATA;
					ifh->nbytes = 2;
				} else if (strstr (ptr, "short") != NULL) {
					ifh->number_format = SHORT_DATA;
					ifh->nbytes = 2;
				} else if (strstr (ptr, "float") != NULL) {
					ifh->number_format = FLOAT_DATA;
					ifh->nbytes = 4;
				} else if (strstr (ptr, "byte") != NULL) {
					ifh->number_format = BYTE_DATA;
					ifh->nbytes = 1;
				} else {
					ifh->number_format = 0;
				}
				continue;
			}
			if (strstr (str, "number of bytes per pixel") != NULL) {
				continue;
			}
			if (strstr (str, "number of dimensions") != NULL) {
				(void) sscanf (ptr, "%d", &ival);
				ifh->ndim = ival;
				continue;
			}
			if (strstr (str, "matrix size [1]") != NULL) {
				(void) sscanf (ptr, "%d", &ival);
				ifh->dim1 = ival;
				continue;
			}
			if (strstr (str, "matrix size [2]") != NULL) {
				(void) sscanf (ptr, "%d", &ival);
				ifh->dim2 = ival;
				continue;
			}
			if (strstr (str, "matrix size [3]") != NULL) {
				(void) sscanf (ptr, "%d", &ival);
				ifh->dim3 = ival;
				continue;
			}
			if (strstr (str, "matrix size [4]") != NULL) {
				(void) sscanf (ptr, "%d", &ival);
				ifh->dim4 = ival;
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [1]") != NULL) {
				(void) sscanf (ptr, "%f", &fval);
				ifh->voxel_size_1 = fval;
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [2]") != NULL) {
				(void) sscanf (ptr, "%f", &fval);
				ifh->voxel_size_2 = fval;
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [3]") != NULL) {
				(void) sscanf (ptr, "%f", &fval);
				ifh->voxel_size_3 = fval;
				continue;
			}
			if (strstr (str, "matrix initial element [1]") != NULL) {
				while (*ptr == ' ')
					ptr++;
				(void) strcpy (ifh->initial_1, ptr);
				continue;
			}
			if (strstr (str, "matrix initial element [2]") != NULL) {
				while (*ptr == ' ')
					ptr++;
				(void) strcpy (ifh->initial_2, ptr);
				continue;
			}
			if (strstr (str, "matrix initial element [3]") != NULL) {
				while (*ptr == ' ')
					ptr++;
				(void) strcpy (ifh->initial_3, ptr);
				continue;
			}
			if (strstr (str, "image modality") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (ifh->modality == NULL)
					ifh->modality = calloc (MAXSTR, sizeof (char));
				if (ifh->modality != NULL)
					(void) strcpy (ifh->modality, ptr);
				continue;
			}
			if (strstr (str, "originating system") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (ifh->orig_system == NULL)
					ifh->orig_system = calloc (MAXSTR, sizeof (char));
				if (ifh->orig_system != NULL)
					(void) strcpy (ifh->orig_system, ptr);
				continue;
			}
			if (strstr (str, "original institution") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (ifh->institution == NULL)
					ifh->institution = calloc (MAXSTR, sizeof (char));
				if (ifh->institution != NULL)
					(void) strcpy (ifh->institution, ptr);
				continue;
			}
			if (strstr (str, "subject ID") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (ifh->subject_id == NULL)
					ifh->subject_id = calloc (MAXSTR, sizeof (char));
				if (ifh->subject_id != NULL)
					(void) strcpy (ifh->subject_id, ptr);
				continue;
			}
			if (strstr (str, "study date") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (ifh->study_date == NULL)
					ifh->study_date = calloc (MAXSTR, sizeof (char));
				if (ifh->study_date != NULL)
					(void) strcpy (ifh->study_date, ptr);
				continue;
			}
			if (strstr (str, "imagedata byte order") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (strstr (ptr, "littleendian") != NULL && strstr (ptr, "LITTLEENDIAN") != NULL)
					ifh->big_endian = 0;
				else
					ifh->big_endian = 1;
				continue;
			}
			if (strstr (str, "frame_start") != NULL) {
				(void) sscanf (ptr, "%f", &fval);
				iff->start_time = fval;
				continue;
			}
			if (strstr (str, "frame_duration") != NULL) {
				(void) sscanf (ptr, "%f", &fval);
				iff->duration = fval;
				continue;
			}
			if (strstr (str, "frame") != NULL) {
				(void) sscanf (ptr, "%d", &frm);
				continue;
			}
			if (strstr (str, "offset") != NULL) {
				(void) sscanf (ptr, "%ld", &lval);
				iff->offset = lval;
				continue;
			}
			if (strstr (str, "scale_factor") != NULL) {
				(void) sscanf (ptr, "%f", &fval);
				iff->scale_factor = fval;
				continue;
			}
			if (strstr (str, "deadtime_correction") != NULL) {
				(void) sscanf (ptr, "%f", &fval);
				iff->deadtime_correction = fval;
				continue;
			}
			if (strstr (str, "decay_correction") != NULL) {
				(void) sscanf (ptr, "%f", &fval);
				iff->decay_correction = fval;
				continue;
			}
		}
	}

	(void) fclose (file->fp);
	return (OK);
}
@


2.3
log
@Feb 18 (interfile)
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 2.2 2004/02/12 22:03:43 tom Exp $
d3 3
d51 1
a51 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 2.2 2004/02/12 22:03:43 tom Exp $";
@


2.2
log
@sync Feb 2004
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $
d3 3
d48 1
a48 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $";
d61 1
a61 1
int             get_ifh (file)
d63 1
d66 1
d71 1
d73 1
a78 19
	}
	if (file->ih->mh != NULL) {
		if (file->ih->mh->modality != NULL)
			free (file->ih->mh->modality);
		if (file->ih->mh->sw_name != NULL)
			free (file->ih->mh->sw_name);
		if (file->ih->mh->orig_system != NULL)
			free (file->ih->mh->orig_system);
		if (file->ih->mh->institution != NULL)
			free (file->ih->mh->institution);
		if (file->ih->mh->data_file != NULL)
			free (file->ih->mh->data_file);
		if (file->ih->mh->subject_id != NULL)
			free (file->ih->mh->subject_id);
		if (file->ih->mh->study_date != NULL)
			free (file->ih->mh->study_date);
		free (file->ih->mh);
		file->ih->mh = NULL;
	} else {
d84 42
a125 9
		file->ih->mh->big_endian = 1;
		file->ih->mh->dim1 = 1;
		file->ih->mh->dim2 = 1;
		file->ih->mh->dim3 = 1;
		file->ih->mh->dim4 = 1;
		(void) strcpy (file->ih->mh->initial_1, "");
		(void) strcpy (file->ih->mh->initial_2, "");
		(void) strcpy (file->ih->mh->initial_3, "");
	}
d127 16
d182 1
d188 4
d352 34
@


2.0
log
@splint cleanup
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 1.10 2003/07/01 19:14:19 tom Exp tom $
d3 3
d45 1
a45 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 1.10 2003/07/01 19:14:19 tom Exp tom $";
d93 1
a93 1
			(void) fprintf (stderr, "ERROR [get_ifh]: Could not calloc memory for Interfile header\n");
a95 28
		if (file->ih->mh->modality != NULL) {
			free (file->ih->mh->modality);
			file->ih->mh->modality = NULL;
		}
		if (file->ih->mh->sw_name != NULL) {
			free (file->ih->mh->sw_name);
			file->ih->mh->sw_name = NULL;
		}
		if (file->ih->mh->orig_system != NULL) {
			free (file->ih->mh->orig_system);
			file->ih->mh->orig_system = NULL;
		}
		if (file->ih->mh->institution != NULL) {
			free (file->ih->mh->institution);
			file->ih->mh->institution = NULL;
		}
		if (file->ih->mh->data_file != NULL) {
			free (file->ih->mh->data_file);
			file->ih->mh->data_file = NULL;
		}
		if (file->ih->mh->subject_id != NULL) {
			free (file->ih->mh->subject_id);
			file->ih->mh->subject_id = NULL;
		}
		if (file->ih->mh->study_date != NULL) {
			free (file->ih->mh->study_date);
			file->ih->mh->study_date = NULL;
		}
@


1.10
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 1.9 2002/12/17 21:55:15 tom Exp tom $
d3 3
d40 1
d42 1
a42 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 1.9 2002/12/17 21:55:15 tom Exp tom $";
d67 1
a67 2
		if (file->ih == NULL) {
			(void) fprintf (stderr, "ERROR [get_ifh]: Could not calloc memory for Interfile header\n");
d69 17
a85 1
		}
d87 1
a87 2
	}
	if (file->ih->mh == NULL) {
d93 28
a120 7
		file->ih->mh->modality = NULL;
		file->ih->mh->sw_name = NULL;
		file->ih->mh->orig_system = NULL;
		file->ih->mh->institution = NULL;
		file->ih->mh->data_file = NULL;
		file->ih->mh->subject_id = NULL;
		file->ih->mh->study_date = NULL;
d149 1
a149 1
			free (ptr);
d180 1
a180 1
				(void) strcpy(ptr2, "\0");
d184 2
a185 1
				(void) sscanf (ptr, "%s", ifh->sw_name);
d196 2
a197 1
				(void) sscanf (ptr, "%s", ifh->data_file);
d286 2
a287 1
				(void) strcpy (ifh->modality, ptr);
d295 2
a296 1
				(void) strcpy (ifh->orig_system, ptr);
d304 2
a305 1
				(void) strcpy (ifh->institution, ptr);
d313 2
a314 1
				(void) strcpy (ifh->subject_id, ptr);
d322 2
a323 1
				(void) strcpy (ifh->study_date, ptr);
@


1.9
log
@fix pointer/cast errors found with gcc
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 1.8 2002/03/28 16:01:08 tom Exp tom $
d3 3
d38 1
a38 1
static char     rcsid[] = "$Header: /home/tom/src/libimage/RCS/get_ifh.c,v 1.8 2002/03/28 16:01:08 tom Exp tom $";
d82 1
d110 1
a110 1
			ptr = NULL;
d139 1
a139 1
			ptr2 =  strrchr(ptr,'\n');
d141 1
a141 1
				ptr2 = NULL;
d280 9
@


1.8
log
@read study_date
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 1.7 2001/11/21 17:01:28 tom Exp tom $
d3 3
d35 1
a35 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 1.7 2001/11/21 17:01:28 tom Exp tom $";
d106 1
a106 1
			*ptr = NULL;
d137 1
a137 1
				*ptr2 = NULL;
@


1.7
log
@remove CR from strings
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 1.6 2000/12/07 22:24:17 tom Exp tom $
d3 3
d26 1
a26 1
 *  Date:           Jul-00
d32 1
a32 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 1.6 2000/12/07 22:24:17 tom Exp tom $";
d265 8
@


1.6
log
@fill additional ifh parameters
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 1.5 2000/10/12 15:24:56 tom Exp tom $
d3 3
d29 1
a29 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 1.5 2000/10/12 15:24:56 tom Exp tom $";
d48 1
a48 1
	char           *ptr;
d129 3
d233 2
d241 2
d249 2
d257 2
@


1.5
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 1.4 2000/09/28 14:44:29 tom Exp tom $
d3 3
d26 1
a26 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 1.4 2000/09/28 14:44:29 tom Exp tom $";
d224 24
@


1.4
log
@calloc
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 1.3 2000/07/18 20:08:52 tom Exp tom $
d3 3
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 1.3 2000/07/18 20:08:52 tom Exp tom $";
d41 1
d71 3
a73 3
		(void) strcpy (file->ih->mh->initial_1,"");
		(void) strcpy (file->ih->mh->initial_2,"");
		(void) strcpy (file->ih->mh->initial_3,"");
d79 1
d91 23
a113 2
		(void) fprintf (stderr, "ERROR [get_ifh]: %s is not an Interfile header\n", file->name);
		return (ERROR);
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 1.2 2000/07/18 17:01:59 tom Exp tom $
d3 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 1.2 2000/07/18 17:01:59 tom Exp tom $";
d43 1
a43 1
		file->ih = (IFheader *) malloc (sizeof (IFheader));
d45 1
a45 1
			(void) fprintf (stderr, "ERROR [get_ifh]: Could not malloc memory for Interfile header\n");
d51 1
a51 1
		file->ih->mh = (MainHeader_if *) malloc (sizeof (MainHeader_if));
d53 1
a53 1
			(void) fprintf (stderr, "ERROR [get_ifh]: Could not malloc memory for Interfile header\n");
@


1.2
log
@initialize ifh dimensions
@
text
@d1 1
a1 1
/*  $Id: get_ifh.c,v 1.1 2000/07/18 15:40:27 tom Exp $
d3 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 1.1 2000/07/18 15:40:27 tom Exp $";
d95 2
a96 1
				ifh->sw_name = calloc (MAXSTR, sizeof (char));
d106 2
a107 1
				ifh->data_file = calloc (MAXSTR, sizeof (char));
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
 *  $Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/get_ifh.c,v 1.4 1999/12/13 17:45:50 tom Exp $";
d57 4
@
