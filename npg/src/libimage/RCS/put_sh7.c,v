head	2.4;
access;
symbols;
locks; strict;
comment	@ * @;


2.4
date	2004.02.20.16.06.24;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2004.02.18.19.56.33;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2004.02.12.22.04.10;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.01.02.18.40.48;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.01.19.14.19;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.12.13.17.45.50;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.04.19.19.33.20;	author tom;	state Exp;
branches;
next	;


desc
@@


2.4
log
@Feb 2004
@
text
@/*  $Id: put_sh7.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $
    $Log: put_sh7.c,v $
 * Revision 2.3  2004/02/18  19:56:33  tom
 * Feb 18 (interfile)
 *
 * Revision 2.2  2004/02/12  22:04:10  tom
 * sync Feb 2004
 *
 * Revision 2.0  2004/01/02  18:40:48  tom
 * splint cleanup
 *
 * Revision 1.3  2003/07/01  19:14:19  tom
 * *** empty log message ***
 *
 * Revision 1.2  1999/12/13  17:45:50  tom
 * tov revision
 *
 * Revision 1.1  1996/04/19  19:33:20  tom
 * Initial revision
 *
 */
/* =============================================================================
 *	Function:		put_sh7
 *  Date:           Mar 1996
 *  Author:         Tom Videen
 *	Description:	Write subheader for Version 7 file.
 * =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/put_sh7.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <libimage.h>
#include <endian.h>

int             put_sh7 (file, indx)
	ImageFile      *file;
	Index          *indx;
{
	union temporary {
		short           s[NUMREC_ISHDR * LENREC_S];
		char            c[NUMREC_ISHDR * LENREC];
	}               tmp;

	union temp_long {
		float           f;
		long            l;
		short           s[2];
	}               conv;

	Image_subheader7 *sh7;
	DataSetType     dtype;
	int             matnum, begrec, endrec;
	int             i, j;
	int             pln1 = 1;
	int             nrec = NUMREC_ISHDR;
	long            nbytes = nrec * LENREC;

	dtype = (DataSetType) file->m7->mh->file_type;
	if (dtype != PetVolume) {
		(void) fprintf (stderr, "ERROR [put_sh7]: Unsupported data type %d for %s\n", dtype, file->name);
		return (ERROR);
	}
	if (file->m7->sh == NULL) {
		(void) fprintf (stderr, "ERROR [put_sh7]: Version 7 subheader undefined for %s\n", file->name);
		return (ERROR);
	}
	sh7 = file->m7->sh;

	for (i = 0; i < nbytes / 2; i++)
		tmp.s[i] = 0;

	/* CONSTCOND */
	if (__BYTE_ORDER == __LITTLE_ENDIAN) {
		j = 1;
	} else
		j = 0;

	/* Shorts	 */
	/* starts with byte 1025 or rec 3 */
	tmp.s[0] = sh7->data_type;
	tmp.s[1] = sh7->num_dimensions;
	tmp.s[2] = sh7->x_dimension;
	tmp.s[3] = sh7->y_dimension;
	tmp.s[4] = sh7->z_dimension;
	tmp.s[15] = sh7->image_min;
	tmp.s[16] = sh7->image_max;
	tmp.s[27] = sh7->filter_code;
	tmp.s[56] = sh7->filter_order;
	tmp.s[109] = sh7->zfilter_code;
	tmp.s[110] = sh7->zfilter_order;
	for (i = 0; i < 145; i++)
		tmp.s[111 + i] = sh7->reserved[i];

	/* Longs and Floats	 */

	conv.f = sh7->x_offset;
	tmp.s[5] = conv.s[0 + j];
	tmp.s[6] = conv.s[1 - j];

	conv.f = sh7->y_offset;
	tmp.s[7] = conv.s[0 + j];
	tmp.s[8] = conv.s[1 - j];

	conv.f = sh7->z_offset;
	tmp.s[9] = conv.s[0 + j];
	tmp.s[10] = conv.s[1 - j];

	conv.f = sh7->recon_zoom;
	tmp.s[11] = conv.s[0 + j];
	tmp.s[12] = conv.s[1 - j];

	conv.f = sh7->scale_factor;
	tmp.s[13] = conv.s[0 + j];
	tmp.s[14] = conv.s[1 - j];

	conv.f = sh7->x_pixel_size;
	tmp.s[17] = conv.s[0 + j];
	tmp.s[18] = conv.s[1 - j];

	conv.f = sh7->y_pixel_size;
	tmp.s[19] = conv.s[0 + j];
	tmp.s[20] = conv.s[1 - j];

	conv.f = sh7->z_pixel_size;
	tmp.s[21] = conv.s[0 + j];
	tmp.s[22] = conv.s[1 - j];

	conv.l = sh7->frame_duration;
	tmp.s[23] = conv.s[0 + j];
	tmp.s[24] = conv.s[1 - j];

	conv.l = sh7->frame_start_time;
	tmp.s[25] = conv.s[0 + j];
	tmp.s[26] = conv.s[1 - j];

	conv.f = sh7->x_resolution;
	tmp.s[28] = conv.s[0 + j];
	tmp.s[29] = conv.s[1 - j];

	conv.f = sh7->y_resolution;
	tmp.s[30] = conv.s[0 + j];
	tmp.s[31] = conv.s[1 - j];

	conv.f = sh7->z_resolution;
	tmp.s[32] = conv.s[0 + j];
	tmp.s[33] = conv.s[1 - j];

	conv.f = sh7->num_r_elements;
	tmp.s[34] = conv.s[0 + j];
	tmp.s[35] = conv.s[1 - j];

	conv.f = sh7->num_angles;
	tmp.s[36] = conv.s[0 + j];
	tmp.s[37] = conv.s[1 - j];

	conv.f = sh7->z_rotation_angle;
	tmp.s[38] = conv.s[0 + j];
	tmp.s[39] = conv.s[1 - j];

	conv.f = sh7->decay_corr_fctr;
	tmp.s[40] = conv.s[0 + j];
	tmp.s[41] = conv.s[1 - j];

	conv.l = sh7->processing_code;
	tmp.s[42] = conv.s[0 + j];
	tmp.s[43] = conv.s[1 - j];

	conv.l = sh7->gate_duration;
	tmp.s[44] = conv.s[0 + j];
	tmp.s[45] = conv.s[1 - j];

	conv.l = sh7->r_wave_offset;
	tmp.s[46] = conv.s[0 + j];
	tmp.s[47] = conv.s[1 - j];

	conv.l = sh7->num_accepted_beats;
	tmp.s[48] = conv.s[0 + j];
	tmp.s[49] = conv.s[1 - j];

	conv.f = sh7->filter_cutoff_frequency;
	tmp.s[50] = conv.s[0 + j];
	tmp.s[51] = conv.s[1 - j];

	conv.f = sh7->filter_resolution;
	tmp.s[52] = conv.s[0 + j];
	tmp.s[53] = conv.s[1 - j];

	conv.f = sh7->filter_ramp_slope;
	tmp.s[54] = conv.s[0 + j];
	tmp.s[55] = conv.s[1 - j];

	conv.f = sh7->filter_scatter_fraction;
	tmp.s[57] = conv.s[0 + j];
	tmp.s[58] = conv.s[1 - j];

	conv.f = sh7->filter_scatter_slope;
	tmp.s[59] = conv.s[0 + j];
	tmp.s[60] = conv.s[1 - j];

	conv.f = sh7->da_x_rotation_angle;
	tmp.s[81] = conv.s[0 + j];
	tmp.s[82] = conv.s[1 - j];

	conv.f = sh7->da_y_rotation_angle;
	tmp.s[83] = conv.s[0 + j];
	tmp.s[84] = conv.s[1 - j];

	conv.f = sh7->da_z_rotation_angle;
	tmp.s[85] = conv.s[0 + j];
	tmp.s[86] = conv.s[1 - j];

	conv.f = sh7->da_x_translation;
	tmp.s[87] = conv.s[0 + j];
	tmp.s[88] = conv.s[1 - j];

	conv.f = sh7->da_y_translation;
	tmp.s[89] = conv.s[0 + j];
	tmp.s[90] = conv.s[1 - j];

	conv.f = sh7->da_z_translation;
	tmp.s[91] = conv.s[0 + j];
	tmp.s[92] = conv.s[1 - j];

	conv.f = sh7->da_x_scale_factor;
	tmp.s[93] = conv.s[0 + j];
	tmp.s[94] = conv.s[1 - j];

	conv.f = sh7->da_y_scale_factor;
	tmp.s[95] = conv.s[0 + j];
	tmp.s[96] = conv.s[1 - j];

	conv.f = sh7->da_z_scale_factor;
	tmp.s[97] = conv.s[0 + j];
	tmp.s[98] = conv.s[1 - j];

	conv.f = sh7->rfilter_cutoff;
	tmp.s[99] = conv.s[0 + j];
	tmp.s[100] = conv.s[1 - j];

	conv.f = sh7->rfilter_resolution;
	tmp.s[101] = conv.s[0 + j];
	tmp.s[102] = conv.s[1 - j];

	tmp.s[103] = sh7->rfilter_code;
	tmp.s[104] = sh7->rfilter_order;

	conv.f = sh7->zfilter_cutoff;
	tmp.s[105] = conv.s[0 + j];
	tmp.s[106] = conv.s[1 - j];

	conv.f = sh7->zfilter_resolution;
	tmp.s[107] = conv.s[0 + j];
	tmp.s[108] = conv.s[1 - j];

	matnum = numcode7 (indx->frm, pln1, indx->gate, indx->data, indx->bed);
	if ((begrec = getmatpos (file, matnum, &endrec)) == ERROR) {
		if ((begrec = create_dir7 (file, matnum, nrec)) < 0) {
			(void) fprintf (stderr, "ERROR [put_sh7]: Could not create entry for matrix #%x\n", (unsigned) matnum);
			return (ERROR);
		}
	}
	/* CONSTCOND */
	if (__BYTE_ORDER == __LITTLE_ENDIAN)
		swap_byte (tmp.c, nbytes);

	/* Strings	 */
	for (i = 0; i < 40; i++)
		tmp.c[122 + i] = sh7->annotation[i];

	if (wrtrec (file->fp, tmp.c, begrec, nrec) == ERROR) {
		(void) fprintf (stderr, "ERROR [put_sh7]: writing subheader\n");
		return (ERROR);
	} else
		return (OK);
}
@


2.3
log
@Feb 18 (interfile)
@
text
@d1 1
a1 1
/*  $Id: put_sh7.c,v 2.2 2004/02/12 22:04:10 tom Exp tom $
d3 3
d31 1
a31 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/put_sh7.c,v 2.2 2004/02/12 22:04:10 tom Exp tom $";
@


2.2
log
@sync Feb 2004
@
text
@d1 1
a1 1
/*  $Id: put_sh7.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $
d3 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/put_sh7.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $";
@


2.0
log
@splint cleanup
@
text
@d1 1
a1 1
/*  $Id: put_sh7.c,v 1.3 2003/07/01 19:14:19 tom Exp tom $
d3 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/put_sh7.c,v 1.3 2003/07/01 19:14:19 tom Exp tom $";
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: put_sh7.c,v 1.2 1999/12/13 17:45:50 tom Exp tom $
d3 3
d15 1
a15 1
 *  Date:           Mar-96
d20 1
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/put_sh7.c,v 1.2 1999/12/13 17:45:50 tom Exp tom $";
d254 1
a254 1
			(void) fprintf (stderr, "ERROR [put_sh7]: Could not create entry for matrix #%x\n", matnum);
@


1.2
log
@tov revision
@
text
@d1 1
a1 1
/*  $Id: put_sh7.c,v 1.1 1996/04/19 19:33:20 tom Exp tom $
d3 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/put_sh7.c,v 1.1 1996/04/19 19:33:20 tom Exp tom $";
d25 1
a31 2
		float           f[NUMREC_ISHDR * LENREC_S / 2];
		long            l[NUMREC_ISHDR * LENREC_S / 2];
d40 1
a40 1
	}               tmpl;
d44 5
a48 2
	int             len, matnum, begrec, endrec;
	int             i, pln1 = 1;
d60 12
d77 8
d86 1
a86 3
	tmpl.f = sh7->x_offset;
	tmp.s[5] = tmpl.s[0];
	tmp.s[6] = tmpl.s[1];
d88 3
a90 3
	tmpl.f = sh7->y_offset;
	tmp.s[7] = tmpl.s[0];
	tmp.s[8] = tmpl.s[1];
d92 3
a94 3
	tmpl.f = sh7->z_offset;
	tmp.s[9] = tmpl.s[0];
	tmp.s[10] = tmpl.s[1];
d96 3
a98 3
	tmpl.f = sh7->recon_zoom;
	tmp.s[11] = tmpl.s[0];
	tmp.s[12] = tmpl.s[1];
d100 3
a102 3
	tmpl.f = sh7->scale_factor;
	tmp.s[13] = tmpl.s[0];
	tmp.s[14] = tmpl.s[1];
d104 3
a106 2
	tmp.s[15] = sh7->image_min;
	tmp.s[16] = sh7->image_max;
d108 3
a110 3
	tmpl.f = sh7->x_pixel_size;
	tmp.s[17] = tmpl.s[0];
	tmp.s[18] = tmpl.s[1];
d112 3
a114 3
	tmpl.f = sh7->y_pixel_size;
	tmp.s[19] = tmpl.s[0];
	tmp.s[20] = tmpl.s[1];
d116 3
a118 3
	tmpl.f = sh7->z_pixel_size;
	tmp.s[21] = tmpl.s[0];
	tmp.s[22] = tmpl.s[1];
d120 3
a122 3
	tmpl.l = sh7->frame_duration;
	tmp.s[23] = tmpl.s[0];
	tmp.s[24] = tmpl.s[1];
d124 3
a126 3
	tmpl.l = sh7->frame_start_time;
	tmp.s[25] = tmpl.s[0];
	tmp.s[26] = tmpl.s[1];
d128 3
a130 1
	tmp.s[27] = sh7->filter_code;
d132 3
a134 3
	tmpl.f = sh7->x_resolution;
	tmp.s[28] = tmpl.s[0];
	tmp.s[29] = tmpl.s[1];
d136 3
a138 3
	tmpl.f = sh7->y_resolution;
	tmp.s[30] = tmpl.s[0];
	tmp.s[31] = tmpl.s[1];
d140 3
a142 3
	tmpl.f = sh7->z_resolution;
	tmp.s[32] = tmpl.s[0];
	tmp.s[33] = tmpl.s[1];
d144 3
a146 3
	tmpl.f = sh7->num_r_elements;
	tmp.s[34] = tmpl.s[0];
	tmp.s[35] = tmpl.s[1];
d148 3
a150 3
	tmpl.f = sh7->num_angles;
	tmp.s[36] = tmpl.s[0];
	tmp.s[37] = tmpl.s[1];
d152 3
a154 3
	tmpl.f = sh7->z_rotation_angle;
	tmp.s[38] = tmpl.s[0];
	tmp.s[39] = tmpl.s[1];
d156 3
a158 3
	tmpl.f = sh7->decay_corr_fctr;
	tmp.s[40] = tmpl.s[0];
	tmp.s[41] = tmpl.s[1];
d160 3
a162 3
	tmpl.l = sh7->processing_code;
	tmp.s[42] = tmpl.s[0];
	tmp.s[43] = tmpl.s[1];
d164 3
a166 3
	tmpl.l = sh7->gate_duration;
	tmp.s[44] = tmpl.s[0];
	tmp.s[45] = tmpl.s[1];
d168 3
a170 3
	tmpl.l = sh7->r_wave_offset;
	tmp.s[46] = tmpl.s[0];
	tmp.s[47] = tmpl.s[1];
d172 3
a174 3
	tmpl.l = sh7->num_accepted_beats;
	tmp.s[48] = tmpl.s[0];
	tmp.s[49] = tmpl.s[1];
d176 3
a178 3
	tmpl.f = sh7->filter_cutoff_frequency;
	tmp.s[50] = tmpl.s[0];
	tmp.s[51] = tmpl.s[1];
d180 3
a182 3
	tmpl.f = sh7->filter_resolution;
	tmp.s[52] = tmpl.s[0];
	tmp.s[53] = tmpl.s[1];
d184 3
a186 3
	tmpl.f = sh7->filter_ramp_slope;
	tmp.s[54] = tmpl.s[0];
	tmp.s[55] = tmpl.s[1];
d188 3
a190 1
	tmp.s[56] = sh7->filter_order;
d192 3
a194 3
	tmpl.f = sh7->filter_scatter_fraction;
	tmp.s[57] = tmpl.s[0];
	tmp.s[58] = tmpl.s[1];
d196 3
a198 3
	tmpl.f = sh7->filter_scatter_slope;
	tmp.s[59] = tmpl.s[0];
	tmp.s[60] = tmpl.s[1];
d200 3
a202 2
	for (i = 0; i < 40; i++)
		tmp.c[122 + i] = sh7->annotation[i];
d204 3
a206 3
	tmpl.f = sh7->da_x_rotation_angle;
	tmp.s[81] = tmpl.s[0];
	tmp.s[82] = tmpl.s[1];
d208 3
a210 3
	tmpl.f = sh7->da_y_rotation_angle;
	tmp.s[83] = tmpl.s[0];
	tmp.s[84] = tmpl.s[1];
d212 3
a214 3
	tmpl.f = sh7->da_z_rotation_angle;
	tmp.s[85] = tmpl.s[0];
	tmp.s[86] = tmpl.s[1];
d216 3
a218 3
	tmpl.f = sh7->da_x_translation;
	tmp.s[87] = tmpl.s[0];
	tmp.s[88] = tmpl.s[1];
d220 3
a222 3
	tmpl.f = sh7->da_y_translation;
	tmp.s[89] = tmpl.s[0];
	tmp.s[90] = tmpl.s[1];
d224 3
a226 3
	tmpl.f = sh7->da_z_translation;
	tmp.s[91] = tmpl.s[0];
	tmp.s[92] = tmpl.s[1];
d228 3
a230 3
	tmpl.f = sh7->da_x_scale_factor;
	tmp.s[93] = tmpl.s[0];
	tmp.s[94] = tmpl.s[1];
d232 3
a234 3
	tmpl.f = sh7->da_y_scale_factor;
	tmp.s[95] = tmpl.s[0];
	tmp.s[96] = tmpl.s[1];
a235 12
	tmpl.f = sh7->da_z_scale_factor;
	tmp.s[97] = tmpl.s[0];
	tmp.s[98] = tmpl.s[1];

	tmpl.f = sh7->rfilter_cutoff;
	tmp.s[99] = tmpl.s[0];
	tmp.s[100] = tmpl.s[1];

	tmpl.f = sh7->rfilter_resolution;
	tmp.s[101] = tmpl.s[0];
	tmp.s[102] = tmpl.s[1];

d239 3
a241 3
	tmpl.f = sh7->zfilter_cutoff;
	tmp.s[105] = tmpl.s[0];
	tmp.s[106] = tmpl.s[1];
d243 3
a245 3
	tmpl.f = sh7->zfilter_resolution;
	tmp.s[107] = tmpl.s[0];
	tmp.s[108] = tmpl.s[1];
a246 6
	tmp.s[109] = sh7->zfilter_code;
	tmp.s[110] = sh7->zfilter_order;

	for (i = 0; i < 145; i++)
		tmp.s[111 + i] = sh7->reserved[i];

a247 1
	len = NUMREC_ISHDR;
d249 2
a250 2
		if ((begrec = create_dir7 (file, matnum, len)) < 0) {
			(void) fprintf (stderr, "ERROR [put_sh7]: Could not entry for matrix #%x\n", matnum);
d254 10
a263 1
	if (wrtrec (file->fp, (char *) tmp.s, begrec, len) == ERROR)
d265 1
a265 1
	else
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
    $Log$
d15 1
a15 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libimg/RCS/cti7.c,v 1.11 1995/12/15 21:40:17 tom Exp $";
d47 1
a47 1
		fprintf (stderr, "ERROR [put_sh7]: Unsupported data type %d for %s\n", dtype, file->name);
d51 1
a51 1
		fprintf (stderr, "ERROR [put_sh7]: Version 7 subheader undefined for %s\n", file->name);
d240 1
a240 1
			fprintf (stderr, "ERROR [put_sh7]: Could not entry for matrix #%x\n", matnum);
@
