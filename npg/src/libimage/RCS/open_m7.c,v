head	2.5;
access;
symbols;
locks; strict;
comment	@ * @;


2.5
date	2008.08.21.17.51.34;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2004.02.20.16.06.24;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2004.02.18.19.56.33;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2004.02.12.22.04.10;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.01.02.18.40.48;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.21.15.28.46;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.01.19.14.19;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.13.21.56.41;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.27.19.03.28;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.12.13.17.45.50;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.05.14.17.58.01;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.12.18.15.55.49;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.04.19.19.33.20;	author tom;	state Exp;
branches;
next	;


desc
@@


2.5
log
@snprintf
@
text
@/*  $Id: open_m7.c,v 2.4 2004/02/20 16:06:24 tom Exp tom $
 *  $Log: open_m7.c,v $
 * Revision 2.4  2004/02/20  16:06:24  tom
 * Feb 2004
 *
 * Revision 2.3  2004/02/18  19:56:33  tom
 * Feb 18 (interfile)
 *
 * Revision 2.2  2004/02/12  22:04:10  tom
 * sync Feb 2004
 *
 * Revision 2.0  2004/01/02  18:40:48  tom
 * splint cleanup
 *
 * Revision 1.8  2003/08/21  15:28:46  tom
 * 21Aug2003
 *
 * Revision 1.7  2003/07/01  19:14:19  tom
 * *** empty log message ***
 *
 *  Revision 1.6  2002/03/13 21:56:41  tom
 *  lint cleaning
 *
 * Revision 1.5  2000/09/27  19:03:28  tom
 * *** empty log message ***
 *
 * Revision 1.4  1999/12/13  17:45:50  tom
 * tov revision
 *
 * Revision 1.3  1999/05/14  17:58:01  tom
 * eliminate warning
 *
 * Revision 1.2  1998/12/18  15:55:49  tom
 * initialize new structures under m7 to null
 *
 * Revision 1.1  1996/04/19  19:33:20  tom
 * Initial revision
 *
 */
/* =============================================================================
 *	Function:		open_m7
 *  Date:           Mar 2003
 *  Author:         Tom Videen
 *	Description:	Get file pointer to Matrix 7 file.
 * =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 2.4 2004/02/20 16:06:24 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <image.h>
#include <libimage.h>
#include <endian.h>

extern void bcopy();

int             open_m7 (file)
	ImageFile      *file;
{
	FILE           *fp;
	struct file    *fsr;
	struct directory *dir;
	char           *fname;
	char           *mode;
	char            cmd[MAXPATH];
	long            buffer[LENREC_L];
	int             i, j;
	int             recnum = 2;		 /* directory in record 2 */
	int             nrec = 1;
	long            nbytes = LENREC;

	fname = file->name;
	mode = file->mode;

	if (strcmp (mode, "w") == 0) {
		if (file->fp != NULL)
			(void) fclose (file->fp);
		if ((fp = fopen (file->name, "r")) != NULL) {
			(void) fclose (fp);
			(void) snprintf (cmd, MAXPATH-1, "rm %s\n", fname);
			(void) system (cmd);
		}
		if ((file->fp = fopen (fname, mode)) == NULL) {
			(void) fprintf (stderr, "ERROR [open_m7]: creating %s\n", fname);
			return (ERROR);
		}
		if ((dir = (struct directory *) calloc (1, (unsigned) sizeof (struct directory))) == NULL) {
			(void) fprintf (stderr, "ERROR [open_m7]: calloc directory structure for %s\n", fname);
			return (ERROR);
		}
		dir->hdr.numfree = DNOD_REC;
		dir->hdr.forptr = DIR_NUM_1;
		dir->hdr.bakptr = 0;
		dir->hdr.numused = 0;
		for (j = 0; j < DNOD_REC; j++)
			dir->entry[j].flag = UNUSED;
		bcopy (dir, buffer, LENREC);

		/* CONSTCOND */
		if (__BYTE_ORDER == __LITTLE_ENDIAN) {
			swap_word ((short *) buffer, nbytes / 2);
			swap_byte ((char *) buffer, nbytes);
		}
		if (wrtrec (file->fp, (char *) buffer, recnum, nrec) != 0) {
			(void) fprintf (stderr, "ERROR [open_m7]: writing directory to %s\n", fname);
			free (dir);
			return (ERROR);
		}
		(void) fclose (file->fp);
		free (dir);
		(void) strcpy (file->mode, "r+");
		file->name = fname;
	}

/*	Open the file */

	if ((file->fp = fopen (fname, mode)) == NULL) {
		(void) fprintf (stderr, "ERROR [open_m7]: opening %s\n", fname);
		return (ERROR);
	}
	if (file->m7 == NULL) {
		if ((file->m7 = (M7header *) calloc (1, sizeof (M7header))) == NULL) {
			(void) fprintf (stderr, "ERROR [open_m7]: calloc mainheader\n");
			return (ERROR);
		}
	}
	if (file->m7->fsr == NULL) {
		if ((file->m7->fsr = (struct file *) calloc (1, sizeof (struct file))) == NULL) {
			(void) fprintf (stderr, "ERROR [open_m7]: calloc file structure\n");
			return (ERROR);
		}
		fsr = file->m7->fsr;
		fsr->memsize = SIZE_DIR_MALLOC;
		fsr->dir = (struct directory *) calloc (1, (unsigned) (SIZE_DIR_MALLOC * sizeof (struct directory)));
		if (fsr->dir == NULL) {
			(void) fprintf (stderr, "ERROR [open_m7]: calloc directory structure\n");
			return (ERROR);
		}
		for (i = 0; i < fsr->memsize; i++)
			for (j = 0; j < DNOD_REC; j++)
				fsr->dir[i].entry[j].flag = UNUSED;
		fsr->dir[0].hdr.forptr = DIR_NUM_1;
		fsr->dir[0].hdr.bakptr = 0;
		fsr->lstrec = 0;
	}
	return (OK);
}
@


2.4
log
@Feb 2004
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $
d3 3
d49 1
a49 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 2.3 2004/02/18 19:56:33 tom Exp tom $";
d59 2
d84 1
a84 1
			(void) sprintf (cmd, "rm %s\n", fname);
@


2.3
log
@Feb 18 (interfile)
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 2.2 2004/02/12 22:04:10 tom Exp tom $
d3 3
d46 1
a46 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 2.2 2004/02/12 22:04:10 tom Exp tom $";
@


2.2
log
@sync Feb 2004
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $
d3 3
d43 1
a43 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 2.0 2004/01/02 18:40:48 tom Exp tom $";
@


2.0
log
@splint cleanup
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 1.8 2003/08/21 15:28:46 tom Exp tom $
d3 3
d40 1
a40 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 1.8 2003/08/21 15:28:46 tom Exp tom $";
d73 1
a73 2
			(void) sprintf (cmd, "rm %s\n", fname);	/* delete existing file if write
								 * mode */
d105 1
a109 1
	(void) fclose (file->fp);
a118 8
		file->m7->fsr = NULL;
		file->m7->mh = NULL;
		file->m7->sh = NULL;
		file->m7->sc = NULL;
		file->m7->s3d = NULL;
		file->m7->nm = NULL;
		file->m7->nrm = NULL;
		file->m7->atn = NULL;
@


1.8
log
@21Aug2003
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 1.7 2003/07/01 19:14:19 tom Exp tom $
d3 3
d35 1
d37 1
a37 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 1.7 2003/07/01 19:14:19 tom Exp tom $";
@


1.7
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 1.6 2002/03/13 21:56:41 tom Exp $
d3 3
d33 1
a33 1
static char     rcsid[] = "$Header: /home/tom/src/libimage/RCS/open_m7.c,v 1.6 2002/03/13 21:56:41 tom Exp $";
d100 1
d103 1
@


1.6
log
@lint cleaning
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 1.5 2000/09/27 19:03:28 tom Exp tom $
d3 3
d24 1
a24 1
 *  Date:           Mar-96
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 1.5 2000/09/27 19:03:28 tom Exp tom $";
d35 1
a35 1
#include <string.h>
d38 1
d49 1
a49 1
	int             recnum, len;
d51 3
a57 2
/* Delete the file if mode is write. */

d63 2
a64 1
			(void) sprintf (cmd, "rm %s\n", fname);
a66 3

/*	Open the file and create a directory */

d68 1
a68 1
			(void) fprintf (stderr, "ERROR [open_m7]: Could not create file %s\n", fname);
d72 1
a72 1
			(void) fprintf (stderr, "ERROR [open_m7]: Could not calloc memory for directory\n");
d81 9
a89 4
		recnum = 2;
		len = 1;			 /* sg added */
		if (wrtrec (file->fp, (char *) dir, recnum, len) != 0) {
			(void) fprintf (stderr, "ERROR [open_m7]: Could not create directory record for %s\n", fname);
a96 1

d100 1
a100 1
		(void) fprintf (stderr, "ERROR [open_m7]: Could not open file %s\n", fname);
a102 3

/*	Allocate and initialize directory */

d105 1
a105 1
			(void) fprintf (stderr, "ERROR [open_m7]: calloc m7 error for %s\n", fname);
d109 3
a111 3
		file->m7->mh  = NULL;
		file->m7->sh  = NULL;
		file->m7->sc  = NULL;
d113 1
a113 1
		file->m7->nm  = NULL;
d119 1
a119 1
			(void) fprintf (stderr, "ERROR [open_m7]: calloc m7->fsr error for %s\n", fname);
d126 1
a126 1
			(void) fprintf (stderr, "ERROR [open_m7]: calloc m7->fsr->dir error for %s\n", fname);
@


1.5
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 1.4 1999/12/13 17:45:50 tom Exp tom $
d3 3
d27 1
a27 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 1.4 1999/12/13 17:45:50 tom Exp tom $";
d87 1
a87 1
		strcpy (file->mode, "r+");
@


1.4
log
@tov revision
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 1.3 1999/05/14 17:58:01 tom Exp tom $
d3 3
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 1.3 1999/05/14 17:58:01 tom Exp tom $";
d65 2
a66 2
		if ((dir = (struct directory *) malloc ((unsigned) sizeof (struct directory))) == NULL) {
			(void) fprintf (stderr, "ERROR [open_m7]: Could not malloc memory for directory\n");
d97 2
a98 2
		if ((file->m7 = (M7header *) malloc (sizeof (M7header))) == NULL) {
			(void) fprintf (stderr, "ERROR [open_m7]: malloc m7 error for %s\n", fname);
d111 2
a112 2
		if ((file->m7->fsr = (struct file *) malloc (sizeof (struct file))) == NULL) {
			(void) fprintf (stderr, "ERROR [open_m7]: malloc m7->fsr error for %s\n", fname);
d117 1
a117 1
		fsr->dir = (struct directory *) malloc ((unsigned) (SIZE_DIR_MALLOC * sizeof (struct directory)));
d119 1
a119 1
			(void) fprintf (stderr, "ERROR [open_m7]: malloc m7->fsr->dir error for %s\n", fname);
@


1.3
log
@eliminate warning
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 1.2 1998/12/18 15:55:49 tom Exp tom $
d3 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 1.2 1998/12/18 15:55:49 tom Exp tom $";
d49 1
a49 1
			fclose (file->fp);
d51 3
a53 3
			fclose (fp);
			sprintf (cmd, "rm %s\n", fname);
			system (cmd);
d59 1
a59 1
			fprintf (stderr, "ERROR [open_m7]: Could not create file %s\n", fname);
d63 1
a63 1
			fprintf (stderr, "ERROR [open_m7]: Could not malloc memory for directory\n");
d74 2
a75 2
		if (wrtrec (file->fp, (int *) dir, recnum, len) != 0) {
			fprintf (stderr, "ERROR [open_m7]: Could not create directory record for %s\n", fname);
d79 1
a79 1
		fclose (file->fp);
d87 1
a87 1
		fprintf (stderr, "ERROR [open_m7]: Could not open file %s\n", fname);
d95 1
a95 1
			fprintf (stderr, "ERROR [open_m7]: malloc m7 error for %s\n", fname);
d109 1
a109 1
			fprintf (stderr, "ERROR [open_m7]: malloc m7->fsr error for %s\n", fname);
d116 1
a116 1
			fprintf (stderr, "ERROR [open_m7]: malloc m7->fsr->dir error for %s\n", fname);
@


1.2
log
@initialize new structures under m7 to null
@
text
@d1 1
a1 1
/*  $Id: open_m7.c,v 1.1 1996/04/19 19:33:20 tom Exp tom $
d3 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimage/RCS/open_m7.c,v 1.1 1996/04/19 19:33:20 tom Exp tom $";
a50 1
			fprintf (stderr, "Warning: Deleted %s\n", fname);
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
 *  $Log$
d15 1
a15 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libimg/RCS/cti7.c,v 1.11 1995/12/15 21:40:17 tom Exp $";
a92 2
		file->m7->mh = NULL;
		file->m7->sh = NULL;
d94 7
@
