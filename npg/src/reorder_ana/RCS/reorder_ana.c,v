head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2002.11.27.17.20.48;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.13.18.02.24;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.10.29.18.30.04;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.10.29.18.17.18;	author tom;	state Exp;
branches;
next	;


desc
@reorder p5367ct
@


1.4
log
@*** empty log message ***
@
text
@/*	$Log: reorder_ana.c,v $
 * Revision 1.3  2000/09/13  18:02:24  tom
 * p5717ct
 *
 * Revision 1.2  1999/10/29  18:30:04  tom
 * eliminate 1 plane from p5155ct
 *
 * Revision 1.1  1999/10/29  18:17:18  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			reorder_ana.c
 *	Date:			Oct-99
 *	Author:			Tom Videen
 *	Description:	Reorder planes in an Analyze image
 *	===============================================================================
 */
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/reorder_ana/RCS/reorder_ana.c,v 1.3 2000/09/13 18:02:24 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			reorder_ana
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	long            dim1, dim2;		 /* dimensions of image */
	long            psize, npln, i;
	short          *img, *pos;

	if (argc != 5) {
		printf ("Usage: reorder_ana hdr1 img1 hdr2 img2\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];

/*	Read first image plane */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [reorder_ana]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	(void) fclose (fd_hdr);
	psize = dim1*dim2;

	npln = 49;	/* CUSTOM number of planes in new image */
	img = (short *) calloc (psize*npln, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [reorder_ana]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [reorder_ana]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	fprintf (stdout,"Reading %s\n", img1);

/*	Read in CUSTOM order, bearing in mind that Analyze images are reversed top-to-bottom */

	for (i = 1; i <= 32; i++) {
		pos = img + (i-1)*psize;
		fprintf (stdout, "%3ld %d\n", i, (int) pos);
		if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
			fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
			return (ERROR);
		}
	}

	i = 34;
	pos = img + (i-1)*psize;
	fprintf (stdout, "%3ld %d\n", i, (int) pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 36;
	pos = img + (i-1)*psize;
	fprintf (stdout, "%3ld %d\n", i, (int) pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 33;
	pos = img + (i-1)*psize;
	fprintf (stdout, "%3ld %d\n", i, (int) pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 35;
	pos = img + (i-1)*psize;
	fprintf (stdout, "%3ld %d\n", i, (int) pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}

	for (i = 37; i <= npln; i++) {
		pos = img + (i-1)*psize;
		fprintf (stdout, "%3ld %d\n", i, (int) pos);
		if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
			fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
			return (ERROR);
		}
	}
	(void) fclose (fd_img);

/* Write image */

	hdr.dime.dim[3] = npln;
	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [reorder_ana]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [reorder_ana]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [reorder_ana]: Unable to open %s\n", img2);
		return (ERROR);
	}
	fprintf (stdout,"Writing %s\n", img2);
	if ((fwrite (img, sizeof (short), psize*npln, fd_img)) != psize*npln) {
		fprintf (stderr, "ERROR [reorder_ana]: Error writing to: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	free (img);
	return (OK);
}
@


1.3
log
@p5717ct
@
text
@d2 3
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/reorder_ana/RCS/reorder_ana.c,v 1.2 1999/10/29 18:30:04 tom Exp $";
d43 1
a43 1
	short          *img, *pos, *junk;
d81 1
a81 1
	fclose (fd_hdr);
a82 1
	junk = (short *) calloc (psize, sizeof (short));
d100 1
a100 1
		fprintf (stdout, "%3d %d\n", i, pos);
d109 1
a109 1
	fprintf (stdout, "%3d %d\n", i, pos);
d116 1
a116 1
	fprintf (stdout, "%3d %d\n", i, pos);
d123 1
a123 1
	fprintf (stdout, "%3d %d\n", i, pos);
d130 1
a130 1
	fprintf (stdout, "%3d %d\n", i, pos);
a135 8
/*
	i = 31;
	fprintf (stdout, "%3d\n", i);
	if ((fread (junk, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
 */
d138 1
a138 1
		fprintf (stdout, "%3d %d\n", i, pos);
d144 1
a144 1
	fclose (fd_img);
d157 1
a157 1
	fclose (fd_hdr);
d167 1
a167 1
	fclose (fd_img);
@


1.2
log
@eliminate 1 plane from p5155ct
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/reorder_ana/RCS/reorder_ana.c,v 1.1 1999/10/29 18:17:18 tom Exp tom $";
d82 1
a82 1
	npln = 38;	/* CUSTOM number of planes in new image */
d96 1
a96 1
	for (i = 1; i <= 30; i++) {
d104 31
d141 3
a143 2
	for (i = 33; i <= 39; i++) {
		pos = img + (i-3)*psize;
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/reorder_ana/RCS/reorder_ana.c,v 1.1 1999/02/18 20:14:43 tom Exp tom $";
d79 1
a79 1
	npln = 55;	/* CUSTOM */
d93 2
a94 9
	i = 1;
	fprintf (stdout, "%3d\n", i);
	if ((fread (junk, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}

	for (i = 2; i <= 12; i++) {
		pos = img + (i-2)*psize;
d101 1
a101 44
	i = 14;
	pos = img + (i-2)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 13;
	pos = img + (i-2)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 15;
	pos = img + (i-2)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 17;
	pos = img + (i-2)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 16;
	pos = img + (i-2)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	for (i = 18; i <= 29; i++) {
		pos = img + (i-2)*psize;
		fprintf (stdout, "%3d %d\n", i, pos);
		if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
			fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
			return (ERROR);
		}
	}
	i = 30;
d107 1
a107 2

	for (i = 31; i <= 36; i++) {
a114 159

	i = 38;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 37;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 39;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 40;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 42;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 41;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 44;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 43;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 45;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 47;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 48;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 46;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 49;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 50;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 51;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 53;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 52;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}


	i = 55;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 56;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
	i = 54;
	pos = img + (i-3)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}


	i = 57;
	fprintf (stdout, "%3d\n", i);
	if ((fread (junk, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}

	i = 58;
	pos = img + (i-4)*psize;
	fprintf (stdout, "%3d %d\n", i, pos);
	if ((fread (pos, sizeof(short), psize, fd_img)) != psize) {
		fprintf (stderr, "ERROR [reorder_ana]: Reading: %s\n", img1);
		return (ERROR);
	}
@
