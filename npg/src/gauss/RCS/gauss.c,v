head	3.2;
access;
symbols;
locks; strict;
comment	@ * @;


3.2
date	2006.09.06.14.36.32;	author tom;	state Exp;
branches;
next	3.0;

3.0
date	2004.02.16.15.25.45;	author tom;	state Exp;
branches;
next	2.19;

2.19
date	2003.07.01.19.13.24;	author tom;	state Exp;
branches;
next	2.18;

2.18
date	2000.09.06.19.03.44;	author tom;	state Exp;
branches;
next	2.17;

2.17
date	2000.01.24.17.34.53;	author tom;	state Exp;
branches;
next	2.16;

2.16
date	99.12.16.17.30.54;	author tom;	state Exp;
branches;
next	2.15;

2.15
date	99.12.15.18.41.33;	author tom;	state Exp;
branches;
next	2.14;

2.14
date	97.03.10.15.47.34;	author tom;	state Exp;
branches;
next	2.13;

2.13
date	96.10.16.16.35.04;	author tom;	state Exp;
branches;
next	2.9;

2.9
date	96.08.26.18.22.57;	author tom;	state Exp;
branches;
next	2.8;

2.8
date	96.08.05.14.26.11;	author tom;	state Exp;
branches;
next	2.7;

2.7
date	96.05.24.18.02.01;	author tom;	state Exp;
branches;
next	2.6;

2.6
date	96.05.14.21.20.26;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	96.04.30.15.20.59;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	96.02.22.15.34.38;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	96.01.31.18.06.33;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.01.05.19.42.32;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.01.03.17.04.37;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	95.12.18.15.19.24;	author tom;	state Exp;
branches;
next	;


desc
@initial TOV version
@


3.2
log
@increase potential array dimensions
@
text
@/*	$Id: gauss.c,v 3.0 2004/02/16 15:25:45 tom Exp tom $
	$Log: gauss.c,v $
 * Revision 3.0  2004/02/16  15:25:45  tom
 * Feb 2004
 *
 * Revision 2.19  2003/07/01  19:13:24  tom
 * *** empty log message ***
 *
	Revision 2.18  2000/09/06 19:03:44  tom
	cp fname

 * Revision 2.17  2000/01/24  17:34:53  tom
 * new libimage
 * may have been bug in setting orientation in header after flipimg
 *
 * Revision 2.16  1999/12/16  17:30:54  tom
 * new libs
 *
 * Revision 2.15  1999/12/15  18:41:33  tom
 * lint cleanup
 *
 * Revision 2.14  1997/03/10  15:47:34  tom
 * read frame 1,2 or 3
 *
 * Revision 2.13  1996/10/16  16:35:04  tom
 * sync with Version
 * new libimage
 *
 * Revision 2.9  1996/08/26  18:22:57  tom
 * new libimage
 *
 * Revision 2.8  1996/08/05  14:26:11  tom
 * new libimage and libnrimg
 *
 * Revision 2.7  1996/05/24  18:02:01  tom
 * new libimage, libnrimg
 *
 * Revision 2.6  1996/05/14  21:20:26  tom
 * new libimage.a with altered fill_sh6
 *
 * Revision 2.5  1996/04/30  15:20:59  tom
 * *** empty log message ***
 *
 * Revision 2.4  1996/02/22  15:34:38  tom
 * revised libnrimg
 *
 * Revision 2.3  1996/01/31  18:06:33  tom
 * set mh->pr_filter = 7
 *
 * Revision 2.2  1996/01/05  19:42:32  tom
 * revised libimg.a which handles 3D version 6 images properly
 *
 * Revision 2.1  1996/01/03  17:04:37  tom
 * changes filter_code and filter_ramp_slope in output subheader
 *
 * Revision 2.0  1995/12/18  15:19:24  tom
 * *** empty log message ***
 *
 * Revision 1.1  1995/12/04  17:01:40  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			gauss.c
 *	Date:			Dec-95
 *	Author:			Tom Videen
 *	Description:	Apply 3D Gaussian filter to an image file.
 * ===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 3.0 2004/02/16 15:25:45 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <image.h>
#include <imgutil.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nr.h>
#include <nrutil.h>
#include <pettable.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	FILE           *recfp;			 /* rec file pointer */
	char           *recfile;		 /* rec filename */
	float        ***img;			 /* image array and frequency spectrum */
	float         **spec;			 /* contains portion of frequency spectrum not in */
	char           *fname1;			 /* file to process */
	char           *fname2;			 /* file to write */
	int             frm;			 /* frame number to process */
	char            runstamp[40];	 /* version, date and userid info */
	float           f0;				 /* half frequency 1/cm	 */
	float           fc;				 /* -log(2.)/f0	 */
	float           fac;			 /* filter factor */
	unsigned long   dim1, dim2, dim3; /* array dimensions */
	unsigned long   nx, ny, nz;		 /* padded array dimensions */
	float           dx, dy, dz;		 /* delta frequency for each dimension */
	float           fx, fy, fz;		 /* frequency in each dimension */
	float           f;				 /* square of radial frequency */
	float           fnorm;			 /* required to normalize inverse FFT */
	long            i, j, k;

/*	Get command line arguments	*/

	fname1 = argv[1];
	fname2 = argv[2];
	f0 = atof (argv[3]);
	recfile = argv[4];
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[5], argv[6], argv[7],
		 argv[9], argv[10], argv[11]);

/*	Open rec file */

	recfp = fopen (recfile, "a");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [gauss]: Cannot open %s\n", recfile);
		return (ERROR);
	}

/*	Get main header and subheader.
 *	Store RCS version in mh->sw_revision.
 */

	frm = 1;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file = make_imgfile (fname1);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [gauss]: Could not open %s\n", fname1);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [gauss]: Could not get MainHeader from %s\n", fname1);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		if (frm == 1) {
			indx.frm = 2;
			if (existimgfrm (file, &indx) == ERROR) {
				indx.frm = 3;
				if (existimgfrm (file, &indx) == ERROR) {
					fprintf (stderr, "ERROR [gauss]: cannot find %s frame 1, 2 or 3\n", fname1);
					return (ERROR);
				}
			}
		} else {
			fprintf (stderr, "ERROR [gauss]: cannot find %s frame %d\n", fname1, frm);
			return (ERROR);
		}
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [gauss]: Could not read file subheader in %s\n", fname1);
		return (ERROR);
	}
	mh = file->mh;
	sh = file->sh;

	(void) save_rcs (file, rcsid, runstamp);

	dim1 = (unsigned long) sh->dim1;
	dim2 = (unsigned long) sh->dim2;
	dim3 = (unsigned long) sh->dim3;
	if (dim1 <= 128)
		nx = 128;
	else if (dim1 <= 256)
		nx = 256;
	else 
		nx = dim1;
	if (dim2 <= 128)
		ny = 128;
	else if (dim2 <= 256)
		ny = 256;
	else 
		ny = dim2;
	if (dim3 <= 31)
		nz = 64;
	else if (dim3 <= 128)
		nz = 128;
	else if (dim3 <= 256)
		nz = 256;
	else 
		nz = dim3;
	dx = 1.0 / ((float) nx * (sh->sample_size_1));
	dy = 1.0 / ((float) ny * (sh->sample_size_2));
	dz = 1.0 / ((float) nz * (sh->sample_size_3));
	spec = matrix (1, nz, 1, 2 * ny);

/*	Read image */

	fprintf (stdout, "Filtering %s, frame %d\n", fname1, indx.frm);
	if ((img = readtensor (file, &indx)) == NULL)
		return (ERROR);
	recout (recfp, fname1);

/*	Pad at top and bottom before FFT */

	img = padtensor (img, dim1, dim2, dim3, nx, ny, nz);
	rlft3 (img, spec, nz, ny, nx, 1);	 /* wants dimensions z,y,x */

/*	Order of elements in freq spectrum defined on pp 526-7 of Numerical Recipes in C */

	fc = -log (2.0) / pow (f0, 2.0);
	for (i = 1; i <= nz; i++) {
		if (i <= nz / 2 + 1)
			fz = (i - 1) * dz;
		else
			fz = (nz - i + 1) * dz;
		for (j = 1; j <= ny; j++) {
			if (j <= ny / 2 + 1)
				fy = (j - 1) * dy;
			else
				fy = (ny - j + 1) * dy;
			for (k = 1; k <= nx / 2; k++) {
				fx = (k - 1) * dx;
				f = pow (fx, 2.0) + pow (fy, 2.0) + pow (fz, 2.0);
				fac = exp (f * fc);
				img[i][j][2 * k - 1] *= fac;
				img[i][j][2 * k] *= fac;
			}
			fx = (nx / 2) * dx;
			f = pow (fx, 2.0) + pow (fy, 2.0) + pow (fz, 2.0);
			fac = exp (f * fc);
			spec[i][2 * j - 1] *= fac;	/* effectively 0 */
			spec[i][2 * j] *= fac;
		}
	}

/*	Inverse FFT, trim to original size, then normalize for FFT */

	rlft3 (img, spec, nz, ny, nx, -1);
	img = trimtensor (img, nx, ny, nz, dim1, dim2, dim3);

	fnorm = 2.0 / ((float) nx * (float) ny * (float) nz);
	for (i = 1; i <= dim3; i++)
		for (j = 1; j <= dim2; j++)
			for (k = 1; k <= dim1; k++)
				img[i][j][k] = fnorm * img[i][j][k];

/*	Write image.
 *	The output frame number is set to 1.
 *	The subheader is altered to add a constant (GAUSSIAN_FILTER_CODE)
 *	to the reconstruction filter_code, and the order is inserted
 *	in another filter parameter which was assumed to be unimportant.
 */

	indx.frm = 1;
	fprintf (stdout, "Writing filtered image %s, frame %d\n", fname2, indx.frm);
	close_imgfile (file);
	(void) strcpy (file->name, fname2);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [gauss]: Could not open %s\n", fname2);
		return (ERROR);
	}
	mh->nframe = indx.frm;
	mh->pr_filter = 7;
	sh->filter_code += GAUSSIAN_FILTER_CODE;
	sh->filter_ramp_slope = f0;
	if (put_mh (file) == ERROR)
		return (ERROR);
	if (writetensor (file, &indx, img) == ERROR)
		return (ERROR);
	free_matrix (spec, 1, nz, 1, 2 * ny);
	free_f3tensor (img, 1, dim3, 1, dim2, 1, dim1);
	free_imgfile (file);
	(void) fclose (recfp);
	return (OK);
}
@


3.0
log
@Feb 2004
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.19 2003/07/01 19:13:24 tom Exp tom $
d3 3
d69 1
a69 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.19 2003/07/01 19:13:24 tom Exp tom $";
d176 1
a176 1
	else
d178 2
d182 1
a182 1
	else
d184 2
d188 1
a188 1
	else
d190 4
@


2.19
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.18 2000/09/06 19:03:44 tom Exp tom $
d3 3
d66 1
a66 1
static char     rcsid[] = "$Header: /home/tom/src/gauss/RCS/gauss.c,v 2.18 2000/09/06 19:03:44 tom Exp tom $";
d81 1
d166 1
a166 1
	save_rcs (file, rcsid, runstamp);
@


2.18
log
@cp fname
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.17 2000/01/24 17:34:53 tom Exp tom $
d3 3
d63 1
a63 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.17 2000/01/24 17:34:53 tom Exp tom $";
d104 1
a104 3
/*
 *	Get command line arguments
 */
d110 1
a110 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[5], argv[6], argv[7],
d120 2
a121 2
/*
 *	Get main header and subheader.
d151 1
a151 2
			fprintf (stderr, "ERROR [gauss]: cannot find %s frame %d\n",
				 fname1, frm);
d186 1
a186 1
	printf ("Filtering %s, frame %d\n", fname1, indx.frm);
d235 1
a235 2
/*
 *	Write image.
d243 1
a243 1
	printf ("Writing filtered image %s, frame %d\n", fname2, indx.frm);
d245 2
a246 2
	strcpy (file->name, fname2);
	strcpy (file->mode, "w");
d262 1
a262 1
	fclose (recfp);
@


2.17
log
@new libimage
may have been bug in setting orientation in header after flipimg
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.16 1999/12/16 17:30:54 tom Exp tom $
d3 4
d60 1
a60 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.16 1999/12/16 17:30:54 tom Exp tom $";
d246 1
a246 2
	free (file->name);
	file->name = fname2;
@


2.16
log
@new libs
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.15 1999/12/15 18:41:33 tom Exp tom $
d3 3
d56 1
a56 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.15 1999/12/15 18:41:33 tom Exp tom $";
@


2.15
log
@lint cleanup
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.14 1997/03/10 15:47:34 tom Exp $
d3 3
d53 1
a53 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.14 1997/03/10 15:47:34 tom Exp $";
@


2.14
log
@read frame 1,2 or 3
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.13 1996/10/16 16:35:04 tom Exp tom $
d3 3
d50 1
a50 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.13 1996/10/16 16:35:04 tom Exp tom $";
d55 1
d57 1
a73 1
	void            rlft3 ();		 /* FFT transform */
@


2.13
log
@sync with Version
new libimage
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.9 1996/08/26 18:22:57 tom Exp tom $
d3 4
d47 1
a47 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.9 1996/08/26 18:22:57 tom Exp tom $";
d129 5
a133 2
				fprintf (stderr, "ERROR [gauss]: cannot find %s frame 1 or 2\n", fname1);
				return (ERROR);
@


2.9
log
@new libimage
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.8 1996/08/05 14:26:11 tom Exp tom $
d3 3
d43 1
a43 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.8 1996/08/05 14:26:11 tom Exp tom $";
@


2.8
log
@new libimage and libnrimg
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.7 1996/05/24 18:02:01 tom Exp tom $
d3 3
d40 1
a40 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.7 1996/05/24 18:02:01 tom Exp tom $";
@


2.7
log
@new libimage, libnrimg
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.6 1996/05/14 21:20:26 tom Exp tom $
d3 3
d37 1
a37 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/gauss/RCS/gauss.c,v 2.6 1996/05/14 21:20:26 tom Exp tom $";
@


2.6
log
@new libimage.a with altered fill_sh6
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.5 1996/04/30 15:20:59 tom Exp tom $
d3 3
d34 1
a34 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/gauss/RCS/gauss.c,v 2.5 1996/04/30 15:20:59 tom Exp tom $";
@


2.5
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.4 1996/02/22 15:34:38 tom Exp tom $
d3 3
d31 1
a31 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/gauss/RCS/gauss.c,v 2.4 1996/02/22 15:34:38 tom Exp tom $";
@


2.4
log
@revised libnrimg
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.3 1996/01/31 18:06:33 tom Exp tom $
d3 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.3 1996/01/31 18:06:33 tom Exp tom $";
a31 1
#include <string.h>
d33 2
a34 1
#include <libimg.h>
a42 1

d44 2
a47 1

d52 4
a55 4
	float         **spec;			 /* contains portion of frequency spectrum not in img */
	char          **files;			 /* file(s) to process */
	int            *frm;			 /* frame number(s) to process */
	char           *outfile;		 /* output file name */
d57 2
a58 2
	float           f0;			 	/* half frequency 1/cm	 */
	float           fc;			 	/* -log(2.)/f0	 */
d60 1
a60 1
	unsigned long   dim1, dim2, dim3;	 /* array dimensions */
d64 1
a64 1
	float           f;			 	/* square of radial frequency */
a66 1
	int             plane = 1, frame1 = 1, gate = 1, data = 0, bed = 0;
d69 1
a69 1
 *	Get list of files and frames to sum from command arguments
d72 2
a73 5
	files = (char **) malloc (argc * sizeof (char *));
	frm = (int *) malloc (argc * sizeof (int));
	files[0] = argv[1];
	frm[0] = 1;
	outfile = argv[2];
d84 1
a84 1
		exit (ERROR);
d91 21
a111 9
	if ((mh = getmhdr (files[0])) == NULL)
		exit (ERROR);

	if (existimgfrm (mh, files[0], plane, frm[0], gate, data, bed) == ERROR) {
		if (frm[0] == 1) {
			frm[0] = 2;
			if (existimgfrm (mh, files[0], plane, frm[0], gate, data, bed) == ERROR) {
				fprintf (stderr, "ERROR [gauss]: Cannot find %s frame 1 or 2\n", files[0]);
				exit (ERROR);
d114 3
a116 3
			fprintf (stderr, "ERROR [gauss]: Cannot find %s frame %d\n",
				 files[0], frm[0]);
			exit (ERROR);
d119 3
a121 7
	if ((sh = getsbhdr (mh, files[0], plane, frm[0], gate, data, bed)) == NULL) {
		if (frm[0] == 1) {
			frm[0] = 2;
			if ((sh = getsbhdr (mh, files[0], plane, frm[0], gate, data, bed)) == NULL)
				exit (ERROR);
		} else
			exit (ERROR);
d123 2
a124 1
	save_rcs (mh, rcsid, runstamp);
d126 2
d150 4
a153 4
	printf ("Filtering %s, frame %d\n", files[0], frm[0]);
	if ((img = readtensor (files[0], frm[0], mh, sh)) == NULL)
		exit (ERROR);
	recout (recfp, files[0]);
d207 11
a217 2
	printf ("Writing filtered image %s, frame %d\n", outfile, frame1);
	mh->nframe = frame1;
d221 4
a224 2
	if (writetensor (outfile, frame1, mh, sh, img) != OK)
		exit (ERROR);
d226 2
a227 3
	freetensor (mh, sh, img);
	free (files);
	free (frm);
d229 1
a229 1
	exit (OK);
@


2.3
log
@set mh->pr_filter = 7
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.2 1996/01/05 19:42:32 tom Exp tom $
d3 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.2 1996/01/05 19:42:32 tom Exp tom $";
@


2.2
log
@revised libimg.a which handles 3D version 6 images properly
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.1 1996/01/03 17:04:37 tom Exp tom $
d3 3
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 2.1 1996/01/03 17:04:37 tom Exp tom $";
d196 1
@


2.1
log
@changes filter_code and filter_ramp_slope in output subheader
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 2.0 1995/12/18 15:19:24 tom Exp tom $
d3 3
d19 1
a19 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/gauss/RCS/gauss.c,v 2.0 1995/12/18 15:19:24 tom Exp tom $";
@


2.0
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: gauss.c,v 1.1 1995/12/04 17:01:40 tom Exp tom $
d3 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/gauss/RCS/gauss.c,v 1.1 1995/12/04 17:01:40 tom Exp tom $";
d26 1
d180 7
a186 1
/*	Write image */
d190 2
@
