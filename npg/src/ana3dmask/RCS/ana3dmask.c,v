head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.17.05.02;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.04.18.25.01;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: ana3dmask.c,v $
 * Revision 1.1  2000/02/04  18:25:01  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			ana3dmask.c
 *	Date:			Feb 2000
 *	Author:			Tom Videen
 *	Description:	Mask an Analyze image to the specified volume
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana3dmask/RCS/ana3dmask.c,v 1.1 2000/02/04 18:25:01 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <nrutil.h>
#include <ANALYZE.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;				 /* ANALYZE.h */
	FILE           *fd_hdr;				 /* file for ANALYZE hdr */
	FILE           *fd_img;				 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            x1, x2, y1, y2, z1, z2; /* limits of volume to spare */
	long            i, j, k, m;
	long            num;
	short          *img;

	if (argc != 11) {
		fprintf (stderr, "Usage: ana3dmask img1 hdr1 img2 hdr2 x1 x2 y1 y2 z1 z2\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	x1 = atoi (argv[5]);
	x2 = atoi (argv[6]);
	y1 = atoi (argv[7]);
	y2 = atoi (argv[8]);
	z1 = atoi (argv[9]);
	z2 = atoi (argv[10]);

/*	Read image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [ana3dmask]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [ana3dmask]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [ana3dmask]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [ana3dmask]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [ana3dmask]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1 * dim2 * dim3;
	img = (short *) calloc (num, sizeof (short));

	if (img == NULL) {
		fprintf (stderr, "ERROR [ana3dmask]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [ana3dmask]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [ana3dmask]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img1);

	m = 0;
	for (k = dim3; k > 0; k--) {
		for (j = dim2; j > 0; j--) {
			for (i = dim1; i > 0; i--) {
				if (i < x1 || i > x2 || j < y1 || j > y2 || k < z1 || k > z2)
					img[m] = 0;
				m++;
			}
		}
	}

	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [ana3dmask]: Unable to open %s\n", img2);
		return (ERROR);
	}
	if ((fwrite (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [ana3dmask]: Error writing to: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [ana3dmask]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [ana3dmask]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	free (img);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d7 1
a7 1
 *	Date:			Feb-2000
d12 1
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana3dmask/RCS/ana3dmask.c,v 1.1 1999/11/12 18:04:41 tom Exp $";
d81 1
a81 1
	fclose (fd_hdr);
d97 1
a97 1
	fclose (fd_img);
d119 1
a119 1
	fclose (fd_img);
d129 1
a129 1
	fclose (fd_hdr);
@
