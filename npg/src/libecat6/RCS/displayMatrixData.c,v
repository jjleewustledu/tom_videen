head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2003.02.27.20.16.06;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*$Id: displayMatrixData.c,v 2.0 2002/12/26 20:36:15 tom Exp tom $*/
/*$Log: displayMatrixData.c,v $
 * Revision 2.0  2002/12/26  20:36:15  tom
 * remove unused functions
 * lint and splint cleaning
 *
 * Revision 1.7  1999/12/13  22:05:40  tom
 * remove vax comment
 *
 * Revision 1.6  1999/12/13  22:02:19  tom
 * partially cleaned up with lint
 *
 * Revision 1.5  1996/09/25  16:28:32  tom
 * build in Solaris 2
 *
 * Revision 1.4  1995/10/30  16:54:44  tom
 * changed petutil/matrix.h to matrix.h
 *
 * Revision 1.3  1994/03/03  17:20:08  ty7777
 * Change from id to header.
 **/

#include <string.h>
#include <matrix.h>

#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/displayMatrixData.c,v 2.0 2002/12/26 20:36:15 tom Exp tom $";
#endif

void	displayMainHeader (h)
	Main_header    *h;
{
	printf ("Original file name : %s\n", h->original_file_name);
	printf ("Software version : %d\n", h->sw_version);
	printf ("Data type : %d\n", h->data_type);
	printf ("System type : %d\n", h->system_type);
	printf ("File type : %d\n", h->file_type);
	printf ("Node ID : %s\n", h->node_id);
	printf ("Scan start day : %d\n", h->scan_start_day);
	printf ("Scan start month : %d\n", h->scan_start_month);
	printf ("Scan start year : %d\n", h->scan_start_year);
	printf ("Scan start hour : %d\n", h->scan_start_hour);
	printf ("Scan start minute : %d\n", h->scan_start_minute);
	printf ("Scan start second : %d\n", h->scan_start_second);
	printf ("Isotope code : %s\n", h->isotope_code);
	printf ("Isotope half life %f\n", h->isotope_halflife);
	printf ("Radio-pharmaceutical %s\n", h->radiopharmaceutical);
	printf ("Gantry tilt %f\n", h->gantry_tilt);
	printf ("Gantry rotation %f\n", h->gantry_rotation);
	printf ("Bed elevation %f\n", h->bed_elevation);
	printf ("Rod source speed %d\n", h->rot_source_speed);
	printf ("Wobble speed %d\n", h->wobble_speed);
	printf ("Transmission source type : %d\n", h->transm_source_type);
	printf ("Axial FOV : %f\n", h->axial_fov);
	printf ("Transaxial FOV : %f\n", h->transaxial_fov);
	printf ("Transaxial sample mode : %d\n", h->transaxial_samp_mode);
	printf ("Coincidence sample mode : %d\n", h->coin_samp_mode);
	printf ("Axial sample mode : %d\n", h->axial_samp_mode);
	printf ("Calibration factor : %f\n", h->calibration_factor);
	printf ("Calibration Units : %d\n", h->calibration_units);
	printf ("Compression code : %d\n", h->compression_code);
	printf ("Study name : %s\n", h->study_name);
	printf ("Patient ID : %s\n", h->patient_id);
	printf ("Patient Name : %s\n", h->patient_name);
	printf ("Patient Sex : %c\n", h->patient_sex);
	printf ("Patient Age : %s\n", h->patient_age);
	printf ("Patient Height : %s\n", h->patient_height);
	printf ("Patient Weight : %s\n", h->patient_weight);
	printf ("Patient Dexterity : %c\n", h->patient_dexterity);
	printf ("Physician name : %s\n", h->physician_name);
	printf ("Operator name : %s\n", h->operator_name);
	printf ("Comment : %s\n", h->study_description);
	printf ("Acquisition type : %d\n", h->acquisition_type);
	printf ("Bed type : %d\n", h->bed_type);
	printf ("Septa type : %d\n", h->septa_type);
	printf ("Facility Name : %s\n", h->facility_name);
	printf ("Number of planes : %d\n", h->num_planes);
	printf ("Number of frames : %d\n", h->num_frames);
	printf ("Number of gates : %d\n", h->num_gates);
	printf ("Number of bed positions : %d\n", h->num_bed_pos);
	printf ("Initial bed position : %f\n", h->init_bed_position);
	printf ("Plane separation : %f\n", h->plane_separation);
	printf ("Lower scatter threshold : %d\n", h->lwr_sctr_thres);
	printf ("Lower trues threshold : %d\n", h->lwr_true_thres);
	printf ("Upper trues threshold : %d\n", h->upr_true_thres);
	printf ("Acquisition mode : %d\n", h->acquisition_mode);
	return;
}

void	displayScanHeader (h)
	Scan_subheader *h;
{
	int             i;

	printf ("Data type %d\n", h->data_type);
	printf ("Number of elements : %d\n", h->dimension_1);
	printf ("Number of views : %d\n", h->dimension_2);
	printf ("Smoothing method : %d\n", h->smoothing);
	printf ("Processing code : %d\n", h->processing_code);
	printf ("Sampling distance : %f\n", h->sample_distance);
	printf ("Isotope half life : %f\n", h->isotope_halflife);
	printf ("Frame Duration : %d (seconds)\n", h->frame_duration_sec);
	printf ("Gate Duration : %d\n", h->gate_duration);
	printf ("R wave offset : %d\n", h->r_wave_offset);
	printf ("Scale factor : %f\n", h->scale_factor);
	printf ("Scan min : %d\n", h->scan_min);
	printf ("Scan max : %d\n", h->scan_max);
	printf ("Prompts : %d\n", h->prompts);
	printf ("Delayed : %d\n", h->delayed);
	printf ("Multiples : %d\n", h->multiples);
	printf ("Net trues : %d\n", h->net_trues);
	printf ("Corrected Singles     Uncorrected Singles\n");
	for (i = 0; i < 16; i++)
		printf ("      %f          %f\n", h->cor_singles[i], h->uncor_singles[i]);
	printf ("Total Average Corrected Singles : %f\n", h->tot_avg_cor);
	printf ("Total Average Uncorrected Singles : %f\n", h->tot_avg_uncor);
	printf ("Total Coincidence rate : %d\n", h->total_coin_rate);
	printf ("Frame Start Time : %d\n", h->frame_start_time);
	printf ("Frame Duration : %d (msecs)\n", h->frame_duration);
	printf ("Loss Correction Factor : %f\n", h->loss_correction_fctr);
	printf ("Physical Plane List:\n");
	for (i = 0; i < 8; i++)
		printf ("      %d ", h->phy_planes[i]);
	printf ("\n");
	return;
}

void	displayImageHeader (h)
	Image_subheader *h;
{
	int             i;

	printf ("Data Type : %d\n", h->data_type);
	printf ("Number of dimensions : %d\n", h->num_dimensions);
	printf ("Dimensions : %d x %d\n", h->dimension_1, h->dimension_2);
	printf ("X Origin : %f\n", h->x_origin);
	printf ("Y Origin : %f\n", h->y_origin);
	printf ("Recon Scale : %f\n", h->recon_scale);
	printf ("Quant Scale : %e\n", h->quant_scale);
	printf ("Image min %d\n", h->image_min);
	printf ("Image max %d\n", h->image_max);
	printf ("Image Pixel Size : %f\n", h->pixel_size);
	printf ("Slice width : %f\n", h->slice_width);
	printf ("Frame Duration %d\n", h->frame_duration);
	printf ("Frame start time : %d\n", h->frame_start_time);
	printf ("Slice Location : %d\n", h->slice_location);
	printf ("Recon Start Hour : %d\n", h->recon_start_hour);
	printf ("Recon Start Minute : %d\n", h->recon_start_minute);
	printf ("Recon Start Second : %d\n", h->recon_start_sec);
	printf ("Recon Duration : %d\n", h->recon_duration);
	printf ("Filter Code : %d\n", h->filter_code);
	printf ("Scan matrix number : %d\n", h->scan_matrix_num);
	printf ("Norm matrix number : %d\n", h->norm_matrix_num);
	printf ("Attenuation matrix number : %d\n", h->atten_cor_matrix_num);
	printf ("Image Rotation %f\n", h->image_rotation);
	printf ("Plane efficiency correction factor %f\n", h->plane_eff_corr_fctr);
	printf ("Decay Correction Factor : %f\n", h->decay_corr_fctr);
	printf ("Loss Correction Factor : %f\n", h->loss_corr_fctr);
	printf ("Processing Code : %d\n", h->processing_code);
	printf ("Quantification Units : %d\n", h->quant_units);
	printf ("Recon Start Day : %d\n", h->recon_start_day);
	printf ("Recon Start Month : %d\n", h->recon_start_month);
	printf ("Recon Start Year : %d\n", h->recon_start_year);
	printf ("ECAT calibration factor : %f\n", h->ecat_calibration_fctr);
	printf ("Well Counter calibration factor : %f\n", h->well_counter_cal_fctr);
	for (i = 0; i < 6; i++)
		printf ("Filter Parameter %d : %f\n", i + 1, h->filter_params[i]);
	printf ("Comment : %s\n", h->annotation);
	return;
}

void	displayAttnHeader (h)
	Attn_subheader *h;
{
	printf ("Data type : %d\n", h->data_type);
	printf ("Attenuation type : %d\n", h->attenuation_type);
	printf ("Number of elements : %d\n", h->dimension_1);
	printf ("Number of views : %d\n", h->dimension_2);
	printf ("Scale Factor : %f\n", h->scale_factor);
	printf ("X origin : %f\n", h->x_origin);
	printf ("Y origin : %f\n", h->y_origin);
	printf ("X radius : %f\n", h->x_radius);
	printf ("Y radius : %f\n", h->y_radius);
	printf ("Tilt angle : %f\n", h->tilt_angle);
	printf ("Attenuation coefficient %f\n", h->attenuation_coeff);
	printf ("Sample distance %f\n", h->sample_distance);
	return;
}

void	displayNormHeader (h)
	Norm_subheader *h;
{
	printf ("Data type : %d\n", h->data_type);
	printf ("Number of elements : %d\n", h->dimension_1);
	printf ("Number of views : %d\n", h->dimension_2);
	printf ("Scale Factor : %f\n", h->scale_factor);
	printf ("Norm hour : %d\n", h->norm_hour);
	printf ("Norm minute : %d\n", h->norm_minute);
	printf ("Norm second : %d\n", h->norm_second);
	printf ("Norm day : %d\n", h->norm_day);
	printf ("Norm month : %d\n", h->norm_month);
	printf ("Norm year : %d\n", h->norm_year);
	printf ("FOV source width : %f\n", h->fov_source_width);
	printf ("ECF : %f\n", h->ecat_calib_factor);
	return;
}

void	displayData (data, nViews, nElems, limitFlag, lowLimit, highLimit)
	short *data;
	int             nViews, nElems, limitFlag, lowLimit, highLimit;
{
	int             i, j, dataMax, dataMin, maxV, maxE, minV, minE;

	for (maxV = maxE = minV = minE = 0, dataMax = -32767, dataMin = 32768, i = 0; i < nViews; i++) {
		if (limitFlag == 0)
			printf ("\n\nData dump for view %3d\n", i);
		for (j = 0; j < nElems; j++, data++) {
			if (limitFlag) {
				if (*data >= lowLimit && *data <= highLimit)
					printf ("View: %5d Elem: %3d Value: %5d \n", i - (nViews / 2 + 1), j, *data);
			} else {
				if (j % 16 == 0 && j > 0)
					printf ("\n");
				printf ("%5d ", *data);
			}
			if (dataMax < *data) {
				dataMax = *data;
				maxV = i;
				maxE = j;
			}
			if (dataMin > *data) {
				dataMin = *data;
				minV = i;
				minE = j;
			}
		}
	}
	printf ("\n\nMaximum value of %5d occurred in view %3d, element %3d\n", dataMax, maxV - (nViews / 2 + 1), maxE);
	printf ("Minimum value of %5d occurred in view %3d, element %3d\n", dataMin, minV - (nViews / 2 + 1), minE);
	return;
}

void	displayFloatData (data, nViews, nElems, limitFlag, lowLimit, highLimit)
	float          *data, lowLimit, highLimit;
	int             nViews, nElems, limitFlag;
{
	int             i, j, maxV, maxE, minV, minE;
	float           dataMax, dataMin;

	for (maxV = maxE = minV = minE = 0, dataMax = -32767., dataMin = 32768., i = 0; i < nViews; i++) {
		if (limitFlag == 0)
			printf ("\n\nData dump for view %3d\n", i);
		for (j = 0; j < nElems; j++, data++) {
			if (limitFlag) {
				if (*data >= lowLimit && *data <= highLimit)
					printf ("View: %5d Elem: %3d Value: %4.2f \n", i - (nViews / 2 + 1), j, *data);
			} else {
				if (j % 16 == 0 && j > 0)
					printf ("\n");
				printf ("%4.2f ", *data);
			}
			if (dataMax < *data) {
				dataMax = *data;
				maxV = i;
				maxE = j;
			}
			if (dataMin > *data) {
				dataMin = *data;
				minV = i;
				minE = j;
			}
		}
	}
	printf ("\n\nMaximum value of %4.2f occurred in view %3d, element %3d\n", dataMax, maxV - (nViews / 2 + 1), maxE);
	printf ("Minimum value of %4.2f occurred in view %3d, element %3d\n", dataMin, minV - (nViews / 2 + 1), minE);
	return;
}

void	dumpHexData (buff, size)
	unsigned short *buff;
	int             size;
{
	int             i;

	for (i = 0; i < size; i++) {
		if (i % 16 == 0 && i > 0)
			printf ("\n");
		printf ("%04x ", *buff++);
	}
	printf ("\n");
	return;
}

void	convertScanHeaderFromVax (sbuf, h)
	short       *sbuf;
	Scan_subheader *h;
{
	char		*buf;
	int			*lbuf;
	float		*fbuf;
	int          i;

	buf = (char *) sbuf;
	lbuf = (int *) sbuf;
	fbuf = (float *) sbuf;

	swap_byte (buf, MatBLKSIZE);
	h->data_type = sbuf[63];
	h->dimension_1 = sbuf[66];
	h->dimension_2 = sbuf[67];
	h->smoothing = sbuf[68];
	h->processing_code = sbuf[69];
	h->sample_distance = (float) sbuf[73];
	h->isotope_halflife = (float) sbuf[83];
	h->frame_duration_sec = sbuf[85];
	h->gate_duration = lbuf[86/2];
	h->r_wave_offset = lbuf[88/2];
	h->scale_factor = (float) sbuf[91];
	h->scan_min = sbuf[96];
	h->scan_max = sbuf[97];
	h->prompts = lbuf[98/2];
	h->delayed = lbuf[100/2];
	h->multiples = lbuf[102/2];
	h->net_trues = lbuf[104/2];
	for (i = 0; i < 16; i++) {
		h->cor_singles[i] = fbuf[158/2 + i];
		h->uncor_singles[i] = fbuf[190/2 + i];
	}
	h->tot_avg_cor = fbuf[222/2];
	h->tot_avg_uncor = fbuf[224/2];
	h->total_coin_rate = lbuf[226/2];
	h->frame_start_time = lbuf[228/2];
	h->frame_duration = lbuf[230/2];
	h->loss_correction_fctr = fbuf[232/2];
	for (i = 0; i < 8; i++)
		h->phy_planes[i] = lbuf[234/2 + i];
	return;
}

void	convertImageHeaderFromVax (sbuf, h)
	short *sbuf;
	Image_subheader *h;
{
	char		*buf;
	int			*lbuf;
	float		*fbuf;
	int          i;

	buf = (char *) sbuf;
	lbuf = (int *) sbuf;
	fbuf = (float *) sbuf;

	swap_byte (buf, MatBLKSIZE);
	h->data_type = sbuf[63];
	h->num_dimensions = sbuf[64];
	h->dimension_1 = sbuf[66];
	h->dimension_2 = sbuf[67];
	h->x_origin = fbuf[80/2];
	h->y_origin = fbuf[82/2];
	h->recon_scale = fbuf[84/2];
	h->quant_scale = fbuf[86/2];
	h->image_min = sbuf[88];
	h->image_max = sbuf[89];
	h->pixel_size = fbuf[92/2];
	h->slice_width = fbuf[94/2];
	h->frame_duration = lbuf[96/2];
	h->frame_start_time = lbuf[98/2];
	h->slice_location = sbuf[100];
	h->recon_start_hour = sbuf[101];
	h->recon_start_minute = sbuf[102];
	h->recon_start_sec = sbuf[103];
	h->recon_duration = lbuf[104/2];
	h->filter_code = sbuf[118];
	h->scan_matrix_num = (long) sbuf[119];
	h->norm_matrix_num = (long) sbuf[121];
	h->atten_cor_matrix_num = (long) sbuf[123];
	h->image_rotation = fbuf[148/2];
	h->plane_eff_corr_fctr = fbuf[150/2];
	h->decay_corr_fctr = fbuf[152/2];
	h->loss_corr_fctr = fbuf[154/2];
	h->processing_code = sbuf[188];
	h->quant_units = sbuf[190];
	h->recon_start_day = sbuf[191];
	h->recon_start_month = sbuf[192];
	h->recon_start_year = sbuf[193];
	h->ecat_calibration_fctr = fbuf[194/2];
	h->well_counter_cal_fctr = fbuf[196/2];
	for (i = 0; i < 6; i++)
		h->filter_params[i] = fbuf[198/2 + i];
	return;
}

void	convertAttnHeaderFromVax (sbuf, h)
	short *sbuf;
	Attn_subheader *h;
{
	char	*buf;

	buf = (char *) sbuf;

	swap_byte (buf, MatBLKSIZE);
	h->data_type = sbuf[63];
	h->attenuation_type = sbuf[64];
	h->dimension_1 = sbuf[66];
	h->dimension_2 = sbuf[67];
	h->scale_factor = get_vax_float (sbuf, 91);
	h->x_origin = get_vax_float (sbuf, 93);
	h->y_origin = get_vax_float (sbuf, 95);
	h->x_radius = get_vax_float (sbuf, 97);
	h->y_radius = get_vax_float (sbuf, 99);
	h->tilt_angle = get_vax_float (sbuf, 101);
	h->attenuation_coeff = get_vax_float (sbuf, 103);
	h->sample_distance = get_vax_float (sbuf, 105);
	return;
}

void	convertNormHeaderFromVax (sbuf, h)
	short *sbuf;
	Norm_subheader *h;
{
	char	*buf;

	buf = (char *) sbuf;

	swap_byte (buf, MatBLKSIZE);
	h->data_type = sbuf[63];
	h->dimension_1 = sbuf[66];
	h->dimension_2 = sbuf[67];
	h->scale_factor = get_vax_float (sbuf, 91);
	h->norm_hour = sbuf[93];
	h->norm_minute = sbuf[94];
	h->norm_second = sbuf[95];
	h->norm_day = sbuf[96];
	h->norm_month = sbuf[97];
	h->norm_year = sbuf[98];
	h->fov_source_width = get_vax_float (sbuf, 99);
	h->ecat_calib_factor = get_vax_float (sbuf, 101);
	return;
}

void	convertScanHeaderToVax (sbuf, h)
	short *sbuf;
	Scan_subheader *h;
{
	char	*buf;
	int             i;

	buf = (char *) sbuf;

	for (i = 0; i < 256; i++)
		sbuf[i] = 0;
	sbuf[0] = 256;
	sbuf[1] = 1;
	sbuf[2] = 22;
	sbuf[3] = -1;
	sbuf[4] = 25;
	sbuf[5] = 62;
	sbuf[6] = 79;
	sbuf[7] = 106;
	sbuf[24] = 37;
	sbuf[25] = -1;
	sbuf[61] = 17;
	sbuf[62] = -1;
	sbuf[78] = 27;
	sbuf[79] = -1;
	sbuf[105] = 52;
	sbuf[106] = -1;
	sbuf[63] = h->data_type;
	sbuf[66] = h->dimension_1;		 /* x dimension */
	sbuf[67] = h->dimension_2;		 /* y_dimension */
	sbuf[68] = h->smoothing;
	sbuf[69] = h->processing_code;
	sunftovaxf (h->sample_distance, &sbuf[73]);
	sunftovaxf (h->isotope_halflife, &sbuf[83]);
	sbuf[85] = h->frame_duration_sec;
	sunltovaxl (h->gate_duration, &sbuf[86]);
	sunltovaxl (h->r_wave_offset, &sbuf[88]);
	sunftovaxf (h->scale_factor, &sbuf[91]);
	sbuf[96] = h->scan_min;
	sbuf[97] = h->scan_max;
	sunltovaxl (h->prompts, &sbuf[98]);
	sunltovaxl (h->delayed, &sbuf[100]);
	sunltovaxl (h->multiples, &sbuf[102]);
	sunltovaxl (h->net_trues, &sbuf[104]);
	for (i = 0; i < 16; i++) {
		sunftovaxf (h->cor_singles[i], &sbuf[158 + 2 * i]);
		sunftovaxf (h->uncor_singles[i], &sbuf[190 + 2 * i]);
	}
	sunftovaxf (h->tot_avg_cor, &sbuf[222]);
	sunftovaxf (h->tot_avg_uncor, &sbuf[224]);
	sunltovaxl (h->total_coin_rate, &sbuf[226]);	/* total coin rate */
	sunltovaxl (h->frame_start_time, &sbuf[228]);
	sunltovaxl (h->frame_duration, &sbuf[230]);
	sunftovaxf (h->loss_correction_fctr, &sbuf[232]);
	for (i = 0; i < 8; i++)
		sunltovaxl (h->phy_planes[i], &sbuf[234 + 2 * i]);
	swap_byte (buf, MatBLKSIZE);
	return;
}

void	convertImageHeaderToVax (sbuf, h)
	short *sbuf;
	Image_subheader *h;
{
	char           *buf;
	int             i;

	buf = (char *) sbuf;

	for (i = 0; i < 256; i++)
		sbuf[i] = 0;
	sbuf[63] = h->data_type;
	sbuf[64] = h->num_dimensions;
	sbuf[66] = h->dimension_1;
	sbuf[67] = h->dimension_2;
	sunftovaxf (h->x_origin, &sbuf[80]);
	sunftovaxf (h->y_origin, &sbuf[82]);
	sunftovaxf (h->recon_scale, &sbuf[84]);
	sunftovaxf (h->quant_scale, &sbuf[86]);
	sbuf[88] = h->image_min;
	sbuf[89] = h->image_max;
	sunftovaxf (h->pixel_size, &sbuf[92]);
	sunftovaxf (h->slice_width, &sbuf[94]);
	sunltovaxl (h->frame_duration, &sbuf[96]);
	sunltovaxl (h->frame_start_time, &sbuf[98]);
	sbuf[100] = h->slice_location;
	sbuf[101] = h->recon_start_hour;
	sbuf[102] = h->recon_start_minute;
	sbuf[103] = h->recon_start_sec;
	sunltovaxl (h->recon_duration, &sbuf[104]);
	sbuf[118] = h->filter_code;
	sunltovaxl (h->scan_matrix_num, &sbuf[119]);
	sunltovaxl (h->norm_matrix_num, &sbuf[121]);
	sunltovaxl (h->atten_cor_matrix_num, &sbuf[123]);
	sunftovaxf (h->image_rotation, &sbuf[148]);
	sunftovaxf (h->plane_eff_corr_fctr, &sbuf[150]);
	sunftovaxf (h->decay_corr_fctr, &sbuf[152]);
	sunftovaxf (h->loss_corr_fctr, &sbuf[154]);
	sbuf[188] = h->processing_code;
	sbuf[190] = h->quant_units;
	sbuf[191] = h->recon_start_day;
	sbuf[192] = h->recon_start_month;
	sbuf[193] = h->recon_start_year;
	sunftovaxf (h->ecat_calibration_fctr, &sbuf[194]);
	sunftovaxf (h->well_counter_cal_fctr, &sbuf[196]);
	for (i = 0; i < 6; i++)
		sunftovaxf (h->filter_params[i], &sbuf[198 + 2 * i]);
	swap_byte (buf, MatBLKSIZE);
	(void) strncpy (buf + 420, h->annotation, 40);
	return;
}

void	convertAttnHeaderToVax (sbuf, h)
	short *sbuf;
	Attn_subheader *h;
{
	char	*buf;
	int             i;

	buf = (char *) sbuf;

	for (i = 0; i < 256; i++)
		sbuf[i] = 0;
	sbuf[0] = 256;
	sbuf[1] = 1;
	sbuf[2] = 22;
	sbuf[3] = -1;
	sbuf[4] = 25;
	sbuf[5] = 62;
	sbuf[6] = 79;
	sbuf[7] = 106;
	sbuf[24] = 37;
	sbuf[25] = -1;
	sbuf[61] = 17;
	sbuf[62] = -1;
	sbuf[78] = 27;
	sbuf[79] = -1;
	sbuf[105] = 52;
	sbuf[106] = -1;
	sbuf[63] = h->data_type;
	sbuf[64] = h->attenuation_type;
	sbuf[66] = h->dimension_1;
	sbuf[67] = h->dimension_2;
	sunftovaxf (h->scale_factor, &sbuf[91]);
	sunftovaxf (h->x_origin, &sbuf[93]);
	sunftovaxf (h->y_origin, &sbuf[95]);
	sunftovaxf (h->x_radius, &sbuf[97]);
	sunftovaxf (h->y_radius, &sbuf[99]);
	sunftovaxf (h->tilt_angle, &sbuf[101]);
	sunftovaxf (h->attenuation_coeff, &sbuf[103]);
	sunftovaxf (h->sample_distance, &sbuf[105]);
	swap_byte (buf, 512);
	return;
}

void	convertNormHeaderToVax (sbuf, h)
	short *sbuf;
	Norm_subheader *h;
{
	char	*buf;
	int             i;

	buf = (char *) sbuf;

	for (i = 0; i < 256; i++)
		sbuf[i] = 0;
	sbuf[0] = 256;
	sbuf[1] = 1;
	sbuf[2] = 22;
	sbuf[3] = -1;
	sbuf[4] = 25;
	sbuf[5] = 62;
	sbuf[6] = 79;
	sbuf[7] = 106;
	sbuf[24] = 37;
	sbuf[25] = -1;
	sbuf[61] = 17;
	sbuf[62] = -1;
	sbuf[78] = 27;
	sbuf[79] = -1;
	sbuf[105] = 52;
	sbuf[106] = -1;
	sbuf[63] = h->data_type;
	sbuf[66] = h->dimension_1;
	sbuf[67] = h->dimension_2;
	sunftovaxf (h->scale_factor, &sbuf[91]);
	sbuf[93] = h->norm_hour;
	sbuf[94] = h->norm_minute;
	sbuf[95] = h->norm_second;
	sbuf[96] = h->norm_day;
	sbuf[97] = h->norm_month;
	sbuf[98] = h->norm_year;
	sunftovaxf (h->fov_source_width, &sbuf[99]);
	sunftovaxf (h->ecat_calib_factor, &sbuf[101]);
	swap_byte (buf, 512);
	return;
}
@
