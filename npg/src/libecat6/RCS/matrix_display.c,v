head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	2004.04.14.16.34.55;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2004.02.12.21.59.33;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.01.02.19.48.38;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.21.13.42.31;	author tom;	state Exp;
branches;
next	;


desc
@21Aug2003
@


2.2
log
@no change
@
text
@/* $Id: matrix_display.c,v 2.1 2004/02/12 21:59:33 tom Exp tom $ */
/* $Log */

#include <string.h>
#include <cti6.h>

/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libecat6/RCS/matrix_display.c,v 2.1 2004/02/12 21:59:33 tom Exp tom $";
#endif

void            displayMainHeader (h)
	Main_header    *h;
{
	printf ("Original file name : %s\n", h->original_file_name);
	printf ("Software version : %d\n", h->sw_version);
	printf ("Data type : %d\n", h->data_type);
	printf ("System type : %d\n", h->system_type);
	printf ("File type : %d\n", h->file_type);
	printf ("Node ID : %s\n", h->node_id);
	printf ("Scan start day : %d\n", h->scan_start_day);
	printf ("Scan start month : %d\n", h->scan_start_month);
	printf ("Scan start year : %d\n", h->scan_start_year);
	printf ("Scan start hour : %d\n", h->scan_start_hour);
	printf ("Scan start minute : %d\n", h->scan_start_minute);
	printf ("Scan start second : %d\n", h->scan_start_second);
	printf ("Isotope code : %s\n", h->isotope_code);
	printf ("Isotope half life %f\n", h->isotope_halflife);
	printf ("Radio-pharmaceutical %s\n", h->radiopharmaceutical);
	printf ("Gantry tilt %f\n", h->gantry_tilt);
	printf ("Gantry rotation %f\n", h->gantry_rotation);
	printf ("Bed elevation %f\n", h->bed_elevation);
	printf ("Rod source speed %d\n", h->rot_source_speed);
	printf ("Wobble speed %d\n", h->wobble_speed);
	printf ("Transmission source type : %d\n", h->transm_source_type);
	printf ("Axial FOV : %f\n", h->axial_fov);
	printf ("Transaxial FOV : %f\n", h->transaxial_fov);
	printf ("Transaxial sample mode : %d\n", h->transaxial_samp_mode);
	printf ("Coincidence sample mode : %d\n", h->coin_samp_mode);
	printf ("Axial sample mode : %d\n", h->axial_samp_mode);
	printf ("Calibration factor : %f\n", h->calibration_factor);
	printf ("Calibration Units : %d\n", h->calibration_units);
	printf ("Compression code : %d\n", h->compression_code);
	printf ("Study name : %s\n", h->study_name);
	printf ("Patient ID : %s\n", h->patient_id);
	printf ("Patient Name : %s\n", h->patient_name);
	printf ("Patient Sex : %c\n", h->patient_sex);
	printf ("Patient Age : %s\n", h->patient_age);
	printf ("Patient Height : %s\n", h->patient_height);
	printf ("Patient Weight : %s\n", h->patient_weight);
	printf ("Patient Dexterity : %c\n", h->patient_dexterity);
	printf ("Physician name : %s\n", h->physician_name);
	printf ("Operator name : %s\n", h->operator_name);
	printf ("Comment : %s\n", h->study_description);
	printf ("Acquisition type : %d\n", h->acquisition_type);
	printf ("Bed type : %d\n", h->bed_type);
	printf ("Septa type : %d\n", h->septa_type);
	printf ("Facility Name : %s\n", h->facility_name);
	printf ("Number of planes : %d\n", h->num_planes);
	printf ("Number of frames : %d\n", h->num_frames);
	printf ("Number of gates : %d\n", h->num_gates);
	printf ("Number of bed positions : %d\n", h->num_bed_pos);
	printf ("Initial bed position : %f\n", h->init_bed_position);
	printf ("Plane separation : %f\n", h->plane_separation);
	printf ("Lower scatter threshold : %d\n", h->lwr_sctr_thres);
	printf ("Lower trues threshold : %d\n", h->lwr_true_thres);
	printf ("Upper trues threshold : %d\n", h->upr_true_thres);
	printf ("Acquisition mode : %d\n", h->acquisition_mode);
	return;
}

void            displayScanHeader (h)
	Scan_subheader *h;
{
	int             i;

	printf ("Data type %d\n", h->data_type);
	printf ("Number of elements : %d\n", h->dimension_1);
	printf ("Number of views : %d\n", h->dimension_2);
	printf ("Smoothing method : %d\n", h->smoothing);
	printf ("Processing code : %d\n", h->processing_code);
	printf ("Sampling distance : %f\n", h->sample_distance);
	printf ("Isotope half life : %f\n", h->isotope_halflife);
	printf ("Frame Duration : %d (seconds)\n", h->frame_duration_sec);
	printf ("Gate Duration : %d\n", h->gate_duration);
	printf ("R wave offset : %d\n", h->r_wave_offset);
	printf ("Scale factor : %f\n", h->scale_factor);
	printf ("Scan min : %d\n", h->scan_min);
	printf ("Scan max : %d\n", h->scan_max);
	printf ("Prompts : %d\n", h->prompts);
	printf ("Delayed : %d\n", h->delayed);
	printf ("Multiples : %d\n", h->multiples);
	printf ("Net trues : %d\n", h->net_trues);
	printf ("Corrected Singles     Uncorrected Singles\n");
	for (i = 0; i < 16; i++)
		printf ("      %f          %f\n", h->cor_singles[i], h->uncor_singles[i]);
	printf ("Total Average Corrected Singles : %f\n", h->tot_avg_cor);
	printf ("Total Average Uncorrected Singles : %f\n", h->tot_avg_uncor);
	printf ("Total Coincidence rate : %d\n", h->total_coin_rate);
	printf ("Frame Start Time : %d\n", h->frame_start_time);
	printf ("Frame Duration : %d (msecs)\n", h->frame_duration);
	printf ("Loss Correction Factor : %f\n", h->loss_correction_fctr);
	printf ("Physical Plane List:\n");
	for (i = 0; i < 8; i++)
		printf ("      %d ", h->phy_planes[i]);
	printf ("\n");
	return;
}

void            displayImageHeader (h)
	Image_subheader *h;
{
	int             i;

	printf ("Data Type : %d\n", h->data_type);
	printf ("Number of dimensions : %d\n", h->num_dimensions);
	printf ("Dimensions : %d x %d\n", h->dimension_1, h->dimension_2);
	printf ("X Origin : %f\n", h->x_origin);
	printf ("Y Origin : %f\n", h->y_origin);
	printf ("Recon Scale : %f\n", h->recon_scale);
	printf ("Quant Scale : %e\n", h->quant_scale);
	printf ("Image min %d\n", h->image_min);
	printf ("Image max %d\n", h->image_max);
	printf ("Image Pixel Size : %f\n", h->pixel_size);
	printf ("Slice width : %f\n", h->slice_width);
	printf ("Frame Duration %d\n", h->frame_duration);
	printf ("Frame start time : %d\n", h->frame_start_time);
	printf ("Slice Location : %d\n", h->slice_location);
	printf ("Recon Start Hour : %d\n", h->recon_start_hour);
	printf ("Recon Start Minute : %d\n", h->recon_start_minute);
	printf ("Recon Start Second : %d\n", h->recon_start_sec);
	printf ("Recon Duration : %d\n", h->recon_duration);
	printf ("Filter Code : %d\n", h->filter_code);
	printf ("Scan matrix number : %d\n", h->scan_matrix_num);
	printf ("Norm matrix number : %d\n", h->norm_matrix_num);
	printf ("Attenuation matrix number : %d\n", h->atten_cor_matrix_num);
	printf ("Image Rotation %f\n", h->image_rotation);
	printf ("Plane efficiency correction factor %f\n", h->plane_eff_corr_fctr);
	printf ("Decay Correction Factor : %f\n", h->decay_corr_fctr);
	printf ("Loss Correction Factor : %f\n", h->loss_corr_fctr);
	printf ("Processing Code : %d\n", h->processing_code);
	printf ("Quantification Units : %d\n", h->quant_units);
	printf ("Recon Start Day : %d\n", h->recon_start_day);
	printf ("Recon Start Month : %d\n", h->recon_start_month);
	printf ("Recon Start Year : %d\n", h->recon_start_year);
	printf ("ECAT calibration factor : %f\n", h->ecat_calibration_fctr);
	printf ("Well Counter calibration factor : %f\n", h->well_counter_cal_fctr);
	for (i = 0; i < 6; i++)
		printf ("Filter Parameter %d : %f\n", i + 1, h->filter_params[i]);
	printf ("Comment : %s\n", h->annotation);
	return;
}

void            displayAttnHeader (h)
	Attn_subheader *h;
{
	printf ("Data type : %d\n", h->data_type);
	printf ("Attenuation type : %d\n", h->attenuation_type);
	printf ("Number of elements : %d\n", h->dimension_1);
	printf ("Number of views : %d\n", h->dimension_2);
	printf ("Scale Factor : %f\n", h->scale_factor);
	printf ("X origin : %f\n", h->x_origin);
	printf ("Y origin : %f\n", h->y_origin);
	printf ("X radius : %f\n", h->x_radius);
	printf ("Y radius : %f\n", h->y_radius);
	printf ("Tilt angle : %f\n", h->tilt_angle);
	printf ("Attenuation coefficient %f\n", h->attenuation_coeff);
	printf ("Sample distance %f\n", h->sample_distance);
	return;
}

void            displayNormHeader (h)
	Norm_subheader *h;
{
	printf ("Data type : %d\n", h->data_type);
	printf ("Number of elements : %d\n", h->dimension_1);
	printf ("Number of views : %d\n", h->dimension_2);
	printf ("Scale Factor : %f\n", h->scale_factor);
	printf ("Norm hour : %d\n", h->norm_hour);
	printf ("Norm minute : %d\n", h->norm_minute);
	printf ("Norm second : %d\n", h->norm_second);
	printf ("Norm day : %d\n", h->norm_day);
	printf ("Norm month : %d\n", h->norm_month);
	printf ("Norm year : %d\n", h->norm_year);
	printf ("FOV source width : %f\n", h->fov_source_width);
	printf ("ECF : %f\n", h->ecat_calib_factor);
	return;
}

void            displayData (data, nViews, nElems, limitFlag, lowLimit, highLimit)
	short          *data;
	int             nViews, nElems, limitFlag, lowLimit, highLimit;
{
	int             i, j, dataMax, dataMin, maxV, maxE, minV, minE;

	for (maxV = maxE = minV = minE = 0, dataMax = -32767, dataMin = 32768, i = 0; i < nViews; i++) {
		if (limitFlag == 0)
			printf ("\n\nData dump for view %3d\n", i);
		for (j = 0; j < nElems; j++, data++) {
			if (limitFlag) {
				if (*data >= lowLimit && *data <= highLimit)
					printf ("View: %5d Elem: %3d Value: %5d \n", i - (nViews / 2 + 1), j, *data);
			} else {
				if (j % 16 == 0 && j > 0)
					printf ("\n");
				printf ("%5d ", *data);
			}
			if (dataMax < *data) {
				dataMax = *data;
				maxV = i;
				maxE = j;
			}
			if (dataMin > *data) {
				dataMin = *data;
				minV = i;
				minE = j;
			}
		}
	}
	printf ("\n\nMaximum value of %5d occurred in view %3d, element %3d\n", dataMax, maxV - (nViews / 2 + 1), maxE);
	printf ("Minimum value of %5d occurred in view %3d, element %3d\n", dataMin, minV - (nViews / 2 + 1), minE);
	return;
}

void            displayFloatData (data, nViews, nElems, limitFlag, lowLimit, highLimit)
	float          *data, lowLimit, highLimit;
	int             nViews, nElems, limitFlag;
{
	int             i, j, maxV, maxE, minV, minE;
	float           dataMax, dataMin;

	for (maxV = maxE = minV = minE = 0, dataMax = -32767., dataMin = 32768., i = 0; i < nViews; i++) {
		if (limitFlag == 0)
			printf ("\n\nData dump for view %3d\n", i);
		for (j = 0; j < nElems; j++, data++) {
			if (limitFlag) {
				if (*data >= lowLimit && *data <= highLimit)
					printf ("View: %5d Elem: %3d Value: %4.2f \n", i - (nViews / 2 + 1), j, *data);
			} else {
				if (j % 16 == 0 && j > 0)
					printf ("\n");
				printf ("%4.2f ", *data);
			}
			if (dataMax < *data) {
				dataMax = *data;
				maxV = i;
				maxE = j;
			}
			if (dataMin > *data) {
				dataMin = *data;
				minV = i;
				minE = j;
			}
		}
	}
	printf ("\n\nMaximum value of %4.2f occurred in view %3d, element %3d\n", dataMax, maxV - (nViews / 2 + 1), maxE);
	printf ("Minimum value of %4.2f occurred in view %3d, element %3d\n", dataMin, minV - (nViews / 2 + 1), minE);
	return;
}

void            dumpHexData (buff, size)
	unsigned short *buff;
	int             size;
{
	int             i;

	for (i = 0; i < size; i++) {
		if (i % 16 == 0 && i > 0)
			printf ("\n");
		printf ("%04x ", *buff++);
	}
	printf ("\n");
	return;
}
@


2.1
log
@Feb 2004
@
text
@d1 1
a1 1
/* $Id: matrix_display.c,v 2.0 2004/01/02 19:48:38 tom Exp tom $ */
d9 1
a9 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libecat6/RCS/matrix_display.c,v 2.0 2004/01/02 19:48:38 tom Exp tom $";
@


2.0
log
@lint/splint
@
text
@d1 1
a1 1
/* $Id: matrix_display.c,v 1.1 2003/08/21 13:42:31 tom Exp tom $ */
d5 1
a5 1
#include <matrix.h>
d9 1
a9 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libecat6/RCS/matrix_display.c,v 1.1 2003/08/21 13:42:31 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Id$ */
d7 1
d9 1
a9 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/displayMatrixData.c,v 2.0 2002/12/26 20:36:15 tom Exp tom $";
@
