head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	2004.04.14.16.34.55;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2004.02.12.21.59.33;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.01.02.19.48.38;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.21.13.42.31;	author tom;	state Exp;
branches;
next	;


desc
@21Aug2003
@


2.2
log
@no change
@
text
@/*$Id: matrix_extra.c,v 2.1 2004/02/12 21:59:33 tom Exp tom $
 *$Log: matrix_extra.c,v $
 * Revision 2.1  2004/02/12  21:59:33  tom
 * Feb 2004
 *
 * Revision 2.0  2004/01/02  19:48:38  tom
 * lint/splint
 *
 * Revision 1.1  2003/08/21  13:42:31  tom
 * Initial revision
 *
 * Revision 2.0  2002/12/26  20:35:56  tom
 * remove unused functions
 * lint and splint cleaning
 *
 *Revision 1.10  2002/12/17 22:15:13  tom
 *fix gcc warnings
 *
 *Revision 1.9  1999/12/13 22:02:19  tom
 *partially cleaned up with lint
 *
 * Revision 1.8  1996/09/25  16:28:32  tom
 * build in Solaris 2
 *
 * Revision 1.7  1995/11/30  19:42:15  tom
 * TOV mod
 *
 * Revision 1.6  1995/10/30  16:54:44  tom
 * changed petutil/matrix.h to matrix.h
 *
 * Revision 1.5  1994/09/23  19:20:13  ty7777
 * Modified by Tom Yang to fix memory leaks.
 *
 * Revision 1.4  1994/03/03  17:32:07  ty7777
 * Change from id to header.
 *
 * Revision 1.3  1993/09/13  18:57:05  ty7777
 * Introduce acsid and change matrix.h to petutil/matrix.h.
 *
 * Revision 1.2  1993/06/17  17:30:45  ty7777
 * Same as the last one.
 *
 * Revision 1.1  1993/03/04  19:47:59  ty7777
 * Initial revision
 **/

/* @@(#)matrix_extra.c	2.13 6/9/92  */
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <cti6.h>
#include <endian.h>
#include <sys/types.h>
#include <sys/stat.h>

/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libecat6/RCS/matrix_extra.c,v 2.1 2004/02/12 21:59:33 tom Exp tom $";
#endif

int             file_access_code (mode)
	char           *mode;
{
	int             access_code;

	/* CONSTCOND */
	if (__BYTE_ORDER == __BIG_ENDIAN) {
		if (strcmp (mode, "r") == 0)
			access_code = SUN_READ;
		else if (strcmp (mode, "w") == 0)
			access_code = SUN_WRITE;
		else if (strcmp (mode, "r+") == 0)
			access_code = SUN_WRITE;
		else
			access_code = 0;
	} else {
		if (strcmp (mode, "r") == 0)
			access_code = VAX_READ;
		else if (strcmp (mode, "w") == 0)
			access_code = VAX_WRITE;
		else if (strcmp (mode, "r+") == 0)
			access_code = VAX_WRITE;
		else
			access_code = 0;
	}
	return (access_code);
}

int             file_size (fname)
	char           *fname;
{
	struct stat     stbuf;

	if (stat (fname, &stbuf) == -1)
		return (-1);
	return (stbuf.st_size);
}

int             file_exists (filename)
	char           *filename;
{
	struct stat     stbuf;

	if (stat (filename, &stbuf) == -1)
		return (0);
	return (1);
}

int             free_matrix_data (data)
	MatrixData     *data;
{
	if (data != NULL) {
		if (data->data_ptr != NULL)
			free (data->data_ptr);
		if (data->shptr != NULL)
			free (data->shptr);
		free (data);
	}
	return (0);
}

void            matrix_freelist (matdirlist)
	MatDirList     *matdirlist;
{
	MatDirNode     *node, *next;

	if (matdirlist == NULL)
		return;
	if (matdirlist->first != NULL) {
		node = matdirlist->first;
		do {
			next = node->next;
			free (node);
			node = next;
		}
		while (next != NULL);
	}
	free (matdirlist);
	return;
}

MatrixFile     *matrix_create (fname, mhead)
	char           *fname;
	Main_header    *mhead;
{
	FILE           *fptr;
	MatrixFile     *mfp;

	fptr = mat_create (fname, mhead);
	if (fptr != NULL) {
		mfp = (MatrixFile *) calloc (1, sizeof (MatrixFile));
		if (mfp == NULL) {
			(void) fclose (fptr);
			return (NULL);
		}
		(void) strcpy (mfp->fname, fname);
		mfp->mode = file_access_code ("r+");
		mfp->fptr = fptr;
		mfp->mhptr = mhead;
		return (mfp);
	} else
		return (NULL);
}

Main_header    *matrixx_init_main_header (fname, ftype, mh_proto)
	char           *fname;
	short           ftype;
	Main_header    *mh_proto;
{
	Main_header    *mhptr;

	mhptr = (Main_header *) calloc (1, sizeof (Main_header));
	if (mh_proto)
		bcopy (mh_proto, mhptr, sizeof (Main_header));
	mhptr->file_type = ftype;
	(void) strncpy (mhptr->original_file_name, fname, 20);
	return (mhptr);
}

int             matrix_data_init (data)
	MatrixData     *data;
{
	data->mat_type = -1;
	data->shptr = NULL;
	data->data_ptr = NULL;
	data->nviews = 0;
	data->nelements = 0;
	data->data_type = -1;
	return (0);
}

MatrixFile     *matrix_open (fname, mode)
	char           *fname, *mode;
{
	FILE           *fptr;
	MatrixFile     *matfile;
	Main_header    *mhead;
	int             stat;

	matfile = (MatrixFile *) calloc (1, sizeof (MatrixFile));
	if (matfile == NULL) {
		fprintf (stderr, "ERROR [matrix_open]: matfile calloc error\n");
		return (NULL);
	}
	mhead = (Main_header *) calloc (1, sizeof (Main_header));
	if (mhead == NULL) {
		fprintf (stderr, "ERROR [matrix_open]: main header calloc error\n");
		free (matfile->mhptr);
		free (matfile);
		return (NULL);
	}
	matfile->mode = file_access_code (mode);
	(void) strcpy (matfile->fname, fname);
	switch (matfile->mode) {
	case SUN_READ:
	case SUN_WRITE:
	case VAX_READ:
	case VAX_WRITE:
		fptr = fopen (fname, mode);
		if (fptr != NULL) {
			matfile->fptr = fptr;
			stat = mat_read_main_header (fptr, mhead);
			if (stat != 0) {
				free (mhead);
				free (matfile);
				return (NULL);
			}
			matfile->mhptr = mhead;
			matfile->dirlist = mat_read_directory (fptr);
			return (matfile);
		} else {
			(void) matrix_close (matfile);
			free (mhead);
			free (matfile);
			return (NULL);
		}
	default:
		fprintf (stderr, "ERROR [matrix_open]: unknown file access mode %d\n", matfile->mode);
		(void) matrix_close (matfile);
		free (mhead);
		free (matfile);
		return (NULL);
	}
}

int             matrix_close (matfile)
	MatrixFile     *matfile;
{
	int             stat;

	if (matfile == NULL)
		return (0);
	if (matfile->mhptr != NULL)
		free (matfile->mhptr);
	if (matfile->mode == SUN_READ || matfile->mode == SUN_WRITE)
		matrix_freelist (matfile->dirlist);
	stat = fclose (matfile->fptr);
	free (matfile);
	return (stat);
}

MatDirEntry  *matrix_find (matnum, matfile)
	int             matnum;
	MatrixFile     *matfile;
{
	MatDirNode     *node;
	MatDirEntry    *matdir;

	if (matfile == NULL)
		return (NULL);
	if (matfile->dirlist == NULL)
		return (NULL);
	matdir = (MatDirEntry *) calloc (1, sizeof (MatDirEntry));
	if (matdir == NULL)
		return (NULL);
	matdir->matnum = 0;
	matdir->strtblk = 0;
	matdir->endblk = 0;
	matdir->matstat = 0;
	node = matfile->dirlist->first;
	while (node != NULL) {
		if (node->matnum == matnum) {
			matdir->matnum = node->matnum;
			matdir->strtblk = node->strtblk;
			matdir->endblk = node->endblk;
			matdir->matstat = node->matstat;
			break;
		}
		node = node->next;
	}
	if (node != NULL)
		return (matdir);
	else {
		free (matdir);
		return (NULL);
	}
}

int             mat_mlist (dirlist)
	MatDirList     *dirlist;
{
	MatDirNode     *node;
	int             i;

	if (dirlist == NULL)
		fprintf (stderr, "dirlist is NULL\n");
	else if (dirlist->nmats == 0)
		fprintf (stderr, "dirlist is empty\n");
	else {
		fprintf (stderr, "A total of %d directory entries\n", dirlist->nmats);
		node = dirlist->first;
		i = 0;
		while (node != NULL) {
			i++;
			fprintf (stderr, "%d %d %d %d\n", node->matnum, node->strtblk, node->endblk,
				 node->matstat);
			node = node->next;
		}
		fprintf (stderr, "\nA Total of %d entries listed\n", i);
	}
	return (0);
}

int             insert_mdir (matdir, dirlist)
	MatDirEntry   *matdir;
	MatDirList     *dirlist;
{
	MatDirNode     *node;

	if (dirlist == NULL) {
		dirlist = (MatDirList *) calloc (1, sizeof (MatDirList));
		if (dirlist == NULL)
			return (ERROR);
		dirlist->nmats = 0;
	}
	node = (MatDirNode *) calloc (1, sizeof (MatDirNode));
	if (node == NULL)
		return (ERROR);
	node->matnum = matdir->matnum;
	node->strtblk = matdir->strtblk;
	node->endblk = matdir->endblk;
	node->matstat = matdir->matstat;
	if (dirlist->first == NULL) {		 /* if list is empty, add first node */
		dirlist->first = node;
		dirlist->last = node;
		dirlist->nmats = 1;
	} else {
		dirlist->last->next = node;
		dirlist->last = node;
		++(dirlist->nmats);
	}
	return (0);
}

MatDirBlk      *mat_rdirblk (fptr, blknum)
	FILE           *fptr;
	int             blknum;
{
	MatDirBlk      *matdirblk;
	int             i, j, stat, ndirs;
	int             dirbufr[MatBLKSIZE / 4];
	long            nbytes = MatBLKSIZE;

	bzero (dirbufr, MatBLKSIZE / 4);
	matdirblk = (MatDirBlk *) calloc (1, sizeof (MatDirBlk));
	if (matdirblk == NULL)
		return (NULL);

	stat = mat_rblk (fptr, blknum, (char *) dirbufr, 1);
	if (stat != 0) {
		free (matdirblk);
		return (NULL);
	}
	/* CONSTCOND */
	if (__BYTE_ORDER == __BIG_ENDIAN) {
		swap_byte ((char *) dirbufr, nbytes);
		swap_word ((short *) dirbufr, nbytes / 2);
	}
	matdirblk->nfree = dirbufr[0];
	matdirblk->nextblk = dirbufr[1];
	matdirblk->prvblk = dirbufr[2];
	matdirblk->nused = dirbufr[3];
	ndirs = (MatBLKSIZE / 4 - 4) / 4;
	for (i = 0; i < ndirs; i++) {
		matdirblk->matdir[i].matnum = 0;
		matdirblk->matdir[i].strtblk = 0;
		matdirblk->matdir[i].endblk = 0;
		matdirblk->matdir[i].matstat = 0;
	}
	for (i = 0; i < matdirblk->nused; i++) {
		j = i + 1;
		matdirblk->matdir[i].matnum = dirbufr[j * 4 + 0];
		matdirblk->matdir[i].strtblk = dirbufr[j * 4 + 1];
		matdirblk->matdir[i].endblk = dirbufr[j * 4 + 2];
		matdirblk->matdir[i].matstat = dirbufr[j * 4 + 3];
	}
	return (matdirblk);
}


MatDirList     *mat_read_directory (fptr)
	FILE           *fptr;
{
	MatDirEntry   *matdir;
	MatDirList     *dirlist;
	MatDirBlk      *matdirblk;
	int             i, blknum;

	dirlist = (MatDirList *) calloc (1, sizeof (MatDirList));
	if (dirlist == NULL)
		return (NULL);
	matdir = (MatDirEntry *) calloc (1, sizeof (MatDirEntry));
	if (matdir == NULL) {
		free (dirlist);
		return (NULL);
	}
	blknum = MatFirstDirBlk;
	do {
		matdirblk = mat_rdirblk (fptr, blknum);
		if (matdirblk == NULL) {
			free (dirlist->first);
			free (dirlist->last);
			free (dirlist);
			free (matdir);
			return (NULL);
		}
		for (i = 0; i < matdirblk->nused; i++) {
			matdir->matnum = matdirblk->matdir[i].matnum;
			matdir->strtblk = matdirblk->matdir[i].strtblk;
			matdir->endblk = matdirblk->matdir[i].endblk;
			matdir->matstat = matdirblk->matdir[i].matstat;
			(void) insert_mdir (matdir, dirlist);
		}
		blknum = matdirblk->nextblk;
		free ((char *) matdirblk);
	}
	while (blknum != MatFirstDirBlk);
	free (matdir);
	return (dirlist);
}

MatrixData     *matrix_read (mfp, matnum)
	MatrixFile     *mfp;
	int             matnum;
{
	MatrixData     *data;
	int             stat;

	if (mfp == NULL)
		return (NULL);
	if (mfp->mhptr == NULL)
		return (NULL);
	data = (MatrixData *) calloc (1, sizeof (MatrixData));
	if (data == NULL)
		return (NULL);

	data->mat_type = -1;
	data->data_ptr = NULL;
	data->nviews = 0;
	data->nelements = 0;
	data->data_type = -1;
	data->matnum = matnum;
	data->shptr = (char *) calloc (MatBLKSIZE, sizeof (char));
	if (data->shptr == NULL) {
		fprintf (stderr, "ERROR [matrix_read]: subheader calloc error\n");
		free (data);
		return (NULL);
	}
	stat = read_mat_data (mfp, matnum, data);
	if (stat == 0)
		return (data);
	else {
		free (data);
		return (NULL);
	}
}

int             read_mat_data (mfp, matnum, data)
	MatrixFile     *mfp;
	MatrixData     *data;
	int             matnum;
{
	MatDirEntry 	*matdir;
	int             stat, nblks;
	Scan_subheader *scansub;
	Image_subheader *imagesub;
	Attn_subheader *attnsub;
	Norm_subheader *normsub;

	matdir = matrix_find (matnum, mfp);
	if (matdir == NULL)
		return (ERROR);
	nblks = matdir->endblk - matdir->strtblk;
	free (data->data_ptr);
	data->data_ptr = (char *) calloc (512 * nblks, sizeof (char));
	if (data->data_ptr == NULL) {
		fprintf (stderr, "ERROR [matrix_read]: data buffer calloc error\n");
		free (matdir);
		return (ERROR);
	}
	data->nblks = nblks;
	switch (mfp->mhptr->file_type) {
	case 1:
		scansub = (Scan_subheader *) data->shptr;
		stat = mat_read_scan_subheader (mfp->fptr, matdir->strtblk, scansub);
		if (stat != 0)
			break;
		stat = read_matrix_data (mfp->fptr, matdir->strtblk + 1, nblks,
					 data->data_ptr, scansub->data_type);
		if (stat != 0)
			break;
		data->data_type = scansub->data_type;
		data->nelements = scansub->dimension_1;
		data->nviews = scansub->dimension_2;
		break;
	case 2:
		imagesub = (Image_subheader *) data->shptr;
		stat = mat_read_image_subheader (mfp->fptr, matdir->strtblk, imagesub);
		if (stat != 0)
			break;
		stat = read_matrix_data (mfp->fptr, matdir->strtblk + 1, nblks,
					 data->data_ptr, imagesub->data_type);
		if (stat != 0)
			break;
		data->data_type = imagesub->data_type;
		data->nelements = imagesub->dimension_1;
		data->nviews = imagesub->dimension_2;
		break;
	case 3:
		attnsub = (Attn_subheader *) data->shptr;
		stat = mat_read_attn_subheader (mfp->fptr, matdir->strtblk, attnsub);
		if (stat != 0)
			break;
		stat = read_matrix_data (mfp->fptr, matdir->strtblk + 1, nblks,
					 data->data_ptr, attnsub->data_type);
		if (stat != 0)
			break;
		data->data_type = attnsub->data_type;
		data->nelements = attnsub->dimension_1;
		data->nviews = attnsub->dimension_2;
		break;
	case 4:
		normsub = (Norm_subheader *) data->shptr;
		stat = mat_read_norm_subheader (mfp->fptr, matdir->strtblk, normsub);
		if (stat != 0)
			break;
		stat = read_matrix_data (mfp->fptr, matdir->strtblk + 1, nblks,
					 data->data_ptr, normsub->data_type);
		if (stat != 0)
			break;
		data->data_type = normsub->data_type;
		data->nelements = normsub->dimension_1;
		data->nviews = normsub->dimension_2;
		break;
	default:
		stat = -1;
	}
	free (matdir);
	if (stat != 0)
		return (ERROR);
	data->mat_type = mfp->mhptr->file_type;
	return (0);
}

int             matrix_write (mfp, matnum, data)
	MatrixFile     *mfp;
	int             matnum;
	MatrixData     *data;
{
	MatDirEntry  *matdir;
	Scan_subheader *scansub;
	Image_subheader *imagesub;
	Attn_subheader *attnsub;
	Norm_subheader *normsub;
	int             stat, blkno, dtype;

	if (mfp == NULL)
		return (ERROR);
	if (mfp->mhptr == NULL)
		return (ERROR);
	if (data == NULL)
		return (ERROR);
	if (data->nblks <= 0)
		return (ERROR);
	if (data->data_ptr == NULL)
		return (ERROR);
	if (data->shptr == NULL)
		return (ERROR);

	matdir = matrix_find (matnum, mfp);
	if (matdir == NULL) {
		blkno = mat_enter (mfp->fptr, matnum, data->nblks);
		matdir = (MatDirEntry *) calloc (1, sizeof (MatDirEntry));
		if (matdir == NULL)
			return (ERROR);
		matdir->matnum = matnum;
		matdir->strtblk = blkno;
		matdir->endblk = matdir->strtblk + data->nblks - 1;
		matdir->matstat = 1;
		(void) insert_mdir (matdir, mfp->dirlist);
	} else if (data->nblks > matdir->endblk - matdir->strtblk + 1) {
		free (matdir);
		return (ERROR);
	}

	switch (mfp->mhptr->file_type) {
	case 1:
		scansub = (Scan_subheader *) data->shptr;
		dtype = scansub->data_type;
		stat = mat_write_scan_subheader (mfp->fptr, matdir->strtblk, scansub);
		break;
	case 2:
		imagesub = (Image_subheader *) data->shptr;
		dtype = imagesub->data_type;
		stat = mat_write_image_subheader (mfp->fptr, matdir->strtblk, imagesub);
		break;
	case 3:
		attnsub = (Attn_subheader *) data->shptr;
		dtype = attnsub->data_type;
		stat = mat_write_attn_subheader (mfp->fptr, matdir->strtblk, attnsub);
		break;
	case 4:
		normsub = (Norm_subheader *) data->shptr;
		dtype = normsub->data_type;
		stat = mat_write_norm_subheader (mfp->fptr, matdir->strtblk, normsub);
		break;
	default:				 /* default is to treat as sinogram */
		scansub = (Scan_subheader *) data->shptr;
		dtype = scansub->data_type;
		stat = mat_write_scan_subheader (mfp->fptr, matdir->strtblk, scansub);
	}
	if (stat == 0)
		stat = write_mat_data (mfp->fptr, matdir->strtblk + 1, data->nblks, data->data_ptr, dtype);
	free (matdir);
	return (stat);
}

int             read_matrix_data (fptr, strtblk, nblks, buf, dtype)
	FILE           *fptr;
	int             strtblk, nblks, dtype;
	char           *buf;
{
	short          *sbuf;
	int             stat;
	long            nbytes;

	sbuf = (short *) buf;
	nbytes = 512 * nblks;

	stat = mat_rblk (fptr, strtblk, buf, nblks);
	if (stat != 0)
		return (ERROR);
	switch (dtype) {
	case 1:				 /* Byte */
		break;
	case 2:				 /* VAX_I2 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __BIG_ENDIAN)
			swap_byte (buf, nbytes);
		break;
	case 3:				 /* VAX_I4 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __BIG_ENDIAN) {
			swap_byte (buf, nbytes);
			swap_word (sbuf, nbytes / 2);
		}
		break;
	case 4:				 /* VAX_R4 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __BIG_ENDIAN) {
			swap_byte (buf, nbytes);
			swap_word (sbuf, nbytes / 2);
		}
		break;
	case 5:				 /* IEEE_R4 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __LITTLE_ENDIAN) {
			swap_byte (buf, nbytes * nblks);
			swap_word (sbuf, nbytes / 2);
		}
		break;
	case 6:				 /* SUN_I2 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __LITTLE_ENDIAN)
			swap_byte (buf, nbytes);
		break;
	case 7:				 /* SUN_I4 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __LITTLE_ENDIAN) {
			swap_byte (buf, nbytes);
			swap_word (sbuf, nbytes / 2);
		}
		break;
	default:				 /* default is to treat as VAX_I2 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __BIG_ENDIAN)
			swap_byte (buf, nbytes);
		break;
	}
	return (0);
}

int             write_mat_data (fptr, strtblk, nblks, buf, dtype)
	FILE           *fptr;
	int             strtblk, nblks, dtype;
	char           *buf;
{
	float          *fbuf;
	short          *sbuf;
	int             stat, j;
	long            nbytes;

	nbytes = nblks * MatBLKSIZE;

	switch (dtype) {
	case 1:				 /* Byte	 */
		break;
	case 2:				 /* Vax I*2 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __BIG_ENDIAN)
			swap_byte (buf, nbytes);
		break;
	case 4:				 /* Vax R*4 */
		sbuf = (short *) buf;
		fbuf = (float *) buf;
		/* CONSTCOND */
		if (__BYTE_ORDER == __BIG_ENDIAN) {
			for (j = 0; j < nbytes / 2; j++)
				make_vax_float (sbuf, 2 * j, fbuf[j]);
			swap_byte (buf, nbytes);
		}
		break;
	case 5:				 /* IEEE R*4 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __LITTLE_ENDIAN) {
			swap_word ((short *) buf, nbytes / 2);
			swap_byte (buf, nbytes);
		}
		break;
	case 6:				 /* Sun I*2 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __LITTLE_ENDIAN)
			swap_byte (buf, nbytes);
		break;
	case 7:				 /* Sun I*4 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __LITTLE_ENDIAN) {
			swap_word ((short *) buf, nbytes / 2);
			swap_byte (buf, nbytes);
		}
		break;
	default:				 /* treat as Vax I*2 */
		/* CONSTCOND */
		if (__BYTE_ORDER == __BIG_ENDIAN)
			swap_byte (buf, nbytes);
		break;
	}
	stat = mat_wblk (fptr, strtblk, buf, nblks);
	return (stat);
}

int             read_main_header (fp, mhead)
	MatrixFile     *fp;
	Main_header    *mhead;
{
	int             stat;

	stat = mat_read_main_header (fp->fptr, mhead);
	return (stat);
}

int             update_main_header (fp, mhead)
	MatrixFile     *fp;
	Main_header    *mhead;
{
	int             stat;

	stat = mat_write_main_header (fp->fptr, mhead);
	return (stat);
}

int             write_main_header (fp, mhead)
	MatrixFile     *fp;
	Main_header    *mhead;
{
	int             stat;

	stat = mat_write_main_header (fp->fptr, mhead);
	return (stat);
}

int             read_image_subheader (fp, matnum, isub)
	MatrixFile     *fp;
	int             matnum;
	Image_subheader *isub;
{
	int             stat;
	MatDirEntry   entry;

	if (fp->mhptr->file_type != 2)
		return (ERROR);
	switch (fp->mode) {
	case SUN_READ:
	case SUN_WRITE:
		stat = mat_lookup (fp->fptr, matnum, &entry);
		if (stat != 0)
			return (ERROR);
		stat = mat_read_image_subheader (fp->fptr, entry.strtblk, isub);
		return (stat);
	default:
		return (ERROR);
	}
}

int             write_image_subheader (fp, matnum, isub)
	MatrixFile     *fp;
	int             matnum;
	Image_subheader *isub;
{
	int             stat;
	MatDirEntry   entry;

	if (fp->mhptr->file_type != 2)
		return (ERROR);
	switch (fp->mode) {
	case SUN_READ:
	case SUN_WRITE:
		stat = mat_lookup (fp->fptr, matnum, &entry);
		if (stat != 0)
			return (ERROR);
		stat = mat_write_image_subheader (fp->fptr, entry.strtblk, isub);
		return (stat);
	default:
		return (ERROR);
	}
}

int             read_scan_subheader (fp, matnum, ssub)
	MatrixFile     *fp;
	int             matnum;
	Scan_subheader *ssub;
{
	int             stat;
	MatDirEntry   entry;

	if (fp->mhptr->file_type != 1)
		return (ERROR);
	switch (fp->mode) {
	case SUN_READ:
	case SUN_WRITE:
		stat = mat_lookup (fp->fptr, matnum, &entry);
		if (stat != 0)
			return (ERROR);
		stat = mat_read_scan_subheader (fp->fptr, entry.strtblk, ssub);
		if (stat != 0)
			return (ERROR);
		break;
	default:
		return (ERROR);
	}
	return (0);
}

int             write_sino_subheader (fp, matnum, ssub)
	MatrixFile     *fp;
	int             matnum;
	Scan_subheader *ssub;
{
	int             stat;
	MatDirEntry   entry;

	if (fp->mhptr->file_type != 1)
		return (ERROR);
	switch (fp->mode) {
	case SUN_READ:
	case SUN_WRITE:
		stat = mat_lookup (fp->fptr, matnum, &entry);
		if (stat != 0)
			return (ERROR);
		stat = mat_write_scan_subheader (fp->fptr, entry.strtblk, ssub);
		return (stat);
	default:
		return (ERROR);
	}
}

int             read_attn_subheader (fp, matnum, asub)
	MatrixFile     *fp;
	int             matnum;
	Attn_subheader *asub;
{
	int             stat;
	MatDirEntry   entry;

	if (fp->mhptr->file_type != 3)
		return (ERROR);
	switch (fp->mode) {
	case SUN_READ:
	case SUN_WRITE:
		stat = mat_lookup (fp->fptr, matnum, &entry);
		if (stat != 0)
			return (ERROR);
		stat = mat_read_attn_subheader (fp->fptr, entry.strtblk, asub);
		return (stat);
	default:
		return (ERROR);
	}
}

int             write_attn_subheader (fp, matnum, asub)
	MatrixFile     *fp;
	int             matnum;
	Attn_subheader *asub;
{
	int             stat;
	MatDirEntry   entry;

	if (fp->mhptr->file_type != 3)
		return (ERROR);
	switch (fp->mode) {
	case SUN_READ:
	case SUN_WRITE:
		stat = mat_lookup (fp->fptr, matnum, &entry);
		if (stat != 0)
			return (ERROR);
		stat = mat_write_attn_subheader (fp->fptr, entry.strtblk, asub);
		return (stat);
	default:
		return (ERROR);
	}
}

int             read_norm_subheader (fp, matnum, nsub)
	MatrixFile     *fp;
	int             matnum;
	Norm_subheader *nsub;
{
	int             stat;
	MatDirEntry   entry;

	if (fp->mhptr->file_type != 4)
		return (ERROR);
	switch (fp->mode) {
	case SUN_READ:
	case SUN_WRITE:
		stat = mat_lookup (fp->fptr, matnum, &entry);
		if (stat != 0)
			return (ERROR);
		stat = mat_read_norm_subheader (fp->fptr, entry.strtblk, nsub);
		return (stat);
	default:
		return (ERROR);
	}
}

int             write_norm_subheader (fp, matnum, nsub)
	MatrixFile     *fp;
	int             matnum;
	Norm_subheader *nsub;
{
	int             stat;
	MatDirEntry   entry;

	if (fp->mhptr->file_type != 4)
		return (ERROR);
	switch (fp->mode) {
	case SUN_READ:
	case SUN_WRITE:
		stat = mat_lookup (fp->fptr, matnum, &entry);
		if (stat != 0)
			return (ERROR);
		stat = mat_write_norm_subheader (fp->fptr, entry.strtblk, nsub);
		return (stat);
	default:
		return (ERROR);
	}
}
@


2.1
log
@Feb 2004
@
text
@d1 1
a1 1
/*$Id: matrix_extra.c,v 2.0 2004/01/02 19:48:38 tom Exp tom $
d3 3
d58 1
a58 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libecat6/RCS/matrix_extra.c,v 2.0 2004/01/02 19:48:38 tom Exp tom $";
@


2.0
log
@lint/splint
@
text
@d1 1
a1 1
/*$Id: matrix_extra.c,v 1.1 2003/08/21 13:42:31 tom Exp $
d3 3
d55 1
a55 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libecat6/RCS/matrix_extra.c,v 1.1 2003/08/21 13:42:31 tom Exp $";
d149 2
a150 1
		if (mfp == NULL) 
d152 1
a156 1
		mfp->dirlist = NULL;
d259 1
a259 1
struct MatDir  *matrix_find (matnum, matfile)
d264 1
a264 1
	struct MatDir  *matdir;
d270 1
a270 1
	matdir = (struct MatDir *) calloc (1, sizeof (struct MatDir));
a295 79
int             mat_make_dir (fptr, nf, np, ng, nb, nd, acqm, size)
	FILE           *fptr;
	int             nf, np, ng, nb, nd, acqm, size;
{
	int             lbuf[32][4];
	int             stat, count, dirblk, numdirblks, blkptr;
	int             fr, pl, ga, da, be, ac, total, index, na, nac;
	long            nbytes = 512;

	na = 1;
	if (acqm == 2)
		na = 2;
	else if (acqm == 3)
		na = 4;
	else if (acqm == 5)
		na = 6;
	nac = 0;
	if (na > 1)
		nac = 1;
	if (ng == 0)
		ng = 1;
	numdirblks = (nf * np * ng * (nb + 1) * (nd + 1) * (nac + 1) + 30) / 31;
	total = nf * np * ng * (nb + 1) * (nd + 1) * (nac + 1);
	dirblk = 2;
	blkptr = 1 + numdirblks;
	count = 0;
	index = 0;

	bzero ((char *) lbuf, 512);		 /* initialize directory block to zero */
	lbuf[0][1] = 2;				 /* first block back link points to itself */
	lbuf[0][2] = 0;				 /* first block forward link initialize to NIL */

	for (fr = 1; fr <= nf; fr++) {
		for (pl = 1; pl <= np; pl++) {
			for (ga = 1; ga <= ng; ga++) {
				for (be = 0; be <= nb; be++) {
					for (da = 0; da <= nd; da++) {
						for (ac = 0; ac <= nac; ac++) {
							count++;
							index++;
							lbuf[0][0] = 31 - index;
							lbuf[0][3] = index;
							lbuf[index][0] =
								mat_numcod (fr, pl, ga, da + ac * 4, be);
							lbuf[index][1] = ++blkptr;
							lbuf[index][2] = (blkptr += size);
							lbuf[index][3] = 1;
							if (index == 31 || count == total) {
								if (count == total)
									lbuf[0][1] = 2;	/* forward link */
								else
									lbuf[0][1] = dirblk + 1;
								/* CONSTCOND */
								if (__BYTE_ORDER == __BIG_ENDIAN) {
									swap_word ((short *) lbuf, nbytes / 2);
									swap_byte ((char *) lbuf, nbytes);
								}
								stat = mat_wblk (fptr, dirblk, (char *) lbuf, 1);
								if (stat != 0) {
									fprintf (stderr, "mat_wblk: lseek error\n");
									return (ERROR);
								}
								if (count != total) {	/* new directory block */
									bzero ((char *) lbuf, 512);
									lbuf[0][2] = dirblk++;	/* back link */
									lbuf[0][0] = 31;
									lbuf[0][3] = 0;
									index = 0;
								}
							}
						}
					}
				}
			}
		}
	}
	return (0);
}

d322 1
a323 1
	struct MatDir   matdir;
a331 2
		dirlist->first = NULL;
		dirlist->last = NULL;
d336 4
a339 5
	node->matnum = matdir.matnum;
	node->strtblk = matdir.strtblk;
	node->endblk = matdir.endblk;
	node->matstat = matdir.matstat;
	node->next = NULL;
d401 1
a401 1
	struct MatDir   matdir;
d409 5
d421 1
d425 4
a428 4
			matdir.matnum = matdirblk->matdir[i].matnum;
			matdir.strtblk = matdirblk->matdir[i].strtblk;
			matdir.endblk = matdirblk->matdir[i].endblk;
			matdir.matstat = matdirblk->matdir[i].matstat;
d435 1
d455 1
a455 1
	free (data->data_ptr);
a459 1
	free (data->shptr);
d480 1
a480 1
	struct MatDir  *matdir;
d567 1
a567 1
	struct MatDir  *matdir, dir_entry;
d590 8
a597 6
		dir_entry.matnum = matnum;
		dir_entry.strtblk = blkno;
		dir_entry.endblk = dir_entry.strtblk + data->nblks - 1;
		dir_entry.matstat = 1;
		(void) insert_mdir (dir_entry, mfp->dirlist);
		matdir = &dir_entry;
d631 1
d795 1
a795 1
	struct MatDir   entry;
d818 1
a818 1
	struct MatDir   entry;
d841 1
a841 1
	struct MatDir   entry;
d867 1
a867 1
	struct MatDir   entry;
d890 1
a890 1
	struct MatDir   entry;
d913 1
a913 1
	struct MatDir   entry;
d936 1
a936 1
	struct MatDir   entry;
d959 1
a959 1
	struct MatDir   entry;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*$Id: matrix_extra.c,v 2.0 2002/12/26 20:35:56 tom Exp tom $
d3 3
a44 1
#include <string.h>
d50 1
d52 1
a52 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/matrix_extra.c,v 2.0 2002/12/26 20:35:56 tom Exp tom $";
d146 1
a146 1
		if (mfp == NULL)
d491 2
d668 3
a670 3
	} else {
		if (data->nblks > matdir->endblk - matdir->strtblk + 1)
			return (ERROR);
@
