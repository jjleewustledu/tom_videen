matrix_extra.c: (in function matrix_create)
matrix_extra.c:154:18: Fresh storage fptr not released before return
  A memory leak has been detected. Storage allocated locally is not released
  before the last reference to it is lost. (Use -mustfreefresh to inhibit
  warning)
   matrix_extra.c:149:2: Fresh storage fptr created
matrix_extra.c: (in function matrixx_init_main_header)
matrix_extra.c:174:3: Unrecognized identifier: bcopy
  Identifier used in code has not been declared. (Use -unrecog to inhibit
  warning)
matrix_extra.c: (in function insert_mdir)
matrix_extra.c:345:3: Kept storage node assigned to implicitly only:
                         dirlist->last = node
  storage is transferred to a non-temporary reference after being passed as
  keep parameter. The storage may be released or new aliases created. (Use
  -kepttrans to inhibit warning)
   matrix_extra.c:344:3: Storage node becomes kept
matrix_extra.c:349:3: Kept storage node assigned to implicitly only:
                         dirlist->last = node
   matrix_extra.c:348:3: Storage node becomes kept
matrix_extra.c:351:2: Clauses exit with dirlist->first referencing kept storage
    in true branch, implicitly only storage in false branch
  The state of a variable is different depending on which branch is taken. This
  means no annotation can sensibly be applied to the storage. (Use -branchstate
  to inhibit warning)
   matrix_extra.c:345:3: Storage dirlist->first becomes kept
matrix_extra.c: (in function mat_rdirblk)
matrix_extra.c:364:2: Unrecognized identifier: bzero
matrix_extra.c: (in function mat_read_directory)
matrix_extra.c:414:9: Only storage dirlist->first (type MatDirNode *) derived
    from released storage is not released (memory leak): dirlist
  A storage leak due to incomplete deallocation of a structure or deep pointer
  is suspected. Unshared storage that is reachable from a reference that is
  being deallocated has not yet been deallocated. Splint assumes when an object
  is passed as an out only void pointer that the outer object will be
  deallocated, but the inner objects will not. (Use -compdestroy to inhibit
  warning)
matrix_extra.c:414:9: Only storage dirlist->last (type MatDirNode *) derived
    from released storage is not released (memory leak): dirlist
matrix_extra.c:421:10: Only storage dirlist->first->next (type struct
    matdirnode *) derived from released storage is not released (memory leak):
    dirlist->first

