head	2.3;
access;
symbols;
locks; strict;
comment	@ * @;


2.3
date	2004.08.31.14.42.32;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2004.02.12.22.12.27;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.01.02.21.40.12;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	99.12.13.18.06.58;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	95.07.28.15.09.44;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	95.07.28.14.53.07;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	95.07.28.14.46.01;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.07.24.20.53.14;	author tom;	state Exp;
branches;
next	;


desc
@@


2.3
log
@*** empty log message ***
@
text
@/*	$Id: c3tensor.c,v 2.2 2004/02/12 22:12:27 tom Exp tom $
	$Log: c3tensor.c,v $
 * Revision 2.2  2004/02/12  22:12:27  tom
 * Feb 2004
 *
 * Revision 2.0  2004/01/02  21:40:12  tom
 * splint cleaning
 *
 * Revision 1.5  1999/12/13  18:06:58  tom
 * tov revision
 *
 * Revision 1.4  1995/07/28  15:09:44  tom
 * *** empty log message ***
 *
 * Revision 1.3  1995/07/28  14:53:07  tom
 * *** empty log message ***
 *
 * Revision 1.2  1995/07/28  14:46:01  tom
 * debugged
 *
 * Revision 1.1  1995/07/24  20:53:14  tom
 * Initial revision
 * */
/*	========================================================================
 *	Module:			c3tensor.c
 *	Date:			Jul 1995
 *	Author:			Tom Videen
 *	Description:	Allocate a 3D tensor of 8-bit char
 *					with range t[nzl..nzh][nyl..nyh][nxl..nxh]
 *	========================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libmatrix/RCS/c3tensor.c,v 2.2 2004/02/12 22:12:27 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#define NR_END 1

char        ***c3tensor (nzl, nzh, nyl, nyh, nxl, nxh)
	long            nzl, nzh, nyl, nyh, nxl, nxh;

{
	long            i, j;
	long            npln = nzh - nzl + 1;
	long            nrow = nyh - nyl + 1;
	long            ncol = nxh - nxl + 1;
	char        ***t;

/* allocate pointers to pointers to planes */

	t = (char ***) malloc ((unsigned int) ((npln + NR_END) * sizeof (char **)));
	if (!t) {
		fprintf (stdout, "ERROR: allocation failure 1 in c3tensor()\n");
		return (NULL);
	}
	t += NR_END;
	t -= nzl;

/* allocate pointers to rows and set pointers to them */

	t[nzl] = (char **) malloc ((unsigned int) ((npln * nrow + NR_END) * sizeof (char *)));
	if (!t[nzl]) {
		fprintf (stdout, "ERROR: allocation failure 2 in c3tensor()\n");
		free (t);
		return (NULL);
	}
	t[nzl] += NR_END;
	t[nzl] -= nyl;

/* allocate rows and set pointers to them */

	t[nzl][nyl] = (char *) malloc ((unsigned int) ((npln * nrow * ncol + NR_END) * sizeof (char)));
	if (!t[nzl][nyl]) {
		fprintf (stdout, "ERROR: allocation failure 3 in c3tensor()\n");
		free (t[nzl][nyl]);
		free (t);
		return (NULL);
	}
	t[nzl][nyl] += NR_END;
	t[nzl][nyl] -= nxl;

	for (j = nyl + 1; j <= nyh; j++)
		t[nzl][j] = t[nzl][j - 1] + ncol;
	for (i = nzl + 1; i <= nzh; i++) {
		t[i] = t[i - 1] + nrow;
		t[i][nyl] = t[i - 1][nyl] + nrow * ncol;
		for (j = nyl + 1; j <= nyh; j++)
			t[i][j] = t[i][j - 1] + ncol;
	}

/* return pointer to array of pointers to planes */

	return t;
}
@


2.2
log
@Feb 2004
@
text
@d1 1
a1 1
/*	$Id: c3tensor.c,v 2.0 2004/01/02 21:40:12 tom Exp tom $
d3 3
d34 1
a34 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libmatrix/RCS/c3tensor.c,v 2.0 2004/01/02 21:40:12 tom Exp tom $";
@


2.0
log
@splint cleaning
@
text
@d1 1
a1 1
/*	$Id: c3tensor.c,v 1.5 1999/12/13 18:06:58 tom Exp tom $
d3 3
d31 1
a31 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libmatrix/RCS/c3tensor.c,v 1.5 1999/12/13 18:06:58 tom Exp tom $";
@


1.5
log
@tov revision
@
text
@d1 1
a1 1
/*	$Id: c3tensor.c,v 1.4 1995/07/28 15:09:44 tom Exp tom $
d3 3
d20 1
a20 1
 *	Date:			28-Jul-95
d26 1
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libmatrix/RCS/c3tensor.c,v 1.4 1995/07/28 15:09:44 tom Exp tom $";
d50 1
a50 1
		exit (1);
d60 2
a61 1
		exit (1);
d71 3
a73 1
		exit (1);
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: c3tensor.c,v 1.3 1995/07/28 14:53:07 tom Exp tom $
d3 3
d23 4
d28 1
a30 2
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/libmatrix/RCS/c3tensor.c,v 1.3 1995/07/28 14:53:07 tom Exp tom $";

@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: c3tensor.c,v 1.2 1995/07/28 14:46:01 tom Exp tom $
d3 3
d17 1
a17 1
 *					with range t[nzl..nzh][nxl..nxh][nyl..nyh]
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libmatrix/RCS/c3tensor.c,v 1.2 1995/07/28 14:46:01 tom Exp tom $";
d25 2
a26 2
char        ***c3tensor (nzl, nzh, nxl, nxh, nyl, nyh)
	long            nzl, nzh, nxl, nxh, nyl, nyh;
d30 3
a32 3
	long            ndep = nzh - nzl + 1;
	long            nrow = nxh - nxl + 1;
	long            ncol = nyh - nyl + 1;
d35 1
a35 1
/* allocate pointers to pointers to rows */
d37 1
a37 1
	t = (char ***) malloc ((unsigned int) ((ndep + NR_END) * sizeof (char **)));
d47 1
a47 1
	t[nzl] = (char **) malloc ((unsigned int) ((ndep * nrow + NR_END) * sizeof (char *)));
d53 1
a53 1
	t[nzl] -= nxl;
d57 2
a58 2
	t[nzl][nxl] = (char *) malloc ((unsigned int) ((ndep * nrow * ncol + NR_END) * sizeof (char)));
	if (!t[nzl][nxl]) {
d62 2
a63 2
	t[nzl][nxl] += NR_END;
	t[nzl][nxl] -= nyl;
d65 1
a65 1
	for (j = nxl + 1; j <= nxh; j++)
d69 2
a70 2
		t[i][nxl] = t[i - 1][nxl] + nrow * ncol;
		for (j = nxl + 1; j <= nxh; j++)
d74 1
a74 1
/* return pointer to array of pointers to rows */
@


1.2
log
@debugged
@
text
@d1 1
a1 1
/*	$Id: c3tensor.c,v 1.1 1995/07/24 20:53:14 tom Exp tom $
d3 3
d17 1
a17 1
#inxlude <stdio.h>
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libmatrix/RCS/c3tensor.c,v 1.1 1995/07/24 20:53:14 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*	$Id$
	$Log$ */
d8 1
a8 1
 *	Date:			24-Jul-95
d11 1
a11 1
 *					with range t[nrl..nrh][ncl..nch][ndl..ndh]
d14 1
a14 1
#include <stdio.h>
d17 1
a17 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/libmatrix/RCS/c3tensor.c,v 1.1 1995/07/24 19:30:33 tom Exp $";
d19 2
a20 2
char        ***c3tensor (nrl, nrh, ncl, nch, ndl, ndh)
	long            nch, ncl, ndh, ndl, nrh, nrl;
d24 3
a26 3
	long            nrow = nrh - nrl + 1;
	long            ncol = nch - ncl + 1;
	long            ndep = ndh - ndl + 1;
d31 1
a31 1
	t = (char ***) malloc ((unsigned int) ((nrow + NR_END) * sizeof (char **)));
d37 1
a37 1
	t -= nrl;
d41 2
a42 2
	t[nrl] = (char **) malloc ((unsigned int) ((nrow * ncol + NR_END) * sizeof (char *)));
	if (!t[nrl]) {
d46 2
a47 7
	t[nrl] = (char **) malloc ((unsigned int) ((nrow * ncol + NR_END) * sizeof (char *)));
	if (!t[nrl]) {
		fprintf (stdout, "ERROR: allocation failure 2 in c3tensor()\n");
		exit (1);
	}
	t[nrl] += NR_END;
	t[nrl] -= ncl;
d51 2
a52 2
	t[nrl][ncl] = (char *) malloc ((unsigned int) ((nrow * ncol * ndep + NR_END) * sizeof (char)));
	if (!t[nrl][ncl]) {
d56 2
a57 2
	t[nrl][ncl] += NR_END;
	t[nrl][ncl] -= ndl;
d59 7
a65 7
	for (j = ncl + 1; j <= nch; j++)
		t[nrl][j] = t[nrl][j - 1] + ndep;
	for (i = nrl + 1; i <= nrh; i++) {
		t[i] = t[i - 1] + ncol;
		t[i][ncl] = t[i - 1][ncl] + ncol * ndep;
		for (j = ncl + 1; j <= nch; j++)
			t[i][j] = t[i][j - 1] + ndep;
@
