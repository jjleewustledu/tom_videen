head	2.3;
access;
symbols;
locks; strict;
comment	@ * @;


2.3
date	2004.08.31.14.42.32;	author tom;	state Exp;
branches;
next	;


desc
@@


2.3
log
@*** empty log message ***
@
text
@/*	$Id$
	$Log$ */
/*	========================================================================
 *	Module:			d3tensor.c
 *	Date:			Aug 2004
 *	Author:			Tom Videen
 *	Description:	Allocate a 3D tensor of doubles
 *					with range t[nzl..nzh][nyl..nyh][nxl..nxh]
 *	========================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libmatrix/RCS/d3tensor.c,v 2.2 2004/02/12 22:12:27 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#define NR_END 1

double        ***d3tensor (nzl, nzh, nyl, nyh, nxl, nxh)
	long            nzl, nzh, nyl, nyh, nxl, nxh;

{
	long            i, j;
	long            npln = nzh - nzl + 1;
	long            nrow = nyh - nyl + 1;
	long            ncol = nxh - nxl + 1;
	double       ***t;

/* allocate pointers to pointers to planes */

	t = (double ***) malloc ((unsigned int) ((npln + NR_END) * sizeof (double **)));
	if (!t) {
		fprintf (stdout, "ERROR: allocation failure 1 in d3tensor()\n");
		return (NULL);
	}
	t += NR_END;
	t -= nzl;

/* allocate pointers to rows and set pointers to them */

	t[nzl] = (double **) malloc ((unsigned int) ((npln * nrow + NR_END) * sizeof (double *)));
	if (!t[nzl]) {
		fprintf (stdout, "ERROR: allocation failure 2 in d3tensor()\n");
		free (t);
		return (NULL);
	}
	t[nzl] += NR_END;
	t[nzl] -= nyl;

/* allocate rows and set pointers to them */

	t[nzl][nyl] = (double *) malloc ((unsigned int) ((npln * nrow * ncol + NR_END) * sizeof (double)));
	if (!t[nzl][nyl]) {
		fprintf (stdout, "ERROR: allocation failure 3 in d3tensor()\n");
		free (t[nzl][nyl]);
		free (t);
		return (NULL);
	}
	t[nzl][nyl] += NR_END;
	t[nzl][nyl] -= nxl;

	for (j = nyl + 1; j <= nyh; j++)
		t[nzl][j] = t[nzl][j - 1] + ncol;
	for (i = nzl + 1; i <= nzh; i++) {
		t[i] = t[i - 1] + nrow;
		t[i][nyl] = t[i - 1][nyl] + nrow * ncol;
		for (j = nyl + 1; j <= nyh; j++)
			t[i][j] = t[i][j - 1] + ncol;
	}

/* return pointer to array of pointers to planes */

	return t;
}
@
