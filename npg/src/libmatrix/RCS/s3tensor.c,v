head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	95.07.28.15.09.44;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	95.07.28.14.53.07;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.07.24.19.30.33;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@/*	$Id: s3tensor.c,v 1.2 1995/07/28 14:53:07 tom Exp tom $
	$Log: s3tensor.c,v $
 * Revision 1.2  1995/07/28  14:53:07  tom
 * *** empty log message ***
 *
 * Revision 1.2  1995/07/28  14:46:01  tom
 * debugged
 *
 * Revision 1.1  1995/07/24  20:53:14  tom
 * Initial revision
 * */
/*	========================================================================
 *	Module:			s3tensor.c
 *	Date:			28-Jul-95
 *	Author:			Tom Videen
 *	Description:	Allocate a 3D tensor of short integers
 *					with range t[nzl..nzh][nyl..nyh][nxl..nxh]
 *	========================================================================
 */
#include <stdio.h>
#define NR_END 1

static char     rcsid[] = "$Header: /export/home/npggw/tom/src/libmatrix/RCS/s3tensor.c,v 1.2 1995/07/28 14:53:07 tom Exp tom $";

short        ***s3tensor (nzl, nzh, nyl, nyh, nxl, nxh)
	long            nzl, nzh, nyl, nyh, nxl, nxh;

{
	long            i, j;
	long            npln = nzh - nzl + 1;
	long            nrow = nyh - nyl + 1;
	long            ncol = nxh - nxl + 1;
	short        ***t;

/* allocate pointers to pointers to planes */

	t = (short ***) malloc ((unsigned int) ((npln + NR_END) * sizeof (short **)));
	if (!t) {
		fprintf (stdout, "ERROR: allocation failure 1 in s3tensor()\n");
		exit (1);
	}
	t += NR_END;
	t -= nzl;

/* allocate pointers to rows and set pointers to them */

	t[nzl] = (short **) malloc ((unsigned int) ((npln * nrow + NR_END) * sizeof (short *)));
	if (!t[nzl]) {
		fprintf (stdout, "ERROR: allocation failure 2 in s3tensor()\n");
		exit (1);
	}
	t[nzl] += NR_END;
	t[nzl] -= nyl;

/* allocate rows and set pointers to them */

	t[nzl][nyl] = (short *) malloc ((unsigned int) ((npln * nrow * ncol + NR_END) * sizeof (short)));
	if (!t[nzl][nyl]) {
		fprintf (stdout, "ERROR: allocation failure 3 in s3tensor()\n");
		exit (1);
	}
	t[nzl][nyl] += NR_END;
	t[nzl][nyl] -= nxl;

	for (j = nyl + 1; j <= nyh; j++)
		t[nzl][j] = t[nzl][j - 1] + ncol;
	for (i = nzl + 1; i <= nzh; i++) {
		t[i] = t[i - 1] + nrow;
		t[i][nyl] = t[i - 1][nyl] + nrow * ncol;
		for (j = nyl + 1; j <= nyh; j++)
			t[i][j] = t[i][j - 1] + ncol;
	}

/* return pointer to array of pointers to planes */

	return t;
}
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: s3tensor.c,v 1.2 1995/07/28 14:46:01 tom Exp tom $
d3 3
d17 1
a17 1
 *					with range t[nzl..nzh][nxl..nxh][nyl..nyh]
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libmatrix/RCS/s3tensor.c,v 1.2 1995/07/28 14:46:01 tom Exp tom $";
d25 2
a26 2
short        ***s3tensor (nzl, nzh, nxl, nxh, nyl, nyh)
	long            nzl, nzh, nxl, nxh, nyl, nyh;
d30 3
a32 3
	long            ndep = nzh - nzl + 1;
	long            nrow = nxh - nxl + 1;
	long            ncol = nyh - nyl + 1;
d35 1
a35 1
/* allocate pointers to pointers to rows */
d37 1
a37 1
	t = (short ***) malloc ((unsigned int) ((ndep + NR_END) * sizeof (short **)));
d47 1
a47 1
	t[nzl] = (short **) malloc ((unsigned int) ((ndep * nrow + NR_END) * sizeof (short *)));
d53 1
a53 1
	t[nzl] -= nxl;
d57 2
a58 2
	t[nzl][nxl] = (short *) malloc ((unsigned int) ((ndep * nrow * ncol + NR_END) * sizeof (short)));
	if (!t[nzl][nxl]) {
d62 2
a63 2
	t[nzl][nxl] += NR_END;
	t[nzl][nxl] -= nyl;
d65 1
a65 1
	for (j = nxl + 1; j <= nxh; j++)
d69 2
a70 2
		t[i][nxl] = t[i - 1][nxl] + nrow * ncol;
		for (j = nxl + 1; j <= nxh; j++)
d74 1
a74 1
/* return pointer to array of pointers to rows */
@


1.1
log
@Initial revision
@
text
@d1 8
a8 2
/*	$Id$
	$Log$ */
d11 1
a11 1
 *	Date:			24-Jul-95
d14 1
a14 1
 *					with range t[nrl..nrh][ncl..nch][ndl..ndh]
d20 1
a20 1
static char     rcsid[] = "$Header$";
d22 2
a23 2
short        ***s3tensor (nrl, nrh, ncl, nch, ndl, ndh)
	long            nch, ncl, ndh, ndl, nrh, nrl;
d27 3
a29 3
	long            nrow = nrh - nrl + 1;
	long            ncol = nch - ncl + 1;
	long            ndep = ndh - ndl + 1;
d34 1
a34 1
	t = (short ***) malloc ((unsigned int) ((nrow + NR_END) * sizeof (short **)));
d40 1
a40 1
	t -= nrl;
d44 2
a45 2
	t[nrl] = (short **) malloc ((unsigned int) ((nrow * ncol + NR_END) * sizeof (short *)));
	if (!t[nrl]) {
d49 2
a50 7
	t[nrl] = (short **) malloc ((unsigned int) ((nrow * ncol + NR_END) * sizeof (short *)));
	if (!t[nrl]) {
		fprintf (stdout, "ERROR: allocation failure 2 in s3tensor()\n");
		exit (1);
	}
	t[nrl] += NR_END;
	t[nrl] -= ncl;
d54 2
a55 2
	t[nrl][ncl] = (short *) malloc ((unsigned int) ((nrow * ncol * ndep + NR_END) * sizeof (short)));
	if (!t[nrl][ncl]) {
d59 2
a60 2
	t[nrl][ncl] += NR_END;
	t[nrl][ncl] -= ndl;
d62 7
a68 7
	for (j = ncl + 1; j <= nch; j++)
		t[nrl][j] = t[nrl][j - 1] + ndep;
	for (i = nrl + 1; i <= nrh; i++) {
		t[i] = t[i - 1] + ncol;
		t[i][ncl] = t[i - 1][ncl] + ncol * ndep;
		for (j = ncl + 1; j <= nch; j++)
			t[i][j] = t[i][j - 1] + ndep;
@
