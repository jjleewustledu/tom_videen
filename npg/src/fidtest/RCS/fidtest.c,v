head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2005.09.14.16.58.52;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.14.16.51.02;	author tom;	state Exp;
branches;
next	;


desc
@cross at 127.5, 127.5, 63.5
@


1.2
log
@integral voxel at 128.0, 128.0, 64.0
@
text
@/*	$Log: fidtest.c,v $
 * Revision 1.1  2005/09/14  16:51:02  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:		fidtest.c
 *	Date:		Sep 2005
 *	Author:		Tom Videen
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidtest/RCS/fidtest.c,v 1.1 2005/09/14 16:51:02 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <nrutil.h>
#include <matrixlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			fidtest
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            x0, y0, z0;
	long            i, j, k;
	int             ntype;

	short        ***simg;			 /* image array and frequency spectrum */
	short          *row;			 /* single row of input image */
	short           bkg, set;

	if (argc != 5) {
		fprintf (stdout, "Usage: fidtest img1 hdr1 img2 hdr2\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [fidtest]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [fidtest]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [fidtest]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	ntype = hdr.dime.datatype;
	if (ntype != 4) {
		fprintf (stderr, "ERROR [fidtest]: reading %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", ntype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [fidtest]: reading %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

	row = (short *) calloc (dim1, sizeof (short));
	if (row == NULL) {
		fprintf (stderr, "ERROR [fidtest]: calloc row\n");
		return (ERROR);
	}
	simg = s3tensor (1, dim3, 1, dim2, 1, dim1);
	if (simg == NULL) {
		fprintf (stderr, "ERROR [fidtest]: malloc simg\n");
		return (ERROR);
	}

/*	Conversion to image coordinates	*/

	x0 = dim1+1 - 128;
	y0 = dim2+1 - 128;
	z0 = dim3+1 - 64;

	bkg = 500;
	set = 0;

	for (k = 1; k <= dim3; k++) 
		for (j = 1; j <= dim2; j++)
			for (i = 1; i <= dim1; i++)
				simg[k][j][i] = bkg;
/*	AP Box	-----------------------	*/
	simg[z0][y0+2][x0] = set;
	simg[z0][y0+1][x0] = set;
	simg[z0][y0][x0] = set;
	simg[z0][y0-1][x0] = set;
	simg[z0][y0-2][x0] = set;

/*	LR Box	-----------------------	*/
	simg[z0][y0][x0+2] = set;
	simg[z0][y0][x0+1] = set;
	simg[z0][y0][x0-1] = set;
	simg[z0][y0][x0-2] = set;

/*	UD Box	-----------------------	*/
	simg[z0+2][y0][x0] = set;
	simg[z0+1][y0][x0] = set;
	simg[z0-1][y0][x0] = set;
	simg[z0-2][y0][x0] = set;

/*	------------------------
 *	Right, posterior, bottom
	simg[z0][y0][1] = set;
	simg[z0][1][x0] = set;
	simg[1][y0][x0] = set;

 *	Left, anterior, top 
	simg[z0][y0][dim1] = set;
	simg[z0][dim2][x0] = set;
	simg[dim3][y0][x0] = set;
 */

	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [fidtest]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [fidtest]: writing %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [fidtest]: opening %s\n", img2);
		return (ERROR);
	}
	for (k = 1; k <= dim3; k++) {
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++)
				row[i-1] = simg[k][j][i];
			if (fwrite (row, sizeof (short), dim1, fd_img) != dim1) {
				fprintf (stderr, "ERROR [fidtest]: writing %s\n", img2);
				return (ERROR);
			}
		}
	}

	(void) fclose (fd_img);
	free_s3tensor (simg, 1, dim3, 1, dim2, 1, dim1);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fidtest/RCS/fidtest.c,v 1.4 2005/05/04 13:29:05 tom Exp $";
d102 2
a103 2
	bkg = 0;
	set = 500;
a109 5
	simg[z0][y0+3][x0] = set;
	simg[z0+1][y0+3][x0] = set;
	simg[z0][y0+3][x0+1] = set;
	simg[z0+1][y0+3][x0+1] = set;

a110 4
	simg[z0+1][y0+2][x0] = set;
	simg[z0][y0+2][x0+1] = set;
	simg[z0+1][y0+2][x0+1] = set;

a111 4
	simg[z0+1][y0+1][x0] = set;
	simg[z0][y0+1][x0+1] = set;
	simg[z0+1][y0+1][x0+1] = set;

a112 4
	simg[z0+1][y0][x0] = set;
	simg[z0][y0][x0+1] = set;
	simg[z0+1][y0][x0+1] = set;

a113 4
	simg[z0+1][y0-1][x0] = set;
	simg[z0][y0-1][x0+1] = set;
	simg[z0+1][y0-1][x0+1] = set;

a114 3
	simg[z0+1][y0-2][x0] = set;
	simg[z0][y0-2][x0+1] = set;
	simg[z0+1][y0-2][x0+1] = set;
d117 3
a120 3
	simg[z0][y0+1][x0-2] = set;
	simg[z0+1][y0][x0-2] = set;
	simg[z0+1][y0+1][x0-2] = set;
a121 15
	simg[z0][y0][x0-1] = set;
	simg[z0][y0+1][x0-1] = set;
	simg[z0+1][y0][x0-1] = set;
	simg[z0+1][y0+1][x0-1] = set;

	simg[z0][y0][x0+2] = set;
	simg[z0][y0+1][x0+2] = set;
	simg[z0+1][y0][x0+2] = set;
	simg[z0+1][y0+1][x0+2] = set;

	simg[z0][y0][x0+3] = set;
	simg[z0][y0+1][x0+3] = set;
	simg[z0+1][y0][x0+3] = set;
	simg[z0+1][y0+1][x0+3] = set;

a122 4
	simg[z0+3][y0][x0] = set;
	simg[z0+3][y0+1][x0] = set;
	simg[z0+3][y0][x0+1] = set;
	simg[z0+3][y0+1][x0+1] = set;
d124 1
a124 3
	simg[z0+2][y0+1][x0] = set;
	simg[z0+2][y0][x0+1] = set;
	simg[z0+2][y0+1][x0+1] = set;
a125 3
	simg[z0-1][y0+1][x0] = set;
	simg[z0-1][y0][x0+1] = set;
	simg[z0-1][y0+1][x0+1] = set;
a126 3
	simg[z0-2][y0+1][x0] = set;
	simg[z0-2][y0][x0+1] = set;
	simg[z0-2][y0+1][x0+1] = set;
@
