head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2010.07.27.14.33.10;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2009.02.20.16.08.55;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@switch pixdim
@
text
@/*	$Log: merge_coronal_planes.c,v $
 * Revision 1.1  2009/02/20  16:08:55  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			merge_coronal_planes.c
 *	Date:			Feb 2009
 *	Author:			Tom Videen
 *	Description:	Merge single-slice coronal files into a 3D Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/merge_coronal_planes/RCS/merge_coronal_planes.c,v 1.1 2009/02/20 16:08:55 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <myvalues.h>
#include <ANALYZE.h>

int             main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_in;			 /* file for ANALYZE image */
	FILE           *fd_out;			 /* file for ANALYZE image */
	char           *in;			 /* input root */
	char            img1[256], hdr1[256];	 /* input file */
	char           *img2, *hdr2;		 /* input file */
	char            str[5];
	int             first, last;
	float			pix1, pix2, pix3;
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            x, y, z, n, anan;
	long            pln, num, npln;
	short          *img;
	short          *arr;

	if (argc != 5) {
		printf ("Usage: merge_coronal_planes root nplanes img2 hdr2\n");
		return (ERROR);
	}
	in = argv[1];
	dim2 = atoi(argv[2]);
	hdr2 = argv[3];
	img2 = argv[4];

/*	Read one input header */

	(void) strcpy (hdr1, in);
	(void) strcat (hdr1, "1.hdr");
	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [merge_coronal_planes]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [merge_coronal_planes]: reading %s\n", hdr1);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim3 = hdr.dime.dim[2];
	pix1 = hdr.dime.pixdim[1];
	pix2 = hdr.dime.pixdim[2];
	pix3 = hdr.dime.pixdim[3];
	(void) fclose (fd_hdr);

/*	Write output header */

	hdr.dime.dim[2] = dim2;
	hdr.dime.dim[3] = dim3;
	hdr.dime.pixdim[2] = pix3;
	hdr.dime.pixdim[3] = pix2;
	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [merge_coronal_planes]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [merge_coronal_planes]: writing %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

/*	Read each coronal plane into 3D image */

	pln = dim1 * dim3;
	arr = (short *) calloc (pln, sizeof (short));
	if (arr == NULL) {
		fprintf (stderr, "ERROR [merge_coronal_planes]: calloc arr\n");
		return (ERROR);
	}
	num = dim1 * dim2 * dim3;
	img = (short *) calloc (num, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [merge_coronal_planes]: calloc img\n");
		return (ERROR);
	}
	(void) strcpy (str, "");
	for (y = 1; y <= dim2; y++) {
		(void) sprintf (str, "%ld", y);
		(void) strcpy (img1, in);
		(void) strcat (img1, str);
		(void) strcat (img1, ".img");
		if ((fd_in = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [merge_coronal_planes]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (arr, sizeof (short), pln, fd_in)) != pln) {
			fprintf (stderr, "ERROR [merge_coronal_planes]: reading %s\n", img1);
			return (ERROR);
		}
		n = 0;
		for (z = 1; z <= dim3; z++) {
			for (x = 1; x <= dim1; x++) {
				anan = (dim3-z)*dim1*dim2 + (y-1)*dim1 + (dim1-x+1);
				img[num-anan] = arr[n];
				n = n + 1;
			}
		}

		(void) fclose (fd_in);
	}

/*	Write output image */

	if ((fd_out = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [merge_coronal_planes]: opening %s\n", img2);
		return (ERROR);
	}
	if ((fwrite (img, sizeof (short), num, fd_out)) != num) {
		fprintf (stderr, "ERROR [merge_coronal_planes]: writing %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_out);
	free (arr);
	free (img);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/merge_coronal_planes/RCS/merge_slices.c,v 1.3 2004/02/16 21:48:55 tom Exp $";
d36 1
d66 3
d75 2
@
