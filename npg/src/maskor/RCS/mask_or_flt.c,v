head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2005.06.30.17.01.19;	author tom;	state Exp;
branches;
next	;


desc
@read/write floats
@


1.7
log
@read/write floats
@
text
@/* $Log$ */
/*  ================================================================================
 *  File Name:      mask_or_flt.c
 *  Date:           Jun 2005
 *  Author:         Tom Videen
 *  Description:    Version of mask_or for floating point.
 *  =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/mask_or.c,v 1.6 2004/02/16 20:55:35 tom Exp tom $";
#endif

#include <stdio.h>

void            mask_or_flt (img, set, val, min, max, dim1, dim2, dim3, pln, xmin, xmax, ymin, ymax, npixels)
	float        ***img;			 /* masked image */
	short        ***set;			 /* pixels masked */
	float			val;			 /* set to this value */
	float           min, max;		 /* range to identify */
	long            dim1, dim2, dim3;	 /* dimensions of img and set */
	long            pln;
	long           *xmin, *xmax;	 /* range to search */
	long           *ymin, *ymax;	 /* range to search */
	long           *npixels;		 /* total pixels within mask */
{
	long            lastpln;
	long            xmin0 = 0;	 /* range to search in loop */
	long            xmax0 = 0;
	long            ymin0 = 0;
	long            ymax0 = 0;
	long            i, j, k;
	long			npix;
	int             more;

	fprintf (stdout, "Plane   Pixels Masked\n");
	while (pln <= dim3) {
		npix = 0;
		more = 1;
		while (more) {
			more = 0;
			xmin0 = *xmin;
			xmax0 = *xmax;
			ymin0 = *ymin;
			ymax0 = *ymax;
			for (j = ymin0; j <= ymax0; j++) {
				for (i = xmin0; i <= xmax0; i++) {
					if (set[pln][j][i]) {
						if (j > 1) {
							k = j - 1;
							if (set[pln][k][i] == 0) {
								if (img[pln][k][i] < min || img[pln][k][i] > max) {
									set[pln][k][i] = 1;
									img[pln][k][i] = val;
									npix++;
									more = 1;
									if (k < *ymin)
										*ymin = k;
								}
							}
						}
						if (j < dim2) {
							k = j + 1;
							if (set[pln][k][i] == 0) {
								if (img[pln][k][i] < min || img[pln][k][i] > max) {
									set[pln][k][i] = 1;
									img[pln][k][i] = val;
									npix++;
									more = 1;
									if (k > *ymax)
										*ymax = k;
								}
							}
						}
						if (i > 1) {
							k = i - 1;
							if (set[pln][j][k] == 0) {
								if (img[pln][j][k] < min || img[pln][j][k] > max) {
									set[pln][j][k] = 1;
									img[pln][j][k] = val;
									npix++;
									more = 1;
									if (k < *xmin)
										*xmin = k;
								}
							}
						}
						if (i < dim1) {
							k = i + 1;
							if (set[pln][j][k] == 0) {
								if (img[pln][j][k] < min || img[pln][j][k] > max) {
									set[pln][j][k] = 1;
									img[pln][j][k] = val;
									npix++;
									more = 1;
									if (k > *xmax)
										*xmax = k;
								}
							}
						}
					}
				}
			}
		}		/* end more loop for current pln */
		lastpln = pln;
		pln++;
		if (pln <= dim3) {		/* set any adjacent pixels in next pln */
			for (j = ymin0; j <= ymax0; j++) {
				for (i = xmin0; i <= xmax0; i++) {
					if (set[lastpln][j][i]) {
						if (set[pln][j][i] == 0) {
							if (img[pln][j][i] < min || img[pln][j][i] > max) {
								set[pln][j][i] = 1;
								img[pln][j][i] = val;
								npix++;
							}
						}
					}
				}
			}
		}
		fprintf (stderr, "z =%3li %11li\n", lastpln, npix);
		*npixels += npix;
	}
}
@
