head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2005.06.30.17.01.19;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.16.20.55.35;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.27.15.46.32;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.12.15.16.17;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.03.15.16.12.10;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.01.20.13.51;	author tom;	state Exp;
branches;
next	;


desc
@@


1.7
log
@read/write floats
@
text
@/* $Log: mask_or.c,v $
 * Revision 1.6  2004/02/16  20:55:35  tom
 * Feb 2004
 *
 * Revision 1.4  2002/11/27  15:46:32  tom
 * *** empty log message ***
 *
 * Revision 1.3  2001/07/12  15:16:17  tom
 * fprint modifications
 *
 * Revision 1.2  1999/03/15  16:12:10  tom
 * change <=min and >=max to <min and >max
 *
 * Revision 1.1  1999/02/01  20:13:51  tom
 * Initial revision
 * */
/*  ================================================================================
 *  File Name:      mask_or.c
 *  Date:           Jan 1999
 *  Author:         Tom Videen
 *  Description:    Set to val all pixels which are < min OR > max.
 *					which are connected to a seed (identified in set).
 *					Total pixels in the mask are returned in npixels.
 *  =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/mask_or.c,v 1.6 2004/02/16 20:55:35 tom Exp tom $";
#endif

#include <stdio.h>

void            mask_or (img, set, val, min, max, dim1, dim2, dim3, pln, xmin, xmax, ymin, ymax, npixels)
	short        ***img;			 /* masked image */
	short        ***set;			 /* pixels masked */
	short			val;			 /* set to this value */
	short           min, max;		 /* range to identify */
	long            dim1, dim2, dim3;	 /* dimensions of img and set */
	long            pln;
	long           *xmin, *xmax;	 /* range to search */
	long           *ymin, *ymax;	 /* range to search */
	long           *npixels;		 /* total pixels within mask */
{
	long            lastpln;
	long            xmin0 = 0;	 /* range to search in loop */
	long            xmax0 = 0;
	long            ymin0 = 0;
	long            ymax0 = 0;
	long            i, j, k;
	long			npix;
	int             more;

	fprintf (stdout, "Plane   Pixels Masked\n");
	while (pln <= dim3) {
		npix = 0;
		more = 1;
		while (more) {
			more = 0;
			xmin0 = *xmin;
			xmax0 = *xmax;
			ymin0 = *ymin;
			ymax0 = *ymax;
			for (j = ymin0; j <= ymax0; j++) {
				for (i = xmin0; i <= xmax0; i++) {
					if (set[pln][j][i]) {
						if (j > 1) {
							k = j - 1;
							if (set[pln][k][i] == 0) {
								if (img[pln][k][i] < min || img[pln][k][i] > max) {
									set[pln][k][i] = 1;
									img[pln][k][i] = val;
									npix++;
									more = 1;
									if (k < *ymin)
										*ymin = k;
								}
							}
						}
						if (j < dim2) {
							k = j + 1;
							if (set[pln][k][i] == 0) {
								if (img[pln][k][i] < min || img[pln][k][i] > max) {
									set[pln][k][i] = 1;
									img[pln][k][i] = val;
									npix++;
									more = 1;
									if (k > *ymax)
										*ymax = k;
								}
							}
						}
						if (i > 1) {
							k = i - 1;
							if (set[pln][j][k] == 0) {
								if (img[pln][j][k] < min || img[pln][j][k] > max) {
									set[pln][j][k] = 1;
									img[pln][j][k] = val;
									npix++;
									more = 1;
									if (k < *xmin)
										*xmin = k;
								}
							}
						}
						if (i < dim1) {
							k = i + 1;
							if (set[pln][j][k] == 0) {
								if (img[pln][j][k] < min || img[pln][j][k] > max) {
									set[pln][j][k] = 1;
									img[pln][j][k] = val;
									npix++;
									more = 1;
									if (k > *xmax)
										*xmax = k;
								}
							}
						}
					}
				}
			}
		}		/* end more loop for current pln */
		lastpln = pln;
		pln++;
		if (pln <= dim3) {		/* set any adjacent pixels in next pln */
			for (j = ymin0; j <= ymax0; j++) {
				for (i = xmin0; i <= xmax0; i++) {
					if (set[lastpln][j][i]) {
						if (set[pln][j][i] == 0) {
							if (img[pln][j][i] < min || img[pln][j][i] > max) {
								set[pln][j][i] = 1;
								img[pln][j][i] = val;
								npix++;
							}
						}
					}
				}
			}
		}
		fprintf (stderr, "z =%3li %11li\n", lastpln, npix);
		*npixels += npix;
	}
}
@


1.6
log
@Feb 2004
@
text
@d2 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/mask_or.c,v 1.4 2002/11/27 15:46:32 tom Exp tom $";
@


1.4
log
@*** empty log message ***
@
text
@d2 3
d16 1
a16 1
 *  Date:           Jan-99
d23 1
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/mask_or.c,v 1.3 2001/07/12 15:16:17 tom Exp tom $";
@


1.3
log
@fprint modifications
@
text
@d2 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/mask_or.c,v 1.2 1999/03/15 16:12:10 tom Exp tom $";
d38 4
a41 2
	long            xmin0, xmax0;	 /* range to search in loop */
	long            ymin0, ymax0;	 /* range to search in loop */
d132 1
a132 1
		fprintf (stderr, "z =%3i %11i\n", lastpln, npix);
@


1.2
log
@change <=min and >=max to <min and >max
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/mask_or.c,v 1.1 1999/02/01 20:13:51 tom Exp tom $";
d41 1
a41 1
	printf ("Plane   Pixels Masked\n");
d127 1
a127 1
		printf ("z =%3i %11i\n", lastpln, npix);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d9 1
a9 1
 *  Description:    Set to val all pixels which are <= min OR >= max.
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/mask_or.c,v 1.1 1999/01/15 14:53:27 tom Exp tom $";
d54 1
a54 1
								if (img[pln][k][i] <= min || img[pln][k][i] >= max) {
d67 1
a67 1
								if (img[pln][k][i] <= min || img[pln][k][i] >= max) {
d80 1
a80 1
								if (img[pln][j][k] <= min || img[pln][j][k] >= max) {
d93 1
a93 1
								if (img[pln][j][k] <= min || img[pln][j][k] >= max) {
d114 1
a114 1
							if (img[pln][j][i] <= min || img[pln][j][i] >= max) {
@
