head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2005.06.30.17.01.19;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.16.20.55.35;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.27.15.46.32;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.12.15.16.17;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.12.02.20.47.42;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.03.15.16.12.10;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.01.20.13.51;	author tom;	state Exp;
branches;
next	;


desc
@@


1.7
log
@read/write floats
@
text
@/*	$Log: maskor.c,v $
 * Revision 1.6  2004/02/16  20:55:35  tom
 * Feb 2004
 *
 * Revision 1.5  2002/11/27  15:46:32  tom
 * *** empty log message ***
 *
 * Revision 1.4  2001/07/12  15:16:17  tom
 * fprint modifications
 *
 * Revision 1.3  1999/12/02  20:47:42  tom
 * add message
 *
 * Revision 1.2  1999/03/15  16:12:10  tom
 * change <=min and >=max to <min and >max
 *
 * Revision 1.1  1999/02/01  20:13:51  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			maskor.c
 *	Date:			Jan 1999
 *	Author:			Tom Videen
 *	Description:	Set to val all pixels which are < min OR > max.
 *					If seed != [0,0,0] mask only pixels connected to it.
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/maskor.c,v 1.6 2004/02/16 20:55:35 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <image.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			maskor
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	void            mask_or ();
	void            mask_or_all ();
	void            mask_or_flt ();
	void            mask_or_all_flt ();
	FILE           *fp;			 /* file pointer */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            x, y, z;
	long            i, j, k;
	long            pln;
	long            xmin, xmax, ymin, ymax;
	short           min, max;		 /* include all < or > these pixel values */
	short           val;			 /* set pixels to this value */
	short        ***img;			 /* image */
	short        ***set;			 /* pixels set if in skull */
	short          *row;			 /* single row of input image */
	float           fmin, fmax;
	float           fval;
	float        ***fimg;
	float          *frow;
	long            npixels = 0;
	int             ntype;

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 8 && argc != 11) {
		printf ("Usage: maskor img1 hdr1 img2 hdr2 min max val [x y z]\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	min = atoi (argv[5]);
	max = atoi (argv[6]);
	val = atoi (argv[7]);
	x = atoi (argv[8]);
	y = atoi (argv[9]);
	z = atoi (argv[10]);
	fmin = atof (argv[5]);
	fmax = atof (argv[6]);
	fval = atof (argv[7]);

/*
 * Read Analyze hdr file
 */

	if ((fp = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [maskor]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fp)) != 1) {
		fprintf (stderr, "ERROR [maskor]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [maskor]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	ntype = hdr.dime.datatype;
	if (ntype != 4 && ntype != 16) {
		fprintf (stderr, "ERROR [maskor]: reading %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", ntype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16 && hdr.dime.bitpix != 32) {
		fprintf (stderr, "ERROR [maskor]: reading %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fp);

	if (x > dim1 || y > dim2 || z > dim3 || x < 0 || y < 0 || z < 0) {
		fprintf (stderr, "ERROR [maskor]: seed point not in image: [%ld %ld %ld]\n", x, y, z);
		return (ERROR);
	}
	if ((fp = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [maskor]: opening %s\n", img1);
		return (ERROR);
	}
/*	Read short img */

	if (ntype == 4) {

		if ((img = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
			fprintf (stderr, "ERROR [maskor]: calloc img\n");
			return (ERROR);
		}
		if (NULL == (row = (short *) calloc (dim1, sizeof (short)))) {
			fprintf (stderr, "ERROR [maskor]: malloc row\n");
			return (ERROR);
		}
		for (i = dim3; i > 0; i--) {
			for (j = dim2; j > 0; j--) {
				if ((fread (row, sizeof (short), dim1, fp)) != dim1) {
					fprintf (stderr, "ERROR [maskor]: reading %s\n", img1);
					return (ERROR);
				}
				for (k = 1; k <= dim1; k++)
					img[i][j][dim1 - (k - 1)] = row[k - 1];
			}
		}
		(void) fclose (fp);

/*	Mask it */

		if (z > 0) {
			if (img[z][y][x] > min && img[z][y][x] < max) {
				fprintf (stderr, "ERROR [maskor]: seed value (%i) is not outside the specified range [%i : %i]\n",
					 img[z][y][x], min, max);
				return (ERROR);
			}
			if ((set = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
				fprintf (stderr, "ERROR [maskor]: calloc set\n");
				return (ERROR);
			}
			set[z][y][x] = 1;
			xmin = x;
			xmax = x;
			ymin = y;
			ymax = y;
			pln = z;
			mask_or (img, set, val, min, max, dim1, dim2, dim3, pln, &xmin, &xmax, &ymin, &ymax, &npixels);
		} else {
			mask_or_all (img, val, min, max, dim1, dim2, dim3, &npixels);
		}
		printf ("Total Masked Pixels = %li  (set to %d)\n", npixels, val);

/* Write output */

		if ((fp = fopen (hdr2, "w")) == 0) {
			fprintf (stderr, "ERROR [maskor]: creating ANALYZE header %s\n", hdr2);
			return (ERROR);
		}
		if ((fwrite (&hdr, sizeof (struct dsr), 1, fp)) != 1) {
			fprintf (stderr, "ERROR [maskor]: writing %s\n", hdr2);
			return (ERROR);
		}
		(void) fclose (fp);

		if ((fp = fopen (img2, "w")) == 0) {
			fprintf (stderr, "ERROR [maskor]: creating ANALYZE image %s\n", img2);
			return (ERROR);
		}
		for (i = dim3; i > 0; i--) {
			for (j = dim2; j > 0; j--) {
				for (k = 1; k <= dim1; k++)
					row[k - 1] = img[i][j][dim1 - (k - 1)];
				if ((fwrite (row, sizeof (short), dim1, fp)) != dim1) {
					fprintf (stderr, "ERROR [maskor]: writing %s\n", img2);
					return (ERROR);
				}
			}
		}

		free_s3tensor (img, 1, dim3, 1, dim2, 1, dim1);
		if (z > 0)
			free_s3tensor (set, 1, dim3, 1, dim2, 1, dim1);
		free (row);

/*	Read float img */

	} else {

		if ((fimg = f3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
			fprintf (stderr, "ERROR [maskor]: calloc fimg\n");
			return (ERROR);
		}
		if (NULL == (frow = (float *) calloc (dim1, sizeof (float)))) {
			fprintf (stderr, "ERROR [maskor]: malloc frow\n");
			return (ERROR);
		}
		for (i = dim3; i > 0; i--) {
			for (j = dim2; j > 0; j--) {
				if ((fread (frow, sizeof (float), dim1, fp)) != dim1) {
					fprintf (stderr, "ERROR [maskor]: reading %s\n", img1);
					return (ERROR);
				}
				for (k = 1; k <= dim1; k++)
					fimg[i][j][dim1 - (k - 1)] = frow[k - 1];
			}
		}
		(void) fclose (fp);

/*	Mask it */

		if (z > 0) {
			if (fimg[z][y][x] > fmin && fimg[z][y][x] < fmax) {
				fprintf (stderr, "ERROR [maskor]: seed value (%f) is not outside the specified range [%f : %f]\n",
					 fimg[z][y][x], fmin, fmax);
				return (ERROR);
			}
			if ((set = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
				fprintf (stderr, "ERROR [maskor]: calloc set\n");
				return (ERROR);
			}
			set[z][y][x] = 1;
			xmin = x;
			xmax = x;
			ymin = y;
			ymax = y;
			pln = z;
			mask_or_flt (fimg, set, fval, fmin, fmax, dim1, dim2, dim3, pln, &xmin, &xmax, &ymin, &ymax, &npixels);
		} else {
			mask_or_all_flt (fimg, fval, fmin, fmax, dim1, dim2, dim3, &npixels);
		}
		printf ("Total Masked Pixels = %li  (set to %f)\n", npixels, fval);

/* Write output */

		if ((fp = fopen (hdr2, "w")) == 0) {
			fprintf (stderr, "ERROR [maskor]: creating ANALYZE header %s\n", hdr2);
			return (ERROR);
		}
		if ((fwrite (&hdr, sizeof (struct dsr), 1, fp)) != 1) {
			fprintf (stderr, "ERROR [maskor]: writing %s\n", hdr2);
			return (ERROR);
		}
		(void) fclose (fp);

		if ((fp = fopen (img2, "w")) == 0) {
			fprintf (stderr, "ERROR [maskor]: creating ANALYZE image %s\n", img2);
			return (ERROR);
		}
		for (i = dim3; i > 0; i--) {
			for (j = dim2; j > 0; j--) {
				for (k = 1; k <= dim1; k++)
					frow[k - 1] = fimg[i][j][dim1 - (k - 1)];
				if ((fwrite (frow, sizeof (float), dim1, fp)) != dim1) {
					fprintf (stderr, "ERROR [maskor]: writing %s\n", img2);
					return (ERROR);
				}
			}
		}

		free_f3tensor (fimg, 1, dim3, 1, dim2, 1, dim1);
		if (z > 0)
			free_s3tensor (set, 1, dim3, 1, dim2, 1, dim1);
		free (frow);
	}

	(void) fclose (fp);
	printf ("Converted: %s to %s\n", img1, img2);
	return (OK);
}
@


1.6
log
@Feb 2004
@
text
@d2 3
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/maskor.c,v 1.5 2002/11/27 15:46:32 tom Exp tom $";
d53 6
a58 4
	FILE           *fp;				 /* file pointer */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	long            dim1, dim2, dim3; /* dimensions of image */
d68 4
d73 1
d93 3
d102 1
a102 1
		fprintf (stderr, "ERROR [maskor]: Cannot open: %s\n", hdr1);
d106 1
a106 1
		fprintf (stderr, "ERROR [maskor]: Reading: %s\n", hdr1);
d110 1
a110 1
		fprintf (stderr, "ERROR [maskor]: Reading: %s\n", hdr1);
d114 4
a117 3
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [maskor]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
d120 2
a121 2
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [maskor]: Reading: %s\n", hdr1);
a133 3

/*	Read img */

d135 1
a135 1
		fprintf (stderr, "ERROR [maskor]: Cannot open: %s\n", img1);
d138 20
a157 13
	if ((img = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [maskor]: Cannot calloc img\n");
		return (ERROR);
	}
	if (NULL == (row = (short *) calloc (dim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [maskor]: Cannot malloc memory for row\n");
		return (ERROR);
	}
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			if ((fread (row, sizeof (short), dim1, fp)) != dim1) {
				fprintf (stderr, "ERROR [maskor]: Reading: %s\n", img1);
				return (ERROR);
a158 2
			for (k = 1; k <= dim1; k++)
				img[i][j][dim1 - (k - 1)] = row[k - 1];
d160 1
a160 2
	}
	(void) fclose (fp);
d164 26
a189 4
	if (z > 0) {
		if (img[z][y][x] > min && img[z][y][x] < max) {
			fprintf (stderr, "ERROR [maskor]: seed value (%i) is not outside the specified range [%i : %i]\n",
				 img[z][y][x], min, max);
d192 2
a193 2
		if ((set = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
			fprintf (stderr, "ERROR [maskor]: Cannot calloc set\n");
d196 24
a219 7
		set[z][y][x] = 1;
		xmin = x;
		xmax = x;
		ymin = y;
		ymax = y;
		pln = z;
		mask_or (img, set, val, min, max, dim1, dim2, dim3, pln, &xmin, &xmax, &ymin, &ymax, &npixels);
a220 3
		mask_or_all (img, val, min, max, dim1, dim2, dim3, &npixels);
	}
	printf ("Total Masked Pixels = %li  (set to %d)\n", npixels, val);
d222 19
a240 1
/* Write output */
d242 1
a242 9
	if ((fp = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [maskor]: Unable to create ANALYZE header %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fp)) != 1) {
		fprintf (stderr, "ERROR [maskor]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fp);
d244 4
a247 10
	if ((fp = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [maskor]: Unable to create ANALYZE image %s\n", img2);
		return (ERROR);
	}
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			for (k = 1; k <= dim1; k++)
				row[k - 1] = img[i][j][dim1 - (k - 1)];
			if ((fwrite (row, sizeof (short), dim1, fp)) != dim1) {
				fprintf (stderr, "ERROR [maskor]: Writing: %s\n", img2);
d250 13
d264 33
d298 1
a299 1

a300 4
	free_s3tensor (img, 1, dim3, 1, dim2, 1, dim1);
	if (z > 0)
		free_s3tensor (set, 1, dim3, 1, dim2, 1, dim1);
	free (row);
@


1.5
log
@*** empty log message ***
@
text
@d2 3
d19 1
a19 1
 *	Date:			Jan-99
d25 1
d27 1
a27 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/maskor.c,v 1.4 2001/07/12 15:16:17 tom Exp tom $";
d114 1
a114 1
	fclose (fp);
d145 1
a145 1
	fclose (fp);
d181 1
a181 1
	fclose (fp);
d197 1
a197 1
	fclose (fp);
@


1.4
log
@fprint modifications
@
text
@d2 3
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/maskor.c,v 1.3 1999/12/02 20:47:42 tom Exp tom $";
d113 1
a113 1
		fprintf (stderr, "ERROR [maskor]: seed point not in image: [%d %d %d]\n", x, y, z);
d165 1
a165 1
	printf ("Total Masked Pixels = %i  (set to %d)\n", npixels, val);
@


1.3
log
@add message
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/maskor.c,v 1.2 1999/03/15 16:12:10 tom Exp tom $";
a24 1
#include <string.h>
a26 1
#include <libimage.h>
a28 1
#include <matrixlib.h>
@


1.2
log
@change <=min and >=max to <min and >max
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/maskor.c,v 1.1 1999/02/01 20:13:51 tom Exp tom $";
d21 1
d138 1
a138 1
	close (fp);
d162 1
a162 1
	printf ("Total Masked Pixels = %i\n", npixels);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d9 1
a9 1
 *	Description:	Set to val all pixels which are <= min OR >= max.
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/maskor.c,v 1.1 1999/01/15 14:53:27 tom Exp tom $";
d47 1
a47 1
	short           min, max;		 /* include all <= or >= these pixel values */
@
