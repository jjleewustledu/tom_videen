head	1.6;
access;
symbols;
locks
	tom:1.6; strict;
comment	@ * @;


1.6
date	2006.01.31.14.05.40;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.17.15.00.36;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.27.17.01.54;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.07.22.19.45.05;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.07.16.20.16.34;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.07.14.17.55.04;	author tom;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@/*	$Log: peaksearch.c,v $
 * Revision 1.5  2004/02/17  15:00:36  tom
 * Feb 2004
 *
 * Revision 1.4  2002/11/27  17:01:54  tom
 * *** empty log message ***
 *
 * Revision 1.3  1999/07/22  19:45:05  tom
 * correct nameing of peaks
 *
 * Revision 1.2  1999/07/16  20:16:34  tom
 * add reverse order search
 *
 * Revision 1.1  1999/07/14  17:55:04  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			peaksearch.c
 *	Date:			Jul 1999
 *	Author:			Tom Videen
 *	Description:	Find peaks in metabolic ECAT immges;
 *					No 2 peaks within specified distance of each other;
 * ===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/peaksearch/RCS/peaksearch.c,v 1.5 2004/02/17 15:00:36 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <image.h>
#include <imgutil.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <pettable.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file1;
	Index           indx;
	SubHeader      *sh;
	FILE           *fp;

	char           *fname;			 /* input image name */
	char           *mskname;		 /* mask image name */
	char           *voiname;		 /* output list name */
	float           cutoff;			 /* minimum peak magnitude (after scaling) */
	float           scaler;			 /* image peaks scaled by this prior to printout */
	float        ***img;			 /* input image */
	float        ***msk;			 /* mask image */
	float          *peak;			 /* list of peak magnitudes */
	int            *xloc, *yloc, *zloc;	 /* list of peak coordinates */
	float           max;
	float           max0=0;
	float           vol;
	int             pdim[3];		 /* image dimensions in pixels */
	long            num, ni;
	long           *xi, *yi, *zi;
	long            x0, y0, z0;		 /* array indices */
	long            i, j, k, n;
	float           x, y, z;		 /* array indices */
	float           d;			 /* in mm */
	float           radius;			 /* sphere radius (mm) */
	float           radsqr;			 /* radius squared (mm*mm) */
	float           sza, szt;		 /* axial & transverse pixel dimensions (mm) */
	float           ra, rt;			 /* axial * transverse radius in pixels */
	float           volimg, volsphere;
	long            maxpeaks;
	char           *ptr, *ptr2;
	char            runstamp[40];		 /* program version, date processed, userid */
	int             reverse = 0;

	fname = argv[1];
	mskname = argv[2];
	voiname = argv[3];
	radius = atof (argv[4]);
	cutoff = atof (argv[5]);
	scaler = atof (argv[6]);
	i = 7;
	(void) sprintf (runstamp, "%s %s %s %s %s", argv[i + 1], argv[i + 2], argv[i + 3], argv[i + 5], argv[i + 6]);

	if (cutoff < 0)
		reverse = 1;
	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file1 = make_imgfile (fname);
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [peaksearch]: Could not open %s\n", fname);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [peaksearch]: Could not get MainHeader from %s\n", fname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file1);
	if (indx.frm < 1) {
		fprintf (stderr, "ERROR [peaksearch]: cannot find %s frame(s) 1 to %d\n", fname, -indx.frm);
		return (ERROR);
	}
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [peaksearch]: Could not read file subheader in %s\n", fname);
		return (ERROR);
	}
	sh = file1->sh;
	if ((img = readtensor (file1, &indx)) == NULL)
		return (ERROR);
	pdim[0] = sh->dim1;
	pdim[1] = sh->dim2;
	pdim[2] = sh->dim3;
	szt = 10 * sh->sample_size_1;
	sza = 10 * sh->sample_size_3;
	rt = radius / szt;
	ra = radius / sza;
	radsqr = SQR (radius);

/*  Initialize arrays of indices to include in the sphere */

	ni = 8 * rt * rt * ra;
	xi = (long *) calloc (ni, sizeof (long));
	yi = (long *) calloc (ni, sizeof (long));
	zi = (long *) calloc (ni, sizeof (long));
	x0 = pdim[0] / 2;
	y0 = pdim[1] / 2;
	z0 = pdim[2] / 2;
	ni = 0;
	for (z = z0 - ra; z <= z0 + ra; z++) {
		i = ROUND (z);
		if (i >= 1 && i <= pdim[2]) {
			for (y = y0 - rt; y <= y0 + rt; y++) {
				j = ROUND (y);
				if (j >= 1 && j <= pdim[1]) {
					for (x = x0 - rt; x <= x0 + rt; x++) {
						k = ROUND (x);
						if (k >= 1 && k <= pdim[0]) {
							d = SQR ((k - x0) * szt) + SQR ((j - y0) * szt) + SQR ((i - z0) * sza);
							if (d <= radsqr) {
								xi[ni] = k - x0;
								yi[ni] = j - y0;
								zi[ni] = i - z0;
								ni++;
							}
						}
					}
				}
			}
		}
	}
	n = ni - 1;
	vol = n * szt * szt * sza * 0.001;
	fprintf (stdout, "Volume isolating each peak = %ld pixels  %.2f cc\n", n, vol);

/*	Initialize peak list */

	volimg = szt * pdim[0] * szt * pdim[1] * sza * pdim[2];
	volsphere = (4. / 3.) * M_PI * radsqr;
	maxpeaks = volimg / volsphere;
	peak = (float *) calloc (maxpeaks, sizeof (float));
	xloc = (int *) calloc (maxpeaks, sizeof (int));
	yloc = (int *) calloc (maxpeaks, sizeof (int));
	zloc = (int *) calloc (maxpeaks, sizeof (int));

/* 	Read image and mask */

	if ((img = rdtensor (file1, &indx, pdim)) == NULL) {
		fprintf (stderr, "ERROR [peaksearch]: Cannot read %s\n", fname);
		return (ERROR);
	}
	close_imgfile (file1);
	file1 = make_imgfile (mskname);
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [peaksearch]: Cannot open %s\n", mskname);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [peaksearch]: Could not get MainHeader from %s\n", mskname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file1);
	if (indx.frm < 1) {
		fprintf (stderr, "ERROR [peaksearch]: cannot find %s frame(s) 1 to %d\n", mskname, -indx.frm);
		return (ERROR);
	}
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [peaksearch]: Could not read file subheader in %s\n", mskname);
		return (ERROR);
	}
	if ((msk = rdtensor (file1, &indx, pdim)) == NULL) {
		fprintf (stderr, "ERROR [peaksearch]: Cannot read %s\n", mskname);
		return (ERROR);
	}
	close_imgfile (file1);

	if (reverse) {
		max0 = 0;
		for (i = 1; i <= pdim[2]; i++)
			for (j = 1; j <= pdim[1]; j++)
				for (k = 1; k <= pdim[0]; k++)
					if (msk[i][j][k] > 0 && img[i][j][k] > max0)
						max0 = img[i][j][k];
		for (i = 1; i <= pdim[2]; i++)
			for (j = 1; j <= pdim[1]; j++)
				for (k = 1; k <= pdim[0]; k++)
					if (msk[i][j][k] > 0)
						img[i][j][k] = max0 - img[i][j][k];
		max0 *= scaler;
		cutoff = max0 + cutoff;
		if (cutoff <= 0)
			cutoff = 0.001;
	}

/*	Search for maximum pixel within mask */

	max = cutoff;
	num = 0;
	while (max >= cutoff) {
		max = 0;
		for (i = 1; i <= pdim[2]; i++) {
			for (j = 1; j <= pdim[1]; j++) {
				for (k = 1; k <= pdim[0]; k++) {
					if (msk[i][j][k] > 0 && img[i][j][k] > max) {
						max = img[i][j][k];
						x0 = k;
						y0 = j;
						z0 = i;
					}
				}
			}
		}

/*	Add peak to list and zero all pixels in the mask within TWICE radius */

		max *= scaler;
		if (max >= cutoff) {
			xloc[num] = x0;
			yloc[num] = y0;
			zloc[num] = z0;
			if (reverse)
				peak[num] = max0 - max;
			else
				peak[num] = max;
			num += 1;
			n = 0;
			for (z = z0 - ra; z <= z0 + ra; z++) {
				i = ROUND (z);
				if (i >= 1 && i <= pdim[2]) {
					for (y = y0 - rt; y <= y0 + rt; y++) {
						j = ROUND (y);
						if (j >= 1 && j <= pdim[1]) {
							for (x = x0 - rt; x <= x0 + rt; x++) {
								k = ROUND (x);
								if (k >= 1 && k <= pdim[0]) {
									d = SQR ((k - x0) * szt) + SQR ((j - y0) * szt) + SQR ((i - z0) * sza);
									if (d <= radsqr) {
										msk[i][j][k] = 0;
										n++;
									}
								}
							}
						}
					}
				}
			}
		}
	}

/* Write peaks in voi list format */

	if ((fp = fopen (voiname, "w")) == NULL) {
		fprintf (stderr, "ERROR [peaksearch]: Cannot open %s\n", voiname);
		return (ERROR);
	}
	fprintf (fp, "30     %s  %s\n", fname, mskname);
	ptr = strstr (rcsid, "RCS") + 4;
	if (ptr != NULL) {
		ptr2 = strrchr (rcsid, '.') + 3;
		if (ptr2 != NULL)
			*ptr2 = NULL;
		fprintf (fp, "%s  %7.2f mm  %s\n", ptr, radius, runstamp);
	} else
		fprintf (fp, "peaksearch  %7.2f mm  %s\n", radius, runstamp);
	fprintf (fp, "%ld\n", num);
	for (i = 0; i < num; i++)
		fprintf (fp, "%f %8.2f %8.2f %8.2f\n", peak[i], (float) xloc[i], (float) yloc[i], (float) zloc[i]);
	(void) fclose (fp);

	free_f3tensor (img, 1, pdim[2], 1, pdim[1], 1, pdim[0]);
	free_imgfile (file1);
	free(xi);
	free(yi);
	free(zi);
	free(peak);
	free(xloc);
	free(yloc);
	free(zloc);
	return (OK);
}
@


1.5
log
@Feb 2004
@
text
@d2 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/peaksearch/RCS/peaksearch.c,v 1.4 2002/11/27 17:01:54 tom Exp tom $";
d181 4
d186 8
@


1.4
log
@*** empty log message ***
@
text
@d2 3
d16 1
a16 1
 *	Date:			Jul-99
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/peaksearch/RCS/peaksearch.c,v 1.3 1999/07/22 19:45:05 tom Exp tom $";
d36 1
d168 1
a168 1
	if ((img = rdtensor (fname, &indx, pdim)) == NULL) {
d179 1
a179 1
	if ((msk = rdtensor (mskname, &indx, pdim)) == NULL) {
@


1.3
log
@correct nameing of peaks
@
text
@d2 3
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/peaksearch/RCS/peaksearch.c,v 1.2 1999/07/16 20:16:34 tom Exp $";
a28 1
#include <nr.h>
d50 2
a51 2
	float           max, min;
	float           max0;
d77 1
a77 1
	sprintf (runstamp, "%s %s %s %s %s", argv[i + 1], argv[i + 2], argv[i + 3], argv[i + 5], argv[i + 6]);
d150 1
a150 1
	fprintf (stdout, "Volume isolating each peak = %d pixels  %.2f cc\n", n, vol);
d269 1
a269 1
	fprintf (fp, "%d\n", num);
d272 1
a272 1
	fclose (fp);
d276 7
@


1.2
log
@add reverse order search
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/peaksearch/RCS/peaksearch.c,v 1.1 1999/07/14 17:55:04 tom Exp tom $";
d223 4
a226 1
			peak[num] = max0 - max;
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/peaksearch/RCS/peaksearch.c,v 2.14 1997/03/10 15:47:34 tom Exp $";
d44 3
a46 2
	int            *xloc, *yloc, *zloc;	/* list of peak coordinates */
	float           max;
d54 1
a54 1
	float           d;				 /* in mm */
d62 2
a63 1
	char            runstamp[40];	 /* program version, date processed, userid */
d74 2
d176 18
d220 1
a220 1
			peak[num] = max;
d259 1
a259 1
	} else 
@
