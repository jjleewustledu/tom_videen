head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2004.02.16.15.04.17;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.26.21.49.30;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.06.19.29.36;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	99.01.06.15.24.19;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	98.12.18.15.55.01;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	98.12.18.15.28.57;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.12.16.15.59.43;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.12.15.19.34.22;	author tom;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Feb 2004
@
text
@/*	$Log: fixsino7.c,v $
 * Revision 1.7  2002/11/26  21:49:30  tom
 * *** empty log message ***
 *
 * Revision 1.6  2000/09/06  19:29:36  tom
 * strcpy filename
 *
 * Revision 1.5  1999/01/06  15:24:19  tom
 * altered to correct all planes
 *
 * Revision 1.4  1998/12/18  15:55:01  tom
 * *** empty log message ***
 *
 * Revision 1.3  1998/12/18  15:28:57  tom
 * read trans and blank
 *
 * Revision 1.2  1998/12/16  15:59:43  tom
 * version used to fix p5576tr1 (16-Dec-98)
 *
 * Revision 1.1  1998/12/15  19:34:22  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			fixsino7.c
 *	Date:			Dec 1998
 *	Author:			Tom Videen
 *	Description:	Correct detector block dropouts in an ECAT 7 sinogram.
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixsino7/RCS/fixsino7.c,v 1.7 2002/11/26 21:49:30 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <image.h>
#include <libimage.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file1;
	ImageFile      *file2;
	Index           indx;
	short          *matrix;
	short          *trans;
	short          *blank;
	float           val, mval;
	float           xx1, xx2, yy1, yy2;
	char           *fname1;			 /* trans */
	char           *fname2;			 /* blank */
	int             i, j, k, frm;
	long            a1, a2, b1, b2;
	long            ax1, ax2, bx1, bx2, cx;
	long            adx1, adx2, bdx1, bdx2, cdx;
	long            mdx, pdx;
	long            pln, sizepln;
	long            num;
	unsigned long   dim1, dim2, dim3;

	fname1 = argv[1];
	fname2 = argv[2];
	frm = atoi (argv[3]);
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	file1 = make_imgfile (fname1);
	strcpy (file1->mode, "r+");
	if (open_imgfile (file1) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot open %s\n", fname1);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot get MainHeader from %s\n", fname1);
		return (ERROR);
	}
	if (file1->mh->file_format != MATRIX_REV7) {
		fprintf (stdout, "ERROR [fixsino7]: File is not type Matrix 7 %s\n", fname1);
		return (ERROR);
	}
	if (existimgfrm (file1, &indx) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot find %s frame %d\n", fname1, indx.frm);
		return (ERROR);
	}
	if (get_ss7 (file1, &indx) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot read file subheader in %s\n", fname1);
		return (ERROR);
	}
	if (use_ss7 (file1, &indx) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot convert file subheader in %s\n", fname1);
		return (ERROR);
	}
	dim1 = (unsigned long) file1->sh->dim1;
	dim2 = (unsigned long) file1->sh->dim2;
	dim3 = (unsigned long) file1->sh->dim3;
	sizepln = dim1 * dim2;

	trans = (short *) calloc (dim1 * dim2 * dim3, sizeof (short));
	for (pln = 1; pln <= dim3; pln++) {
		k = (pln - 1) * sizepln;
		indx.pln = pln;
		if ((matrix = rdscan7 (file1, indx)) == NULL) {
			fprintf (stdout, "ERROR [fixsino7]: Cannot read frame %d plane %d of %s\n",
				 indx.frm, (int) pln, fname1);
			return (ERROR);
		}
		for (i = 0; i < sizepln; i++)
			trans[k + i] = matrix[i];
		free (matrix);
	}

	file2 = make_imgfile (fname2);
	strcpy (file2->name, fname2);
	if (open_imgfile (file2) == ERROR) {
		fprintf (stderr, "ERROR [fixsino7]: Could not open %s\n", fname2);
		return (ERROR);
	}
	if (get_mh (file2) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot get MainHeader from %s\n", fname2);
		return (ERROR);
	}
	if (file2->mh->file_format != MATRIX_REV7) {
		fprintf (stdout, "ERROR [fixsino7]: File is not type Matrix 7 %s\n", fname2);
		return (ERROR);
	}
	if (existimgfrm (file2, &indx) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot find %s frame %d\n", fname2, indx.frm);
		return (ERROR);
	}
	if (get_ss7 (file2, &indx) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot read file subheader in %s\n", fname2);
		return (ERROR);
	}
	if (use_ss7 (file2, &indx) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot convert file subheader in %s\n", fname2);
		return (ERROR);
	}
	blank = (short *) calloc (dim1 * dim2 * dim3, sizeof (short));
	for (pln = 1; pln <= dim3; pln++) {
		k = (pln - 1) * sizepln;
		indx.pln = pln;
		if ((matrix = rdscan7 (file2, indx)) == NULL) {
			fprintf (stdout, "ERROR [fixsino7]: Cannot read frame %d plane %d of %s\n",
				 indx.frm, (int) pln, fname2);
			return (ERROR);
		}
		for (i = 0; i < sizepln; i++)
			blank[k + i] = matrix[i];
		free (matrix);
	}
	close_imgfile (file2);
	free_imgfile (file2);

/*	-----------------------------
	(This is test code for diamonds)
	-----------------------------
	pln = 23;
	ldx = 77;
	ldx = 259;
	ldx = 1;
	ldx = 320;
	printf ("%d %d\n", dim1, dim2);
	fdx = pln*sizepln;
	gdx = (pln+1)*sizepln;
	for (k = -6; k < 9; k++) {
		ldx = k*32;
		for (i = 0; i < dim1; i++) {
			b = (float) i *0.25;
			for (j = 0; j < 1; j++) {
				kdx = fdx + (ldx-b-j)*dim1 + i;
				if (kdx < fdx)
					kdx = gdx + (ldx-b-j)*dim1 - i;
				else if (kdx > gdx)
					kdx = (pln+2)*sizepln - (ldx+b-j)*dim1 - i;
				if (kdx >= fdx)
					trans[kdx] = 120;
			}
		}
	}
	------------------------------------ */

/*	For each element which is less the half the mean of the elements
	one block above and below it, set the element equal to that mean */

	for (pln = 0; pln < dim3; pln++) {
		num = 0;
		pdx = pln * sizepln;
		for (j = 0; j < dim2; j++) {
			if (j > 7)
				a1 = j - 8;
			else
				a1 = dim1 + 8 - j;
			if (j > 15)
				a2 = j - 16;
			else
				a2 = dim1 + 16 - j;

			if (j < dim1 - 8)
				b1 = j + 8;
			else
				b1 = j - dim1 + 8;
			if (j < dim1 - 16)
				b2 = j + 16;
			else
				b2 = j - dim1 + 16;

			ax1 = pdx + a1 * dim1;
			ax2 = pdx + a2 * dim1;
			bx1 = pdx + b1 * dim1;
			bx2 = pdx + b2 * dim1;
			cx = j * dim1;
			for (i = 0; i < dim1; i++) {
				adx1 = ax1 + i;
				adx2 = ax2 + i;
				bdx1 = bx1 + i;
				bdx2 = bx2 + i;
				cdx = cx + i;
				mdx = pdx + cdx;
				val = (float) trans[mdx] / (float) blank[mdx];
				xx1 = (float) trans[adx1] / (float) blank[adx1];
				xx2 = (float) trans[adx2] / (float) blank[adx2];
				yy1 = (float) trans[bdx1] / (float) blank[bdx1];
				yy2 = (float) trans[bdx2] / (float) blank[bdx2];
				if (xx1 >= 1 || xx2 >= 1 || yy1 >= 1 || yy2 >= 1)
					matrix[cdx] = trans[mdx];
				else {
					mval = 0.25 * (xx1 + xx2 + yy1 + yy2);
					if (val < 0.5 * mval) {
						matrix[cdx] = (short) (mval * (float) blank[mdx]);
						num = num+1;
					} else
						matrix[cdx] = trans[mdx];
				}
			}
		}
		for (j = 0; j < dim2; j++) {
			for (i = 0; i < dim1; i++) {
				cdx = j * dim1 + i;
				mdx = pdx + cdx;
				trans[mdx] = matrix[cdx];
			}
		}
		if (num > 0)
			fprintf (stdout, "pln %2d: %5d corrected\n",(int) pln, (int) num);
	}

/*	Write the new sinogram to the input file, fname1 */

	for (pln = 1; pln <= dim3; pln++) {
		k = (pln - 1) * sizepln;
		indx.pln = pln;
		for (i = 0; i < sizepln; i++)
			matrix[i] = trans[k + i];
		if (wrscan7 (file1, indx, matrix) != OK) {
			fprintf (stdout, "ERROR [fixsino7]: Writing frame %d plane %d of %s\n",
				 indx.frm, (int) pln, fname1);
			return (ERROR);
		}
	}
	close_imgfile (file1);
	free_imgfile (file1);
	free (blank);
	return (OK);
}
@


1.7
log
@*** empty log message ***
@
text
@d2 3
d25 1
a25 1
 *	Date:			Dec-98
d30 1
d32 1
a32 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixsino7/RCS/fixsino7.c,v 1.6 2000/09/06 19:29:36 tom Exp tom $";
d42 1
@


1.6
log
@strcpy filename
@
text
@d2 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixsino7/RCS/fixsino7.c,v 1.5 1999/01/06 15:24:19 tom Exp tom $";
a33 1
#include <math.h>
a35 1
#include <libnrimg.h>
d100 1
a100 1
	trans = (short *) malloc (dim1 * dim2 * dim3 * sizeof (short));
d106 1
a106 1
				 indx.frm, pln, fname1);
d140 1
a140 1
	blank = (short *) malloc (dim1 * dim2 * dim3 * sizeof (short));
d146 1
a146 1
				 indx.frm, pln, fname2);
d246 1
a246 1
			fprintf (stdout, "pln %2d: %5d corrected\n",pln, num);
d258 1
a258 1
				 indx.frm, pln, fname1);
d264 1
@


1.5
log
@altered to correct all planes
@
text
@d2 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixsino7/RCS/fixsino7.c,v 1.4 1998/12/18 15:55:01 tom Exp tom $";
d114 1
a114 1
	file2->name = fname2;
@


1.4
log
@*** empty log message ***
@
text
@d2 3
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixsino7/RCS/fixsino7.c,v 1.3 1998/12/18 15:28:57 tom Exp tom $";
d44 1
d53 1
d183 2
a184 1
	for (pln = 12; pln < 34; pln++) {
d217 15
a231 9
				val = (float) trans[mdx]/(float) blank[mdx];
				mval = 0.25 * ((float) trans[adx1]/(float) blank[adx1] 
					+ (float) trans[bdx1]/(float) blank[bdx1]
					+ (float) trans[adx2]/(float) blank[adx2]
					+ (float) trans[bdx2]/(float) blank[bdx2]);
				if (val < mval/2.)
					matrix[cdx] = (short) (mval * (float) blank[mdx]);
				else
					matrix[cdx] = (short) (val * (float) blank[mdx]);
d241 2
@


1.3
log
@read trans and blank
@
text
@d2 3
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixsino7/RCS/fixsino7.c,v 1.2 1998/12/16 15:59:43 tom Exp $";
a110 4
	if (open_imgfile (file1) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot open %s\n", fname2);
		return (ERROR);
	}
@


1.2
log
@version used to fix p5576tr1 (16-Dec-98)
@
text
@d2 3
d12 1
a12 1
 *	Description:	Read and fix ECAT 7 sinogram
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixsino7/RCS/fixsino7.c,v 1.1 1998/12/15 19:34:22 tom Exp tom $";
d31 2
a32 1
	ImageFile      *file;
d35 5
a39 4
	short          *fmatrix;
	short           val, mval;
	char           *fname;			 /* input */
	char           *fname2;			 /* output */
d48 1
a48 1
	fname = argv[1];
d56 5
a60 3
	file = make_imgfile (fname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot open %s\n", fname);
d63 2
a64 2
	if (get_mh (file) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot get MainHeader from %s\n", fname);
d67 2
a68 2
	if (file->mh->file_format != MATRIX_REV7) {
		fprintf (stdout, "ERROR [fixsino7]: File is not type Matrix 7 %s\n", fname);
d71 2
a72 2
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot find %s frame %d\n", fname, indx.frm);
d75 2
a76 2
	if (get_ss7 (file, &indx) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot read file subheader in %s\n", fname);
d79 2
a80 2
	if (use_ss7 (file, &indx) == ERROR) {
		fprintf (stdout, "ERROR [fixsino7]: Cannot convert file subheader in %s\n", fname);
d83 3
a85 3
	dim1 = (unsigned long) file->sh->dim1;
	dim2 = (unsigned long) file->sh->dim2;
	dim3 = (unsigned long) file->sh->dim3;
d88 1
a88 1
	fmatrix = (short *) malloc (dim1 * dim2 * dim3 * sizeof (short));
d92 1
a92 1
		if ((matrix = rdscan7 (file, indx)) == NULL) {
d94 1
a94 1
				 indx.frm, pln, fname);
d98 1
a98 1
			fmatrix[k + i] = matrix[i];
a100 1
	close_imgfile (file);
d102 46
d170 1
a170 1
					fmatrix[kdx] = 120;
d212 7
a218 5
				val = fmatrix[mdx];
				mval = 0.25 * (fmatrix[adx1] + fmatrix[bdx1]
					+ fmatrix[adx2] + fmatrix[bdx2]);
				if (val < mval/2)
					matrix[cdx] = mval;
d220 1
a220 1
					matrix[cdx] = val;
d227 1
a227 1
				fmatrix[mdx] = matrix[cdx];
d232 1
a232 1
/*	Write the new sinogram */
a233 11
	file->name = fname2;
	strcpy (file->mode, "w");
	indx.pln = 1;
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [fixsino7]: Could not open %s\n", fname2);
		return (ERROR);
	}
	if (put_mh7 (file) != OK) {
		fprintf (stdout, "ERROR [fixsino7]: Writing main header of %s\n", fname2);
		return (ERROR);
	}
d238 2
a239 2
			matrix[i] = fmatrix[k + i];
		if (wrscan7 (file, indx, matrix) != OK) {
d241 1
a241 1
				 indx.frm, pln, fname2);
d245 2
a246 2
	close_imgfile (file);
	free_imgfile (file);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixsino7/RCS/fixsino7.c,v 1.1 1998/12/10 18:49:15 tom Exp $";
d32 1
d35 5
a39 1
	int             i, k, frm;
d95 85
@
