head	2.3;
access;
symbols;
locks; strict;
comment	@ * @;


2.3
date	2009.01.07.22.00.15;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2009.01.07.21.47.52;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2008.05.09.20.43.20;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.17.03.56;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.11.12.18.04.41;	author tom;	state Exp;
branches;
next	;


desc
@@


2.3
log
@permit 3 dimensions
@
text
@/*	$Log: ana3dcrop.c,v $
 * Revision 2.2  2009/01/07  21:47:52  tom
 * update declaration of main
 *
 * Revision 2.1  2008/05/09  20:43:20  tom
 * change some messages
 *
 * Revision 2.0  2004/02/13  17:03:56  tom
 * Feb 2004
 *
 * Revision 1.1  1999/11/12  18:04:41  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			ana3dcrop.c
 *	Date:			Nov 1999
 *	Author:			Tom Videen
 *	Description:	Crop 3D Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana3dcrop/RCS/ana3dcrop.c,v 2.2 2009/01/07 21:47:52 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <nrutil.h>
#include <libnrimg.h>
#include <ANALYZE.h>

int main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* output file */
	long            x1, x2, y1, y2, z1, z2;
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, pln;
	long            i, j, k, m;
	short          *img;
	short        ***image;
	long            xlen, ylen, zlen;

	if (argc != 11) {
		fprintf (stderr, "Usage: ana3dcrop img1 hdr1 img2 hdr2 x1 x2 y1 y2 z1 z2\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	x1 = atoi (argv[5]);
	x2 = atoi (argv[6]);
	y1 = atoi (argv[7]);
	y2 = atoi (argv[8]);
	z1 = atoi (argv[9]);
	z2 = atoi (argv[10]);

/*	Read image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [ana3dcrop]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [ana3dcrop]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [ana3dcrop]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [ana3dcrop]: reading %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [ana3dcrop]: reading %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	pln = dim1 * dim2;
	num = pln * dim3;
	img = (short *) calloc (num, sizeof (short));

	if (img == NULL) {
		fprintf (stderr, "ERROR [ana3dcrop]: calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [ana3dcrop]: opening %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [ana3dcrop]: reading %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Input:  %s\n", img1);

	if ((image = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [ana3dcrop]: malloc image\n");
		return (NULL);
	}
	m = 0;
	for (k = dim3; k > 0; k--) {
		for (j = dim2; j > 0; j--) {
			for (i = dim1; i > 0; i--) {
				image[k][j][i] = img[m];
				m++;
			}
		}
	}
	free (img);

	xlen = x2 - x1 + 1;
	ylen = y2 - y1 + 1;
	zlen = z2 - z1 + 1;
	pln = xlen * ylen;
	num = pln * zlen;
	img = (short *) calloc (num, sizeof (short));
	if (img == NULL)
		return (ERROR);

	m = num-1;
	for (k = z1; k <= z2; k++) {
		for (j = y1; j <= y2; j++) {
			for (i = x1; i <= x2; i++) {
				img[m] = image[k][j][i];
				m--;
			}
		}
	}

	hdr.dime.dim[1] = xlen;
	hdr.dime.dim[2] = ylen;
	hdr.dime.dim[3] = zlen;

	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [ana3dcrop]: opening %s\n", img2);
		return (ERROR);
	}
	if ((fwrite (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [ana3dcrop]: writing %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [ana3dcrop]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [ana3dcrop]: writing %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	fprintf (stdout, "Output: %s\n", img2);
	free (img);
	return (OK);
}
@


2.2
log
@update declaration of main
@
text
@d2 3
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana3dcrop/RCS/ana3dcrop.c,v 2.1 2008/05/09 20:43:20 tom Exp tom $";
d75 1
a75 1
	if (hdr.dime.dim[0] != 4) {
@


2.1
log
@change some messages
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana3dcrop/RCS/ana3dcrop.c,v 2.0 2004/02/13 17:03:56 tom Exp tom $";
d30 1
a30 1
main (argc, argv)
@


2.0
log
@Feb 2004
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana3dcrop/RCS/ana3dcrop.c,v 1.1 1999/11/12 18:04:41 tom Exp tom $";
d45 1
a45 1
		printf ("Usage: ana3dcrop img1 hdr1 img2 hdr2 x1 x2 y1 y2 z1 z2\n");
d62 1
a62 1
		fprintf (stderr, "ERROR [ana3dcrop]: Cannot open: %s\n", hdr1);
d66 1
a66 1
		fprintf (stderr, "ERROR [ana3dcrop]: Reading: %s\n", hdr1);
d70 1
a70 1
		fprintf (stderr, "ERROR [ana3dcrop]: Reading: %s\n", hdr1);
d75 1
a75 1
		fprintf (stderr, "ERROR [ana3dcrop]: Reading: %s\n", hdr1);
d80 1
a80 1
		fprintf (stderr, "ERROR [ana3dcrop]: Reading: %s\n", hdr1);
d93 1
a93 1
		fprintf (stderr, "ERROR [ana3dcrop]: Cannot calloc img\n");
d97 1
a97 1
		fprintf (stderr, "ERROR [ana3dcrop]: Cannot open: %s\n", img1);
d101 1
a101 1
		fprintf (stderr, "ERROR [ana3dcrop]: Reading: %s\n", img1);
d105 1
a105 1
	fprintf (stdout, "Read %s\n", img1);
d108 1
a108 1
		fprintf (stderr, "ERROR [ana3dcrop]: Cannot malloc image\n");
d146 1
a146 1
		fprintf (stderr, "ERROR [ana3dcrop]: Unable to open %s\n", img2);
d150 1
a150 1
		fprintf (stderr, "ERROR [ana3dcrop]: Error writing to: %s\n", img2);
d156 1
a156 1
		fprintf (stderr, "ERROR [ana3dcrop]: Unable to open %s\n", hdr2);
d160 1
a160 1
		fprintf (stderr, "ERROR [ana3dcrop]: Error writing to: %s\n", hdr2);
d164 1
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d7 1
a7 1
 *	Date:			Nov-99
d12 1
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/ana3dcrop/RCS/ana3dcrop.c,v 1.1 1999/08/10 17:35:40 tom Exp $";
d84 1
a84 1
	fclose (fd_hdr);
d101 1
a101 1
	fclose (fd_img);
d125 2
d150 1
a150 1
	fclose (fd_img);
d160 1
a160 1
	fclose (fd_hdr);
@
