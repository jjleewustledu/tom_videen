head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2008.10.28.21.23.37;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.28.20.27.58;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@global max, min, dim=4
@
text
@/*	$Log: anaint2float.c,v $
 * Revision 1.1  2008/10/28  20:27:58  tom
 * Initial revision
 *
 * Revision 1.1  2005/02/18  14:04:04  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anaint2float.c
 *	Date:			Oct 2008
 *	Author:			Tom Videen
 *	Description:	Convert Analyze image from integers to floating pt
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaint2float/RCS/anaint2float.c,v 1.1 2008/10/28 20:27:58 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <dbh.h>

/*	----------------------------
 *	Function:			anaint2float
 *	----------------------------
 */
int             main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	short          *simg;			 /* image */
	float          *fimg;			 /* image */
	int           	global_max = 0;
	int           	global_min = 0;

	if (argc != 5) {
		fprintf (stderr, "Usage: anaint2float img1 hdr1 img2 hdr2\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];

/*	Get image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anaint2float]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anaint2float]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anaint2float]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1 * dim2 * dim3;

	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anaint2float]: opening %s\n", img1);
		return (ERROR);
	}
	if (hdr.dime.bitpix == 16) {
		fprintf (stderr, "%d %d %ld\n", hdr.dime.datatype, hdr.dime.bitpix, num * sizeof (float));
		fimg = (float *) calloc (num, sizeof (float));
		if (fimg == NULL) {
			fprintf (stderr, "ERROR [anaint2float]: calloc fimg\n");
			return (ERROR);
		}
		simg = (short *) calloc (num, sizeof (short));
		if (simg == NULL) {
			fprintf (stderr, "ERROR [anaint2float]: calloc simg\n");
			return (ERROR);
		}
		if ((fread (simg, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anaint2float]: reading %s\n", img1);
			return (ERROR);
		}
		fprintf (stdout, "Read %s\n", img1);
		(void) fclose (fd_img);
		for (i = 0; i < num; i++) {
			fimg[i] = simg[i];
			if (simg[i] > global_max)
				global_max = simg[i];
			else if (simg[i] < global_min)
				global_min = simg[i];
		}

		if ((fd_img = fopen (img2, "w")) == 0) {
			fprintf (stderr, "ERROR [anaint2float]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fwrite (fimg, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anaint2float]: writing %s\n", img2);
			return (ERROR);
		}
		free (fimg);
		free (simg);

	} else {
		fprintf (stderr, "ERROR [anaint2float]: reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	(void) fclose (fd_img);

	hdr.dime.datatype = DT_FLOAT;
	hdr.dime.bitpix = 32;
    hdr.dime.glmax = global_max;
    hdr.dime.glmin = global_min;
    hdr.dime.dim[0] = 4;

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [anaint2float]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anaint2float]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaint2float/RCS/anaint2float.c,v 1.1 2005/02/18 14:04:04 tom Exp $";
d29 1
a29 1
int main (argc, argv)
d37 3
a39 3
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	long            dim1, dim2, dim3; /* dimensions of image */
d41 4
a44 2
	short          *simg;	 		 /* image */
	float          *fimg;	 		 /* image */
d65 1
a65 1
	if (hdr.dime.dim[0] != 4) {
d74 1
a74 1
	num = dim1*dim2*dim3;
d80 2
a81 3

	if (hdr.dime.datatype == 8 && hdr.dime.bitpix == 16) {
		fprintf (stderr, "%d %d %ld\n", hdr.dime.datatype, hdr.dime.bitpix, num*sizeof (float));
d92 1
a92 1
		if ((fread (simg, sizeof(short), num, fd_img)) != num) {
d96 1
a96 1
		fprintf (stdout,"Read %s\n", img1);
d98 1
a98 1
		for (i = 0; i < num; i++)
d100 6
d127 4
@
