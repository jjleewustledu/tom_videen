head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2004.02.16.20.57.40;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.27.15.49.11;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	99.03.08.15.36.09;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	99.02.23.20.07.16;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	99.02.16.18.19.19;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.02.09.14.44.37;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.02.08.18.17.33;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.02.01.21.09.28;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.01.19.18.10;	author tom;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Feb 2004
@
text
@/*	$Log: maskout.c,v $
 * Revision 1.8  2002/11/27  15:49:11  tom
 * *** empty log message ***
 *
 * Revision 1.7  1999/03/08  15:36:09  tom
 * unlimited seeds permitted
 *
 * Revision 1.6  1999/02/23  20:07:16  tom
 * write location of seed outside range
 *
 * Revision 1.5  1999/02/16  18:19:19  tom
 * permit multiple seed pixels
 *
 * Revision 1.4  1999/02/09  14:44:37  tom
 * correct argc
 *
 * Revision 1.3  1999/02/08  18:17:33  tom
 * *** empty log message ***
 *
 * Revision 1.2  1999/02/01  21:09:28  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/02/01  19:18:10  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			maskout.c
 *	Date:			Jan 1999
 *	Author:			Tom Videen
 *	Description:	Preserve all connected pixels which are >= min AND <= max
 *					by setting to val all outside pixels.
 *	History:
 *		16-Feb-99 (TOV) permit up to 10 seed pixels.
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/maskout.c,v 1.8 2002/11/27 15:49:11 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <image.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			maskout
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	int             mask_out ();
	FILE           *fp;			 /* file pointer */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long           *x, *y, *z;
	long            i, j, k;
	long            pln;
	long            xmin, xmax;
	long            ymin, ymax;
	int             nseeds;
	short           min, max;		 /* include all <= or >= these pixel values */
	short           val;			 /* set pixels to this value */
	short        ***img;			 /* image */
	short        ***set;			 /* pixels set if in skull */
	short          *row;			 /* single row of input image */
	long            npixels = 0;

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc < 11) {
		printf ("Usage: maskout img1 hdr1 img2 hdr2 min max val nseeds x y z ...\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	min = (short) (atoi (argv[5]));
	max = (short) (atoi (argv[6]));
	val = (short) (atoi (argv[7]));
	nseeds = (atoi (argv[8]));
	x = (long *) calloc(nseeds, sizeof(long));
	y = (long *) calloc(nseeds, sizeof(long));
	z = (long *) calloc(nseeds, sizeof(long));
	for (i = 0; i < nseeds; i++) {
		x[i] = (long) (atoi (argv[3 * i + 9]));
		y[i] = (long) (atoi (argv[3 * i + 10]));
		z[i] = (long) (atoi (argv[3 * i + 11]));
	}

/*
 * Read Analyze hdr file
 */

	if ((fp = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [maskout]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fp)) != 1) {
		fprintf (stderr, "ERROR [maskout]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [maskout]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [maskout]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [maskout]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fp);

	for (i = 0; i < nseeds; i++) {
		if (x[i] > dim1 || y[i] > dim2 || z[i] > dim3 || x[i] < 1 || y[i] < 1 || z[i] < 1) {
			fprintf (stderr, "ERROR [maskout]: seed point not in image: [%ld %ld %ld]\n", x[i], y[i], z[i]);
			return (ERROR);
		}
	}
/*
 *	Read img
 */

	if ((fp = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [maskout]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((img = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [maskout]: Cannot calloc img\n");
		return (ERROR);
	}
	if (NULL == (row = (short *) calloc (dim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [maskout]: Cannot malloc memory for row\n");
		return (ERROR);
	}
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			if ((fread (row, sizeof (short), dim1, fp)) != dim1) {
				fprintf (stderr, "ERROR [maskout]: Reading: %s\n", img1);
				return (ERROR);
			}
			for (k = 1; k <= dim1; k++)
				img[i][j][dim1 - (k - 1)] = row[k - 1];
		}
	}
	(void) fclose (fp);

	for (i = 0; i < nseeds; i++) {
		if (img[z[i]][y[i]][x[i]] < min || img[z[i]][y[i]][x[i]] > max) {
			fprintf (stderr, "ERROR [maskout]: seed [%li,%li,%li] = %i is outside your specified range: %i to %i\n",
				 x[i],y[i],z[i],img[z[i]][y[i]][x[i]], min, max);
			return (ERROR);
		}
	}
	if ((set = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [maskout]: Cannot calloc set\n");
		return (ERROR);
	}
/*
 *	Mask
 */

	xmin = x[0];
	xmax = x[0];
	ymin = y[0];
	ymax = y[0];
	pln = z[0];
	for (i = 0; i < nseeds; i++) {
		set[z[i]][y[i]][x[i]] = 1;
		if (x[i] < xmin) xmin = x[i];
		if (x[i] > xmax) xmax = x[i];
		if (y[i] < ymin) ymin = y[i];
		if (y[i] > ymax) ymax = y[i];
		if (z[i] < pln) pln = z[i];
	}

	if ((mask_out (img, set, val, min, max, dim1, dim2, dim3, pln,
		       &xmin, &xmax, &ymin, &ymax, &npixels)) == ERROR) {
		fprintf (stderr, "ERROR [maskout]: in mask_out\n");
		return (ERROR);
	}
	printf ("Total Pixels Masked = %12li\n", npixels);
	printf ("Total in Object     = %12li\n", (dim1 * dim2 * dim3) - npixels);

/*
 * Write to output file
 */

	if ((fp = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [maskout]: Unable to create ANALYZE header %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fp)) != 1) {
		fprintf (stderr, "ERROR [maskout]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fp);

	if ((fp = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [maskout]: Unable to create ANALYZE image %s\n", img2);
		return (ERROR);
	}
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			for (k = 1; k <= dim1; k++)
				row[k - 1] = img[i][j][dim1 - (k - 1)];
			if ((fwrite (row, sizeof (short), dim1, fp)) != dim1) {
				fprintf (stderr, "ERROR [maskout]: Writing: %s\n", img2);
				return (ERROR);
			}
		}
	}
	(void) fclose (fp);

	printf ("Converted: %s to %s\n", img1, img2);
	free_s3tensor (img, 1, dim3, 1, dim2, 1, dim1);
	free_s3tensor (set, 1, dim3, 1, dim2, 1, dim1);
	free (row);
	free (x);
	free (y);
	free (z);
	return (OK);
}
@


1.8
log
@*** empty log message ***
@
text
@d2 3
d28 1
a28 1
 *	Date:			Jan-99
d36 1
d38 1
a38 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/maskout.c,v 1.7 1999/03/08 15:36:09 tom Exp tom $";
d132 1
a132 1
	fclose (fp);
d166 1
a166 1
	fclose (fp);
d217 1
a217 1
	fclose (fp);
d233 1
a233 1
	fclose (fp);
@


1.7
log
@unlimited seeds permitted
@
text
@d2 3
d34 1
a34 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/maskout.c,v 1.6 1999/02/23 20:07:16 tom Exp tom $";
d38 1
a38 1
#include <string.h>
a40 1
#include <libimage.h>
a42 1
#include <matrixlib.h>
d132 1
a132 1
			fprintf (stderr, "ERROR [maskout]: seed point not in image: [%d %d %d]\n", x[i], y[i], z[i]);
d166 1
a166 1
			fprintf (stderr, "ERROR [maskout]: seed [%i,%i,%i] = %i is outside your specified range: %i to %i\n",
d198 2
a199 2
	printf ("Total Pixels Masked = %12i\n", npixels);
	printf ("Total in Object     = %12i\n", (dim1 * dim2 * dim3) - npixels);
d235 3
@


1.6
log
@write location of seed outside range
@
text
@d2 3
d31 1
a31 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/maskout.c,v 1.5 1999/02/16 18:19:19 tom Exp tom $";
d59 1
a59 1
	long            x[10], y[10], z[10];
d88 3
a90 4
	if (nseeds > 10) {
		fprintf (stderr, "ERROR [maskout]: Too many seeds: %i\n", nseeds);
		return (ERROR);
	}
@


1.5
log
@permit multiple seed pixels
@
text
@d2 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/maskout.c,v 1.4 1999/02/09 14:44:37 tom Exp tom $";
d163 2
a164 2
			fprintf (stderr, "ERROR [maskout]: seed value (%i) is not within the specified range [%i : %i]\n",
				 img[z[i]][y[i]][x[i]], min, max);
@


1.4
log
@correct argc
@
text
@d2 3
d20 2
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/maskout.c,v 1.3 1999/02/08 18:17:33 tom Exp tom $";
d49 5
a53 5
	FILE           *fp;				 /* file pointer */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	long            dim1, dim2, dim3; /* dimensions of image */
	long            x, y, z;
d58 1
d70 2
a71 2
	if (argc != 11) {
		printf ("Usage: maskout img1 hdr1 img2 hdr2 min max val x y z\n");
d81 10
a90 3
	x = (long) (atoi (argv[8]));
	y = (long) (atoi (argv[9]));
	z = (long) (atoi (argv[10]));
d124 5
a128 3
	if (x > dim1 || y > dim2 || z > dim3 || x < 1 || y < 1 || z < 1) {
		fprintf (stderr, "ERROR [maskout]: seed point not in image: [%d %d %d]\n", x, y, z);
		return (ERROR);
d146 11
a156 11
    for (i = dim3; i > 0; i--) {
        for (j = dim2; j > 0; j--) {
            if ((fread (row, sizeof (short), dim1, fp)) != dim1) {
                fprintf (stderr, "ERROR [maskout]: Reading: %s\n", img1);
                return (ERROR);
            }
            for (k = 1; k <= dim1; k++)
                img[i][j][dim1 - (k - 1)] = row[k - 1];
        }
    }
    fclose (fp);
d158 6
a163 4
	if (img[z][y][x] < min || img[z][y][x] > max) {
		fprintf (stderr, "ERROR [maskout]: seed value (%i) is not within the specified range [%i : %i]\n",
			 img[z][y][x], min, max);
		return (ERROR);
d173 14
a186 6
	set[z][y][x] = 1;
	xmin = x;
	xmax = x;
	ymin = y;
	ymax = y;
	pln = z;
d193 1
a193 1
	printf ("Total in Object     = %12i\n", (dim1*dim2*dim3)-npixels);
d207 1
a207 1
	fclose(fp);
d213 11
a223 11
    for (i = dim3; i > 0; i--) {
        for (j = dim2; j > 0; j--) {
            for (k = 1; k <= dim1; k++)
                row[k - 1] = img[i][j][dim1 - (k - 1)];
            if ((fwrite (row, sizeof (short), dim1, fp)) != dim1) {
                fprintf (stderr, "ERROR [maskout]: Writing: %s\n", img2);
                return (ERROR);
            }
        }
    }
    fclose (fp);
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/maskout.c,v 1.2 1999/02/01 21:09:28 tom Exp tom $";
d64 1
a64 1
	if (argc != 10) {
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/maskout.c,v 1.1 1999/02/01 19:18:10 tom Exp tom $";
a44 1
	int             flag;
d61 2
a62 2
	if (argc != 12) {
		printf ("Usage: maskout img1 hdr1 img2 hdr2 x y z min max val flag\n");
d69 6
a74 7
	x = (long) (atoi (argv[5]));
	y = (long) (atoi (argv[6]));
	z = (long) (atoi (argv[7]));
	min = (short) (atoi (argv[8]));
	max = (short) (atoi (argv[9]));
	val = (short) (atoi (argv[10]));
	flag = atoi (argv[11]);
d159 1
a159 1
	if ((mask_out (img, set, val, flag, min, max, dim1, dim2, dim3, pln,
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/maskout.c,v 1.1 1999/01/12 15:44:41 tom Exp tom $";
d38 1
a38 2
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	int             fd_img;			 /* file for ANALYZE image */
d79 1
a79 1
	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
d83 1
a83 1
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
d105 1
a105 1
	fclose (fd_hdr);
d115 1
a115 1
	if ((fd_img = open (img1, O_RDONLY, 0444)) < 0) {
d127 11
a137 7
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			read (fd_img, row, dim1 * 2);
			for (k = 1; k <= dim1; k++)
				img[i][j][dim1 - (k - 1)] = row[k - 1];
		}
	}
a138 2
	close (fd_img);

d164 1
a164 1
	printf ("Total in Object     = %12i\n", dim1*dim2-npixels);
d170 1
a170 1
	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
d174 2
a175 2
	if ((fd_img = open (img2, O_CREAT | O_RDWR, 0666)) == 0) {
		fprintf (stderr, "ERROR [maskout]: Unable to create ANALYZE image %s\n", img2);
d178 1
a178 16
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			for (k = 1; k <= dim1; k++)
				row[k - 1] = img[i][j][dim1 - (k - 1)];
			write (fd_img, (char *) row, dim1 * 2);
		}
	}
/*
	for (i = 1; i <= dim3; i++) {
		for (j = 1; j <= dim2; j++) {
			for (k = 1; k <= dim1; k++)
				row[k] = (short) img[i][j][k];
			write (fd_img, (char *) row, dim1 * 2);
		}
	}
*/
d180 2
a181 2
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [maskout]: Error writing to: %s\n", hdr2);
d184 11
a194 3
/*
 *	Free & Exit
 */
@
