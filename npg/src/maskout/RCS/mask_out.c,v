head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2004.02.16.20.57.40;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.27.15.49.11;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	99.02.16.21.17.59;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.02.16.18.19.19;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.02.08.18.17.33;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.02.01.21.09.28;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.01.19.18.10;	author tom;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Feb 2004
@
text
@/*  ================================================================================
 *  File Name:      mask_out.c
 *  Date:           Jan 1999
 *  Author:         Tom Videen
 *  Description:    Preserve all connected pixels which are >= min AND <= max
 *					by setting to val all outside pixels.
 *					Total pixels in the mask are returned in npixels.
 *  =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/mask_out.c,v 1.6 2002/11/27 15:49:11 tom Exp tom $";
#endif

#include <stdio.h>
#include <myvalues.h>

int             mask_out (img, set, val, min, max, dim1, dim2, dim3, pln, xmin, xmax, ymin, ymax, npixels)
	short        ***img;			 /* masked image */
	short        ***set;			 /* pixels masked */
	short           val;			 /* set to this value */
	short           min, max;		 /* range to identify */
	long            dim1, dim2, dim3;	 /* dimensions of img and set */
	long            pln;
	long           *xmin, *xmax;		 /* composite range over all planes */
	long           *ymin, *ymax;		 /* composite range over all planes */
	long           *npixels;		 /* total pixels within mask */
{
	long            xmin0, xmax0;		 /* range to search in loop */
	long            ymin0, ymax0;		 /* range to search in loop */
	long            lastpln;
	long            i, j, k;
	int             sign;			 /* direction of pln increment */
	int             add_to_pln, add_to_mask;

	sign = 1;
	printf ("Plane   Total Included Pixels\n");

	do {							 /* while (add_to_mask > 0) */
		add_to_mask = 0;
		do {						 /* while (lastpln < dim3) */
			xmin0 = *xmin;
			xmax0 = *xmax;
			ymin0 = *ymin;
			ymax0 = *ymax;
			do {					 /* while (add_to_pln > 0) */
				add_to_pln = 0;
				for (j = ymin0; j <= ymax0; j++) {
					for (i = xmin0; i <= xmax0; i++) {
						if (set[pln][j][i]) {
							if (j > 1) {
								k = j - 1;
								if (set[pln][k][i] == 0) {
									if (img[pln][k][i] >= min && img[pln][k][i] <= max) {
										set[pln][k][i] = 1;
										add_to_pln = 1;
										if (k < ymin0)
											ymin0 = k;
									}
								}
							}
							if (j < dim2) {
								k = j + 1;
								if (set[pln][k][i] == 0) {
									if (img[pln][k][i] >= min && img[pln][k][i] <= max) {
										set[pln][k][i] = 1;
										add_to_pln = 1;
										if (k > ymax0)
											ymax0 = k;
									}
								}
							}
							if (i > 1) {
								k = i - 1;
								if (set[pln][j][k] == 0) {
									if (img[pln][j][k] >= min && img[pln][j][k] <= max) {
										set[pln][j][k] = 1;
										add_to_pln = 1;
										if (k < xmin0)
											xmin0 = k;
									}
								}
							}
							if (i < dim1) {
								k = i + 1;
								if (set[pln][j][k] == 0) {
									if (img[pln][j][k] >= min && img[pln][j][k] <= max) {
										set[pln][j][k] = 1;
										add_to_pln = 1;
										if (k > xmax0)
											xmax0 = k;
									}
								}
							}

						}			/* if (set[pln][j][i]) */
					}				/* i = xmin0, xmax0 */
				}					/* j = ymin0, ymax0 */
				if (add_to_pln)
					add_to_mask = 1;
			} while (add_to_pln);	 /* end do loop for current pln */

/*	Update range for search */

			if (xmin0 < *xmin)
				*xmin = xmin0;
			if (xmax0 > *xmax)
				*xmax = xmax0;
			if (ymin0 < *ymin)
				*ymin = ymin0;
			if (ymax0 > *ymax)
				*ymax = ymax0;

/*	Update pln and sign */

			lastpln = pln;
			if (sign > 0) {
				if (pln < dim3)
					pln++;
				else {
					pln--;
					sign = -1;
				}
			} else {
				if (pln > 1)
					pln--;
				else {
					pln++;
					sign = 1;
				}
			}

/*	Find contiguous included pixels in next plane */

			for (j = *ymin; j <= *ymax; j++) {
				for (i = *xmin; i <= *xmax; i++) {
					if (set[lastpln][j][i]) {
						(*npixels)++;
						if (pln != 1 && pln != dim3) {
							if (set[pln][j][i] == 0) {
								if (img[pln][j][i] >= min && img[pln][j][i] <= max) {
									set[pln][j][i] = 1;
									add_to_mask = 1;
								}
							}
						}
					}
				}
			}
			if (*npixels > 0) {
				printf ("z =%3li %11li\n", lastpln, *npixels);
				*npixels = 0;
			}

		} while (lastpln < dim3);	 /* end do loop for all planes */
	} while (add_to_mask > 0);

/*	When complete, set all excluded pixels to val */

	*npixels = 0;
	for (pln = 1; pln <= dim3; pln++) {
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				if (set[pln][j][i] == 0) {
					img[pln][j][i] = val;
					(*npixels)++;
				}
			}
		}
	}
	return (OK);
}
@


1.6
log
@*** empty log message ***
@
text
@d3 1
a3 1
 *  Date:           Jan-99
d10 1
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/mask_out.c,v 1.5 1999/02/16 21:17:59 tom Exp tom $";
@


1.5
log
@repeat search through image until no more pixels added
@
text
@d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/mask_out.c,v 1.4 1999/02/16 18:19:19 tom Exp tom $";
d150 1
a150 1
				printf ("z =%3i %11i\n", lastpln, *npixels);
@


1.4
log
@permit multiple seed pixels
@
text
@d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/mask_out.c,v 1.3 1999/02/08 18:17:33 tom Exp $";
a16 4
#define OUTSIDE     0
#define INSIDE      1
#define NEITHER     2

d22 1
a22 1
	long            dim1, dim2, dim3; /* dimensions of img and set */
d24 2
a25 2
	long           *xmin, *xmax;	 /* composite range over all planes */
	long           *ymin, *ymax;	 /* composite range over all planes */
d28 2
a29 2
	long            xmin0, xmax0;	 /* range to search in loop */
	long            ymin0, ymax0;	 /* range to search in loop */
d32 2
a33 2
	int             inc;
	int             more;
d35 2
a36 3
	more = 1;
	inc = 1;
	printf ("Plane   Total Masked\n");
d38 21
a58 19
	while (more) {
		more = 1;
		xmin0 = *xmin;
		xmax0 = *xmax;
		ymin0 = *ymin;
		ymax0 = *ymax;
		while (more) {
			more = 0;
			for (j = ymin0; j <= ymax0; j++) {
				for (i = xmin0; i <= xmax0; i++) {
					if (set[pln][j][i]) {
						if (j > 1) {
							k = j - 1;
							if (set[pln][k][i] == 0) {
								if (img[pln][k][i] >= min && img[pln][k][i] <= max) {
									set[pln][k][i] = 1;
									more = 1;
									if (k < ymin0)
										ymin0 = k;
d61 9
a69 9
						}
						if (j < dim2) {
							k = j + 1;
							if (set[pln][k][i] == 0) {
								if (img[pln][k][i] >= min && img[pln][k][i] <= max) {
									set[pln][k][i] = 1;
									more = 1;
									if (k > ymax0)
										ymax0 = k;
d72 9
a80 9
						}
						if (i > 1) {
							k = i - 1;
							if (set[pln][j][k] == 0) {
								if (img[pln][j][k] >= min && img[pln][j][k] <= max) {
									set[pln][j][k] = 1;
									more = 1;
									if (k < xmin0)
										xmin0 = k;
d83 9
a91 9
						}
						if (i < dim1) {
							k = i + 1;
							if (set[pln][j][k] == 0) {
								if (img[pln][j][k] >= min && img[pln][j][k] <= max) {
									set[pln][j][k] = 1;
									more = 1;
									if (k > xmax0)
										xmax0 = k;
d94 51
d149 2
a150 18
		}				 /* end more loop for current pln */
		if (xmin0 < *xmin)
			*xmin = xmin0;
		if (xmax0 > *xmax)
			*xmax = xmax0;
		if (ymin0 < *ymin)
			*ymin = ymin0;
		if (ymax0 > *ymax)
			*ymax = ymax0;

		lastpln = pln;
		more = 1;
		if (inc > 0) {
			if (pln < dim3)
				pln++;
			else {
				pln--;
				inc = -1;
d153 13
a165 23
		} else {
			if (pln > 1)
				pln--;
			else
				more = 0;
		}
		if (inc < 0) {
			for (j = 1; j <= dim2; j++) {
				for (i = 1; i <= dim1; i++)
					if (set[lastpln][j][i] == 0) {
						img[lastpln][j][i] = val;
						(*npixels)++;
					}
			}
		}
		if (more) {
			if (pln <= dim3) {	 /* set any adjacent pixels in next pln */
				for (j = *ymin; j <= *ymax; j++) {
					for (i = *xmin; i <= *xmax; i++)
						if (set[lastpln][j][i])
							if (set[pln][j][i] == 0)
								if (img[pln][j][i] >= min && img[pln][j][i] <= max)
									set[pln][j][i] = 1;
a168 1
		printf ("z =%3i %11i\n", lastpln, *npixels);
@


1.3
log
@*** empty log message ***
@
text
@d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/mask_out.c,v 1.2 1999/02/01 21:09:28 tom Exp tom $";
d127 8
a134 6
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++)
				if (set[lastpln][j][i] == 0) {
					img[lastpln][j][i] = val;
					(*npixels)++;
				}
@


1.2
log
@*** empty log message ***
@
text
@d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskout/RCS/mask_out.c,v 1.1 1999/02/01 19:18:10 tom Exp tom $";
d21 1
a21 1
int             mask_out (img, set, val, flag, min, max, dim1, dim2, dim3, pln, xmin, xmax, ymin, ymax, npixels)
a24 2
	int             flag;			 /* 0  -> same seed [x,y,z] used in all planes */
									 /* 1  -> continue mask to next plane */
a31 1
	long            x0, y0;			 /* initial seed */
a38 7
	if (flag < 0 || flag > 1) {
		fprintf (stderr, "ERROR [mask_out]: illegal value for flag: %i\n", flag);
		return (ERROR);
	}
	x0 = *xmin;
	y0 = *ymin;

d45 4
a48 11
		if (flag == 0) {
			xmin0 = x0-1;
			xmax0 = x0+1;
			ymin0 = y0-1;
			ymax0 = y0+1;
		} else {
			xmin0 = *xmin;
			xmax0 = *xmax;
			ymin0 = *ymin;
			ymax0 = *ymax;
		}
d135 1
a135 3
			if (flag == 0)			/* use same see in next pln */
				set[pln][y0][x0] = 1;
			else if (pln <= dim3) {	 /* set any adjacent pixels in next pln */
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskull/RCS/mask_out.c,v 1.1 1999/01/12 15:44:41 tom Exp tom $";
d34 1
a34 1
	long            x0, y0, z0;		 /* initial seed */
a37 1
	long			num;
a47 2
	z0 = pln;
	num = dim1*dim2;
d51 1
a51 1
	printf ("Plane   In Object   Total Masked\n");
d127 1
a127 7
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++)
				if (set[pln][j][i] == 0) {
					img[pln][j][i] = val;
					(*npixels)++;
				}
		}
d136 1
d144 7
d164 1
a164 1
		printf ("z =%3i %11i %12\n", lastpln, num-*npixels, *npixels);
@
