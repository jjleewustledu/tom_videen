head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2005.08.17.13.18.03;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Log$ */
/*	=========================================================================
 *	Module:			anainsert.c
 *	Author:			Tom Videen
 *	Date:			Aug 2005
 *	Description:	Pad planes to a coronal Analyze image.
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: anainsert.c,v 2.0 2004/02/13 17:06:06 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <nrutil.h>
#include <ANALYZE.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;
	FILE           *fd_in;
	FILE           *fd_out;
	char           *inhdr;
	char           *inimg;
	char           *outhdr;
	char           *outimg;
	long            nx, nz;
	short          *inrow;
	short          *rows1, *rows2;
	int             n1, n2;
	int             i, n0, ny;

	if (argc != 7) {
		(void) fprintf (stderr, "Usage: anainsert inhdr inimg outhdr outimg pln nplanes\n");
		return (ERROR);
	}
	inhdr = argv[1];
	inimg = argv[2];
	outhdr = argv[3];
	outimg = argv[4];
	n0 = atoi (argv[5]);
	ny = atoi (argv[6]);

/* Read hdr file	*/

	if ((fd_in = fopen (inhdr, "r")) == 0) {
		(void) fprintf (stderr, "ERROR [anainsert]: opening %s\n", inhdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_in)) != 1) {
		(void) fprintf (stderr, "ERROR [anainsert]: reading %s\n", inhdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		(void) fprintf (stderr, "ERROR [anainsert]: reading %s\n", inhdr);
		(void) fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		(void) fprintf (stderr, "ERROR [anainsert]: reading %s\n", inhdr);
		(void) fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		(void) fprintf (stderr, "ERROR [anainsert]: reading %s\n", inhdr);
		(void) fprintf (stderr, "Bits/pixel = %d (expecting 16)\n", hdr.dime.bitpix);
		return (ERROR);
	}
	nx = hdr.dime.dim[1];
	nz = hdr.dime.dim[3];
	(void) fclose (fd_in);

/*	Write hdr	*/

	if ((fd_out = fopen (outhdr, "w")) == 0) {
		(void) fprintf (stderr, "ERROR [anainsert]: opening %s\n", outhdr);
		return (ERROR);
	}
	hdr.dime.dim[1] = nx;
	hdr.dime.dim[2] = ny;
	hdr.dime.dim[3] = nz;
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_out)) != 1) {
		(void) fprintf (stderr, "ERROR [anainsert]: writing %s\n", outhdr);
		return (ERROR);
	}
	(void) fclose (fd_out);

/*	Read and write image	*/

	n1 = (ny - n0) * nx;
	n2 = (n0 - 1) * nx;
	inrow = (short *) calloc (nx, sizeof (short));
	if (inrow == NULL) {
		(void) fprintf (stderr, "ERROR [anainsert]: calloc inrow\n");
		return (ERROR);
	}
	rows1 = (short *) calloc (n1, sizeof (short));
	if (rows1 == NULL) {
		(void) fprintf (stderr, "ERROR [anainsert]: calloc rows1\n");
		return (ERROR);
	}
	rows2 = (short *) calloc (n2, sizeof (short));
	if (rows2 == NULL) {
		(void) fprintf (stderr, "ERROR [anainsert]: calloc rows2\n");
		return (ERROR);
	}
	if ((fd_in = fopen (inimg, "r")) == 0) {
		(void) fprintf (stderr, "ERROR [anainsert]: opening %s\n", inimg);
		return (ERROR);
	}
	if ((fd_out = fopen (outimg, "w")) == 0) {
		(void) fprintf (stderr, "ERROR [anainsert]: opening %s\n", outimg);
		return (ERROR);
	}
	for (i = 0; i < nz; i++) {
		if ((fread (inrow, sizeof (short), nx, fd_in)) != nx) {
			(void) fprintf (stderr, "ERROR [anainsert]: reading %s\n", inimg);
			return (ERROR);
		}
		if ((fwrite (rows1, sizeof (short), n1, fd_out)) != n1) {
			(void) fprintf (stderr, "ERROR [anainsert]: writing %s\n", outimg);
			return (ERROR);
		}
		if ((fwrite (inrow, sizeof (short), nx, fd_out)) != nx) {
			(void) fprintf (stderr, "ERROR [anainsert]: writing %s\n", outimg);
			return (ERROR);
		}
		if ((fwrite (rows2, sizeof (short), n2, fd_out)) != n2) {
			(void) fprintf (stderr, "ERROR [anainsert]: writing %s\n", outimg);
			return (ERROR);
		}
	}
	(void) fclose (fd_in);
	(void) fclose (fd_out);
	(void) fprintf (stdout, "Inserted %s into %s\n", inimg, outimg);
	free (inrow);
	free (rows1);
	free (rows2);
	return (OK);
}
@
