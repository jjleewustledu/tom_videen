head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2008.08.07.19.49.21;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.04.15.00.27;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/*  $Id: singleframe.c,v 1.1 2008/08/04 15:00:27 tom Exp tom $
	$Log: singleframe.c,v $
 * Revision 1.1  2008/08/04  15:00:27  tom
 * Initial revision
 * */
/* =============================================================================
 *  Module:         singleframe.c
 *  Date:           Aug 2008
 *  Author:         Tom Videen
 *  Description:    Separate a single frame of an ECAT image
 * =============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/singleframe/RCS/singleframe.c,v 1.1 2008/08/04 15:00:27 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];

{

	ImageFile      *file1;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	float        ***img;			 /* input tensor */
	char           *infile;			 /* file to read */
	char           *outfile;		 /* file to write */
	int             frm;
	int             nx, ny, nz;		 /* array dimensions */

/*
 * Get command line arguments.
 */
	if (argc != 4) {
		fprintf (stderr, "Usage: singleframe in out frm\n");
		return (1);
	}
	infile = argv[1];
	outfile = argv[2];
	frm = atoi (argv[3]);

	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	file1 = make_imgfile (infile);
	(void) strcpy (file1->mode, "r");
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [singleframe]: opening %s\n", infile);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [singleframe]: reading MainHeader from %s\n", infile);
		return (ERROR);
	}
	if (existimgfrm (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [singleframe]: reading %s frame %d\n", infile, frm);
		return (ERROR);
	}
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [singleframe]: reading subheader in %s\n", infile);
		return (ERROR);
	}
	mh = file1->mh;
	sh = file1->sh;
	nx = sh->dim1;
	ny = sh->dim2;
	nz = sh->dim3;
	if ((img = readtensor (file1, &indx)) == NULL) {
		fprintf (stderr, "ERROR [singleframe]: reading image data from %s\n", infile);
		return (ERROR);
	}
	close_imgfile (file1);

	file1->name = outfile;
	(void) strcpy (file1->mode, "w");
	indx.frm = 1;
	fprintf (stdout, "Writing %s\n", outfile);
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [singleframe]: opening %s\n", outfile);
		return (ERROR);
	}
	mh->nframe = 1;
	mh->nplane = nz;
	sh->dim3 = nz;
	if (put_mh (file1) == ERROR)
		return (ERROR);
	if (writetensor (file1, &indx, img) == ERROR)
		return (ERROR);
	free_f3tensor (img, 1, nz, 1, ny, 1, nx);
	close_imgfile (file1);
	free_imgfile (file1);
	free (file1);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 2.3 2008/07/29 21:25:11 tom Exp tom $";
d79 1
a79 1
	if ((img = readtensor_decay (file1, &indx)) == NULL) {
@
