head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2010.03.03.17.53.18;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.16.18.05.56;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.16.15.48.27;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fix 4dfp orientation 2 in addition to 4
correct output orientation to match Analyze default
@
text
@/*	===============================================================================
 *	Module:			fixfu4dfp.c
 *	Date:			Sep 2004
 *	Author:			Tom Videen
 *	Description:	Fix orientation of Interfile image
 *	Modified:		3/3/2010 to fix 4dfp orientation 2 in addition to 4
 *						and to correct output orientation to match Analyze default;
 *	===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixfu4dfp/RCS/fixfu4dfp.c,v 1.2 2004/09/16 18:05:56 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <values.h>
#include <strings.h>
#include <image.h>
#include <nrutil.h>
#include <ANALYZE.h>

#define MAXSTR 256
#define TRANSVERSE '\000'

int main (argc, argv)
	int             argc;
	char           *argv[];
{

	FILE           *fuifh;			 /* input 4dfp ifh file */
	FILE           *fuimg;			 /* input 4dfp img file */
	FILE           *fhdr;			 /* output ANALYZE hdr */
	FILE           *fimg;			 /* output ANALYZE image  */
	FILE           *fifh;			 /* output Interfile Format header */
	struct dsr      hdr;			 /* header for ANALYZE */

	char           *fname;
	char            FU_hdr[MAXSTR];		 /* input header filename */
	char            FU_img[MAXSTR];		 /* input image filename */
	char            ANALYZE_hdr[MAXSTR];	 /* output Analyze header filename */
	char            ANALYZE_img[MAXSTR];	 /* output Analyze image filename */
	char            IF_hdr[MAXSTR];		 /* output Interfile Format header filename */
	char            str[MAXSTR];
	char           *ptr;

	float          *img;
	float        ***img1;

	float           global_max;
	float           global_min;

	int             orient;				/* current implemented for 2 and 4	*/
	int             dx, dy, dz;			/* input dimensions  */
	float           px, py, pz;			/* input pixel size	 */
	int             dim1, dim2, dim3;	/* output dimensions */
	float           pix1, pix2, pix3;	/* output pixel size */
	long            plane;
	long            i, j, k, ix;

	if (argc != 2) {
		fprintf (stderr, "Usage: ifhix fname\n");
		return (ERROR);
	}
	fname = argv[1];
	(void) strcpy (FU_hdr, fname);
	(void) strcat (FU_hdr, ".4dfp.ifh");
	(void) strcpy (FU_img, fname);
	(void) strcat (FU_img, ".4dfp.img");
	(void) strcpy (ANALYZE_img, fname);
	(void) strcat (ANALYZE_img, ".img");
	(void) strcpy (ANALYZE_hdr, fname);
	(void) strcat (ANALYZE_hdr, ".hdr");
	(void) strcpy (IF_hdr, fname);
	(void) strcat (IF_hdr, ".ifh");


/*	Read FU hdr	*/

	if ((fuifh = fopen (FU_hdr, "r")) == NULL) {
		fprintf (stderr, "ERROR [fixfu4dfp]: opening input %s\n", FU_hdr);
		return (ERROR);
	}
	if (fgets (str, sizeof (str), fuifh) == NULL) {
		(void) printf ("ERROR [fixfu4dfp]: reading %s\n", FU_hdr);
		return (ERROR);
	}
	if (strstr (str, "INTERFILE") == NULL) {
		(void) printf ("ERROR [fixfu4dfp]: %s is not an Interfile header\n", FU_hdr);
		return (ERROR);
	}
	while (fgets (str, sizeof (str), fuifh) != NULL) {
		ptr = strstr (str, ":=");
		if (ptr != NULL) {
			ptr += 2;
			if (strstr (str, "number format") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (strstr (ptr, "float") == NULL) {
					fprintf (stderr, "ERROR [fixfu4dfp]: image is not float\n");
					return (ERROR);
				}
				continue;
			}
			if (strstr (str, "orientation") != NULL) {
				(void) sscanf (ptr, "%d", &orient);
				if (orient != 4 && orient != 2) {
					fprintf (stderr, "ERROR [fixfu4dfp]: %s must have orientation 2 or 4\n", FU_hdr);
					return (ERROR);
				}
				continue;
			}
			if (strstr (str, "matrix size [1]") != NULL) {
				(void) sscanf (ptr, "%d", &dx);
				continue;
			}
			if (strstr (str, "matrix size [2]") != NULL) {
				(void) sscanf (ptr, "%d", &dy);
				continue;
			}
			if (strstr (str, "matrix size [3]") != NULL) {
				(void) sscanf (ptr, "%d", &dz);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [1]") != NULL) {
				(void) sscanf (ptr, "%f", &px);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [2]") != NULL) {
				(void) sscanf (ptr, "%f", &py);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [3]") != NULL) {
				(void) sscanf (ptr, "%f", &pz);
				continue;
			}
		}
	}
	(void) fclose (fuifh);

	if (orient == 4) {
		dim1 = dy;
		dim2 = dz;
		dim3 = dx;
		pix1 = py;
		pix2 = pz;
		pix3 = px;
	} else if (orient == 2) {
		dim1 = dx;
		dim2 = dy;
		dim3 = dz;
		pix1 = px;
		pix2 = py;
		pix3 = pz;
	}

/*	Read image data	*/

	if ((fuimg = fopen (FU_img, "r")) == NULL) {
		fprintf (stderr, "ERROR [fixfu4dfp]: opening output %s\n", FU_img);
		return (ERROR);
	}
	if ((img1 = f3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [fixfu4dfp]: malloc img1\n");
		return (ERROR);
	}
	plane = dx * dy;
	if ((img = (float *) calloc (plane, sizeof (float))) == NULL) {
		fprintf (stderr, "ERROR [fixfu4dfp]: calloc img\n");
		return (ERROR);
	}
	
	if (orient == 4) {
		for (k = dz; k > 0; k--) {
			if ((fread (img, sizeof (float), plane, fuimg)) != plane) {
				fprintf (stderr, "ERROR [fixfu4dfp]: reading %s\n", FU_img);
				return (ERROR);
			}
			ix = 0;
			for (j = 1; j <= dy; j++) {
				for (i = 1; i <= dx; i++) {
					img1[i][k][j] = img[ix];
					ix++;
				}
			}
		}
	} else if (orient == 2) {
		for (k = dz; k > 0; k--) {
			if ((fread (img, sizeof (float), plane, fuimg)) != plane) {
				fprintf (stderr, "ERROR [fixfu4dfp]: reading %s\n", FU_img);
				return (ERROR);
			}
			ix = 0;
			for (j = 1; j <= dy; j++) {
				for (i = 1; i <= dx; i++) {
					img1[k][j][i] = img[ix];
					ix++;
				}
			}
		}
	}

	free (img);
	(void) fclose (fuimg);

/* Create Analyze and Interfiles	*/

	if ((fhdr = fopen (ANALYZE_hdr, "w")) == NULL) {
		fprintf (stderr, "ERROR [fixfu4dfp]: creating %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if ((fimg = fopen (ANALYZE_img, "w")) == NULL) {
		fprintf (stderr, "ERROR [fixfu4dfp]: creating %s\n", ANALYZE_img);
		return (ERROR);
	}
	if ((fifh = fopen (IF_hdr, "w")) == NULL) {
		fprintf (stderr, "ERROR [fixfu4dfp]: creating %s\n", IF_hdr);
		return (ERROR);
	}
	global_max = MINFLOAT;
	global_min = MAXFLOAT;
	plane = dim1 * dim2;
	if ((img = (float *) calloc (plane, sizeof (float))) == NULL) {
		fprintf (stderr, "ERROR [fixfu4dfp]: calloc img\n");
		return (ERROR);
	}
	for (k = dim3; k > 0; k--) {
		ix = 0;
		for (j = dim2; j > 0; j--) {
			for (i = 0; i < dim1; i++) {
				img[ix] = img1[k][j][i];
				if (img[ix] > global_max)
					global_max = img[ix];
				if (img[ix] < global_min)
					global_min = img[ix];
				ix++;
			}
		}
		if (fwrite (img, sizeof (float), plane, fimg) != plane) {
			fprintf (stderr, "ERROR [fixfu4dfp]: writing %s\n", ANALYZE_img);
			return (ERROR);
		}
	}

	free (img);
	(void) fclose (fimg);

/*
 * Create Analyze hdr file
 */

	(void) strncpy (hdr.hk.db_name, fname, 17);
	hdr.hk.sizeof_hdr = sizeof (struct dsr); /* required by developers */
	hdr.hk.extents = 16384;			 /* recommended by developers  */
	hdr.hk.regular = 'r';			 /* required by developers */
	hdr.dime.dim[0] = 4;			 /* 4 dimensions  */
	hdr.dime.dim[1] = dim1;
	hdr.dime.dim[2] = dim2;
	hdr.dime.dim[3] = dim3;
	hdr.dime.dim[4] = 1;			 /* one volume */
	hdr.dime.unused8 = 0;			 /* despite the label, some of this is used */
	hdr.dime.unused9 = 0;
	hdr.dime.unused10 = 0;
	hdr.dime.unused11 = 0;
	hdr.dime.unused12 = 0;
	hdr.dime.unused13 = 0;
	hdr.dime.unused14 = 0;
	hdr.dime.datatype = 16;			 /* float (?)  */
	hdr.dime.bitpix = 32;
	hdr.dime.pixdim[1] = pix1;
	hdr.dime.pixdim[2] = pix2;
	hdr.dime.pixdim[3] = pix3;
	hdr.dime.funused8 = 0;
	hdr.dime.funused9 = 0;
	hdr.dime.funused10 = 0;
	hdr.dime.funused11 = 0;
	hdr.dime.funused12 = 0;
	hdr.dime.funused13 = 0;
	hdr.dime.glmax = global_max;
	hdr.dime.glmin = global_min;
	(void) strncpy (hdr.hist.descrip, fname, 79);
	(void) strcpy (hdr.hist.originator, "fixfu4dfp");
	hdr.hist.orient = TRANSVERSE;

	if ((fwrite (&hdr, sizeof (struct dsr), 1, fhdr)) != 1) {
		(void) fprintf (stderr, "ERROR [fixfu4dfp]: writing to: %s\n", ANALYZE_hdr);
		return (ERROR);
	}
/*
 * Create Interfile Format header file
 */

	fprintf (fifh, "INTERFILE :=\n");
	fprintf (fifh, "version of keys := 3.3\n");
	fprintf (fifh, "image modality  := mri\n");
	fprintf (fifh, "conversion program  := fixfu4dfp\n");
	fprintf (fifh, "name of data file   := %s\n", ANALYZE_img);
	fprintf (fifh, "number format   := float\n");
	fprintf (fifh, "number of bytes per pixel   := 4\n");
	fprintf (fifh, "number of dimensions    := 3\n");
	fprintf (fifh, "matrix size [1] := %d\n", dim1);
	fprintf (fifh, "matrix size [2] := %d\n", dim2);
	fprintf (fifh, "matrix size [3] := %d\n", dim3);
	fprintf (fifh, "scaling factor (mm/pixel) [1]   := %f\n", pix1);
	fprintf (fifh, "scaling factor (mm/pixel) [2]   := %f\n", pix2);
	fprintf (fifh, "scaling factor (mm/pixel) [3]   := %f\n", pix3);
	fprintf (fifh, "matrix initial element [1]  := right\n");
	fprintf (fifh, "matrix initial element [2]  := posterior\n");
	fprintf (fifh, "matrix initial element [3]  := inferior\n");

	fprintf (stdout, "Converted: %s to %s\n", FU_img, ANALYZE_img);
	(void) fclose (fhdr);
	(void) fclose (fimg);
	(void) fclose (fifh);
	return (OK);
}
@


1.2
log
@reverse right/left
@
text
@d6 2
d10 2
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixfu4dfp/RCS/fixfu4dfp.c,v 1.1 2004/09/16 15:48:27 tom Exp tom $";
d25 1
a25 1
main (argc, argv)
d52 5
a56 3
	int             orient;
	int             dim1, dim2, dim3;
	float           pix1, pix2, pix3;
d106 2
a107 2
				if (orient != 4) {
					fprintf (stderr, "ERROR [fixfu4dfp]: %s does not have orientation 4\n", FU_hdr);
d113 1
a113 1
				(void) sscanf (ptr, "%d", &dim2);
d117 1
a117 1
				(void) sscanf (ptr, "%d", &dim3);
d121 1
a121 1
				(void) sscanf (ptr, "%d", &dim1);
d125 1
a125 1
				(void) sscanf (ptr, "%f", &pix2);
d129 1
a129 1
				(void) sscanf (ptr, "%f", &pix3);
d133 1
a133 1
				(void) sscanf (ptr, "%f", &pix1);
d140 16
d166 1
a166 1
	plane = dim2 * dim3;
d171 14
a184 4
	for (i = dim1; i > 0; i--) {
		if ((fread (img, sizeof (float), plane, fuimg)) != plane) {
			fprintf (stderr, "ERROR [fixfu4dfp]: reading %s\n", FU_img);
			return (ERROR);
d186 5
a190 5
		ix = 0;
		for (k = 1; k <= dim3; k++) {
			for (j = 1; j <= dim2; j++) {
				img1[k][j][i] = img[ix];
				ix++;
d192 7
d229 1
a229 1
			for (i = dim1; i > 0; i--) {
d306 1
a306 1
	fprintf (fifh, "matrix initial element [1]  := left\n");
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fixfu4dfp/RCS/fixfu4dfp.c,v 1.1 2004/02/16 16:30:11 tom Exp $";
d150 1
a150 1
	for (i = 1; i <= dim1; i++) {
d268 1
a268 1
	fprintf (fifh, "matrix initial element [1]  := right\n");
@
