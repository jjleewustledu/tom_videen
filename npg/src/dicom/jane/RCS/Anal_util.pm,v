head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.12.30.19.21.32;	author tom;	state Exp;
branches;
next	;


desc
@Jane's version
@


1.1
log
@Initial revision
@
text
@# $Log$
# ===
# Name: Anal_util.pm
# Purpose: Definition of Analyze header and data file structures
# ===

use strict;

package Anal_util;

# ---------------------
# Variable declarations - constants
# ---------------------

my $prog_name = "dcm_ct2a";    # truncated to 8 chars. for Analyze field "originator"

my $CHAR_SIZE  = 1;
my $INT_SIZE   = 4;
my $SINT_SIZE  = 2;
my $FLOAT_SIZE = 4;
my $len_in_chars;
my $len_in_ints;
my $len_in_sints;
my $len_in_floats;

my $TRANSVERSE = 0;
my $CORONAL = 1;
my $SAGITTAL = 2;

# -----
# Analyze substructure "header_key"
# -----

# Analyze field definitions:
#   [0]: <Analyze field name>
#   [1]: <file offset in bytes>
#   [2]: <field length in bytes>
#   [3]: <datatype>
#   [4]: <corresponding DICOM field name - blank if none exists>
#   [5]: <value>

my @@def_sizeof_hdr    = ('sizeof_hdr',     0,   4, 'int',   '',     '');
my @@def_data_type     = ('data_type',      4,  10, 'char',  '',     '');
my @@def_db_name       = ('db_name',       14,  18, 'char',  '',     '');
my @@def_extents       = ('extents',       32,   4, 'int',   '',     '');
my @@def_session_error = ('session_error', 36,   2, 'sint',  '',     '');
my @@def_regular       = ('regular',       38,   1, 'char',  '',     '');
my @@def_hkey_un0      = ('hkey_un0',      39,   1, 'char',  '',     '');

# Associative array of references to field definition arrays
# (for looping). REMEMBER that order in hash table may not
# reflect definition order. Elements must be sorted at run
# time (e.g., using field offset value - see above).
# 
#    key: <Analyze fieldname>
#  value: <array ref. to field definition assoc. array (above)> 

my %header_key = ( 
                   'sizeof_hdr',    \@@def_sizeof_hdr,
                   'data_type',     \@@def_data_type,
                   'db_name',       \@@def_db_name,
                   'extents',       \@@def_extents,
                   'session_error', \@@def_session_error,
                   'regular',       \@@def_regular,
                   'hkey_un0',      \@@def_hkey_un0,
	         );

my @@header_key_order = (
                         'sizeof_hdr',   
                         'data_type',  
                         'db_name',   
                         'extents',        
                         'session_error', 
                         'regular',       
                         'hkey_un0'     
                        );

# ---------------
# Analyze substructure "image_dimension"
# ---------------

# Analyze field definitions:
#   [0]: <Analyze field name>
#   [1]: <file offset in bytes>
#   [2]: <field length in bytes>
#   [3]: <datatype>
#   [4]: <corresponding DICOM field name - blank if none exists>
#   [5]: <value>

my @@def_dim0        = ('dim0',        0,  2, 'sint', '',            '');
my @@def_dim1        = ('dim1',        2,  2, 'sint', 'IMG Rows',    '');
my @@def_dim2        = ('dim2',        4,  2, 'sint', 'IMG Columns', '');
my @@def_dim3        = ('dim3',        6,  2, 'sint', '', '');
my @@def_dim4        = ('dim4',        8,  2, 'sint', '', '');
my @@def_dim5        = ('dim5',       10,  2, 'sint', '', '');
my @@def_dim6        = ('dim6',       12,  2, 'sint', '', '');
my @@def_dim7        = ('dim7',       14,  2, 'sint', '', '');
my @@def_unused8    = ('unused8',    16,  2, 'sint',  '', '');
my @@def_unused9    = ('unused9',    18,  2, 'sint',  '', '');
my @@def_unused10   = ('unused10',   20,  2, 'sint',  '', '');
my @@def_unused11   = ('unused11',   22,  2, 'sint',  '', '');
my @@def_unused12   = ('unused12',   24,  2, 'sint',  '', ''); 
my @@def_unused13   = ('unused13',   26,  2, 'sint',  '', '');
my @@def_unused14   = ('unused14',   28,  2, 'sint',  '', '');
my @@def_datatype   = ('datatype',   30,  2, 'sint',  '', '');
my @@def_bitpix     = ('bitpix',     32,  2, 'sint',  'IMG Bits Allocated', '');
my @@def_dim_un0    = ('dim_un0',    34,  2, 'sint',  '', '');
my @@def_pixdim0     = ('pixdim0',   36,  4, 'float', '', '');
my @@def_pixdim1     = ('pixdim1',   40,  4, 'float', 'IMG Pixel Spacing', '');
my @@def_pixdim2     = ('pixdim2',   44,  4, 'float', 'IMG Pixel Spacing', '');
my @@def_pixdim3     = ('pixdim3',   48,  4, 'float', 'ACQ Slice Thickness', '');
my @@def_pixdim4     = ('pixdim4',   52,  4, 'float', '', '');
my @@def_pixdim5     = ('pixdim5',   56,  4, 'float', '', '');
my @@def_pixdim6     = ('pixdim6',   60,  4, 'float', '', '');
my @@def_pixdim7     = ('pixdim7',   64,  4, 'float', '', '');
my @@def_funused8   = ('funused8',   68,  4, 'float', '', '');
my @@def_funused9   = ('funused9',   72,  4, 'float', '', '');
my @@def_funused10  = ('funused10',  76,  4, 'float', '', '');
my @@def_funused11  = ('funused11',  80,  4, 'float', '', '');
my @@def_funused12  = ('funused12',  84,  4, 'float', '', '');
my @@def_funused13  = ('funused13',  88,  4, 'float', '', '');
my @@def_compressed = ('compressed', 92,  4, 'float', '', '');
my @@def_verified   = ('verified',   96,  4, 'float', '', '');
my @@def_glmax      = ('glmax',     100,  4, 'int',   '', '');
my @@def_glmin      = ('glmin',     104,  4, 'int',   '', '');
                   
# Associative array of references to field definition arrays
# (for looping). REMEMBER that order in hash table may not
# reflect definition order. Elements must be sorted at run
# time (e.g., using field offset value - see above).
# 
#    key: <Analyze fieldname>
#  value: <array ref. to field definition assoc. array (above)> 

my %image_dimension = ( 
                        'dim0',       \@@def_dim0,
                        'dim1',       \@@def_dim1,
                        'dim2',       \@@def_dim2,
                        'dim3',       \@@def_dim3,
                        'dim4',       \@@def_dim4,
                        'dim5',       \@@def_dim5,
                        'dim6',       \@@def_dim6,
                        'dim7',       \@@def_dim7,
                        'unused8',    \@@def_unused8,
                        'unused9',    \@@def_unused9,
                        'unused10',   \@@def_unused10,
                        'unused11',   \@@def_unused11,
                        'unused12',   \@@def_unused12, 
                        'unused13',   \@@def_unused13,
                        'unused14',   \@@def_unused14,
                        'datatype',   \@@def_datatype,
                        'bitpix',     \@@def_bitpix,
                        'dim_un0',    \@@def_dim_un0,
                        'pixdim0',    \@@def_pixdim0,
                        'pixdim1',    \@@def_pixdim1,
                        'pixdim2',    \@@def_pixdim2,
                        'pixdim3',    \@@def_pixdim3,
                        'pixdim4',    \@@def_pixdim4,
                        'pixdim5',    \@@def_pixdim5,
                        'pixdim6',    \@@def_pixdim6,
                        'pixdim7',    \@@def_pixdim7,
                        'funused8',   \@@def_funused8,
                        'funused9',   \@@def_funused9,
                        'funused10',  \@@def_funused10,
                        'funused11',  \@@def_funused11,
                        'funused12',  \@@def_funused12,
                        'funused13',  \@@def_funused13,
                        'compressed', \@@def_compressed,
                        'verified',   \@@def_verified,
                        'glmax',      \@@def_glmax,
                        'glmin',      \@@def_glmin,
	              );

my @@image_dimension_order = (
                           'dim0', 
                           'dim1', 
                           'dim2', 
                           'dim3', 
                           'dim4', 
                           'dim5', 
                           'dim6', 
                           'dim7', 
                           'unused8',    
                           'unused9',    
                           'unused10',   
                           'unused11',   
                           'unused12', 
                           'unused13', 
                           'unused14',   
                           'datatype', 
                           'bitpix',     
                           'dim_un0',   
                           'pixdim0',
                           'pixdim1',
                           'pixdim2',  
                           'pixdim3',  
                           'pixdim4',  
                           'pixdim5',                         
                           'pixdim6',  
                           'pixdim7',  
                           'funused8',   
                           'funused9',   
                           'funused10', 
                           'funused11',  
                           'funused12', 
                           'funused13',  
                           'compressed', 
                           'verified', 
                           'glmax',      
                           'glmin'    
                         );

# ---------------
# Analyze substructure "data_history"
# ---------------

# Analyze field definitions:
#   [0]: <Analyze field name>
#   [1]: <file offset in bytes>
#   [2]: <field length in bytes>
#   [3]: <datatype>
#   [4]: <corresponding DICOM field name - blank if none exists>
#   [5]: <value>

my @@def_descrip     = ('descrip',       0, 80, 'char', 'ID Study Description', '');
my @@def_aux_file    = ('aux_file',     80, 24, 'char', '', '');
my @@def_orient      = ('orient',      104,  1, 'char', 'ACQ Patient Position', '');
my @@def_originator  = ('originator',  105, 10, 'char', '', '');
my @@def_generated   = ('generated',   115, 10, 'char', '', '');
my @@def_scannum     = ('scannum',     125, 10, 'char', 'REL Image Number', '');
my @@def_patient_id  = ('patient_id',  135, 10, 'char', 'PAT Patient ID', '');
my @@def_exp_date    = ('exp_date',    145, 10, 'char', 'ID Study Date', '');
my @@def_exp_time    = ('exp_time',    155, 10, 'char', 'ID Study Time', '');
my @@def_hist_un0    = ('hist_un0',    165,  3, 'char', '', '');
my @@def_views       = ('views',       168,  4, 'int',  '', '');
my @@def_vols_added  = ('vols_added',  172,  4, 'int',  '', '');
my @@def_start_field = ('start_field', 176,  4, 'int',  '', '');
my @@def_field_skip  = ('field_skip',  180,  4, 'int',  '', '');
my @@def_omax        = ('omax',        184,  4, 'int',  '', '');
my @@def_omin        = ('omin',        188,  4, 'int',  '', '');
my @@def_smax        = ('smax',        192,  4, 'int',  '', '');
my @@def_smin        = ('smin',        196,  4, 'int',  '', '');
    
# Associative array of references to field definition arrays
# (for looping). REMEMBER that order in hash table may not
# reflect definition order. Elements must be sorted at run
# time (e.g., using field offset value - see above).
# 
#    key: <Analyze fieldname>
#  value: <array ref. to field definition assoc. array (above)> 

my %data_history = ( 
                     'descrip',     \@@def_descrip,
                     'aux_file',    \@@def_aux_file,
                     'orient',      \@@def_orient,
                     'originator',  \@@def_originator,
                     'generated',   \@@def_generated,
                     'scannum',     \@@def_scannum, 
                     'patient_id',  \@@def_patient_id,
                     'exp_date',    \@@def_exp_date,
                     'exp_time',    \@@def_exp_time,
                     'hist_un0',    \@@def_hist_un0,
                     'views',       \@@def_views,
                     'vols_added',  \@@def_vols_added,
                     'start_field', \@@def_start_field,
                     'field_skip',  \@@def_field_skip,
                     'omax',        \@@def_omax,
                     'omin',        \@@def_omin,
                     'smax',        \@@def_smax,
                     'smin',        \@@def_smin,
		    );

my @@data_history_order = ( 
                     'descrip', 
                     'aux_file',  
                     'orient',     
                     'originator',  
                     'generated',   
                     'scannum',    
                     'patient_id', 
                     'exp_date',    
                     'exp_time',    
                     'hist_un0',    
                     'views',     
                     'vols_added',  
                     'start_field',
                     'field_skip',  
                     'omax',        
                     'omin',        
                     'smax',       
                     'smin',      
		    );

# ---------------
# Analyze header definition - substructures and their length
# ---------------

my %analyze_db = (
                   'header_key',      \%header_key, 
                   'image_dimension', \%image_dimension, 
                   'data_history',    \%data_history
                 );

my @@analyze_db_order = (
                         'header_key',
                         'image_dimension',
                         'data_history'
			);

my %struct_size = (
                  'header_key',       40,
                  'image_dimension', 108,
                  'data_history',    200
	       );

my %def_array_elem_no = (
                       'anal_name',  0,
                       'offset',     1,
		       'length',     2,
                       'data_type',  3,
                       'dicom_name', 4,
                       'value',      5
                      );

my $anal_elem;
my $off_elem;
my $len_elem;
my $type_elem;
my $dcm_elem;
my $val_elem;

my %assoc_array_index = (
                          'header_key', \@@header_key_order,
                          'image_dimension', \@@image_dimension_order,
                          'data_history', \@@data_history_order
                         );

# ---------------
# Miscellaneous variables
# ---------------

my $substruct_size;
my $substruct;

my $foo;
my $field;
my $def_array_ref;
my $i;
my $key;
my @@keys;
my $len_in_ints;

my $anal_elem;
my %anal_name;
my %offset;
my %length;
my %data_type;
my %dicom_name;
my %value;

my $off_elem;
my $len_elem;
my $type_elem;
my $dcm_elem;
my $val_elem;

# =====
# Subroutines
# =====

sub create_anal_hdr {

    my ($name_and_val, $init_vals, $outfile, $debug) = @@_;

# Shorter forms for array element numbers used frequently
$anal_elem = $def_array_elem_no{'anal_name'};
$off_elem  = $def_array_elem_no{'offset'};
$len_elem  = $def_array_elem_no{'length'};
$type_elem = $def_array_elem_no{'data_type'};
$dcm_elem  = $def_array_elem_no{'dicom_name'};
$val_elem  = $def_array_elem_no{'value'};

# Get header_key values
$def_sizeof_hdr[$val_elem] = get_sizeof_hdr(\%struct_size);	
$def_db_name[$val_elem] = $init_vals->{'db_name'};       # header filename prefix  
$def_extents[$val_elem] = 16384;            # recommended minimum header size
$def_regular[$val_elem] = 'r'; # must be 'r' = all images and volumes are same size

# Get image_dimension values
$def_dim0[$val_elem] = 4;
$def_dim1[$val_elem] = get_rows($name_and_val);
$def_dim2[$val_elem] = get_columns($name_and_val);
$def_dim3[$val_elem] = $init_vals->{'slices'};  # number of axial images (slices)
$def_dim4[$val_elem] = 1;                   # time points; number of volumes
$def_pixdim1[$val_elem] = get_xdim($name_and_val);
$def_pixdim2[$val_elem] = get_ydim($name_and_val);
$def_pixdim3[$val_elem] = get_zdim($name_and_val);
$def_datatype[$val_elem] = get_datatype($name_and_val);
$def_bitpix[$val_elem] =get_bitpix($name_and_val);
$def_glmax[$val_elem] = $init_vals->{'glmax'};       # global pixel maximum
$def_glmin[$val_elem] = $init_vals->{'glmin'};       # global pixel minimum

# Get data_history values
$def_descrip[$val_elem] = $init_vals->{'db_name'};
$def_originator[$val_elem] = $init_vals->{'progname'};
$def_orient[$val_elem] = get_orient($name_and_val);
$def_scannum[$val_elem] = get_scannum($name_and_val);
$def_patient_id[$val_elem] = get_patient_id($name_and_val);
$def_exp_date[$val_elem] = get_exp_date_as_mdy($name_and_val);
$def_exp_time[$val_elem] = get_exp_time_as_hms($name_and_val);

if ($debug) {
    foreach $field (@@header_key_order) {
        print STDOUT "$field = $header_key{$field}->[5]\n";
    }
    foreach $field (@@image_dimension_order) {
        print STDOUT "$field = $image_dimension{$field}->[5]\n";
    }
    foreach $field (@@data_history_order) {
        print STDOUT "$field = $data_history{$field}->[5]\n";
    }
}
  
# -----
# Put header values into each of three Analyze header data substructures:
#     1. "header_key"
#     2. "image_dimension"
#     3. "data_history"
# -----

foreach $substruct (@@analyze_db_order) { 

    if ($debug) {
        print STDERR "-----------------\n";
        print STDERR "Analyze substructure: $substruct\n"; 
    }                                          
        
    # Rewrite variable ref. to substructure data as 
    # <elem_description>{<elem_name}
    # For example, rather than using (\@@sizeof_hdr)->[$val_elem]
    # to get value for sizeof_hdr in substructure 'header_key',
    # use value{'header_key'}
    foreach $def_array_ref (values(%{$analyze_db{$substruct}})) {
      
        $key = $def_array_ref->[$anal_elem];  # e.g., 'header_key'

        $anal_name{$key}  = $def_array_ref->[$anal_elem];
        $offset{$key}     = $def_array_ref->[$off_elem];
        $length{$key}     = $def_array_ref->[$len_elem];
        $data_type{$key}  = $def_array_ref->[$type_elem];
        $dicom_name{$key} = $def_array_ref->[$dcm_elem];
        $value{$key}      = $def_array_ref->[$val_elem];

        if ($debug) {
            print STDERR "-----\n";
            print STDERR "\$anal_name{$key} = $anal_name{$key}\n";
            print STDERR "\$offset{$key} = $offset{$key}\n";
            print STDERR "\$length{$key} = $length{$key}\n";
            print STDERR "\$data_type{$key} = $data_type{$key}\n";
            print STDERR "\$dicom_name{$key} = $dicom_name{$key}\n";
            print STDERR "\$value{$key} = $value{$key}\n";
            print STDERR "-----\n";
        }

    }

    # Put field values into Analyze header file
        
    if ($debug) {
        print "-----\n";
        print STDERR $assoc_array_index{$substruct};
    }

    foreach $field (@@{$assoc_array_index{$substruct}}) {

        if ($debug) {
            print STDERR "-----\n";
	    print STDERR "$field:\n";
            print STDERR "    len  = $length{$field}\n";
            print STDERR "    type = $data_type{$field}\n";
        }

        if ($data_type{$field} eq "char") {
            $len_in_chars = $length{$field} / $CHAR_SIZE;
            $foo = pack("a$len_in_chars", "$value{$field}");
            printf $outfile $foo;     # print to binary hdr file
        }
        elsif ($data_type{$field} eq "int") {
            $len_in_ints = $length{$field} / $INT_SIZE;
            $foo = pack("I$len_in_ints", "$value{$field}");
            printf $outfile $foo;     # print to binary hdr file
        }
        elsif ($data_type{$field} eq "sint") {
            $len_in_sints = $length{$field} / $SINT_SIZE;
            $foo = pack("S$len_in_sints", "$value{$field}");
            printf $outfile $foo;     # print to binary hdr file
        }
        elsif ($data_type{$field} eq "float") {
            $len_in_floats = $length{$field} / $FLOAT_SIZE;
            $foo = pack("f$len_in_floats", "$value{$field}");
            printf $outfile $foo;     # print to binary hdr file
        }
    }

    if ($debug) {
        print STDERR "-----\n";
    }   

    # Clear arrays
    %anal_name = ();
    %offset = ();
    %length = ();
    %data_type = ();
    %dicom_name = ();
    %value = ();

}
}

sub get_sizeof_hdr {
    my ($substruct_sizes) = @@_;
    my $sizeof_hdr;
    foreach $i (%$substruct_sizes) {
        $sizeof_hdr += $i;
    }
    return $sizeof_hdr; 
}

sub get_rows {
    my($r_name_and_val) = @@_;  
    my $val;
    my $rows;
    $val = $r_name_and_val->{'IMG Rows'};     # e.g., "200 512"
    $val =~ /\d+\s+(\d+)/;
    $rows = $1;
}

sub get_columns {
    my($r_name_and_val) = @@_;
    my($val, $cols);  
    $val = $r_name_and_val->{'IMG Columns'};  # e.g., "200 512"
    $val =~ /\d+\s+(\d+)/;
    $cols = $1;
}

sub get_xdim {
    my($r_name_and_val) = @@_;  
    my($val, $base, $exp, $xdim);
    $val = $r_name_and_val->{'IMG Pixel Spacing'};
    $val =~ /(\d+\.*\d+E[-+]\d+)\\/;      # e.g., "004.375000E-01\04.375000E-01"
    $val = $1;
    ($base, $exp) = ($val =~ /(\d+\.*\d+)E([-+]\d+)/);
    $xdim = $base * (10**$exp);
}

sub get_ydim {
    my($r_name_and_val) = @@_;  
    my($val, $base, $exp, $ydim);
    $val = $r_name_and_val->{'IMG Pixel Spacing'};
    $val =~ /\\(\d+\.*\d+E[-+]\d+)/;      # e.g., "004.375000E-01\04.375000E-01"
    $val = $1;
    ($base, $exp) = ($val =~ /(\d+\.*\d+)E([-+]\d+)/);
    $ydim = $base * (10**$exp);
}

sub get_zdim {
    my($r_name_and_val) = @@_;
    my($val, $base, $exp, $zdim);   
    $val = $r_name_and_val->{'ACQ Slice Thickness'};
    ($base, $exp) = ($val =~ /(\d+\.*\d+)E([-+]\d+)/);
    $zdim = $base * (10**$exp);
}

# -----
# Get bits per pixel
# -----

sub get_bitpix {   
    my($r_name_and_val) = @@_;
    my($val, $bitpix); 
    $val = $r_name_and_val->{'IMG Bits Allocated'};
    $val =~ /\d+\s+(\d+)/;       # e.g., "10 16"
    $bitpix = $1;   # bits per pixel
}

# -----
# Get Analyze datatype
# -----

# 0 = unknown
# 1 = 1 bit/pix
# 2 = 8 bits/pix
# 4 = 16 bits/pix
# 8 = 32 bits/pix (signed int)
# 16 = 32 bits/pix (floating pt)
# 32 = 64 bits/pix (2 floats)
# 64 = 64 bits/pix (double)

sub get_datatype {
    my($r_name_and_val) = @@_;
    my($bitpix, $datatype);
    $bitpix = get_bitpix($r_name_and_val);
    if ($bitpix == 16) {
        $datatype = 4;
    }
    elsif ($bitpix == 8) {
        $datatype = 2;
    }
    elsif ($bitpix == 32) {
        $datatype = 8;
    }
    elsif ($bitpix == 1) {
        $datatype = 1;
    }
    elsif ($bitpix == 32) {
        $datatype = 16;
    }
}

sub get_descrip {
    my($r_name_and_val) = @@_;
    my($val, $descrip);  
    $val = $r_name_and_val->{'REL Image Comments'};
    $val =~ /(\w*)(\s*)(\w*)$/;    # e.g., "248                       PET"
    $descrip = $1 . "; " . $2;
}

# -----
# Get image orientation
# This is done indirectly. Image is already known to be axial.
# If patient position is "HFS" (head-first, supine?), assume transverse
# orientation of slices.
# -----

sub get_orient {      
    my($r_name_and_val) = @@_;
    my($pt_pos, $orient); 
    $pt_pos = $r_name_and_val->{'ACQ Patient Position'};
    #print STDOUT "pt_pos = $pt_pos$pt_pos\n";
    if ($pt_pos eq "HFS") {           # "HFS" = head-first/supine?
        sprintf($orient, "%c", $TRANSVERSE);       # $TRANSVERSE is defined to be '\000'
    }
    else {
        die "Unsupported image/patient orientation; pt. orientation = $pt_pos\n";
    }
}

sub get_scannum {        
    my($r_name_and_val) = @@_;
    my $scannum;
    $scannum = $r_name_and_val->{'REL Image Number'};         # e.g., 000010
}

sub get_patient_id {   
    my($r_name_and_val) = @@_; 
    my $pt_id;
    $pt_id = $r_name_and_val->{'PAT Patient ID'};           # e.g., 2191499
}

sub get_exp_date_as_mdy { 
    my($r_name_and_val) = @@_;
    my($val, $yr, $mo, $day, $date);
    $val = $r_name_and_val->{'ID Study Date'};          # e.g., 19971231
    ($yr, $mo, $day) = ($val =~ /\d\d(\d\d)(\d\d)(\d\d)/);
    $date = $mo . "/" . $day . "/" . $yr;
}

sub get_exp_time_as_hms {
    my($r_name_and_val) = @@_;
    my($val, $hr, $min, $sec, $time);
    $val = $r_name_and_val->{'ID Study Time'};       # e.g., 152345.000000
    ($hr, $min, $sec) = ($val =~ /(\d\d)(\d\d)(\d\d)\./);
    $time = $hr . ":" . $min . ":" . "$sec";
}

1;

@
