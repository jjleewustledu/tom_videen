head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	98.12.30.19.22.50;	author tom;	state Exp;
branches;
next	;


desc
@Jane's version
@


1.1
log
@Initial revision
@
text
@# $Log$
# =====
# Filename: Dicom_util.pm
# Date: 5-28-98
# Purpose: Dicom file utilities
# Subroutines:
#    get_dcm_filetypes
#    get_dbm_filenames
#    get_name_and_key
#    get_val
#    get_key_and_val
#    get_name_and_val
#    find_axial
# =====

package Dicom_util;

# =====
# Variables local to this package
# =====

my @@dcm_filetypes = ('original');
my %dbmfiles = (
                'original', '/usr/local/npg/src/dcm_ct2analyze/dcm_orig',
                );

# =====
# Subroutines
# =====

sub get_dcm_filetypes {
    return @@dcm_filetypes;
}

sub get_dbm_filenames {
    return %dbmfiles;
}

sub get_dcm_filenames {

    my ($first, $last) = @@_;
    my $file_prefix;
    my $filename;
    my $fileno;
    my @@dcm_filenames;

    foreach $fileno ($first..$last) {
        $file_prefix = ($fileno < 10) ? "0000" : "000";
        $filename = $file_prefix . $fileno . ".dcm";
        push(@@dcm_filenames, $filename);
    }

    return @@dcm_filenames;
}

sub get_key_from_name {

    my ($name, $r_name_and_key) = @@_;

    $key = $r_name_and_key->{$name};
    return $key;

}

sub get_name_and_key {

    my ($file, $r_name_and_key) = @@_;
    my $group;         # DICOM group number, e.g., "0020"
    my $elem;          # DICOM element number, e.g., "0012"
    my $key;           # DICOM group plus element number separated by ";"
    my $dcm_name;      # DICOM field name
    
    @@dcmdump = `dcm_dump_file $file`;

    foreach $line (@@dcmdump) {
        if ($line =~ /(\d\d\d\d) (\d\d\d\d)\s+\d+\s*\/\/\s+(.+)\/\/(.*)/) {
              # e.g., "0008 0020        8 //                  ID Study Date//"
            if ($3 ne "Unimplemented") {
                $group = $1;
                $elem = $2;
                $key = $group . ";" . $elem;
                $dcm_name = $3;
                $dcm_name =~ s/^\s*(.*)\s*$/$1/;   # remove whitespace at beg. and end
                $r_name_and_key->{$dcm_name} = $key;
            }
        }
    }
     
    return 1;  

}

sub get_val_from_key {

    my ($lines, $key) = @@_;

    foreach $line (@@$lines) {
        if ($line =~ /$key.+\/\/.+\/\/(.+)$/) {
            $val = $1;
         }
    }

    return $val;

} 

sub get_val_from_name {

    my ($lines, $name) = @@_;

    foreach $line (@@$lines) {
        if ($line =~ /\d\d\d\d \d\d\d\d\s+\d+\s*\/\/\s+(.+)\/\//) {
            # e.g., "0008 0020           8 //        ID Study Date//"{
            $val = $1;
        }
    }

    return $val;

} 

sub get_key_and_val {

    my ($file, $key_and_val) = @@_;
    my $group;
    my $elem;
    my $key;

    @@dcmdump = `dcm_dump_file $file`;

    foreach $line (@@dcmdump) {
        if ($line =~ /(\d\d\d\d) (\d\d\d\d).*\/\/.*\/\/(.*)$/) {
              # e.g., "0008 0020        8 //                  ID Study Date//19971231"
            if ($3 ne "Unimplemented") {
                $group = $1;
                $elem = $2;
                $key = $group . ";" . $elem;
                $key_and_val->{$key} = $3;
            }
        }
    }
     
    return 1;
}

sub get_name_and_val {

    my ($file, $name_and_val) = @@_;
    my $dcm_name;
    my $val;

    @@dcmdump = `dcm_dump_file $file`;

    foreach $line (@@dcmdump) {
        if ($line =~ /(\d\d\d\d) (\d\d\d\d)\s+\d+\s*\/\/\s+(.+)\/\/(.+)$/) {
            # e.g., "0008 0020        8 //                  ID Study Date//19971231"
            if ($4 ne "Unimplemented") {
                $dcm_name = $3;
                $val = $4;
                $dcm_name =~ s/^\s*(\w.*\w)\s*$/$1/;   # remove whitespace at beg. and end
                $val =~ s/^\s*(\w.*\w)\s*$/$1/;    # remove whitespace at beg. and end
                $name_and_val->{$dcm_name} = $val;
            }
        }
    }
    return 1;
}

# -----
# Subroutine: find_axial(int FIRSTFILENO, int LASTFILENO)
# Example: find_axial(1,45)
# Returns: 0 if axial not found; name of first axial if found
# -----
sub find_axial {

    my ($first, $last) = @@_;

    # Get list of Dicom filenames (000xx.dcm - 000yy.dcm)
    @@dcm_files = get_dcm_filenames($first, $last);
 
    # Value of 
    $imagetype =  "ORIGINAL\\PRIMARY\\LOCALIZER";

    for ($i = 0; ($imagetype =~ /(ORIGINAL\\PRIMARY\\LOCALIZER)/) && ($i <= $#dcm_files); $i++) {
        @@dcmdump = `dcm_dump_file $dcm_files[$i]`;
        $imagetype = Dicom_util::get_val_from_key(\@@dcmdump, "0008 0008");
    }

    if ($imagetype ne "ORIGINAL\\PRIMARY\\AXIAL") {
        return 0;
    }
    else {
        return "$dcm_files[$i-1]";
    }

}

sub get_gantry_tilt_as_float {
    my ($r_name_and_val) = @@_;
    $gt_char = $r_name_and_val->{'ACQ Gantry/Detector Tilt'}; # e.g., -02.700000E+01   
    ($base, $exp) = ($gt_char =~ /([-+]\d+\.*\d+)E([-+]\d+)/);
    $gt_float = $base * (10**$exp);
    return $gt_float;
}

return 1;
@
