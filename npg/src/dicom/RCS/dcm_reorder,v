head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2003.10.01.16.40.50;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.13.15.45.40;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.18.21.32.34;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.12.30.19.37.57;	author tom;	state Exp;
branches;
next	;


desc
@Jane's version
@


1.4
log
@*** empty log message ***
@
text
@#!/usr/local/bin/perl
# Author:	Jane Dunford-Shore
# Date:		5 Mar 97
# Revised:	Mar 2002
# Purpose:	Given a dir. with sequential *.dcm's, rename them
#	<first>.dcm - <last - first + 1>.dcm, maintaining original sequence.
# Example:
#	Files in dir. are 00001.dcm - 00045.dcm, with 00006.dcm
#	and 00024.dcm missing.
#
#	dcm_reorder 2 44
#
#	New filenames will be:
#		00001.dcm unchanged
#		00002.dcm - 00044.dcm => 00002.dcm - 00042.dcm
#		00045.dcm unchanged
# -----------------------------------------------
if ($#ARGV != 1) {
	print STDERR "Usage: dcm_reorder <first> <last>\n";
	print STDERR " e.g.: dcm_reorder 129 256\n";
	exit(0);
}

$first = $ARGV[0];
$last = $ARGV[1];
if ($first > $last) {
	print STDERR "Usage: dcm_reorder <first> <last>\n";
	print STDERR " e.g.: dcm_reorder 129 256\n";
	exit(0);
}

# Get existing filenames in dcm_names
# -----------------------------------------------
foreach $num ($first..$last) {
	if ($num < 10) {
		$prefix = "0000";
	} elsif ($num < 100) {
		$prefix = "000";
	} elsif ($num < 1000) {
		$prefix = "00";
	} else {
		$prefix = "0";
	}
	$filename = $prefix . $num . ".dcm";
	if (-e $filename) {
		push(@@dcm_names, $filename)
	}
} 

# Rename files in sequence, eliminating gaps
# -----------------------------------------------
$newnum = $first;
foreach $oldname (@@dcm_names) {
	if ($newnum < 10) {
		$prefix = "0000";
	} elsif ($newnum < 100) {
		$prefix = "000";
	} elsif ($newnum < 1000) {
		$prefix = "00";
	} else {
		$prefix = "0";
	}
	$newname = $prefix . $newnum . ".dcm"; 
	if ($oldname ne $newname) {
		print STDOUT "mv $oldname $newname\n";
		`mv $oldname $newname`;
	}
	$newnum++;
}
@


1.3
log
@*** empty log message ***
@
text
@a31 5
open(LOGFILE, ">rename.log");
print LOGFILE `date`;
print LOGFILE `pwd`;
print LOGFILE "\n";

a65 1
		print LOGFILE "mv $oldname $newname\n";
@


1.2
log
@*** empty log message ***
@
text
@d2 5
a6 7

# Date: 5mar97
# Revised: 13jul98
# Author: Jane Dunford-Shore
# Purpose: Given a dir. with sequential *.dcm's, rename them
#    <first>.dcm - <last - first + 1>.dcm, maintaining original sequence.
# Usage: dcm_reorder <firstfile> <lastfile
d8 2
a9 2
#        Files in dir. are 00001.dcm - 00045.dcm, with 00006.dcm
#        and 00024.dcm missing.
d11 1
a11 1
#        dcm_reorder 2 44
d13 5
a17 6
#        New filenames will be:
#            00001.dcm unchanged
#            00002.dcm - 00044.dcm => 00002.dcm - 00042.dcm
#            00045.dcm unchanged

# Get command-line parameters
d19 3
a21 2
    printusage();
    exit(0);
d24 7
a30 2
$first = shift(@@ARGV);
$last = shift(@@ARGV);
a31 1
# Open log file
d37 11
a47 14
# Get current names of *.dcm's
foreach $fileno ($first..$last) {
    if ($fileno < 10) {
        $prefix = "0000";
    } elsif ($fileno < 100) {
        $prefix = "000";
    } elsif ($fileno < 1000) {
        $prefix = "00";
    } else {
        $prefix = "0";
    }
    $filename = $prefix . $fileno . ".dcm";
    if (-e $filename) {
        push(@@dcm_names, $filename)
d49 4
d55 3
a57 2
# Rename files
$newfileno = $first;
d59 16
a74 16
    if ($newfileno < 10) {
        $prefix = "0000";
    } elsif ($newfileno < 100) {
        $prefix = "000";
    } elsif ($newfileno < 1000) {
        $prefix = "00";
    } else {
        $prefix = "0";
    }
    $newname = $prefix . $newfileno . ".dcm"; 
    if ($oldname ne $newname) {   
        print STDOUT "mv $oldname $newname\n";
        print LOGFILE "mv $oldname $newname\n";
        `mv $oldname $newname`;
    }
    $newfileno++;
a75 27
   
# =====
# Subroutines
# =====

# -----
# Subroutine: printusage
# Purpose: Print program usage info., as contained in format "USAGE".
# Parameters: none
# Returns: 0 if successful
# Requires: 1) definition of format "USAGE"
# -----
sub printusage {
    $~ = "USAGE";
    write STDOUT;
    return 0;
}

# =====
# Formats
# =====

format USAGE =
   Usage: dcm_reorder <firstfile> <lastfile>
 Example: dcm_reorder 2 47 
.
    
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $Log$
d39 1
a39 2
    }
    elsif ($fileno < 100) {
d41 1
a41 2
    }
    else {   # $fileno > 99
d43 2
d57 1
a57 2
    }
    elsif ($newfileno < 100) {
d59 1
a59 2
    }
    else {   # $newfileno > 99
d61 2
@
