head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.02.17.16.16.56;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*  $Log$ */
/* ===============================================================================
 *  Module:		read_air.c
 *  Date:		Oct 1995
 *  Author:		Tom Videen
 *  Description:
 *      Read an AIR file into the structure, air, and
 *      convert the transformation matrix into a matrix, mat, which
 *		might be used in standard matrix multiplications.
 * ===============================================================================
*/
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/makemap/RCS/read_air.c,v 2.9 2004/02/16 20:14:42 tom Exp $";
#endif

#include <stdio.h>
#include <strings.h>
#include <air.h>

#define MSIZE 4					 /* matrix dimension */

int             read_air (filename, air, mat)
	char           *filename;
	struct air2    *air;
	float         **mat;

{
	struct air1     oldair;
	FILE           *fp;
	int             i, j;

/*	Open file file */

	fp = fopen (filename, "rb");
	if (fp == NULL) {
		(void) fprintf (stderr, "ERROR: cannot open %s\n", filename);
		return 1;
	}
	if (fread ((char *) air, 1, sizeof (struct air2), fp) != sizeof (struct air2)) {
		/* Try reading it as an old 12 parameter air file */
		rewind (fp);
		if (fread ((char *) &oldair, 1, sizeof (struct air1), fp) != sizeof (struct air1)) {
			(void) fprintf (stderr, "ERROR: reading %s\n", filename);
			(void) fclose (fp);
			return 1;
		}
		(void) strncpy (air->stdfile, oldair.stdfile, 127);
		(void) strncpy (air->resfile, oldair.resfile, 127);
		(void) strncpy (air->comment, oldair.comment, 127);
		(void) strncpy (air->reserved, oldair.reserved, 115);
		air->std.bits = oldair.std.bits;
		air->std.xdim = oldair.std.xdim;
		air->std.ydim = oldair.std.ydim;
		air->std.zdim = oldair.std.zdim;
		air->std.xsize = oldair.std.xsize;
		air->std.ysize = oldair.std.ysize;
		air->std.zsize = oldair.std.zsize;
		air->res.bits = oldair.res.bits;
		air->res.xdim = oldair.res.xdim;
		air->res.ydim = oldair.res.ydim;
		air->res.zdim = oldair.res.zdim;
		air->res.xsize = oldair.res.xsize;
		air->res.ysize = oldair.res.ysize;
		air->res.zsize = oldair.res.zsize;
		air->stdhash = oldair.stdhash;
		air->reshash = oldair.reshash;
		air->e[0][0] = oldair.e[1][0];
		air->e[0][1] = oldair.e[1][1];
		air->e[0][2] = oldair.e[1][2];
		air->e[0][3] = 0;
		air->e[1][0] = oldair.e[2][0];
		air->e[1][1] = oldair.e[2][1];
		air->e[1][2] = oldair.e[2][2];
		air->e[1][3] = 0;
		air->e[2][0] = oldair.e[3][0];
		air->e[2][1] = oldair.e[3][1];
		air->e[2][2] = oldair.e[3][2];
		air->e[2][3] = 0;
		air->e[3][0] = oldair.e[0][0];
		air->e[3][1] = oldair.e[0][1];
		air->e[3][2] = oldair.e[0][2];
		air->e[3][3] = 1;
	}
	(void) fclose (fp);

	for (i = 1; i <= MSIZE; i++)
		for (j = 1; j <= MSIZE; j++)
			mat[j][i] = (float) air->e[i - 1][j - 1];
	return 0;
}
@
