head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.16.21.04.14;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.15.52.26;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.06.19.37.19;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.11.14.21.18.55;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/* $Log: maskpctslice.c,v $
 * Revision 1.3  2002/11/27  15:52:26  tom
 * *** empty log message ***
 *
 * Revision 1.2  2000/09/06  19:37:19  tom
 * strcpy filename
 *
 * Revision 1.1  1996/11/14  21:18:55  tom
 * Initial revision
 * */
/*	=========================================================================
 *	Module:			maskpctslice.c
 *	Author:			Tom Videen
 *	Description:	Create a masked image based on percent of max counts.
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: maskpctslice.c,v 1.3 2002/11/27 15:52:26 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>
#include <libnrimg.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	char           *infilename;		 /* input filename */
	char           *outfilename;		 /* output filename */
	int             mskpct;			 /* percent to mask by */
	int             i;
	long            npixels = 0;
	long            dim[3];			 /* dimensions of tensors */
	float        ***image = NULL;		 /* primary image tensor */

/*
 *	Get command line arguments.
 */
	infilename = argv[1];
	outfilename = argv[2];
	mskpct = atoi (argv[3]);
	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*
 *	Read image and generate mask
 */

	file = make_imgfile (infilename);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [maskpctslice]: Cannot open %s\n", infilename);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [maskpctslice]: Cannot get MainHeader from %s\n", infilename);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [maskpctslice]: Cannot read file subheader in %s\n", infilename);
		return (ERROR);
	}
	dim[0] = (long) file->sh->dim1;
	dim[1] = (long) file->sh->dim2;
	dim[2] = (long) file->sh->dim3;
	if (dim[0] != dim[1]) {
		fprintf (stderr, "ERROR [maskpctslice]: X and Y dimensions are not equal\n");
		return (ERROR);
	}
	if ((image = readtensor (file, &indx)) == NULL) {
		fprintf (stderr, "ERROR [maskpctslice]: Cannot read %s\n", infilename);
		return (ERROR);
	}
	for (i = 1; i <= dim[2]; i++)
		maskmatrix (image[i], dim[0], mskpct, &npixels);

/*	Write the masked image */

	printf ("Writing masked image %s\n", outfilename);
	printf ("Pixels in mask = %ld\n", npixels);
	close_imgfile (file);
	(void) strcpy (file->name, outfilename);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [maskpctslice]: Cannot open %s\n", outfilename);
		return (ERROR);
	}
	if (put_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [maskpctslice]: Cannot write %s\n", outfilename);
		return (ERROR);
	}
	if (writetensor (file, &indx, image) == ERROR) {
		fprintf (stderr, "ERROR [maskpctslice]: Cannot write %s\n", outfilename);
		return (ERROR);
	}
	free_imgfile (file);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d17 1
d19 1
a19 1
static char     rcsid[] = "$Id: maskpctslice.c,v 1.2 2000/09/06 19:37:19 tom Exp tom $";
d31 1
d93 2
a94 2
	strcpy (file->name, outfilename);
	strcpy (file->mode, "w");
@


1.2
log
@strcpy filename
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Id: maskpctslice.c,v 1.1 1996/11/14 21:18:55 tom Exp tom $";
a22 1
#include <nr.h>
a24 1
#include <imgutil.h>
d86 1
a86 1
	printf ("Pixels in mask = %d\n", npixels);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d12 1
a12 1
static char     rcsid[] = "$Id: maskpctslice.c,v 1.1 1996/11/14 21:17:22 tom Exp $";
d87 1
a87 2
	free (file->name);
	file->name = outfilename;
@
