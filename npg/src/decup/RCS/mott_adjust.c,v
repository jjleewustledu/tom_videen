head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.02.13.21.59.43;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.27.14.52.08;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.26.20.46.59;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.02.25.15.19.51;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.24.14.42.34;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Feb 2004
@
text
@/* $Log: mott_adjust.c,v $
 * Revision 1.4  2002/11/27  14:52:08  tom
 * *** empty log message ***
 *
 * Revision 1.3  2002/11/26  20:46:59  tom
 * *** empty log message ***
 *
 * Revision 1.2  1999/02/25  15:19:51  tom
 * remove warning
 *
 * Revision 1.1  1999/02/24  14:42:34  tom
 * Initial revision
 * */
/*  ================================================================================
 *  File Name:      mott_adjust.c
 *  Date:           Feb 1999
 *  Author:         Tom Videen
 *  Description:    Create proportional polar image
 *					(a la Mott et al, 1985, Br J Radiol 58:876)
 *  =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/decup/RCS/mott_adjust.c,v 1.4 2002/11/27 14:52:08 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <matrixlib.h>
#include <myvalues.h>

int             mott_adjust (img, dim1, dim2, dim3, min, max)
	short        ***img;			 /* original image */
	long            dim1, dim2, dim3;	 /* dimensions of img */
	short           min, max;		 /* range to identify */

{
	short         **set;			 /* pixels included */
	short          *rad;			 /* radial average */
	float          *rim;			 /* boundary distance */
	short           ang, r;			 /* 0 deg is left; increases CW */
	short           more;
	short           rad0;
	long            npix;
	long            num, sum;
	long            xcm, ycm;		 /* geometric center of slice */
	long            xloc, yloc;
	short           i, j, pln;
	float           x, y, d;
	long            nang = 360;		 /* angles to sample */
	long            rdim = 100;		 /* dimensions of rad */
	float           rad_per_deg = 3.14159 / 180;
	short           slcmean = 35;		 /* add this to values which are subtracted */

	if ((set = smatrix (1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [mott_adjust]: Cannot malloc set\n");
		return (ERROR);
	}
	if (NULL == (rad = (short *) calloc (rdim + 1, sizeof (short)))) {
		fprintf (stderr, "ERROR [mott_adjust]: Cannot calloc rad\n");
		return (ERROR);
	}
	if (NULL == (rim = (float *) calloc (nang + 1, sizeof (float)))) {
		fprintf (stderr, "ERROR [mott_adjust]: Cannot calloc rim\n");
		return (ERROR);
	}
	for (pln = 1; pln <= dim3; pln++) {
		for (r = 1; r <= rdim; r++)
			rad[r] = 0;

/* Identify pixels to normalize */

		npix = 0;
		sum = 0;
		xloc = 0;
		yloc = 0;
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				if (img[pln][j][i] >= min && img[pln][j][i] <= max) {
					set[j][i] = 1;
					npix++;
					sum += img[pln][j][i];
					xloc += i;
					yloc += j;
				} else
					set[j][i] = 0;
			}
		}

		if (npix > 0) {

/*	Mean and Geometric center of these pixels */

			x = (float) xloc / (float) npix;
			y = (float) yloc / (float) npix;
			xcm = (long) (x + 0.5);
			ycm = (long) (y + 0.5);
			printf ("Pln=%3i  Center= [%3li,%3li]\n", pln, xcm, ycm);

/*	Find boundary (rim) at each angle */

			for (ang = 1; ang <= nang; ang++) {
				rim[ang] = 0;
				i = 0;
				more = 1;
				while (more) {
					i++;
					x = (float) -i * cos (rad_per_deg * ang);
					y = (float) -i * sin (rad_per_deg * ang);
					xloc = (short) (x + xcm);
					yloc = (short) (y + ycm);
					if (xloc < 1 || xloc > dim1 || yloc < 1 || yloc > dim2)
						more = 0;
					else if (set[yloc][xloc])
						rim[ang] = sqrt (pow (x, 2.) + pow (y, 2.));
				}
			}

/*	Compute S/Rs (Mott et al, 1985, Br J Radiol 58:876) */

			for (r = 1; r <= rdim; r++) {
				rad0 = 0;
				num = 0;
				sum = 0;
				for (ang = 1; ang <= nang; ang++) {
					d = rim[ang] * (float) r / rdim;
					x = xcm - d * cos (rad_per_deg * ang);
					y = ycm - d * sin (rad_per_deg * ang);
					xloc = (short) (x + 0.5);
					yloc = (short) (y + 0.5);
					if (xloc > dim1)
						xloc = dim1;
					if (yloc > dim2)
						yloc = dim2;
					if (set[yloc][xloc]) {
						num++;
						sum += img[pln][yloc][xloc];
					}
				}
				if (num > 0) {
					rad[r] = (short) ((float) sum / (float) num) - slcmean;
					if (rad[r] < 0)
						rad[r] = 0;
					rad0 = rad[r];
				} else
					rad[r] = rad0;
			}

/*	Subtract the difference between mean radial value and mean slice value (slcmean)
	for each r only when this difference is > 0 */

			for (j = 1; j <= dim2; j++) {
				for (i = 1; i <= dim1; i++) {
					x = i - xcm;
					y = j - ycm;
					ang = (short) ((atan2 (y, x)) / rad_per_deg);
					ang += 180;
					d = sqrt (pow (x, 2.) + pow (y, 2.));
					r = (short) (rdim * d / rim[ang]);
					if (img[pln][j][i] > -500) {
						if (r <= rdim)
							img[pln][j][i] -= rad[r];
						else
							img[pln][j][i] -= rad[rdim];
					}
				}
			}

		}				 /* npix > 0 */
	}					 /* pln <= dim3 */

	free_smatrix (set, 1, dim2, 1, dim1);
	free (rim);
	free (rad);
	return (OK);
}
@


1.4
log
@*** empty log message ***
@
text
@d2 3
d16 1
a16 1
 *  Date:           Feb-99
d22 1
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/decup/RCS/mott_adjust.c,v 1.3 2002/11/26 20:46:59 tom Exp tom $";
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/decup/RCS/mott_adjust.c,v 1.2 1999/02/25 15:19:51 tom Exp tom $";
d95 1
a95 1
			printf ("Pln=%3i  Center= [%3i,%3i]\n", pln, xcm, ycm);
@


1.2
log
@remove warning
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/decup/RCS/mott_adjust.c,v 1.1 1999/02/24 14:42:34 tom Exp tom $";
d21 1
d109 1
a109 1
						rim[ang] = sqrt (pow (x, 2) + pow (y, 2));
d152 1
a152 1
					d = sqrt (pow (x, 2) + pow (y, 2));
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/decup/RCS/mott_adjust.c,v 1.3 1999/02/22 22:23:49 tom Exp tom $";
a106 2
				if (rim[ang] <= 0)
					printf ("Warning [mott_adjust]: %3i %5i\n", ang, rim[ang]);
@
