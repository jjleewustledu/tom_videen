head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.02.13.21.59.43;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.14.52.08;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.26.20.46.59;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.24.14.42.34;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Feb 2004
@
text
@/*	$Log: decup.c,v $
 * Revision 1.3  2002/11/27  14:52:08  tom
 * *** empty log message ***
 *
 * Revision 1.2  2002/11/26  20:46:59  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/02/24  14:42:34  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			decup.c
 *	Date:			Feb 1999
 *	Author:			Tom Videen
 *	Description:	Remove radial average from each plane (a la Mott)
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/decup/RCS/decup.c,v 1.3 2002/11/27 14:52:08 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <image.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			decup
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	int             mott_adjust ();
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output files */
	long            dim1, dim2, dim3; /* dimensions of image */
	short           min, max;		 /* include all <= or >= these pixel values */
	long            i, j, k;
	short        ***img;			 /* image */
	short          *row;			 /* single row of input image */

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 7) {
		printf ("Usage: decup img1 hdr1 img2 hdr2 min max\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	min = (short) atoi (argv[5]);
	max = (short) atoi (argv[6]);

/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [decup]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [decup]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [decup]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [decup]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [decup]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

/*
 *	Read img
 */

	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [decup]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((img = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [decup]: Cannot calloc img\n");
		return (ERROR);
	}
	if (NULL == (row = (short *) calloc (dim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [decup]: Cannot calloc memory for row\n");
		return (ERROR);
	}
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			(void) fread (row, dim1 * 2, 1, fd_img);
			for (k = 1; k <= dim1; k++)
				img[i][j][dim1 - (k - 1)] = row[k - 1];
		}
	}
	(void) fclose (fd_img);
	free (row);

	if ((mott_adjust (img, dim1, dim2, dim3, min, max)) == ERROR) {
		fprintf (stderr, "ERROR [decup]: in mott_adjust\n");
		return (ERROR);
	}
/*
 * Write to output file
 */

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [decup]: Unable to create ANALYZE header %s\n", hdr2);
		return (ERROR);
	}
	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [decup]: Unable to create ANALYZE image %s\n", img2);
		return (ERROR);
	}
	if (NULL == (row = (short *) calloc (dim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [decup]: Cannot calloc memory for row\n");
		return (ERROR);
	}
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			for (k = 1; k <= dim1; k++)
				row[k - 1] = img[i][j][dim1 - (k - 1)];
			(void) fwrite (row, dim1 * 2, 1, fd_img);
		}
	}
	free (row);

	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [decup]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	(void) fclose (fd_img);
/*
 *	Free & Exit
 */

	printf ("Converted: %s to %s\n", img1, img2);
	free_s3tensor (img, 1, dim3, 1, dim2, 1, dim1);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d13 1
a13 1
 *	Date:			Feb-99
d18 1
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/decup/RCS/decup.c,v 1.2 2002/11/26 20:46:59 tom Exp tom $";
d97 1
a97 1
	fclose (fd_hdr);
d122 1
a122 1
	fclose (fd_img);
d158 2
a159 2
	fclose (fd_hdr);
	fclose (fd_img);
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/decup/RCS/decup.c,v 1.1 1999/02/24 14:42:34 tom Exp tom $";
d60 2
a61 2
	min = atoi (argv[5]);
	max = atoi (argv[6]);
d113 1
a113 1
			fread (row, dim1 * 2, 1, fd_img);
d145 1
a145 1
			fwrite (row, dim1 * 2, 1, fd_img);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/decup/RCS/decup.c,v 1.2 1999/02/22 22:23:49 tom Exp tom $";
d17 1
a17 1
#include <string.h>
a19 1
#include <libimage.h>
a21 1
#include <matrixlib.h>
@
