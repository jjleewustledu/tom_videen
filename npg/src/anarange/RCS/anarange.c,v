head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.18.07.30;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.05.16.04.43;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: anarange.c,v $
 * Revision 1.1  2000/05/05  16:04:43  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anarange.c
 *	Date:			May 2000
 *	Author:			Tom Videen
 *	Description:	Set all pixels > max to max value in Analyze image
 *					optionally, set all pixels < min to min
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anarange/RCS/anarange.c,v 1.1 2000/05/05 16:04:43 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anarange
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	short          *img;			 /* image */
	int             setmin;
	int             top;			 /* limits of range */
	int             bot = 0;		 /* limits of range */

	if (argc < 4 || argc > 5) {
		printf ("Usage: anarange img hdr top [bot]\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	top = atoi (argv[3]);
	if (argc == 5) {
		setmin = 1;
		bot = atoi (argv[4]);
	} else
		setmin = 0;

/*	Get image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anarange]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anarange]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anarange]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anarange]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anarange]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1 * dim2 * dim3;

	img = (short *) calloc (num, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [anarange]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anarange]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anarange]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img1);

/*	Mask and save */

	for (i = 0; i < num; i++)
		if (img[i] > top)
			img[i] = top;
	if (setmin > 0)
		for (i = 0; i < num; i++)
			if (img[i] < bot)
				img[i] = bot;

	if ((fd_img = fopen (img1, "w")) == 0) {
		fprintf (stderr, "ERROR [anarange]: Opening %s\n", img1);
		return (ERROR);
	}
	if ((fwrite (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anarange]: Writing to: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr1, "w")) == 0) {
		fprintf (stderr, "ERROR [anarange]: Unable to open %s\n", hdr1);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anarange]: Writing to: %s\n", hdr1);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	free (img);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anarange/RCS/anarange.c,v 1.8 1999/12/16 17:55:43 tom Exp $";
d84 1
a84 1
	fclose (fd_hdr);
d100 1
a100 1
	fclose (fd_img);
d121 1
a121 1
	fclose (fd_img);
d131 1
a131 1
	fclose (fd_hdr);
@
