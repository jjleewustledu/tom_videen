head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.18.09.15;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.16.12.57.53;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: anashift.c,v $
 * Revision 1.1  2002/08/16  12:57:53  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anashift.c
 *	Date:			Aug 2002
 *	Author:			Tom Videen
 *	Description:	Shift Analyze image 1 pix to left
 *	===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/anashift/RCS/anashift.c,v 1.1 2002/08/16 12:57:53 tom Exp tom $";

#include <stdlib.h>
#include <stdio.h>
#include <image.h>
#include <nrutil.h>
#include <ANALYZE.h>				 /* dsr */

main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* header for Analyze */
	FILE           *fd_hdr;			 /* file for Analyze hdr */
	FILE           *fd_img;			 /* file for input image */
	FILE           *fd_out;			 /* file for output image */
	char           *in_hdr;			 /* input hdrname */
	char           *in_img;			 /* input filename */
	char           *out_hdr;		 /* output hdrname */
	char           *out_img;		 /* output filename */
	long            dim[3];
	long            i, j, k;
	short          *row, *orow;		 /* single row of input image */

	if (argc != 5) {
		fprintf (stderr, "Usage: anashift in_img in_hdr out_img out_hdr\n");
		return (ERROR);
	}
	in_img = argv[1];
	in_hdr = argv[2];
	out_img = argv[3];
	out_hdr = argv[4];

	if ((fd_hdr = fopen (in_hdr, "r")) == 0) {
		fprintf (stderr, "ERROR [anashift]: Cannot open: %s\n", in_hdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anashift]: Reading: %s\n", in_hdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anashift]: Reading: %s\n", in_hdr);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4 && hdr.dime.datatype != 16) {
		fprintf (stderr, "ERROR [anashift]: Reading: %s\n", in_hdr);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim[0] = hdr.dime.dim[1];
	dim[1] = hdr.dime.dim[2];
	dim[2] = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

	if ((fd_hdr = fopen (out_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [anashift]: Cannot open: %s\n", out_hdr);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anashift]: Writing: %s\n", out_hdr);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	if ((fd_img = fopen (in_img, "r")) == 0)
		return (ERROR);
	if ((fd_out = fopen (out_img, "w")) == 0)
		return (ERROR);

	if ((row = (short *) calloc (dim[0], sizeof (short))) == NULL)
		return (ERROR);
	if ((orow = (short *) calloc (dim[0], sizeof (short))) == NULL)
		return (ERROR);

	for (i = 0; i < dim[2]; i++) {
		for (j = 0; j < dim[1]; j++) {
			(void) fread (row, sizeof (short), dim[0], fd_img);
			orow[0] = 0;
			for (k = 1; k < dim[0]; k++)
				orow[k] = row[k - 1];
			(void) fwrite (orow, sizeof (short), dim[0], fd_out);
		}
	}
	free (row);
	free (orow);
	(void) fclose (fd_img);
	(void) fclose (fd_out);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 2
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anashift/RCS/anashift.c,v 1.1 2002/08/15 21:05:26 tom Exp $";
@
