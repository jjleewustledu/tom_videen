head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2008.05.02.21.05.55;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id$ */
/* $Log$ */
/*  ===============================================================================
 *  Module:         reorient_ifh.c
 *  Date:           May 2008
 *  Author:         Tom Videen
 *	Description:	Reorient 3D coronal Interfile to standard transverse Interfile orientation
 *  ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/reorient_ifh/RCS/reorient_ifh.c,v 2.1 2004/04/12 19:04:22 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <ANALYZE.h>

#define MAXSTR 256
#define TRANSVERSE '\000'

/*	----------------------------
 *	Function:	reorient_ifh
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* header for Analyze */
	FILE           *ifh;			 /* ifh file */
	FILE           *ifi;			 /* img file */
	FILE           *ohdr;			 /* Analyze hdr file */
	char           *ifhname;		 /* Input Interfile header filename */
	char           *imgname;		 /* Input image filename */
	char           *ofhname;		 /* Output Interfile header filename  */
	char           *omgname;		 /* Output image filename  */
	char           *hdrname;		 /* Output Analyze header filename  */
	char            str[MAXSTR];
	char           *orient1;
	char           *orient2;
	char           *orient3;
	char           *version;
	char           *progdate;
	char           *ptr;
	short        ***img;
	short          *srow;			 /* single row of input image */
	float        ***fimg;
	float          *frow;			 /* single row of input image */
	float           size[3];		 /* pixel size of input image */
	float           pix[3];			 /* pixel size of output image */
	int             idim[3];		 /* dimensions of input image */
	int             odim[3];		 /* dimensions of output image */
	int             i, j, k;
	int             order = 0;
	int             ndim = 0;
	int             ntype = 0;
	int             nbytes = 0;
	int             global_max = 0;
	int             global_min = 0;
	float           fglobal_max = 0;
	float           fglobal_min = 0;
	float           scaler = 1;

	if (argc != 6) {
		(void) printf ("Usage: reorient_ifh ifh img ofh omg hdr\n");
		return (ERROR);
	}
	ifhname = argv[1];
	imgname = argv[2];
	ofhname = argv[3];
	omgname = argv[4];
	hdrname = argv[5];

	orient1 = (char *) calloc (10, sizeof (char));
	orient2 = (char *) calloc (10, sizeof (char));
	orient3 = (char *) calloc (10, sizeof (char));
	version = (char *) calloc (5, sizeof (char));
	progdate = (char *) calloc (11, sizeof (char));
	if (orient1 == NULL)
		return (ERROR);
	if (orient2 == NULL)
		return (ERROR);
	if (orient3 == NULL)
		return (ERROR);
	if (version == NULL)
		return (ERROR);
	if (progdate == NULL)
		return (ERROR);
	(void) strncpy (version, "1.1", 3);
	(void) strncpy (progdate, "05/02/2008", 10);

/*
 * Read Interfile header
 */

	if ((ifh = fopen (ifhname, "r")) == 0) {
		(void) printf ("ERROR [reorient_ifh]: opening Interfile header %s\n", ifhname);
		return (ERROR);
	}
	if (fgets (str, sizeof (str), ifh) == NULL) {
		(void) printf ("ERROR [reorient_ifh]: reading %s\n", ifhname);
		return (ERROR);
	}
	if (strstr (str, "INTERFILE") == NULL) {
		(void) printf ("ERROR [reorient_ifh]: %s is not an Interfile header\n", ifhname);
		return (ERROR);
	}
	while (fgets (str, sizeof (str), ifh) != NULL) {
		ptr = strstr (str, ":=");
		if (ptr != NULL) {
			ptr += 2;
			if (strstr (str, "number format") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (strstr (ptr, "signed integer") != NULL)
					ntype = 4;
				else if (strstr (ptr, "float") != NULL)
					ntype = 16;
				else {
					(void) printf ("ERROR [reorient_ifh]: image is not signed integer or float\n");
					return (ERROR);
				}
				continue;
			}
			if (strstr (str, "number of bytes per pixel") != NULL) {
				(void) sscanf (ptr, "%d", &nbytes);
				continue;
			}
			if (strstr (str, "number of dimensions") != NULL) {
				(void) sscanf (ptr, "%d", &ndim);
				if (ndim != 3) {
					(void) printf ("ERROR [reorient_ifh]: non-standard number of dimensions = %d\n",
						       ndim);
					return (ERROR);
				}
				continue;
			}
			if (strstr (str, "matrix size [1]") != NULL) {
				(void) sscanf (ptr, "%d", &idim[0]);
				continue;
			}
			if (strstr (str, "matrix size [2]") != NULL) {
				(void) sscanf (ptr, "%d", &idim[1]);
				continue;
			}
			if (strstr (str, "matrix size [3]") != NULL) {
				(void) sscanf (ptr, "%d", &idim[2]);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [1]") != NULL) {
				(void) sscanf (ptr, "%f", &size[0]);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [2]") != NULL) {
				(void) sscanf (ptr, "%f", &size[1]);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [3]") != NULL) {
				(void) sscanf (ptr, "%f", &size[2]);
				continue;
			}
			if (strstr (str, "matrix initial element [1]") != NULL) {
				while (*ptr == ' ')
					ptr++;
				(void) strcpy (orient1, ptr);
				continue;
			}
			if (strstr (str, "matrix initial element [2]") != NULL) {
				while (*ptr == ' ')
					ptr++;
				(void) strcpy (orient2, ptr);
				continue;
			}
			if (strstr (str, "matrix initial element [3]") != NULL) {
				while (*ptr == ' ')
					ptr++;
				(void) strcpy (orient3, ptr);
				continue;
			}
			if (strstr (str, "scale_factor") != NULL) {
				(void) sscanf (ptr, "%f", &scaler);
				(void) printf ("scale_factor = %f\n", scaler);
				continue;
			}
		}
	}
	(void) fclose (ifh);
	(void) printf ("Read Interfile header %s\n", ifhname);

/*
 *	Check input image orientation against implemented orientations
 */

	for (i = 0; i < 3; i++) {
		odim[i] = idim[i];
		pix[i] = size[i];
	}

	if ((strstr (orient1, "right") != NULL) &&
	    (strstr (orient2, "posterior") != NULL) &&
	    (strstr (orient3, "inferior") != NULL)) {
		(void) printf ("Axial image in standard Analyze order\n");
		order = 0;

	} else if ((strstr (orient1, "left") != NULL) &&
		   (strstr (orient2, "anterior") != NULL) &&
		   (strstr (orient3, "superior") != NULL)) {
		(void) printf ("Axial image in standard vidi order\n");
		order = 1;

	} else if ((strstr (orient1, "left") != NULL) &&
		   (strstr (orient2, "anterior") != NULL) &&
		   (strstr (orient3, "inferior") != NULL)) {
		(void) printf ("Axial image in Focus order\n");
		order = 2;

	} else if ((strstr (orient1, "right") != NULL) &&
		   (strstr (orient2, "inferior") != NULL) &&
		   (strstr (orient3, "posterior") != NULL)) {
		(void) printf ("Coronal Analyze order\n");
		odim[0] = idim[0];
		odim[1] = idim[2];
		odim[2] = idim[1];
		pix[0] = size[0];
		pix[1] = size[2];
		pix[2] = size[1];
		order = 3;

	} else if ((strstr (orient1, "posterior") != NULL) &&
		   (strstr (orient2, "inferior") != NULL) &&
		   (strstr (orient3, "right") != NULL)) {
		(void) printf ("Sagittal Analyze order\n");
		odim[0] = idim[2];
		odim[1] = idim[0];
		odim[2] = idim[1];
		pix[0] = size[2];
		pix[1] = size[0];
		pix[2] = size[1];
		order = 4;

	} else {
		(void) printf ("ERROR [reorient_ifh]: orientation is non-standard ");
		(void) printf ("(%s %s %s)\n", orient1, orient2, orient3);
		(void) printf ("and cannot be reoriented.\n");
		return (ERROR);
	}

/*
 *	Allocate output image tensor
 */

	if (ntype == 4) {
		if ((img = s3tensor (1, odim[2], 1, odim[1], 1, odim[0])) == NULL) {
			(void) fprintf (stderr, "ERROR [reorient_ifh]: malloc img\n");
			return (ERROR);
		}
		if (NULL == (srow = (short *) calloc (odim[0], sizeof (short)))) {
			(void) fprintf (stderr, "ERROR [reorient_ifh]: calloc srow\n");
			return (ERROR);
		}
	} else {
		if ((fimg = f3tensor (1, odim[2], 1, odim[1], 1, odim[0])) == NULL) {
			(void) fprintf (stderr, "ERROR [reorient_ifh]: malloc fimg\n");
			return (ERROR);
		}
		if (NULL == (frow = (float *) calloc (odim[0], sizeof (float)))) {
			(void) fprintf (stderr, "ERROR [reorient_ifh]: calloc frow\n");
			return (ERROR);
		}
	}

	if ((ifi = fopen (imgname, "r")) == 0) {
		(void) printf ("ERROR [reorient_ifh]: opening input image %s\n", imgname);
		return (ERROR);
	}

/*	Standard Analyze orientation = right, posterior, inferior; odim=idim */

	if (order == 0) {
		for (i = 1; i <= idim[2]; i++) {
			for (j = 1; j <= idim[1]; j++) {
				if (ntype == 4) {
					if ((fread (srow, sizeof (short), idim[0], ifi)) != idim[0]) {
						(void) fprintf (stderr, "ERROR [reorient_ifh]: reading: %s\n", imgname);
						return (ERROR);
					}
					for (k = 0; k < idim[0]; k++) {
						if (srow[k] == -32768)
							img[i][j][k + 1] = 0;
						else
							img[i][j][k + 1] = scaler * srow[k];
						if ((int) srow[k] > global_max)
							global_max = (int) srow[k];
						else if ((int) srow[k] < global_min)
							global_min = (int) srow[k];
					}
				} else {
					if ((fread (frow, sizeof (float), idim[0], ifi)) != idim[0]) {
						(void) fprintf (stderr, "ERROR [reorient_ifh]: reading: %s\n", imgname);
						return (ERROR);
					}
					for (k = 0; k < idim[0]; k++) {
						fimg[i][j][k + 1] = scaler * frow[k];
						if (frow[k] > fglobal_max)
							fglobal_max = frow[k];
						else if (frow[k] < fglobal_min)
							fglobal_min = frow[k];
					}
				}
			}
		}

/*	Standard vidi = left, posterior, superior; odim=idim */

	} else if (order == 1) {
		for (i = idim[2]; i >= 1; i--) {
			for (j = idim[1]; j >= 1; j--) {
				if (ntype == 4) {
					if ((fread (srow, sizeof (short), idim[0], ifi)) != idim[0]) {
						(void) fprintf (stderr, "ERROR [reorient_ifh]: reading: %s\n", imgname);
						return (ERROR);
					}
					for (k = 0; k < idim[0]; k++) {
						if (srow[k] == -32768)
							img[i][j][idim[0] - k] = 0;
						else
							img[i][j][idim[0] - k] = scaler * srow[k];
						if ((int) srow[k] > global_max)
							global_max = (int) srow[k];
						else if ((int) srow[k] < global_min)
							global_min = (int) srow[k];
					}
				} else {
					if ((fread (frow, sizeof (float), idim[0], ifi)) != idim[0]) {
						(void) fprintf (stderr, "ERROR [reorient_ifh]: reading: %s\n", imgname);
						return (ERROR);
					}
					for (k = 0; k < idim[0]; k++) {
						fimg[i][j][idim[0] - k] = scaler * frow[k];
						if (frow[k] > fglobal_max)
							fglobal_max = frow[k];
						else if (frow[k] < fglobal_min)
							fglobal_min = frow[k];
					}
				}
			}
		}

/*	Focus = left, anterior, inferior; odim=idim */

	} else if (order == 2) {
		for (i = 1; i <= idim[2]; i++) {
			for (j = idim[1]; j >= 1; j--) {
				if (ntype == 4) {
					if ((fread (srow, sizeof (short), idim[0], ifi)) != idim[0]) {
						(void) fprintf (stderr, "ERROR [reorient_ifh]: reading: %s\n", imgname);
						return (ERROR);
					}
					for (k = 0; k < idim[0]; k++) {
						if (srow[k] == -32768)
							img[i][j][idim[0] - k] = 0;
						else
							img[i][j][idim[0] - k] = scaler * srow[k];
						if ((int) srow[k] > global_max)
							global_max = (int) srow[k];
						else if ((int) srow[k] < global_min)
							global_min = (int) srow[k];
					}
				} else {
					if ((fread (frow, sizeof (float), idim[0], ifi)) != idim[0]) {
						(void) fprintf (stderr, "ERROR [reorient_ifh]: reading: %s\n", imgname);
						return (ERROR);
					}
					for (k = 0; k < idim[0]; k++) {
						fimg[i][j][idim[0] - k] = scaler * frow[k];
						if (frow[k] > fglobal_max)
							fglobal_max = frow[k];
						else if (frow[k] < fglobal_min)
							fglobal_min = frow[k];
					}
				}
			}
		}

/*	Coronal orientation = right, inferior, posterior; Order: idim[0], idim[2], idim[1];
 *		odim[0] = idim[0] (k);
 *		idim[2] and idim[1] (i,j) reversed;
 */

	} else if (order == 3) {
		for (i = 0; i < idim[2]; i++) {
			for (j = 0; j < idim[1]; j++) {
				if (ntype == 4) {
					if ((fread (srow, sizeof (short), idim[0], ifi)) != idim[0]) {
						(void) fprintf (stderr, "ERROR [reorient_ifh]: reading: %s\n", imgname);
						return (ERROR);
					}
					for (k = 0; k < idim[0]; k++) {
						if (srow[k] == -32768)
							img[j + 1][odim[1] - i][k + 1] = 0;
						else
							img[j + 1][odim[1] - i][k + 1] = scaler * srow[k];
						if ((int) srow[k] > global_max)
							global_max = (int) srow[k];
						else if ((int) srow[k] < global_min)
							global_min = (int) srow[k];
					}
				} else {
					if ((fread (frow, sizeof (float), idim[0], ifi)) != idim[0]) {
						(void) fprintf (stderr, "ERROR [reorient_ifh]: reading: %s\n", imgname);
						return (ERROR);
					}
					for (k = 0; k < idim[0]; k++) {
						fimg[j + 1][odim[1] - i][k + 1] = scaler * frow[k];
						if (frow[k] > fglobal_max)
							fglobal_max = frow[k];
						else if (frow[k] < fglobal_min)
							fglobal_min = frow[k];
					}
				}
			}
		}

/*	Sagittal orientation = posterior, inferior, right; Order: idim[2](k), idim[0](i), idim[1](j);  */

	} else if (order == 4) {
		for (i = 0; i < idim[2]; i++) {
			for (j = 0; j < idim[1]; j++) {
				if (ntype == 4) {
					if ((fread (srow, sizeof (short), idim[0], ifi)) != idim[0]) {
						(void) fprintf (stderr, "ERROR [reorient_ifh]: reading: %s\n", imgname);
						return (ERROR);
					}
					for (k = 0; k < idim[0]; k++) {
						if (srow[k] == -32768)
							img[j + 1][k + 1][i + 1] = 0;
						else
							img[j + 1][k + 1][i + 1] = scaler * srow[k];
						if ((int) srow[k] > global_max)
							global_max = (int) srow[k];
						else if ((int) srow[k] < global_min)
							global_min = (int) srow[k];
					}
				} else {
					if ((fread (frow, sizeof (float), idim[0], ifi)) != idim[0]) {
						(void) fprintf (stderr, "ERROR [reorient_ifh]: reading: %s\n", imgname);
						return (ERROR);
					}
					for (k = 0; k < idim[0]; k++) {
						fimg[j + 1][k + 1][i + 1] = scaler * frow[k];
						if (frow[k] > fglobal_max)
							fglobal_max = frow[k];
						else if (frow[k] < fglobal_min)
							fglobal_min = frow[k];
					}
				}
			}
		}
	}
	(void) fclose (ifi);
	(void) printf ("Read Image %s\n", imgname);

/*
 *	Write Output image is always in standard Analyze orientation
 */

	if ((ifi = fopen (omgname, "w")) == 0) {
		(void) printf ("ERROR [reorient_ifh]: opening image %s\n", omgname);
		return (ERROR);
	}
	for (i = 1; i <= odim[2]; i++) {
		for (j = 1; j <= odim[1]; j++) {
			if (ntype == 4) {
				for (k = 1; k <= odim[0]; k++)
					srow[k - 1] = img[i][j][k];
				if ((fwrite (srow, sizeof (short), odim[0], ifi)) != odim[0]) {
					(void) fprintf (stderr, "ERROR [reorient_ifh]: writing: %s\n", omgname);
					return (ERROR);
				}
			} else {
				for (k = 1; k <= odim[0]; k++)
					frow[k - 1] = fimg[i][j][k];
				if ((fwrite (frow, sizeof (float), odim[0], ifi)) != odim[0]) {
					(void) fprintf (stderr, "ERROR [reorient_ifh]: writing: %s\n", omgname);
					return (ERROR);
				}
			}
		}
	}
	(void) fclose (ifi);
	(void) printf ("Wrote Image %s\n", omgname);

/*
 *	Write Analyze hdr file
 */

	(void) strncpy (hdr.hk.db_name, omgname, 17);
	hdr.hk.sizeof_hdr = sizeof (struct dsr); /* required by developers */
	hdr.hk.extents = 16384;			 /* recommended by developers  */
	hdr.hk.regular = 'r';			 /* required by developers */
	hdr.dime.dim[0] = 4;			 /* typically 4 dimensions  */
	hdr.dime.dim[1] = odim[0];		 /* x dimension of atlas   */
	hdr.dime.dim[2] = odim[1];		 /* y dimension of atlas   */
	hdr.dime.dim[3] = odim[2];		 /* number of slices in volume */
	hdr.dime.dim[4] = 1;			 /* only one volume typically  */
	hdr.dime.unused8 = 0;			 /* despite the label, some of this is used */
	hdr.dime.unused9 = 0;
	hdr.dime.unused10 = 0;
	hdr.dime.unused11 = 0;
	hdr.dime.unused12 = 0;
	hdr.dime.unused13 = 0;
	hdr.dime.unused14 = 0;
	hdr.dime.datatype = ntype;		 /* 4-> 16-bit signed integer; 8-> float */
	hdr.dime.bitpix = 8 * nbytes;		 /* number of bits/pixel */
	hdr.dime.pixdim[1] = pix[0];		 /* in mm */
	hdr.dime.pixdim[2] = pix[1];		 /* in mm */
	hdr.dime.pixdim[3] = pix[2];		 /* in mm */
	hdr.dime.funused8 = 0;
	hdr.dime.funused9 = 0;
	hdr.dime.funused10 = 0;
	hdr.dime.funused11 = 0;
	hdr.dime.funused12 = 0;
	hdr.dime.funused13 = 0;
	if (ntype == 4) {
		hdr.dime.glmax = global_max;
		hdr.dime.glmin = global_min;
	} else {
		hdr.dime.glmax = (int) fglobal_max;
		hdr.dime.glmin = (int) fglobal_min;
	}
	(void) strncpy (hdr.hist.descrip, omgname, 79);
	(void) strcpy (hdr.hist.originator, "reorient_ifh");
	hdr.hist.orient = TRANSVERSE;
	if ((ohdr = fopen (hdrname, "w")) == 0) {
		(void) printf ("ERROR [reorient_ifh]: creating ANALYZE header %s\n", hdrname);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, ohdr)) != 1) {
		(void) printf ("ERROR [reorient_ifh]: writing to: %s\n", hdrname);
		return (ERROR);
	}
	(void) fclose (ohdr);
	(void) printf ("Wrote hdr %s\n", hdrname);

/*
 * Write Interfile header
 */

	if ((ifh = fopen (ofhname, "w")) == 0) {
		printf ("ERROR [reorient_ifh]: opening output file %s\n", ofhname);
		return (ERROR);
	}
	fprintf (ifh, "INTERFILE :=\n");
	fprintf (ifh, "version of keys               := 3.3\n");
	fprintf (ifh, "conversion program            := reorient_ifh\n");
	fprintf (ifh, "program author                := Tom Videen\n");
	fprintf (ifh, "program version               := %s\n", version);
	fprintf (ifh, "program date                  := %s\n", progdate);
	fprintf (ifh, "name of data file             := %s\n", omgname);
	fprintf (ifh, "number format                 := signed integer\n");
	fprintf (ifh, "number of bytes per pixel     := %d\n", nbytes);
	fprintf (ifh, "number of dimensions          := %d\n", ndim);
	fprintf (ifh, "matrix size [1]               := %d\n", odim[0]);
	fprintf (ifh, "matrix size [2]               := %d\n", odim[1]);
	fprintf (ifh, "matrix size [3]               := %d\n", odim[2]);
	fprintf (ifh, "scaling factor (mm/pixel) [1] := %f\n", pix[0]);
	fprintf (ifh, "scaling factor (mm/pixel) [2] := %f\n", pix[1]);
	fprintf (ifh, "scaling factor (mm/pixel) [3] := %f\n", pix[2]);
	fprintf (ifh, "matrix initial element [1]    := right\n");
	fprintf (ifh, "matrix initial element [2]    := posterior\n");
	fprintf (ifh, "matrix initial element [3]    := inferior\n");
	(void) fclose (ifh);

	printf ("Completed [reorient_ifh]: creating %s\n", omgname);
	return (OK);
}
@
