head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.17.47.31;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.12.16.17.54.29;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.12.14.19.23.56;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.01.14.18.07.42;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	97.01.09.23.14.46;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: analyze2img8.c,v $
 * Revision 1.4  1999/12/16  17:54:29  tom
 * sync version
 *
 * Revision 1.3  1999/12/14  19:23:56  tom
 * lint cleaning
 *
 * Revision 1.2  1998/01/14  18:07:42  tom
 * fix calloc error
 *
 * Revision 1.1  1997/01/09  23:14:46  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			analyze2img8.c
 *	Date:			Jun 1996
 *	Author:			Tom Videen
 *	Description:	Transform 8-bit Analyze images into ECAT 7.0 format.
 *	Notes:
 *		reslice16 (AIR package) sets unsampled points to -32768;
 *			This program resets these to 0.
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img8/RCS/analyze2img8.c,v 1.4 1999/12/16 17:54:29 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <ANALYZE.h>				 /* dsr */

#define MAXSTR 256

/*	----------------------------
 *	Function:			analyze2img8
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	ImageFile      *file;
	Index           indx;
	struct dsr      hdr;			 /* header for ANALYZE */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	int             fd_img;			 /* file for ANALYZE image */

	char           *PET_img;		 /* input PET image filename */
	char           *ANALYZE_hdr;	 /* output Analyze header filename  */
	char           *ANALYZE_img;	 /* output Analyze image filename */
	char            runstamp[40];	 /* version, date and userid info */
	long            odim1, odim2, odim3; /* dimensions of img */
	long            ndim1, ndim2, ndim3; /* dimensions of image */
	long            xoffset, yoffset; /* offsets for recutting img */
	int             i, j, k, m, n;

	float        ***img;			 /* intermediate image */
	float        ***image;			 /* output PET image */
    unsigned char  *row;			 /* single row of input image */

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 11) {
		printf ("Usage: analyze2img8 ANALYZE_img ANALYZE_hdr ECAT_img\n");
		return (ERROR);
	}
	ANALYZE_img = argv[1];
	ANALYZE_hdr = argv[2];
	PET_img = argv[3];
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[4], argv[5], argv[6],
		 argv[8], argv[9], argv[10]);

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (ANALYZE_hdr, "r")) == 0) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot open: %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analyze2img8]: Reading: %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [analyze2img8]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 2) {
		fprintf (stderr, "ERROR [analyze2img8]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 8) {
		fprintf (stderr, "ERROR [analyze2img8]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	odim1 = hdr.dime.dim[1];
	odim2 = hdr.dime.dim[2];
	odim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

/*
 *	Read the img and flip X, Y & Z from Analyze convention
 */

	if ((fd_img = open (ANALYZE_img, O_RDONLY, 0444)) < 0) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot open: %s\n", ANALYZE_img);
		return (ERROR);
	}
	if ((img = f3tensor (1, odim3, 1, odim2, 1, odim1)) == NULL) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot malloc img\n");
		return (ERROR);
	}
	if (NULL == (row = (unsigned char *) calloc (odim1, sizeof (unsigned char)))) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot malloc memory for row\n");
		return (ERROR);
	}
	printf ("Converting %s\n", ANALYZE_img);

	for (i = odim3; i > 0; i--) {
		for (j = odim2; j > 0; j--) {
			(void) read (fd_img, row, odim1);
			for (k = 1; k <= odim1; k++) {
				img[i][j][odim1 - (k - 1)] = (float) row[k-1];
			}
		}
	}
	(void) close (fd_img);

/*
 *	Generate 128x128 slices from img
 */

	ndim1 = 128;
	ndim2 = 128;
	ndim3 = odim3;
	xoffset = (odim1 - ndim1) / 2;
	yoffset = (odim2 - ndim2) / 2;
	if ((image = f3tensor (1, ndim3, 1, ndim2, 1, ndim1)) == NULL) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot malloc image\n");
		return (ERROR);
	}
	for (i = 1; i <= ndim3; i++) {
		for (j = 1; j <= ndim2; j++) {
			m = j + yoffset;
			for (k = 1; k <= ndim1; k++) {
				n = k + xoffset;
				if (m > 0 && m <= odim2 && n > 0 && n <= odim1)
					image[i][j][k] = img[i][m][n];
				else
					image[i][j][k] = 0.;
			}
		}
	}

/*
 *	Create ECAT file
 */

	file = make_imgfile (PET_img);
	if (make_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot make mh for %s\n", PET_img);
		return (ERROR);
	}
	if (make_sh (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot make sh for %s\n", PET_img);
		return (ERROR);
	}

/*
 *	Define ECAT file properties
 */

	file->mh->file_format = MATRIX_REV7;
	file->mh->filetype = PetVolume;
	file->mh->scanner_type = 0;
	file->mh->start_time = 0;
	for (i = 0; i < 8; i++)
		file->mh->isotope[i] = ' ';
	for (i = 0; i < 32; i++)
		file->mh->radiopharmaceutical[i] = ' ';
	file->mh->bed_elevation = 0;
	file->mh->wobble_speed = 0;
	file->mh->calibration_factor = 1;
	file->mh->sw_revision = (char *) calloc (32, sizeof (char));
	file->mh->filetime = (char *) calloc (32, sizeof (char));
	file->mh->nplane = odim3;
	file->mh->nframe = 1;
	file->mh->ngate = 1;
	file->mh->nbed = 1;
	file->mh->init_bed_pos = 0;
	for (i = 0; i < 16; i++)
		file->mh->bed_off[i] = 0;
	file->mh->slicesep = 0.1 * hdr.dime.pixdim[3];
	(void) save_rcs (file, rcsid, runstamp);

	file->sh->number_format = SHORT_DATA;
	file->sh->ndim = 3;
	file->sh->dim1 = ndim1;
	file->sh->dim2 = ndim2;
	file->sh->dim3 = ndim3;
	file->sh->sample_size_1 = 0.1 * hdr.dime.pixdim[1];
	file->sh->sample_size_2 = 0.1 * hdr.dime.pixdim[2];
	file->sh->sample_size_3 = 0.1 * hdr.dime.pixdim[3];
	file->sh->start_time = 0;
	file->sh->duration = 1;

/*
 *	Write ECAT image file
 */

	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot open %s\n", PET_img);
		return (ERROR);
	}
	if (make_mh7 (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot make mh7 for %s\n", PET_img);
		return (ERROR);
	}
	(void) fill_mh7 (file);
	if (make_sh7 (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot make sh7 for %s\n", PET_img);
		return (ERROR);
	}
	file->m7->sh->decay_corr_fctr = 1;
	if (put_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot write %s\n", PET_img);
		return (ERROR);
	}
	if (writetensor (file, &indx, image) == ERROR) {
		fprintf (stderr, "ERROR [analyze2img8]: Cannot write %s\n", PET_img);
		return (ERROR);
	}
/*
 *	Free & Exit
 */

	printf ("\nSuccessful conversion to %s\n", PET_img);
	free_imgfile (file);
	free (row);
	free_f3tensor (img, 1, odim3, 1, odim2, 1, odim1);
	free_f3tensor (image, 1, ndim3, 1, ndim2, 1, ndim1);
	return (OK);
}
@


1.4
log
@sync version
@
text
@d2 3
d16 1
a16 1
 *	Date:			Jun-96
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img8/RCS/analyze2img8.c,v 1.3 1999/12/14 19:23:56 tom Exp tom $";
d78 1
a78 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[4], argv[5], argv[6],
d117 1
a117 1
	fclose (fd_hdr);
d139 1
a139 1
			read (fd_img, row, odim1);
d145 1
a145 1
	close (fd_img);
d212 1
a212 1
	save_rcs (file, rcsid, runstamp);
d229 1
a229 1
	strcpy (file->mode, "w");
d238 1
a238 1
	fill_mh7 (file);
@


1.3
log
@lint cleaning
@
text
@d2 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img8/RCS/analyze2img8.c,v 1.2 1998/01/14 18:07:42 tom Exp tom $";
@


1.2
log
@fix calloc error
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img8/RCS/analyze2img8.c,v 1.1 1997/01/09 23:14:46 tom Exp tom $";
d21 2
a28 1
#include <matrixlib.h>
a45 1
	FILE           *fopen ();		 /* the fopen stuff  */
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2img8/RCS/analyze2img8.c,v 2.3 1996/10/16 16:20:17 tom Exp $";
d122 1
a122 1
	if (NULL == (row = (unsigned char *) calloc ((unsigned char) (odim1 * sizeof (unsigned char))))) {
d193 2
a194 2
	file->mh->sw_revision = (char *) calloc (32);
	file->mh->filetime = (char *) calloc (32);
@
