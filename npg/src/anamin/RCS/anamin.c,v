head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2010.12.07.19.09.59;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.23.21.10.32;	author tom;	state Exp;
branches;
next	;


desc
@initial version
@


1.2
log
@compute min of 2 or more images
@
text
@/*	$Log$ */
/*	===============================================================================
 *	Module:			anamin.c
 *	Date:			Dec 2010
 *	Author:			Tom Videen
 *	Description:	Compute minimum pixel values of 2 or more Analyze images
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaminimum/RCS/anaminimum.c,v 2.3 2010/06/04 19:03:18 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anamin
 *	----------------------------
 */
int	main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* output file names */
	char           *img2, *hdr2;		 /* input file names */
	char           *name;
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	int             n, nimg;
	int             first = 3;
	short          *mimg;
	short          *simg;			 /* short image */

	if (argc < 5) {
		fprintf (stderr, "Usage: anamin out img1 img2 img3 ...\n");
		return (ERROR);
	}
	hdr1 = (char *) calloc (256, sizeof (char));
	img1 = (char *) calloc (256, sizeof (char));
	hdr2 = (char *) calloc (256, sizeof (char));
	img2 = (char *) calloc (256, sizeof (char));
	if (hdr1 == NULL)
		return (ERROR);
	if (img1 == NULL)
		return (ERROR);
	if (hdr2 == NULL)
		return (ERROR);
	if (img2 == NULL)
		return (ERROR);

	nimg = atoi (argv[1]) - 1;
	name = argv[2];
	(void) strcpy (hdr1, name);
	(void) strcpy (img1, name);
	(void) strcat (hdr1, ".hdr");
	(void) strcat (img1, ".img");

/*	Get first image */

	name = argv[first];
	(void) strcpy (hdr2, name);
	(void) strcpy (img2, name);
	(void) strcat (hdr2, ".hdr");
	(void) strcat (img2, ".img");
	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamin]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamin]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anamin]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
/*	Get first image */

	name = argv[first];
	(void) strcpy (hdr2, name);
	(void) strcpy (img2, name);
	(void) strcat (hdr2, ".hdr");
	(void) strcat (img2, ".img");
	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamin]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamin]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anamin]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anamin]: reading %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anamin]: reading %s\n", hdr2);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1 * dim2 * dim3;

	simg = (short *) calloc (num, sizeof (short));
	if (simg == NULL) {
		fprintf (stderr, "ERROR [anamin]: calloc simg\n");
		return (ERROR);
	}
	mimg = (short *) calloc (num, sizeof (short));
	if (mimg == NULL) {
		fprintf (stderr, "ERROR [anamin]: calloc mimg\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamin]: opening %s\n", img2);
		return (ERROR);
	}
	if ((fread (mimg, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamin]: reading %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img2);

/*	Get other images */

	for (n = first + 1; n <= nimg + 1; n++) {
		name = argv[n + 1];
		(void) strcpy (hdr2, name);
		(void) strcpy (img2, name);
		(void) strcat (hdr2, ".hdr");
		(void) strcat (img2, ".img");
		if ((fd_hdr = fopen (hdr2, "r")) == 0) {
			fprintf (stderr, "ERROR [anamin]: opening %s\n", hdr2);
			return (ERROR);
		}
		if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
			fprintf (stderr, "ERROR [anamin]: reading %s\n", hdr2);
			return (ERROR);
		}
		if (hdr.dime.dim[0] < 3) {
			fprintf (stderr, "ERROR [anamin]: reading %s\n", hdr2);
			fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
			return (ERROR);
		}
		if (hdr.dime.datatype != 4) {
			fprintf (stderr, "ERROR [anamin]: reading %s\n", hdr2);
			fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
			return (ERROR);
		}
		if (hdr.dime.bitpix != 16) {
			fprintf (stderr, "ERROR [anamin]: reading %s\n", hdr2);
			fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
			return (ERROR);
		}
		dim1 = hdr.dime.dim[1];
		dim2 = hdr.dime.dim[2];
		dim3 = hdr.dime.dim[3];
		(void) fclose (fd_hdr);

		if (num != dim1 * dim2 * dim3) {
			fprintf (stderr, "ERROR [anamin]: images are not same size\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anamin]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (simg, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamin]: reading %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
		for (i = 0; i < num; i++) {
			if (simg[i] < mimg[i])
				mimg[i] = simg[i];
		}
	}

/*	Write minimum image */

	fprintf (stderr, "n = %d\n", nimg);
	if ((fd_img = fopen (img1, "w")) == 0) {
		fprintf (stderr, "ERROR [anamin]: opening %s\n", img1);
		return (ERROR);
	}
	fprintf (stdout, "Writing %s\n", img1);
	if ((fwrite (mimg, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamin]: writing %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr1, "w")) == 0) {
		fprintf (stderr, "ERROR [anamin]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamin]: writing %s\n", hdr1);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	free (simg);
	free (mimg);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 *	Date:			Jun 2005
d6 1
a6 1
 *	Description:	Get the minimum pixel value for each pixel in a pair of Analyze image
d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamin/RCS/anamin.c,v 1.3 2005/06/16 21:20:44 tom Exp $";
d16 1
d24 1
a24 1
main (argc, argv)
d32 3
a34 3
	char           *img1, *hdr1;		 /* input file 1 */
	char           *img2, *hdr2;		 /* input file 2 */
	char           *img3, *hdr3;		 /* output file */
d37 4
a40 4
	short          *imga, *imgb;		 /* images */
	float          *fimga, *fimgb;		 /* float image */
	int             itype1 = 0;		 /* 0 = int, 1 = float   */
	int             itype2 = 0;		 /* 0 = int, 1 = float   */
d42 2
a43 2
	if (argc != 7) {
		fprintf (stderr, "Usage: anamin hdr1 img1 hdr2 img2 hdr3 img3\n");
d46 12
a57 6
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	hdr3 = argv[5];
	img3 = argv[6];
d59 6
a64 1
/*	Get image 1 */
d66 9
a74 2
	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anamin]: Cannot open: %s\n", hdr1);
d78 1
a78 1
		fprintf (stderr, "ERROR [anamin]: Reading: %s\n", hdr1);
d81 2
a82 2
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anamin]: Reading: %s\n", hdr1);
d86 1
a86 5
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);
d88 5
a92 44

	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype1 = 0;
		imga = (short *) calloc (num, sizeof (short));
		if (imga == NULL) {
			fprintf (stderr, "ERROR [anamin]: calloc imga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anamin]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamin]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype1 = 1;
		fimga = (float *) calloc (num, sizeof (float));
		if (fimga == NULL) {
			fprintf (stderr, "ERROR [anamin]: calloc fimga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anamin]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamin]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else {
		fprintf (stderr, "ERROR [anamin]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

/*	Get second image */

d101 1
a101 1
	if (hdr.dime.dim[0] != 4) {
d106 10
d119 1
d121 4
a124 3
	(void) fclose (fd_hdr);
	if (num != dim1 * dim2 * dim3) {
		fprintf (stderr, "ERROR [anamin]: images are not same size\n");
d127 26
a152 5
	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype2 = 0;
		imgb = (short *) calloc (num, sizeof (short));
		if (imgb == NULL) {
			fprintf (stderr, "ERROR [anamin]: calloc imgb\n");
d155 2
a156 2
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anamin]: opening %s\n", img2);
d159 3
a161 2
		if ((fread (imgb, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamin]: reading: %s\n", img2);
d164 3
a166 7
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype2 = 1;
		fimgb = (float *) calloc (num, sizeof (float));
		if (fimgb == NULL) {
			fprintf (stderr, "ERROR [anamin]: calloc fimgb\n");
d169 14
d187 2
a188 2
		if ((fread (fimgb, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamin]: reading: %s\n", img2);
d193 4
a196 5
	} else {
		fprintf (stderr, "ERROR [anamin]: Reading: %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
d199 1
a199 1
/*	Save minimum pixel values */
d201 3
a203 2
	if ((fd_img = fopen (img3, "w")) == 0) {
		fprintf (stderr, "ERROR [anamin]: opening %s\n", img3);
d206 4
a209 50
	if (itype1 == 0 && itype2 == 0) {
		for (i = 0; i < num; i++)
			if (imga[i] > imgb[i])
				imga[i] = imgb[i];
		if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamin]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as integer\n", img3);
		free (imga);
		free (imgb);
	} else if (itype1 == 0 && itype2 == 1) {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			if (imga[i] > fimgb[i])
				fimgb[i] = imga[i];
		if ((fwrite (fimgb, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamin]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (imga);
		free (fimgb);
	} else if (itype1 == 1 && itype2 == 0) {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			if (fimga[i] > imgb[i])
				fimga[i] = imgb[i];
		if ((fwrite (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamin]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (fimga);
		free (imgb);
	} else {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			if (fimga[i] > fimgb[i])
				fimga[i] = fimgb[i];
		if ((fwrite (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamin]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (fimga);
		free (fimgb);
d213 2
a214 2
	if ((fd_hdr = fopen (hdr3, "w")) == 0) {
		fprintf (stderr, "ERROR [anamin]: openng %s\n", hdr3);
d218 1
a218 1
		fprintf (stderr, "ERROR [anamin]: writing %s\n", hdr3);
d222 3
@
