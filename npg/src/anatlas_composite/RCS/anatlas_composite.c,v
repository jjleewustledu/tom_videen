head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.18.21.31;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.09.14.40.21;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: anatlas_composite.c,v $
 * Revision 1.1  2000/02/09  14:40:21  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anatlas_composite.c
 *	Date:			Feb 2000
 *	Author:			Tom Videen
 *	Description:	Read Analyze image to an output file with slices reproduced;
 *					Used to read Yang's atlas images into cubic voxel image.
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anatlas_composite/RCS/anatlas_composite.c,v 1.1 2000/02/09 14:40:21 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anatlas_composite
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	long            dim1, dim2;		 /* dimensions of image */
	long            dim3, ndim3;	 /* dimensions of image */
	long           *map;
	long            num, nnum, pln, i, j, ii, jj;
	short          *imga, *imgb;	 /* image */

	if (argc != 5) {
		printf ("Usage: anatlas_composite img1 hdr1 img2 hdr2\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];

/*	Get first image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anatlas_composite]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anatlas_composite]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anatlas_composite]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anatlas_composite]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anatlas_composite]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	pln = dim1 * dim2;
	num = pln * dim3;

	imga = (short *) calloc (num, sizeof (short));
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anatlas_composite]: Cannot calloc imga\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anatlas_composite]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anatlas_composite]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img1);

/*	Create plane remapping for output image */

	ndim3 = 50;
	map = (long *) calloc (ndim3+1, sizeof (long));
	map[1]  = 1;
 	map[2]  = 1;
 	map[3]  = 2;
 	map[4]  = 2;
 	map[5]  = 3;	
 	map[6]  = 3;
 	map[7]  = 3;
 	map[8]  = 4;
 	map[9]  = 4;
	map[10] = 5;
	map[11] = 5;
	map[12] = 5;
	map[13] = 6;
	map[14] = 6;
	map[15] = 7;
	map[16] = 7;
	map[17] = 8;
	map[18] = 8;
	map[19] = 9;
	map[20] = 9;
	map[21] = 10;
	map[22] = 10;
	map[23] = 11;
	map[24] = 11;
	map[25] = 12;
	map[26] = 12;
	map[27] = 13;
	map[28] = 13;
	map[29] = 14;
	map[30] = 15;
	map[31] = 15;
	map[32] = 16;
	map[33] = 17;
	map[34] = 17;
	map[35] = 18;
	map[36] = 18;
	map[37] = 19;
	map[38] = 19;
	map[39] = 20;
	map[40] = 20;
	map[41] = 21;
	map[42] = 21;
	map[43] = 22;
	map[44] = 22;
	map[45] = 23;
	map[46] = 23;
	map[47] = 24;
	map[48] = 24;
	map[49] = 25;
	map[50] = 25;
 
/*	Write image */

	hdr.dime.dim[3] = ndim3;
	nnum = pln * ndim3;
	imgb = (short *) calloc (nnum, sizeof (short));
	if (imgb == NULL) {
		fprintf (stderr, "ERROR [anatlas_composite]: Cannot calloc imgb\n");
		return (ERROR);
	}
	for (i = 0; i < ndim3; i++) {
		ii = i * pln;
		jj = (map[i+1]-1) * pln;
		for (j = 0; j < pln; j++)
			if (imga[jj+j] > 0)
				imgb[ii+j] = 100;
	}

	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [anatlas_composite]: Unable to open %s\n", img2);
		return (ERROR);
	}
	if ((fwrite (imgb, sizeof (short), nnum, fd_img)) != nnum) {
		fprintf (stderr, "ERROR [anatlas_composite]: Error writing to: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [anatlas_composite]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anatlas_composite]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	free (imga);
	free (imgb);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d7 1
a7 1
 *	Date:			Feb-2000
d13 1
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anatlas_composite/RCS/anatlas_composite.c,v 1.3 1999/12/16 18:00:47 tom Exp $";
d80 1
a80 1
	fclose (fd_hdr);
d97 1
a97 1
	fclose (fd_img);
d160 4
d180 1
a180 1
	fclose (fd_img);
d190 1
a190 1
	fclose (fd_hdr);
@
