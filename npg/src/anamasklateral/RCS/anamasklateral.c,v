head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.17.59.20;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.14.40.55;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.12.16.17.56.46;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.11.12.18.59.09;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/* $Log: anamasklateral.c,v $
 * Revision 1.3  2002/11/27  14:40:55  tom
 * *** empty log message ***
 *
 * Revision 1.2  1999/12/16  17:56:46  tom
 * new libs
 *
 * Revision 1.1  1999/11/12  18:59:09  tom
 * Initial revision
 * */
/*	=========================================================================
 *	Module:			anamasklateral.c
 *	Author:			Tom Videen
 *	Description:	Mask one Analyze image using another Analyze image.
 *					Threshold is reduced by 0.0001.
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: anamasklateral.c,v 1.3 2002/11/27 14:40:55 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <nrutil.h>
#include <libnrimg.h>
#include <ANALYZE.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* mask file */
	char           *img3, *hdr3;	 /* output file */
	int             threshold;		 /* mask all pixels >= this value */
	long            dim1, dim2, dim3;	 /* dimensions of tensors */
	long            i, j, k, m, pln, num;
	short        ***image;
	int           **mask;
	short          *img;

/*
 *	Get command line arguments.
 */
	if (argc != 8) {
		fprintf (stderr, "Usage: anamasklateral inhdr inimg mskhdr mskimg outhdr outimg thresh\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	hdr3 = argv[5];
	img3 = argv[6];
	threshold = atoi (argv[7]);
	printf ("Threshold = %d\n", threshold);

/*
 *	Read mask
 */

	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamasklateral]: Cannot open: %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamasklateral]: Reading: %s\n", hdr2);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	if (dim3 > 1) {
		fprintf (stderr, "ERROR [anamasklateral]: Lateral image should be 1 plane\n");
		return (ERROR);
	}
	pln = dim1 * dim2;
	img = (short *) calloc (pln, sizeof (short));

	if (img == NULL) {
		fprintf (stderr, "ERROR [anamasklateral]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamasklateral]: Cannot open: %s\n", img2);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), pln, fd_img)) != pln) {
		fprintf (stderr, "ERROR [anamasklateral]: Reading: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img2);
	if ((mask = imatrix (1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [anamasklateral]: Cannot malloc image\n");
		return (NULL);
	}
	m = 0;
	for (j = dim2; j > 0; j--) {
		for (i = dim1; i > 0; i--) {
			mask[j][i] = img[m];
			m++;
		}
	}
	free (img);

/*
 *	Read image to mask
 */
	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anamasklateral]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamasklateral]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anamasklateral]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anamasklateral]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anamasklateral]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	pln = dim1 * dim2;
	num = pln * dim3;
	img = (short *) calloc (num, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [anamasklateral]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anamasklateral]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamasklateral]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img1);

	if ((image = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [anamasklateral]: Cannot malloc image\n");
		return (NULL);
	}
	m = 0;
	for (k = dim3; k > 0; k--) {
		for (j = dim2; j > 0; j--) {
			for (i = dim1; i > 0; i--) {
				image[k][j][i] = img[m];
				m++;
			}
		}
	}

/*	Mask the image */

	for (k = 1; k <= dim3; k++) {
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				if (mask[k][j] < threshold)
					image[k][j][i] = 0;
			}
		}
	}

	m = 0;
	for (k = dim3; k > 0; k--) {
		for (j = dim2; j > 0; j--) {
			for (i = dim1; i > 0; i--) {
				img[m] = image[k][j][i];
				m++;
			}
		}
	}


/*	Write the masked image */

	printf ("Writing masked image %s\n", img3);
	if ((fd_img = fopen (img3, "w")) == 0) {
		fprintf (stderr, "ERROR [ana3dcrop]: Unable to open %s\n", img3);
		return (ERROR);
	}
	if ((fwrite (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [ana3dcrop]: Error writing to: %s\n", img3);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr3, "w")) == 0) {
		fprintf (stderr, "ERROR [ana3dcrop]: Unable to open %s\n", hdr3);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [ana3dcrop]: Error writing to: %s\n", hdr3);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	free (img);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d18 1
d20 1
a20 1
static char     rcsid[] = "$Id: anamasklateral.c,v 1.2 1999/12/16 17:56:46 tom Exp tom $";
d78 1
a78 1
	fclose (fd_hdr);
d98 1
a98 1
	fclose (fd_img);
d142 1
a142 1
	fclose (fd_hdr);
d158 1
a158 1
	fclose (fd_img);
d208 1
a208 1
	fclose (fd_img);
d218 1
a218 1
	fclose (fd_hdr);
@


1.2
log
@new libs
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Id: anamasklateral.c,v 1.1 1999/11/12 18:59:09 tom Exp tom $";
d46 4
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d13 1
a13 1
static char     rcsid[] = "$Id: anamasklateral.c,v 1.1 1999/07/23 20:12:48 tom Exp $";
@
