head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	95.12.22.21.35.17;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.10.30.18.24.32;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@lint
@
text
@/*$Id: llist.h,v 1.1 1995/10/30 18:24:32 tom Exp tom $*/
/*$Log: llist.h,v $
 * Revision 1.1  1995/10/30  18:24:32  tom
 * Initial revision
 *
 * Revision 1.2  1994/03/03  20:54:17  ty7777
 * Replace id with header.
 *
 * Revision 1.1  1993/11/11  17:48:47  ty7777
 * Initial revision
 **/

#ifndef _LIST_INCLUDED
#define _LIST_INCLUDED

#ifndef lint
static char     rcsid_llist[] = "$Header: /home/npggw/tom/include/RCS/llist.h,v 1.1 1995/10/30 18:24:32 tom Exp tom $";

#endif

#include <package.h>

typedef void   *pointer;

typedef struct linked_list_node {
	pointer        *data;
	struct linked_list_node *previous;
	struct linked_list_node *next;
}               llnode;

typedef struct linked_list {
	int             size;
	llnode         *head;
	llnode         *tail;
	llnode         *cursor;
}              *llist;

/*
 * Function prototypes
 */
PUBLIC llist    llinit ( /* void */ );
PUBLIC int      lladdhead ( /* llist, pointer */ );
PUBLIC int      lladd ( /* llist, pointer */ );
PUBLIC int      lldelete ( /* llist */ );
PUBLIC int      llsize ( /* llist */ );
PUBLIC int      llhead ( /* llist */ );
PUBLIC int      lltail ( /* llist */ );
PUBLIC int      llnext ( /* llist */ );
PUBLIC int      llprevious ( /* llist */ );
PUBLIC pointer  llretrieve ( /* llist */ );

/*
 * User defined functions.
 */
void            (*llprint) ( /* llist */ );
int             (*llcmp) ( /* pointer, pointer */ );

#endif	/* _LIST_INCLUDED */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*$Id: llist.h,v 1.2 1994/03/03 20:54:17 ty7777 Exp $*/
d3 3
d16 2
a17 1
static char rcsid_llist [] = "$Header: /usr/local/include/petutil/RCS/llist.h,v 1.2 1994/03/03 20:54:17 ty7777 Exp $";
d19 1
a19 1
#include "package.h"
d21 1
a21 1
typedef void *pointer;
d23 14
a36 6
typedef struct linked_list_node 
{
	pointer			*data;
	struct linked_list_node	*previous;
	struct linked_list_node	*next;
} llnode;
d38 1
a38 9
typedef struct linked_list 
{
	int		size;
	llnode		*head;
	llnode		*tail;
	llnode		*cursor;
} *llist;
	
/* 
d41 10
a50 10
PUBLIC llist 	llinit (/* void */);
PUBLIC int 	lladdhead (/* llist, pointer */);
PUBLIC int 	lladd (/* llist, pointer */);
PUBLIC int 	lldelete (/* llist */);
PUBLIC int 	llsize (/* llist */);
PUBLIC int 	llhead (/* llist */);
PUBLIC int 	lltail (/* llist */);
PUBLIC int 	llnext (/* llist */);
PUBLIC int 	llprevious (/* llist */);
PUBLIC pointer 	llretrieve (/* llist */);
d52 1
a52 1
/* 
d55 2
a56 2
void 	(*llprint) (/* llist */);
int 	(*llcmp) (/* pointer, pointer */);
d58 1
a58 2
#endif _LIST_INCLUDED

@
