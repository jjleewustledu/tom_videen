head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.02.16.14.55.44;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.06.19.27.53;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.12.30.17.41.21;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Feb 2004
@
text
@/* $Log: fillimg.c,v $
 * Revision 1.2  2000/09/06  19:27:53  tom
 * strcpy filename
 *
 * Revision 1.1  1999/12/30  17:41:21  tom
 * Initial revision
 * */
/*	=========================================================================
 *	Module:			fillimg.c
 *	Author:			Tom Videen
 *	Description:	Fill a region in an image.
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: fillimg.c,v 1.2 2000/09/06 19:27:53 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>
#include <libnrimg.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	char           *imgname;		 /* input image filename */
	char           *outname;		 /* output image filename */
	long            dim1, dim2, dim3;	 /* dimensions of tensors */
	long            npixels = 0;
	long            i, j, k, pln;
	long            x, y, z;
	long            x0, y0, z0;
	long            p1, p2;
	long            x1, x2;
	long            y1, y2;
	long            z1, z2;
	long            xmin, xmax;
	long            ymin, ymax;
	long            zmin, zmax;
	float        ***image = NULL;
	float        ***mask = NULL;
	float           threshold;
	float           setval;
	int             more = 1;

/*
 *	Get command line arguments.
 */
	imgname = argv[1];
	outname = argv[2];
	threshold = atof (argv[3]);
	setval = atof (argv[4]);
	x0 = atoi (argv[5]);
	y0 = atoi (argv[6]);
	z0 = atoi (argv[7]);
	p1 = atoi (argv[8]);
	p2 = atoi (argv[9]);

	xmin = x0;
	xmax = x0;
	ymin = y0;
	ymax = y0;
	zmin = z0;
	zmax = z0;

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*
 *	Read image to edit
 */
	file = make_imgfile (imgname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [fillimg]: Cannot open %s\n", imgname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [fillimg]: Cannot get MainHeader from %s\n", imgname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	indx.pln = 1;
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [fillimg]: Cannot find %s frame 1-%d\n", imgname, -indx.frm);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [fillimg]: Cannot find %s frame %d\n", imgname, indx.frm);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [fillimg]: Cannot read file subheader in %s\n", imgname);
		return (ERROR);
	}
	dim1 = (long) file->sh->dim1;
	dim2 = (long) file->sh->dim2;
	dim3 = (long) file->sh->dim3;
	if ((image = readtensor (file, &indx)) == NULL) {
		fprintf (stderr, "ERROR [fillimg]: Cannot read %s\n", imgname);
		return (ERROR);
	}
	close_imgfile (file);

/*	Define VOI */

	if ((mask = f3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [fillimg]: Cannot malloc image for mask\n");
		return (NULL);
	}
	for (pln = p1; pln <= p2; pln++) {
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				mask[pln][j][i] = 0;
			}
		}
	}

	x1 = xmin;
	x2 = xmax;
	y1 = ymin;
	y2 = ymax;
	z1 = zmin;
	z2 = zmax;
	mask[z0][y0][x0] = 1;
	while (more > 0) {
		if (xmin > 1)
			x1 = xmin - 1;
		if (xmax < dim1)
			x2 = xmax + 1;
		if (ymin > 1)
			y1 = ymin - 1;
		if (ymax < dim2)
			y2 = ymax + 1;
		if (zmin > p1 && zmin > 1)
			z1 = zmin - 1;
		if (zmax < p2 && zmax < dim3)
			z2 = zmax + 1;
		for (pln = z1; pln <= z2; pln++) {
			more = 0;
			for (j = y1; j <= y2; j++) {
				for (i = x1; i <= x2; i++) {
					for (k = -1; k <= 1; k + 2) {
						x = i + k;
						y = j;
						z = pln;
						if (mask[z][y][x] == 0 && image[z][y][x] <= threshold)
							mask[z][y][x] = 1;
						more = 1;
						npixels++;
						if (x < xmin)
							xmin = x;
						if (x > xmax)
							xmax = x;
					}
					x = i;
					y = j + k;
					z = pln;
					if (mask[z][y][x] == 0 && image[z][y][x] <= threshold)
						mask[z][y][x] = 1;
					more = 1;
					npixels++;
					if (y < ymin)
						ymin = y;
					if (y > ymax)
						ymax = y;
				}
				x = i;
				y = j;
				z = pln + k;
				if (mask[z][y][x] == 0 && image[z][y][x] <= threshold)
					mask[z][y][x] = 1;
				more = 1;
				npixels++;
				if (z < zmin)
					zmin = z;
				if (z > zmax)
					zmax = z;
			}
		}
	}

	for (pln = p1; pln <= p2; pln++) {
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				if (mask[pln][j][i] > 0)
					image[pln][j][i] = setval;
			}
		}
	}


/*	Write the masked image */

	printf ("Writing image %s\n", outname);
	printf ("Pixels in VOI = %d\n", (int) npixels);
	close_imgfile (file);
	strcpy (file->name, outname);
	strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [fillimg]: Cannot open %s\n", outname);
		return (ERROR);
	}
	if (put_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [fillimg]: Cannot write %s\n", outname);
		return (ERROR);
	}
	if (writetensor (file, &indx, image) == ERROR) {
		fprintf (stderr, "ERROR [fillimg]: Cannot write %s\n", outname);
		return (ERROR);
	}
	free_imgfile (file);
	return (OK);
}
@


1.2
log
@strcpy filename
@
text
@d2 3
d14 1
d16 1
a16 1
static char     rcsid[] = "$Id: fillimg.c,v 1.1 1999/12/30 17:41:21 tom Exp tom $";
d28 1
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d12 1
a12 1
static char     rcsid[] = "$Id: fillimg.c,v 2.8 1997/05/20 13:20:52 tom Exp $";
d203 1
a203 2
	free (file->name);
	file->name = outname;
@
