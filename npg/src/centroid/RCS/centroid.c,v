head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.02.13.19.58.08;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.28.21.13.38;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Feb 2004
@
text
@/*	$Log: centroid.c,v $
 * Revision 1.1  2003/07/28  21:13:38  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			centroid.c
 *	Date:			Jul 2003
 *	Author:			Tom Videen
 *	Description:	Determine center-of-mass of all pixels above threshold in an
 *					Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/centroid/RCS/centroid.c,v 1.1 2003/07/28 21:13:38 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <image.h>
#include <nrutil.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			centroid
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;
	FILE           *fd_hdr;
	FILE           *fd_img;
	char           *img1, *hdr1;
	long            dim1, dim2, dim3;
	float           vox1, vox2, vox3;
	int             min;
	short          *srow;
	float        ***img;
	int             i, j, k;
	long            n, xsum, ysum, zsum;
	float           x, y, z;
	float           x0, y0, z0;

	if (argc != 5) {
		fprintf (stderr, "Usage: centroid hdr1 img1 min z-origin\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	min = atoi (argv[3]);
	z0 = atof (argv[4]);

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [centroid]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [centroid]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [centroid]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [centroid]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [centroid]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	vox1 = hdr.dime.pixdim[1];
	vox2 = hdr.dime.pixdim[2];
	vox3 = hdr.dime.pixdim[3];
	(void) fclose (fd_hdr);

	x0 = 0.5 * (float) (dim1 + 1);
	y0 = 0.5 * (float) (dim2 + 1);

/*
 *	Read the img and flip X, Y & Z from Analyze convention
 */

	if ((fd_img = fopen (img1, "r")) == NULL) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((img = f3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot malloc img\n");
		return (ERROR);
	}
	if (NULL == (srow = (short *) calloc (dim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [analyze2img]: Cannot malloc memory for row\n");
		return (ERROR);
	}
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			if ((fread (srow, sizeof (short), dim1, fd_img)) != dim1) {
				fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", img1);
				return (ERROR);
			}
			for (k = 1; k <= dim1; k++) {
				if (srow[k - 1] == -32768)
					img[i][j][dim1 - (k - 1)] = 0.;
				else
					img[i][j][dim1 - (k - 1)] = (float) srow[k - 1];
			}
		}
	}
	(void) fclose (fd_img);

	n = 0;
	xsum = 0;
	ysum = 0;
	zsum = 0;
	for (i = 1; i <= dim3; i++) {
		for (j = 1; j <= dim2; j++) {
			for (k = 1; k <= dim1; k++) {
				if (img[i][j][k] >= min) {
					n++;
					xsum += k;
					ysum += j;
					zsum += i;
				}
			}
		}
	}

	fprintf (stdout, "Volume = %ld voxels\n", n);
	x = (float) xsum / (float) n;
	y = (float) ysum / (float) n;
	z = (float) zsum / (float) n;
	fprintf (stdout, "Voxel Center   = %5.1f %5.1f %5.1f  vox", x, y, z);
	fprintf (stdout, "   (origin = %5.1f %5.1f %5.1f)\n", x0, y0, z0);
	x = (x - x0) * vox1;
	y = (y0 - y) * vox2;
	z = (z0 - z) * vox3;
	fprintf (stdout, "Center of Mass = %5.1f %5.1f %5.1f  mm", x, y, z);
	fprintf (stdout, "    (positive = right/anterior/superior)\n");
	free (img);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/centroid/RCS/centroid.c,v 1.3 2001/02/06 15:31:58 tom Exp $";
@
