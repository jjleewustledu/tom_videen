head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2010.05.21.15.53.44;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.21.15.48.06;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "dtypes.h"
enum {MAX_LEN = 100};

IFH_INFO        readifh (char *name, int v)
{

	IFH_INFO        ans;

	char            ifh_line[MAX_LEN];
	char            line_buff[5][MAX_LEN];
	char            matrix_size[] = "matrix size";
	char            scale[] = "scaling factor";
	char            mm[] = "mmppix";
	char            cen[] = "center";
	char            reg[] = "region names";
	int             i = 0;
	int             j = 0;
	int             k = 0;
	int             w = 0;
	int             r = 0;
	I3              a1;
	int             a2;
	int             f1;
	F3              a3, a4, a5;
	FILE           *ifh;

	char            filename[MAX_LEN];
	strcpy (filename, name);

	if (strstr (filename, ".4dfp") == NULL) {
		strcat (filename, ".4dfp.img");
	} else {
		if (strstr (filename, ".4dfp.img") == NULL)
			strcat (filename, ".img");
	}

	if (filename == NULL)
		exit (EXIT_FAILURE);
	strcpy (ans.name, filename);
	f1 = strlen (filename);
	ans.name[f1 - 2] = 'f';
	ans.name[f1 - 1] = 'h';

	if ((ifh = fopen (ans.name, "r")) == NULL) {
		perror (ans.name);
		exit (EXIT_FAILURE);
	}
	while (fgets (ifh_line, MAX_LEN, ifh) != NULL) {
		if (strstr (ifh_line, matrix_size) != NULL) {
			if (i == 0)
				(void) sscanf (ifh_line, "%s%s%s%s%d", line_buff[0], line_buff[1], line_buff[2], line_buff[3], &a1.x);
			else if (i == 1)
				(void) sscanf (ifh_line, "%s%s%s%s%d", line_buff[0], line_buff[1], line_buff[2], line_buff[3], &a1.y);
			else if (i == 2)
				(void) sscanf (ifh_line, "%s%s%s%s%d", line_buff[0], line_buff[1], line_buff[2], line_buff[3], &a1.z);
			else if (i == 3)
				(void) sscanf (ifh_line, "%s%s%s%s%d", line_buff[0], line_buff[1], line_buff[2], line_buff[3], &a2);
			i++;
		}
		if (strstr (ifh_line, scale) != NULL) {
			if (j == 0)
				(void) sscanf (ifh_line, "%s%s%s%s%s%f", line_buff[0], line_buff[1], line_buff[2], line_buff[3], line_buff[4], &a3.x);
			else if (j == 1)
				(void) sscanf (ifh_line, "%s%s%s%s%s%f", line_buff[0], line_buff[1], line_buff[2], line_buff[3], line_buff[4], &a3.y);
			else if (j == 2)
				(void) sscanf (ifh_line, "%s%s%s%s%s%f", line_buff[0], line_buff[1], line_buff[2], line_buff[3], line_buff[4], &a3.z);
			j++;
		}
		if (strstr (ifh_line, mm) != NULL && k == 0) {
			(void) sscanf (ifh_line, "%s%s%f%f%f", line_buff[0], line_buff[1], &a4.x, &a4.y, &a4.z);
			k = 1;
		}
		if (strstr (ifh_line, cen) != NULL && w == 0) {
			(void) sscanf (ifh_line, "%s%s", line_buff[0], line_buff[1]);
			if (strstr (line_buff[1], ":=") != NULL) {
				(void) sscanf (ifh_line, "%s%s%f%f%f", line_buff[0], line_buff[1], &a5.x, &a5.y, &a5.z);
				w = 1;
			}
		}
		if (strstr (ifh_line, reg) != NULL && r == 0) {
			(void) sscanf (ifh_line, "%s%s%s%s%s", line_buff[0], line_buff[1], line_buff[2], line_buff[3], &ans.region);
			r = 1;
		}
	}

	(void) fclose (ifh);

	if (i == 0) {
		printf ("ERROR: did not find dimension size info in ifh file\n");
		exit (EXIT_FAILURE);
	}
	if (j == 0) {
		printf ("ERROR: did not find dimension scale info in ifh file\n");
		exit (EXIT_FAILURE);
	}
	if (k == 0)
		a4.x = a4.y = a4.z = 0;
	if (w == 0)
		a5.x = a5.y = a5.z = 0;
	if (r == 0)
		strcpy (ans.region, "none");

	if (v) {
		printf ("results of readifhfile.c:\n");
		printf ("image file name = %s\n", filename);
		printf ("ifh file name   = %s\n", ans.name);
		printf ("dimension sizes = %2d %2d %2d\n", a1.x, a1.y, a1.z);
		printf ("# of frames     = %2d\n", a2);
		printf ("dimension scale = %f %f %f\n", a3.x, a3.y, a3.z);
		printf ("mmppix          = %f %f %f\n", a4.x, a4.y, a4.z);
		printf ("center          = %f %f %f\n", a5.x, a5.y, a5.z);
		if (r)
			printf ("regions names   = %s\n", ans.region);
	}
	ans.size = a1;
	ans.f = a2;
	ans.scale = a3;
	ans.mmpp = a4;
	ans.cent = a5;

	return ans;
}

int             checkifh (IFH_INFO * ifh1, IFH_INFO * ifh2, int simple)
{
	int             ans = 0;

	if (ifh1->size.x != ifh2->size.x || ifh1->size.y != ifh2->size.y || ifh1->size.z != ifh2->size.z)
		ans = 1;
	if (ifh1->scale.x != ifh2->scale.x || ifh1->scale.y != ifh2->scale.y || ifh1->scale.z != ifh2->scale.z)
		ans = 1;
	if (simple == 0) {
		if (ifh1->mmpp.x != ifh2->mmpp.x || ifh1->mmpp.y != ifh2->mmpp.y || ifh1->mmpp.z != ifh2->mmpp.z)
			ans = 1;
		if (ifh1->cent.x != ifh2->cent.x || ifh1->cent.y != ifh2->cent.y || ifh1->cent.z != ifh2->cent.z)
			ans = 1;
		if (ifh1->f != ifh2->f)
			ans = 1;
	}
	return ans;
}

void            writeifh (char *filename, IFH_INFO * info, char *program, int v)
{

	FILE           *ifh;
	char            ifh_name[MAX_LEN];
	char           *pt;
	int             f1;

	pt = strstr (filename, ".4dfp");
	if (pt == NULL) {
		pt = strcat (filename, ".4dfp.img");
	} else {
		if ((pt = strstr (filename, ".4dfp.img")) == NULL)
			pt = strcat (filename, ".img");
	}

	strcpy (ifh_name, filename);
	f1 = strlen (filename);
	ifh_name[f1 - 2] = 'f';
	ifh_name[f1 - 1] = 'h';

	if ((ifh = fopen (ifh_name, "w")) == NULL) {
		perror (ifh_name);
		exit (EXIT_FAILURE);
	}
	fprintf (ifh, "INTERFILE                       :=\n");
	fprintf (ifh, "version of keys                 := 3.3\n");
	fprintf (ifh, "name of data file               := %s\n", filename);
	fprintf (ifh, "generating program              := %s\n", program);
	fprintf (ifh, "number format                   := float\n");
	fprintf (ifh, "number of bytes per pixel       := 4\n");
	fprintf (ifh, "orientation                     := 2\n");
	fprintf (ifh, "number of dimensions            := 4\n");
	fprintf (ifh, "matrix size [1]                 := %d\n", info->size.x);
	fprintf (ifh, "matrix size [2]                 := %d\n", info->size.y);
	fprintf (ifh, "matrix size [3]                 := %d\n", info->size.z);
	fprintf (ifh, "matrix size [4]                 := %d\n", info->f);
	fprintf (ifh, "scaling factor (mm/pixel) [1]   := %f\n", info->scale.x);
	fprintf (ifh, "scaling factor (mm/pixel) [2]   := %f\n", info->scale.y);
	fprintf (ifh, "scaling factor (mm/pixel) [3]   := %f\n", info->scale.z);
	if (info->mmpp.x != 0 && info->mmpp.y != 0 && info->mmpp.z != 0)
		fprintf (ifh, "mmppix                          := %f %f %f\n", info->mmpp.x, info->mmpp.y, info->mmpp.z);
	if (info->cent.x != 0 && info->cent.y != 0 && info->cent.z != 0)
		fprintf (ifh, "center                          := %f %f %f\n", info->cent.x, info->cent.y, info->cent.z);
	if (strcmp (info->region, "none") != 0)
		fprintf (ifh, "region names                    := 0 %s\n", info->region);

	(void) fclose (ifh);

	if (v) {
		printf ("data written to %s\n", ifh_name);
		printf ("INTERFILE                       :=\n");
		printf ("version of keys                 := 3.3\n");
		printf ("name of data file               := %s\n", filename);
		printf ("generating program              := %s\n", program);
		printf ("number format                   := float\n");
		printf ("number of bytes per pixel       := 4\n");
		printf ("orientation                     := 2\n");
		printf ("number of dimensions            := 4\n");
		printf ("matrix size [1]                 := %d\n", info->size.x);
		printf ("matrix size [2]                 := %d\n", info->size.y);
		printf ("matrix size [3]                 := %d\n", info->size.z);
		printf ("matrix size [4]                 := %d\n", info->f);
		printf ("scaling factor (mm/pixel) [1]   := %f\n", info->scale.x);
		printf ("scaling factor (mm/pixel) [2]   := %f\n", info->scale.y);
		printf ("scaling factor (mm/pixel) [3]   := %f\n", info->scale.z);
		if (info->mmpp.x != 0 && info->mmpp.y != 0 && info->mmpp.z != 0)
			printf ("mmppix                          := %f %f %f\n", info->mmpp.x, info->mmpp.y, info->mmpp.z);
		if (info->cent.x != 0 && info->cent.y != 0 && info->cent.z != 0)
			printf ("center                          := %f %f %f\n", info->cent.x, info->cent.y, info->cent.z);
		if (strcmp (info->region, "none") != 0)
			printf ("region names                    := 0 %s\n", info->region);
	}
}
@


1.2
log
@*** empty log message ***
@
text
@@
