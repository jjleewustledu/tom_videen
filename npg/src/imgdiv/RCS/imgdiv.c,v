head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2008.08.21.18.08.55;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.21.18.07.20;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.16.17.26.11;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.26.22.26.18;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.14.18.06.42;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	97.01.16.19.51.11;	author tom;	state Exp;
branches;
next	;


desc
@@


1.6
log
@snprintf
int main
@
text
@/* $Log: imgdiv.c,v $
 * Revision 1.5  2008/08/21  18:07:20  tom
 * *** empty log message ***
 *
 * Revision 1.4  2004/02/16  17:26:11  tom
 * Feb 2004
 *
 * Revision 1.3  2002/11/26  22:26:18  tom
 * *** empty log message ***
 *
 * Revision 1.2  2000/04/14  18:06:42  tom
 * elim copyright
 *
 * Revision 1.1  1997/01/16  19:51:11  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			imgdiv.c
 *	Date:			Jan 1997
 *	Author:			Tom Videen
 *	Description:
 *		Divide 1 PET image by another (PETT VI or ECAT) with scale factors.
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/imgdiv/RCS/imgdiv.c,v 1.5 2008/08/21 18:07:20 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libnrimg.h>
#include <image.h>
#include <libimage.h>
#include <imgutil.h>
#include <nrutil.h>

int main (argc, argv)
	int             argc;
	char           *argv[];
{
	ImageFile      *file1;			 /* input image file structure */
	Index           indx;			 /* frame, plane, gate, data, bed */
	FILE           *recfp;

	char            program[MAXFNAME];
	char            version[MAXFNAME];
	char            runstamp[40];
	char           *scan1;
	char           *scan2;
	char           *outfile;
	char           *recfile;
	int             pdim[3];
	int             i, j, k;
	int             n;
	float           f1, f2;
	float        ***img1;
	float        ***img2;
	float        ***sumimg;

/*
 *	Read command line arguments and initialize filenames.
 */

	if (argc != 14) {
		printf ("Usage: imgdiv img1 f1 img2 f2 out now uid\n");
		return (ERROR);
	}
	scan1 = argv[1];
	f1 = atof (argv[2]);
	scan2 = argv[3];
	f2 = atof (argv[4]);
	outfile = argv[5];
	recfile = argv[6];
	n = 7;
	(void) snprintf (runstamp, 39, "%s %s %s %s %s %s", argv[n], argv[n + 1], argv[n + 2], argv[n + 4], argv[n + 5], argv[n + 6]);

	recfp = fopen (recfile, "a");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [imgdiv]: cannot open %s\n", recfile);
		return (ERROR);
	}
	(void) sscanf (rcsid, "%s %s", program, version);
	(void) strcat (program, " ");
	(void) strcat (program, version);
	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	file1 = make_imgfile (scan1);
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [imgdiv]: Cannot open %s\n", scan1);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [imgdiv]: Cannot get MainHeader from %s\n", scan1);
		return (ERROR);
	}
	if (existimgfrm (file1, &indx) == ERROR) {
		indx.frm = 2;
		if (existimgfrm (file1, &indx) == ERROR) {
			fprintf (stderr, "ERROR [imgdiv]: Cannot read scan %s frame %d\n", scan1, indx.frm);
			return (ERROR);
		}
	}
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [imgdiv]: Cannot read file subheader in %s\n", scan1);
		return (ERROR);
	}
	pdim[0] = file1->sh->dim1;
	pdim[1] = file1->sh->dim2;
	pdim[2] = file1->sh->dim3;

	if ((img1 = rdtensor (file1, &indx, pdim)) == NULL) {
		fprintf (stderr, "ERROR [imgdiv]: Cannot read %s\n", scan1);
		return (ERROR);
	}
	recout (recfp, scan1);
	close_imgfile (file1);

	file1->name = scan2;
	indx.frm = 1;
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [imgdiv]: Cannot open %s\n", scan2);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [imgdiv]: Cannot get MainHeader from %s\n", scan2);
		return (ERROR);
	}
	if (existimgfrm (file1, &indx) == ERROR) {
		indx.frm = 2;
		if (existimgfrm (file1, &indx) == ERROR) {
			fprintf (stderr, "ERROR [imgdiv]: Cannot read scan %s frame %d\n", scan2, indx.frm);
			return (ERROR);
		}
	}
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [imgdiv]: Cannot read file subheader in %s\n", scan2);
		return (ERROR);
	}
	if ((img2 = rdtensor (file1, &indx, pdim)) == NULL) {
		fprintf (stderr, "ERROR [imgdiv] Cannot read %s\n", scan2);
		return (ERROR);
	}
	recout (recfp, scan2);
	close_imgfile (file1);

	if ((sumimg = f3tensor (1, pdim[2], 1, pdim[1], 1, pdim[0])) == NULL) {
		fprintf (stderr, "ERROR [imgdiv]: Cannot malloc summed image\n");
		return (ERROR);
	}
	printf ("Computing (%f * %s) / (%f * %s)\n", f1, scan1, f2, scan2);
	for (i = 1; i <= pdim[2]; i++)
		for (j = 1; j <= pdim[1]; j++)
			for (k = 1; k <= pdim[0]; k++)
				if (img2[i][j][k] != 0)
					sumimg[i][j][k] = (f1 * (double) img1[i][j][k]) / (f2 * (double) img2[i][j][k]);
				else
					sumimg[i][j][k] = 0;

	file1->name = outfile;
	strcpy (file1->mode, "w");
	indx.frm = 1;
	printf ("Saving as %s\n", outfile);
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [sumimg]: Cannot open %s\n", outfile);
		return (ERROR);
	}
	(void) save_rcs (file1, rcsid, runstamp);
	file1->mh->nframe = indx.frm;
	file1->mh->orientation = 0;
	if (put_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [imgdiv] writing %s\n", outfile);
		return (ERROR);
	}
	if (writetensor (file1, &indx, sumimg) == ERROR) {
		fprintf (stderr, "ERROR [imgdiv] writing %s\n", outfile);
		return (ERROR);
	}
	close_imgfile (file1);
	free_f3tensor (img1, 1, pdim[2], 1, pdim[1], 1, pdim[0]);
	free_f3tensor (img2, 1, pdim[2], 1, pdim[1], 1, pdim[0]);
	free_f3tensor (sumimg, 1, pdim[2], 1, pdim[1], 1, pdim[0]);
	free_imgfile (file1);
	(void) fclose (recfp);
	return (0);
}
@


1.5
log
@*** empty log message ***
@
text
@d2 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/imgdiv/RCS/imgdiv.c,v 1.4 2004/02/16 17:26:11 tom Exp tom $";
d36 1
a36 1
main (argc, argv)
d74 1
a74 1
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[n], argv[n + 1], argv[n + 2], argv[n + 4], argv[n + 5], argv[n + 6]);
@


1.4
log
@Feb 2004
@
text
@d2 3
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/imgdiv/RCS/imgdiv.c,v 1.3 2002/11/26 22:26:18 tom Exp tom $";
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d13 1
a13 1
 *	Date:			Jan-97
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/imgdiv/RCS/imgdiv.c,v 1.2 2000/04/14 18:06:42 tom Exp tom $";
d68 1
a68 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[n], argv[n + 1], argv[n + 2], argv[n + 4], argv[n + 5], argv[n + 6]);
d75 3
a77 3
	sscanf (rcsid, "%s %s", program, version);
	strcat (program, " ");
	strcat (program, version);
d108 1
a108 1
	if ((img1 = rdtensor (scan1, &indx, pdim)) == NULL) {
d136 1
a136 1
	if ((img2 = rdtensor (scan2, &indx, pdim)) == NULL) {
d162 1
a162 1
		exit (ERROR);
d164 1
a164 1
	save_rcs (file1, rcsid, runstamp);
d169 1
a169 1
		exit (ERROR);
d173 1
a173 1
		exit (ERROR);
d180 1
a180 1
	fclose (recfp);
@


1.2
log
@elim copyright
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/imgdiv/RCS/imgdiv.c,v 1.1 1997/01/16 19:51:11 tom Exp tom $";
a20 1
#include <math.h>
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/imgdiv/RCS/imgdiv.c,v 2.20 1997/01/08 22:47:32 tom Exp $";
a51 2
	printf ("Copyright 1997, Washington University\n");
	printf ("All rights reserved. Unauthorized reproduction prohibited.\n");
@
