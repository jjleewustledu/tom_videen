head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2004.02.17.14.50.47;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.06.19.40.47;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.18.15.41.28;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.17.19.05.28;	author tom;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Feb 2004
@
text
@/* $Id: ohratio.c,v 1.3 2000/09/06 19:40:47 tom Exp tom $ */
/* $Log: ohratio.c,v $
 * Revision 1.3  2000/09/06  19:40:47  tom
 * strcpy filename
 *
 * Revision 1.2  2000/08/18  15:41:28  tom
 * *** empty log message ***
 *
 * Revision 1.1  2000/08/17  19:05:28  tom
 * Initial revision
 * */
/*	=========================================================================
 *	Module:			ohratio.c
 *	Author:			Tom Videen
 *	Description:	Compute ratio image with specified mean value within mask.
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: ohratio.c,v 1.3 2000/09/06 19:40:47 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <imgutil.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <myvalues.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	char           *ooname;
	char           *honame;
	char           *mskname;
	char           *ohname;
	double          ratio;
	float        ***mskimg = NULL;
	float        ***hoimg = NULL;
	float        ***ooimg = NULL;
	double          oosum, hosum;
	double          oomean, homean;
	double          scaler;
	long            npixels;
	long            dim[3];
	int             i, j, pln;

	ooname = argv[1];
	honame = argv[2];
	ohname = argv[3];
	mskname = argv[4];
	ratio = atof (argv[5]);

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/* Read Mask */

	file = make_imgfile (mskname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [ohratio]: Cannot open %s\n", mskname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [ohratio]: Cannot get MainHeader from %s\n", mskname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [ohratio]: cannot find %s frame 1, 2 or 3\n", mskname);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [ohratio]: Cannot read file subheader in %s\n", mskname);
		return (ERROR);
	}
	dim[0] = (long) file->sh->dim1;
	dim[1] = (long) file->sh->dim2;
	dim[2] = (long) file->sh->dim3;
	if ((mskimg = readtensor (file, &indx)) == NULL)
		return (ERROR);
	close_imgfile (file);
	free_imgfile (file);

/* Read HO */

	file = make_imgfile (honame);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [ohratio]: Cannot open %s\n", honame);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [ohratio]: Cannot get MainHeader from %s\n", honame);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [ohratio]: cannot find %s frame 1, 2 or 3\n", honame);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [ohratio]: Cannot read file subheader in %s\n", honame);
		return (ERROR);
	}
	dim[0] = (long) file->sh->dim1;
	dim[1] = (long) file->sh->dim2;
	dim[2] = (long) file->sh->dim3;
	if ((hoimg = readtensor (file, &indx)) == NULL)
		return (ERROR);
	close_imgfile (file);
	free_imgfile (file);

/* Read OO */

	indx.frm = 1;
	indx.pln = 1;
	file = make_imgfile (ooname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [ohratio]: Cannot open %s\n", ooname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [ohratio]: Cannot get MainHeader from %s\n", ooname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [ohratio]: cannot find %s frame 1, 2 or 3\n", ooname);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [ohratio]: Cannot read file subheader in %s\n", ooname);
		return (ERROR);
	}
	dim[0] = (long) file->sh->dim1;
	dim[1] = (long) file->sh->dim2;
	dim[2] = (long) file->sh->dim3;
	if ((ooimg = readtensor (file, &indx)) == NULL)
		return (ERROR);
	close_imgfile (file);

/* Compute mean within mask for OO and HO */

	oosum = 0.0;
	hosum = 0.0;
	npixels = 0;
	for (pln = 1; pln <= dim[2]; pln++) {
		for (j = 1; j <= dim[1]; j++) {
			for (i = 1; i <= dim[0]; i++) {
				if (mskimg[pln][j][i] > 0.) {
					oosum += ooimg[pln][j][i];
					hosum += hoimg[pln][j][i];
					npixels++;
				}
			}
		}
	}
	oomean = oosum / npixels;
	homean = hosum / npixels;
	scaler = ratio * homean / oomean;

	fprintf (stdout, "Mean OO =%14.4f\n", oomean);
	fprintf (stdout, "Mean HO =%14.4f\n", homean);
	fprintf (stdout, "Scaler  =%14.4f\n", scaler);

	for (pln = 1; pln <= dim[2]; pln++) {
		for (j = 1; j <= dim[1]; j++) {
			for (i = 1; i <= dim[0]; i++) {
				if (mskimg[pln][j][i] > 0 && hoimg[pln][j][i] > 0)
					ooimg[pln][j][i] = scaler * ooimg[pln][j][i] / hoimg[pln][j][i];
				else
					ooimg[pln][j][i] = 0;
			}
		}
	}

	indx.frm = 1;
	(void) strcpy (file->name, ohname);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [ohratio]: Could not open %s\n", ohname);
		return (ERROR);
	}
	if (put_mh (file) == ERROR)
		return (ERROR);
	if (writetensor (file, &indx, ooimg) == ERROR)
		return (ERROR);
	free_f3tensor (mskimg, 1, dim[2], 1, dim[1], 1, dim[0]);
	free_f3tensor (ooimg, 1, dim[2], 1, dim[1], 1, dim[0]);
	free_f3tensor (hoimg, 1, dim[2], 1, dim[1], 1, dim[0]);
	free_imgfile (file);
	return (OK);
}
@


1.3
log
@strcpy filename
@
text
@d1 1
a1 1
/* $Id: ohratio.c,v 1.2 2000/08/18 15:41:28 tom Exp tom $ */
d3 3
d18 1
d20 1
a20 1
static char     rcsid[] = "$Id: ohratio.c,v 1.2 2000/08/18 15:41:28 tom Exp tom $";
d34 1
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* $Id: ohratio.c,v 1.1 2000/08/17 19:05:28 tom Exp tom $ */
d3 3
d16 1
a16 1
static char     rcsid[] = "$Id: ohratio.c,v 1.1 2000/08/17 19:05:28 tom Exp tom $";
d183 1
a183 2
	free (file->name);
	file->name = ohname;
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/* $Id$ */
/* $Log$ */
d13 1
a13 1
static char     rcsid[] = "$Id: imgmean.c,v 2.19 1999/10/12 13:25:42 tom Exp $";
d36 1
a36 1
	float           ratio;
d40 3
a42 3
	float           oosum, hosum;
	float           oomean, homean;
	float           scaler;
d164 3
a166 3
	fprintf (stdout, "Mean OO = %f\n", oomean);
	fprintf (stdout, "Mean HO = %f\n", homean);
	fprintf (stdout, "Scaler = %f\n", scaler);
@
