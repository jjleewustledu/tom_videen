head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2004.02.20.15.45.16;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.11.16.05.37;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.10.17.27.32;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	99.04.09.13.25.10;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	98.04.02.18.56.00;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	98.01.28.19.07.38;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.01.22.18.39.58;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.01.22.18.12.38;	author tom;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Feb 2004
@
text
@/*$Log: tse2analyze.c,v $
 * Revision 1.7  2002/01/11  16:05:37  tom
 * *** empty log message ***
 *
 * Revision 1.6  2002/01/10  17:27:32  tom
 * *** empty log message ***
 *
 * Revision 1.5  1999/04/09  13:25:10  tom
 * change declaration of order
 *
 * Revision 1.4  1998/04/02  18:56:00  tom
 * permit reversing order of sequences
 *
 * Revision 1.3  1998/01/28  19:07:38  tom
 * *** empty log message ***
 *
 * Revision 1.2  1998/01/22  18:39:58  tom
 * clean up ifh
 *
 * Revision 1.1  1998/01/22  18:12:38  tom
 * Initial revision
 * */
/*  ===============================================================================
 *  Module:         tse2analyze.c
 *  Date:           Jan 1998
 *  Author:         Tom Videen
 *  Description:    Transform Siemens MRI images into Analyze format.
 *      Output images will be displayed by Analyze with left brain on the left
 *      and with the lower slices first.  This allows the 3D volume rendered
 *      brains to appear upright.
 *		An Interfile Format header file is created.
 *	Notes:
 *		Checked for proper orientation for View_LtoR (4) ONLY!
 *  ===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/tse2analyze/RCS/tse2analyze.c,v 1.7 2002/01/11 16:05:37 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <matrixlib.h>
#include <image.h>
#include <lib3_file_transform.h>		 /* Numaris 3 User's Library */
#include <ANALYZE.h>				 /* dsr */

#define U_LONG unsigned long
#define U_SHORT unsigned short
#define BytesPerPixelShort 2
#define BytesPerPixelLong 4
#define U3_isStatusError(s,e) (((s)^(e)) == 0)
#define MAXSTR 256
#define PERMS  0666
#define TRANSVERSE '\000'
#define CORONAL    '\001'
#define SAGITTAL   '\002'

/*  ----------------------------
 *  Function:   tse2analyze
 *  ----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	FILE           *FileInp_p;		 /* input file pointer */
	char            InFile[60];		 /* input file name */
	long            Status;			 /* shows an actual status */
	U3_header_type_t HeadType;
	U3_data_type_t  DataType;
	U3_size_type_t  DataSize;
	header_t       *HeadBuffer;		 /* header buffer */
	U_SHORT        *DataBuffer;		 /* pixel data buffer */
	long unsigned   NumPixels_ul, NumRows_ul, NumColumns_ul, StartOffset_ul;

	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* output ANALYZE image  */
	FILE           *fd_if;			 /* file for Interfile Format header */
	struct dsr      hdr;			 /* header for ANALYZE */
	char           *root1, *root2;
	char           *ptr;
	char            ANALYZE_hdr[MAXSTR];	 /* output Analyze header filename */
	char            ANALYZE_img[MAXSTR];	 /* output Analyze image filename */
	char            IF_hdr[MAXSTR];		 /* output Interfile Format header filename */
	char            view[6][10];
	char            num[12];
	char            version[5];
	char            program_date[12];
	char            study_date[12];
	char            institution[MAXSTR];
	char            model[MAXSTR];
	char            subject_id[MAXSTR];
	char            ParameterFileName[MAXSTR];
	char            SequenceFileName[MAXSTR];
	char            SequenceDescription[MAXSTR];
	char           *order;

	int             orientation;
	int             first1, last1;
	int             first2, last2;
	short           datum;
	int             global_max;		 /* global maximum */
	int             global_min;		 /* global minimum */
	int             slc;
	int             count;
	int             inc;
	int             i, j, k, n;

	short        ***img;			 /* output Analyze image */
	short           num_slices;		 /* number of slices or frames in MRI */
	short           xdim = 0;		 /* image dimensions */
	short           ydim = 0;
	short           zdim = 0;
	float           xpix = 0;		 /* pixel sizes (mm) */
	float           ypix = 0;
	float           zpix = 0;
	int             bitsperpix = 0;

	strcpy (view[1], "View_FEET");
	strcpy (view[2], "View_HEAD");
	strcpy (view[3], "View_AtoP");
	strcpy (view[4], "View_LtoR");
	strcpy (view[5], "View_PtoA");
	strcpy (view[6], "View_RtoL");
	strcpy (version, "    ");
	strcpy (program_date, "          ");
	ptr = strstr (rcsid, "v ");
	if (ptr != NULL) {
		ptr += 2;
		strncpy (version, ptr, 4);
		ptr = strstr (ptr, " ");
		if (ptr != NULL) {
			ptr++;
			strncpy (program_date, ptr, 10);
			ptr = strchr (program_date, '/');
			if (ptr != NULL) 
				*ptr = ':';
			ptr = strchr (program_date, '/');
			if (ptr != NULL) 
				*ptr = ':';
		}
	}

/*
 *  Get command line arguments and initialize filenames:
 *  ---------------------------------------------------
 */

	if (argc != 8) {
		fprintf (stderr, "Usage: tse2analyze <root1> <first1> <last1> <root2> <first2> <last2> <output_root>\n");
		return (ERROR);
	}
	root1 = argv[1];
	first1 = atoi (argv[2]);
	last1 = atoi (argv[3]);
	root2 = argv[4];
	first2 = atoi (argv[5]);
	last2 = atoi (argv[6]);
	if (first1 < first2)
		num_slices = last2 - first1 + 1;
	else
		num_slices = last1 - first2 + 1;
	strcpy (ANALYZE_img, argv[7]);
	strcat (ANALYZE_img, ".img");
	strcpy (ANALYZE_hdr, argv[7]);
	strcat (ANALYZE_hdr, ".hdr");
	strcpy (IF_hdr, argv[7]);
	strcat (IF_hdr, ".ifh");

	if ((fd_hdr = fopen (ANALYZE_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [tse2analyze]: creating Analyze hdr %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if ((fd_img = fopen (ANALYZE_img, "w")) == 0) {
		fprintf (stderr, "ERROR [tse2analyze]: creating Analyze img %s\n", ANALYZE_img);
		return (ERROR);
	}
	if ((fd_if = fopen (IF_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [tse2analyze]: creating Interfile hdr %s\n", IF_hdr);
		return (ERROR);
	}
	global_max = 0;
	global_min = 32000;
	order = (char *) calloc (4, sizeof (char));
	if (order == NULL) return (ERROR);

/*	Loop for root1 images */

	count = 0;
	inc = 0;
	for (slc = first1; slc <= last1; slc++) {
		count += 1;
		strcpy (InFile, root1);
		sprintf (num, "%d", slc);
		strcat (InFile, num);
		strcat (InFile, ".ima");

/* open file and check for success */

		Status = U3Open (&FileInp_p, InFile, "r");
		if (Status == 0) {
			fprintf (stdout, "Reading %s ", InFile);
		} else if (U3_isStatusError (Status, U3_NO_PERMISSION)) {
			fprintf (stderr, "ERROR [tse2analyze]: no read premission on %s\n", InFile);
			return (ERROR);
		} else if (U3_isStatusError (Status, U3_INVLD_FILE_PATH)) {
			fprintf (stderr, "ERROR [tse2analyze]: invalid path for %s\n", InFile);
			return (ERROR);
		} else if (U3_isStatusError (Status, U3_UNKNOWN_HEADER)) {
			fprintf (stderr, "ERROR [tse2analyze]: invalid image for %s\n", InFile);
			return (ERROR);
		} else
			return (ERROR);

/* determine header type */

		Status = U3GetHeaderType (FileInp_p, &HeadType);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tse2analyze]: unknown type for %s\n", InFile);
			return (ERROR);
		}
		switch (HeadType) {
		case U3_internal_head_type:
			fprintf (stdout, " (Numaris 3 format");
			break;

		case U3_nema_head_type:
			fprintf (stdout, " (ACR-NEMA format");
			break;

		case U3_numaris1_head_type:
			fprintf (stdout, " (Numaris 1 format");
			break;

		case U3_numaris2_head_type:
			fprintf (stdout, " (Numaris 2 format");
			break;

		default:
			fprintf (stderr, "ERROR [tse2analyze]: unknown format for %s\n", InFile);
			return (ERROR);
		}

/* check data type and data size */

		Status = U3GetDataType (FileInp_p, &DataType, &DataSize);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tse2analyze]: unknown data type for %s\n", InFile);
			return (ERROR);
		}
/* make sure it is an Image file */

		if (DataType == U3_image_data_type) {
			fprintf (stdout, "--image file)\n");
		} else {
			fprintf (stderr, "ERROR [tse2analyze]: not an image file: %s\n", InFile);
			return (ERROR);
		}


/* allocate memory space for the header buffer */

		if ((HeadBuffer = (header_t *) calloc (1, sizeof (header_t))) == 0) {
			fprintf (stderr, "ERROR [tse2analyze]: calloc header\n");
			return (ERROR);
		}
/* get the header buffer */

		Status = U3GetHeader (FileInp_p, HeadBuffer);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tse2analyze]: reading header\n");
			free (HeadBuffer);
			return (ERROR);
		}
/* allocate memory space for the  data buffer */

		/* calculate the number of bytes per pixel */
		NumRows_ul = HeadBuffer->G28.Pre.Rows;
		NumColumns_ul = HeadBuffer->G28.Pre.Columns;
		NumPixels_ul = NumRows_ul * NumColumns_ul;

		/* set the offset to start reading the data */
		StartOffset_ul = 0;

		/* allocate memory space according to the data size */
		switch (DataSize) {
		case U3_set_m_short:
			if ((DataBuffer = (U_SHORT *) calloc (NumPixels_ul, BytesPerPixelShort)) == 0) {
				fprintf (stderr, "ERROR [tse2analyze]: calloc data buffer\n");
				return (ERROR);
			}
			break;

		case U3_set_m_long:
			fprintf (stderr, "ERROR [tse2analyze]: cannot read long integer format\n");
			return (ERROR);

		default:
			fprintf (stderr, "ERROR [tse2analyze]: incompatible data type\n");
			return (ERROR);
		}

/* read the pixel data into the buffer */

		Status = U3ReadPixData (FileInp_p, StartOffset_ul, NumPixels_ul, &DataSize,
					DataBuffer);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tse2analyze]: reading data\n");
			free (HeadBuffer);
			free (DataBuffer);
			return (ERROR);
		}
/*
 *	Get image header information and orientation
 */
		if (slc == first1) {
			strcpy (institution, HeadBuffer->G08.Ide.InstitutionID);
			strcpy (model, HeadBuffer->G08.Ide.ManufacturerModel);
			strcpy (subject_id, HeadBuffer->G10.Pat.PatientId);
			sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Year);
			strcpy (study_date, num);
			strcat (study_date, ":");
			sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Month);
			strcat (study_date, num);
			strcat (study_date, ":");
			sprintf (num, "%d", (int) HeadBuffer->G08.Ide.StudyDate.Day);
			strcat (study_date, num);
			strcpy (ParameterFileName, HeadBuffer->G19.Acq4.CM.ParameterFileName);
			strcpy (SequenceFileName, HeadBuffer->G19.Acq4.CM.SequenceFileName);
			strcpy (SequenceDescription, HeadBuffer->G19.Acq4.CM.SequenceDescription);
			bitsperpix = HeadBuffer->G28.Pre.BitsAllocated;
			strncpy (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.X, 1);
			strncat (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.Y, 1);
			strncat (order, HeadBuffer->G21.Rel1.CM.PatientOrientationSet1.Z, 1);

			orientation = HeadBuffer->G21.Rel1.CM.ViewDirection;
			if (orientation < 1 && orientation > 6) {
				fprintf (stderr, "ERROR [tse2analyze]: incompatible view direction\n");
				return (ERROR);
			}
			fprintf (stdout, "%s  (%s)\n", view[orientation], order);

			switch (orientation) {

			case 1:		 /* View_FEET */
			case 2:		 /* View_HEAD */
				xdim = HeadBuffer->G28.Pre.Columns;
				ydim = HeadBuffer->G28.Pre.Rows;
				zdim = num_slices;
				xpix = HeadBuffer->G28.Pre.PixelSize.Row;
				ypix = HeadBuffer->G28.Pre.PixelSize.Row;
				zpix = HeadBuffer->G18.Acq.SliceThickness;
				break;

			case 3:		 /* View_AtoP */
			case 5:		 /* View_PtoA */
				xdim = HeadBuffer->G28.Pre.Columns;
				ydim = num_slices;
				zdim = HeadBuffer->G28.Pre.Rows;
				xpix = HeadBuffer->G28.Pre.PixelSize.Row;
				ypix = HeadBuffer->G18.Acq.SliceThickness;
				zpix = HeadBuffer->G28.Pre.PixelSize.Row;
				break;

			case 4:		 /* View_LtoR */
			case 6:		 /* View_RtoL */
				xdim = num_slices;
				ydim = HeadBuffer->G28.Pre.Columns;
				zdim = HeadBuffer->G28.Pre.Rows;
				xpix = HeadBuffer->G18.Acq.SliceThickness;
				ypix = HeadBuffer->G28.Pre.PixelSize.Row;
				zpix = HeadBuffer->G28.Pre.PixelSize.Row;
				break;

			default:
				fprintf (stderr, "ERROR [tse2analyze]: incompatible view direction\n");
				return (ERROR);
			}

			fprintf (stdout, "x = %d (%f mm)  y = %d (%f mm)  z = %d (%f mm)\n",
				 xdim, xpix, ydim, ypix, zdim, zpix);

			if ((img = s3tensor (0, zdim - 1, 0, ydim - 1, 0, xdim - 1)) == NULL) {
				fprintf (stderr, "ERROR [tse2analyze]: malloc img\n");
				return (ERROR);
			}
		}
		if (strncmp (order, "LAF", 3) == 0) {	/* View_FEET */
			n = 0;
			k = inc + slc - first1;
			for (j = ydim - 1; j >= 0; j--) {
				for (i = xdim - 1; i >= 0; i--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "RAH", 3) == 0) {	/* View_HEAD */
			n = 0;
			k = inc + slc - first1 + 1;	/* subtract 1 from zdim in loop */
			for (j = ydim - 1; j >= 0; j--) {
				for (i = 0; i < xdim; i++) {
					datum = DataBuffer[n];
					img[zdim - k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "RHA", 3) == 0) {	/* View_AtoP */
			n = 0;
			j = inc + slc - first1 + 1;	/* subtract 1 from ydim in loop */
			for (k = zdim - 1; k >= 0; k--) {
				for (i = 0; i < xdim; i++) {
					datum = DataBuffer[n];
					img[k][ydim - j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "LHP", 3) == 0) {	/* View_PtoA */
			n = 0;
			j = inc + slc - first1;
			for (k = zdim - 1; k >= 0; k--) {
				for (i = xdim - 1; i >= 0; i--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "AHR", 3) == 0) {	/* View_LtoR */
			n = 0;
			i = inc + slc - first1;
			for (k = zdim - 1; k >= 0; k--) {
				for (j = ydim - 1; j >= 0; j--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "PHL", 3) == 0) {	/* View_RtoL */
			n = 0;
			i = inc + slc - first1 + 1;	/* subtract 1 from xdim in loop */
			for (k = zdim - 1; k >= 0; k--) {
				for (j = 0; j <= ydim; j++) {
					datum = DataBuffer[n];
					img[k][j][xdim - i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else {
			fprintf (stderr, "ERROR [tse2analyze]: incompatible order %s\n", order);
			return (ERROR);
		}

		if (fmod ((float) count, 8.) < 0.01)
			inc += 8;
		free (HeadBuffer);
		free (DataBuffer);
		Status = U3Close (FileInp_p);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tse2analyze]: closing file\n");
			return (ERROR);
		}
	}
/*	Loop for root2 images */

	count = 0;
	inc = 8;
	for (slc = first2; slc <= last2; slc++) {
		count += 1;
		strcpy (InFile, root2);
		sprintf (num, "%d", slc);
		strcat (InFile, num);
		strcat (InFile, ".ima");

/* open file and check for success */

		Status = U3Open (&FileInp_p, InFile, "r");
		if (Status == 0) {
			fprintf (stdout, "Reading %s ", InFile);
		} else if (U3_isStatusError (Status, U3_NO_PERMISSION)) {
			fprintf (stderr, "ERROR [tse2analyze]: no read premission on %s\n", InFile);
			return (ERROR);
		} else if (U3_isStatusError (Status, U3_INVLD_FILE_PATH)) {
			fprintf (stderr, "ERROR [tse2analyze]: invalid path for %s\n", InFile);
			return (ERROR);
		} else if (U3_isStatusError (Status, U3_UNKNOWN_HEADER)) {
			fprintf (stderr, "ERROR [tse2analyze]: invalid image for %s\n", InFile);
			return (ERROR);
		} else
			return (ERROR);

/* determine header type */

		Status = U3GetHeaderType (FileInp_p, &HeadType);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tse2analyze]: unknown type for %s\n", InFile);
			return (ERROR);
		}
		switch (HeadType) {
		case U3_internal_head_type:
			fprintf (stdout, " (Numaris 3 format");
			break;

		case U3_nema_head_type:
			fprintf (stdout, " (ACR-NEMA format");
			break;

		case U3_numaris1_head_type:
			fprintf (stdout, " (Numaris 1 format");
			break;

		case U3_numaris2_head_type:
			fprintf (stdout, " (Numaris 2 format");
			break;


		default:
			fprintf (stderr, "ERROR [tse2analyze]: unknown format for %s\n", InFile);
			return (ERROR);
		}

/* check data type and data size */

		Status = U3GetDataType (FileInp_p, &DataType, &DataSize);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tse2analyze]: unknown data type for %s\n", InFile);
			return (ERROR);
		}
/* make sure it is an Image file */

		if (DataType == U3_image_data_type) {
			fprintf (stdout, "--image file)\n");
		} else {
			fprintf (stderr, "ERROR [tse2analyze]: not an image file: %s\n", InFile);
			return (ERROR);
		}


/* allocate memory space for the header buffer */

		if ((HeadBuffer = (header_t *) calloc (1, sizeof (header_t))) == 0) {
			fprintf (stderr, "ERROR [tse2analyze]: calloc header\n");
			return (ERROR);
		}
/* get the header buffer */

		Status = U3GetHeader (FileInp_p, HeadBuffer);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tse2analyze]: reading header\n");
			free (HeadBuffer);
			return (ERROR);
		}
/* allocate memory space for the  data buffer */

		/* calculate the number of bytes per pixel */
		NumRows_ul = HeadBuffer->G28.Pre.Rows;
		NumColumns_ul = HeadBuffer->G28.Pre.Columns;
		NumPixels_ul = NumRows_ul * NumColumns_ul;

		/* set the offset to start reading the data */
		StartOffset_ul = 0;

		/* allocate memory space according to the data size */
		switch (DataSize) {
		case U3_set_m_short:
			if ((DataBuffer = (U_SHORT *) calloc (NumPixels_ul, BytesPerPixelShort)) == 0) {
				fprintf (stderr, "ERROR [tse2analyze]: calloc data buffer\n");
				return (ERROR);
			}
			break;

		case U3_set_m_long:
			fprintf (stderr, "ERROR [tse2analyze]: cannot read long integer format\n");
			return (ERROR);

		default:
			fprintf (stderr, "ERROR [tse2analyze]: incompatible data type\n");
			return (ERROR);
		}

/* read the pixel data into the buffer */

		Status = U3ReadPixData (FileInp_p, StartOffset_ul,
					NumPixels_ul, &DataSize, DataBuffer);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tse2analyze]: reading data\n");
			free (HeadBuffer);
			free (DataBuffer);
			return (ERROR);
		}
		if (strncmp (order, "LAF", 3) == 0) {	/* View_FEET */
			n = 0;
			k = inc + slc - first2;
			for (j = ydim - 1; j >= 0; j--) {
				for (i = xdim - 1; i >= 0; i--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "RAH", 3) == 0) {	/* View_HEAD */
			n = 0;
			k = inc + slc - first2 + 1;	/* subtract 1 from zdim in loop */
			for (j = ydim - 1; j >= 0; j--) {
				for (i = 0; i < xdim; i++) {
					datum = DataBuffer[n];
					img[zdim - k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "RHA", 3) == 0) {	/* View_AtoP */
			n = 0;
			j = inc + slc - first2 + 1;	/* subtract 1 from ydim in loop */
			for (k = zdim - 1; k >= 0; k--) {
				for (i = 0; i < xdim; i++) {
					datum = DataBuffer[n];
					img[k][ydim - j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "LHP", 3) == 0) {	/* View_PtoA */
			n = 0;
			j = inc + slc - first2;
			for (k = zdim - 1; k >= 0; k--) {
				for (i = xdim - 1; i >= 0; i--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "AHR", 3) == 0) {	/* View_LtoR */
			n = 0;
			i = inc + slc - first2;
			for (k = zdim - 1; k >= 0; k--) {
				for (j = ydim - 1; j >= 0; j--) {
					datum = DataBuffer[n];
					img[k][j][i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else if (strncmp (order, "PHL", 3) == 0) {	/* View_RtoL */
			n = 0;
			i = inc + slc - first2 + 1;	/* subtract 1 from xdim in loop */
			for (k = zdim - 1; k >= 0; k--) {
				for (j = 0; j <= ydim; j++) {
					datum = DataBuffer[n];
					img[k][j][xdim - i] = datum;
					if (datum > global_max)
						global_max = datum;
					if (datum < global_min)
						global_min = datum;
					n++;
				}
			}

		} else {
			fprintf (stderr, "ERROR [tse2analyze]: incompatible order %s\n", order);
			return (ERROR);
		}
		if (fmod ((float) count, 8.) < 0.01)
			inc += 8;

		free (HeadBuffer);
		free (DataBuffer);
		Status = U3Close (FileInp_p);
		if (Status != 0) {
			fprintf (stderr, "ERROR [tse2analyze]: closing file\n");
			return (ERROR);
		}
	}

/*
 * Write to output file
 */

	for (k = 0; k < zdim; k++) {
		for (j = 0; j < ydim; j++) {
			if ((fwrite (img[k][j], sizeof (short), xdim, fd_img)) != xdim) {
				fprintf (stderr, "ERROR [tse2analyze]: writing %s\n", ANALYZE_img);
				return (ERROR);
			}
		}
	}

/*
 * Create Analyze hdr file
 */

	strncpy (hdr.hk.db_name, InFile, 17);
	hdr.hk.sizeof_hdr = sizeof (struct dsr); /* required by developers */
	hdr.hk.extents = 16384;			 /* recommended by developers  */
	hdr.hk.regular = 'r';			 /* required by developers */
	hdr.dime.dim[0] = 4;			 /* 4 dimensions  */
	hdr.dime.dim[1] = xdim;
	hdr.dime.dim[2] = ydim;
	hdr.dime.dim[3] = zdim;
	hdr.dime.dim[4] = 1;			 /* one volume */
	hdr.dime.unused8 = 0;			 /* despite the label, some of this is used */
	hdr.dime.unused9 = 0;
	hdr.dime.unused10 = 0;
	hdr.dime.unused11 = 0;
	hdr.dime.unused12 = 0;
	hdr.dime.unused13 = 0;
	hdr.dime.unused14 = 0;
	hdr.dime.datatype = 4;			 /* 16 bit signed integer  */
	hdr.dime.bitpix = bitsperpix;
	hdr.dime.pixdim[1] = xpix;
	hdr.dime.pixdim[2] = ypix;
	hdr.dime.pixdim[3] = zpix;
	hdr.dime.funused8 = 0;
	hdr.dime.funused9 = 0;
	hdr.dime.funused10 = 0;
	hdr.dime.funused11 = 0;
	hdr.dime.funused12 = 0;
	hdr.dime.funused13 = 0;
	hdr.dime.glmax = global_max;
	hdr.dime.glmin = global_min;
	strncpy (hdr.hist.descrip, InFile, 79);
	strcpy (hdr.hist.originator, "tse2analy");
	strncpy (hdr.hist.patient_id, version, 4);
	hdr.hist.orient = TRANSVERSE;

	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [tse2analyze]: writing %s\n", ANALYZE_hdr);
		return (ERROR);
	}
/*
 * Create Interfile Format header file
 */

	fprintf (fd_if, "INTERFILE :=\n");
	fprintf (fd_if, "version of keys	:= 3.3\n");
	fprintf (fd_if, "image modality	:= mri\n");
	fprintf (fd_if, "originating system	:= %s\n", model);
	fprintf (fd_if, "conversion program	:= tse2analyze\n");
	fprintf (fd_if, "program version	:= %4s\n", version);
	fprintf (fd_if, "program date	:= %s\n", program_date);
	fprintf (fd_if, "original institution	:= %s\n", institution);
	fprintf (fd_if, "name of data file	:= %s\n", ANALYZE_img);
	fprintf (fd_if, "subject ID := %s\n", subject_id);
	fprintf (fd_if, "study date	:= %s\n", study_date);

	fprintf (fd_if, "number format	:= signed integer\n");
	fprintf (fd_if, "number of bytes per pixel	:= %d\n", bitsperpix / 8);
	fprintf (fd_if, "number of dimensions	:= 3\n");
	fprintf (fd_if, "matrix size [1]	:= %d\n", xdim);
	fprintf (fd_if, "matrix size [2]	:= %d\n", ydim);
	fprintf (fd_if, "matrix size [3]	:= %d\n", zdim);
	fprintf (fd_if, "scaling factor (mm/pixel) [1]	:= %f\n", xpix);
	fprintf (fd_if, "scaling factor (mm/pixel) [2]	:= %f\n", ypix);
	fprintf (fd_if, "scaling factor (mm/pixel) [3]	:= %f\n", zpix);
	fprintf (fd_if, "matrix initial element [1]	:= right\n");
	fprintf (fd_if, "matrix initial element [2]	:= posterior\n");
	fprintf (fd_if, "matrix initial element [3]	:= inferior\n");
	fprintf (fd_if, "mri parameter file name	:= %s\n", ParameterFileName);
	fprintf (fd_if, "mri sequence file name	:= %s\n", SequenceFileName);
	fprintf (fd_if, "mri sequence description	:= %s\n", SequenceDescription);

/* free all buffers and return */

	fprintf (stdout, "Successfully created %s\n", ANALYZE_img);
	(void) fclose (fd_hdr);
	(void) fclose (fd_img);
	(void) fclose (fd_if);
	return (OK);
}
@


1.7
log
@*** empty log message ***
@
text
@d2 3
d25 1
a25 1
 *  Date:           Jan-98
d36 2
a57 2
static char     rcsid[] = "$Header: /home/npggw/tom/src/tse2analyze/RCS/tse2analyze.c,v 1.6 2002/01/10 17:27:32 tom Exp tom $";

a125 2
	ptr = strstr (rcsid, "v ");
	ptr += 2;
a126 3
	strncpy (version, ptr, 4);
	ptr = strstr (ptr, " ");
	ptr++;
d128 16
a143 5
	strncpy (program_date, ptr, 10);
	ptr = strchr (program_date, '/');
	*ptr = ':';
	ptr = strchr (program_date, '/');
	*ptr = ':';
d186 1
d265 1
a265 1
			fprintf (stderr, "ERROR [tse2analyze]: malloc header\n");
d290 1
a290 1
				fprintf (stderr, "ERROR [tse2analyze]: malloc data buffer\n");
d572 1
a572 1
			fprintf (stderr, "ERROR [tse2analyze]: malloc header\n");
d597 1
a597 1
				fprintf (stderr, "ERROR [tse2analyze]: malloc data buffer\n");
@


1.6
log
@*** empty log message ***
@
text
@d2 3
d38 1
d53 1
a53 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/tse2analyze/RCS/tse2analyze.c,v 1.5 1999/04/09 13:25:10 tom Exp tom $";
d142 2
a143 2
		printf ("Usage: tse2analyze <root1> <first1> <last1> <root2> <first2> <last2> <output_root>\n");
		return (1);
d163 2
a164 2
		printf ("Unable to create ANALYZE header %s\n", ANALYZE_hdr);
		return (1);
d167 2
a168 2
		printf ("Unable to create ANALYZE image %s\n", ANALYZE_img);
		return (1);
d171 2
a172 2
		printf ("Unable to create Interfile Format header %s\n", IF_hdr);
		return (1);
d193 1
a193 1
			printf ("Reading %s ", InFile);
d195 2
a196 2
			printf ("ERROR [tse2analyze]: inadequate permission on file %s\n", InFile);
			return (1);
d198 2
a199 2
			printf ("ERROR [tse2analyze]: invalid file path for %s\n", InFile);
			return (1);
d201 2
a202 2
			printf ("ERROR [tse2analyze]: file %s is not a valid image file\n", InFile);
			return (1);
d204 1
a204 1
			return (1);
d210 2
a211 2
			printf ("ERROR [tse2analyze]: unknown header type\n");
			return (1);
d215 1
a215 1
			printf (" (Numaris 3 format");
d219 1
a219 1
			printf (" (ACR-NEMA format");
d223 1
a223 1
			printf (" (Numaris 1 format");
d227 1
a227 1
			printf (" (Numaris 2 format");
d231 2
a232 2
			printf ("\nThe data file format is unknown.\n");
			return (1);
d239 2
a240 2
			printf ("ERROR [tse2analyze]: unknown data type\n");
			return (1);
d245 1
a245 1
			printf ("--image file)\n");
d247 2
a248 2
			printf ("ERROR [tse2analyze]: file is not an image file\n");
			return (1);
d255 2
a256 2
			printf ("ERROR [tse2analyze]: unable to allocate memory\n");
			return (1);
d262 1
d264 1
a264 2
			printf ("ERROR [tse2analyze]: unable to get the header\n");
			return (1);
d280 2
a281 2
				printf ("ERROR [tse2analyze]: unable to allocate memory\n");
				return (1);
d286 2
a287 2
			printf ("ERROR [tse2analyze]: long integer format not acceptable\n");
			return (1);
d290 2
a291 2
			printf ("ERROR [tse2analyze]: Incompatible data type\n");
			return (1);
d299 1
d302 1
a302 2
			printf ("ERROR [tse2analyze]: unable to read the pixel data\n");
			return (1);
d329 2
a330 2
				printf ("ERROR [tse2analyze]: Incompatible View Direction\n");
				return (1);
d332 1
a332 1
			printf ("%s  (%s)\n", view[orientation], order);
d367 2
a368 2
				printf ("ERROR [tse2analyze]: Incompatible View Direction\n");
				return (1);
d371 2
a372 2
			printf ("x = %d (%f mm)  y = %d (%f mm)  z = %d (%f mm)\n",
				xdim, xpix, ydim, ypix, zdim, zpix);
d376 1
a376 1
				return (1);
d470 2
a471 2
			printf ("ERROR [tse2analyze]: Incompatible Order:  %s\n", order);
			return (1);
d480 2
a481 2
			printf ("ERROR [tse2analyze]: closing file\n");
			return (1);
d499 1
a499 1
			printf ("Reading %s ", InFile);
d501 2
a502 2
			printf ("ERROR [tse2analyze]: inadequate permission on data file %s\n", InFile);
			return (1);
d504 2
a505 2
			printf ("ERROR [tse2analyze]: invalid file path for %s\n", InFile);
			return (1);
d507 2
a508 2
			printf ("ERROR [tse2analyze]: file %s is not a valid image file\n", InFile);
			return (1);
d510 1
a510 1
			return (1);
d516 2
a517 2
			printf ("ERROR [tse2analyze]: unknown header type.\n");
			return (1);
d521 1
a521 1
			printf (" (Numaris 3 format");
d525 1
a525 1
			printf (" (ACR-NEMA format");
d529 1
a529 1
			printf (" (Numaris 1 format");
d533 1
a533 1
			printf (" (Numaris 2 format");
d536 1
d538 2
a539 2
			printf ("\nThe data file format is unknown.\n");
			return (1);
d546 2
a547 2
			printf ("ERROR [tse2analyze]: unknown data type.\n");
			return (1);
d552 1
a552 1
			printf ("--image file)\n");
d554 2
a555 2
			printf ("ERROR [tse2analyze]: Data file is not an image file.\n");
			return (1);
d562 2
a563 2
			printf ("ERROR [tse2analyze]: unable to allocate memory.\n");
			return (1);
d569 1
d571 1
a571 2
			printf ("ERROR [tse2analyze]: unable to get the header.\n");
			return (1);
d587 2
a588 2
				printf ("ERROR [tse2analyze]: unable to allocate memory\n");
				return (1);
d593 2
a594 2
			printf ("ERROR [tse2analyze]: long integer format not acceptable\n");
			return (1);
d597 2
a598 2
			printf ("ERROR [tse2analyze]: Incompatible data type.\n");
			return (1);
d606 1
d609 1
a609 2
			printf ("ERROR [tse2analyze]: unable to read the pixel data.\n");
			return (1);
d702 2
a703 2
			printf ("ERROR [tse2analyze]: incompatible Order:  %s\n", order);
			return (1);
d712 2
a713 2
			printf ("ERROR [tse2analyze]: closing file\n");
			return (1);
d724 2
a725 2
				printf ("Error writing to: %s\n", ANALYZE_img);
				return (1);
d769 2
a770 2
		printf ("Error writing to: %s\n", ANALYZE_hdr);
		return (1);
d806 1
a806 1
	printf ("\ntse2analyze completed successfully creating %s\n", ANALYZE_img);
d810 1
a810 1
	return 0;
@


1.5
log
@change declaration of order
@
text
@d2 3
d31 1
a32 1
#include <fcntl.h>
d34 1
d49 1
a49 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/tse2analyze/RCS/tse2analyze.c,v 1.4 1998/04/02 18:56:00 tom Exp tom $";
d68 1
a68 1
	long unsigned   NumPixels_ul, NumBytes_ul, NumRows_ul, NumColumns_ul, StartOffset_ul;
d90 1
a90 1
	char            *order;
a91 1
	int             bitsperpix;
d105 7
a111 2
	short           xdim, ydim, zdim;	 /* image dimensions */
	float           xpix, ypix, zpix;	 /* pixel sizes (mm) */
d139 1
a139 1
		exit (1);
d160 1
a160 1
		exit (1);
d164 1
a164 1
		exit (1);
d168 1
a168 1
		exit (1);
d172 1
a172 1
	order = (char *) calloc(4,sizeof(char));
d189 1
a189 1
			printf ("tse2analyze : reading %s ", InFile);
d192 1
a192 1
			exit (1);
d195 1
a195 1
			exit (1);
d198 1
a198 1
			exit (1);
d200 1
a200 1
			exit (1);
d204 2
a205 1
		if ((Status = U3GetHeaderType (FileInp_p, &HeadType)) != 0) {
d207 1
a207 1
			exit (1);
d228 1
a228 1
			exit (1);
d233 2
a234 1
		if ((Status = U3GetDataType (FileInp_p, &DataType, &DataSize)) != 0) {
d236 1
a236 1
			exit (1);
d244 1
a244 1
			exit (1);
d250 1
a250 1
		if ((HeadBuffer = (header_t *) malloc (sizeof (header_t))) == 0) {
d252 1
a252 1
			exit (1);
d256 2
a257 1
		if ((Status = U3GetHeader (FileInp_p, HeadBuffer)) != 0) {
d260 1
a260 1
			exit (1);
d275 1
a275 1
			if ((DataBuffer = (U_SHORT *) malloc (NumPixels_ul * BytesPerPixelShort)) == 0) {
d277 1
a277 1
				exit (1);
d283 1
a283 1
			exit (1);
d287 1
a287 1
			exit (1);
d292 3
a294 2
		if ((Status = U3ReadPixData (FileInp_p, StartOffset_ul,
					     NumPixels_ul, &DataSize, DataBuffer)) != 0) {
d298 1
a298 1
			exit (1);
d307 1
a307 1
			sprintf (num, "%d", HeadBuffer->G08.Ide.StudyDate.Year);
d310 1
a310 1
			sprintf (num, "%d", HeadBuffer->G08.Ide.StudyDate.Month);
d313 1
a313 1
			sprintf (num, "%d", HeadBuffer->G08.Ide.StudyDate.Day);
d326 1
a326 1
				exit (1);
d364 1
a364 1
				exit (1);
d370 3
a372 3
			if (NULL == (img = (short ***) malloc ((short) (zdim * sizeof (short **))))) {
				printf ("\nCould not malloc memory for ***img\n");
				exit (1);
a373 12
			for (i = 0; i < zdim; i++) {
				if (NULL == (img[i] = (short **) malloc ((short) (ydim * sizeof (short *))))) {
					printf ("\nCould not malloc memory for **img\n");
					exit (1);
				}
				for (j = 0; j < ydim; j++) {
					if (NULL == (img[i][j] = (short *) malloc ((short) (xdim * sizeof (short))))) {
						printf ("\nCould not malloc memory for *img\n");
						exit (1);
					}
				}
			}
d467 1
a467 1
			exit (1);
d475 4
a479 1

d495 1
a495 1
			printf ("tse2analyze : reading %s ", InFile);
d498 1
a498 1
			exit (1);
d501 1
a501 1
			exit (1);
d504 1
a504 1
			exit (1);
d506 1
a506 1
			exit (1);
d510 2
a511 1
		if ((Status = U3GetHeaderType (FileInp_p, &HeadType)) != 0) {
d513 1
a513 1
			exit (1);
d534 1
a534 1
			exit (1);
d539 2
a540 1
		if ((Status = U3GetDataType (FileInp_p, &DataType, &DataSize)) != 0) {
d542 1
a542 1
			exit (1);
d550 1
a550 1
			exit (1);
d556 1
a556 1
		if ((HeadBuffer = (header_t *) malloc (sizeof (header_t))) == 0) {
d558 1
a558 1
			exit (1);
d562 2
a563 1
		if ((Status = U3GetHeader (FileInp_p, HeadBuffer)) != 0) {
d566 1
a566 1
			exit (1);
d581 1
a581 1
			if ((DataBuffer = (U_SHORT *) malloc (NumPixels_ul * BytesPerPixelShort)) == 0) {
d583 1
a583 1
				exit (1);
d589 1
a589 1
			exit (1);
d593 1
a593 1
			exit (1);
d598 3
a600 2
		if ((Status = U3ReadPixData (FileInp_p, StartOffset_ul,
					     NumPixels_ul, &DataSize, DataBuffer)) != 0) {
d604 1
a604 1
			exit (1);
d698 1
a698 1
			exit (1);
d706 4
d720 1
a720 1
				exit (1);
d765 1
a765 1
		exit (1);
d799 1
a799 1
/* free all buffers and exit */
d802 4
a805 4
	close (fd_hdr);
	close (fd_img);
	close (fd_if);
	exit (0);
@


1.4
log
@permit reversing order of sequences
@
text
@d2 3
d45 1
a45 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/tse2analyze/RCS/tse2analyze.c,v 1.3 1998/01/28 19:07:38 tom Exp tom $";
d86 1
a86 1
	char            order[4];
d164 1
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d42 1
a42 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/tse2analyze/RCS/tse2analyze.c,v 1.2 1998/01/22 18:39:58 tom Exp tom $";
d136 4
a139 1
	num_slices = last2 - first1 + 1;
@


1.2
log
@clean up ifh
@
text
@d2 3
d18 1
a18 1
 *		Checked for proper orientation for View_LtoR (4) only.
d39 1
a39 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/tse2analyze/RCS/tse2analyze.c,v 1.1 1998/01/22 18:12:38 tom Exp tom $";
d90 2
a91 2
	int             count = 0;
	int             inc = 0;
a108 1
	printf ("%s\n",version);
d158 2
d173 1
a173 1
			printf ("\nerror: tse2analyze : inadequate permission on data file %s\n", InFile);
d176 1
a176 1
			printf ("\nerror: tse2analyze : invalid file path for %s\n", InFile);
d179 1
a179 1
			printf ("\nerror: tse2analyze : file %s is not a valid image file\n", InFile);
d187 1
a187 1
			printf ("\nerror: tse2analyze : unknown header type.\n");
d215 1
a215 1
			printf ("\nerror: tse2analyze : unknown data type.\n");
d223 1
a223 1
			printf ("\nerror: tse2analyze : Data file is not an image file.\n");
d231 1
a231 1
			printf ("\nerror : tse2analyze : unable to allocate memory.\n");
d238 1
a238 1
			printf ("\nerror: tse2analyze : unable to get the header.\n");
d255 1
a255 1
				printf ("\nerror : unable to allocate memory space for the data.");
d261 1
a261 1
			printf ("\nerror : long integer format not acceptable.");
d265 1
a265 1
			printf ("\nerror: tse2analyze : Incompatible data type.\n");
d275 1
a275 1
			printf ("\nerror: unable to read the pixel data.\n");
d303 1
a303 1
				printf ("\nerror: tse2analyze: Incompatible View Direction.\n");
d341 1
a341 1
				printf ("\nerror: tse2analyze: Incompatible View Direction.\n");
d456 1
a456 1
			printf ("\nerror: tse2analyze: Incompatible Order:  %s\n", order);
d484 1
a484 1
			printf ("\nerror: tse2analyze : inadequate permission on data file %s\n", InFile);
d487 1
a487 1
			printf ("\nerror: tse2analyze : invalid file path for %s\n", InFile);
d490 1
a490 1
			printf ("\nerror: tse2analyze : file %s is not a valid image file\n", InFile);
d498 1
a498 1
			printf ("\nerror: tse2analyze : unknown header type.\n");
d526 1
a526 1
			printf ("\nerror: tse2analyze : unknown data type.\n");
d534 1
a534 1
			printf ("\nerror: tse2analyze : Data file is not an image file.\n");
d542 1
a542 1
			printf ("\nerror : tse2analyze : unable to allocate memory.\n");
d549 1
a549 1
			printf ("\nerror: tse2analyze : unable to get the header.\n");
d566 1
a566 1
				printf ("\nerror : unable to allocate memory space for the data.");
d572 1
a572 1
			printf ("\nerror : long integer format not acceptable.");
d576 1
a576 1
			printf ("\nerror: tse2analyze : Incompatible data type.\n");
d586 1
a586 1
			printf ("\nerror: unable to read the pixel data.\n");
d680 1
a680 1
			printf ("\nerror: tse2analyze: Incompatible Order:  %s\n", order);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*$Log$ */
d36 1
a36 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/tse2analyze/RCS/tse2analyze.c,v 1.4 1996/03/06 14:43:45 tom Exp $";
d104 1
d106 1
d109 1
d751 1
a751 1
	fprintf (fd_if, "program version	:= %s\n", version);
@
