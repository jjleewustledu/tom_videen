head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2008.08.21.18.12.48;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.21.18.10.39;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.21.15.17.34;	author tom;	state Exp;
branches;
next	;


desc
@original
@


1.3
log
@remove branching_fraction
int main
@
text
@/*$Log: img2spmf.c,v $
 * Revision 1.2  2008/08/21  18:10:39  tom
 * add branching_fraction
 *
 * Revision 1.1  2007/06/21  15:17:34  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			img2spmf.c
 *	Date:			Jun 2007
 *	Author:			Tom Videen
 *	Description:	Transform PETT VI or ECAT images into Analyze format as Floating Pt
 *		Input images may be any format recognizable by getrealimg.
 *		Output images will be displayed by Analyze with left brain on the RIGHT
 *		and with the lower slices first.  This fits the expectations of SPM.
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/img2spmf/RCS/img2spmf.c,v 1.2 2008/08/21 18:10:39 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <ANALYZE.h>				 /* dsr */

#define MAXSTR 256
#define TRANSVERSE '\000'
#define CORONAL    '\001'
#define SAGITTAL   '\002'

/*	----------------------------
 *	Function:			img2spmf
 *	----------------------------
 */
int main (argc, argv)
	int             argc;
	char           *argv[];
{

	ImageFile      *file;
	Index           indx;
	struct dsr      hdr;			 /* header for SPM */
	FILE           *fd_hdr;			 /* file for SPM hdr */
	FILE           *fd_img;			 /* output SPM image  */

	char           *PET_img;		 /* input PET image filename */
	char           *SPM_hdr;		 /* output Analyze header filename  */
	char           *SPM_img;		 /* output Analyze image filename */
	char           *xorg, *yorg, *zorg;	 /* atlas origin */
	long            dim[3];			 /* dimensions of tensors */
	int             z0;
	int             i, j, k;

	float        ***image;			 /* input PET image */
	float          *row;			 /* single row of output image */

/*
 *  Initializations
 */

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	xorg = hdr.hist.originator + 1;
	yorg = hdr.hist.originator + 3;
	zorg = hdr.hist.originator + 5;

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 4) {
		fprintf (stderr, "Usage: img2spmf PET_img SPM_img SPM_hdr\n");
		return (ERROR);
	}
	PET_img = argv[1];
	SPM_img = argv[2];
	SPM_hdr = argv[3];

	if ((fd_hdr = fopen (SPM_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [img2spmf]: Unable to create SPM header %s\n", SPM_hdr);
		return (ERROR);
	}
	if ((fd_img = fopen (SPM_img, "w")) == 0) {
		fprintf (stderr, "ERROR [img2spmf]: Unable to create SPM image %s\n", SPM_img);
		return (ERROR);
	}
/*
 *	Read the image.
 */

	file = make_imgfile (PET_img);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [img2spmf]: opening %s\n", PET_img);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [img2spmf]: reading MainHeader from %s\n", PET_img);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		if (indx.frm == 1) {
			indx.frm = 2;
			if (existimgfrm (file, &indx) == ERROR) {
				indx.frm = 3;
				if (existimgfrm (file, &indx) == ERROR) {
					fprintf (stderr, "ERROR [img2spmf]: cannot find %s frame 1, 2 or 3\n", PET_img);
					return (ERROR);
				}
			}
		} else {
			fprintf (stderr, "ERROR [img2spmf]: cannot find %s frame %d\n",
				 PET_img, indx.frm);
			return (ERROR);
		}
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [img2spmf]: reading subheader in %s\n", PET_img);
		return (ERROR);
	}
	dim[0] = (long) file->sh->dim1;
	dim[1] = (long) file->sh->dim2;
	dim[2] = (long) file->sh->dim3;
	z0 = file->mh->zorigin;
	if ((image = readtensor (file, &indx)) == NULL)
		return (ERROR);
	if (NULL == (row = (float *) calloc (dim[0], sizeof (float)))) {
		fprintf (stderr, "ERROR [img2spmf]: malloc row\n");
		return (ERROR);
	}

/*
 * Flip Y & Z, and write to output file
 */

	for (i = dim[2]; i > 0; i--) {
		for (j = dim[1]; j > 0; j--) {
			for (k = 0; k < dim[0]; k++)
				row[k] = image[i][j][k + 1];
			if ((fwrite (row, sizeof (float), dim[0], fd_img)) != dim[0]) {
				fprintf (stderr, "ERROR [img2spmf]: writing to: %s\n", SPM_img);
				return (ERROR);
			}
		}
	}

/*
 * Create Analyze hdr file
 */

	hdr.hk.sizeof_hdr = sizeof (struct dsr); /* required by developers */
	strncpy (hdr.hk.data_type, "dsr", 9);
	strncpy (hdr.hk.db_name, SPM_hdr, 17);
	hdr.hk.extents = 0;
	hdr.hk.session_error = 0;
	hdr.hk.regular = 'r';			 /* required by developers */
	hdr.hk.hkey_un0 = '0';			 /* required by developers */
	hdr.dime.dim[0] = 4;			 /* typically only 4 dimensions  */
	hdr.dime.dim[1] = dim[0];		 /* x dimension of atlas   */
	hdr.dime.dim[2] = dim[1];		 /* y dimension of atlas   */
	hdr.dime.dim[3] = dim[2];		 /* number of slices in volume */
	hdr.dime.dim[4] = 1;			 /* only one volume typically  */
	hdr.dime.dim[5] = 0;			 /* only one volume typically  */
	hdr.dime.dim[6] = 0;			 /* only one volume typically  */
	hdr.dime.dim[7] = 0;			 /* only one volume typically  */
	hdr.dime.unused8 = 0;			 /* despite the label, some of this is used */
	hdr.dime.unused9 = 0;
	hdr.dime.unused10 = 0;
	hdr.dime.unused11 = 0;
	hdr.dime.unused12 = 0;
	hdr.dime.unused13 = 0;
	hdr.dime.unused14 = 0;
	hdr.dime.datatype = 16;			 /* float  */
	hdr.dime.bitpix = 32;			 /* number of bits/pixel */
	hdr.dime.dim_un0 = 0;
	hdr.dime.pixdim[0] = 0;
	hdr.dime.pixdim[1] = 10 * file->sh->sample_size_1;	/* in mm */
	hdr.dime.pixdim[2] = 10 * file->sh->sample_size_2;	/* in mm */
	hdr.dime.pixdim[3] = 10 * file->sh->sample_size_3;	/* in mm */
	hdr.dime.pixdim[4] = 0;
	hdr.dime.pixdim[5] = 0;
	hdr.dime.pixdim[6] = 0;
	hdr.dime.pixdim[7] = 0;
	hdr.dime.funused8 = 0;
	hdr.dime.funused9 = 1.0;		 /* SPM sets this to 1 */
	hdr.dime.funused10 = 0;
	hdr.dime.funused11 = 0;
	hdr.dime.funused12 = 0;
	hdr.dime.funused13 = 0;
	hdr.dime.compressed = 0;
	hdr.dime.verified = 0;
	hdr.dime.glmax = 1;
	hdr.dime.glmin = 0;
	strncpy (hdr.hist.descrip, PET_img, 79);
	strncpy (hdr.hist.aux_file, "SPM99 orientation", 23);
	hdr.hist.orient = TRANSVERSE;
	strncpy (hdr.hist.originator, "", 9);
	strncpy (hdr.hist.generated, "", 9);
	strncpy (hdr.hist.scannum, "", 9);
	strncpy (hdr.hist.patient_id, "", 9);
	strncpy (hdr.hist.exp_date, "", 9);
	strncpy (hdr.hist.exp_time, "", 9);
	strncpy (hdr.hist.hist_un0, "", 2);

	if (dim[0] == 128)
		*xorg = 64;
	if (dim[1] == 128)
		*yorg = 65;
	if (z0 > 0)
		*zorg = dim[2] + 1 - z0;

	hdr.hist.views = 0;
	hdr.hist.vols_added = 0;
	hdr.hist.start_field = 0;
	hdr.hist.field_skip = 0;
	hdr.hist.omax = 0;
	hdr.hist.omin = 0;
	hdr.hist.smax = 0;
	hdr.hist.smin = 0;

	if ((fwrite ((char *) &hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [img2spmf]: writing to: %s\n", SPM_hdr);
		return (ERROR);
	}
	fprintf (stdout, "Converted: %s to %s\n", PET_img, SPM_img);
	free (image);
	free (row);
	(void) fclose (fd_hdr);
	(void) fclose (fd_img);
	return (OK);
}
@


1.2
log
@add branching_fraction
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/img2spmf/RCS/img2spmf.c,v 1.1 2007/06/21 15:17:34 tom Exp tom $";
d41 1
a41 1
main (argc, argv)
a58 1
	float           bfrac;		 	 /* branching fraction */
a131 1
	bfrac = file->m7->branching_fraction;
d147 1
a147 1
				row[k] = bfrac * image[i][j][k + 1];
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*$Log$ */
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/img2spmf/RCS/img2spmf.c,v 1.7 2007/05/24 17:59:20 tom Exp $";
d56 1
d130 1
d146 1
a146 1
				row[k] = image[i][j][k + 1];
@
