head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2009.02.09.22.15.57;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2009.02.09.22.14.59;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.07.20.10.10;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update main
@
text
@/*	$Log: anaint2double.c,v $
 * Revision 1.2  2009/02/09  22:14:59  tom
 * permit 3 dimension
 *
 * Revision 1.1  2008/08/07  20:10:10  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anaint2double.c
 *	Date:			May 2008
 *	Author:			Tom Videen
 *	Description:	Transform short integer Analyze images into doubles for FLIRT.
 *	===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaint2double/RCS/anaint2double.c,v 1.2 2009/02/09 22:14:59 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>				 /* dsr */

/*	----------------------------
 *	Function:			anaint2double
 *	----------------------------
 */
int main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* header for ANALYZE */
	FILE           *fd;				 /* file for read/write */
	char           *inhdr;			 /* output hdr filename  */
	char           *inimg;			 /* output img filename */
	char           *outhdr;			 /* input hdr filename */
	char           *outimg;			 /* input img filename */
	long            dim1, dim2, dim3; /* dimensions of img */
	long            num, i;
	short          *img;			 /* input image */
	double         *dmg;			 /* output image */

/*	Get command line arguments and initialize filenames	*/

	if (argc != 5) {
		fprintf (stderr, "Usage: anaint2double inimg inhdr outimg outhdr\n");
		return (ERROR);
	}
	inimg = argv[1];
	inhdr = argv[2];
	outimg = argv[3];
	outhdr = argv[4];

/* Read input Analyze hdr file	*/

	if ((fd = fopen (inhdr, "r")) == 0) {
		fprintf (stderr, "ERROR [anaint2double]: opening %s\n", inhdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd)) != 1) {
		fprintf (stderr, "ERROR [anaint2double]: reading %s\n", inhdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anaint2double]: reading %s\n", inhdr);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anaint2double]: not short integers %s\n", inhdr);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anaint2double]: not short integers %s\n", inhdr);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd);

/*	Allocate image arrays	*/

	num = dim1 * dim2 * dim3;
	img = (short *) calloc (num, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [anaint2double]: calloc img\n");
		return (ERROR);
	}
	dmg = (double *) calloc (num, sizeof (double));
	if (img == NULL) {
		fprintf (stderr, "ERROR [anaint2double]: calloc dmg\n");
		return (ERROR);
	}

/*	Read input array	*/

	if ((fd = fopen (inimg, "r")) == 0) {
		fprintf (stderr, "ERROR [anaint2double]: opening %s\n", inimg);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd)) != num) {
		fprintf (stderr, "ERROR [anaint2double]: reading %s\n", inimg);
		return (ERROR);
	}
	(void) fclose (fd);

/*	Write output array	*/

	for (i = 0; i < num; i++)
		dmg[i] = (double) img[i];

	if ((fd = fopen (outimg, "w")) == 0) {
		fprintf (stderr, "ERROR [anaint2double]: opening %s\n", outimg);
		return (ERROR);
	}
	if ((fwrite (dmg, sizeof (double), num, fd)) != num) {
		fprintf (stderr, "ERROR [anaint2double]: writing %s\n", outimg);
		return (ERROR);
	}
	(void) fclose (fd);
	free (img);
	free (dmg);
	fprintf (stdout, "Output:  %s\n", outimg);

/*	Write output hdr	*/

	hdr.dime.datatype = 64;
	hdr.dime.bitpix = 64;
	if ((fd = fopen (outhdr, "w")) == 0) {
		fprintf (stderr, "ERROR [anaint2double]: opening %s\n", outhdr);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd)) != 1) {
		fprintf (stderr, "ERROR [anaint2double]: writing %s\n", outhdr);
		return (ERROR);
	}
	(void) fclose (fd);

	return (OK);
}
@


1.2
log
@permit 3 dimension
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaint2double/RCS/anaint2double.c,v 1.1 2008/08/07 20:10:10 tom Exp tom $";
d27 1
a27 1
main (argc, argv)
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaint2double/RCS/anaint2double.c,v 2.0 2004/02/13 17:47:31 tom Exp $";
d61 1
a61 1
	if (hdr.dime.dim[0] != 4) {
@
