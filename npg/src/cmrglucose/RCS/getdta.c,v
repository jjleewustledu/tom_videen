head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.13.21.19.33;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.16.21.28.02;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.07.21.39.54;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.04.29.14.48.10;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/* $Log: getdta.c,v $
 * Revision 1.3  2002/12/16  21:28:02  tom
 * correct return variable
 *
 * Revision 1.2  2002/03/07 21:39:54  tom
 * clean lint
 *
 * Revision 1.1  1998/04/29  14:48:10  tom
 * Initial revision
 *
 * Revision 1.1  1998/02/24  22:50:28  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			getdta.c
 *	Date:			Feb 1998
 *	Author:			Tom Videen
 *	Description:	Read dta file.
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/cmrglucose/RCS/getdta.c,v 1.3 2002/12/16 21:28:02 tom Exp tom $";
#endif

#include <stdlib.h>
#include <math.h>
#include <image.h>
#include <pettable.h>

int             getdta (fname, nsamples, time, activ)
	char           *fname;
	int            *nsamples;
	float          *time;
	float          *activ;
{
	FILE           *fp;
	char            line[MAXLINE];
	float           fbuffer[2];
	int             ibuffer[2];
	int             dtaversion;
	int             ntype;
	int             i;

	fp = fopen (fname, "r");
	if (fp == NULL) {
		fprintf (stderr, "ERROR [getdta]: cannot open %s\n", fname);
		return (ERROR);
	}
/*
 * Get DTA file type.
 */
	(void) fgets (line, MAXLINE, fp);
	if (sscanf (line, "@@%2d@@", ibuffer) < 1) {
		fprintf (stderr, "ERROR [getdta]: reading %s\n", fname);
		return (ERROR);
	}
	dtaversion = ibuffer[0];
	if (dtaversion != 1) {
		fprintf (stderr, "ERROR [getdta]: dta file %s does not have a recognizable type\n", fname);
		return (ERROR);
	}
	(void) fgets (line, MAXLINE, fp);
	(void) fgets (line, MAXLINE, fp);
	(void) fgets (line, MAXLINE, fp);
	(void) fgets (line, MAXLINE, fp);
	if (sscanf (line, "%d", ibuffer) < 1) {
		fprintf (stderr, "ERROR [getdta]: reading %s\n", fname);
		return (ERROR);
	}
	ntype = ibuffer[0];
	if (ntype != 5) {
		fprintf (stderr, "ERROR [getdta]: incorrect ntype %d\n", ntype);
		return (ERROR);
	}
	(void) fgets (line, MAXLINE, fp);
	(void) fgets (line, MAXLINE, fp);
	(void) fgets (line, MAXLINE, fp);
	(void) fgets (line, MAXLINE, fp);
	if (sscanf (line, "%d", nsamples) < 1) {
		fprintf (stderr, "ERROR [getdta]: reading %s\n", fname);
		return (ERROR);
	}
	if (*nsamples <= 0) {
		fprintf (stderr, "ERROR [getdta]: no count data\n");
		return (ERROR);
	}
	for (i = 0; i < *nsamples; i++) {
		(void) fgets (line, MAXLINE, fp);
		if (sscanf (line, "%f %f\n", fbuffer, fbuffer + 1) < 2) {
			fprintf (stderr, "ERROR [getdta]: format error for PET dimensions in %s\n", fname);
			return (ERROR);
		} else {
			time[i] = fbuffer[0];
			activ[i] = fbuffer[1];
		}
	}
	(void) fclose (fp);
	return (OK);
}
@


1.3
log
@correct return variable
@
text
@d2 3
d16 1
a16 1
 *	Date:			Feb-98
d21 1
d23 1
a23 1
static char     rcsid[] = "$Header: /home/tom/src/cmrglucose/RCS/getdta.c,v 1.2 2002/03/07 21:39:54 tom Exp tom $";
@


1.2
log
@clean lint
@
text
@d2 3
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/cmrglucose/RCS/getdta.c,v 1.1 1998/04/29 14:48:10 tom Exp tom $";
d44 1
a44 1
		return (NULL);
d52 1
a52 1
		return (NULL);
d57 1
a57 1
		return (NULL);
d65 1
a65 1
		return (NULL);
d70 1
a70 1
		return (NULL);
d78 1
a78 1
		return (NULL);
d82 1
a82 1
		return (NULL);
d88 1
a88 1
			return (NULL);
d95 1
a95 1
	return (0);
@


1.1
log
@Initial revision
@
text
@d2 3
d12 1
a12 1
 *	Description:
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/cmrglu/RCS/getdta.c,v 1.1 1998/02/24 22:50:28 tom Exp $";
a18 1
#include <stdio.h>
a19 1
#include <string.h>
a21 2
#include <libimage.h>
#include <libnrimg.h>
d27 2
a28 2
	float           time[];
	float           activ[];
a33 1
	int             nread;
d46 5
a50 2
	fgets (line, MAXLINE, fp);
	nread = sscanf (line, "@@%2d@@", ibuffer);
d56 8
a63 5
	fgets (line, MAXLINE, fp);
	fgets (line, MAXLINE, fp);
	fgets (line, MAXLINE, fp);
	fgets (line, MAXLINE, fp);
	nread = sscanf (line, "%d", ibuffer);
d69 8
a76 5
	fgets (line, MAXLINE, fp);
	fgets (line, MAXLINE, fp);
	fgets (line, MAXLINE, fp);
	fgets (line, MAXLINE, fp);
	nread = sscanf (line, "%d", nsamples);
a80 1

d82 2
a83 3
		fgets (line, MAXLINE, fp);
		nread = sscanf (line, "%f %f\n", fbuffer, fbuffer + 1);
		if (nread < 2) {
d91 1
a91 1
	fclose (fp);
@
