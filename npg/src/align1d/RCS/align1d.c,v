head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.16.39.59;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.10.26.17.40.23;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.09.02.19.43.11;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: align1d.c,v $
 * Revision 1.2  1999/10/26  17:40:23  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/09/02  19:43:11  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			align1d.c
 *	Date:			Sep-99
 *	Author:			Tom Videen
 *	Description:	Align two 2D Analyze images line-by-line
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/align1d/RCS/align1d.c,v 1.2 1999/10/26 17:40:23 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <values.h>
#include <myvalues.h>
#include <nrutil.h>
#include <ANALYZE.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;				 /* ANALYZE.h */
	FILE           *fd_hdr;				 /* file for ANALYZE hdr */
	FILE           *fd_img;				 /* file for ANALYZE image */
	FILE           *fd_cor;				 /* file for y-shifts */
	char           *stdimg, *stdhdr;	 /* input file */
	char           *resimg, *reshdr;	 /* input file */
	char           *outimg, *outhdr;	 /* output img file */
	char           *corfil;				 /* output corrections */
	int             dim1, dim2, dim3;	 /* dimensions of image */
	int             i, j, k, m, n, thresh;
	int             first, last;
	long            num;
	float           min;
	float           err, sumerr, val;
	float           v1, v2;
	int            *shift;
	short          *img;
	int           **image1, **image2;

	if (argc != 9) {
		printf ("Usage: align1d stdhdr stdimg reshdr resimg outhdr outimg corfil thresh\n");
		return (ERROR);
	}
	stdhdr = argv[1];
	stdimg = argv[2];
	reshdr = argv[3];
	resimg = argv[4];
	outhdr = argv[5];
	outimg = argv[6];
	corfil = argv[7];
	thresh = atoi (argv[8]);

/*	Read Standard Image */

	if ((fd_hdr = fopen (stdhdr, "r")) == 0) {
		fprintf (stderr, "ERROR [align1d]: Cannot open: %s\n", stdhdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [align1d]: Reading: %s\n", stdhdr);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	if (dim3 != 1) {
		fprintf (stderr, "ERROR [align1d]: Not a 2D image: %s\n", stdimg);
		return (ERROR);
	}
	num = dim1 * dim2;
	img = (short *) calloc (num, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [align1d]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (stdimg, "r")) == 0) {
		fprintf (stderr, "ERROR [align1d]: Cannot open: %s\n", stdimg);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [align1d]: Reading: %s\n", stdimg);
		return (ERROR);
	}
	(void) fclose (fd_img);
	if ((image1 = imatrix (1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [align1d]: Cannot malloc image1\n");
		return (NULL);
	}
	k = 0;
	for (j = 1; j <= dim2; j++) {
		for (i = 1; i <= dim1; i++) {
			image1[j][i] = img[k];
			k++;
		}
	}

/*	Read Reslice Image */

	if ((fd_hdr = fopen (reshdr, "r")) == 0) {
		fprintf (stderr, "ERROR [align1d]: Cannot open: %s\n", reshdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [align1d]: Reading: %s\n", reshdr);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	if (dim1 != hdr.dime.dim[1] || dim2 != hdr.dime.dim[2] || dim3 != 1) {
		fprintf (stderr, "ERROR [align1d]: Dimensions of %s differ from %s\n", stdimg, resimg);
		return (ERROR);
	}
	img = (short *) calloc (num, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [align1d]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (resimg, "r")) == 0) {
		fprintf (stderr, "ERROR [align1d]: Cannot open: %s\n", resimg);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [align1d]: Reading: %s\n", resimg);
		return (ERROR);
	}
	(void) fclose (fd_img);
	if ((image2 = imatrix (1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [align1d]: Cannot malloc image2\n");
		return (NULL);
	}
	k = 0;
	for (j = 1; j <= dim2; j++) {
		for (i = 1; i <= dim1; i++) {
			image2[j][i] = img[k];
			k++;
		}
	}

	if ((fd_cor = fopen (corfil, "w")) == 0) {
		fprintf (stderr, "ERROR [align1d]: Unable to open %s\n", corfil);
		return (ERROR);
	}
	fprintf (fd_cor, "align1d of %s to %s\n", resimg, stdimg);
	fprintf (fd_cor, "%d 2\n", dim2);

/*	Align lines of image (starting from the top) */

	shift = (int *) calloc (num, sizeof (int));
	for (j = dim2; j >= 1; j--) {
		min = MAXFLOAT;
		for (k = -100; k < 100; k++) {
			n = 0;
			sumerr = 0;
			if (k < 0) {
				first = -k;
				last = dim1 + k;
			} else {
				first = 1;
				last = dim1 - k;
			}
			for (i = first; i < last; i++) {
				if (image1[j][i] >= thresh) {
					v1 = (float) image1[j][i];
					v2 = (float) image2[j][i + k];
					val = v2 - v1;
					sumerr += val * val;
					n++;
				}
			}
			err = sumerr / n;
			if (err < min) {
				shift[j] = k;
				min = err;
			}
		}
		fprintf (fd_cor, "%2d  %4d\n", dim2 - j + 1, shift[j]);
	}
	(void) fclose (fd_cor);

/*	Align and write image */

	n = 0;
	for (j = 1; j <= dim2; j++) {
		k = shift[j];
		for (i = 1; i <= dim1; i++) {
			m = i + k;
			if (m >= 1 && m <= dim1)
				img[n] = image2[j][m];
			else
				img[n] = 0;
			n++;
		}
	}
	if ((fd_hdr = fopen (outhdr, "w")) == 0) {
		fprintf (stderr, "ERROR [align1d]: Unable to open %s\n", outhdr);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [align1d]: Error writing to: %s\n", outhdr);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	if ((fd_img = fopen (outimg, "w")) == 0) {
		fprintf (stderr, "ERROR [align1d]: Unable to open %s\n", outimg);
		return (ERROR);
	}
	if ((fwrite (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [align1d]: Error writing to: %s\n", outimg);
		return (ERROR);
	}
	(void) fclose (fd_img);
	free (img);
	free (shift);
	free_imatrix (image1, 1, dim2, 1, dim1);
	free_imatrix (image2, 1, dim2, 1, dim1);
	return (OK);
}
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d15 1
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/align1d/RCS/align1d.c,v 1.1 1999/09/02 19:43:11 tom Exp tom $";
d73 1
a73 1
	fclose (fd_hdr);
d95 1
a95 1
	fclose (fd_img);
d118 1
a118 1
	fclose (fd_hdr);
d136 1
a136 1
	fclose (fd_img);
d188 1
a188 1
	fclose (fd_cor);
d212 1
a212 1
	fclose (fd_hdr);
d221 1
a221 1
	fclose (fd_img);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/align1d/RCS/align1d.c,v 1.1 1999/08/11 16:38:05 tom Exp $";
d27 10
a36 10
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	FILE           *fd_cor;			 /* file for y-shifts */
	char           *stdimg, *stdhdr; /* input file */
	char           *resimg, *reshdr; /* input file */
	char           *outimg, *outhdr; /* output img file */
	char           *corfil;			 /* output corrections */
	int             dim1, dim2, dim3; /* dimensions of image */
	int             i, j, k;
a39 1
	int             n, max1, max2, thresh;
a96 1
	max1 = 0;
a99 2
			if (image1[j][i] > max1)
				max1 = image1[j][i];
a137 1
	max2 = 0;
a140 2
			if (image2[j][i] > max2)
				max2 = image2[j][i];
d182 1
a182 1
		fprintf (fd_cor, "%2d  %4d\n", dim2-j+1, shift[j]);
d191 5
a195 6
		if (k < 0)
			last = dim1 + k;
		else
			last = dim1 - k;
		if (k < 0) {
			for (i = k; i < 0; i++) {
a196 5
				n++;
			}
		}
		for (i = 1; i <= last; i++) {
			img[n] = image2[j][i];
a198 6
		if (k > 0) {
			for (i = 0; i < k; i++) {
				img[n] = 0;
				n++;
			}
		}
@
