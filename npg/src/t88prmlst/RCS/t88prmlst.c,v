head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2004.02.20.15.29.28;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.27.18.09.43;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	96.10.16.17.23.18;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.08.30.14.35.09;	author tom;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Feb 2004
@
text
@/* $Log: t88prmlst.c,v $
 * Revision 1.4  2002/11/27  18:09:43  tom
 * *** empty log message ***
 *
 * Revision 1.3  1996/10/16  17:23:18  tom
 * sync with Version
 * new libimage
 *
 * Revision 1.1  1996/08/30  14:35:09  tom
 * Initial revision
 * */
/*
 * ===============================================================================
 *  Module:         t88prmlst
 *  Date:           Aug 1996
 *  Author:         Tom Videen
 *  Description:
 *		Create an abbreviated parameter file and image list which will
 *		permit t88mean to compute the scalers from the named image file.
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88prmlst/RCS/t88prmlst.c,v 1.4 2002/11/27 18:09:43 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <myvalues.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	MainHeader     *mh;
	FILE           *fp;
	char           *str1, *str2;
	char           *subject, *scanid;
	char           *imgfile;
	char           *lstfile;
	char           *prmfile;
	char           *sxrfile;
	char           *ptr;
	int             i;

	imgfile = argv[1];
	prmfile = argv[2];
	lstfile = argv[3];
	sxrfile = argv[4];

	file = make_imgfile (imgfile);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [t88prmlst]: Could not open %s\n", imgfile);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [t88prmlst]: Could not get MainHeader from %s\n", imgfile);
		return (ERROR);
	}
	mh = file->mh;

	fp = fopen (prmfile, "w");
	if (fp == (FILE *) NULL) {
		fprintf (stderr, "Error in opening file %s\n", prmfile);
		return (ERROR);
	}
	fprintf (fp, "#Created by t88prmlst\n");
	fprintf (fp, "category:       individual\n");
	fprintf (fp, "datatype:       pet_image\n");
	fprintf (fp, "smg_compute:    no\n");
	fprintf (fp, "acquisition:    low_resolution\n");
	fprintf (fp, "reconstruction: filtered_backprojection\n");
	fprintf (fp, "recfilter:      ramp\n");

	if (mh->scanner_type == 6)
		fprintf (fp, "scanner:        pett6\n");
	else if (mh->scanner_type == 953)
		fprintf (fp, "scanner:        953\n");
	else if (mh->scanner_type == 961)
		fprintf (fp, "scanner:        961\n");

	str1 = (char *) calloc (MAXPATH, sizeof(char));
	str2 = (char *) calloc (MAXPATH, sizeof(char));
	subject = (char *) calloc (10, sizeof(char));
	scanid = (char *) calloc (10, sizeof(char));
	if (str1 == NULL) return (ERROR);
	if (str2 == NULL) return (ERROR);
	if (subject == NULL) return (ERROR);
	if (scanid == NULL) return (ERROR);
	(void) memset (str1, 0, MAXPATH);
	(void) memset (str2, 0, MAXPATH);
	(void) memset (subject, 0, 10);
	(void) memset (scanid, 0, 10);

	(void) strcpy (str1, imgfile);
	ptr = strpbrk (str1, "1234567890");
	(void) strcpy (ptr, "");
	fprintf (fp, "species:        %s\n", str1);

	(void) strcpy (str1, imgfile);
	ptr = strpbrk (str1, "1234567890");
	(void) strcpy (str2, ptr);
	i = strspn (str2, "1234567890");
	(void) strncpy (subject, str2, i);

	(void) strcpy (str1, imgfile);
	ptr = strpbrk (str1, "1234567890");
	(void) strcpy (str2, ptr);
	i = strspn (str2, "1234567890");
	(void) strcpy (str1, str2 + i);
	ptr = strpbrk (str1, "1234567890");
	(void) strcpy (ptr, "");
	fprintf (fp, "tracer:         %s\n", str1);

	(void) strcpy (str1, imgfile);
	ptr = strpbrk (str1, "1234567890");
	(void) strcpy (str2, ptr);
	i = strspn (str2, "1234567890");
	(void) strcpy (str1, str2 + i);
	ptr = strpbrk (str1, "1234567890");
	i = strspn (ptr, "1234567890");
	(void) strncpy (scanid, ptr, i);

	(void) strcpy (str1, imgfile);
	ptr = strrchr (str1, '.');
	if (ptr != NULL)
		fprintf (fp, "extension:      %s\n", ptr + 1);

	(void) strcpy (str1, imgfile);
	ptr = strpbrk (str1, "_");
	if (ptr == NULL)
		fprintf (fp, "imgfilter:      none\n");
	else {
		(void) strcpy (str2, ptr + 1);
		ptr = strrchr (str2, '.');
		(void) strcpy (ptr, "");
		if (strncmp (str2, "g", 1) == 0)
			fprintf (fp, "imgfilter:      gauss 0.%s\n", str2 + 1);
		else if (strncmp (str2 + 1, "b", 1) == 0) {
			(void) memset (str1, 0, MAXPATH);
			(void) strncpy (str1, str2, 1);
			fprintf (fp, "imgfilter:      butterworth 0.%s %s\n", str1, str2 + 2);
		}
	}

	(void) fclose (fp);

	fp = fopen (lstfile, "w");
	if (fp == (FILE *) NULL) {
		fprintf (stderr, "Error in opening %s&n", lstfile);
		return (ERROR);
	}
	if (sxrfile != NULL) {
		(void) strcpy (str1, sxrfile);
		ptr = strpbrk (str1, "1234567890");
		(void) strcpy (str2, ptr);
		i = strspn (str2, "1234567890");
		ptr = str2 + i;
		if (ptr[0] != '\0' && ptr[0] != '.')
			fprintf (fp, "%s %s %s\n", subject, scanid, ptr);
		else
			fprintf (fp, "%s %s\n", subject, scanid);
	} else
		fprintf (fp, "%s %s\n", subject, scanid);
	(void) fclose (fp);
	return (0);
}
@


1.4
log
@*** empty log message ***
@
text
@d2 3
d15 1
a15 1
 *  Date:           Aug-96
d22 1
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88prmlst/RCS/t88prmlst.c,v 1.3 1996/10/16 17:23:18 tom Exp tom $";
d35 1
d87 8
a94 4
	str1 = (char *) malloc (MAXPATH);
	str2 = (char *) malloc (MAXPATH);
	subject = (char *) malloc (10);
	scanid = (char *) malloc (10);
@


1.3
log
@sync with Version
new libimage
@
text
@d2 4
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88prmlst/RCS/t88prmlst.c,v 1.1 1996/08/30 14:35:09 tom Exp tom $";
d86 4
a89 4
	memset (str1, 0, MAXPATH);
	memset (str2, 0, MAXPATH);
	memset (subject, 0, 10);
	memset (scanid, 0, 10);
d91 1
a91 1
	strcpy (str1, imgfile);
d93 1
a93 1
	strcpy (ptr, "");
d96 1
a96 1
	strcpy (str1, imgfile);
d98 1
a98 1
	strcpy (str2, ptr);
d100 1
a100 1
	strncpy (subject, str2, i);
d102 1
a102 1
	strcpy (str1, imgfile);
d104 1
a104 1
	strcpy (str2, ptr);
d106 1
a106 1
	strcpy (str1, str2 + i);
d108 1
a108 1
	strcpy (ptr, "");
d111 1
a111 1
	strcpy (str1, imgfile);
d113 1
a113 1
	strcpy (str2, ptr);
d115 1
a115 1
	strcpy (str1, str2 + i);
d118 1
a118 1
	strncpy (scanid, ptr, i);
d120 1
a120 1
	strcpy (str1, imgfile);
d125 1
a125 1
	strcpy (str1, imgfile);
d130 1
a130 1
		strcpy (str2, ptr + 1);
d132 1
a132 1
		strcpy (ptr, "");
d136 2
a137 2
			memset (str1, 0, MAXPATH);
			strncpy (str1, str2, 1);
d142 1
a142 1
	fclose (fp);
d150 1
a150 1
		strcpy (str1, sxrfile);
d152 1
a152 1
		strcpy (str2, ptr);
d161 2
a162 3
	fclose (fp);

	exit (0);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d16 1
a16 1
static char     rcsid[] = "$Header$";
@
