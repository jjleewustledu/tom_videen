head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2004.02.20.15.00.18;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.06.19.46.07;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	99.12.17.16.23.55;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.07.01.21.11.18;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	98.09.23.19.29.01;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.09.23.17.35.37;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.09.23.17.12.55;	author tom;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Feb 2004
@
text
@/*  $Log: sumlateral.c,v $
 * Revision 1.6  2000/09/06  19:46:07  tom
 * strcpy filename
 *
 * Revision 1.5  1999/12/17  16:23:55  tom
 * lint cleaning
 *
 * Revision 1.4  1999/07/01  21:11:18  tom
 * marker optional
 *
 * Revision 1.3  1998/09/23  19:29:01  tom
 * tmpmax increased 5%
 * length of slice markers increased
 *
 * Revision 1.2  1998/09/23  17:35:37  tom
 * use min and max values
 *
 * Revision 1.1  1998/09/23  17:12:55  tom
 * Initial revision
 * */
/* =============================================================================
 *  Module:         sumlateral.c
 *  Date:           Sep 1998
 *  Author:         Tom Videen
 *  Description:    Create a summed lateral projection from an image
 * =============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumlateral/RCS/sumlateral.c,v 1.6 2000/09/06 19:46:07 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <imgutil.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	FILE           *recfp;			 /* rec file pointer */
	char           *recfile;		 /* rec filename */
	char            runstamp[40];	 /* version, date and userid info */
	float        ***sum;			 /* tensor in which to accumulate total */
	float        ***img;			 /* input tensor */
	float           tmp, maxtmp;
	float           minval, maxval, limit;
	char           *infile;			 /* file to read */
	char           *outfile;		 /* file to write */
	int             fformat;		 /* file format */
	int             marker;
	int             nx, ny, nz;		 /* array dimensions */
	int             i, j, k;

/*
 * Get command line arguments.
 */
	if (argc != 14) {
		fprintf (stderr, "Usage: sumlateral infile outfile recfile minval maxval marker\n");
		return (ERROR);
	}
	infile = argv[1];
	outfile = argv[2];
	recfile = argv[3];
	minval = atof (argv[4]);
	maxval = atof (argv[5]);
	marker = atoi (argv[6]);
	limit = maxval-minval;

	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[7], argv[8], argv[9],
		 argv[10], argv[12], argv[13]);
	recfp = fopen (recfile, "a");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [sumimgplanes]: Cannot open %s\n", recfile);
		return (ERROR);
	}
/*
 *	Get main header and subheader.
 */
	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	file = make_imgfile (infile);
	(void) strcpy (file->mode, "r");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [sumlateral]: Cannot open %s\n", infile);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [sumlateral]: Cannot get MainHeader from %s\n", infile);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [sumlateral]: cannot find %s frame %d\n", infile, indx.frm);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [sumlateral]: Cannot read file subheader in %s\n", infile);
		return (ERROR);
	}
	nx = file->sh->dim1;
	ny = file->sh->dim2;
	nz = file->sh->dim3;
	if ((sum = f3tensor (1, 1, 1, nz, 1, ny)) == NULL) {
		fprintf (stderr, "ERROR [sumlateral]: Cannot malloc memory for sum\n");
		return (ERROR);
	}
	fprintf (stdout,"Reading %s frame %d\n", infile, indx.frm);
	if ((img = readtensor (file, &indx)) == NULL) {
		fprintf (stderr, "ERROR [sumlateral]: reading image data from %s\n", infile);
		return (ERROR);
	}
	recout (recfp, infile);
	(void) save_rcs (file, rcsid, runstamp);

/*
 *	Loop over all planes:
 */
	for (i = 1; i <= nz; i++) {
		for (j = 1; j <= ny; j++) {
			tmp = img[i][j][1] - minval;
			if (tmp > limit)
				sum[1][i][j] = limit;
			else if (tmp > 0.)
				sum[1][i][j] = tmp;
			else
				sum[1][i][j] = 0.;
		}
	}
	for (i = 1; i <= nz; i++) {
		for (j = 1; j <= ny; j++) {
			for (k = 2; k <= nx; k++) {
				tmp = img[i][j][k] - minval;
				if (tmp > limit)
					sum[1][i][j] += limit;
				else if (tmp > 0.)
					sum[1][i][j] += tmp;
			}
		}
	}

/*	Locate middle slice and set end points to max */

	if (marker > 0) {
		maxtmp = 0;
		for (i = 1; i <= nz; i++) {
			for (j = 1; j <= ny; j++) {
				tmp = sum[1][i][j];
				if (tmp > maxtmp)
					maxtmp = sum[1][i][j];
			}
		}
		i = nz / 2 + 1;
		for (j = 1; j <= 10; j++)
			sum[1][i][j] = 1.05*maxtmp;
		for (j = ny; j >= ny - 25; j--)
			sum[1][i][j] = 1.05*maxtmp;
	}

	free_f3tensor (img, 1, nz, 1, ny, 1, nx);
/*
 *	Write image (frame and nplanes set to 1)
 */

	close_imgfile (file);
	(void) strcpy (file->name, outfile);
	(void) strcpy (file->mode, "w");
	indx.frm = 1;
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [sumlateral]: Cannot open %s\n", outfile);
		return (ERROR);
	}
	fprintf (stdout,"Writing summed image %s\n", outfile);
	file->mh->nplane = 1;
	file->mh->nframe = 1;
	file->sh->dim1 = ny;
	file->sh->dim2 = nz;
	file->sh->dim3 = 1;
	file->sh->sample_size_1 = file->sh->sample_size_2;
	file->sh->sample_size_2 = file->sh->sample_size_3;
	file->sh->sample_size_3 = 1;
	fformat = file->mh->file_format;
	if (fformat == MATRIX_REV7)
		file->m7->sh->z_dimension = 1;
	else if (fformat == MATRIX_REV6)
		file->m6->mh->num_planes = 1;
	else if (fformat == PETT6)
		file->p6->number_of_slices = 1;
	if (put_mh (file) == ERROR)
		return (ERROR);
	if (writetensor (file, &indx, sum) == ERROR)
		return (ERROR);
	free_f3tensor (sum, 1, 1, 1, nz, 1, ny);
	free_imgfile (file);
	(void) fclose (recfp);
	return (OK);
}
@


1.6
log
@strcpy filename
@
text
@d2 3
d23 1
a23 1
 *  Date:           Sep-98
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumlateral/RCS/sumlateral.c,v 1.5 1999/12/17 16:23:55 tom Exp tom $";
d74 1
a74 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[7], argv[8], argv[9],
d91 1
a91 1
	strcpy (file->mode, "r");
d121 1
a121 1
	save_rcs (file, rcsid, runstamp);
d173 2
a174 2
	strcpy (file->name, outfile);
	strcpy (file->mode, "w");
d202 1
a202 1
	fclose (recfp);
@


1.5
log
@lint cleaning
@
text
@d2 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumlateral/RCS/sumlateral.c,v 1.4 1999/07/01 21:11:18 tom Exp tom $";
d170 1
a170 1
	file->name = outfile;
@


1.4
log
@marker optional
@
text
@d2 3
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumlateral/RCS/sumlateral.c,v 1.3 1998/09/23 19:29:01 tom Exp tom $";
a26 1
#include <math.h>
d28 1
a30 1
#include <nr.h>
d57 1
a57 1
		printf ("Usage: sumlateral infile outfile recfile minval maxval marker\n");
d106 1
a106 1
		fprintf (stderr, "ERROR [sumlateral]: Cannot malloc memory for sum%s\n");
d109 1
a109 1
	printf ("Reading %s frame %d\n", infile, indx.frm);
d174 1
a174 1
	printf ("Writing summed image %s\n", outfile);
@


1.3
log
@tmpmax increased 5%
length of slice markers increased
@
text
@d2 4
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumlateral/RCS/sumlateral.c,v 1.2 1998/09/23 17:35:37 tom Exp tom $";
d39 1
a39 1
	char            runstamp[40];		 /* version, date and userid info */
d47 1
d54 2
a55 2
	if (argc != 13) {
		printf ("Usage: sumlateral infile outfile recfile minval maxval\n");
d63 1
d66 2
a67 2
	sprintf (runstamp, "%s %s %s %s %s %s", argv[6], argv[7], argv[8],
		 argv[9], argv[11], argv[12]);
d143 8
a150 6
	maxtmp = 0;
	for (i = 1; i <= nz; i++) {
		for (j = 1; j <= ny; j++) {
			tmp = sum[1][i][j];
			if (tmp > maxtmp)
				maxtmp = sum[1][i][j];
d152 5
a157 5
	i = nz / 2 + 1;
	for (j = 1; j <= 10; j++)
		sum[1][i][j] = 1.05*maxtmp;
	for (j = ny; j >= ny - 25; j--)
		sum[1][i][j] = 1.05*maxtmp;
@


1.2
log
@use min and max values
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumlateral/RCS/sumlateral.c,v 1.1 1998/09/23 17:12:55 tom Exp tom $";
d146 4
a149 4
	for (j = 1; j <= 5; j++)
		sum[1][i][j] = maxtmp;
	for (j = ny; j >= ny - 5; j--)
		sum[1][i][j] = maxtmp;
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*  $Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumlateral/RCS/sumlateral.c,v 2.7 1996/10/16 17:14:54 tom Exp $";
d35 2
a36 2
	float           tmp, maxval;
	float           thresh, limit;
d47 1
a47 1
		printf ("Usage: sumlateral infile outfile recfile thresh limit\n");
d53 3
a55 2
	thresh = atof (argv[4]);
	limit = atof (argv[5]);
d111 1
a111 1
			tmp = img[i][j][1] - thresh;
d123 1
a123 1
				tmp = img[i][j][k] - thresh;
d134 1
a134 1
	maxval = 0;
d138 2
a139 2
			if (tmp > maxval)
				maxval = sum[1][i][j];
d144 1
a144 1
		sum[1][i][j] = maxval;
d146 1
a146 1
		sum[1][i][j] = maxval;
@
