head	1.26;
access;
symbols;
locks; strict;
comment	@ * @;


1.26
date	95.11.10.23.41.39;	author tom;	state Exp;
branches;
next	1.25;

1.25
date	95.11.10.16.47.36;	author tom;	state Exp;
branches;
next	1.24;

1.24
date	95.11.09.22.08.18;	author ty7777;	state Exp;
branches;
next	1.23;

1.23
date	95.11.09.22.02.56;	author ty7777;	state Exp;
branches;
next	1.22;

1.22
date	95.11.09.22.02.13;	author ty7777;	state Exp;
branches;
next	1.21;

1.21
date	95.10.10.16.59.23;	author ty7777;	state Exp;
branches;
next	1.20;

1.20
date	95.10.03.20.08.23;	author ty7777;	state Exp;
branches;
next	1.19;

1.19
date	95.09.25.16.39.51;	author ty7777;	state Exp;
branches;
next	1.18;

1.18
date	94.11.08.21.23.16;	author ty7777;	state Exp;
branches;
next	1.17;

1.17
date	94.11.08.20.54.23;	author ty7777;	state Exp;
branches;
next	1.16;

1.16
date	94.02.01.17.35.07;	author ty7777;	state Exp;
branches;
next	1.15;

1.15
date	93.11.08.21.50.07;	author ty7777;	state Exp;
branches;
next	1.14;

1.14
date	93.11.05.19.45.28;	author ty7777;	state Exp;
branches;
next	1.13;

1.13
date	93.11.05.17.50.01;	author ty7777;	state Exp;
branches;
next	1.12;

1.12
date	93.11.05.17.12.51;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	93.10.26.14.55.10;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	93.10.06.19.58.10;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	93.08.12.20.09.15;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	93.07.14.20.52.45;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	93.06.22.22.29.25;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	93.05.14.15.19.07;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	93.05.10.20.41.27;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	93.05.04.15.51.36;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.04.30.14.55.28;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.04.21.18.46.05;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.03.08.21.35.59;	author ty7777;	state Exp;
branches;
next	;


desc
@Sun version of code.
@


1.26
log
@*** empty log message ***
@
text
@/*$Id: butterworth.c,v 1.25 1995/11/10 16:47:36 tom Exp tom $*/
/*$Log: butterworth.c,v $
 * Revision 1.25  1995/11/10  16:47:36  tom
 * remove petutil parent directory from include statements
 *
 * Revision 1.24  1995/11/09  22:08:18  ty7777
 * Use filter instead of rfilter.
 *
 * Revision 1.23  1995/11/09  22:02:56  ty7777
 * Use libnpg.a
 *
 * Revision 1.22  1995/11/09  22:02:13  ty7777
 * Same as the last version.
 *
 * Revision 1.21  1995/10/10  16:59:23  ty7777
 * Let nz = 144.
 *
 * Revision 1.20  1995/10/03  20:08:23  ty7777
 * New HR version.
 *
 * Revision 1.19  1995/09/25  16:39:51  ty7777
 * Changed nz to 144.
 *
 * Revision 1.18  1994/11/08  21:23:16  ty7777
 * Use GetVersion.
 *
 * Revision 1.17  1994/11/08  20:54:23  ty7777
 * Use GetVersion.
 *
 * Revision 1.16  1994/02/01  17:35:07  ty7777
 * Added processing for images with more than 60 slices.
 *
 * Revision 1.15  1993/11/08  21:50:07  ty7777
 * Added \n to ednrec.
 *
 * Revision 1.14  1993/11/05  19:45:28  ty7777
 * Processing for date construction.
 *
 * Revision 1.13  1993/11/05  17:50:01  ty7777
 * Added processing for create_recfile.
 *
 * Revision 1.12  1993/11/05  17:12:51  ty7777
 * Added processing for recfile.
 *
 * Revision 1.11  1993/10/26  14:55:10  ty7777
 * Moved matval initialization to the begining of file.
 *
 * Revision 1.10  1993/10/06  19:58:10  ty7777
 * Images are fliped if necessary.
 *
 * Revision 1.9  1993/08/12  20:09:15  ty7777
 * Adding acs.
 * Adding rcs.
 *
 * Revision 1.8  1993/07/14  20:52:45  ty7777
 * Added conditional processing for HP machines.
 *
 * Revision 1.7  1993/06/22  22:29:25  ty7777
 * OpenEcat () in libhp.a is changed.
 *
 * Revision 1.6  1993/05/14  15:19:07  ty7777
 * Determine if there is a scaler.
 *
 * Revision 1.5  1993/05/10  20:41:27  ty7777
 * filter code -1 is found out to be a Ramp filter code.
 *
 * Revision 1.4  1993/05/04  15:51:36  ty7777
 * Checking filter code.
 *
 * Revision 1.3  1993/04/30  14:55:28  ty7777
 * Use getrealimg () and writerealimg ().
 **/

/*_________________________________________________________________
  Description:	This program filter an ECAT or PETT VI image by using
		the Butterworth filter.

  History:	Created by Tom Yang on 12/17/92.
_________________________________________________________________*/

#include <fcntl.h>
#include <imglist.h>
#include <matrix7.h>

static char     rcsid[] = "$Header: /home/npggw/tom/src/butterworth/RCS/butterworth.c,v 1.25 1995/11/10 16:47:36 tom Exp tom $";

main (argc, argv)
	int             argc;
	char          **argv;
{

#ifdef HP
	extern          butt3d ();

#else
	extern          butt3d_ ();

#endif

	BOOLEAN         create_recfile;
	COMMENT_INFO    comment_info_data;
	FILE           *recfp;
	Image_subheader **subheader_list;
	Main_header    *main_header;
	char            date[MAXLINE];
	char           *filter_image_file;
	char           *image_file;
	char            image_recfile[MAXPATH];
	char            recfile[MAXPATH];
	char           *uid;
	float           cmpix[3];
	float           f0;
	float          *image3d;
	float          *padimage3d;
	float           pixel_size;
	float           plane_separation;
	int             dimension;
	int             first_slice_index;
	int             i;
	int             last_slice_index;
	int             nx;
	int             ny;
	int             nz;
	int             scanner;
	int             order;
	int             xmargin;
	int             ymargin;
	short           width;
	short           height;
	short           num_slices;
	struct Matval   matval;

/*
 * Get command line arguments.
 */
	image_file = argv[1];
	filter_image_file = argv[2];
	f0 = atof (argv[3]);
	order = atoi (argv[4]);
	sprintf (date, "%s %s %s %s %s %s", argv[5], argv[6], argv[7], argv[8], argv[9], argv[10]);
	uid = argv[11];
	create_recfile = atoi (argv[12]);

/*
 * Initialization for matval.
 */
	matval.frame = 1;
	matval.plane = 1;
	matval.gate = 1;
	matval.data = 0;
	matval.bed = 0;

	if (getimagedim (image_file, matval, &scanner, &width, &height, &num_slices,
			 &pixel_size, &pixel_size, &plane_separation) == FAIL) {
		fprintf (stderr, "getimagedim () error.\n");
		exit (FAIL);
	}
	subheader_list = (Image_subheader **) pkg_malloc (num_slices * sizeof (caddr_t),
							  "butterworth", "subheader_list");

	dimension = width * height * num_slices;
	image3d = (float *) pkg_malloc (dimension * sizeof (float), "gauss", "image3d");
	main_header = (Main_header *) calloc (1, sizeof (Main_header));

	if (getrealimg (image_file, scanner, matval, width, height, num_slices, image3d,
			main_header, subheader_list) == FAIL) {
		fprintf (stderr, "Error in getrealimg ().\n");
		free (image3d);
		exit (FAIL);
	}

/*
 * Pad the 3D image array at head and tail
 */
	nx = FILTER_XDIM;
	ny = FILTER_YDIM;
	nz = 144;

/*
 * if (num_slices <= FILTER_STHRESH_NUM) nz	= FILTER_ZDIMS; else if (num_slices <=
 * FILTER_MTHRESH_NUM) nz	= FILTER_ZDIMM; else if (num_slices <= FILTER_BTHRESH_NUM)
 * nz	= FILTER_ZDIMB; else { fprintf (stderr, "The maximum number of slices in a image
 * which is to be filtered is %d\n", FILTER_BTHRESH_NUM); fprintf (stderr, "Please see Tom
 * Yang (ty7777@@petadmin.wustl.edu) for a quick fix.\n"); exit (FAIL); }
 */

	first_slice_index = (nz - num_slices) / 2;
	last_slice_index = first_slice_index + (num_slices - 1);
	xmargin = (nx - width) / 2;
	ymargin = (ny - height) / 2;

	dimension = nx * ny * nz;
	padimage3d = (float *) calloc (dimension, sizeof (float));
	if (padimage3d == (float *) NULL) {
		fprintf (stderr, "Error: Can't allocate padimage3d.\n");
		exit (FAIL);
	}
	padimage (image3d, width, height, num_slices, nx, ny, nz,
		  first_slice_index, last_slice_index, xmargin, ymargin, padimage3d);
	free (image3d);

/*
 * Filtering padded image by using the Butterworth filter
 */
	cmpix[0] = pixel_size;
	cmpix[1] = pixel_size;
	cmpix[2] = plane_separation;

#ifdef HP
	butt3d (padimage3d, &nx, &ny, &nz, cmpix, &f0, &order);
#else
	butt3d_ (padimage3d, &nx, &ny, &nz, cmpix, &f0, &order);
#endif

/*
 * Trim the 3D padded image array at head, tail, and boundary
 */
	dimension = width * height * num_slices;
	image3d = (float *) pkg_malloc (dimension * sizeof (float), "filter", "image3d");
	trim (padimage3d, nx, ny, nz, width, height, num_slices,
	      first_slice_index, last_slice_index, xmargin, ymargin, image3d);
	free (padimage3d);

	for (i = 0; i < num_slices; i++) {
		(subheader_list[i])->filter_code += BUTTERWORTH_FILTER_CODE;
		(subheader_list[i])->filter_ramp_slope = f0;
		(subheader_list[i])->filter_order = (float) order;
	}

/*
 * Construct the rec file name and creates the rec file header.
 */
	if (create_recfile) {
		strcpy (recfile, filter_image_file);
		strcat (recfile, REC_EXT);

		recfp = fopen (recfile, "w");
		if (recfp == (FILE *) NULL) {
			fprintf (stderr, "Error in opening rec file %s\n", recfile);
			exit (FAIL);
		}
		fprintf (recfp, "rec %s %s %s\n", filter_image_file, date, uid);
		fprintf (recfp, "%s %s %.3f %d\n", argv[0], image_file, f0, order);
		fprintf (recfp, "   %s\n\n", rcsid);

/*
 * Copy the image rec files if there are any.
 */
		strcpy (image_recfile, image_file);
		strcat (image_recfile, REC_EXT);
		copyrec (recfp, image_recfile);
		fprintf (recfp, "endrec\n");
		fclose (recfp);
	}

/*
 * Write the 3D array to filter file.
 */
	if (GetVersion (rcsid, main_header->physician_name) == FAIL) {
		strncpy (main_header->physician_name, rcsid + 5,
			 sizeof (main_header->physician_name) - 1);
	}
	strncpy (main_header->operator_name, date, sizeof (main_header->operator_name) - 1);
	comment_info (main_header->study_description, &comment_info_data);
	comment_info_data.butterworth3d_filter = TRUE;
	info2comment (comment_info_data, main_header->study_description);

	if (writerealimg (filter_image_file, matval, width, height, num_slices, image3d,
			  main_header, subheader_list) == FAIL) {
		fprintf (stderr, "Error in writerealimg ().\n");
	}
	for (i = 0; i < num_slices; i++) {
		free (subheader_list[i]);
	}
	free (subheader_list);
	free (main_header);
	free (image3d);
}
@


1.25
log
@remove petutil parent directory from include statements
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.24 1995/11/09 22:08:18 ty7777 Exp tom $*/
d3 3
d75 1
a75 1
  Description:	This program filter an ECAT or PETT VI image by using 
d78 1
a78 1
  History:	Created by Tom Yang on 12/17/92. 
d85 1
a85 1
static char rcsid []= "$Header: /export/home/npggw/tom/src/butterworth/RCS/butterworth.c,v 1.24 1995/11/09 22:08:18 ty7777 Exp tom $";
d88 2
a89 2
	int	argc;
	char	**argv;
d91 1
d93 2
a94 1
	extern		butt3d ();
d96 2
a97 1
	extern		butt3d_ ();
d100 32
a131 32
	BOOLEAN		create_recfile;
	COMMENT_INFO	comment_info_data;
	FILE		*recfp;
	Image_subheader	**subheader_list;
	Main_header	*main_header;
	char		date [MAXLINE];
	char		*filter_image_file;
	char		*image_file;
	char		image_recfile [MAXPATH];
	char		recfile [MAXPATH];
	char		*uid;
	float		cmpix [3];
	float		f0;
	float		*image3d;
	float		*padimage3d;
	float		pixel_size;
	float		plane_separation;
	int		dimension;
	int		first_slice_index;
	int		i;
	int		last_slice_index;
	int		nx;
	int		ny;
	int		nz;
	int		scanner;
	int		order;
	int		xmargin;
	int		ymargin;
	short		width;
	short		height;
	short		num_slices;
	struct Matval	matval;
d133 7
a139 7
	/*______________________________________________________
	 * Get command line arguments.
	 *______________________________________________________*/
	image_file		= argv [1];
	filter_image_file	= argv [2];
	f0			= atof (argv [3]);
	order			= atoi (argv [4]);
d141 2
a142 2
	uid			= argv [11];
	create_recfile		= atoi (argv [12]);
d144 8
a151 8
	/*______________________________________________________
	 * Initialization for matval.
	 *______________________________________________________*/
	matval.frame	= 1;
	matval.plane	= 1;
	matval.gate	= 1;
	matval.data	= 0;
	matval.bed	= 0;
d153 2
a154 3
	if (getimagedim (image_file, matval, &scanner, &width, &height, &num_slices, 
		&pixel_size, &pixel_size, &plane_separation) == FAIL) 
	{
d158 2
d161 3
a163 2
	subheader_list	= (Image_subheader **) pkg_malloc (num_slices * sizeof (caddr_t), 
				"butterworth", "subheader_list");
d165 2
a166 7
	dimension	= width * height * num_slices;
	image3d		= (float *) pkg_malloc (dimension * sizeof (float), "gauss", "image3d");
	main_header	= (Main_header *) calloc (1, sizeof (Main_header));

	if (getrealimg (image_file, scanner, matval, width, height, num_slices, image3d, 
		main_header, subheader_list) == FAIL)
	{
d172 6
a177 23
	/*______________________________________________________
	 * Pad the 3D image array at head and tail.
	 *______________________________________________________*/
	nx	= FILTER_XDIM;
	ny	= FILTER_YDIM;
	nz	= 144;
	/*
	if (num_slices <= FILTER_STHRESH_NUM)
		nz	= FILTER_ZDIMS;
	else if (num_slices <= FILTER_MTHRESH_NUM)
		nz	= FILTER_ZDIMM;
	else if (num_slices <= FILTER_BTHRESH_NUM)
		nz	= FILTER_ZDIMB;
	else
	{
		fprintf (stderr, 
		"The maximum number of slices in a image which is to be filtered is %d\n",
		FILTER_BTHRESH_NUM);
		fprintf (stderr, 
		"Please see Tom Yang (ty7777@@petadmin.wustl.edu) for a quick fix.\n");
		exit (FAIL);
	}
	*/
d179 7
a185 4
	first_slice_index	= (nz - num_slices) / 2;
	last_slice_index	= first_slice_index + (num_slices - 1);
	xmargin			= (nx - width) / 2;
	ymargin			= (ny - height) / 2;
d187 8
a194 4
	dimension	= nx * ny * nz;
	padimage3d	= (float *) calloc (dimension,  sizeof (float));
	if (padimage3d == (float *) NULL)
	{
d198 2
a199 3

	padimage (image3d, width, height, num_slices, nx, ny, nz, 
		first_slice_index, last_slice_index, xmargin, ymargin, padimage3d);
d202 6
a207 6
	/*______________________________________________________
	 * Filtering padded image by using the Butterworth filter.
	 *______________________________________________________*/
	cmpix [0]	= pixel_size;
	cmpix [1]	= pixel_size;
	cmpix [2]	= plane_separation;
d215 7
a221 7
	/*______________________________________________________
	 * Trim the 3D padded image array at head, tail, and boundary.
	 *______________________________________________________*/
	dimension	= width * height * num_slices;
	image3d		= (float *) pkg_malloc (dimension * sizeof (float), "filter", "image3d");
	trim (padimage3d, nx, ny, nz, width, height, num_slices, 
		first_slice_index, last_slice_index, xmargin, ymargin, image3d);
d224 4
a227 5
	for (i = 0; i < num_slices; i++)
	{
		(subheader_list [i])->filter_code		+= BUTTERWORTH_FILTER_CODE;
		(subheader_list [i])->filter_cutoff_frequency	= f0;
		(subheader_list [i])->filter_order		= (float) order;
d230 4
a233 5
	/*
	 * Construct the rec file name and creates the rec file header.
	 */
	if (create_recfile)
	{
d237 2
a238 3
		recfp	= fopen (recfile, "w");
		if (recfp == (FILE *) NULL)
		{
d243 1
a243 1
		fprintf (recfp, "%s %s %.3f %d\n", argv [0], image_file, f0, order);
d246 3
a248 3
		/*
	 	 * Copy the image rec files if there are any.
	 	 */
d256 6
a261 7
	/*
	 * Write the 3D array to filter file.
	 */
	if (GetVersion (rcsid, main_header->physician_name) == FAIL)
	{
		strncpy (main_header->physician_name, rcsid + 5, 
		sizeof (main_header->physician_name) - 1);
d265 1
a265 1
	comment_info_data.butterworth3d_filter	= TRUE;
d268 2
a269 3
	if (writerealimg (filter_image_file, matval, width, height, num_slices, image3d, 
			main_header, subheader_list) == FAIL)
	{
d272 2
a273 4

	for (i = 0; i < num_slices; i++)
	{
		free (subheader_list [i]);
@


1.24
log
@Use filter instead of rfilter.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.23 1995/11/09 22:02:56 ty7777 Exp ty7777 $*/
d3 3
d79 2
a80 2
#include <petutil/imglist.h>
#include <petutil/matrix7.h>
d82 1
a82 1
static char rcsid []= "$Header: /home/petsun4/ty7777/src/butterworth/RCS/butterworth.c,v 1.23 1995/11/09 22:02:56 ty7777 Exp ty7777 $";
@


1.23
log
@Use libnpg.a
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.22 1995/11/09 22:02:13 ty7777 Exp ty7777 $*/
d3 3
d79 1
a79 1
static char rcsid []= "$Header: /home/petsun4/ty7777/src/butterworth/RCS/butterworth.c,v 1.22 1995/11/09 22:02:13 ty7777 Exp ty7777 $";
d231 3
a233 3
		(subheader_list [i])->rfilter_code	+= BUTTERWORTH_FILTER_CODE;
		(subheader_list [i])->rfilter_cutoff	= f0;
		(subheader_list [i])->rfilter_order	= (float) order;
@


1.22
log
@Same as the last version.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.21 1995/10/10 16:59:23 ty7777 Exp ty7777 $*/
d3 3
d74 1
a74 1
#include <petutil/matrix_old.h>
d76 1
a76 1
static char rcsid []= "$Header: /home/petsun4/ty7777/src/butterworth/RCS/butterworth.c,v 1.21 1995/10/10 16:59:23 ty7777 Exp ty7777 $";
@


1.21
log
@Let nz = 144.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.20 1995/10/03 20:08:23 ty7777 Exp ty7777 $*/
d3 3
d73 1
a73 1
static char rcsid []= "$Header: /home/petsun4/ty7777/src/butterworth/RCS/butterworth.c,v 1.20 1995/10/03 20:08:23 ty7777 Exp ty7777 $";
@


1.20
log
@New HR version.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.19 1995/09/25 16:39:51 ty7777 Exp ty7777 $*/
d3 3
d68 1
a68 1
#include <petutil/matrix.h>
d70 1
a70 1
static char rcsid []= "$Header: /export/home/petsun4/ty7777/src/butterworth/RCS/butterworth.c,v 1.19 1995/09/25 16:39:51 ty7777 Exp ty7777 $";
@


1.19
log
@Changed nz to 144.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.18 1994/11/08 21:23:16 ty7777 Exp ty7777 $*/
d3 3
d67 1
a67 1
static char rcsid []= "$Header: /home/petsun4/ty7777/src/butterworth/RCS/butterworth.c,v 1.18 1994/11/08 21:23:16 ty7777 Exp ty7777 $";
d219 3
a221 3
		(subheader_list [i])->filter_code	+= BUTTERWORTH_FILTER_CODE;
		(subheader_list [i])->filter_params [2]	= f0;
		(subheader_list [i])->filter_params [3]	= (float) order;
@


1.18
log
@Use GetVersion.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.17 1994/11/08 20:54:23 ty7777 Exp ty7777 $*/
d3 3
d64 1
a64 1
static char rcsid []= "$Header: /home/petsun4/ty7777/src/butterworth/RCS/butterworth.c,v 1.17 1994/11/08 20:54:23 ty7777 Exp ty7777 $";
d156 2
d173 1
@


1.17
log
@Use GetVersion.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.16 1994/02/01 17:35:07 ty7777 Exp ty7777 $*/
d3 3
d61 1
a61 1
static char rcsid []= "$Header$";
d247 1
d250 1
@


1.16
log
@Added processing for images with more than 60 slices.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.15 1993/11/08 21:50:07 ty7777 Exp ty7777 $*/
d3 3
d58 1
a58 1
static char rcsid []= "$Id: butterworth.c,v 1.15 1993/11/08 21:50:07 ty7777 Exp ty7777 $";
d243 3
a245 1
	strncpy (main_header->physician_name, rcsid + 5, sizeof (main_header->physician_name) - 1);
@


1.15
log
@Added \n to ednrec.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.14 1993/11/05 19:45:28 ty7777 Exp ty7777 $*/
d3 3
d55 1
a55 1
static char rcsid []= "$Id: butterworth.c,v 1.14 1993/11/05 19:45:28 ty7777 Exp ty7777 $";
d147 1
a147 1
	if (num_slices <= FILTER_THRESH_NUM)
d149 4
d154 8
a161 1
		nz	= FILTER_ZDIMB;
@


1.14
log
@Processing for date construction.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.13 1993/11/05 17:50:01 ty7777 Exp ty7777 $*/
d3 3
d52 1
a52 1
static char rcsid []= "$Id: butterworth.c,v 1.13 1993/11/05 17:50:01 ty7777 Exp ty7777 $";
d219 1
a219 1
		fprintf (recfp, "endrec");
@


1.13
log
@Added processing for create_recfile.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.12 1993/11/05 17:12:51 ty7777 Exp ty7777 $*/
d3 3
d49 1
a49 1
static char rcsid []= "$Id: butterworth.c,v 1.12 1993/11/05 17:12:51 ty7777 Exp ty7777 $";
d66 1
a69 1
	char		*now;
d101 3
a103 3
	now			= argv [5];
	uid			= argv [6];
	create_recfile		= atoi (argv [7]);
d206 1
a206 1
		fprintf (recfp, "rec %s %s %s\n", filter_image_file, now, uid);
d224 1
a224 1
	strncpy (main_header->operator_name, now, sizeof (main_header->operator_name) - 1);
@


1.12
log
@Added processing for recfile.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.11 1993/10/26 14:55:10 ty7777 Exp ty7777 $*/
d3 3
d46 1
a46 1
static char rcsid []= "$Id: butterworth.c,v 1.11 1993/10/26 14:55:10 ty7777 Exp ty7777 $";
d58 1
d100 1
d192 4
a195 2
	strcpy (recfile, filter_image_file);
	strcat (recfile, REC_EXT);
d197 18
a214 5
	recfp	= fopen (recfile, "w");
	if (recfp == (FILE *) NULL)
	{
		fprintf (stderr, "Error in opening rec file %s\n", recfile);
		exit (FAIL);
a215 12
	fprintf (recfp, "rec %s %s %s\n", filter_image_file, now, uid);
	fprintf (recfp, "%s %s %.3f %d\n", argv [0], image_file, f0, order);
	fprintf (recfp, "   %s\n\n", rcsid);

	/*
	 * Copy the image rec files if there are any.
	 */
	strcpy (image_recfile, image_file);
	strcat (image_recfile, REC_EXT);
	copyrec (recfp, image_recfile);
	fprintf (recfp, "endrec");
	fclose (recfp);
@


1.11
log
@Moved matval initialization to the begining of file.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.10 1993/10/06 19:58:10 ty7777 Exp ty7777 $*/
d3 3
d40 1
a40 1
#include <petutil/petutil.h>
d43 1
a43 1
static char rcsid []= "$Id: butterworth.c,v 1.10 1993/10/06 19:58:10 ty7777 Exp ty7777 $";
d56 1
d61 4
d94 2
d184 30
@


1.10
log
@Images are fliped if necessary.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.9 1993/08/12 20:09:15 ty7777 Exp $*/
d3 3
d40 1
a40 1
static char rcsid []= "$Id: butterworth.c,v 1.9 1993/08/12 20:09:15 ty7777 Exp $";
d87 9
a176 10


	/*
	 * Assign default values for matval.
	 */
	matval.frame	= 1;
	matval.plane	= 1;
	matval.gate	= 1;
	matval.data	= 0;
	matval.bed	= 0;
@


1.9
log
@Adding acs.
Adding rcs.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.8 1993/07/14 20:52:45 ty7777 Exp $*/
d3 4
d37 1
a37 1
static char rcsid []= "$Id$";
d49 1
a49 1
	BOOLEAN		scale_in_comment;
a51 1
	char		comments [MAXLINE];
a53 1
	char		label [MAXLINE];
a59 1
	float		scaling_factor;
a83 9
	/*
	 * Assign default values for matval.
	 */
	matval.frame	= 1;
	matval.plane	= 1;
	matval.gate	= 1;
	matval.data	= 0;
	matval.bed	= 0;

d162 3
a164 16
	if (main_header->study_description != NULL && strlen (main_header->study_description) > 0)
	{
		i	= sscanf (main_header->study_description, "%s %f", label, &scaling_factor);
		if (i == 2 && strcmp (label, SCALE_LABEL) == 0)
		{
			scale_in_comment	= TRUE;
		}
		else
		{
			scale_in_comment	= FALSE;
		}
	}
	else
	{
		scale_in_comment	= FALSE;
	}
d166 9
a174 8
	if (scale_in_comment)
	{
		sprintf (comments, "%s %f ", SCALE_LABEL, scaling_factor);
		strcat (comments, "3D Butterworth"); 
	}
	else
		strcpy (comments, "3D Butterworth Filtered Image"); 
	strncpy (main_header->study_description, comments, sizeof (main_header->study_description));
@


1.8
log
@Added conditional processing for HP machines.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.7 1993/06/22 22:29:25 ty7777 Exp ty7777 $*/
d3 3
d32 2
@


1.7
log
@OpenEcat () in libhp.a is changed.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.6 1993/05/14 15:19:07 ty7777 Exp ty7777 $*/
d3 3
d34 3
d38 1
a38 3
	/*
	extern		butt3d ();
	*/
d143 3
d147 1
a147 3
	/*
	butt3d (padimage3d, &nx, &ny, &nz, cmpix, &f0, &order);
	*/
@


1.6
log
@Determine if there is a scaler.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.5 1993/05/10 20:41:27 ty7777 Exp ty7777 $*/
d3 3
d32 3
d90 2
a91 2
	subheader_list	= (Image_subheader **) pkg_malloc (num_slices * sizeof (caddr_t), "gauss", 
						"subheader_list");
d140 3
@


1.5
log
@filter code -1 is found out to be a Ramp filter code.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.4 1993/05/04 15:51:36 ty7777 Exp ty7777 $*/
d3 3
d30 1
d33 2
d36 1
a36 1
	char		*filter_image_file;
d43 1
d151 26
a176 1
	strcpy (main_header->study_description, "NPG Butterworth Filtered Image");
@


1.4
log
@Checking filter code.
@
text
@d1 1
a1 1
/*$Id: butterworth.c,v 1.3 1993/04/30 14:55:28 ty7777 Exp ty7777 $*/
d3 3
a26 1
	BOOLEAN		encoded_flag;
a28 1
	MatrixFile	*fptr;
a37 1
	int		fd;
d95 6
a100 3
	nx	= BUTTERWORTH_XDIM;
	ny	= BUTTERWORTH_YDIM;
	nz	= BUTTERWORTH_ZDIM;
d139 1
a139 9
		if ((subheader_list [i])->filter_code < 0)
		{
			fprintf (stderr, "Warning: filter code %d in the image file %s might be wrong.\n",
				subheader_list [i]->filter_code, image_file);
			(subheader_list [i])->filter_code	= BUTTERWORTH_FILTER_CODE;
		}
		else
			(subheader_list [i])->filter_code	+= BUTTERWORTH_FILTER_CODE;

@


1.3
log
@Use getrealimg () and writerealimg ().
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d136 9
a144 1
		(subheader_list [i])->filter_code	+= GAUSSIAN_FILTER_CODE;
d146 1
@


1.2
log
@Same as the last.
@
text
@d1 2
a2 5
/*$Id: butterworth.c,v 1.1 1993/03/08 21:35:59 ty7777 Exp ty7777 $*/
/*$Log: butterworth.c,v $
 * Revision 1.1  1993/03/08  21:35:59  ty7777
 * Initial revision
 **/
d5 2
a6 2
  Description:	This program filter an ECAT image by using the Butterworth
		filter.
a14 7
#define DEFAULT_SEP		0.3375
#define BUTTERWORTH_XDIM	144
#define BUTTERWORTH_YDIM	144
#define BUTTERWORTH_ZDIM	48

char list [] = "*;*;*;*"; /* any frame plane gate bed */

d21 1
d23 1
d25 1
a25 2
	Mlist		*mlist;
	char		*ecat_image_file;
d34 1
a34 1
	int		diff;  /* number of differences between spec and actual */
d41 1
d53 1
a53 1
	ecat_image_file		= argv [1];
a57 3
	/*______________________________________________________
	 * Open ECAT image and get image dimensions and voxel sizes.
	 *______________________________________________________*/
d67 2
a68 3
	fptr	= OpenEcat (ecat_image_file, &num_slices, &width, &height, 
				&pixel_size, &plane_separation, matval);
	if (fptr == (MatrixFile *) NULL)
d70 1
a70 1
		fprintf (stderr, "OpenEcat error in filter.c.\n");
d74 2
a75 2
	if (plane_separation == 0.0)
		plane_separation	= DEFAULT_SEP;
d77 6
a82 6
	/*
	 * The number of mats in a list always gives the correct number of
	 * slices.
	 */
	mlist	= make_list (ecat_image_file, (char *) NULL, list, &diff);
	if (!mlist) 
d84 2
a85 2
		fprintf (stderr, "make_list error.\n");
		matrix_close (fptr);
a87 1
	num_slices	= mlist->nmats;
a88 3
	subheader_list	= (Image_subheader **) pkg_malloc (num_slices * sizeof (caddr_t), "filter", 
						"subheader_list");

a89 8
	 * Build an 3D image array.
	 *______________________________________________________*/
	dimension	= width * height * num_slices;
	image3d		= (float *) pkg_malloc (dimension * sizeof (float), "filter", "image3d");

	get3dreal (fptr, width, height, num_slices, mlist, image3d, subheader_list);

	/*______________________________________________________
d103 1
a103 1
	if (image3d == (float *) NULL)
d131 5
a135 5
	/*______________________________________________________
	 * Write 3D image to an ECAT matrix file.
	 *______________________________________________________*/
	mlist->frames	= 1;
	mlist->planes	= num_slices;
d137 6
a142 3
	write3dreal (filter_image_file, fptr->mhptr->file_type, mlist, matval, width, height, 
		num_slices, pixel_size, plane_separation, BUTTERWORTH_FILTER_CODE, f0, order,
		image3d, fptr->mhptr, subheader_list);
d144 4
d149 1
a150 2
	free_Mlist (mlist);
	matrix_close (fptr);
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
@
