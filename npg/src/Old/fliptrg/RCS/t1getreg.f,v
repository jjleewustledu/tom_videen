head	1.1;
access;
symbols;
locks; strict;
comment	@c @;


1.1
date	2004.02.16.15.15.04;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@C$Id: t1getreg.f,v 1.7 1993/12/28 20:11:41 ty7777 Exp $
C$Log: t1getreg.f,v $
c Revision 1.7  1993/12/28  20:11:41  ty7777
c Added reading for spherical region format.
c
c Revision 1.6  1993/12/28  17:33:47  ty7777
c Deleted unused variable A.
c
c Revision 1.5  1993/12/28  17:29:41  ty7777
c Added processing for spherical region.
c
c Revision 1.4  1993/11/23  20:26:40  ty7777
c Commented out the list printing for the weight.
c
c Revision 1.3  1993/11/22  17:08:27  ty7777
c Added processing for filetype.
c
c Revision 1.2  1993/11/19  20:29:47  ty7777
c Before reading filetype.
c
c Revision 1.1  1993/11/17  17:25:08  ty7777
c Initial revision
c
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  Subroutine:   t1getreg.f
C
C  Author:       Tom O. Videen
C  Date:         05-Aug-90
C  Written For:  rapture
C
C  History:
C     Modified 05-Nov-91:
C        1) Option to compute weighted ROIs (WEIGHTVOI);
C        2) Use T1ZERORG;
C        3) Read REGNAME from file.
C     Modified 20-Nov-91:
C        1) If file is incomplete (no weights or no limit), coordinates
C           are still read without error.
C     Modified 23-Nov-93 by Tom Yang:
C        1) Port to the UNIX environment.
C        2) Added reading for filetype: 1 and moved the image name to the first line.
C           filetype:   1 p2180ho1.smg
C           Old format will not be affected.
C     Modified 28-Dec-93 by Tom Yang to add processing for spherical regions.
C
C  Intent:
C     Get a region from a disk file.
C
C  Uses:
C     GTSTRING
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE T1GETREG
C
      INCLUDE 'rapture.inc'
C
      INTEGER*4     NEWLIMIT  ! new value for LIMIT read from input file
      INTEGER*4     I,J,N     ! local
      INTEGER*4     X,Y       ! indices array SETC (pixel coordinates)
      INTEGER*4     L         ! location in STR
      INTEGER*4     SLC       ! local for SLICE
      INTEGER*4     FILETYPE  ! 1, 2 for UNIX.
C
      CHARACTER*80  Q         ! query to user
      CHARACTER*80  HEADER
      CHARACTER*80  STR       ! string
      CHARACTER*256 UPRNAME   ! region file name with .TRG extension.
      CHARACTER*256 RCSHEADER
C
C  All region files have extension .trg (T-ReGion)
C
      RCSHEADER = '$Id: t1getreg.f,v 1.7 1993/12/28 20:11:41 ty7777 Exp $'
C
100   Q = 'Region file name'
      STR = RNAME
      CALL GTSTRING (Q, STR)
      IF (STR (1:6) .EQ. 'CANCEL') RETURN
      L = IANYR (STR, '.')
      IF (L .LE. 0) THEN
        L = INANYR (STR, ' ')
        RNAME   = STR (1:L)//'.trg'
        UPRNAME = STR (1:L)//'.TRG'
      ELSE
        RNAME = STR (1:20)
      END IF
C
      OPEN (DISK, FILE = RNAME, STATUS = 'OLD', ERR = 220)
      GO TO 200
220   OPEN (DISK, FILE = UPRNAME, STATUS = 'OLD', ERR = 120)
      GO TO 200
C
120   WRITE (USEROUT, *) '*** Cannot open ', RNAME
      GO TO 100
C
C  Region file ID
C
200   READ (DISK, 8000) HEADER
      FILETYPE = 0
      IF (HEADER (1:8) .EQ. 'filetype') THEN
        READ (HEADER (10:14), 8004) FILETYPE
        REGNAME = HEADER (15:34)
      ENDIF
      IF (FILETYPE .NE. 1 .AND. FILETYPE .NE. 2) REWIND (DISK)
      READ (DISK, 8000) RID
      WRITE (USEROUT, 8001) RID
      WRITE (LOGOUT, 8002) RNAME
      WRITE (LOGOUT, 8000) RID
      IF (FILETYPE .EQ. 1 .OR. FILETYPE .EQ. 2) THEN
        READ (RID (31:33), 8003) XSEED
        READ (RID (35:37), 8003) YSEED
        READ (RID (39:41), 8003) ZSEED
      ELSE
        REGNAME = RID (1:20)
        READ (RID (51:53), 8003) XSEED
        READ (RID (55:57), 8003) YSEED
        READ (RID (59:61), 8003) ZSEED
      ENDIF
C
8000  FORMAT (A80)
8001  FORMAT (1X, A80)
8002  FORMAT ('Reading: ', A20)
8003  FORMAT (I3)
8004  FORMAT (I5)
C
C  Clear old region parameters
C
      CALL T1ZERORG
      MAXT = 0.
      THRESHMAXT = 0
C
C  Region summary
C
      IF (FILETYPE .NE. 2) THEN
        READ (DISK, 8100) RSLICES, RPIXELS, XCTR, YCTR, ZCTR, XMIN, XMAX,
     &    YMIN, YMAX, ZMIN, ZMAX, THRESH, SIGN
        WRITE (USEROUT, 8101) RSLICES, RPIXELS, XCTR, YCTR, ZCTR, XMIN,
     &    XMAX, YMIN, YMAX, ZMIN, ZMAX, THRESH
      ELSE
        READ (DISK, 8099) RSLICES, RPIXELS, XCTR, YCTR, ZCTR, XMIN, XMAX,
     &    YMIN, YMAX, ZMIN, ZMAX, RADIUS, SIGN
        WRITE (USEROUT, 8102) RSLICES, RPIXELS, XCTR, YCTR, ZCTR, XMIN,
     &    XMAX, YMIN, YMAX, ZMIN, ZMAX, RADIUS
      ENDIF
8099  FORMAT (I2, I7, 1X, 3F8.3, 3(2X, 2I4), I4, I3)
8100  FORMAT (I2, I7, 1X, 3F8.3, 3(2X, 2I4), I8, I3)
8101  FORMAT (1X, I2, I7, 1X, 3F8.3, 3(2X, 2I4), I8)
8102  FORMAT (1X, I2, I7, 1X, 3F8.3, 3(2X, 2I4), I4)
C
C  Slice data: X,Y COORDINATES
C
      DO 500 SLC = ZMIN, ZMAX
        READ (DISK, 8200) SLICE, RN (SLICE)
        WRITE (USEROUT, 8400) SLICE, RN (SLICE)
        READ (DISK, 8300) ((RC(I, J, SLICE), I = 1, 2), J = 1, RN (SLICE))
500   CONTINUE
8200  FORMAT (I2, I8)
8300  FORMAT (40(Z2))
8350  FORMAT (20(Z4))
8400  FORMAT(1X, 'Slice = ', I2,'   N = ', I4)
C
C  Slice data: X,Y WEIGHTS
C
      DO 510 SLC = ZMIN, ZMAX
        READ (DISK, 8200, END = 700) SLICE, RN (SLICE)
	IF (FILETYPE .EQ. 1 .OR. FILETYPE .EQ. 2) THEN
          READ (DISK, 8350, END = 700) (RWT (I, SLICE), I = 1, RN (SLICE))
	ELSE
          READ (DISK, 8300, END = 700) (RWT (I, SLICE), I = 1, RN (SLICE))
	ENDIF
510   CONTINUE
C
C  Points defining limits for the region
C
      READ (DISK, 8200, END = 700) NEWLIMIT
C
C  Zero any previous limits
C
      IF (NEWLIMIT .GT. 0) THEN
        IF (LIMIT .GT. 0) THEN
          DO 620 N = 1, LIMIT
            X = LM (1, N)
            Y = LM (2, N)
            SETC (X, Y) = .FALSE.
            LM (1, N)   = 0
            LM (2, N)   = 0
620       CONTINUE
        END IF
C
C  Read new limits and update SETC
C
        LIMIT = NEWLIMIT
        READ (DISK, 8300, END = 700) ((LM(I, J), I = 1, 2), J = 1, LIMIT)
        DO 660 N = 1, LIMIT
          X = LM (1, N)
          Y = LM (2, N)
          SETC (X, Y) = .TRUE.
660     CONTINUE
C
C  Otherwise zero any old limits
C
      ELSE
700     IF (LIMIT .GT. 0) THEN
          DO 720 N = 1, LIMIT
            X = LM (1, N)
            Y = LM (2, N)
            SETC (X, Y) = .FALSE.
            LM (1, N) = 0
            LM (2, N) = 0
720       CONTINUE
        END IF
        LIMIT = 0
      END IF
C
      CLOSE (DISK)
      RETURN
      END
@
