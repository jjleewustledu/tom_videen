head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	94.04.08.20.48.46;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	94.04.08.19.30.58;	author tom;	state Exp;
branches;
next	;


desc
@original
@


1.2
log
@mm to cm
@
text
@/*$Id: atl2analyze.c,v 1.1 1994/04/08 19:30:58 tom Exp tom $*/
/*$Log: atl2analyze.c,v $
 * Revision 1.1  1994/04/08  19:30:58  tom
 * Initial revision
 **/
/*	===============================================================================
 *	Module:				atl2analyze.c
 *	Date:					08-Apr-94
 *	Author:				Tom Videen
 *	Description:	Transform Atlas tracings into Analyze format.
 *			Output images will be displayed by Analyze with left brain on the left
 *			and with the lower slices first.  This allows the 3D volume rendered
 *			brains to appear upright.
 *	===============================================================================
 */

#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <petutil/imglist.h>
#include <petutil/matrix.h>
#include <petutil/ANALYZE.h>		/* dsr */
#include "atlas.h"		/* SCALE_HEADER, MAX_ATLAS_NUM */

static char rcsid [] = "$Header: /home/petsun2/tom/src/atl2analyze/RCS/atl2analyze.c,v 1.1 1994/04/08 19:30:58 tom Exp tom $";

short	*atl;

/*	----------------------------
 *	Function:			atl2analyze
 *	----------------------------
 */	
main (argc, argv)
	int	argc;
	char	*argv[];
{

  struct dsr hdr; 					/* header for ANALYZE */
  FILE  *fd_hdr;  					/* file for ANALYZE hdr */	
	FILE  *fopen(); 					/* the fopen stuff  */
  int   fd_img;   					/* output ANALYZE image  */
	SCALE_HEADER	*header;		/* Atlas file header for one scale */
 
	char		*atlas_filename;	/* Atlas filename */
  char		*ANALYZE_hdr;  		/* output Analyze header filename  */
  char		*ANALYZE_img;  		/* output Analyze image filename */

	int			dimension;				/*  xdim * ydim * num_slices */
  int			global_max; 			/* global maximum */
  int 		global_min; 			/* global minimum */
  int  		i, j, k, n;
 
	float		pixel_size;							/* mm */
	float		plane_separation = 2;   /* mm */
	short		***img;						/* output Analyze image */
	int			xdim, ydim;				/* pixel dimensions */
	int			num_slices;				/* number of slices */

/*
 *	Get command line arguments and initialize filenames:
 *	---------------------------------------------------
 */

	if (argc != 4) {
		printf ("Usage: atl2analyze Atlas ANALYZE_img ANALYZE_hdr\n");
		exit(FAIL);
	}
	atlas_filename	= argv [1];
	ANALYZE_img	= argv [2];
	ANALYZE_hdr	= argv [3];

  if ((fd_hdr = fopen(ANALYZE_hdr,"w"))==0) {
    printf("Unable to create ANALYZE header %s\n",ANALYZE_hdr);
    exit(FAIL);
  }
 
  if ((fd_img = open(ANALYZE_img,O_CREAT|O_RDWR,0666)) == 0) {
    printf("Unable to create ANALYZE image %s\n",ANALYZE_img);
    exit(FAIL);
  }

/*
 * Read atlas image
 */

  if (NULL == (header = (SCALE_HEADER *) malloc(sizeof(SCALE_HEADER)))) {
    printf("Could not malloc memory for header\n");
    exit(FAIL);
  }

	printf ("Converting %s\n", atlas_filename);
	if (getatl (atlas_filename, header, &pixel_size) == FAIL) {
		fprintf (stderr, "Error reading %s\n", atlas_filename);
		exit (FAIL);
	}

	xdim = header->width;
	ydim = header->height;
	num_slices = 49;
	dimension = xdim * ydim * num_slices;

  if (NULL == (img = (short ***) malloc(num_slices*sizeof(short **)))) {
    printf("Could not malloc memory for ***img\n");
    exit(FAIL);
  }
  for(i=0; i<num_slices; i++) {
    if (NULL == (img[i] = (short **) malloc(ydim*sizeof(short *)))) {
      printf("Could not malloc memory for **img\n");
      exit(FAIL);
    }
    for(j=0; j<ydim; j++) {
      if (NULL == (img[i][j] = (short *) malloc(xdim*sizeof(short)))) {
        printf("Could not malloc memory for *img\n");
        exit(FAIL);
      }
    }
  }


/*
 * Convert from float to short, find min and max for hdr 
 */

	global_max = 0;
	global_min = 32000;
	n = 0;
	for(i=0; i<num_slices; i++) {	
		for (j=0; j<ydim; j++) {
			for (k=0; k<xdim; k++) {
				img[i][j][k] = atl[n];
				if (img[i][j][k] > global_max)
					global_max = img[i][j][k];
				if (img[i][j][k] < global_min)
					global_min = img[i][j][k];
				n++;
			}
		}
/*		printf ("Slice %d  Max = %d  Min = %d\n", i, global_max, global_min); */
	}

/*
 * Flip Y & Z, and write to output file
 */

	for(i=num_slices-1; i >=0; i--) {	
		for (j=ydim-1; j>=0; j--)
			write(fd_img, (char *)img[i][j], xdim*2);
	}

/*
 * Create Analyze hdr file
 */

	strncpy(hdr.hk.db_name,atlas_filename,17);
	hdr.hk.sizeof_hdr = sizeof(struct dsr);					/* required by developers	*/
	hdr.hk.extents = 16384;													/* recommended by developers	*/
	hdr.hk.regular = 'r';														/* required by developers	*/
	hdr.dime.dim[0] = 4;														/* typically only 4 dimensions	*/
	hdr.dime.dim[1] = xdim;													/* x dimension of atlas		*/
	hdr.dime.dim[2] = ydim;													/* y dimension of atlas		*/
	hdr.dime.dim[3] = num_slices;										/* number of slices in volume	*/
	hdr.dime.dim[4] = 1;														/* only one volume typically	*/
	hdr.dime.unused8 = 0;
	hdr.dime.unused9 = 0;
	hdr.dime.unused10 = 0;
	hdr.dime.unused11 = 0;
	hdr.dime.unused12 = 0;
	hdr.dime.unused13 = 0;
	hdr.dime.unused14 = 0;
	hdr.dime.datatype = 4;													/* 16 bit signed integer	*/
	hdr.dime.bitpix = 16;														/* number of bits/pixel */
	hdr.dime.pixdim[1] = pixel_size;								/* should be input for scanner	*/
	hdr.dime.pixdim[2] = pixel_size;								/* should be input for scanner	*/
	hdr.dime.pixdim[3] = plane_separation;					/* z dimension of atlas   */
	hdr.dime.funused8 = 0;
	hdr.dime.funused9 = 0;
	hdr.dime.funused10 = 0;
	hdr.dime.funused11 = 0;
	hdr.dime.funused12 = 0;
	hdr.dime.funused13 = 0;
	hdr.dime.glmax  = global_max;
	hdr.dime.glmin  = global_min;

	if ((fwrite(&hdr, sizeof(struct dsr), 1, fd_hdr)) != 1) {
		printf("Error writing to: %s\n", ANALYZE_hdr);
		exit(FAIL);
	}

/*
 *	Free & Exit
 *	-----------
 */

	printf("\nSuccessful conversion to %s\n", ANALYZE_img);
	for (i = 0; i < num_slices; i++)
		free (atl[i]);
	free (atl);
  for(i=0; i<num_slices; i++) {
    for(j=0; j<ydim; j++)
      free (img[i][j]);
    free (img[i]);
  }
	free (img);
	close(fd_hdr);
	close(fd_img);
	exit(0);
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d25 1
a25 1
static char rcsid [] = "$Header$";
d53 2
a54 2
	float		pixel_size;								/* cm */
	float		plane_separation = 0.2;   /* cm */
@
