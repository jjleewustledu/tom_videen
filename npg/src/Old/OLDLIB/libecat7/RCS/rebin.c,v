head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.10.09.16.52.33;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.1
log
@Initial revision
@
text
@
void rebin(MatrixData* o_in, MatrixData* o_out, int npix, float ps)
/*
o_in : object_in
o_out : result object
npix : size of the resulting image
ps : pixel size of the resulting image
*/

{

int np1 = o_in.nbplane;
int nl1 = o_in.nbline;
int nc1 = o_in.nbpel;
float ps1 = o_in.pixel_size;
int np = np1;
int nl = npix;
int nc = npix;

printf("rebin (%d,%d,%d pixel size :%.4f) -> (%d,%d,%d pixel size :%.4f)\n",nl1,nc1,np1,ps1,nl,nc,np,ps);

o_out.pixel_size = ps;
o_out.plane_separation = o_in.plane_separation;
unsigned char *aux = (unsigned char*)malloc(np1*nl1*nc);
float delta = (nc1*ps1-nc*ps)/2.0; 
	// difference de champs de vue

// rebin horizontal

int kmin;
if (delta<0) kmin = (int)(-delta/ps)+1;
else kmin = 0;   
for (int i = 0;i<np1;i++)
for (int j = 0;j<nl1;j++)
{ for (int k = 0;k<kmin;k++) aux[i*nl1*nc+j*nc+k] = 0;
  for (k=kmin;k<nc-kmin;k++) {	int c = (int)((k*ps+delta)/ps1);
				float x1 = c*ps1;
				unsigned char v1 = o_in.data[i*nl1*nc1+j*nc1+c];
				unsigned char v2 = o_in.data[i*nl1*nc1+j*nc1+c+1];
				aux[i*nl1*nc+j*nc+k] = (unsigned
				char)(v1+((v2-v1)/ps1)*((k*ps+delta)-x1));
				
			     }
  for (k = nc-kmin;k<nc;k++) aux[i*nl1*nc+j*nc+k] = 0;
}  

// rebin vertical

delta = (nl1*ps1-nl*ps)/2.0;
int jmin;
if (delta<0) jmin = (int)(-delta/ps)+1;
else jmin = 0; 

o_out.data = (unsigned char*)malloc(nl*nc*np);
for (i = 0;i<np;i++)
for (int k = 0;k<nc;k++)
{ for (int j = 0;j<jmin;j++) o_out.data[i*nl*nc+j*nc+k] = 0;
  for (j=jmin;j<nl-jmin;j++) {	int c = (int)((j*ps+delta)/ps1);
				float x1 = c*ps1;
				unsigned char v1 = aux[i*nl1*nc+c*nc+k];
				unsigned char v2 = aux[i*nl1*nc+(c+1)*nc+k];
				o_out.data[i*nl*nc+j*nc+k] = (unsigned
				char)(v1+((v2-v1)/ps1)*((j*ps+delta)-x1));
			       }
  for (j=nl-jmin;j<nl;j++) o_out.data[i*nl*nc+j*nc+k] = 0;
}
o_out.nbline = nl;
o_out.nbpel = nc;
o_out.nbplane = np;
o_out.plane_separation = o_in.plane_separation;

}
@
