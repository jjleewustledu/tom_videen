head	1.3;
access;
symbols;
locks
	tom:1.3; strict;
comment	@ * @;


1.3
date	95.11.10.23.41.52;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	95.11.10.23.27.38;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.10.16.18.50.42;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.3
log
@*** empty log message ***
@
text
@/* $Id$
 * $Log$ */

#include "matrix.h"
#include "matrix_64.h"
#include <math.h>
#include <sys/time.h>
#define ELIMINATED  0

static int      mh64_data_type = PetImage;
static          floatecfconverter[] = {1.0, 1.0, 1.0, 3.7e4, 1.0, 1.0, 1.0, 37.0,
1.0, 1.0, 1.0, 1.0};
static char    *olddisplayunits[NumOldUnits] =
{"Total counts", "Unknown Units", "ECAT counts/sec", "uCi/cc", "LMRGlu",
	"LMRGlu umol/min/100g", "LMRGlu mg/min/100g", "nCi/ml", "Well counts",
"Bq/cc", "ml/min/100g", "ml/min/g"};

static char     rcsid[] = "$Header: /home/npggw/tom/src/libecat7/RCS/convert_64.c,v 1.2 1995/11/10 23:27:38 tom Exp tom $";

static int      r_elements (system_type)
	int             system_type;
{
	switch (system_type) {
	case 953:
	default:
		return 160;
	case 921:
	case 925:
	case 951:
		return 192;
	case 961:
		return 336;
	case 962:
		return 288;
	}
}

static int      num_angles (system_type)
	int             system_type;
{
	switch (system_type) {
	case 921:
	case 925:
	case 953:
	default:
		return 192;
	case 951:
		return 256;
	case 962:
		return 288;
	case 961:
		return 392;
	}
}

static float    bin_size (system_type)
	int             system_type;
{
	switch (system_type) {
	case 921:
	case 925:
	default:
		return 0.3375;
	case 961:
		return 0.165;
	case 962:
		return 0.225;
	case 951:
	case 953:
		return 0.312932;
	}
}
static float    intrinsic_tilt (system_type)
	int             system_type;
{
	switch (system_type) {
	case 921:
	case 925:
		return 15;
	case 961:
		return 13;
	case 962:
	case 951:
	case 953:
	default:
		return 0;
	}
}

mh64_convert (h_64, h)
	Main_header_64 *h_64;
	Main_header    *h;
{
	struct tm       strtTime;

	strncpy (h_64->original_file_name, h->original_file_name, 19);
	h_64->original_file_name[19] = '\0';	 /* truncated to 19 cc */
	h_64->sw_version = 6;
	h_64->data_type = mh64_data_type;	 /* use matrix data_type */
	h_64->system_type = h->system_type;
	h_64->file_type = h->file_type;
	strcpy (h_64->node_id, h->serial_number);
	strtTime = *localtime (&h->scan_start_time);
	h_64->scan_start_day = strtTime.tm_mday;
	h_64->scan_start_month = strtTime.tm_mon;
	h_64->scan_start_year = 1900 + strtTime.tm_year;
	h_64->scan_start_hour = strtTime.tm_hour;
	h_64->scan_start_minute = strtTime.tm_min;
	h_64->scan_start_second = strtTime.tm_sec;
	strcpy (h_64->isotope_code, h->isotope_code);
	h_64->isotope_halflife = h->isotope_halflife;
	strcpy (h_64->radiopharmaceutical, h->radiopharmaceutical);
	h_64->gantry_tilt = h->gantry_tilt;
	h_64->gantry_rotation = h->gantry_rotation;
	h_64->bed_elevation = h->bed_elevation;
	h_64->rot_source_speed = ELIMINATED;
	h_64->wobble_speed = h->wobble_speed;
	h_64->transm_source_type = h->transm_source_type;
	h_64->axial_fov = h->distance_scanned;
	h_64->transaxial_fov = h->transaxial_fov;
	h_64->transaxial_samp_mode = ELIMINATED;
	h_64->coin_samp_mode = h->coin_samp_mode;
	h_64->axial_samp_mode = h->axial_samp_mode;
	h_64->compression_code = h->compression_code * 256 + h->angular_compression;
	h_64->calibration_units = h->calibration_units;
	h_64->calibration_factor = h->calibration_factor;
	strcpy (h_64->study_name, h->study_name);
	strcpy (h_64->patient_id, h->patient_id);
	strcpy (h_64->patient_name, h->patient_name);
	h_64->patient_sex = h->patient_sex[0];
	h_64->patient_dexterity = h->patient_dexterity[0];
	if (h->patient_age)
		sprintf (h_64->patient_age, "%g", h->patient_age);
	if (h->patient_height)
		sprintf (h_64->patient_height, "%g", h->patient_height);
	if (h->patient_weight)
		sprintf (h_64->patient_weight, "%g", h->patient_weight);
	strcpy (h_64->physician_name, h->physician_name);
	strcpy (h_64->operator_name, h->operator_name);
	strcpy (h_64->study_description, h->study_description);
	h_64->acquisition_type = h->acquisition_type;
	h_64->bed_type = h_64->septa_type = ELIMINATED;
	strcpy (h_64->facility_name, h->facility_name);
	h_64->num_planes = h->num_planes;
	h_64->num_frames = h->num_frames;
	h_64->num_gates = h->num_gates;
	h_64->num_bed_pos = h->num_bed_pos;
	h_64->init_bed_position = h->init_bed_position;
	memcpy (h_64->bed_offset, h->bed_offset, 15 * sizeof (float));
	h_64->plane_separation = h->plane_separation;
	h_64->lwr_sctr_thres = h->lwr_sctr_thres;
	h_64->lwr_true_thres = h->lwr_true_thres;
	h_64->upr_true_thres = h->upr_true_thres;
	h_64->collimator = ELIMINATED;
	strcpy (h_64->user_process_code, h->user_process_code);
	h_64->acquisition_mode = h->acquisition_mode;
}

void            sh64_convert (h_64, h, mh)
	Scan_subheader_64 *h_64;
	Scan_subheader *h;
	Main_header    *mh;
{
	int             i = 0;

	mh64_data_type = h->data_type;		 /* set main header data type */
	h_64->data_type = h->data_type;
	h_64->dimension_1 = h->num_r_elements;
	h_64->dimension_2 = h->num_angles;
	h_64->smoothing = h->corrections_applied;
	h_64->processing_code = ELIMINATED;
	h_64->sample_distance = h->x_resolution;
	h_64->isotope_halflife = mh->isotope_halflife;
	h_64->frame_duration_sec = ELIMINATED;
	h_64->gate_duration = h->gate_duration;
	h_64->r_wave_offset = h->r_wave_offset;
	h_64->scale_factor = h->scale_factor;
	h_64->scan_min = h->scan_min;
	h_64->scan_max = h->scan_max;
	h_64->prompts = h->prompts;
	h_64->delayed = h->delayed;
	h_64->multiples = h->multiples;
	h_64->net_trues = h->net_trues;
	memcpy (h_64->cor_singles, h->cor_singles, 16 * sizeof (float));
	memcpy (h_64->uncor_singles, h->uncor_singles, 16 * sizeof (float));
	h_64->tot_avg_cor = h->tot_avg_cor;
	h_64->tot_avg_uncor = h->tot_avg_uncor;
	h_64->total_coin_rate = h->total_coin_rate;
	h_64->frame_start_time = h->frame_start_time;
	h_64->frame_duration = h->frame_duration;
	h_64->loss_correction_fctr = h->loss_correction_fctr;
	for (i = 0; i < 8; i++)
		h_64->phy_planes[i] = h->phy_planes[i];
}

void            ih64_convert (h_64, h, mh)
	Image_subheader_64 *h_64;
	Image_subheader *h;
	Main_header    *mh;
{
	mh64_data_type = h->data_type;		 /* set main header data type */
	memset (h_64, 0, sizeof (Image_subheader_64));	/* clear memory */
	h_64->data_type = h->data_type;
	h_64->num_dimensions = h->num_dimensions;
	h_64->dimension_1 = h->x_dimension;
	h_64->dimension_2 = h->y_dimension;
	h->x_offset = h_64->x_origin = h->x_offset;
	h->y_offset = h_64->y_origin = h->y_offset;
	h_64->recon_scale = h->recon_zoom;
	h_64->ecat_calibration_fctr = mh->calibration_factor;
	h_64->quant_scale = h->scale_factor;
	h_64->image_min = h->image_min;
	h_64->image_max = h->image_max;
	h_64->pixel_size = h->x_pixel_size;
	h_64->slice_width = mh->plane_separation;
	h_64->frame_duration = h->frame_duration;
	h_64->frame_start_time = h->frame_start_time;
	h_64->filter_code = h->filter_code;
	h_64->image_rotation = h->z_rotation_angle;
	h_64->decay_corr_fctr = h->decay_corr_fctr;
	h_64->processing_code = h->processing_code;
	h_64->filter_params[0] = h->filter_cutoff_frequency;
	h_64->filter_params[2] = h->filter_ramp_slope;
	h_64->filter_params[3] = h->filter_order;
	h_64->filter_params[4] = h->filter_scatter_fraction;
	h_64->filter_params[5] = h->filter_scatter_slope;
	h_64->intrinsic_tilt = mh->intrinsic_tilt;
	strcpy (h_64->annotation, h->annotation);
}

void            nh64_convert (h_64, h, mh)
	Norm_subheader_64 *h_64;
	Norm_subheader *h;
	Main_header    *mh;
{
	struct tm      *normTime;

	mh64_data_type = h->data_type;		 /* set main header data type */
	memset (h_64, 0, sizeof (Norm_subheader));	/* clear memory */
	h_64->data_type = h->data_type;
	h_64->dimension_1 = h->num_r_elements;
	h_64->dimension_2 = h->num_angles;
	h_64->scale_factor = h->scale_factor;
	h_64->fov_source_width = h->fov_source_width;
	h_64->ecat_calib_factor = mh->calibration_factor;
	normTime = localtime (&mh->scan_start_time);
	h_64->norm_day = normTime->tm_mday;
	h_64->norm_month = normTime->tm_mon;
	h_64->norm_year = 1900 + normTime->tm_year;
	h_64->norm_hour = normTime->tm_hour;
	h_64->norm_minute = normTime->tm_min;
	h_64->norm_second = normTime->tm_sec;
}

void            ah64_convert (h_64, h, mh)
	Attn_subheader_64 *h_64;
	Attn_subheader *h;
	Main_header    *mh;
{
	mh64_data_type = h->data_type;		 /* set main header data type */
	memset (h_64, 0, sizeof (Norm_subheader));	/* clear memory */
	h_64->data_type = h->data_type;
	h_64->attenuation_type = h->attenuation_type;
	h_64->dimension_1 = h->num_r_elements;
	h_64->dimension_2 = h->num_angles;
	h_64->sample_distance = h->x_resolution;
	h_64->scale_factor = h_64->scale_factor;
	h_64->x_origin = h->x_offset;
	h_64->y_origin = h->y_offset;
	h_64->x_radius = h->x_radius;
	h_64->y_radius = h->y_radius;
	h_64->tilt_angle = h->tilt_angle;
	h_64->attenuation_coeff = h->attenuation_coeff;
	h_64->sample_distance = ELIMINATED;
}
@


1.2
log
@*** empty log message ***
@
text
@d1 2
a2 2
/*$Id: convert_64.c,v 1.1 1995/10/16 18:50:42 ty7777 Exp tom $*/
/*$Log: convert_64.c,v $
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libecat7/RCS/convert_64.c,v 1.1 1995/10/16 18:50:42 ty7777 Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*$Id$*/
/*$Log$*/
d10 7
a16 7
static int mh64_data_type = PetImage;
static floatecfconverter[] = {1.0, 1.0, 1.0, 3.7e4, 1.0, 1.0, 1.0, 37.0,
	1.0, 1.0, 1.0, 1.0};
static char *olddisplayunits[NumOldUnits] =
    {"Total counts", "Unknown Units", "ECAT counts/sec", "uCi/cc", "LMRGlu",
    "LMRGlu umol/min/100g", "LMRGlu mg/min/100g", "nCi/ml", "Well counts",
    "Bq/cc", "ml/min/100g", "ml/min/g"};
d18 1
a18 1
static char rcsid [] = "$Header$";
d20 2
a21 2
static int r_elements(system_type)
int system_type;
d24 1
a24 1
	case 953 :
d27 3
a29 3
	case 921 :
	case 925 :
	case 951 :
d38 2
a39 2
static int num_angles(system_type)
int system_type;
d42 3
a44 3
	case 921 :
	case 925 :
	case 953 :
d47 1
a47 1
	case 951 :
d56 2
a57 2
static float bin_size(system_type)
int system_type;
d60 2
a61 2
	case 921 :
	case 925 :
d68 2
a69 2
	case 951 :
	case 953 :
d73 2
a74 2
static float intrinsic_tilt(system_type)
int system_type;
d76 12
a87 12
    switch (system_type) {
    case 921 :
    case 925 :
        return 15;
    case 961:
        return 13;
    case 962:
    case 951 :
    case 953 :
    default:
        return 0;
    }
d90 3
a92 3
mh64_convert(h_64, h)
Main_header_64 *h_64;
Main_header * h;
d94 4
a97 3
	struct tm strtTime;
    strncpy(h_64->original_file_name, h->original_file_name,19);
	h_64->original_file_name[19] = '\0';	/* truncated to 19 cc */
d99 5
a103 5
	h_64->data_type = mh64_data_type;	/* use matrix data_type */
    h_64->system_type = h->system_type;
    h_64->file_type = h->file_type;
    strcpy(h_64->node_id, h->serial_number);
	strtTime = *localtime(&h->scan_start_time);
d106 1
a106 1
	h_64->scan_start_year = 1900+strtTime.tm_year;
d110 11
a120 11
    strcpy(h_64->isotope_code, h->isotope_code);
    h_64->isotope_halflife = h->isotope_halflife;
    strcpy(h_64->radiopharmaceutical, h->radiopharmaceutical);
    h_64->gantry_tilt = h->gantry_tilt;
    h_64->gantry_rotation = h->gantry_rotation;
    h_64->bed_elevation = h->bed_elevation;
    h_64->rot_source_speed = ELIMINATED;
    h_64->wobble_speed = h->wobble_speed;
    h_64->transm_source_type = h->transm_source_type;
    h_64->axial_fov = h->distance_scanned;
    h_64->transaxial_fov = h->transaxial_fov;
d122 8
a129 8
    h_64->coin_samp_mode = h->coin_samp_mode;
    h_64->axial_samp_mode = h->axial_samp_mode;
    h_64->compression_code = h->compression_code*256+h->angular_compression;
    h_64->calibration_units = h->calibration_units;
    h_64->calibration_factor = h->calibration_factor;
    strcpy(h_64->study_name, h->study_name);
    strcpy(h_64->patient_id, h->patient_id);
    strcpy(h_64->patient_name, h->patient_name);
d131 11
a141 8
    h_64->patient_dexterity = h->patient_dexterity[0];
    if (h->patient_age) sprintf(h_64->patient_age,"%g",h->patient_age);
    if (h->patient_height) sprintf(h_64->patient_height,"%g",h->patient_height);
    if (h->patient_weight) sprintf(h_64->patient_weight,"%g",h->patient_weight);
    strcpy(h_64->physician_name, h->physician_name);
    strcpy(h_64->operator_name, h->operator_name);
    strcpy(h_64->study_description, h->study_description);
    h_64->acquisition_type = h->acquisition_type;
d143 11
a153 11
    strcpy(h_64->facility_name, h->facility_name);
    h_64->num_planes = h->num_planes;
    h_64->num_frames = h->num_frames;
    h_64->num_gates = h->num_gates;
    h_64->num_bed_pos = h->num_bed_pos;
    h_64->init_bed_position = h->init_bed_position;
	memcpy(h_64->bed_offset,h->bed_offset,15*sizeof(float));
    h_64->plane_separation = h->plane_separation;
    h_64->lwr_sctr_thres = h->lwr_sctr_thres;
    h_64->lwr_true_thres = h->lwr_true_thres;
    h_64->upr_true_thres = h->upr_true_thres;
d155 2
a156 2
    strcpy(h_64->user_process_code,h->user_process_code);
    h_64->acquisition_mode = h->acquisition_mode;
d159 4
a162 4
void sh64_convert(h_64, h, mh)
Scan_subheader_64* h_64;
Scan_subheader* h;
Main_header* mh;
d164 1
a164 1
	int i=0;
d166 5
a170 5
	mh64_data_type = h->data_type;	/* set main header data type */
    h_64->data_type = h->data_type;
    h_64->dimension_1 = h->num_r_elements ;
    h_64->dimension_2 = h->num_angles;
    h_64->smoothing = h->corrections_applied;
d172 2
a173 2
    h_64->sample_distance = h->x_resolution;
    h_64->isotope_halflife = mh->isotope_halflife;
d175 19
a193 18
    h_64->gate_duration = h->gate_duration;
    h_64->r_wave_offset = h->r_wave_offset;
    h_64->scale_factor = h->scale_factor;
    h_64->scan_min = h->scan_min;
    h_64->scan_max = h->scan_max;
    h_64->prompts = h->prompts;
    h_64->delayed = h->delayed;
    h_64->multiples = h->multiples;
    h_64->net_trues = h->net_trues;
    memcpy(h_64->cor_singles, h->cor_singles, 16*sizeof(float));
    memcpy(h_64->uncor_singles, h->uncor_singles, 16*sizeof(float));
    h_64->tot_avg_cor = h->tot_avg_cor;
    h_64->tot_avg_uncor = h->tot_avg_uncor;
    h_64->total_coin_rate = h->total_coin_rate;
    h_64->frame_start_time = h->frame_start_time;
    h_64->frame_duration = h->frame_duration;
    h_64->loss_correction_fctr = h->loss_correction_fctr;
	for (i=0; i<8; i++) h_64->phy_planes[i] = h->phy_planes[i];
d196 4
a199 4
void ih64_convert(h_64, h, mh)
Image_subheader_64* h_64;
Image_subheader* h;
Main_header* mh;
d201 9
a209 9
	mh64_data_type = h->data_type;	/* set main header data type */
	memset(h_64,0,sizeof(Image_subheader_64));	/* clear memory */
    h_64->data_type = h->data_type;
    h_64->num_dimensions = h->num_dimensions;
    h_64->dimension_1 = h->x_dimension;
    h_64->dimension_2 = h->y_dimension;
    h->x_offset = h_64->x_origin = h->x_offset;
    h->y_offset = h_64->y_origin = h->y_offset;
    h_64->recon_scale = h->recon_zoom;
d212 3
a214 3
    h_64->image_min = h->image_min;
    h_64->image_max = h->image_max;
    h_64->pixel_size = h->x_pixel_size;
d216 11
a226 11
    h_64->frame_duration = h->frame_duration;
    h_64->frame_start_time = h->frame_start_time;
    h_64->filter_code = h->filter_code;
    h_64->image_rotation = h->z_rotation_angle;
    h_64->decay_corr_fctr = h->decay_corr_fctr;
    h_64->processing_code = h->processing_code;
    h_64->filter_params[0] = h->filter_cutoff_frequency;
    h_64->filter_params[2] = h->filter_ramp_slope;
    h_64->filter_params[3] = h->filter_order;
    h_64->filter_params[4] = h->filter_scatter_fraction;
    h_64->filter_params[5] = h->filter_scatter_slope;
d228 1
a228 1
    strcpy(h_64->annotation, h->annotation);
d231 4
a234 4
void nh64_convert(h_64, h, mh)
Norm_subheader_64* h_64;
Norm_subheader* h;
Main_header* mh;
d236 7
a242 6
	struct tm *normTime;
	mh64_data_type = h->data_type;	/* set main header data type */
	memset(h_64,0,sizeof(Norm_subheader));		/* clear memory */
    h_64->data_type = h->data_type;
    h_64->dimension_1 = h->num_r_elements;
    h_64->dimension_2 = h->num_angles;
d244 1
a244 1
    h_64->fov_source_width = h->fov_source_width;
d246 1
a246 1
	normTime = localtime(&mh->scan_start_time);
d249 1
a249 1
	h_64->norm_year = 1900+normTime->tm_year;
d255 4
a258 4
void ah64_convert(h_64, h, mh)
Attn_subheader_64* h_64;
Attn_subheader* h;
Main_header* mh;
d260 14
a273 14
	mh64_data_type = h->data_type;	/* set main header data type */
	memset(h_64,0,sizeof(Norm_subheader));		/* clear memory */
    h_64->data_type = h->data_type;
    h_64->attenuation_type = h->attenuation_type;
    h_64->dimension_1 = h->num_r_elements;
    h_64->dimension_2 = h->num_angles;
    h_64->sample_distance = h->x_resolution;
    h_64->scale_factor = h_64->scale_factor;
    h_64->x_origin = h->x_offset;
    h_64->y_origin = h->y_offset;
    h_64->x_radius = h->x_radius;
    h_64->y_radius = h->y_radius;
    h_64->tilt_angle = h->tilt_angle;
    h_64->attenuation_coeff = h->attenuation_coeff;
@
