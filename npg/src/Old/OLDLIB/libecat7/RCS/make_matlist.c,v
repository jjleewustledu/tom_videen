head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.10.09.16.46.54;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial chccking in, working version.
@


1.1
log
@Initial revision
@
text
@/*$Id$*/
/*$Log$*/

/*     @@(#)make_matlist.c	2.1   2/24/92     */

#ifndef lint
static char sccsid[]="@@(#)make_matlist.c	2.1   2/24/92  Copyright 1989-1991 CTI PET Systems, Inc.";
#endif

static char rcsid [] = "$Header$";

#include "matrix.h"

/*______________________________________________________________________________
	description	make_matlist() takes the lists of frames,
			planes, gates, and beds and creates a list
			of matrix numbers.	

	input		The input consists of pointers to arrays containing
		        lists of frame numbers, plane numbers, gates numbers,
		        and bed numbers. Along with each pointer is an integer
		     	whose value is the length of its corresponding array.
		        Also passed as input is a pointer to an Mlist structure
		        into which the list of matrix numbers will be put.

	output		On exit, mlist->list will be the list of matrix numbers
			of length mlist->nmats. 

	called by	make_list()

	written by	Will Tribbey	3/6/91

	history:	Modified by Tom Yang on Sep. 23, 1994 to fix memory leaks.	

______________________________________________________________________________*/

void make_matlist (file1, file2, f, nf, p, np, g, ng, b, nb, mlist)
	MatrixFile	*file1, *file2;		/*   files from which  list is to be made         */
	int		*f, nf,			/*   pointer to frame array and length of array   */
			*p, np,			/*   pointer to frame array and length of array   */
			*g, ng,			/*   pointer to frame array and length of array   */
			*b, nb;			/*   pointer to frame array and length of array   */
	Mlist		*mlist;			/*   pointer to Mlist structure to be filled      */
{
	struct MatDir	matdir_file1;
	struct MatDir	matdir_file2;
	int		i, j, k, l, m, matnum, matflag, nmats = 0, er;
	int		status1;
	int		status2;

	for (i = 0; i < nf; i++) 
	{
		for (j = 0; j < np; j++) 
		{
			for (k = 0; k < ng; k++) 
			{
				for (l = 0; l < nb; l++) 
				{
					matnum	= mat_numcod (f [i], p [j], g [k], 0, b [l]);
					matflag	= 0;
					for (m = 0; m < nmats; m++) 
					{
						/*  
						 * Check for duplicate matnums  
						 */
						if (matnum == mlist->list [m])  
							matflag	= 1;
					}
					if (!matflag) 
					{  /* if flag not set, look up matrix with matnum  */   
						if (file2) 
						{ 
							status1	= matrix_find (file1, matnum, &matdir_file1); 
							status2	= matrix_find (file2, matnum, &matdir_file2); 
							if (status1 != ERROR && status2 != ERROR)
							{
								nmats++;                   
								mlist->list [nmats - 1]	= matnum;
							}
						} 
						else 
						{
							status1	= matrix_find (file1, matnum, &matdir_file1); 
							if (status1 != ERROR) 
							{ 
								nmats++;                   
								mlist->list [nmats - 1]	= matnum;
							}
						}
					}
				}
			}
		}
	}

	mlist->nmats	= nmats;

	return;
}
@
