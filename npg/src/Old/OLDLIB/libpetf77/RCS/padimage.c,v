head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.10.10.15.42.33;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.1
log
@Initial revision
@
text
@/*$Id$*/
/*$Log$*/

/*___________________________________________________________________________
  File:		padimage.c

  Function:	void padimage (int nx, int ny, int nz, int first_slice_index, int last_slice_index, 
			short *image3d)

  Arguments:    nx,		x dimension of the image image3d.
  		ny,		y dimension of the image image3d.
  		nz,		z dimension of the image image3d.
		image3d,	3D image, can be used in FORTAN programs as image3d [nx][ny][nz]. 

  Description:	This function pads the slices with slice number in [1, first_slice_index - 1]
		with the value from slice first_slice_index and the slices with slice number
		in [last_slice_index + 1, nz] with the value from slice last_slice_index.

  History:	 Created by Tom Yang on 01/04/93. 
___________________________________________________________________________*/

#include <petutil/petutil.h>
#include <petutil/matrix.h>

static char rcsid [] = "$Header$";

int padimage (image3d, width, height, num_slices, nx, ny, nz, 
		first_slice_index, last_slice_index, xmargin, ymargin, padimage3d)
	float		*image3d;
	short		width;
	short		height;
	short		num_slices;
	int		nx;
	int		ny;
	int		nz;
	int		first_slice_index;
	int		last_slice_index;
	int		xmargin;
	int		ymargin;
	float		*padimage3d;
{
	int		i;
	int		j;
	int		k;
	int		l;
	int		row_index;
	int		out_row_index;
	int		out_slice_index;
	int		slice_index;

	for (k = 1; k <= nz; k++)
	{
		if (k <= first_slice_index)
			l	= 0;
		else if (k >= last_slice_index)
			l	= num_slices - 1;
		else
			l	= k - first_slice_index;

		slice_index	= l * width * height;
		out_slice_index	= (k - 1) * nx * ny;

		for (j = 0; j < height; j++)
		{
			row_index	= slice_index + j * width;
			out_row_index	= out_slice_index + (j + ymargin) * nx + xmargin;
			for (i = 0; i < width; i++)
			{
				padimage3d [out_row_index + i]	= image3d [row_index + i];
			}
		}
	}

	return SUCCEED;
}
@
