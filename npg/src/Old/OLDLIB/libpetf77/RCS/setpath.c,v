head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.10.10.15.46.37;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.1
log
@Initial revision
@
text
@/*$Id$*/
/*$Log$*/

/*___________________________________________________________________________________
 *
 *	File Name:	setpath.c
 *	Function Name:	setpath
 *	Arguments:	original_image_file:	image file name in short format, e.g. p2208ho1.img.	
 *			basic_header:		structure containing basic header inforrmation.  
 *			complete_image_file:	complete image file name, 
 *						e.g. /data/archive/pet/p2208/p2208ho1.img.
 *	Return Value:	SUCCED:	sucessful;
 *			FAIL:	fail.
 *	Description:	Determine the complete path where an image file can be found.
 *			Used in archive software.
 *	Called by:	
 *	Calling:	matrixx_open (), matrixx_read ().
 *	Author:		Tom Yang
 *	History:	Created by Tom Yang on 03/04/1993
 *
___________________________________________________________________________________*/

#include <stdio.h>
#include <string.h>
#include <petutil/petutil.h>
#include <petutil/matrix.h>

static char rcsid [] = "$Header$";

/*
 * Basic header information.
 */
#define FNAME_LENGTH		64

struct BASIC_HEADER 
{
	char	Tracer [FNAME_LENGTH];	/* tracer string */
	char	Id [FNAME_LENGTH];	/* subject's Id string = [p | m] number */
	char	Date [FNAME_LENGTH];	/* date string */
	char	Filter [FNAME_LENGTH];	/* filter string */
	int	Data_Type;		/* pett6 -> 1000, 1010, 1020, 2000, 2010;
					   ecat  -> 3000 */
	int	Scanner;		/* pett6 == 6,
					   spetti == 7,
					   spettii == 8,
					   ecat == 10 */
	char	Resolution [8];		/* low or high */
	int	Num_Slices;		/* used for determing image type */
};

int setpath (original_image_file, basic_header, complete_image_file)
	char			*original_image_file;
	struct BASIC_HEADER	*basic_header;
	char			*complete_image_file;
{
	BOOLEAN	compressed_flag;
	FILE	*fp;	
	char	command [MAXLINE];	
	char	path_filename [MAXLINE];	
	char	filename [MAXLINE];
	char	truefilename [MAXLINE];
	char	compress_filename [MAXLINE];
	int	stat;

	compressed_flag	= FALSE;

	/*
	 * Search in the current directory.
	 */
	strcpy (filename, original_image_file);
	fp	= fopen (filename, "rb"); 
	if (fp == NULL)
	{
		strcpy (compress_filename, filename);
		strcat (compress_filename, ".Z");
		fp	= fopen (compress_filename, "rb"); 
		if (fp == NULL)
		{
			/*
			 * Search in the /tmp directory.
			 */
			strcpy (filename, "/tmp/");
			strcat (filename, original_image_file);
			fp	= fopen (filename, "rb"); 
			if (fp == NULL)
			{
				strcpy (compress_filename, filename);
				strcat (compress_filename, ".Z");
				fp	= fopen (compress_filename, "rb"); 
				if (fp == NULL)
				{

					/*
					 * Search in the archive directory.
					 */
					/*
					determine_path (path_filename);

					sprintf (command, "cp %s /tmp", path_filename);
					stat	= system (command);

					fp	= fopen (complete_filename, "rb"); 
					*/

					if (fp == NULL)
					{
						fprintf (stderr, "File %s can not be found.\n", 
									original_image_file);
						return FAIL;
					}
				}
				else
				{
					compressed_flag	= TRUE;
				}
			}
		}
		else
		{
			compressed_flag	= TRUE;
		}
	}

	if (compressed_flag)
	{
		sprintf (command, "uncompress %s", compress_filename);
		stat	= system (command);
	}
	strcpy (complete_image_file, filename);

	fclose (fp);

	return SUCCEED;
}
@
