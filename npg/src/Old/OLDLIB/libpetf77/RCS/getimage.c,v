head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	95.10.31.14.54.27;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	95.10.13.16.00.34;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.10.10.15.34.09;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.3
log
@remove petutil parent directory from include statements
@
text
@/*$Id: getimage.c,v 1.2 1995/10/13 16:00:34 ty7777 Exp tom $*/
/*$Log: getimage.c,v $
 * Revision 1.2  1995/10/13  16:00:34  ty7777
 * Use matrix7.h.
 *
 * Revision 1.1  1995/10/10  15:34:09  ty7777
 * Initial revision
 **/

#ifndef lint
static char sccsid[]="@@(#)getimage.c	10/09/92  Copyright Neural Pet Group, Washington University 1992";
#endif
static char rcsid []= "$Header: /export/home/npggw/tom/src/libpetf77/RCS/getimage.c,v 1.2 1995/10/13 16:00:34 ty7777 Exp tom $";

/*____________________________________________________________________________
 *
 *	File Name:	getimage.c
 *	Function Name:	getimage ()
 *	Arguments:	slice_data:	image array for slice , must be allocated
 *					with memory and initialized to zero before 
 *					calling, altered upon return.	
 *			header:		header from file for specified slice, altered 
 *					upon return.
 *			fd:		image file descriptor, get it before calling
 *					by using the UNIX system interface call open ().
 *			image_name:	pointer to image file name.	
 *			slice_number:	number of the desired slice of the image, start 
 *					at one, must be assigned before calling.
 *			num_slices:	number of slices in the image, altered upon 
 *					return.
 *			scanner_type:	scanner number of the image (1, 6 - 8, 10), altered 
 *					upon return, -1 means error.
 *			err_value:	TRUE: if unable to open the disk file, unable to 
 *					read the desired slice, or if the file format is 
 *					incorrect, altered upon return.
 *	Return Value:	void.
 *	Description:	General function for reading image files. This function gets one 
 *			slice of an image from a disk file. ECAT, Decoded and encoded 
 *			PETT 6-8 images can be read (7 - 49 slices) (PETT6, Super PETT 
 *			I and Super PETT II). The encoding algorithm is that of ENCODE1 
 *			which was created in April 87 and differs from that used previously. 
 *			All images are returned in a 128 x 128 array (PETT6 images are 
 *			centered in the array).
 *	Called by:
 *	Calling:	pet_matrixx_open () in pet_matrixx.c of libpetutil.a.
 *			Ecat2Pett6 () in Ecat2Pett6.c of libpetutil.a.
 *			GetImagePett6 () in GetImagePett6.c of libpetutil.a.
 *			GetImageSuperPett () in GetImageSuperPett.c of libpetutil.a.
 *	Authors:	Tom Yang. 
 *	History:	Created by Tom Yang on 04/17/1992.
 *
____________________________________________________________________________*/
#include <petutil.h>
#include <matrix7.h>
#define	SCALE_FACTOR		1.00000000

void getimage (slice_data, header, fd, image_name, slice_number, 
	encoded_flag, num_slices, scanner_type, err_value)
short		*slice_data;
short		*header;
int		fd;
char		*image_name;
short		slice_number;
BOOLEAN		encoded_flag;
short		num_slices;
int		scanner_type;
BOOLEAN		*err_value;
{
	MatrixFile	*pet_matrix_open ();

	MatDirNode	*node;
	MatrixFile	*matfptr;
	float		scale;
	int		i;
	int		image_type;
	short		xdim;
	short		ydim;
	struct Matval	matval;

	if (scanner_type == ERROR_SCANNER || slice_number > num_slices
		|| slice_number < 1)
	{
		*err_value	= FAIL;
		return;
	}

	switch (scanner_type)
	{
		case ECAT_SCANNER:
			matfptr = pet_matrix_open (fd, image_name, MAT_READ_ONLY, MAT_UNKNOWN_FTYPE);
			if (matfptr == NULL)
			{
				*err_value	= FAIL;
				return;
			}

			node		= matfptr->dirlist->first;
			mat_numdoc (node->matnum, &matval);
			matval.plane	= slice_number;
			scale		= SCALE_FACTOR;
			*err_value	= Ecat2Pett6 (matfptr, scale, 
				(PETT6HDR *) header, slice_data, num_slices, matval);

			matrix_close (matfptr);
			break;
		case PETT6_SCANNER:
			*err_value	= GetImagePett6 (fd, slice_number, encoded_flag, 
								(char *) header, slice_data);
			break;
		case SUPER_PETT_I_SCANNER:
		case SUPER_PETT_II_SCANNER:
		case SUPER_PETT_II_OTHERS:
			*err_value	= GetImageSuperPett (fd, slice_number, encoded_flag, 
								(char *) header, slice_data);
			break;
		default:
			*err_value	= FAIL;
			break;
	}

	*err_value	= SUCCEED;
}
@


1.2
log
@Use matrix7.h.
@
text
@d1 1
a1 1
/*$Id: getimage.c,v 1.1 1995/10/10 15:34:09 ty7777 Exp ty7777 $*/
d3 3
d13 1
a13 1
static char rcsid []= "$Header: /data/petsun4/src/libpetutil/RCS/getimage.c,v 1.1 1995/10/10 15:34:09 ty7777 Exp ty7777 $";
d53 2
a54 2
#include <petutil/petutil.h>
#include <petutil/matrix7.h>
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d10 1
a10 1
static char rcsid []= "$Header$";
d51 1
a51 1
#include <petutil/matrix.h>
a52 1
#define	SCALE_FACTOR_961	0.01
d97 1
a97 4
			if (matfptr->mhptr->system_type == SYSTEM_TYPE_961)
				scale	= SCALE_FACTOR_961;
			else
				scale	= SCALE_FACTOR;
@
