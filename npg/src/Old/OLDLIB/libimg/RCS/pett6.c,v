head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	96.03.12.22.43.17;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	96.01.03.19.33.55;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	96.01.03.19.22.16;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	96.01.03.19.13.51;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	96.01.03.18.03.28;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	95.12.20.15.37.15;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	95.12.20.15.10.47;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	95.12.20.04.19.28;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	95.12.19.22.40.40;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	95.12.11.19.04.27;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	95.12.04.21.43.07;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	95.12.01.21.56.05;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	95.11.30.18.19.00;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	95.11.28.21.14.52;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.11.28.20.11.33;	author tom;	state Exp;
branches;
next	;


desc
@@


1.15
log
@*** empty log message ***
@
text
@/*  $Id: pett6.c,v 1.14 1996/01/03 19:33:55 tom Exp tom $
    $Log: pett6.c,v $
 * Revision 1.14  1996/01/03  19:33:55  tom
 * changed reconstruction name "fbp" to "fb"
 *
 * Revision 1.13  1996/01/03  19:22:16  tom
 * fixed identification of filtername
 *
 * Revision 1.12  1996/01/03  19:13:51  tom
 * fix test for filter name
 *
 * Revision 1.11  1996/01/03  18:03:28  tom
 * add mh fields for archive type identification
 *
 * Revision 1.10  1995/12/20  15:37:15  tom
 * elim include pettable.h
 *
 * Revision 1.9  1995/12/20  15:10:47  tom
 * filtername identified in mh->pr_filter
 *
 * Revision 1.8  1995/12/20  04:19:28  tom
 * filter name stored in gen_data
 *
 * Revision 1.7  1995/12/19  22:40:40  tom
 * change mh->version to indicate reconstruction type
 *
 * Revision 1.6  1995/12/11  19:04:27  tom
 * add existp6
 *
 * Revision 1.5  1995/12/04  21:43:07  tom
 * move flipimg to cti.c
 *
 * Revision 1.4  1995/12/01  21:56:05  tom
 * *** empty log message ***
 *
 * Revision 1.3  1995/11/30  18:19:00  tom
 * *** empty log message ***
 *
 * Revision 1.2  1995/11/28  21:14:52  tom
 * check orientation in flipimg
 *
 * Revision 1.1  1995/11/28  20:11:33  tom
 * Initial revision
 *
 */
/* =============================================================================
 *  Module:         pett6.c
 *  Date:           Nov-95
 *  Author:         Tom Videen
 *  Description:    Routines for PETT VI image I/O
 *	Functions:
 *		getp6hdr	-	Read PETT VI slice header.
 *		p6h_to_mh	-	Fill MainHeader structure from PETT VI header.
 *		p6h_to_sh	-	Fill SubHeader structure from PETT VI header.
 *		mh_to_p6h	-	Fill PETT6HDR structure from MainHeader and SubHeader structures.
 *		putp6hdr	-	Write PETT VI slice header.
 *		rdimgp6		-	Read PETT VI image slice.
 *		wrimgp6		-	Write PETT VI image slice.
 *		fopenp6	-	Open image file specified by filename.
 *		get_fp		-	Get file pointer from file_list.
 *		close_fp	-	Close file and remove entry from directory.
 *		existp6		-	Check if an image frame exists (without issuing error messages).
 * =============================================================================
 */
#ifndef lint
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libimg/RCS/pett6.c,v 1.14 1996/01/03 19:33:55 tom Exp tom $";
#endif

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <libimg.h>

struct file     fi[MAX_FILES];			 /* defined in cti7.h */

FILE           *fp_listf[MAX_FILES] = {
	NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
char            file_list[MAX_FILES][MAXFNAME];
char            mode_list[MAX_FILES][4];	 /* Access modes of opened files. */

/* =============================================================================
 *	Function:		getp6hdr
 *	Description:	Read PETT VI slice header and store in PETT6HDR.
 * =============================================================================
 */
PETT6HDR       *getp6hdr (filename, plane)
	char           *filename;		 /* Filename to read */
	int             plane;			 /* Slice number to read header from */

{
	PETT6HDR       *phdr;
	FILE           *fp;
	char           *mode = "r";
	long            offset;

	if ((fp = get_fp (filename, mode)) == NULL) {
		fprintf (stderr, "ERROR [getp6hdr]: Could not get file pointer for %s\n", filename);
		return (NULL);
	}
	if ((phdr = (PETT6HDR *) malloc (sizeof (PETT6HDR))) == NULL) {
		fprintf (stderr, "ERROR [getp6hdr]: Could not malloc memory for phdr\n");
		return (NULL);
	}
	offset = (plane - 1) * PETT6_SLICE_BYTES;
	fseek (fp, offset, 0);
	if ((fread (phdr, 1, RECLEN, fp)) != RECLEN) {
		fprintf (stderr, "ERROR [getp6hdr]: reading PETT VI header for %s\n", filename);
		free (phdr);
		return (NULL);
	}
	return (phdr);
}

/* =============================================================================
 *	Function:		p6h_to_mh
 *	Description:	Fill MainHeader structure from PETT VI header.
 * =============================================================================
 */
MainHeader     *p6h_to_mh (phdr)
	PETT6HDR       *phdr;

{
	float           pe2ieee ();
	MainHeader     *mh;
	char            month[3];
	char            day[3];
	char            year[3];
	char		   *ptr;
	float           decay_constant;
	int             len, i;

	if ((mh = (MainHeader *) malloc (sizeof (MainHeader))) == NULL) {
		fprintf (stderr, "ERROR [getp6hdr]: Could not malloc memory for mh\n");
		return (NULL);
	}
	mh->data_file = NULL;
	mh->file_format = PETT6;
	mh->number_format = SHORT_DATA;

	if (phdr->file_type == 1000) {
		mh->version = VERSION_OLD;
	} else if (phdr->file_type == 1010 || phdr->file_type == 1020) {
		mh->version = VERSION_NEW;
	} else if (phdr->file_type == 2000) {
		mh->version = VERSION_ML;
	} else if (phdr->file_type == 2010) {
		mh->version = VERSION_DGP;
	} else if (phdr->file_type == 3000) {
		mh->version = VERSION_ECAT;
	}
	mh->filtyp = PetImage;
	if (phdr->number_of_slices > 0)
		mh->nplane = phdr->number_of_slices;
	else
		mh->nplane = 7;
	mh->nframe = 1;
	mh->ngate = 1;
	mh->nbed = 0;
	mh->scanner_type = 6;
	month[0] = phdr->date[0];
	month[1] = phdr->date[1];
	month[2] = '\0';
	day[0] = phdr->date[2];
	day[1] = phdr->date[3];
	day[2] = '\0';
	year[0] = phdr->date[4];
	year[1] = phdr->date[5];
	year[2] = '\0';
	sprintf (mh->date_time, "%02d/%02d/%02d, %02d:%02d:%02d",
		 atoi (month), atoi (day), atoi (year), 0, 0, 0);

	mh->start_time = 0;
	mh->wobble_speed = 60;
	strncpy (mh->patnum, phdr->subject_id, 8);
	mh->bed_elevation = 0;
	mh->init_bed_pos = 0;
	for (i = 0; i < 16; i++)
		mh->bed_off[i] = 0;
	if (mh->nplane >= 49)			/* Slice thickness not stored for PETT VI */
		mh->slcthk = 0.2;
	else
		mh->slcthk = PETT6_SLICE_SEP;
	mh->calibration_factor = 1.;
	decay_constant = pe2ieee (phdr->decay_constant);
	if (decay_constant >= 5.5e-3 && decay_constant <= 5.7e-3) {
		strcpy (mh->isotope, "O-15");
	} else if (decay_constant >= 1.1e-3 && decay_constant <= 1.2e-3) {
		strcpy (mh->isotope, "N-14");
	} else if (decay_constant >= 5.5e-4 && decay_constant <= 5.7e-4) {
		strcpy (mh->isotope, "C-11");
	} else if (decay_constant >= 1.6e-4 && decay_constant <= 1.7e-4) {
		strcpy (mh->isotope, "Ga-68");
	} else if (decay_constant >= 1.0e-4 && decay_constant <= 1.1e-4) {
		strcpy (mh->isotope, "F-18");
	} else {
		strcpy (mh->isotope, "unknown");
	}
	strcpy (mh->radiopharmaceutical, phdr->run_name);

	mh->orientation = 0;
	mh->scale_flag = 0;
	mh->pr_scaler = 0.0;

	if (strncmp (phdr->filter, "FILTERG", 7) == 0)
		mh->pr_filter = FILTERG;
	else if (strncmp (phdr->filter, "FILTERF", 7) == 0)
		mh->pr_filter = FILTERF;
	else
		mh->pr_filter = 0;

	mh->pett6_flag = 1;
	if (phdr->number_of_slices < 31)
		mh->zorigin = 0;
	else
		mh->zorigin = 31;
	mh->sw_revision = NULL;
	mh->filetime = NULL;
	mh->gen_data = NULL;

/*	Strings for archive paths */

	strcpy (mh->scanner, "pett6");

	if (phdr->resolution == 0)
		strcpy (mh->acquisition, "low");
	else if (phdr->resolution == 1)
		strcpy (mh->acquisition, "high");
	else
		strcpy (mh->acquisition, "unknown");

	if (phdr->file_type == 1000)
		strcpy (mh->reconstruction, "fbold");
	else if (phdr->file_type == 1010 || phdr->file_type == 1020)
		strcpy (mh->reconstruction, "fb");
	else if (phdr->file_type == 2000)
		strcpy (mh->reconstruction, "ml");
	else if (phdr->file_type == 2010)
		strcpy (mh->reconstruction, "fbdgp");
	else
		strcpy (mh->reconstruction, "unknown");

	if (strncmp (phdr->filter, "FILTERG", 7) == 0)
		strcpy (mh->filtername, "filterg");
	else if (strncmp (phdr->filter, "FILTERF", 7) == 0)
		strcpy (mh->filtername, "filterf");
	else if (phdr->file_type == 1000) {
		if (phdr->resolution == 0)
			strcpy (mh->filtername, "filterg");
		else if (phdr->resolution == 1)
			strcpy (mh->filtername, "filterf");
	} else {
		ptr = strchr(phdr->filter,' ');
		len = ptr - phdr->filter;
		if (len > 10)
			len = 10;
		strncpy (mh->filtername, phdr->filter,len);
	}

	mh->whole_header = (void *) phdr;
	return (mh);
}

/* =============================================================================
 *	Function:		p6h_to_sh
 *	Description:	Fill SubHeader structure from PETT VI header.
 * =============================================================================
 */
SubHeader      *p6h_to_sh (phdr)
	PETT6HDR       *phdr;

{
	SubHeader      *sh;

	if ((sh = (SubHeader *) malloc (sizeof (SubHeader))) == NULL) {
		fprintf (stderr, "ERROR [getp6hdr]: Could not malloc memory for sh\n");
		return (NULL);
	}
	sh->number_format = 2;
	sh->ndim = 2;
	sh->dim1 = PETT6_DIM;
	sh->dim2 = PETT6_DIM;
	if (phdr->number_of_slices == 0)
		sh->dim3 = 7;
	else
		sh->dim3 = phdr->number_of_slices;
	sh->ring_diff = 0;
	sh->total = 0;
	sh->delayeds = 0;
	sh->multiples = 0;
	sh->trues = 0;
	sh->count_rate = 0;
	sh->scale_factor = 1.;
	sh->calibration_factor = 1.;
	sh->min = 0;
	sh->max = 32767;
	sh->deadtime_corr = 1.0;
	if (phdr->number_of_slices <= 7) {
		sh->sample_size_1 = PETT6_PIXEL_SIZE;
		sh->sample_size_2 = PETT6_PIXEL_SIZE;
		sh->sample_size_3 = PETT6_SLICE_SEP;
	} else if (phdr->number_of_slices == 14) {
		sh->sample_size_1 = PETT6_PIXEL_SIZE;
		sh->sample_size_2 = PETT6_PIXEL_SIZE;
		sh->sample_size_3 = PETT6_SLICE_SEP * 0.5;
	} else {
		sh->sample_size_1 = SMG_PIXEL_SIZE;
		sh->sample_size_2 = SMG_PIXEL_SIZE;
		sh->sample_size_3 = SMG_SLICE_SEP;
	}
	sh->start_time = 0;
	sh->duration = (int) phdr->scan_time * 1000.;
	sh->filter_code = 0;
	sh->filter_cutoff_frequency = 0;
	sh->filter_resolution = 0;
	sh->filter_ramp_slope = 0;
	sh->filter_order = 0;
	sh->filter_scatter_fraction = 0;
	sh->filter_scatter_slope = 0;
	sh->comment = NULL;
	sh->whole_header = (void *) phdr;
	return (sh);
}

/* =============================================================================
 *	Function:		mh_to_p6h
 *	Description:	Fill PETT6HDR structure from MainHeader and SubHeader structures.
 * =============================================================================
 */
PETT6HDR       *mh_to_p6h (mh, sh)
	MainHeader     *mh;
	SubHeader      *sh;

{
	PETT6HDR       *phdr;

	phdr = (PETT6HDR *) sh->whole_header;
	phdr->number_of_slices = mh->nplane;
	strncpy (phdr->subject_id, mh->patnum, 7);
	strcpy (phdr->run_name, mh->radiopharmaceutical);
	phdr->scan_time = (sh->duration) / 1000;
	return (phdr);
}

/* =============================================================================
 *	Function:		putp6hdr
 *	Description:	Write PETT VI slice header.
 * =============================================================================
 */
int             putp6hdr (filename, fp, phdr)
	FILE           *fp;			 /* File pointer */
	PETT6HDR       *phdr;			 /* PETT VI header */

{
	char           *mode = "r+";

	if ((fp = get_fp (filename, mode)) == NULL) {
		fprintf (stderr, "ERROR [getp6hdr]: Could not get file pointer for %s\n", filename);
		return (-1);
	}
	if (fwrite (phdr, 1, RECLEN, fp) != RECLEN) {
		fprintf (stderr, "ERROR [putp6hdr]: Cannot write PETT VI header for %s\n", filename);
		return (-1);
	}
	return (0);
}

/* =============================================================================
 *	Function:		rdimgp6
 *	Description:	Get image data from PETT VI file.
 * =============================================================================
 */
float          *rdimgp6 (filename, plane)
	char           *filename;
	int             plane;

{
	PETT6HDR       *phdr;
	SubHeader      *sh;
	int             i, xdim, ydim, len;
	short          *simg;
	char           *mode = "r";
	float           scl;
	float          *img;
	FILE           *fp;
	long            ptr;

	if ((fp = get_fp (filename, mode)) == NULL) {
		fprintf (stderr, "ERROR [rdimgp6]: Could not get file pointer for %s\n", filename);
		return (NULL);
	}
	if ((phdr = getp6hdr (filename, plane)) == NULL) {
		fprintf (stderr, "ERROR [rdimgp6]: Could not read header of %s plane %d\n",
			 filename, plane);
		return (NULL);
	}
	if ((sh = p6h_to_sh (phdr)) == NULL) {
		fprintf (stderr, "ERROR [rdimgp6]: Error converting header of %s\n", filename);
		free (phdr);
		return (NULL);
	}
	xdim = sh->dim1;
	ydim = sh->dim2;
	scl = sh->scale_factor;
	len = xdim * ydim;
	simg = (short *) malloc (len * sizeof (short));
	free (phdr);
	free (sh);

	ptr = (plane - 1) * PETT6_SLICE_BYTES + RECLEN;
	if ((fseek (fp, (long) ptr, SEEK_SET)) != NULL) {
		fprintf (stderr, "ERROR [rdimgp6]: Reading %s plane %d\n", filename, plane);
		return (NULL);
	}
	if ((fread (simg, sizeof (short), len, fp)) != len) {
		fprintf (stderr, "ERROR [rdimgp6]: Reading %s plane %d\n", filename, plane);
		return (NULL);
	}
	if ((img = (float *) malloc (len * sizeof (float))) == NULL) {
		fprintf (stderr, "ERROR [rdimgp6]: Could not malloc memory for img\n");
		free (simg);
		return (NULL);
	}
	for (i = 0; i < len; i++)
		img[i] = scl * (float) simg[i];
	free (simg);
	return (img);
}

/* =============================================================================
 *	Function:		wrimgp6
 *	Description:	Write PETT VI image slice with header.
 *	Note:
 *		100x100 slices must be padded with 112 short integers before write.
 * =============================================================================
 */
int             wrimgp6 (filename, img, phdr)
	char           *filename;
	float          *img;
	PETT6HDR       *phdr;

{
	SubHeader      *sh;
	int             i, xdim, ydim, len, all;
	short          *simg;
	FILE           *fp;

	if ((fp = get_fp (filename, "r+")) == NULL) {
		fprintf (stderr, "ERROR [wrimgp6]: Could not create file %s\n", filename);
		return (-1);
	}
	if ((sh = p6h_to_sh (phdr)) == NULL) {
		fprintf (stderr, "ERROR [wrimgp6]: Error converting header for %s\n", filename);
		return (-1);
	}
	xdim = sh->dim1;
	ydim = sh->dim2;
	free (sh);
	if (xdim != 100 || ydim != 100) {
		fprintf (stderr, "ERROR [wrimgp6]: Error non-standard array size for %s\n", filename);
		return (-1);
	} else {
		len = 10000;
		all = 79 * 128;
	}

	if (NULL == (simg = (short *) calloc (all, sizeof (short)))) {
		fprintf (stderr, "ERROR [wrimgp6]: Could not calloc memory for simg\n");
		return (-1);
	}
	for (i = 0; i < len; i++)
		simg[i] = (short) img[i];

	if ((putp6hdr (filename, fp, phdr)) != NULL) {
		fprintf (stderr, "ERROR [wrimgp6]: Writing slice header to %s\n", filename);
		return (-1);
	}
	if ((fwrite (simg, sizeof (short), all, fp)) != all) {
		fprintf (stderr, "ERROR [wrimgp6]: Writing data to %s\n", filename);
		return (-1);
	}
	free (simg);
	return (0);
}

/* =============================================================================
 *  Function:       fopenp6
 *  Description:    Open image file specified by filename.
 *      Mode specifies the access mode of the file (in fcntl.h)
 *          "r"		Read only.
 *          "r+"	Read/write.
 *          "w"		Erase, then write.
 *          "a"		Append.
 *      fd is set to NULL if an error occurs.
 * =============================================================================
 */
FILE           *fopenp6 (filename, mode)
	char           *filename;
	char           *mode;			 /* "r", "w", "a", "r+"	 */

{
	FILE           *fd;
	int             fp;			 /* Pointer to directory.    */
	int             i, j;
	static int      lcfirst = TRUE;

	if ((fd = fopen (filename, mode)) == NULL) {
		if (!strcmp (mode, 'r+') || strcmp (mode, 'w+')) {
			if ((fd = fopen (filename, "w")) == NULL) {
				fprintf (stderr, "ERROR [fopenp6]: Could not open file %s\n", filename);
				return (NULL);
			}
		} else
			return (NULL);
	}
	if (lcfirst == TRUE) {			 /* Initialize directory id's. */
		lcfirst = FALSE;
		for (i = 0; i < MAX_FILES; i++)	 /* Initialize directory id's.    */
			fi[i].id = NULL;
	}
	for (i = 0; i < MAX_FILES; i++)
		if (fi[i].id == NULL) {
			fi[i].id = fd;
			fp = i;
			break;
		}
	if (i == MAX_FILES) {
		fprintf (stderr, "ERROR [fopenp6]: Maximum number of open files exceeded\n");
		return (NULL);
	}
	fi[fp].id = fd;				 /* Assign file fd a directory record.   */
	fi[fp].memsize = SIZE_DIR_MALLOC;
	if (NULL == (fi[fp].dir = (struct directory *)
		     malloc ((unsigned) (SIZE_DIR_MALLOC * sizeof (struct directory))))) {
		fprintf (stderr, "ERROR [fopenp6]: Could not malloc memory for directory\n");
		return (NULL);
	}

/* Initialize structure. */

	for (i = 0; i < fi[fp].memsize; i++)
		for (j = 0; j < DNOD_REC; j++)
			fi[fp].dir[i].entry[j].flag = UNUSED;
	fi[fp].dir[0].hdr.forptr = DIR_NUM_1;
	fi[fp].dir[0].hdr.bakptr = 0;
	fi[fp].lstrec = 0;

	return (fd);
}

/* =============================================================================
 *	Function:		get_fp
 *	Description:	Add file pointer to file_list; version 7.
 * =============================================================================
 */
FILE           *get_fp (filename, mode)
	char           *filename;
	char           *mode;			 /* "r", "w", "a", "r+"	 */

{
	int             fn;
	FILE           *fptest;
	char            cmd[MAXFNAME];

/*	Check if file is open and compare and/or set mode */

	for (fn = 0; fn < MAX_FILES; fn++) {
		if (!strcmp (filename, file_list[fn])) {	/* File in list */
			if (!strcmp (mode, mode_list[fn]))	/* Mode matches */
				return (fp_listf[fn]);
			if (!strcmp (mode, "r") && !strcmp (mode_list[fn], "r+"))
				return (fp_listf[fn]);
			else {			 /* Mode does not match */
				close_fp (fp_listf[fn]);
				fp_listf[fn] = fopenp6 (file_list[fn], mode);
				strcpy (mode_list[fn], mode);
				return (fp_listf[fn]);
			}
		}
	}

/* File not open, find next available slot. */

	for (fn = 0; fn < MAX_FILES; fn++) {
		if (fp_listf[fn] == NULL)
			break;
	}
	if (fn == MAX_FILES) {
		fprintf (stderr, "ERROR [get_fp]: Maximum number of open files exceeded\n");
		return (NULL);
	}
/*	Delete file if mode is write and file exists */

	if (!strcmp (mode, "w")) {
		if ((fptest = fopen (filename, "r")) != NULL) {
			fclose (fptest);
			sprintf (cmd, "rm %s\n", filename);
			system (cmd);
			fprintf (stderr, "Warning: Deleted %s\n", filename);
		}
	}
/*	Assign file to the list */

	if ((fp_listf[fn] = fopenp6 (filename, mode)) != NULL) {
		strcpy (file_list[fn], filename);
		strcpy (mode_list[fn], mode);
		return (fp_listf[fn]);
	} else
		return (NULL);
}

/* =============================================================================
 *	Function:		close_fp
 *	Description:	Close image file specified by filename.
 *					This function also frees the directory associated with the file.
 * =============================================================================
 */
void            close_fp (fp)
	FILE           *fp;			 /* File pointer. 			 */

{
	int             fd;			 /* Pointer to directory.	 */

	for (fd = 0; fd < MAX_FILES; fd++) {
		if (fi[fd].id == fp) {
			free (fi[fd].dir);	 /* Deallocate directory memory. */
			fi[fd].id = NULL;	 /* Flag directory as available. */
			break;
		}
	}
	fclose (fp);
	return;
}

/* =============================================================================
 *  Function:       existp6
 *  Description:    Check if an image frame exists.
 *                  Bypasses calls with error messages.
 * =============================================================================
 */

int      existp6 (filnam)
    char           *filnam;

{
    FILE           *fp;
	char           *mode = "r";

    if ((fp = get_fp (filnam, mode)) == NULL)
        return (ERROR);
    else
        return (OK);
}
@


1.14
log
@changed reconstruction name "fbp" to "fb"
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.13 1996/01/03 19:22:16 tom Exp tom $
d3 3
d66 1
a66 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimg/RCS/pett6.c,v 1.13 1996/01/03 19:22:16 tom Exp tom $";
d155 1
a155 1
	mh->filtyp = phdr->file_type;
d183 4
a186 1
	mh->slcthk = PETT6_SLICE_SEP;
d290 6
d300 1
a313 1
	sh->deadtime_corr = 1.0;
d316 7
@


1.13
log
@fixed identification of filtername
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.12 1996/01/03 19:13:51 tom Exp tom $
d3 3
d63 1
a63 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimg/RCS/pett6.c,v 1.12 1996/01/03 19:13:51 tom Exp tom $";
d232 1
a232 1
		strcpy (mh->reconstruction, "fbp");
@


1.12
log
@fix test for filter name
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.11 1996/01/03 18:03:28 tom Exp $
d3 3
d60 1
a60 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimg/RCS/pett6.c,v 1.11 1996/01/03 18:03:28 tom Exp $";
d199 1
a199 1
	if (strncmp (phdr->filter, "FILTERG", 7) != NULL)
d201 1
a201 1
	else if (strncmp (phdr->filter, "FILTERF", 7) != NULL)
d237 1
a237 1
	if (strncmp (phdr->filter, "FILTERG", 7) != NULL)
d239 1
a239 1
	else if (strncmp (phdr->filter, "FILTERF", 7) != NULL)
@


1.11
log
@add mh fields for archive type identification
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.10 1995/12/20 15:37:15 tom Exp tom $
d3 3
d57 1
a57 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimg/RCS/pett6.c,v 1.10 1995/12/20 15:37:15 tom Exp tom $";
d196 1
a196 1
	if (strstr (phdr->filter), "FILTERG")
d198 1
a198 1
	else if (strstr (phdr->filter), "FILTERF")
d234 1
a234 1
	if (strncmp (phdr->filter, "FILTERG", 7) == 1)
d236 1
a236 1
	else if (strncmp (phdr->filter, "FILTERF", 7) == 1)
@


1.10
log
@elim include pettable.h
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.9 1995/12/20 15:10:47 tom Exp tom $
d3 3
d54 1
a54 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimg/RCS/pett6.c,v 1.9 1995/12/20 15:10:47 tom Exp tom $";
d61 1
d120 1
d122 1
a122 1
	int             i;
d208 40
@


1.9
log
@filtername identified in mh->pr_filter
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.8 1995/12/20 04:19:28 tom Exp tom $
d3 3
d51 1
a51 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimg/RCS/pett6.c,v 1.8 1995/12/20 04:19:28 tom Exp tom $";
a59 1
#include <pettable.h>
@


1.8
log
@filter name stored in gen_data
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.7 1995/12/19 22:40:40 tom Exp $
d3 3
d48 1
a48 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/libimg/RCS/pett6.c,v 1.7 1995/12/19 22:40:40 tom Exp $";
d57 1
d184 9
a192 2
	mh->pr_scaler = 1.0;
	mh->pr_filter = 0;
d200 1
a200 2
	mh->gen_data = (char *) malloc (13);
	strncpy (mh->gen_data, phdr->filter, 12);
@


1.7
log
@change mh->version to indicate reconstruction type
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.6 1995/12/11 19:04:27 tom Exp tom $
d3 3
d45 1
a45 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/libimg/RCS/pett6.c,v 1.6 1995/12/11 19:04:27 tom Exp tom $";
d150 1
a150 1
	sprintf (mh->date_time, "%d/%d/%02d, %d:%02d:%02d",
d155 1
a155 1
	strncpy (mh->patnum, phdr->subject_id, 5);
d189 2
a190 1
	mh->gen_data = NULL;
d257 1
a257 1
	strncpy (phdr->subject_id, mh->patnum, 5);
@


1.6
log
@add existp6
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.5 1995/12/04 21:43:07 tom Exp tom $
d3 3
d42 1
a42 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimg/RCS/pett6.c,v 1.5 1995/12/04 21:43:07 tom Exp tom $";
d129 1
a129 1
	mh->filtyp = PETT6_IMAGE;
@


1.5
log
@move flipimg to cti.c
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.4 1995/12/01 21:56:05 tom Exp tom $
d3 3
d35 1
d39 1
a39 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/libimg/RCS/pett6.c,v 1.4 1995/12/01 21:56:05 tom Exp tom $";
d544 20
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.3 1995/11/30 18:19:00 tom Exp tom $
d3 3
a28 1
 *		flipimg		-	Reverse right/left in an image.
d35 1
a35 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimg/RCS/pett6.c,v 1.3 1995/11/30 18:19:00 tom Exp tom $";
a391 36

/* =============================================================================
 *	Function:		flipimg
 *	Description:	Reverse right/left in an image.
 * =============================================================================
 */
float          *flipimg (img, mh, sh)
	float          *img;
	MainHeader     *mh;
	SubHeader      *sh;

{
	float          *rimg;
	int             xdim, ydim, len;
	int             i, j, m, n;

	if (mh->orientation == 0)
		return (img);
	xdim = sh->dim1;
	ydim = sh->dim2;
	len = xdim * ydim;
	if ((rimg = (float *) malloc (len * sizeof (float))) == NULL) {
		fprintf (stderr, "ERROR [flipimg]: Could not malloc memory for rimg\n");
		return (NULL);
	}
	for (j = 0; j < ydim; j++) {
		m = j * xdim;
		n = (j + 1) * xdim - 1;
		for (i = 0; i < xdim; i++)
			rimg[m + i] = img[n - i];
	}
	mh->orientation = 0;
	free (img);
	return (rimg);
}

@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.2 1995/11/28 21:14:52 tom Exp $
d3 3
d33 1
a33 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimg/RCS/pett6.c,v 1.2 1995/11/28 21:14:52 tom Exp $";
d201 4
a204 1
	sh->dim3 = 1;
@


1.2
log
@check orientation in flipimg
@
text
@d1 1
a1 1
/*  $Id: pett6.c,v 1.1 1995/11/28 20:11:33 tom Exp tom $
d3 3
d24 1
a24 1
 *		fileopen	-	Open image file specified by filename.
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimg/RCS/pett6.c,v 1.1 1995/11/28 20:11:33 tom Exp tom $";
a39 2
#define MAX_FILES 20
#define MAXFNAME 120
d336 1
a336 1
int             wrimgp6 (filename, img, phdr, plane)
a339 1
	int             plane;
d422 1
a422 1
 *  Function:       fileopen
d432 1
a432 1
FILE           *fileopen (filename, mode)
d445 1
a445 1
				fprintf (stderr, "ERROR [fileopen]: Could not open file %s\n", filename);
d463 1
a463 1
		fprintf (stderr, "ERROR [fileopen]: Maximum number of open files exceeded\n");
d470 1
a470 1
		fprintf (stderr, "ERROR [fileopen]: Could not malloc memory for directory\n");
d473 1
d510 1
a510 1
				fp_listf[fn] = fileopen (file_list[fn], mode);
d539 1
a539 1
	if ((fp_listf[fn] = fileopen (filename, mode)) != NULL) {
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
    $Log$
d27 1
a27 1
static char     rcsid[] = "$Header$";
d400 2
@
