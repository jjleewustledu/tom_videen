head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	93.04.28.20.26.28;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.04.21.16.59.59;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.03.03.20.40.21;	author ty7777;	state Exp;
branches;
next	;


desc
@write3dreal.c initial checking in.
@


1.3
log
@Put malloc for matrix_data inside loop. If not, it is a bug.
@
text
@/*$Id: write3dreal.c,v 1.2 1993/04/21 16:59:59 ty7777 Exp ty7777 $*/
/*$Log: write3dreal.c,v $
 * Revision 1.2  1993/04/21  16:59:59  ty7777
 * Before writing WriteRealImage ().
 *
 * Revision 1.1  1993/03/03  20:40:21  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
  File:		write3dreal.c

  Function:	void write3dreal (MatrixFile *fptr, short width, short height, 
			short num_slices, float *image3d)

  Arguments:	
		width,			spatial dimension, width.
		height,			spatial dimension, height.
		num_slices,		number of slices in image;
		image3d,		3D image. 

  Description:	This function writes a 3D image to an ECAT matrix file.
		mlist is used to insert the proper number of frames, planes, 
		gates, and bed postitions.

  History:	 Created by Tom Yang on 01/04/92. 
___________________________________________________________________________*/

#include <values.h>
#include <petutil/petutil.h>
#include <petutil/matrix.h>

int write3dreal (out_imagefile, file_type, mlist, matval, width, height, num_slices, 
	pixel_size, plane_separation, filter_code, cutoff_frequency, order, image3d, 
	main_header_proto, subheader_list)
	char		*out_imagefile;
	short		file_type;
	Mlist		*mlist;
	struct Matval	matval;
	short		width;
	short		height;
	short		num_slices;
	float		pixel_size;
	float		plane_separation;
	short		filter_code;
	float		cutoff_frequency;
	int		order;
	float		*image3d;
	Main_header	*main_header_proto;
	Image_subheader	**subheader_list;
{
	MatrixFile	*matrix_create ();
	int		mat_numcod ();
	int		matrix_write ();

	Image_subheader	*image_subheader;
	Main_header	*main_header;
	MatrixData	*matrixx_data; 
	MatrixFile	*fptr_out;
	float		abs_slice_min;
	float		abs_slice_max;
	float		max_pixel_value;
	float		scale;
	float		slice_min;
	float		slice_max;
	float		temp;
	int		i;
	int		index;
	int		j;
	int		matnum;
	int		slice_dimension;
	int		status;
	short		*matrix_data_array;

	main_header	= matrixx_init_main_header (out_imagefile, file_type, main_header_proto);

	/*
	 * Assign number of frames, planesm gates and bed positions to main header.
	 */
	if (main_header_proto == NULL)
 		main_header->data_type	= VAX_I2;
 	main_header->num_frames		= mlist->frames;
	main_header->num_planes		= mlist->planes;
        main_header->num_gates		= mlist->gates;
	main_header->num_bed_pos	= mlist->beds - 1;
	main_header->plane_separation	= plane_separation;

	fptr_out	= matrix_create (out_imagefile, main_header);
	if (fptr_out == NULL) 
	{
		fprintf (stderr, "write3dreal: cannot open %s\n", out_imagefile);
		return FAIL;
	}

	slice_dimension		= width * height;

	/*
	 * Build matrices and write to output file.   
	 */
	for (j = 1; j <= num_slices; j++) 
	{
       		image_subheader	= matrixx_init_image_subheader (*(subheader_list + j - 1));
		if (*(subheader_list + j - 1) == NULL)
		{
			image_subheader->data_type	= VAX_I2;
			image_subheader->num_dimensions	= 2;
			image_subheader->dimension_1	= width;
			image_subheader->dimension_2	= height;
		}
		image_subheader->pixel_size		= pixel_size;
		image_subheader->slice_width		= plane_separation;
		image_subheader->filter_code		+= filter_code;
		image_subheader->filter_params [2]	= cutoff_frequency;
		image_subheader->filter_params [3]	= (float) order;
		matrixx_data				= CreateMatrixData (image_subheader);
       		image_subheader	= (Image_subheader*) matrixx_data->shptr;

		matnum	= mat_numcod (matval.frame, j, matval.gate, matval.data, matval.bed);

		index		= (j - 1) * slice_dimension; 	
		slice_min	= image3d [index];
		slice_max	= slice_min;

		for (i = 0; i < slice_dimension; i++)
		{
			temp	= image3d [index + i];
			if (slice_min > temp)
				slice_min	= temp;
			else if (slice_max < temp)
				slice_max	= temp;
		}

		abs_slice_min	= pkg_abs (slice_min);
		abs_slice_max	= pkg_abs (slice_max);
		max_pixel_value	= pkg_max (abs_slice_max, abs_slice_min);
		scale		= max_pixel_value / MAXSHORT; 

		matrix_data_array	= (short *) calloc (slice_dimension,  sizeof (short));
		if (matrix_data_array == (short *) NULL)
		{
			fprintf (stderr, "write3dreal: Can't allocate matrix_data_array.\n");
			return FAIL;
		}

		if (max_pixel_value > 0.0)
		{
			for (i = 0; i < slice_dimension; i++)
			{
				temp	= (image3d [index + i] * MAXSHORT) / max_pixel_value;
				matrix_data_array [i]	= pkg_min (ROUND (temp), MAXSHORT);
			}
		}

        	matrixx_data->data_ptr	= (caddr_t) matrix_data_array;

		matrixx_data->matnum		= matnum;
		matrixx_data->nviews		= 128;
		matrixx_data->nelements		= 128;
		matrixx_data->nblks		= 64;
		image_subheader->quant_scale	= scale;
		if (max_pixel_value > 0.0)
		{
			temp				= (slice_min * MAXSHORT) / max_pixel_value;
			image_subheader->image_min	= pkg_max (ROUND (temp), -MAXSHORT);
			temp				= (slice_max * MAXSHORT) / max_pixel_value;
			image_subheader->image_max	= pkg_min (ROUND (temp), MAXSHORT);
		}
		else
		{
			image_subheader->image_min	= 0;
			image_subheader->image_max	= 0;
		}
		image_subheader->scan_matrix_num	= matnum;
		image_subheader->norm_matrix_num	= matnum;
		image_subheader->atten_cor_matrix_num	= matnum;

		status	= matrix_write (fptr_out, matnum, matrixx_data);
		if (status == ERROR) 
		{
        		free_matrix_data (matrixx_data);
			return FAIL;
		}
		free_matrix_data (matrixx_data);
	}

	free (main_header);
	matrix_close (fptr_out);

	return SUCCEED;
}
@


1.2
log
@Before writing WriteRealImage ().
@
text
@d1 1
a1 1
/*$Id: write3dreal.c,v 1.1 1993/03/03 20:40:21 ty7777 Exp ty7777 $*/
d3 3
a95 1
	matrix_data_array	= (short *) calloc (slice_dimension,  sizeof (short));
a96 6
	if (matrix_data_array == (short *) NULL)
	{
		fprintf (stderr, "write3dreal: Can't allocate matrix_data_array.\n");
		return FAIL;
	}

d103 1
a103 1
		if (*(subheader_list + j) == NULL)
d137 7
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d31 2
a32 1
	pixel_size, plane_separation, image3d, main_header_proto, subheader_list)
d42 3
d114 6
a119 3
		image_subheader->pixel_size	= pixel_size;
		image_subheader->slice_width	= plane_separation;
		matrixx_data			= CreateMatrixData (image_subheader);
@
