head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	95.10.30.22.39.01;	author tom;	state Exp;
branches;
next	1.20;

1.20
date	94.09.28.15.20.08;	author ty7777;	state Exp;
branches;
next	1.19;

1.19
date	94.09.28.15.16.44;	author ty7777;	state Exp;
branches;
next	1.18;

1.18
date	94.09.21.20.46.19;	author ty7777;	state Exp;
branches;
next	1.17;

1.17
date	94.09.20.15.53.08;	author ty7777;	state Exp;
branches;
next	1.16;

1.16
date	94.09.20.15.44.08;	author ty7777;	state Exp;
branches;
next	1.15;

1.15
date	94.03.03.20.22.37;	author ty7777;	state Exp;
branches;
next	1.14;

1.14
date	93.10.07.14.27.32;	author ty7777;	state Exp;
branches;
next	1.13;

1.13
date	93.10.06.18.54.41;	author ty7777;	state Exp;
branches;
next	1.12;

1.12
date	93.10.06.14.42.39;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	93.10.05.22.19.40;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	93.09.21.22.15.31;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	93.09.13.22.01.33;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	93.09.10.20.42.10;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	93.09.10.20.36.52;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	93.09.09.19.15.30;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	93.08.12.15.06.33;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	93.07.28.19.33.31;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.06.18.16.51.50;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.06.16.19.33.23;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.04.30.14.05.15;	author ty7777;	state Exp;
branches;
next	;


desc
@Get the .sxr file information.
@


1.21
log
@change include to remove "petutil"
@
text
@/*$Id: getsxr.c,v 1.20 1994/09/28 15:20:08 ty7777 Exp tom $
/*$Log: getsxr.c,v $
 * Revision 1.20  1994/09/28  15:20:08  ty7777
 * Change scale to xscale.
 *
 * Revision 1.19  1994/09/28  15:16:44  ty7777
 * Added xscale.
 *
 * Revision 1.18  1994/09/21  20:46:19  ty7777
 * Read peakslice.
 *
 * Revision 1.17  1994/09/20  15:53:08  ty7777
 * Change the constant for peakslice to PEAK_SLICE_UNDEFINED.
 *
 * Revision 1.16  1994/09/20  15:44:08  ty7777
 * Reading the new sxr file with type 22.
 *
 * Revision 1.15  1994/03/03  20:22:37  ty7777
 * Replace id with header.
 *
 * Revision 1.14  1993/10/07  14:27:32  ty7777
 * Added loop for flipping old xray generated data.
 *
 * Revision 1.13  1993/10/06  18:54:41  ty7777
 * Change ENCODED_SLICE_WIDTH to ENCODED_SLICE_WIDTH + 1.
 *
 * Revision 1.12  1993/10/06  14:42:39  ty7777
 * Processing for non flipped ECAT images.
 *
 * Revision 1.11  1993/10/05  22:19:40  ty7777
 * Change the center of slices for older versions of xray.
 *
 * Revision 1.10  1993/09/21  22:15:31  ty7777
 * Just read the 2nd line if not xray file.
 *
 * Revision 1.9  1993/09/13  22:01:33  ty7777
 * Read scan.
 *
 * Revision 1.8  1993/09/10  20:42:10  ty7777
 * Change scantype to peaktype.
 *
 * Revision 1.7  1993/09/10  20:36:52  ty7777
 * Introduced peaktype parameter for SXR_OUTPUT.
 *
 * Revision 1.6  1993/09/09  19:15:30  ty7777
 * Before sxrweld worked.
 *
 * Revision 1.5  1993/08/12  15:06:33  ty7777
 * Processing incorrect delta-z string.
 *
 * Revision 1.4  1993/07/28  19:33:31  ty7777
 * Adding rcsid.
 *
 * Revision 1.3  1993/06/18  16:51:50  ty7777
 * Adding processing for old .sxr file format.
 *
 * Revision 1.2  1993/06/16  19:33:23  ty7777
 * Fix read ref_slice problem.
 *
 * Revision 1.1  1993/04/30  14:05:15  ty7777
 * Initial revision
 *

/*___________________________________________________________________________
  File:		getsxr.c

  Function:	int getsxr (char *sxr_name, SXR_OUTPUT *sxr_output)

  Arguments:	sxr_name,	Name of .sxr file.
		sxr_output,	Structure containing all the information of a
				.sxr file.
  Return:	SUCCEED: successful; FAIL: error.

  Description:	This function gets skull xray data from an sxr file and write
		it to a structure. The user of this function is responsible for
		freeing the memory of sxr_output->rlpetdim, sxr_output->rlcenter,
		sxr_output->vertical_petdim, sxr_output->rlslicedim after the
		structure sxr_output is no longer used.

		The sxr file can be either generated from "sarploc" on Medusa or 
		be generated from running "xray" on the Sun workstations.

  Called by:	xray, t88mean.	

  Calling:	

  Author:	Tom Yang.

  History:	Created by Tom Yang on 04/20/93. 
___________________________________________________________________________*/

#include <petutil.h>

#define	INCORRECT_DZ	"incorrect delta-z"
#define	DEFAULT_XSCALE	0.0

static char rcsid [] = "$Header: /home/npggw/tom/src/libhp/RCS/getsxr.c,v 1.20 1994/09/28 15:20:08 ty7777 Exp tom $";

PUBLIC int getsxr (sxr_name, sxr_output)
	char		*sxr_name;
	SXR_OUTPUT	*sxr_output;
{
	BOOLEAN	xray_sxr;
	FILE	*sxrfp;
	char	line [MAXLINE];
	char	sbuffer [MAXLINE];
	char	sbuffer1 [MAXLINE];
	char	sbuffer2 [MAXLINE];
	float	fbuffer [11];
	int	i;
	int	num_scanned;
	int	ibuffer [3];

	sxrfp	= fopen (sxr_name, "r");
	if (sxrfp == NULL)
	{
		fprintf (stderr, "Error in opening sxr file %s\n", sxr_name);
		return FAIL;
	}

	/*
	 * Get SXR file type.
	 */
	fgets (line, MAXLINE, sxrfp);
	num_scanned	= sscanf (line, "%d", ibuffer);
	if (num_scanned == 1)
		sxr_output->type	= ibuffer [0];
	else
	{
		fprintf (stderr, "Make sure your sxr file %s has a number as type\n", sxr_name);
		return FAIL;
	}
	if (strstr (line, INCORRECT_DZ) != NULL)
		sxr_output->incorrect_dz	= TRUE;
	else
		sxr_output->incorrect_dz	= FALSE;

	if (strstr (line, "xray") != NULL)
		xray_sxr	= TRUE;
	else
		xray_sxr	= FALSE;

	/*
	 * Get threshold of PET image.
	 */
	fgets (line, MAXLINE, sxrfp);
	if (xray_sxr)
	{
		if (sxr_output->incorrect_dz)
			num_scanned	= sscanf (line, "%s %s %d%%%s", 
					sbuffer, sbuffer1, ibuffer, sbuffer2);
		else
			num_scanned	= sscanf (line, "%s %d%%%s", 
					sbuffer, ibuffer, sbuffer2);
		if ((sxr_output->incorrect_dz && num_scanned == 4) ||
		!sxr_output->incorrect_dz && num_scanned == 3)
		{
			sxr_output->threshold	= ibuffer [0];
			if (strcmp (sbuffer2, "slice") == 0)
				sxr_output->peaktype	= PEAK_PER_SLICE;
			else
				sxr_output->peaktype	= PEAK_PER_SCAN;
		}
		else
		{
			fprintf (stderr, 
			"Error: cannot extract threshold from your sxr file %s\n", sxr_name);
			return FAIL;
		}
	}

	/*
	 * Get the 3rd line.
	 */
	fgets (line, MAXLINE, sxrfp);

	/*
	 * Get the variables from the 4th line.
	 */
	fgets (line, MAXLINE, sxrfp);
	num_scanned	= sscanf (line, "%f %f %d %f %d %f %f %f %f %f %d %f", fbuffer, 
			fbuffer + 1, ibuffer, fbuffer + 2, ibuffer + 1, fbuffer + 3, 
			fbuffer + 4, fbuffer + 5, fbuffer + 6, fbuffer + 7, ibuffer + 2, 
			fbuffer + 8);
	sxr_output->pixel_size			= fbuffer [0];
	sxr_output->magnification_factor	= fbuffer [1];
	sxr_output->number_slices		= ibuffer [0];
	sxr_output->slice_separation		= fbuffer [2];
	sxr_output->reference_slice		= ibuffer [1];
	sxr_output->zatlas_dimension		= fbuffer [3];
	sxr_output->apatlas_dimension		= fbuffer [4];
	sxr_output->peakslice			= PEAK_SLICE_UNDEFINED;
	sxr_output->xscale			= DEFAULT_XSCALE;
	if (num_scanned >= 10)
	{
		sxr_output->film_position	= fbuffer [5];
		sxr_output->scan_position	= fbuffer [6];
		sxr_output->reference_offset	= fbuffer [7];
		if (num_scanned >= 11)
			sxr_output->peakslice	= ibuffer [2];
		if (num_scanned >= 12)
			sxr_output->xscale	= fbuffer [8];
	}
	else
	{
		sxr_output->film_position	= 0.0;
		sxr_output->scan_position	= 0.0; 
		sxr_output->reference_offset	= 0.0;
	}

	/*
	 * Get the variables from the 5th line.
	 */
	fgets (line, MAXLINE, sxrfp);
	num_scanned	= sscanf (line, "%f %f %f %f %f %f %f %f %f %f %f", 
				fbuffer, fbuffer + 1, fbuffer + 2, fbuffer + 3, 
				fbuffer + 4, fbuffer + 5, fbuffer + 6, fbuffer + 7, 
				fbuffer + 8, fbuffer + 9, fbuffer + 10);
	if (num_scanned == 11)
	{
		sxr_output->apxray		= fbuffer [0];
		sxr_output->degx		= fbuffer [1];
		sxr_output->zxray		= fbuffer [2];
		sxr_output->dz			= fbuffer [3];
		sxr_output->dap			= fbuffer [4];
		sxr_output->apcenter		= fbuffer [5];
		sxr_output->ear_separation	= fbuffer [6];
		sxr_output->eardap		= fbuffer [7];
		sxr_output->eardz		= fbuffer [8];
		sxr_output->degy		= fbuffer [9];
		sxr_output->degz		= fbuffer [10];
	}
	else
	{
		fprintf (stderr, "Error: The 5th line of your sxr file %s is wrong.\n", sxr_name);
		return FAIL;
	}

	sxr_output->rlpetdim		= (float *) malloc (sxr_output->number_slices * sizeof (float));
	sxr_output->rlcenter		= (float *) malloc (sxr_output->number_slices * sizeof (float));
	sxr_output->vertical_petdim	= (float *) malloc (sxr_output->number_slices * sizeof (float));
	sxr_output->rlslicedim		= (float *) malloc (sxr_output->number_slices * sizeof (float));

	for (i = 0; i < sxr_output->number_slices; i++)
	{
		fgets (line, MAXLINE, sxrfp);
		num_scanned	= sscanf (line, "%f %f %f %f\n", fbuffer, 
					fbuffer + 1, fbuffer + 2, fbuffer + 3);
		if (num_scanned == 4)
		{
			sxr_output->vertical_petdim [i]	= fbuffer [2];
			sxr_output->rlslicedim [i]	= fbuffer [3];
		}
		else if (num_scanned <= 2)
		{
			if (num_scanned < 2)
				num_scanned	= sscanf (line, "%f, %f\n", fbuffer, fbuffer + 1);
			if (num_scanned == 2)
			{
				sxr_output->vertical_petdim [i]	= 0;
				sxr_output->rlslicedim [i]	= 0;
			}
			else
			{
				fprintf (stderr, "Error in reading sxr file %s.\n", sxr_name);
				fprintf (stderr, "Unknown format for PET dim and center.\n");
				return FAIL;
			}
		}
		sxr_output->rlpetdim [i]	= fbuffer [0];
		sxr_output->rlcenter [i]	= fbuffer [1];
	}

	/*
	 * Processing for sxr files generated with old ECAT images
	 * with the Radiology convertion.
	 */
	if (sxr_output->type <= XRAY_TYPE_RADIOLOGY 
	&& sxr_output->number_slices == ECAT_NUM_SLICES)
	{
		for (i = 0; i < sxr_output->number_slices; i++)
		{
			sxr_output->rlcenter [i]	= (ENCODED_SLICE_WIDTH + 1) 
							- sxr_output->rlcenter [i];
		}
	}

	fclose (sxrfp);

	return SUCCEED;
}
@


1.20
log
@Change scale to xscale.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.19 1994/09/28 15:16:44 ty7777 Exp ty7777 $
d3 3
d92 1
a92 1
#include <petutil/petutil.h>
d97 1
a97 1
static char rcsid [] = "$Header: /amd/home/petsun4/ty7777/src/libhp/RCS/getsxr.c,v 1.19 1994/09/28 15:16:44 ty7777 Exp ty7777 $";
@


1.19
log
@Added xscale.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.18 1994/09/21 20:46:19 ty7777 Exp ty7777 $
d3 3
d94 1
a94 1
static char rcsid [] = "$Header: /amd/home/petsun4/ty7777/src/libhp/RCS/getsxr.c,v 1.18 1994/09/21 20:46:19 ty7777 Exp ty7777 $";
d190 1
a190 1
	sxr_output->scale			= DEFAULT_XSCALE;
@


1.18
log
@Read peakslice.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.17 1994/09/20 15:53:08 ty7777 Exp ty7777 $
d3 3
d89 1
d91 1
a91 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getsxr.c,v 1.17 1994/09/20 15:53:08 ty7777 Exp ty7777 $";
d175 4
a178 3
	num_scanned	= sscanf (line, "%f %f %d %f %d %f %f %f %f %f %d", fbuffer, fbuffer + 1, ibuffer,
			fbuffer + 2, ibuffer + 1, fbuffer + 3, fbuffer + 4, fbuffer + 5, fbuffer + 6,
			fbuffer + 7, ibuffer + 2);
d187 1
d195 2
@


1.17
log
@Change the constant for peakslice to PEAK_SLICE_UNDEFINED.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.16 1994/09/20 15:44:08 ty7777 Exp ty7777 $
d3 3
d87 1
a87 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getsxr.c,v 1.16 1994/09/20 15:44:08 ty7777 Exp ty7777 $";
d171 1
a171 1
	num_scanned	= sscanf (line, "%f %f %d %f %d %f %f %f %f %f", fbuffer, fbuffer + 1, ibuffer,
@


1.16
log
@Reading the new sxr file with type 22.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.15 1994/03/03 20:22:37 ty7777 Exp ty7777 $
d3 3
d84 1
a84 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getsxr.c,v 1.15 1994/03/03 20:22:37 ty7777 Exp ty7777 $";
d178 1
a178 1
	sxr_output->peakslice			= UNDEFINED;
@


1.15
log
@Replace id with header.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.14 1993/10/07 14:27:32 ty7777 Exp ty7777 $
d3 3
d81 1
a81 1
static char rcsid [] = "$Header$";
d96 1
a96 2
	int	refslice;
	int	ibuffer;
d109 1
a109 1
	num_scanned	= sscanf (line, "%d", &ibuffer);
d111 1
a111 1
		sxr_output->type	= ibuffer;
d135 1
a135 1
					sbuffer, sbuffer1, &ibuffer, sbuffer2);
d138 1
a138 1
					sbuffer, &ibuffer, sbuffer2);
d142 1
a142 1
			sxr_output->threshold	= ibuffer;
d165 3
a167 3
	num_scanned	= sscanf (line, "%f %f %d %f %d %f %f %f %f %f", fbuffer, fbuffer + 1, &ibuffer,
			fbuffer + 2, &refslice, fbuffer + 3, fbuffer + 4, fbuffer + 5, fbuffer + 6,
			fbuffer + 7);
d170 1
a170 1
	sxr_output->number_slices		= ibuffer;
d172 1
a172 1
	sxr_output->reference_slice		= refslice;
d175 2
a176 1
	if (num_scanned == 10)
d181 2
@


1.14
log
@Added loop for flipping old xray generated data.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.13 1993/10/06 18:54:41 ty7777 Exp ty7777 $
d3 3
d65 1
a65 1
  Called by:	
d69 2
d78 1
a78 1
static char rcsid []= "$Id: getsxr.c,v 1.13 1993/10/06 18:54:41 ty7777 Exp ty7777 $";
@


1.13
log
@Change ENCODED_SLICE_WIDTH to ENCODED_SLICE_WIDTH + 1.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.12 1993/10/06 14:42:39 ty7777 Exp ty7777 $
d3 3
d73 1
a73 1
static char rcsid []= "$Id: getsxr.c,v 1.12 1993/10/06 14:42:39 ty7777 Exp ty7777 $";
d251 5
a255 2
		sxr_output->rlcenter [i]	= (ENCODED_SLICE_WIDTH + 1) 
						- sxr_output->rlcenter [i];
@


1.12
log
@Processing for non flipped ECAT images.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.11 1993/10/05 22:19:40 ty7777 Exp ty7777 $
d3 3
d70 1
a70 1
static char rcsid []= "$Id: getsxr.c,v 1.11 1993/10/05 22:19:40 ty7777 Exp ty7777 $";
d248 1
a248 1
		sxr_output->rlcenter [i]	= ENCODED_SLICE_WIDTH 
@


1.11
log
@Change the center of slices for older versions of xray.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.10 1993/09/21 22:15:31 ty7777 Exp ty7777 $
d3 3
d67 1
a67 1
static char rcsid []= "$Id: getsxr.c,v 1.10 1993/09/21 22:15:31 ty7777 Exp ty7777 $";
d238 6
a243 1
	if (sxr_output->type <= XRAY_TYPE && sxr_output->number_slices == 31)
d245 2
a246 1
		sxr_output->rlcenter [i]	= ENCODED_SLICE_WIDTH - sxr_output->rlcenter [i];
@


1.10
log
@Just read the 2nd line if not xray file.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.9 1993/09/13 22:01:33 ty7777 Exp ty7777 $
d3 3
d64 1
a64 1
static char rcsid []= "$Id: getsxr.c,v 1.9 1993/09/13 22:01:33 ty7777 Exp ty7777 $";
d233 5
@


1.9
log
@Read scan.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.8 1993/09/10 20:42:10 ty7777 Exp ty7777 $
d3 3
d61 1
a61 1
static char rcsid []= "$Id: getsxr.c,v 1.8 1993/09/10 20:42:10 ty7777 Exp ty7777 $";
d67 1
d103 5
d112 1
a112 6
	if (sxr_output->incorrect_dz)
		num_scanned	= sscanf (line, "%s %s %d%%%s", sbuffer, sbuffer1, &ibuffer, sbuffer2);
	else
		num_scanned	= sscanf (line, "%s %d%%%s", sbuffer, &ibuffer, sbuffer2);
	if ((sxr_output->incorrect_dz && num_scanned == 4) ||
	!sxr_output->incorrect_dz && num_scanned == 3)
d114 3
a116 3
		sxr_output->threshold	= ibuffer;
		if (strcmp (sbuffer2, "slice") == 0)
			sxr_output->peaktype	= PEAK_PER_SLICE;
d118 17
a134 6
			sxr_output->peaktype	= PEAK_PER_SCAN;
	}
	else
	{
		fprintf (stderr, "Error: cannot extract threshold from your sxr file %s\n", sxr_name);
		return FAIL;
@


1.8
log
@Change scantype to peaktype.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.7 1993/09/10 20:36:52 ty7777 Exp ty7777 $
d3 3
d58 1
a58 1
static char rcsid []= "$Id: getsxr.c,v 1.7 1993/09/10 20:36:52 ty7777 Exp ty7777 $";
d104 1
a104 1
		num_scanned	= sscanf (line, "%s %s %d %s", sbuffer, sbuffer1, &ibuffer, sbuffer2);
d106 3
a108 3
		num_scanned	= sscanf (line, "%s %d", sbuffer, &ibuffer, sbuffer2);
	if ((sxr_output->incorrect_dz && num_scanned == 3) ||
	!sxr_output->incorrect_dz && num_scanned == 2)
d111 3
a113 1
		if (strcmp (sbuffer2, "scan") == 0)
a114 2
		else
			sxr_output->peaktype	= PEAK_PER_SLICE;
@


1.7
log
@Introduced peaktype parameter for SXR_OUTPUT.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.6 1993/09/09 19:15:30 ty7777 Exp ty7777 $
d3 3
d55 1
a55 1
static char rcsid []= "$Id: getsxr.c,v 1.6 1993/09/09 19:15:30 ty7777 Exp ty7777 $";
d109 1
a109 1
			sxr_output->scantype	= PEAK_PER_SCAN;
d111 1
a111 1
			sxr_output->scantype	= PEAK_PER_SLICE;
@


1.6
log
@Before sxrweld worked.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.5 1993/08/12 15:06:33 ty7777 Exp ty7777 $
d3 3
d52 1
a52 1
static char rcsid []= "$Id: getsxr.c,v 1.5 1993/08/12 15:06:33 ty7777 Exp ty7777 $";
d62 1
d80 8
a87 2
	sscanf (line, "%d", &ibuffer);
	sxr_output->type	= ibuffer;
d98 1
a98 1
		sscanf (line, "%s %s %d", sbuffer, sbuffer1, &ibuffer);
d100 15
a114 2
		sscanf (line, "%s %d", sbuffer, &ibuffer);
	sxr_output->threshold	= ibuffer;
d152 23
a174 14
	sscanf (line, "%f %f %f %f %f %f %f %f %f %f %f", fbuffer, fbuffer + 1, fbuffer + 2,
		fbuffer + 3, fbuffer + 4, fbuffer + 5, fbuffer + 6, fbuffer + 7, fbuffer + 8, 
		fbuffer + 9, fbuffer + 10);
	sxr_output->apxray		= fbuffer [0];
	sxr_output->degx		= fbuffer [1];
	sxr_output->zxray		= fbuffer [2];
	sxr_output->dz			= fbuffer [3];
	sxr_output->dap			= fbuffer [4];
	sxr_output->apcenter		= fbuffer [5];
	sxr_output->ear_separation	= fbuffer [6];
	sxr_output->eardap		= fbuffer [7];
	sxr_output->eardz		= fbuffer [8];
	sxr_output->degy		= fbuffer [9];
	sxr_output->degz		= fbuffer [10];
@


1.5
log
@Processing incorrect delta-z string.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.4 1993/07/28 19:33:31 ty7777 Exp ty7777 $
d3 3
d35 2
a36 2
		The .sxr file can be either from Medusa or generated on Sun from
		running "xray".
d49 1
a49 1
static char rcsid []= "$Id: getsxr.c,v 1.4 1993/07/28 19:33:31 ty7777 Exp ty7777 $";
@


1.4
log
@Adding rcsid.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.3 1993/06/18 16:51:50 ty7777 Exp ty7777 $
d3 3
d44 1
a44 1
static char rcsid []= "$Id$";
d46 2
d55 1
d75 4
d84 4
a87 1
	sscanf (line, "%s %d", sbuffer, &ibuffer);
@


1.3
log
@Adding processing for old .sxr file format.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.2 1993/06/16 19:33:23 ty7777 Exp ty7777 $
d3 3
d40 2
@


1.2
log
@Fix read ref_slice problem.
@
text
@d1 1
a1 1
/*$Id: getsxr.c,v 1.1 1993/04/30 14:05:15 ty7777 Exp ty7777 $
d3 3
d47 1
d81 1
a81 1
	i	= sscanf (line, "%f %f %d %f %d %f %f %f %f %f", fbuffer, fbuffer + 1, &ibuffer,
d91 1
a91 1
	if (i == 10)
d107 2
a108 1
	fscanf (sxrfp, "%f %f %f %f %f %f %f %f %f %f %f", fbuffer, fbuffer + 1, fbuffer + 2,
d130 24
a153 1
		fscanf (sxrfp, "%f %f %f %f\n", fbuffer, fbuffer + 1, fbuffer + 2, fbuffer + 3);
a155 2
		sxr_output->vertical_petdim [i]	= fbuffer [2];
		sxr_output->rlslicedim [i]	= fbuffer [3];
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$
/*$Log$
d44 1
d78 1
a78 1
			fbuffer + 2, &i, fbuffer + 3, fbuffer + 4, fbuffer + 5, fbuffer + 6,
d84 1
a84 1
	sxr_output->reference_slice		= i;
@
