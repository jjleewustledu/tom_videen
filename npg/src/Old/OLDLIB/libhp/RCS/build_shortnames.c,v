head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	95.10.30.22.39.01;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	94.04.18.21.44.52;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	94.03.03.19.59.37;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	94.01.06.19.12.47;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	93.11.03.17.00.02;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	93.11.02.21.22.46;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.09.07.21.01.31;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.09.03.16.59.21;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.09.02.14.24.48;	author ty7777;	state Exp;
branches;
next	;


desc
@Modified to process n1wn2 and n1fn2vn3.
@


1.9
log
@change include to remove "petutil"
@
text
@/*$Id: build_shortnames.c,v 1.8 1994/04/18 21:44:52 ty7777 Exp tom $*/
/*$Log: build_shortnames.c,v $
 * Revision 1.8  1994/04/18  21:44:52  ty7777
 * Deleted rms_align for difference images.
 *
 * Revision 1.7  1994/03/03  19:59:37  ty7777
 * Replace id with header.
 *
 * Revision 1.6  1994/01/06  19:12:47  ty7777
 * Building multi-tracer names correctly for scanset_2.
 *
 * Revision 1.5  1993/11/03  17:00:02  ty7777
 * Same as the last version.
 *
 * Revision 1.4  1993/11/02  21:22:46  ty7777
 * Added suffix.
 *
 * Revision 1.3  1993/09/07  21:01:31  ty7777
 * Added processing for WELDED_IMAGE_MODE.
 *
 * Revision 1.2  1993/09/03  16:59:21  ty7777
 * Change imglist1.h to imglist.h
 *
 * Revision 1.1  1993/09/02  14:24:48  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________________
File Name:	build_shortnames.c

Function:	PUBLIC int build_shortnames (PARAMETER_DATA parameter_data, 
			IMAGE_LIST_DATA image_list, int image_mode, int filter_mode,
			int *num_image_files, char **short_image_files, char *short_sxrfile)

Arguments:	parameter_data:		a PARAMETER_DATA structure containing all the
					parameters in a parameter file.
		image_list:		data structure containing scan identification,
					activation scan number, and control scan number.
					IMAGE_LIST_DATA is defined in 
					/usr/locla/include/petutil/imglist.h.
		image_mode:		image mode. Either STDIMAGE_MODE or 
					DIFIMAGE_MODE. STDIMAGE_MODE will build image 
					names like p2000ho1_5b7.img. DIFIMAGE_MODE will 
					build image names like p2000a1-3_5b7.dif.
		filter_mode:		filter mode. RECFILTER_MODE: use recfilter;
					IMGFILTER_MODE: use imgfilter; MSKFILTER_MODE: 
					use mskfilter.
		num_image_files:	number of image files, returned.
		short_image_files:	short PET image files constructed from subject number, 
					tracer, and scan number. The user of this function is 
					responsible for allocating enough momory for this list of
					strings. The recommended string size is MAXLINE ( = 256) 
					defined in 
					/usr/local/include/petutil/petutil.h.  
					short_image_files are filled after calling this function.  
					To see how the array is arranged, please read the 
					algorithm for details. 
		short_sxrfile:		short sxr file constructed. The user is responsible for 
					allocating memory for this string. The recommended string 
					size is MAXLINE ( = 256), returned.

		Return Value:	SUCCEED = 0, successful complesion of the function. 
				FAIL = -1, something is wrong.

Description:	Construct a short PET image file.

Algorithm:
	if (image_mode == STDIMAGE_MODE) then
		short_image_files [0]: 
		<species><subject_id><tracer><scanset1_id><filter>[.<extension>] 

		short_image_files [1]: 
		<species><subject_id><tracer><scanset2_id><filter>[.<extension>] 
	else if (image_mode == DIFIMAGE_MODE)
		short_image_files [0]: 
		<species><subject_id><tracer><scanset1_id>-<scanset2_id><suffix><filter>[.<extension>] 
	else if (image_mode == PREWELDED_IMAGE_MODE)
		short_image_files [0]: 
		<species><subject_id><tracer><scanset1_n1><filter>[.<extension>] 

		short_image_files [1]: 
		<species><subject_id><tracer><scanset1_n2><filter>[.<extension>] 

		short_image_files [2]: 
		<species><subject_id><tracer><scanset2_n1><filter>[.<extension>] 

		short_image_files [3]: 
		<species><subject_id><tracer><scanset2_n2><filter>[.<extension>] 
	else if (image_mode == MULTITRACER_IMAGE_MODE)
		short_image_files [0]: 
		<species><subject_id><tracer><scanset1_n1><filter>[.<extension>] 

		short_image_files [1]: 
		<species><subject_id><ftracer><scanset1_n2><filter>[.<extension>] 

		short_image_files [2]: 
		<species><subject_id><vtracer><scanset1_n3><filter>[.<extension>] 

		short_image_files [3]: 
		<species><subject_id><tracer><scanset2_n1><filter>[.<extension>] 

		short_image_files [4]: 
		<species><subject_id><ftracer><scanset2_n2><filter>[.<extension>] 

		short_image_files [5]: 
		<species><subject_id><vtracer><scanset2_n3><filter>[.<extension>] 
	else if (image_mode == WELDED_IMAGE_MODE)
		short_image_files [0]: 
		<species><subject_id><tracer><scanset1_id>w<scanset2_id>[.<extension>] 
	endif

Pseudo code: 
	copy species to cbuffer
	concatenate scan_id to cbuffer
	copy cbuffer to short_sxrfile
	concatenate the tracer to cbuffer
	if (filter_mode is RECFILTER_MODE) then
		use recfilter to construct fsuffix
	else if (filter_mode is IMGFILTER_MODE) then
		use imgfilter to construct fsuffix
	else if (filter_mode is MSKFILTER_MODE) then
		use mskfilter to construct fsuffix
	endif
	if (image_mode is STDIMAGE_MODE) then
		copy cbuffer to short_image_files [0]
		concatenate scanset1_id to short_image_files [0]
		num_image_files = 1
		if (scanset2_id is not empty) then
			copy cbuffer to short_image_files [1]
			concatenate scanset2_id to short_image_files [1]
			num_image_files = 2
		endif
	else if (image_mode is DIFIMAGE_MODE) then
		if (scanset2_id is empty) then
			print error message
			return FAIL
		endif
		copy cbuffer to short_image_files [0]
		concatenate scanset1_id to short_image_files [0]
		concatenate "-" to short_image_file
		concatenate scanset2_id to short_image_files [0]
		num_image_files = 1
	else if (image_mode is PREWELDED_IMAGE_MODE) then
		parse scanset1_id to get scanset1_n1 and scanset1_n2
		copy cbuffer to short_image_files [0]
		copy cbuffer to short_image_files [1]
		concatenate scanset1_n1 to short_image_files [0]
		concatenate scanset1_n2 to short_image_files [1]
		num_image_files = 2
		if (scanset2_id is not empty) then
			parse scanset2_id to get scanset2_n1 and scanset2_n2
			copy cbuffer to short_image_files [2]
			copy cbuffer to short_image_files [3]
			concatenate scanset2_n1 to short_image_files [2]
			concatenate scanset2_n2 to short_image_files [3]
			num_image_files = 4
		endif
	else if (image_mode is MULTITRACER_IMAGE_MODE) then
		parse scanset1_id to get scanset1_n1, scanset1_n2, and scanset1_n3
		copy cbuffer to short_image_files [0]
		copy cbuffer to short_image_files [1]
		copy cbuffer to short_image_files [2]
		concatenate scanset1_n1 to short_image_files [0]
		concatenate scanset1_n2 to short_image_files [1]
		concatenate scanset1_n3 to short_image_files [2]
		num_image_files = 3
		if (scanset2_id is not empty) then
			parse scanset2_id to get scanset2_n1, scanset2_n2, and scanset2_n3
			copy cbuffer to short_image_files [3]
			copy cbuffer to short_image_files [4]
			copy cbuffer to short_image_files [5]
			concatenate scanset2_n1 to short_image_files [3]
			concatenate scanset2_n2 to short_image_files [4]
			concatenate scanset2_n3 to short_image_files [5]
			num_image_files = 6
		endif
	endif
	for (each i with 0 <= i < num_image_files) do
		concatente fsuffix to string short_image_files [i]
		concatente extension to string short_image_files [i]
	enddo
	if (sxrid is not empty) then
		concatenate sxrid to short_sxrfile
	else
		concatenate extension ".sxr" to short_sxrfile
	endif
	return SUCCEED

Called by:	The checkimg in checkimg.c.

Calling:			

Creator:	Tom Yang

History:	Created by Tom Yang on 06/28/1993

___________________________________________________________________________________*/

#include <values.h>
#include <imglist.h>

#define	MINUS	"-"
#define	WELD	"w"

static char rcsid []= "$Header: /home/npggw/tom/src/libhp/RCS/build_shortnames.c,v 1.8 1994/04/18 21:44:52 ty7777 Exp tom $";

PUBLIC int build_shortnames (parameter_data, image_list, image_mode, filter_mode, num_image_files, 
		short_image_files, short_sxrfile)
	PARAMETER_DATA		parameter_data;
	IMAGE_LIST_DATA		image_list;
	int			image_mode;
	int			filter_mode;
	int			*num_image_files;
	char			short_image_files[][MAXLINE];
	char			*short_sxrfile;
{
	char	cbuffer [MAXLINE];
	char	extension [MAXNAME];
	char	fsuffix [MAXNAME];
	char	string [MAXLINE];
	char	subject [MAXNAME];
	float	filter_cutoff;
	int	filter_order;
	int	filter_type;
	int	i;
	int	scanset_field [6];

	strcpy (cbuffer, parameter_data.species);
	strcat (cbuffer, image_list.subject_id);
	strcpy (subject, cbuffer);
	strcat (cbuffer, parameter_data.tracer);

	if (filter_mode == RECFILTER_MODE)
	{
		filter_type	= parameter_data.recfilter_type; 
		filter_cutoff	= parameter_data.recfilter_cutoff; 
		filter_order	= parameter_data.recfilter_order; 
	}
	else if (filter_mode == IMGFILTER_MODE)
	{
		filter_type	= parameter_data.imgfilter_type; 
		filter_cutoff	= parameter_data.imgfilter_cutoff; 
		filter_order	= parameter_data.imgfilter_order; 
	}
	else if (filter_mode == MSKFILTER_MODE)
	{
		filter_type	= parameter_data.mskfilter_type; 
		filter_cutoff	= parameter_data.mskfilter_cutoff; 
		filter_order	= parameter_data.mskfilter_order; 
	}

	if (filter_type != FILTER_NONE)
	{
		filter_suffix (filter_type, filter_cutoff, filter_order, fsuffix);
	}

	if (image_mode == STDIMAGE_MODE)
	{
		strcpy (short_image_files [0], cbuffer);
		strcat (short_image_files [0], image_list.scanset1_id);
		*num_image_files	= 1;
		
		/*
		 * Processing for scanset2 if it is necessary
		 */
		if (strlen (image_list.scanset2_id) > 0)
		{
			strcpy (short_image_files [1], cbuffer);
			strcat (short_image_files [1], image_list.scanset2_id);
			*num_image_files	= 2;
		}
	}
	else if (image_mode == DIFIMAGE_MODE)
	{
		if (strlen (image_list.scanset2_id) == 0)
		{
			fprintf (stderr, "Make sure your image list file is paired.\n");
			return FAIL;
		}

		strcpy (short_image_files [0], cbuffer);
		strcat (short_image_files [0], image_list.scanset1_id);
		strcat (short_image_files [0], MINUS);
		strcat (short_image_files [0], image_list.scanset2_id);
		*num_image_files	= 1;
	}
	else if (image_mode == PREWELDED_IMAGE_MODE)
	{
		if (sscanf (image_list.scanset1_id, "%dw%d", scanset_field, scanset_field + 1) != 2)
		{
			fprintf (stderr, "Make sure scaset1_id (%s) is of the form n1wn2.\n",
				image_list.scanset1_id);
			return FAIL;
		}
		 
		for (i = 0; i <= 1; i++)
		{
			strcpy (short_image_files [i], cbuffer);
			itoa (scanset_field [i], string);
			strcat (short_image_files [i], string);
		}
		*num_image_files	= 2;

		if (strlen (image_list.scanset2_id) > 0)
		{
			if (sscanf (image_list.scanset2_id, "%dw%d", scanset_field, 
			scanset_field + 1) != 2)
			{
				fprintf (stderr, "Make sure scaset2_id (%s) is of the form n1wn2.\n",
					image_list.scanset2_id);
				return FAIL;
			}
		 
			for (i = 2; i <= 3; i++)
			{
				strcpy (short_image_files [i], cbuffer);
				itoa (scanset_field [i - 2], string);
				strcat (short_image_files [i], string);
			}
			*num_image_files	= 4;
		}
	}
	else if (image_mode == MULTITRACER_IMAGE_MODE)
	{
		if (sscanf (image_list.scanset1_id, "%df%dv%d", 
		scanset_field, scanset_field + 1, scanset_field + 2) != 3)
		{
			fprintf (stderr, "Make sure scaset1_id (%s) is of the form n1fn2vn3.\n",
				image_list.scanset1_id);
			return FAIL;
		}
		 
		strcpy (short_image_files [0], cbuffer);
		strcpy (short_image_files [1], subject);
		strcat (short_image_files [1], parameter_data.ftracer);
		strcpy (short_image_files [2], subject);
		strcat (short_image_files [2], parameter_data.vtracer);
		for (i = 0; i <= 2; i++)
		{
			itoa (scanset_field [i], string);
			strcat (short_image_files [i], string);
		}
		*num_image_files	= 3;

		if (strlen (image_list.scanset2_id) > 0)
		{
			if (sscanf (image_list.scanset2_id, "%df%dv%d", 
			scanset_field, scanset_field + 1, scanset_field + 2) != 3)
			{
				fprintf (stderr, "Make sure scaset1_id (%s) is of the form n1fn2vn3.\n",
					image_list.scanset2_id);
				return FAIL;
			}
		 
			strcpy (short_image_files [3], cbuffer);
			strcpy (short_image_files [4], subject);
			strcat (short_image_files [4], parameter_data.ftracer);
			strcpy (short_image_files [5], subject);
			strcat (short_image_files [5], parameter_data.vtracer);
			for (i = 3; i <= 5; i++)
			{
				itoa (scanset_field [i - 3], string);
				strcat (short_image_files [i], string);
			}
			*num_image_files	= 6;
		}
	}
	else if (image_mode == WELDED_IMAGE_MODE)
	{
		if (strlen (image_list.scanset2_id) == 0)
		{
			fprintf (stderr, "Make sure your image list file is paired.\n");
			return FAIL;
		}

		strcpy (short_image_files [0], cbuffer);
		strcat (short_image_files [0], image_list.scanset1_id);
		strcat (short_image_files [0], WELD);
		strcat (short_image_files [0], image_list.scanset2_id);
		*num_image_files	= 1;
	}
	else
	{
		fprintf (stderr, "Unknown image mode: %d\n", image_mode);
		return FAIL;
	}

	/*
	 * Add extension.
	 */
	if (strlen (parameter_data.extension) == 0 && image_mode == DIFIMAGE_MODE)
		strcpy (extension, DIFF_EXT); 
	else
		strcpy (extension, parameter_data.extension); 
	for (i = 0; i < *num_image_files; i++)
	{
		strcat (short_image_files [i], parameter_data.suffix);
		if (filter_type != FILTER_NONE)
			strcat (short_image_files [i], fsuffix);
		strcat (short_image_files [i], extension);
	}

	/*
	 * Construct short sxr file.
	 */
	strcpy (short_sxrfile, subject);
	if (strlen (image_list.sxrid) > 0)
		strcat (short_sxrfile, image_list.sxrid);
	else
		strcat (short_sxrfile, SXR_EXT);

	return SUCCEED;
}
@


1.8
log
@Deleted rms_align for difference images.
@
text
@d1 1
a1 1
/*$Id: build_shortnames.c,v 1.7 1994/03/03 19:59:37 ty7777 Exp ty7777 $*/
d3 3
d200 1
a200 1
#include <petutil/imglist.h>
d205 1
a205 1
static char rcsid []= "$Header: /home/petsun4/ty7777/src/libhp/RCS/build_shortnames.c,v 1.7 1994/03/03 19:59:37 ty7777 Exp ty7777 $";
@


1.7
log
@Replace id with header.
@
text
@d1 1
a1 1
/*$Id: build_shortnames.c,v 1.6 1994/01/06 19:12:47 ty7777 Exp ty7777 $*/
d3 3
a138 1
		concatenate rms_align to short_image_files [0]
d202 1
a202 1
static char rcsid []= "$Header$";
a281 1
		strcat (short_image_files [0], parameter_data.rms_align);
@


1.6
log
@Building multi-tracer names correctly for scanset_2.
@
text
@d1 1
a1 1
/*$Id: build_shortnames.c,v 1.5 1993/11/03 17:00:02 ty7777 Exp ty7777 $*/
d3 3
d200 1
a200 1
static char rcsid []= "$Id: build_shortnames.c,v 1.5 1993/11/03 17:00:02 ty7777 Exp ty7777 $";
@


1.5
log
@Same as the last version.
@
text
@d1 1
a1 1
/*$Id: build_shortnames.c,v 1.4 1993/11/02 21:22:46 ty7777 Exp $*/
d3 3
d197 1
a197 1
static char rcsid []= "$Id: build_shortnames.c,v 1.4 1993/11/02 21:22:46 ty7777 Exp $";
a354 1
				strcpy (short_image_files [i], cbuffer);
@


1.4
log
@Added suffix.
@
text
@d1 1
a1 1
/*$Id: build_shortnames.c,v 1.3 1993/09/07 21:01:31 ty7777 Exp ty7777 $*/
d3 3
d194 1
a194 1
static char rcsid []= "$Id: build_shortnames.c,v 1.3 1993/09/07 21:01:31 ty7777 Exp ty7777 $";
@


1.3
log
@Added processing for WELDED_IMAGE_MODE.
@
text
@d1 1
a1 1
/*$Id: build_shortnames.c,v 1.2 1993/09/03 16:59:21 ty7777 Exp ty7777 $*/
d3 3
d191 1
a191 1
static char rcsid []= "$Id: build_shortnames.c,v 1.2 1993/09/03 16:59:21 ty7777 Exp ty7777 $";
d385 1
d388 1
a388 1
		strcat (short_image_files [i], parameter_data.extension);
@


1.2
log
@Change imglist1.h to imglist.h
@
text
@d1 1
a1 1
/*$Id: build_shortnames.c,v 1.1 1993/09/02 14:24:48 ty7777 Exp ty7777 $*/
d3 3
d89 3
d186 1
d188 1
a188 1
static char rcsid []= "$Id: build_shortnames.c,v 1.1 1993/09/02 14:24:48 ty7777 Exp ty7777 $";
d352 14
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d177 1
a177 1
#include <petutil/imglist1.h>
a178 1
#define	TEN	10
d181 1
a181 1
static char rcsid []= "$Id: build_shortname.c,v 1.3 1993/08/12 14:53:47 ty7777 Exp ty7777 $";
d190 1
a190 1
	char			**short_image_files;
d194 1
d197 1
d206 1
a206 1
	strcpy (short_sxrfile, cbuffer);
d310 5
a316 1
			strcpy (short_image_files [i], cbuffer);
d332 5
d355 4
d366 4
@
