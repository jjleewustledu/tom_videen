head	1.4;
access;
symbols;
locks
	ty7777:1.4; strict;
comment	@ * @;


1.4
date	93.06.24.21.10.18;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.06.24.19.58.05;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.06.24.19.29.20;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.06.24.19.28.24;	author ty7777;	state Exp;
branches;
next	;


desc
@Nested if version.
@


1.4
log
@Modify description.
@
text
@/*$Id: setpath.c,v 1.3 1993/06/24 19:58:05 ty7777 Exp ty7777 $*/
/*$Log: setpath.c,v $
 * Revision 1.3  1993/06/24  19:58:05  ty7777
 * Added error message for retrieving files.
 *
 * Revision 1.2  1993/06/24  19:29:20  ty7777
 * The ifs are not nested anymore.
 **/

/*___________________________________________________________________________________
File Name:	setpath.c

Function:		int setpath (char *short_filename, char *id, struct INFO_TYPE *finfo, 
						char *complete_filename, BOOLEAN demigrate)

Arguments:	
		short_filename	-	file name in short format, e.g. p2208ho1.img
		id							-	subject id (p1234 or m445) or composite id (pnp34 or mnp34)
		finfo						-	structure INFO_TYPE (defined in /usr/local/include/petutil/archive.h)
											cat, type, attr and fltr must be defined;
											spec is not used;
		complete_filename: complete file name, e.g. /data/archive/pet/p2208/p2208ho1.img
		demigrate:			- demigrate can have the value of 0 (FASLE) or 1 (TRUE).  TRUE will 
											cause any files migrated to optical storage to be moved back on to 
											magnetic disk.

Return Value:	(defined in /usr/local/...)
		SUCCEED = 0,	File exists in a directory contained in the complete file name.
									or when demigrate is 0 and the file has been migrated to optical disk.
		ERROR   = -1,	Some error condition prevented retrieve from locating or accessing 
									the target directory or file.
		NWP     = 1,	No Write Permission, File could not be demigrated because this 
									process does not have write permission in the target directory.
		FDE     = 4,	File Doesn't Exist.

Algorithm (Pseudocode):

		if (short_filename is in local directory and image type matches) then
			return complete_filename;
		else if (short_filename.Z is in local directory and uncompress succeeds
			and image type matches) then
			return complete_filename;
		else if (short_filename is in /tmp directory and image type matches) then
			return complete_filename;
		else if (short_filename.Z is in /tmp directory and uncompress in /tmp succeeds
			and image type matches) then
			return complete_filename;
		else if (file exists in the archive and can be accessed from magnetic disk) then
			return complete_filename
		else if (file exists in the archive and has migrated to optical disk) then
			set complete_filename to NULL
		else
			return (error code)
		endif
 
Description:	Determine the complete path where an image file or a data file can be found.
							PETT VI images, ECAT images, and .sxr files have been tested. 

Called by:		Any program that needs finding the complete path.	

Calling:			Library function in libpetarc.a
							retrieve ().

Authors:			Tom Yang and Tom O. Videen

History:			Created by Tom Yang and Tom O. Videen on 03/04/1993

___________________________________________________________________________________*/

#include <stdio.h>
#include <petutil/petutil.h>	/* defines MAXLINE, SUCCEED, FAIL */
#include <petutil/archive.h>

PUBLIC int setpath (short_filename, id, finfo, complete_filename, demigrate)
	char							*short_filename;
	char							*id;
	struct INFO_TYPE	*finfo;
	char							*complete_filename;
	BOOLEAN						demigrate;
{
	char	compress_filename [MAXLINE];
	char	*pathname;	
	char	tmp_compress_filename [MAXLINE];
	char	tmp_short_filename [MAXPATH];
	char	tmp_uncompress_cmd [MAXLINE];	
	char	uncompress_cmd [MAXLINE];	
	int		err;
	int		fd;	
	int		fdcmp;	

	/*
	 * Construct filenames which will be searched in the current
	 * and the /tmp directory.
	 */
	strcpy (compress_filename, short_filename);
	strcat (compress_filename, ".Z");
	sprintf (uncompress_cmd, "uncompress %s", compress_filename);

	strcpy (tmp_short_filename, "/tmp/");
	strcat (tmp_short_filename, short_filename);
	strcpy (tmp_compress_filename, tmp_short_filename);
	strcat (tmp_compress_filename, ".Z");
	sprintf (tmp_uncompress_cmd, "uncompress %s", tmp_compress_filename);

	if ((fd = open (short_filename, O_RDONLY)) != -1 && 
		check_imageattr (short_filename, finfo) == SUCCEED)
	{	/* Found in the local directory */
		strcpy (complete_filename, short_filename);

		close (fd);
	}
	else if ((fdcmp = open (compress_filename, O_RDONLY)) != -1 && 
		system (uncompress_cmd) == 0 &&
		check_imageattr (short_filename, finfo) == SUCCEED)
	{	/* Found the compressed file in the local directory */
		strcpy (complete_filename, short_filename);
		
		if (fd != -1)
			close (fd);
		close (fdcmp);
	}
	else if ((fd = open (tmp_short_filename, O_RDONLY)) != -1 && 
		check_imageattr (tmp_short_filename, finfo) == SUCCEED)
	{ /* Found in the /tmp directory */
		strcpy (complete_filename, tmp_short_filename);

		if (fdcmp != -1)
			close (fdcmp);
		close (fd);
	}
	else if ((fdcmp = open (tmp_compress_filename, O_RDONLY)) != -1 && 
		system (tmp_uncompress_cmd) == 0 &&
		check_imageattr (tmp_short_filename, finfo) == SUCCEED)
	{	/* Found the compressed file in the /tmp directory */
		strcpy (complete_filename, tmp_short_filename);
		
		if (fd != -1)
			close (fd);
		close (fdcmp);
	}
	else if ((pathname	= retrieve (short_filename, id, finfo, demigrate, &err)) 
		!= (char *) NULL && err == OK)
	{ /* Found in the archive path */
		strcpy (complete_filename, pathname);
		strcat (complete_filename, "/");
		strcat (complete_filename, short_filename);
	}
	else if (demigrate == FALSE && err == FEO)
		complete_filename	= (char *) NULL;
	else
	{	/* Nowhere can be be found by using the current scheme */
		fprintf (stderr, "File %s can not be found as specified.\n", short_filename);
		fprintf (stderr, "Error code = %d\n", err);

		switch (err)
		{
			case NWP:
				fprintf (stderr, "No Write Permission.\n");
				break;
			case FDE:
				fprintf (stderr, "File Doesn't Exist.\n");
				break;
			case ERROR:
			default: 
				fprintf (stderr, "Error.\n");
				break;
		}

		return err;
	}

	return SUCCEED;
}
@


1.3
log
@Added error message for retrieving files.
@
text
@d1 1
a1 1
/*$Id: setpath.c,v 1.2 1993/06/24 19:29:20 ty7777 Exp ty7777 $*/
d3 3
d50 1
a50 1
		else if (file exists in the archive and has been demigrated to optical disk) then
d57 1
@


1.2
log
@The ifs are not nested anymore.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d150 14
@


1.1
log
@Initial revision
@
text
@d7 2
a8 2
Function:	int setpath (char *short_filename, char *id, struct INFO_TYPE *finfo, 
			char *complete_filename)
d10 10
a19 9
Arguments:	short_filename:	file name in short format, e.g. p2208ho1.img
		id:		subject id (p1234 or m445) or composite 
				id (pnp34 or mnp34)
		finfo:		structure INFO_TYPE 
				(defined in /usr/local/include/petutil/archive.h)
				cat, type, attr and fltr must be defined;
				spec is not used.
		complete_filename: complete file name, e.g. 
				/data/archive/pet/p2208/p2208ho1.img
d21 8
a28 2
Return Value:	 0 = SUCCEED
		-1 = FAIL
d32 17
a48 38
		copy short_filename to filename
		call check_qualify () to get file_qualify_flag. This flag is TRUE if
			short_filename exists in the local directory and furthemore 
			if short_filename is a PETT VI or an ECAT image file, the 
			image attributes in the image must match those defined by 
			the user in the structure finfo. Otherwise, check_qualify 
			returns FALSE.
		if (file_qualify_flag == FALSE)
			construct the compressed file name in the local directory.
			if (short_filename.Z is in local directory)
				uncompress
				call check_qualify () to get file_qualify_flag
			endif
			if (compressed file does not exist in the local directory 
			or file_qualify_flag == FALSE)
				construct filename as /tmp/short_filename
				call check_qualify () to get file_qualify_flag
				if (file_qualify_flag == FALSE)
					construct the compressed file name in the 
						/tmp directory.
					if (short_filename.Z is in /tmp directory)
						uncompress
						call check_qualify () to get 
							file_qualify_flag
					endif
					if (compressed file does not exist in the 
					local directory or file_qualify_flag == FALSE)
						if (file exists in the archive) then 
							construct filename
						else
							return FAIL
						endif
					endif
				endif
			endif
		endif	
		copy filename to complete_filename
		return SUCCEED
d50 1
a50 2
Description:	Determine the complete path where an image file or a data file 
		can be found.
d52 1
a52 1
Called by:	Any program that needs finding the complete path.	
d54 2
a55 2
Calling:	Library function in libpetarc.a
		retrieve ().
d57 1
a57 1
Authors:	Tom Yang and Tom O. Videen
d59 1
a59 1
History:	Created by Tom Yang and Tom O. Videen on 03/04/1993
d67 3
a69 5
PRIVATE int	check_qualify ();

PUBLIC int setpath (short_filename, id, finfo, complete_filename)
	char			*short_filename;
	char			*id;
d71 2
a72 1
	char			*complete_filename;
d74 6
a79 5
	BOOLEAN		file_qualify_flag;	/* TRUE: qualifyed; FALSE: disqualified */
	char		command [MAXLINE];	
	char		compress_filename [MAXLINE];
	char		filename [MAXPATH];
	char		*pathname;	
d82 1
a82 1
	int		stat;
d85 2
a86 1
	 * Search short_filename in the current directory.
d88 3
a90 2
	strcpy (filename, short_filename);
	file_qualify_flag	= check_qualify (filename, finfo);
d92 5
a96 7
	if (file_qualify_flag == FALSE)
	{
		/*
	 	 * Search short_filename.Z in the current directory.
	 	 */
		strcpy (compress_filename, filename);
		strcat (compress_filename, ".Z");
d98 4
a101 7
		if ((fd = open (compress_filename, O_RDONLY)) != -1) 
		{
			close (fd);
			sprintf (command, "uncompress %s", compress_filename);
			stat			= system (command);
			file_qualify_flag	= check_qualify (filename, finfo);
		}
d103 1
a103 52
		if (fd == -1 || file_qualify_flag == FALSE)
		{
			/*
			 * Search short_filename in the /tmp directory.
			 */
			strcpy (filename, "/tmp/");
			strcat (filename, short_filename);
			file_qualify_flag	= check_qualify (filename, finfo);

			if (file_qualify_flag == FALSE)
			{
				/*
	 	 		 * Search short_filename.Z in the /tmp directory.
	 	 		 */
				strcpy (compress_filename, filename);
				strcat (compress_filename, ".Z");

				if ((fd = open (compress_filename, O_RDONLY)) != -1) 
				{
					close (fd);
					sprintf (command, "uncompress %s", compress_filename);
					stat			= system (command);
					file_qualify_flag	= check_qualify (filename, 
										finfo);
				}

				if (fd == -1 || file_qualify_flag == FALSE)
				{
					/*
					 * Search short_filename in the archive directory.
					 */
					/*
					pathname	= retrieve (short_filename, id, 
								finfo, TRUE, &err);
					*/
					if ((pathname = retrieve (short_filename, id, 
						finfo, TRUE, &err)) != (char *) NULL)
					{
						strcpy (filename, pathname);
						strcat (filename, "/");
						strcat (filename, short_filename);
					}
					else
					{
						fprintf (stderr, 
						"File %s can not be found as specified.\n", 
						short_filename);
						return FAIL;
					}
				}
			}
		}
d105 14
d120 2
a121 18
	strcpy (complete_filename, filename);

	return SUCCEED;
}

/*
 * Check image qualifications.
 */
PRIVATE int check_qualify (filename, finfo)
	char			*filename;
	struct INFO_TYPE	*finfo;
{
	BOOLEAN		check_attr_flag; /* SUCCEED: attributes matches; FAIL: not match */
	int		fd;

	check_attr_flag	= SUCCEED;
	if ((fd = open (filename, O_RDONLY)) != -1) 
	{
d123 24
d148 1
a148 4
		/*
		 * For image file, check attributes.
		 */
		check_attr_flag = check_imageattr (filename, finfo);
d151 1
a151 4
	if (fd != -1 && check_attr_flag == SUCCEED)
		return TRUE;
	else
		return FALSE;
@
