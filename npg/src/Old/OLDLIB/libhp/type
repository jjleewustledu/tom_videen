GetPetParameters.c:	slice_peaks	= (float *) malloc (sxr_output->number_slices * sizeof (float));
GetPetParameters.c:	if (sxr_output->peakslice == PEAK_SLICE_UNDEFINED)
GetPetParameters.c:		sxr_output->peakslice	= peak_slice;
GetPetParameters.c:	peakvalue	= ROUND (slice_peaks [sxr_output->peakslice]);
GetPetParameters.c:	for (i = 0; i < sxr_output->number_slices; i++)
GetPetParameters.c:		Template (template, petimage_name, fd, fptr, mlist, sxr_output->threshold, trim, 
GetPetParameters.c:			i + 1, &peakvalue, sxr_output->peaktype, sxr_output->number_slices, pettnum, encoded);
GetPetParameters.c:				sxr_output->rlpetdim [i]	= 0.0;
GetPetParameters.c:				sxr_output->rlcenter [i]	= (ENCODED_SLICE_WIDTH + 1) / 2.0;
GetPetParameters.c:				sxr_output->rlpetdim [i]	= (float) (right.x - left.x);
GetPetParameters.c:				sxr_output->rlcenter [i]	= (left.x + 1) + (right.x - left.x) / 2.0;
GetPetParameters.c:				sxr_output->vertical_petdim [i]	= 0.0;
GetPetParameters.c:				sxr_output->vertical_petdim [i]	= (float) (bottom.y - top.y);
GetPetParameters.c:			sxr_output->rlpetdim [i]	= (float) (right.x - left.x);
GetPetParameters.c:			sxr_output->rlcenter [i]	= ((left.x + 1)  + (right.x + 1)) / 2.0;
GetPetParameters.c:			sxr_output->vertical_petdim [i]	= (float) (bottom.y - top.y);
GetPetParameters.c:		if (sxr_output->rlpetdim [i] > maxpetdim)
GetPetParameters.c:			maxpetdim	= sxr_output->rlpetdim [i];
GetPetParameters.c:	for (i = 1; i < sxr_output->reference_slice; i++)
GetPetParameters.c:	sxr_output->apcenter		= (slice->bottom.y + 1)
GetPetParameters.c:	sxr_output->ear_separation	= maxpetdim * sxr_output->pixel_size + EARSEP_OFFSET;
getsxr.c:		freeing the memory of sxr_output->rlpetdim, sxr_output->rlcenter,
getsxr.c:		sxr_output->vertical_petdim, sxr_output->rlslicedim after the
getsxr.c:		sxr_output->type	= ibuffer [0];
getsxr.c:		sxr_output->incorrect_dz	= TRUE;
getsxr.c:		sxr_output->incorrect_dz	= FALSE;
getsxr.c:		if (sxr_output->incorrect_dz)
getsxr.c:		if ((sxr_output->incorrect_dz && num_scanned == 4) ||
getsxr.c:		!sxr_output->incorrect_dz && num_scanned == 3)
getsxr.c:			sxr_output->threshold	= ibuffer [0];
getsxr.c:				sxr_output->peaktype	= PEAK_PER_SLICE;
getsxr.c:				sxr_output->peaktype	= PEAK_PER_SCAN;
getsxr.c:	sxr_output->pixel_size			= fbuffer [0];
getsxr.c:	sxr_output->magnification_factor	= fbuffer [1];
getsxr.c:	sxr_output->number_slices		= ibuffer [0];
getsxr.c:	sxr_output->slice_separation		= fbuffer [2];
getsxr.c:	sxr_output->reference_slice		= ibuffer [1];
getsxr.c:	sxr_output->zatlas_dimension		= fbuffer [3];
getsxr.c:	sxr_output->apatlas_dimension		= fbuffer [4];
getsxr.c:	sxr_output->peakslice			= PEAK_SLICE_UNDEFINED;
getsxr.c:	sxr_output->xscale			= DEFAULT_XSCALE;
getsxr.c:		sxr_output->film_position	= fbuffer [5];
getsxr.c:		sxr_output->scan_position	= fbuffer [6];
getsxr.c:		sxr_output->reference_offset	= fbuffer [7];
getsxr.c:			sxr_output->peakslice	= ibuffer [2];
getsxr.c:			sxr_output->xscale	= fbuffer [8];
getsxr.c:		sxr_output->film_position	= 0.0;
getsxr.c:		sxr_output->scan_position	= 0.0; 
getsxr.c:		sxr_output->reference_offset	= 0.0;
getsxr.c:		sxr_output->apxray		= fbuffer [0];
getsxr.c:		sxr_output->degx		= fbuffer [1];
getsxr.c:		sxr_output->zxray		= fbuffer [2];
getsxr.c:		sxr_output->dz			= fbuffer [3];
getsxr.c:		sxr_output->dap			= fbuffer [4];
getsxr.c:		sxr_output->apcenter		= fbuffer [5];
getsxr.c:		sxr_output->ear_separation	= fbuffer [6];
getsxr.c:		sxr_output->eardap		= fbuffer [7];
getsxr.c:		sxr_output->eardz		= fbuffer [8];
getsxr.c:		sxr_output->degy		= fbuffer [9];
getsxr.c:		sxr_output->degz		= fbuffer [10];
getsxr.c:	sxr_output->rlpetdim		= (float *) malloc (sxr_output->number_slices * sizeof (float));
getsxr.c:	sxr_output->rlcenter		= (float *) malloc (sxr_output->number_slices * sizeof (float));
getsxr.c:	sxr_output->vertical_petdim	= (float *) malloc (sxr_output->number_slices * sizeof (float));
getsxr.c:	sxr_output->rlslicedim		= (float *) malloc (sxr_output->number_slices * sizeof (float));
getsxr.c:	for (i = 0; i < sxr_output->number_slices; i++)
getsxr.c:			sxr_output->vertical_petdim [i]	= fbuffer [2];
getsxr.c:			sxr_output->rlslicedim [i]	= fbuffer [3];
getsxr.c:				sxr_output->vertical_petdim [i]	= 0;
getsxr.c:				sxr_output->rlslicedim [i]	= 0;
getsxr.c:		sxr_output->rlpetdim [i]	= fbuffer [0];
getsxr.c:		sxr_output->rlcenter [i]	= fbuffer [1];
getsxr.c:	if (sxr_output->type <= XRAY_TYPE_RADIOLOGY 
getsxr.c:	&& sxr_output->number_slices == ECAT_NUM_SLICES)
getsxr.c:		for (i = 0; i < sxr_output->number_slices; i++)
getsxr.c:			sxr_output->rlcenter [i]	= (ENCODED_SLICE_WIDTH + 1) 
getsxr.c:							- sxr_output->rlcenter [i];
