head	1.16;
access;
symbols;
locks;
comment	@ * @;


1.16
date	95.11.10.23.29.58;	author tom;	state Exp;
branches;
next	1.15;

1.15
date	95.11.10.16.33.04;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	95.05.22.19.32.39;	author ty7777;	state Exp;
branches;
next	1.13;

1.13
date	95.01.06.18.28.33;	author ty7777;	state Exp;
branches;
next	1.12;

1.12
date	95.01.03.21.12.48;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	94.03.03.20.39.41;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	94.01.18.16.32.51;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	93.09.03.17.00.58;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	93.09.02.14.24.07;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	93.08.09.20.25.05;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	93.07.28.19.25.25;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	93.07.28.18.40.25;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	93.07.23.20.33.26;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.07.23.19.59.57;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.07.23.15.37.52;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.07.06.18.13.28;	author ty7777;	state Exp;
branches;
next	;


desc
@Library function first checking in.
@


1.16
log
@*** empty log message ***
@
text
@/*$Id: readimglist.c,v 1.15 1995/11/10 16:33:04 tom Exp $*/
/*$Log: readimglist.c,v $
 * Revision 1.15  1995/11/10  16:33:04  tom
 * *** empty log message ***
 *
 * Revision 1.14  1995/05/22  19:32:39  ty7777
 * Modified the module to let it read unlimited number of list.
 *
 * Revision 1.13  1995/01/06  18:28:33  ty7777
 * Added initialization values.
 *
 * Revision 1.12  1995/01/03  21:12:48  ty7777
 * Added processing for the weight column.
 *
 * Revision 1.11  1994/03/03  20:39:41  ty7777
 * Replace id with header.
 *
 * Revision 1.10  1994/01/18  16:32:51  ty7777
 * Fixed the sxr file construction bug.
 *
 * Revision 1.9  1993/09/03  17:00:58  ty7777
 * Change imglist1.h to imglist.h
 *
 * Revision 1.8  1993/09/02  14:24:07  ty7777
 * Added processing for n1wn2 and n1fn2vn3.
 *
 * Revision 1.7  1993/08/09  20:25:05  ty7777
 * Changed FAIL to -MAXINT for scan numbers that are not specified.
 *
 * Revision 1.6  1993/07/28  19:25:25  ty7777
 * Adding rcsid.
 *
 * Revision 1.5  1993/07/28  18:40:25  ty7777
 * Processing comments start with #.
 *
 * Revision 1.4  1993/07/23  20:33:26  ty7777
 * Processing activation images only.
 *
 * Revision 1.3  1993/07/23  19:59:57  ty7777
 * Processing comments lines.
 *
 * Revision 1.2  1993/07/23  15:37:52  ty7777
 * Second checking in.
 *
 * Revision 1.1  1993/07/06  18:13:28  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
  File:		readimglist.c

  Function:	int readimglist (char *image_list_file, IMAGE_LIST_DATA *image_list, 
			int *num_image_list)

  Arguments:	image_list_file,	file containing a list of image files, 
					means, etc., passed in.
		image_list,		an array of structures, each structure 
					for a list, returned.
		num_image_list,		total number of list in file, returned.

  Description:	This function reads an image list file and put the information 
		it contains in an array of structures. If the control number is 
		not specified, it is assigned -MAXINT to indicate that it is not
		assigned.

  Return:	SUCCEED for successful; FAIL for error.

  Reminder:	Every real number should contain at least a decimal point. 
		The sxr_id is used to find sxr files which include any characters
		other than "<species><subject_id>.sxr". If an sxr id is present, it
		must start with a letter and contains the string ".sxr".

  Algorithm:	if (a line contains 7 fields) 
		  <subject_id><scanset1_id><mean1><scanset2_id><mean2><weight><sxrid>
		else if (a line contains 6 fields) 
		  if (the last field is an integer or a real number)
		    <subject_id><scanset1_id><mean1><scanset2_id><mean2><weight>
		  else
		    <subject_id><scanset1_id><mean1><scanset2_id><mean2><sxrid>
		  endif
		else
		  Same as before.
		endif

  Author:	Tom Yang.

  History:	Created by Tom Yang on 05/18/93. 
___________________________________________________________________________*/

#include <values.h>
#include <imglist.h>

static char rcsid [] = "$Headser$";

PUBLIC int readimglist (image_list_file, image_list, num_image_list)
	char		*image_list_file;
	IMAGE_LIST_DATA	*image_list;
	int		*num_image_list;
{
	FILE	*fp;
	char	line [MAXLINE];
	char	scanset1_id [MAXLINE];
	char	string1 [MAXLINE];
	char	string2 [MAXLINE];
	char	string3 [MAXLINE];
	char	string4 [MAXLINE];
	char	subject_id [MAXLINE];
	char	sxrid [MAXLINE];
	int	i;

	fp	= fopen (image_list_file, "r");

	i	= 0;
	while (fgets (line, MAXLINE, fp) != NULL)
	{
		if (sscanf (line, "%s %s", subject_id, scanset1_id) != 2 ||
		strncmp (subject_id, "#", 1) == 0)
			continue;

		/*
		 * Setting the default values if image list does not contain them.
		 */
		strcpy (image_list [i].scanset1_id, "");
		image_list [i].mean1	= 0.0;
		strcpy (image_list [i].scanset2_id, "");
		image_list [i].mean2	= 0.0;
		image_list [i].weight	= 1.0;
		strcpy (image_list [i].sxrid, "");

		if (sscanf (line, "%s %s %s %s %s %s %s", subject_id, scanset1_id, 
		string1, string2, string3, string4, sxrid) == 7)
		{
		/*
		 * <subject_id><scanset1_id><mean1><scanset2_id><mean2><weight><sxrid>
		 */
			if (DetermineType (string1) == DATA_TYPE_STRING ||
			DetermineType (string3) == DATA_TYPE_STRING ||
			DetermineType (string4) == DATA_TYPE_STRING ||
			strstr (sxrid, SXR_EXT) == NULL)
				continue;

			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scanset1_id, scanset1_id);
			image_list [i].mean1	= atof (string1);
			strcpy (image_list [i].scanset2_id, string2);
			image_list [i].mean2	= atof (string3);			
			image_list [i].weight	= atof (string4);			
			strcpy (image_list [i].sxrid, sxrid);
			i++;

			continue;
		}

		if (sscanf (line, "%s %s %s %s %s %s", subject_id, scanset1_id, 
		string1, string2, string3, string4) == 6)
		{
			if (DetermineType (string1) == DATA_TYPE_STRING ||
			DetermineType (string3) == DATA_TYPE_STRING)
				continue;

			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scanset1_id, scanset1_id);
			image_list [i].mean1	= atof (string1);
			strcpy (image_list [i].scanset2_id, string2);
			image_list [i].mean2	= atof (string3);			

			if (DetermineType (string4) == DATA_TYPE_STRING &&
			strstr (string4, SXR_EXT) != NULL)
			{
			/*
		 	 * <subject_id><scanset1_id><mean1><scanset2_id><mean2><sxrid>
		 	 */
				strcpy (image_list [i].sxrid, string4);
			}
			else if (DetermineType (string4) == DATA_TYPE_REAL ||
			DetermineType (string4) == DATA_TYPE_INTEGER)
			{
			/*
		 	 * <subject_id><scanset1_id><mean1><scanset2_id><mean2><weight>
		 	 */
				image_list [i].weight	= atof (string4);			
			}

			i++;

			continue;
		}

		if (sscanf (line, "%s %s %s %s %s", subject_id, scanset1_id, 
		string1, string2, string3) == 5) 
		{
			if (strstr (string3, SXR_EXT) == NULL)
			{
			/*
			 * <subject_id><scanset1_id><mean1><scanset2_id><mean2>   
			 */
				if (DetermineType (string1) == DATA_TYPE_STRING ||
				DetermineType (string3) == DATA_TYPE_STRING)
					continue;

				image_list [i].mean1	= atof (string1);
				strcpy (image_list [i].scanset2_id, string2);
				image_list [i].mean2	= atof (string3);			
			}
			else
			{
				if (DetermineType (string1) == DATA_TYPE_REAL)
				{
				/*
				 * <subject_id><scanset1_id><mean1><scanset2_id><sxrid>   
				 */
					if (DetermineType (string1) == DATA_TYPE_STRING)
						continue;
					image_list [i].mean1	= atof (string1);
					strcpy (image_list [i].scanset2_id, string2);
					strcpy (image_list [i].sxrid, string3);
				}
				else
				{
				/*
				 * <subject_id><scanset1_id><scanset2_id><mean2><sxrid>   
				 */
					if (DetermineType (string2) == DATA_TYPE_STRING)
						continue;
					strcpy (image_list [i].scanset2_id, string1);
					image_list [i].mean2	= atof (string2);
					strcpy (image_list [i].sxrid, string3);
				}
			}

			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scanset1_id, scanset1_id);

			i++;

			continue;
		}

		if (sscanf (line, "%s %s %s %s", subject_id, scanset1_id, string1, string2) == 4) 
		{
			if (strstr (string2, SXR_EXT) != NULL)
			{
				if (DetermineType (string1) != DATA_TYPE_REAL)
				{
				/*
				 * <subject_id><scanset1_id><scanset2_id><sxrid>   
				 */
					strcpy (image_list [i].scanset2_id, string1);
					strcpy (image_list [i].sxrid, string2);
				}
				else
				{
				/*
				 * <subject_id><scanset1_id><mean1><sxrid>   
				 */
					image_list [i].mean1	= atof (string1);
					strcpy (image_list [i].sxrid, string2);
				}
			}
			else
			{
				if (DetermineType (string1) != DATA_TYPE_REAL)
				{
				/*
				 * <subject_id><scanset1_id><scanset2_id><mean2>   
				 */
					strcpy (image_list [i].scanset2_id, string1);
					image_list [i].mean2	= atof (string2);
				}
				else
				{
				/*
				 * <subject_id><scanset1_id><mean1><scanset2_id>   
				 */
					image_list [i].mean1	= atof (string1);
					strcpy (image_list [i].scanset2_id, string2);
				}
			}

			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scanset1_id, scanset1_id);
			i++;

			continue;
		}

		if (sscanf (line, "%s %s %s", subject_id, scanset1_id, string1) == 3)
		{
			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scanset1_id, scanset1_id);

			if (strstr (string1, SXR_EXT) != NULL)
			/*
			 * <subject_id><scanset1_id><sxrid>
			 */
				strcpy (image_list [i].sxrid, string1);
			else if (DetermineType (string1) != DATA_TYPE_REAL)
			/*
			 * <subject_id><scanset1_id><scanset2_id>
			 */
				strcpy (image_list [i].scanset2_id, string1);
			else
			/*
			 * <subject_id><scanset1_id><mean1>
			 */
				image_list [i].mean1	= atof (string1);

			i++;

			continue;
		}

		if (sscanf (line, "%s %s", subject_id, scanset1_id) == 2) 
		{
		/*
		 * <subject_id><scanset1_id>
		 */
			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scanset1_id, scanset1_id);
			i++;
		}
	}

	fclose (fp);

	*num_image_list	= i;

	if (*num_image_list == 0)
	{
		fprintf (stderr, "Error: File %s contains no image lists.\n", image_list_file); 
		return FAIL;
	}

	return SUCCEED;
}
@


1.15
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.14 1995/05/22 19:32:39 ty7777 Exp tom $*/
d3 3
@


1.14
log
@Modified the module to let it read unlimited number of list.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.13 1995/01/06 18:28:33 ty7777 Exp ty7777 $*/
d3 3
d88 1
a88 1
#include <petutil/imglist.h>
@


1.13
log
@Added initialization values.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.12 1995/01/03 21:12:48 ty7777 Exp ty7777 $*/
d3 3
d108 1
a108 1
	while (fgets (line, MAXLINE, fp) != NULL && i < MAX_IMAGE_LIST_SIZE)
a324 6
		return FAIL;
	}
	else if (*num_image_list > MAX_IMAGE_LIST_SIZE)
	{
		fprintf (stderr, "Error: your list size %d exceeded the maximum allowable size %d\n",
			*num_image_list, MAX_IMAGE_LIST_SIZE);
@


1.12
log
@Added processing for the weight column.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.11 1994/03/03 20:39:41 ty7777 Exp ty7777 $*/
d3 3
d114 6
a119 1
		memset (image_list [i], 0, sizeof (IMAGE_LIST_DATA)); 
@


1.11
log
@Replace id with header.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.10 1994/01/18 16:32:51 ty7777 Exp ty7777 $*/
d3 3
d61 11
a71 1
  Algorithm:
d94 1
d111 1
a111 5
		strcpy (image_list [i].scanset1_id, "");
		image_list [i].mean1	= 0.0;
		strcpy (image_list [i].scanset2_id, "");
		image_list [i].mean2	= 0.0;
		strcpy (image_list [i].sxrid, "");
d113 2
a114 2
		if (sscanf (line, "%s %s %s %s %s %s", subject_id, scanset1_id, 
		string1, string2, string3, sxrid) == 6)
d117 1
a117 1
		 * <subject_id><scanset1_id><mean1><scanset2_id><mean2><sxrid>
d121 1
d130 1
d132 35
@


1.10
log
@Fixed the sxr file construction bug.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.9 1993/09/03 17:00:58 ty7777 Exp ty7777 $*/
d3 3
d40 5
a44 5
  Arguments:   image_list_file,	file containing a list of image files, means, etc., 
				passed in.
               image_list,	an array of structures, each structure for a list, 
				returned.
               num_image_list,	total number of list in file, returned.
d46 4
a49 4
  Description: This function reads an image list file and put the information 
               it contains in an array of structures. If the control number is 
	       not specified, it is assigned -MAXINT to indicate that it is not
	       assigned.
d51 1
a51 1
  Return:      SUCCEED for successful; FAIL for error.
d53 4
a56 4
  Reminder:    Every real number should contain at least a decimal point. 
	       The sxr_id is used to find sxr files which include any characters
	       other than "<species><subject_id>.sxr". If an sxr id is present, it
               must start with a letter and contains the string ".sxr".
d60 1
a60 1
  Creator:     Tom Yang
d62 1
a62 1
  History:     Created by Tom Yang on 05/18/93. 
d68 1
a68 1
static char rcsid []= "$Id: readimglist.c,v 1.9 1993/09/03 17:00:58 ty7777 Exp ty7777 $";
@


1.9
log
@Change imglist1.h to imglist.h
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.8 1993/09/02 14:24:07 ty7777 Exp ty7777 $*/
d3 3
d65 1
a65 1
static char rcsid []= "$Id: readimglist.c,v 1.8 1993/09/02 14:24:07 ty7777 Exp ty7777 $";
d125 1
a125 1
			if (strstr (sxrid, SXR_EXT) == NULL)
@


1.8
log
@Added processing for n1wn2 and n1fn2vn3.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.7 1993/08/09 20:25:05 ty7777 Exp ty7777 $*/
d3 3
d60 1
a60 1
#include <petutil/imglist1.h>
d62 1
a62 1
static char rcsid []= "$Id: readimglist.c,v 1.7 1993/08/09 20:25:05 ty7777 Exp ty7777 $";
d88 9
d173 1
a173 1
				if (DetermineType (string1) == DATA_TYPE_STRING)
d192 1
a192 1
				if (DetermineType (string1) == DATA_TYPE_STRING)
d227 1
a227 1
			else if (DetermineType (string1) == DATA_TYPE_STRING)
@


1.7
log
@Changed FAIL to -MAXINT for scan numbers that are not specified.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.6 1993/07/28 19:25:25 ty7777 Exp ty7777 $*/
d3 3
d45 3
a47 1
               The sxr file extension should start with a letter.
d49 2
d52 1
d57 1
a57 1
#include <petutil/imglist.h>
d59 1
a59 3
#define DATA_TYPE_STRING	0	/* data contained in string is a string */
#define DATA_TYPE_INTEGER	1	/* data contained in string is an integer */
#define DATA_TYPE_REAL		2	/* data contained in string is a real number */
a60 2
static char rcsid []= "$Id: readimglist.c,v 1.6 1993/07/28 19:25:25 ty7777 Exp ty7777 $";

a66 3
	char	activation_mean_string [MAXLINE]; 
	char	control_mean_string [MAXLINE];
	char	control_num_string [MAXLINE];
d68 4
a71 1
	char	string [MAXLINE];
d73 1
a73 6
	char	sxr [MAXLINE];
	float	activation_mean;
	float	control_mean;
	int	activation_num;
	int	control_num;
	int	data_type;
a74 1
	int	j;
d81 1
a81 2
		if (sscanf (line, "%s %s", subject_id, string) != 2 ||
		DetermineType (string) != DATA_TYPE_INTEGER ||
d85 3
d89 1
a89 2
		 * Setting the marker for for activation_mean,  control_num,  and 
		 * control_mean if image list does not contain them.
d91 3
a93 8
		image_list [i].control_num	= -MAXINT;

		if (sscanf (line, "%s %d %s %s %s %s", subject_id, &activation_num, 
		activation_mean_string, control_num_string, control_mean_string, sxr) == 6)
		{
			if (DetermineType (activation_mean_string) == DATA_TYPE_STRING ||
			DetermineType (control_num_string) != DATA_TYPE_INTEGER ||
			DetermineType (control_mean_string) == DATA_TYPE_STRING)
d97 5
a101 5
			image_list [i].activation_num	= activation_num;			
			image_list [i].activation_mean	= atof (activation_mean_string);
			image_list [i].control_num	= atoi (control_num_string);			
			image_list [i].control_mean	= atof (control_mean_string);			
			strcpy (image_list [i].sxr, sxr);
d107 2
a108 2
		if (sscanf (line, "%s %d %s %s %s", subject_id, &activation_num, 
		activation_mean_string, control_num_string, control_mean_string) == 5) 
d110 8
a117 4
			if (DetermineType (activation_mean_string) == DATA_TYPE_STRING ||
			DetermineType (control_num_string) != DATA_TYPE_INTEGER ||
			DetermineType (control_mean_string) == DATA_TYPE_STRING)
				continue;
d119 30
d150 2
a151 4
			image_list [i].activation_num	= activation_num;			
			image_list [i].activation_mean	= atof (activation_mean_string);
			image_list [i].control_num	= atoi (control_num_string);			
			image_list [i].control_mean	= atof (control_mean_string);			
d157 1
a157 1
		if (sscanf (line, "%s %d %s %s", subject_id, &activation_num, string, sxr) == 4) 
d159 38
a196 1
			data_type	= DetermineType (string);
a197 7
			if (data_type == DATA_TYPE_INTEGER)
				image_list [i].control_num	= atoi (string);
			else if (data_type == DATA_TYPE_REAL)
				image_list [i].activation_mean	= atof (string);			
			else 
				continue;

d199 1
a199 2
			image_list [i].activation_num	= activation_num;			
			strcpy (image_list [i].sxr, sxr);
d205 1
a205 2
		if (sscanf (line, "%s %d %s", subject_id, 
			&activation_num, string) == 3)
d208 1
a208 1
			image_list [i].activation_num	= activation_num;			
d210 10
a219 6
			data_type	= DetermineType (string);

			if (data_type == DATA_TYPE_STRING)
				strcpy (image_list [i].sxr, string);
			else if (data_type == DATA_TYPE_INTEGER)
				image_list [i].control_num	= atoi (string);
d221 4
a224 1
				image_list [i].activation_mean	= atof (string);			
d231 1
a231 1
		if (sscanf (line, "%s %d", subject_id, &activation_num) == 2) 
d233 3
d237 1
a237 1
			image_list [i].activation_num	= activation_num;			
@


1.6
log
@Adding rcsid.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.5 1993/07/28 18:40:25 ty7777 Exp ty7777 $*/
d3 3
d28 5
a32 3
  Arguments:   image_list_file,	file containing a list of image files, means, etc., passed in.
               image_list, an array of structures, each structure for a list, returned.
               num_image_list, total number of list in file, returned.
d35 3
a37 1
               it contains in an array of structures.
d48 1
d55 1
a55 1
static char rcsid []= "$Id$";
d92 1
a92 1
		image_list [i].control_num	= FAIL;
@


1.5
log
@Processing comments start with #.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.4 1993/07/23 20:33:26 ty7777 Exp ty7777 $*/
d3 3
d42 1
d46 2
@


1.4
log
@Processing activation images only.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.3 1993/07/23 19:59:57 ty7777 Exp ty7777 $*/
d3 3
d75 2
a76 2
		 * Setting the default value for control_num. If image list
		 * file control number, the default value will be over written.
@


1.3
log
@Processing comments lines.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.2 1993/07/23 15:37:52 ty7777 Exp ty7777 $*/
d3 3
d70 6
@


1.2
log
@Second checking in.
@
text
@d1 1
a1 1
/*$Id: readimglist.c,v 1.1 1993/07/06 18:13:28 ty7777 Exp ty7777 $*/
d3 3
d64 2
a65 1
		DetermineType (string) != DATA_TYPE_INTEGER)
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d29 1
a29 1
#include <petutil/chklist.h>
a33 2
PRIVATE int DetermineType ();

a165 33


/*________________________________________________________________________________
Algorithm:	if (there is at least one letter in the string) then
			return string type
		else if (string contains no decimal point) then
			return integer type
		else
			return real type
		endif
Description:	Determine the data type contained in a string.
________________________________________________________________________________*/
 
PRIVATE int DetermineType (string)
	char	*string;
{
	int	j;
	int	string_length;

	string_length	= strlen (string);

	for (j = 0; j < string_length; j++)
		if (isalpha (string [j]))
			break;

	if (j < string_length)
		return DATA_TYPE_STRING;
	else if (strchr (string, '.') == NULL)
		return DATA_TYPE_INTEGER;
	else
		return DATA_TYPE_REAL;
}

@
