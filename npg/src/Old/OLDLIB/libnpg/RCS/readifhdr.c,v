head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	95.11.10.16.28.55;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	95.06.13.17.21.43;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	95.06.01.16.17.55;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	95.05.26.15.49.14;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	95.05.19.16.33.33;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	95.05.19.15.00.28;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.05.18.19.38.55;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.7
log
@remove petutil parent directory from include statements
@
text
@/*$Id: readifhdr.c,v 1.6 1995/06/13 17:21:43 ty7777 Exp tom $*/
/*$Log: readifhdr.c,v $
 * Revision 1.6  1995/06/13  17:21:43  ty7777
 * Same as the last version.
 *
 * Revision 1.5  1995/06/01  16:17:55  ty7777
 * Use line array to read.
 **/

/*___________________________________________________________________________
  File:		readifhdr.c

  Function:	int readifhdr (char *ifhdrfile, BOOLEAN print_message, int maxlines,
		int *nlines, char *lines [])

  Arguments:	ifhdrfile,	file name for the interfile header, passed in.
		print_message,	TRUE: print error message if there is an error;
				FALSE: no error message will be printed, passed in.
		maxlines,	maximum of lines that can be read. In general, this 
				should be the same as the array size of lines. Passed in.
		nlines,		number of lines contained in the header file, returned.		
		lines,		array of lines, returned.

  Description:	This function reads a interfile header file and copies the lines to
		an array of strings.

  Return:	SUCCEED for successful; FAIL for error.

  Author:	Tom Yang, May 30, 1995.

  History:	Created by Tom Yang on 05/30/95. 
___________________________________________________________________________*/

#include <stdio.h>
#include <petutil.h>
#include <ifh.h>

static char rcsid [] = "$Header: /export/home/npggw/tom/src/libnpg/RCS/readifhdr.c,v 1.6 1995/06/13 17:21:43 ty7777 Exp tom $";

PUBLIC int readifhdr (ifhdrfile, print_message, maxlines, nlines, lines) 
	char	*ifhdrfile;
	BOOLEAN	print_message;
	int	maxlines;
	int	*nlines;
	char	*lines [];
{
	FILE	*fp;
	char	line [MAXLINE];
	char	*pline;

	fp	= fopen (ifhdrfile, "r");
	if (fp == (FILE *) NULL)
	{
		if (print_message)
			fprintf (stderr, "Error in opening header file %s\n", ifhdrfile);
		return FAIL;
	}

	*nlines	= 0;
	while (fgets (line, MAXLINE, fp) != NULL && *nlines < maxlines)
	{
		pline	= (char *) malloc (strlen (line) * sizeof (char));
		if (pline == NULL)
		{
			if (print_message)
				fprintf (stderr, "Error in allocating memory for pline\n");
			return FAIL;
		}

		strcpy (pline, line);
		lines [(*nlines)++]	= pline;
	}

	fclose (fp);

	return SUCCEED;
}
@


1.6
log
@Same as the last version.
@
text
@d1 1
a1 1
/*$Id: readifhdr.c,v 1.5 1995/06/01 16:17:55 ty7777 Exp ty7777 $*/
d3 3
d35 2
a36 2
#include <petutil/petutil.h>
#include <petutil/ifh.h>
d38 1
a38 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/readifhdr.c,v 1.5 1995/06/01 16:17:55 ty7777 Exp ty7777 $";
@


1.5
log
@Use line array to read.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d35 1
a35 1
static char rcsid [] = "$Header$";
@


1.4
log
@Same as the last version.
@
text
@d1 2
a2 11
/*$Id: readifhdr.c,v 1.3 1995/05/19 16:33:33 ty7777 Exp ty7777 $*/
/*$Log: readifhdr.c,v $
 * Revision 1.3  1995/05/19  16:33:33  ty7777
 * Added print_message.
 *
 * Revision 1.2  1995/05/19  15:00:28  ty7777
 * Added flag print_message.
 *
 * Revision 1.1  1995/05/18  19:38:55  ty7777
 * Initial revision
 **/
d7 2
a8 1
  Function:	int readifhdr (char *ifhdrfile, BOOLEAN print_message, IFH *ifhdr)
d10 1
a10 1
  Arguments:	ifhdrfile,	interfile header, passed in.
d12 5
a16 2
				FALSE: no error message will be printed.
		ifhdr,		a structure defined in ifhdr.h, returned.
d18 2
a19 2
  Description:	This function reads a interfile header file and puts the information
		it contains in a structure.
d23 1
a23 1
  Reminder:	Every real number should contain at least a decimal point. 
d25 1
a25 3
  Author:	Tom Yang, May 2, 1995.

  History:	Created by Tom Yang on 05/02/95. 
d32 1
a32 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/readifhdr.c,v 1.3 1995/05/19 16:33:33 ty7777 Exp ty7777 $";
d34 1
a34 31
PRIVATE void error_message ();
PRIVATE int true_length ();

PRIVATE void error_message (keyword, parameter, file)
	char	*keyword;
	char	*parameter;
	char	*file;
{
	fprintf (stderr, 
	"Error: wrong parameter (%s) for keyword (%s) in parameter file (%s).\n",
	parameter, keyword, file);
}

PRIVATE int true_length (string)
	char	*string;
{
	int	i;
	int	length;

	length	= strlen (string);

	for (i = length - 1; i >= 0; i--)
	{
		if (isgraph (string [i]))
			break;
	}

	return i + 1;
}

PUBLIC int readifhdr (ifhdrfile, print_message, ifhdr) 
d37 3
a39 1
	IFH	*ifhdr;
a41 3
	char	assign [MAXLINE];
	char	*cbuffer;
	char	label [MAXLINE];
d43 1
a43 7
	char	original_label [MAXLINE];
	char	original_parameter [MAXLINE];
	char	parameter [MAXLINE];
	char	parameter_string [MAXLINE];
	char	*value;
	int	i;
	int	length;
d53 2
a54 6
	/*
	 * Initialization
	 */
	memset (ifhdr, 0, sizeof (IFH)); 

	while (fgets (line, MAXLINE, fp) != NULL && strncmp (line, "#", 1) != 0)
d56 2
a57 1
		if ((value = strstr (line, ":=")) != NULL)
d59 4
a62 6
			memset (label, 0, MAXLINE); 
			memset (parameter_string, 0, MAXLINE); 
			strncpy (label, line, strlen (line) - strlen (value));
			length	= true_length (label);
			for (i = length; i < MAXLINE; i++)
				label [i]	= '\0';
d64 2
a65 222
			if (strstr (label, "INTERFILE") != NULL)
			{
				strcpy (ifhdr->interfile, label);

				continue;
			}

			if (sscanf (value, "%s %s", assign, parameter) != 2)
				continue;

			cbuffer	= strstr (value, parameter);
			length	= true_length (cbuffer);
			strncpy (parameter_string, cbuffer, length); 
			for (i = length; i < MAXLINE; i++)
				parameter_string [i]	= '\0';

			strcpy (original_label, label);
			strcpy (original_parameter, parameter);
			Lowered (label, strlen (label));
			Lowered (parameter, strlen (parameter));

			if (strstr (label, "version of keys") != NULL)
			{
				strcpy (ifhdr->version_of_keys, original_parameter);

				continue;
			}

			if (strstr (label, "image modality") != NULL)
			{
				strcpy (ifhdr->image_modality, original_parameter);

				continue;
			}

			if (strstr (label, "originating system") != NULL)
			{
				strcpy (ifhdr->originating_system, original_parameter);

				continue;
			}

			if (strstr (label, "conversion program") != NULL)
			{
				strcpy (ifhdr->conversion_program, original_parameter);

				continue;
			}

			if (strstr (label, "program version") != NULL)
			{
				strcpy (ifhdr->program_version, parameter);

				continue;
			}

			if (strstr (label, "program date") != NULL)
			{
				strcpy (ifhdr->program_date, original_parameter);

				continue;
			}

			if (strstr (label, "program author") != NULL)
			{
				strcpy (ifhdr->program_author, original_parameter);

				continue;
			}

			if (strstr (label, "original institution") != NULL)
			{
				strcpy (ifhdr->original_institution, parameter_string);

				continue;
			}

			if (strstr (label, "name of data file") != NULL)
			{
				strcpy (ifhdr->name_of_data_file, original_parameter);

				continue;
			}

			if (strstr (label, "subject id") != NULL)
			{
				strcpy (ifhdr->subject_id, original_parameter);

				continue;
			}

			if (strstr (label, "study date") != NULL)
			{
				strcpy (ifhdr->study_date, original_parameter);

				continue;
			}

			if (strstr (label, "number format") != NULL)
			{
				strcpy (ifhdr->number_format, parameter_string);

				continue;
			}

			if (strstr (label, "number of bytes per pixel") != NULL)
			{
				if (DetermineType (parameter) == DATA_TYPE_INTEGER)
					ifhdr->number_of_bytes_per_pixel	= atoi (parameter);
				else
				{
					if (print_message)
						error_message ("number of bytes per pixel", 
						original_parameter, ifhdrfile);
					return FAIL;
				}

				continue;
			}

			if (strstr (label, "number of dimensions") != NULL)
			{
				if (DetermineType (parameter) == DATA_TYPE_INTEGER)
					ifhdr->number_of_dimensions	= atoi (parameter);
				else
				{
					if (print_message)
						error_message ("number of dimensions", 
						original_parameter, ifhdrfile);
					return FAIL;
				}

				continue;
			}

			if (strstr (label, "matrix size [1]") != NULL)
			{
				if (DetermineType (parameter) == DATA_TYPE_INTEGER)
					ifhdr->matrix_size [0]	= atoi (parameter);
				else
				{
					if (print_message)
						error_message ("matrix size [1]", 
						original_parameter, ifhdrfile);
					return FAIL;
				}

				continue;
			}

			if (strstr (label, "matrix size [2]") != NULL)
			{
				if (DetermineType (parameter) == DATA_TYPE_INTEGER)
					ifhdr->matrix_size [1]	= atoi (parameter);
				else
				{
					if (print_message)
						error_message ("matrix size [2]", 
						original_parameter, ifhdrfile);
					return FAIL;
				}

				continue;
			}

			if (strstr (label, "matrix size [3]") != NULL)
			{
				if (DetermineType (parameter) == DATA_TYPE_INTEGER)
					ifhdr->matrix_size [2]	= atoi (parameter);
				else
				{
					if (print_message)
						error_message ("matrix size [3]", 
						original_parameter, ifhdrfile);
					return FAIL;
				}

				continue;
			}

			if (strstr (label, "scaling factor (mm/pixel) [1]") != NULL)
			{
				ifhdr->scaling_factor [0]	= atof (parameter);

				continue;
			}

			if (strstr (label, "scaling factor (mm/pixel) [2]") != NULL)
			{
				ifhdr->scaling_factor [1]	= atof (parameter);

				continue;
			}

			if (strstr (label, "scaling factor (mm/pixel) [3]") != NULL)
			{
				ifhdr->scaling_factor [2]	= atof (parameter);

				continue;
			}

			if (strstr (label, "matrix initial element [1]") != NULL)
			{
				strcpy (ifhdr->matrix_initial_element [0], original_parameter);

				continue;
			}

			if (strstr (label, "matrix initial element [2]") != NULL)
			{
				strcpy (ifhdr->matrix_initial_element [1], original_parameter);

				continue;
			}

			if (strstr (label, "matrix initial element [3]") != NULL)
			{
				strcpy (ifhdr->matrix_initial_element [2], original_parameter);

				continue;
			}
		}
@


1.3
log
@Added print_message.
@
text
@d1 1
a1 1
/*$Id: readifhdr.c,v 1.2 1995/05/19 15:00:28 ty7777 Exp ty7777 $*/
d3 3
d39 1
a39 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/readifhdr.c,v 1.2 1995/05/19 15:00:28 ty7777 Exp ty7777 $";
@


1.2
log
@Added flag print_message.
@
text
@d1 1
a1 1
/*$Id: readifhdr.c,v 1.1 1995/05/18 19:38:55 ty7777 Exp ty7777 $*/
d3 3
d32 1
d36 1
a36 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/readifhdr.c,v 1.1 1995/05/18 19:38:55 ty7777 Exp ty7777 $";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d10 1
a10 1
  Function:	int readifhdr (char *ifhdrfile, IFH *ifhdr)
d13 2
d32 1
a32 1
static char rcsid [] = "$Header$";
d64 1
a64 1
PUBLIC int readifhdr (ifhdrfile, ifhdr) 
d66 1
d85 2
a86 1
		fprintf (stderr, "Error in opening header file %s\n", ifhdrfile);
d217 2
a218 1
					error_message ("number of bytes per pixel", 
d232 2
a233 1
					error_message ("number of dimensions", 
d247 2
a248 1
					error_message ("matrix size [1]", 
d262 2
a263 1
					error_message ("matrix size [2]", 
d277 2
a278 1
					error_message ("matrix size [3]", 
@
