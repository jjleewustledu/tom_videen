head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	93.07.14.19.17.04;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.03.03.20.33.39;	author ty7777;	state Exp;
branches;
next	;


desc
@get3dreal.c initial checking in.
@


1.2
log
@Added ecat_calibration_fctr in the computation of scaling factor.
@
text
@/*$Id: get3dreal.c,v 1.1 1993/03/03 20:33:39 ty7777 Exp ty7777 $*/
/*$Log: get3dreal.c,v $
 * Revision 1.1  1993/03/03  20:33:39  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
  File:		get3dreal.c

  Function:	void get3dreal (MatrixFile *fptr, short width, short height, 
			short num_slices, struct Matval matval, float *image3d)

  Arguments:	
		width,			spatial dimension, width.
		height,			spatial dimension, height.
		num_slices,		number of slices in image;
		image3d,		3D image. 

  Description:	This function creates a 3D image with real pixel pixel values.

  History:	 Created by Tom Yang on 01/04/92. 
___________________________________________________________________________*/

#include <petutil/petutil.h>
#include <petutil/matrix.h>

int get3dreal (fptr, width, height, num_slices, mlist, image3d, subheader_list)
	MatrixFile	*fptr;
	short		width;
	short		height;
	short		num_slices;
	Mlist		*mlist;
	float		*image3d;
	Image_subheader	**subheader_list;
{
	MatrixData	*matrix_read ();

	Image_subheader	*image_subheader;
	Main_header	*main_header;
	MatrixData	*matrixx_data;
	float		ecat_calibration_fctr;
	float		scale;
	int		i;
	int		j;
	int		k;
	int		row_index;
	int		slice_index;
	short		*slice_data;

	main_header	= fptr->mhptr;
	if (main_header->data_type == IMAGE_DATA)
	{
		slice_index	= 0;
		for (k = 1; k <= num_slices; k++)
		{
			matrixx_data	= matrix_read (fptr, mlist->list [k - 1]);
			if (matrixx_data == NULL)
			{
				fprintf (stderr, "matrixx_read error in get3dreal.\n");
				return FAIL;
			}

			slice_data	= (short *) matrixx_data->data_ptr;
       			image_subheader	= (Image_subheader *) matrixx_data->shptr;
			if (image_subheader->ecat_calibration_fctr != 0.0)
				ecat_calibration_fctr	= image_subheader->ecat_calibration_fctr;
			else	
				ecat_calibration_fctr	= DEFAULT_CALIBRATION_FACTOR;
			scale		= image_subheader->quant_scale * ecat_calibration_fctr;
			slice_index	= (k - 1) * width * height;

       			*(subheader_list + k - 1)	= matrixx_init_image_subheader (image_subheader);

			for (j = 0; j < height; j++)
			{
				row_index	= j * width;
				for (i = 0; i < width; i++)
				{
					image3d [slice_index + row_index + i] 
					= slice_data [row_index + i] * scale;
				}
			}

			free_matrix_data (matrixx_data);
		}
	}

	return SUCCEED;
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d41 2
a42 1
	float		quant_scale;
d65 5
a69 1
			quant_scale	= image_subheader->quant_scale;
d80 1
a80 1
					= slice_data [row_index + i] * quant_scale;
@
