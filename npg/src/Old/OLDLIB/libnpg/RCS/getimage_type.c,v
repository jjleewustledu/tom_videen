head	1.19;
access;
symbols;
locks
	tom:1.19; strict;
comment	@ * @;


1.19
date	95.11.10.16.28.25;	author tom;	state Exp;
branches;
next	1.18;

1.18
date	95.11.04.00.01.30;	author ty7777;	state Exp;
branches;
next	1.17;

1.17
date	95.11.03.23.02.42;	author ty7777;	state Exp;
branches;
next	1.16;

1.16
date	95.10.13.17.15.53;	author ty7777;	state Exp;
branches;
next	1.15;

1.15
date	95.09.28.18.32.26;	author ty7777;	state Exp;
branches;
next	1.14;

1.14
date	95.06.14.20.09.27;	author ty7777;	state Exp;
branches;
next	1.13;

1.13
date	95.06.13.19.19.42;	author ty7777;	state Exp;
branches;
next	1.12;

1.12
date	95.06.13.17.19.50;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	95.06.01.18.46.56;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	95.05.19.16.32.41;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	95.05.19.14.31.21;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	95.05.18.21.47.16;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	94.03.03.20.13.25;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	93.10.25.21.16.30;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	93.09.29.16.43.47;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	93.09.22.18.54.02;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.08.06.16.28.13;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.08.06.16.21.04;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.03.03.20.34.55;	author ty7777;	state Exp;
branches;
next	;


desc
@getimage_type.c initial checking in.
@


1.19
log
@remove petutil parent directory from include statements
@
text
@/*$Id: getimage_type.c,v 1.18 1995/11/04 00:01:30 ty7777 Exp tom $*/
/*$Log: getimage_type.c,v $
 * Revision 1.18  1995/11/04  00:01:30  ty7777
 * Same as the last version.
 *
 * Revision 1.17  1995/11/03  23:02:42  ty7777
 * Added ECAT961_SCANNER type.
 *
 * Revision 1.16  1995/10/13  17:15:53  ty7777
 * Use matrix7.h.
 *
 * Revision 1.15  1995/09/28  18:32:26  ty7777
 * Same as the last one.
 *
 * Revision 1.14  1995/06/14  20:09:27  ty7777
 * Added calling for isecat ().
 *
 * Revision 1.13  1995/06/13  19:19:42  ty7777
 * Same as the last one.
 *
 * Revision 1.12  1995/06/13  17:19:50  ty7777
 * Added processing for analyze header files.
 *
 * Revision 1.11  1995/06/01  18:46:56  ty7777
 * Added getifhdr ().
 *
 * Revision 1.10  1995/05/19  16:32:41  ty7777
 * Added MRI processing.
 *
 * Revision 1.9  1995/05/19  14:31:21  ty7777
 * Use IFH_EXT.
 *
 * Revision 1.8  1995/05/18  21:47:16  ty7777
 * Added MRI processing.
 *
 * Revision 1.7  1994/03/03  20:13:25  ty7777
 * Replace id with header so that HP ident can recongnise.
 *
 * Revision 1.6  1993/10/25  21:16:30  ty7777
 * Added initialization for matval.
 *
 * Revision 1.5  1993/09/29  16:43:47  ty7777
 * Added getfile_type.
 *
 * Revision 1.4  1993/09/22  18:54:02  ty7777
 * Added getfiule_type () and delted matval initializations.
 *
 * Revision 1.3  1993/08/06  16:28:13  ty7777
 * Changed error message.
 *
 * Revision 1.2  1993/08/06  16:21:04  ty7777
 * Same as the last one.
 *
 * Revision 1.1  1993/03/03  20:34:55  ty7777
 * Initial revision
 **/

#ifndef lint
static char sccsid[]="@@(#)getimage_type.c 10/09/92 Copyright Neural Pet Group, Washington University 1992";
#endif
static char rcsid [] = "$Header: /export/home/npggw/tom/src/libnpg/RCS/getimage_type.c,v 1.18 1995/11/04 00:01:30 ty7777 Exp tom $";

/*___________________________________________________________________________________
 *
 *	File Name:	getimage_type.c
 *	Function Name:	getimage_type
 *	Arguments:	fd:		File descriptor, assigned before calling.	
 *			image_name:	Image name.
 *			encoded_flag:	True: encoded image; False: decoded image;
 *					returned. 
 *			num_slices:	Number of slices, returned.
 *	Return Value:	int:		Image type.			
 *					PETT VI: 6;	Super PETT I: 7;
 *					ECAT: 10;	Super PETT II: 8;
 *					Error: -1.
 *	Description:	Read an image file and determine its image type.
 *	Called by:	GETIMG () in getimg.f of libpetutil.a.
 *	Calling:	OpenEcat () in OpenEcat.c of libpetutil.a	
 *	Author:		Tom Yang
 *	History:	Created by Tom Yang on 04/15/1992.
 *
___________________________________________________________________________________*/

#include <archive.h>
#include <matrix7.h>
#include <ifh.h>
#include <imglist.h>

PUBLIC int getimage_type (fd, image_name, encoded_flag, num_slices)
int		fd;
char		*image_name;
BOOLEAN		*encoded_flag;
short		*num_slices;
{
	IFH		ifhdr;
	char		*char_header;		/* character header */
	char		*extension;
	char		fileform [ENCODED_FILE_FORM_LEN + 1];			
	char		ifhdr_file [MAXLINE];
	char		hdrfile [MAXLINE];
	char		*lines [IFH_MAXLEN];
	char		super_pet1_fileform [ENCODED_FILE_FORM_LEN + 1];			
	int		ecat_image_type;
	int		file_type;
	int		nlines;
	int		scan_type;
	short		*int_header;		/* integer header */
	static char	*function	= "getimage_type";

	/* 
	 * Create the interfile header file.
	 */
	memset (ifhdr_file, 0, MAXLINE); 
	extension	= strrchr (image_name, '.');
	if (extension != NULL)
		strncpy (ifhdr_file, image_name, strlen (image_name)  - strlen (extension));
	else
		strcpy (ifhdr_file, image_name);

	strcpy (hdrfile, ifhdr_file);
	strcat (ifhdr_file, IFH_EXT);
	strcat (hdrfile, HDR_EXT);

	/* 
	 * Allocate memory for image header. 
	 */
	char_header = (char *) pkg_malloc (HEADER_SIZE, function, "char_header");

	/* 
	 * Read first record and check if file is encoded. 
	 */
	lseek (fd, 0L, 0);
	if (read (fd, char_header, HEADER_SIZE) < HEADER_SIZE) 
	{
		pkg_message (PKG_ERROR, function, "fread", 
			"char_header: %s.\n", "Reading error");
		return	ERROR_SCANNER;
	}

	int_header	= (short *) char_header; 
	strncpy (fileform, char_header, ENCODED_FILE_FORM_LEN);
	strncpy (super_pet1_fileform, char_header + 
		SUPER_PETT_I_NAME_POS, ENCODED_FILE_FORM_LEN);

	/*
	 * Get the image type.
	 */
	*encoded_flag	= FALSE;

	if (strncmp (fileform, "ENCODED   ", ENCODED_FILE_FORM_LEN) == 0)
	{
		*encoded_flag	= TRUE;
		*num_slices	= int_header [ENCODED_NUMSLICES_POS];
		scan_type	= int_header [ENCODED_PETTNUM_POS]; 
	}
	else if (strncmp (fileform, "SUPER PETT", 10) == 0)
	{
		*num_slices	= int_header [SPETT_II_NUM_SLICES_POS];
		scan_type	= SUPER_PETT_II_SCANNER;
	}
	else if (strncmp (fileform, "PC2048-15B", 10)	== 0 || 
		strncmp (fileform, "ECAT-953", 8)	== 0 ||
		strncmp (fileform, "PETT VI ", 8)	== 0)
	{
		*num_slices	= int_header [SPETT_II_NUM_SLICES_POS];
		scan_type	= SUPER_PETT_II_OTHERS;
	}
	else if (strncmp (super_pet1_fileform, "SUPER PETT", 10) == 0)
	{
		*num_slices	= int_header [SPETT_I_NUM_SLICES_POS];
		scan_type	=  SUPER_PETT_I_SCANNER;
	}
	else if (int_header [PETT6_POS] == PETT6_NUMBER) 
	{
		if (int_header [PETT6_NUM_SLICES_POS] != 0)
		{
			*num_slices	= int_header [PETT6_NUM_SLICES_POS];
		}
		else
		{
			*num_slices	= PETT6_7SLICES;
		}

		scan_type	=  PETT6_SCANNER;	
	}
	else if (((readifhdr (ifhdr_file, FALSE, IFH_MAXLEN, &nlines, lines) == SUCCEED
	&& getifhdr (ifhdr_file, FALSE, nlines, lines, &ifhdr) == SUCCEED)
	|| hdr2ifh (hdrfile, FALSE, &ifhdr) != FAIL)
	&& strcmp (ifhdr.interfile, "INTERFILE") == 0)
	{
			scan_type	= INTERFILE;
			*num_slices	= ifhdr.matrix_size [2];
	}
	else if (isecat (image_name, &ecat_image_type, num_slices) == TRUE)
	/* 
 	 * Check if image is in ECAT format.
 	 */
	{
		scan_type	= ecat_image_type;
	}
	else
	{
		fprintf (stderr, "Image format in file %s is not known.\n", image_name);

		scan_type	=  ERROR_SCANNER;
	}

	free (char_header);

	return	scan_type;
}

/*
 * Check if a file is binary or ascii.
 */

PUBLIC int getfile_type (filename)
	char	*filename;
{
	FILE	*fp;
	int	ftype;
	int	c;

	if ((fp = fopen (filename, "r" )) == NULL) 
	{
		return INVALID;
	}

	while ((c = getc (fp)) != EOF && isascii (c));
	fclose (fp);

	return c == EOF? ASCII: BINARY;
}
@


1.18
log
@Same as the last version.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.17 1995/11/03 23:02:42 ty7777 Exp ty7777 $*/
d3 3
d61 1
a61 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libnpg/RCS/getimage_type.c,v 1.17 1995/11/03 23:02:42 ty7777 Exp ty7777 $";
d84 4
a87 4
#include <petutil/archive.h>
#include <petutil/matrix7.h>
#include <petutil/ifh.h>
#include <petutil/imglist.h>
@


1.17
log
@Added ECAT961_SCANNER type.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.16 1995/10/13 17:15:53 ty7777 Exp ty7777 $*/
d3 3
d58 1
a58 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libnpg/RCS/getimage_type.c,v 1.16 1995/10/13 17:15:53 ty7777 Exp ty7777 $";
@


1.16
log
@Use matrix7.h.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.15 1995/09/28 18:32:26 ty7777 Exp ty7777 $*/
d3 3
d55 1
a55 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getimage_type.c,v 1.15 1995/09/28 18:32:26 ty7777 Exp ty7777 $";
d97 1
d188 1
a188 1
	else if (isecat (image_name, num_slices) == TRUE)
d193 1
a193 1
		scan_type	= ECAT_SCANNER;
@


1.15
log
@Same as the last one.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.14 1995/06/14 20:09:27 ty7777 Exp $*/
d3 3
d52 1
a52 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getimage_type.c,v 1.14 1995/06/14 20:09:27 ty7777 Exp $";
d76 1
a76 1
#include <petutil/matrix.h>
@


1.14
log
@Added calling for isecat ().
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.13 1995/06/13 19:19:42 ty7777 Exp ty7777 $*/
d3 3
d49 1
a49 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getimage_type.c,v 1.13 1995/06/13 19:19:42 ty7777 Exp ty7777 $";
@


1.13
log
@Same as the last one.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.12 1995/06/13 17:19:50 ty7777 Exp ty7777 $*/
d3 3
d46 1
a46 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getimage_type.c,v 1.12 1995/06/13 17:19:50 ty7777 Exp ty7777 $";
a80 1
	MatrixFile	*matfptr;		/* ECAT MatrixFile pointer */
a87 2
	float		pixel_size;
	float		plane_separation;
a91 2
	short		xdim;			/* dimension-x */
	short		ydim;			/* dimension-y */
a92 1
	struct Matval	matval;
a132 5
	matval.frame	= 1;
	matval.plane	= 1;
	matval.gate	= 1;
	matval.data	= 0;
	matval.bed	= 0;
d172 1
a172 1
	|| hdr2ifh (hdrfile, &ifhdr) == SUCCEED)
d178 1
a178 2
	else if ((matfptr = OpenEcat (image_name, num_slices, &xdim, &ydim, 
	&pixel_size, &plane_separation, matval)) != NULL)
a183 1
		matrix_close (matfptr);
@


1.12
log
@Added processing for analyze header files.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.11 1995/06/01 18:46:56 ty7777 Exp ty7777 $*/
d3 3
d43 1
a43 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getimage_type.c,v 1.11 1995/06/01 18:46:56 ty7777 Exp ty7777 $";
@


1.11
log
@Added getifhdr ().
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.10 1995/05/19 16:32:41 ty7777 Exp ty7777 $*/
d3 3
d40 1
a40 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getimage_type.c,v 1.10 1995/05/19 16:32:41 ty7777 Exp ty7777 $";
d80 1
d104 1
d106 1
d175 3
a177 2
	else if (readifhdr (ifhdr_file, FALSE, IFH_MAXLEN, &nlines, lines) == SUCCEED
	&& getifhdr (ifhdr_file, FALSE, nlines, lines, &ifhdr) == SUCCEED
@


1.10
log
@Added MRI processing.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.9 1995/05/19 14:31:21 ty7777 Exp ty7777 $*/
d3 3
d37 1
a37 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getimage_type.c,v 1.9 1995/05/19 14:31:21 ty7777 Exp ty7777 $";
d77 1
d82 1
d169 2
a170 1
	else if (readifhdr (ifhdr_file, FALSE, &ifhdr) == SUCCEED
@


1.9
log
@Use IFH_EXT.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.8 1995/05/18 21:47:16 ty7777 Exp ty7777 $*/
d3 3
d34 1
a34 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getimage_type.c,v 1.8 1995/05/18 21:47:16 ty7777 Exp ty7777 $";
d77 1
d88 1
d164 6
a176 1
		*encoded_flag	= FALSE;
a177 5
	}
	else if (readifhdr (ifhdr_file, &ifhdr) == SUCCEED
	&& strcmp (ifhdr.interfile, "INTERFILE") == 0)
	{
		scan_type	= INTERFILE;
@


1.8
log
@Added MRI processing.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.7 1994/03/03 20:13:25 ty7777 Exp ty7777 $*/
d3 3
d31 1
a31 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/libhp/RCS/getimage_type.c,v 1.7 1994/03/03 20:13:25 ty7777 Exp ty7777 $";
d90 1
a90 1
	strcat (ifhdr_file, HDR_EXT);
@


1.7
log
@Replace id with header so that HP ident can recongnise.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.6 1993/10/25 21:16:30 ty7777 Exp ty7777 $*/
d3 3
d28 1
a28 1
static char rcsid [] = "$Header$";
d53 2
d56 1
a56 1
int getimage_type (fd, image_name, encoded_flag, num_slices)
d62 1
d65 1
d67 1
d79 11
d165 5
@


1.6
log
@Added initialization for matval.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.5 1993/09/29 16:43:47 ty7777 Exp ty7777 $*/
d3 3
d25 1
a25 1
static char rcsid []= "$Id: getimage_type.c,v 1.5 1993/09/29 16:43:47 ty7777 Exp ty7777 $";
@


1.5
log
@Added getfile_type.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.4 1993/09/22 18:54:02 ty7777 Exp ty7777 $*/
d3 3
d22 1
a22 1
static char rcsid []= "$Id: getimage_type.c,v 1.4 1993/09/22 18:54:02 ty7777 Exp ty7777 $";
d89 1
a89 1
	 * Check if image file is encoded.
d91 7
d104 1
a104 1
	else
d106 18
a123 3
		*encoded_flag	= FALSE;

		if (strncmp (fileform, "SUPER PETT", 10) == 0)
d125 1
a125 2
			*num_slices	= int_header [SPETT_II_NUM_SLICES_POS];
			scan_type	= SUPER_PETT_II_SCANNER;
d127 1
a127 3
		else if (strncmp (fileform, "PC2048-15B", 10)	== 0 || 
			strncmp (fileform, "ECAT-953", 8)	== 0 ||
			strncmp (fileform, "PETT VI ", 8)	== 0)
d129 1
a129 2
			*num_slices	= int_header [SPETT_II_NUM_SLICES_POS];
			scan_type	= SUPER_PETT_II_OTHERS;
a130 15
		else if (strncmp (super_pet1_fileform, "SUPER PETT", 10) == 0)
		{
			*num_slices	= int_header [SPETT_I_NUM_SLICES_POS];
			scan_type	=  SUPER_PETT_I_SCANNER;
		}
		else if (int_header [PETT6_POS] == PETT6_NUMBER) 
		{
			if (int_header [PETT6_NUM_SLICES_POS] != 0)
			{
				*num_slices	= int_header [PETT6_NUM_SLICES_POS];
			}
			else
			{
				*num_slices	= PETT6_7SLICES;
			}
d132 15
a146 15
			scan_type	=  PETT6_SCANNER;	
		}
		/* 
	 	 * Check if image is in ECAT format.
	 	 */
		else if ((matfptr = OpenEcat (image_name, num_slices, &xdim, &ydim, 
					&pixel_size, &plane_separation, matval)) != NULL)
		{
			scan_type	= ECAT_SCANNER;
			*encoded_flag	= FALSE;
			matrix_close (matfptr);
		}
		else
		{
			fprintf (stderr, "Image format in file %s is not known.\n", image_name);
d148 1
a148 2
			scan_type	=  ERROR_SCANNER;
		}
@


1.4
log
@Added getfiule_type () and delted matval initializations.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.3 1993/08/06 16:28:13 ty7777 Exp ty7777 $*/
d3 3
d19 1
a19 1
static char rcsid []= "$Id: getimage_type.c,v 1.3 1993/08/06 16:28:13 ty7777 Exp ty7777 $";
a163 1
		fprintf (stderr, "getfile_type: Unable to open %s\n", filename);
@


1.3
log
@Changed error message.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.2 1993/08/06 16:21:04 ty7777 Exp ty7777 $*/
d3 3
d16 1
a16 1
static char rcsid []= "$Id: getimage_type.c,v 1.2 1993/08/06 16:21:04 ty7777 Exp ty7777 $";
d39 1
a39 1
#include <petutil/petutil.h>
a60 9
	/*
	 * Assign default values for matval.
	 */
	matval.frame	= 1;
	matval.plane	= 1;
	matval.gate	= 1;
	matval.data	= 0;
	matval.bed	= 0;

d131 1
a131 1
			scan_type	=  ECAT_SCANNER;
d146 23
@


1.2
log
@Same as the last one.
@
text
@d1 1
a1 1
/*$Id: getimage_type.c,v 1.1 1993/03/03 20:34:55 ty7777 Exp ty7777 $*/
d3 3
d13 1
a13 1
static char rcsid []= "$Id: getimage_type.c,v 1.1 1993/03/03 20:34:55 ty7777 Exp ty7777 $";
d143 1
a143 1
			fprintf (stderr, "PET Data Input Error.\n");
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d10 1
a10 1
static char rcsid []= "$Id: getimage_type.c,v 1.1 1993/01/28 22:02:33 ty7777 Exp $";
@
