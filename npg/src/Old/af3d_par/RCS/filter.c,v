head	1.2;
access;
symbols;
locks
	ty7777:1.2; strict;
comment	@ * @;


1.2
date	95.04.07.14.45.23;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.03.29.20.16.32;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version with debugging messages.
@


1.2
log
@Use real radii.
@
text
@/*$Id: filter.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $*/
/*$Log: filter.c,v $
 * Revision 1.1  1995/03/29  20:16:32  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
  File:		filter.c

  Function:	void filter (char *input_image, short image_num_slices, short image_zorigin, 
			short *mask_image, short mask_num_slices, short mask_zorigin, 
			float radius, int sign, float *filtered_image)

  Arguments:	input_image,		input image array.
		image_num_slices,	number of image slices.
		image_zorigin,		zorigin of image.
		mask_image,		input mask image array.
		mask_num_slices,	number of slices for the mask image.
		mask_zorigin,		zorigin of mask.
		radius,			filter radius.
		sign,			1: positive peaks; -1: negative peaks.
		filtered_image,		output filtered image array.

  Description:	This function uses convolution to filter an image.

  Author:	Tom Yang, August, 1992

  History:	 Created by Tom Yang on 08/19/92. 
___________________________________________________________________________*/

#include "af3d_par.h"

static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/filter.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $";

PUBLIC void filter (input_image, image_num_slices, image_zorigin, mask_image, 
	mask_num_slices, mask_zorigin, radius, sign, filtered_image)
	short		input_image [][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
	short		image_num_slices;
	short		image_zorigin;
	short		mask_image [][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
	short		mask_num_slices;
	short		mask_zorigin;
	float		radius;
	int		sign;
	float		filtered_image [][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
{
	float	mean;
	int	x;
	int	y;
	int	z;
	int	zmask;
	int	zoffset;

	zoffset	= mask_zorigin - image_zorigin;

	for (z = 0; z < image_num_slices; z++)
	{
		zmask	= z + zoffset;
		for (y = 0; y < ENCODED_SLICE_HEIGHT; y++)
		{
			for (x = 0; x < ENCODED_SLICE_WIDTH; x++)
			{
				if (zmask >= 0 && zmask < mask_num_slices
				&& mask_image [zmask][y][x] > 0)
				{
					sphere_mean ((float)x, (float)y, (float)z, radius, input_image, 
						ENCODED_SLICE_WIDTH, ENCODED_SLICE_HEIGHT, 
						image_num_slices, sign, &mean);
					filtered_image [z][y][x]	= mean;
				}
				else
					filtered_image [z][y][x]	= 0.0;
			}
		}
	}
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d12 1
a12 2
			POINT3D *region_location, int num_locations, int sign, 
			float *filtered_image)
d20 1
a20 2
		region_location,	location array.
		num_locations,		number of locations.
d33 1
a33 1
static char rcsid [] = "$Header$";
d36 2
a37 3
	mask_num_slices, mask_zorigin, region_location, num_locations, sign, 
	filtered_image)
	short		input_image[][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
d43 1
a43 2
	POINT3D		*region_location;
	int		num_locations;
d47 1
a52 6
	float	sum;
	int	actual_num_locations;
	int	i;
	int	x0;
	int	y0;
	int	z0;
a62 3
				sum			= 0.0;
				actual_num_locations	= 0;

d66 4
a69 14
					for (i = 0; i < num_locations; i++)
					{
						x0	= region_location [i].x + x;
						y0	= region_location [i].y + y;
						z0	= region_location [i].z + z;

						if (z0 >= 0 && z0 < image_num_slices 
						&& y0 >= 0 && y0 < ENCODED_SLICE_HEIGHT 
						&& x0 >= 0 && x0 < ENCODED_SLICE_WIDTH) 
						{
							sum	+= (float) (input_image [z0][y0][x0]); 
							actual_num_locations++;
						}
					}
a70 4

				if (actual_num_locations != 0)
					filtered_image [z][y][x]	= (sum * sign) 
								/ ((float) actual_num_locations);
@
