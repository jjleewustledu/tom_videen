head	1.2;
access;
symbols;
locks
	ty7777:1.2; strict;
comment	@ * @;


1.2
date	95.04.07.14.45.38;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.03.29.20.16.32;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version with debugging messages.
@


1.2
log
@Use real radii.
@
text
@/*$Id: magfilter.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $*/
/*$Log: magfilter.c,v $
 * Revision 1.1  1995/03/29  20:16:32  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
  File:		magfilter.c

  Function:	void magfilter (char *input_image, short image_num_slices, 
			float radius, BOOLEAN sphere_center, int sign, 
			FLOAT_POINT3D *list, float *value_list, int list_size) 

  Arguments:	input_image,		input image array.
		image_num_slices,	number of image slices.
		radius,			radius for magnitude computation.
		sphere_center,		the center of sphere is at the center 
					of a pixel.
		sign,			1: positive peaks; -1: negative peaks.
		list,			center list array.
		value_list,		list of magnitude.
		list_size,		list array size.


  Description:	This function gets the magnitude for a 3D coordinate.

  Author:	Tom Yang, March 20, 1995

  History:	Created by Tom Yang on 03/20/95. 
___________________________________________________________________________*/

#include "af3d_par.h"

static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/magfilter.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $";

PUBLIC void magfilter (input_image, image_num_slices, radius, sphere_center,
	sign, list, value_list, list_size)
	short		input_image [][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
	short		image_num_slices;
	float		radius;
	BOOLEAN		sphere_center;
	int		sign;
	FLOAT_POINT3D	*list;
	float		*value_list;
	int		list_size;
{
	int	i;
	float	x;
	float	y;
	float	z;

	for (i = 0; i < list_size; i++)
	{
		x	= list [i].x;
		y	= list [i].y;
		z	= list [i].z;
		if (sphere_center)
		{
			x	= ROUND (x);
			y	= ROUND (y);
			z	= ROUND (z);
		}
		sphere_mean (x, y, z, radius, input_image, ENCODED_SLICE_WIDTH, 
			ENCODED_SLICE_HEIGHT, image_num_slices, sign, value_list + i);
	}
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d11 2
a12 2
			POINT3D *region_location, int num_locations, int sign, 
			POINT3D *list, float *value_list, int list_size) 
d16 3
a18 2
		region_location,	location array.
		num_locations,		number of locations.
d20 1
a20 1
		list,			peak list array.
d34 1
a34 1
static char rcsid [] = "$Header$";
d36 1
a36 1
PUBLIC void magfilter (input_image, image_num_slices, region_location, num_locations, 
d38 8
a45 8
	short	input_image [][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
	short	image_num_slices;
	POINT3D	*region_location;
	int	num_locations;
	int	sign;
	POINT3D	*list;
	float	*value_list;
	int	list_size;
a46 5
	int	x;
	int	y;
	int	z;
	float	sum;
	int	actual_num_locations;
d48 3
a50 1
	int	j;
d54 4
a57 4
		sum			= 0.0;
		actual_num_locations	= 0;

		for (j = 0; j < num_locations; j++)
d59 3
a61 11
			x	= region_location [j].x + list [i].x;
			y	= region_location [j].y + list [i].y;
			z	= region_location [j].z + list [i].z;

			if (z >= 0 && z < image_num_slices 
			&& y >= 0 && y < ENCODED_SLICE_HEIGHT 
			&& x >= 0 && x < ENCODED_SLICE_WIDTH) 
			{
				sum	+= (float) (input_image [z][y][x]); 
				actual_num_locations++;
			}
d63 2
a64 5

		if (actual_num_locations != 0)
			value_list [i]	= (sum * sign) / ((float) actual_num_locations);
		else
			value_list [i]	= 0.0;
@
