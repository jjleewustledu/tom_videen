head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	95.05.17.21.51.29;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	95.05.01.16.40.18;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	95.04.28.18.08.49;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	95.04.26.21.33.50;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	95.04.26.16.52.44;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	95.04.14.16.05.34;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	95.04.07.14.45.57;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	95.03.29.21.01.17;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.03.29.20.16.32;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version with debugging messages.
@


1.9
log
@Same as the last version.
@
text
@/*$Id: savelist.c,v 1.8 1995/05/01 16:40:18 ty7777 Exp $*/
/*$Log: savelist.c,v $
 * Revision 1.8  1995/05/01  16:40:18  ty7777
 * Get rid of the debuging messages.
 *
 * Revision 1.7  1995/04/28  18:08:49  ty7777
 * Put the prmfile in the .3sp and .3sn files.
 *
 * Revision 1.6  1995/04/26  21:33:50  ty7777
 * Move t88mean information to the recfile.
 *
 * Revision 1.5  1995/04/26  16:52:44  ty7777
 * Deleted PIX MAX REGS.
 *
 * Revision 1.4  1995/04/14  16:05:34  ty7777
 * Final release.
 *
 * Revision 1.3  1995/04/07  14:45:57  ty7777
 * Use real radii.
 *
 * Revision 1.2  1995/03/29  21:01:17  ty7777
 * Working version.c
 *
 * Revision 1.1  1995/03/29  20:16:32  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
File:		savelist.c

Function:	int savelist (char out_name [], FLOAT_POINT3D *list, float *value_list, 
		int list_size, int sign, float radius, BOOLEAN sortsarp, char *image_file, 
		BOOLEAN average, int zorigin, char *date, char *uid).

Arguments:	out_name,	output file name.
		list,		3d floating point list array.
		value_list,	list of magnitude.
		list_size,	list array size.
		sign,		1, positive; -1, negative.
		radius,		radius.
		sortsarp,	1, 3sp, 3sn; 0, 3dp, 3dn. 
		image_file,	image file name.
		average,	average flag.
		zorigin,	zorigin slice.
		date,		date.
		uid,		user id.

Return:		SUCCEED: successful; FAIL: errors.

Description:	This function write list to output file.

Author:		Tom Yang.

History:	Created 03/29/95 by Tom Yang. 
___________________________________________________________________________*/

#include <petutil/imglist.h>		/* contains REC_EXT */
#include <petutil/matrix.h>		
#include <math.h>		
#include "af3d_par.h"

static char rcsid [] = "$Header: /usr/local/src/af3d_par/RCS/savelist.c,v 1.8 1995/05/01 16:40:18 ty7777 Exp $";

PUBLIC int savelist (out_name, list, value_list, list_size, sign, radius, 
	sortsarp, image_file, average, zorigin, date, uid)
	char		out_name [];
	FLOAT_POINT3D	*list;
	float		*value_list;
	int		list_size;
	int		sign;
	float		radius;
	BOOLEAN		sortsarp;
	char		*image_file;
	BOOLEAN		average;
	int		zorigin;
	char		*date;
	char		*uid;
{
	FILE		*outfp;
	float		diameter;
	int		i;
	float		slicez;
	float		x;
	float		y;
	float		z;

  	outfp	= fopen (out_name, "w");
  	if (outfp == (FILE *) NULL) 
	{
		fprintf (stderr, "Can't Open %s\n", out_name);
		return FAIL;
  	}

	diameter	= 2 * radius + 1;

	if (average)
		fprintf (outfp, "%.1fPIX REG. VALUES FOR %s\n", diameter, image_file);
	else
		fprintf (outfp, "%s -%s %s %s\n", image_file, 
			(sign == 1)? "POSITIVE": "NEGATIVE", date, uid);

	fprintf (outfp, "%d, %d\n", list_size, 4);

	if (sortsarp)
	{
		fprintf (outfp, "*   POSITIVE VALUES CORRESPOND TO RIGHT AND ANTERIOR    *\n");
		fprintf (outfp, "    L-R       A-P     Z-AXIS    MAGNITUDE\n");
		fprintf (outfp, "    ---       ---     ------    ---------\n");
	}

	/* 
	 * C array index starts at 0. To make the output compatible with
	 * that from the Current machines, we add 1 to each of component
	 * of the coordinates.
	 */
	if (sortsarp)
	{
		for (i = 0; i < list_size; i++)
		{
			x	= list [i].x + 1;
			y	= list [i].y + 1;
			z	= list [i].z + 1;
			slicez	= (zorigin - z) * 2;

			fprintf (outfp, "%8.1f%10.1f%9.1f%12.2f\n", 
				SliceX (x), SliceY (y), slicez, value_list [i]);
		}
	}
	else if (!average) 
	{
		for (i = 0; i < list_size; i++)
		{
			fprintf (outfp, "%8.1f%8.1f%8.1f%8.2f\n", (list [i].x + 1) - 14 , 
				(list [i].y + 1) - 14, list [i].z + 1, value_list [i]);
		}
	}
	else
	{
		for (i = 0; i < list_size; i++)
		{
			fprintf (outfp, "%8.1f%8.1f%8.1f%12.5f\n", 
				list [i].x, list [i].y, list [i].z, value_list [i]);

		}
	}

	fclose (outfp);

	return SUCCEED;
}
@


1.8
log
@Get rid of the debuging messages.
@
text
@d1 1
a1 1
/*$Id: savelist.c,v 1.7 1995/04/28 18:08:49 ty7777 Exp ty7777 $*/
d3 3
d62 1
a62 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/savelist.c,v 1.7 1995/04/28 18:08:49 ty7777 Exp ty7777 $";
@


1.7
log
@Put the prmfile in the .3sp and .3sn files.
@
text
@d1 1
a1 1
/*$Id: savelist.c,v 1.6 1995/04/26 21:33:50 ty7777 Exp ty7777 $*/
d3 3
d59 1
a59 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/savelist.c,v 1.6 1995/04/26 21:33:50 ty7777 Exp ty7777 $";
a114 1
printf ("list_size = %d out_name = %s\n", list_size, out_name);
@


1.6
log
@Move t88mean information to the recfile.
@
text
@d1 1
a1 1
/*$Id: savelist.c,v 1.5 1995/04/26 16:52:44 ty7777 Exp ty7777 $*/
d3 3
d27 1
a27 1
		int image_type, int zorigin, char *date, char *uid).
d37 1
a37 1
		image_type,	image file type.
d56 1
a56 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/tmp1/RCS/savelist.c,v 1.5 1995/04/26 16:52:44 ty7777 Exp ty7777 $";
d59 1
a59 1
	sortsarp, image_file, image_type, average, zorigin, date, uid)
a67 1
	int		image_type;
d112 1
@


1.5
log
@Deleted PIX MAX REGS.
@
text
@d1 1
a1 1
/*$Id: savelist.c,v 1.4 1995/04/14 16:05:34 ty7777 Exp ty7777 $*/
d3 3
d53 1
a53 1
#define T88_DATA_FORMAT	2
a54 2
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/tmp1/RCS/savelist.c,v 1.4 1995/04/14 16:05:34 ty7777 Exp ty7777 $";

d56 1
a56 1
		sortsarp, image_file, image_type, average, zorigin, date, uid)
a71 10
	FILE		*recfp;
	MatrixFile	*fptr;
	char		*cbuffer;
	char		line [MAXLINE];
	char		creation_desc [MAXLINE];
	char		recfile [MAXPATH];
	char		sbuffer1 [MAXLINE];
	char		sbuffer2 [MAXLINE];
	char		sbuffer3 [MAXLINE];
	int		day;
a73 3
	int		month;
	int		num_scanned;
	int		year;
a74 2
	float		voxel_depth;
	float		voxel_width;
a77 4
	short		height;
	short		num_slices;
	short		width;
	struct Matval	matval;
a136 84
	}

	/*
	 * Write the prm and lst file to output if the image is generated by t88mean.
	 */
	if (image_type == ECAT_SCANNER)
	{
		matval.frame	= 1;
		matval.plane	= 1;
		matval.gate	= 1;
		matval.data	= 0;
		matval.bed	= 0;

		fptr	= OpenEcat (image_file, &num_slices, &width, &height, 
				&voxel_width, &voxel_depth, matval);
		if (fptr == (MatrixFile *) NULL)
		{
			fprintf (stderr, "Cannot open image %s.\n", image_file);
			return FAIL;
		}

		cbuffer	= strstr (fptr->mhptr->physician_name, "t88");
		if (cbuffer != NULL)
		{
			fprintf (outfp, "\n");
			fprintf (outfp, "PROCESSING STREAM\n");
			fprintf (outfp, 
			" %d						(data format)\n",
			T88_DATA_FORMAT);

			strcpy (recfile, image_file);
			strcat (recfile, REC_EXT);
  			recfp	= fopen (recfile, "r");
  			if (recfp == (FILE *) NULL) 
			{
				fprintf (outfp, 
			" %s					(program version)\n",
				cbuffer);

				fclose (recfp);
				matrix_close (fptr);
				fclose (outfp);

				return SUCCEED;
			}

			fgets (line, MAXLINE, recfp);
			strcpy (creation_desc, line + 4);

			fgets (line, MAXLINE, recfp);
			fgets (line, MAXLINE, recfp);

			num_scanned	= sscanf (line, "%s %s %s %d/%d/%d", 
			sbuffer1, sbuffer2, sbuffer3, &year, &month, &day);

			year	%= ONE_HUNDRED;
			cbuffer	= strrchr (sbuffer2, '/');
			if (cbuffer != NULL)
			{
				fprintf (outfp, 
			" %s %s   %d/%d/%d			(program version)\n",
				cbuffer + 1, sbuffer3, month, day, year);
			}
			else
			{
				fprintf (outfp, 
			" %s %s   %d/%d/%d			(program version)\n",
				sbuffer2, sbuffer3, month, day, year);
			}

			fprintf (outfp, " %s", creation_desc); 

			while (fgets (line, MAXLINE, recfp) != NULL 
			&& strncmp (line, "endimglst", 9) != 0)
			{
				fprintf (outfp, " %s", line);
			}
			if (strncmp (line, "endimglst", 9) == 0)
				fprintf (outfp, " %s", line);

			fclose (recfp);
		}

		matrix_close (fptr);
@


1.4
log
@Final release.
@
text
@d1 1
a1 1
/*$Id: savelist.c,v 1.3 1995/04/07 14:45:57 ty7777 Exp ty7777 $*/
d3 3
d52 1
a52 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/savelist.c,v 1.3 1995/04/07 14:45:57 ty7777 Exp ty7777 $";
d109 2
a110 2
		fprintf (outfp, "%.1fPIX MAX REGS, %s -%s %s %s\n", diameter, image_file, 
				(sign == 1)? "POSITIVE": "NEGATIVE", date, uid);
@


1.3
log
@Use real radii.
@
text
@d1 1
a1 1
/*$Id: savelist.c,v 1.2 1995/03/29 21:01:17 ty7777 Exp ty7777 $*/
d3 3
d14 1
a14 1
  File:		savelist.c
d16 3
a18 4
  Function:	int savelist (char out_name [], FLOAT_POINT3D *list, float *value_list, 
				int list_size, int sign, float radius, BOOLEAN sortsarp, 
				char *image_file, int image_type, int zorigin, char *date, 
				char *uid).
d20 1
a20 1
  Arguments:	out_name,	output file name.
d33 1
a33 1
  Return:	SUCCEED: successful; FAIL: errors.
d35 1
a35 1
  Description:	This function write list to output file.
d37 3
a39 3
  History:	Created 08/27/92 by Tom Yang. 
		Modified 10/12/94 by Tom Yang to save the prm file and the
		  lst file if the image is generated by t88mean.
d49 1
a49 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/savelist.c,v 1.2 1995/03/29 21:01:17 ty7777 Exp ty7777 $";
@


1.2
log
@Working version.c
@
text
@d1 1
a1 1
/*$Id: savelist.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $*/
d3 3
d14 3
a16 2
				int list_size, sign, radius, sortsarp, image_file, 
				int image_type, int zorigin, char *date, char *uid).
d47 1
a47 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/savelist.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $";
d56 1
a56 1
	int		radius;
d76 1
a76 1
	int		diameter;
d99 1
d102 1
a102 1
		fprintf (outfp, "%dPIX REG. VALUES FOR %s\n", diameter, image_file);
d104 1
a104 1
		fprintf (outfp, "%dPIX MAX REGS, %s -%s %s %s\n", diameter, image_file, 
a151 2
	diameter	= 2 * radius + 1;

d186 1
a186 1
			" %s						(program version)\n",
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d43 1
a43 1
static char rcsid [] = "$Header$";
a73 1
int		j;
a76 1
float		distance;
a126 3
list [i].x	= SliceX (x);
list [i].y	= SliceY (y);
list [i].z	= slicez;
a146 17
fprintf (outfp, "Distances.\n");
for (i = 0; i < list_size; i++)
{
	for (j = i + 1; j < list_size; j++)
	{
		distance = sqrt ( (list [i].x - list [j].x) * (list [i].x - list [j].x)
				+ (list [i].y - list [j].y) * (list [i].y - list [j].y)
				+ (list [i].z - list [j].z) * (list [i].z - list [j].z) );
		if (distance <= 2.90)
		fprintf (outfp, "(%.2f, %.2f, %.2f) %.2f || (%.2f, %.2f, %.2f) %.2f d = %f\n",
			list [i].x, list [i].y, list [i].z, value_list [i],
			list [j].x, list [j].y, list [j].z, value_list [j],
			distance);
	}
}
fprintf (outfp, "\n\n\n");

d150 1
a150 2
	 * Write the prm and lst file to output if the image is generated
	 * by t88mean.
@
