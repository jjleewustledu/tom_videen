head	1.2;
access;
symbols;
locks
	ty7777:1.2; strict;
comment	@ * @;


1.2
date	95.04.07.14.45.05;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.03.29.20.16.32;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version with debugging messages.
@


1.2
log
@Use real radii.
@
text
@/*$Id: cmass.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $*/
/*$Log: cmass.c,v $
 * Revision 1.1  1995/03/29  20:16:32  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
  File:		cmass.c

  Function:	void cmass (input_image [75][128][128], short num_slices, 
		POINT3D *list, int list_size, float radius, int sign, 
		FLOAT_POINT3D *center_list).

  Arguments:	input_image,	input image array.
		num_slices,	number of slices in image.
		list,		3d list array.
		list_size,	list array size.
		radius,		radius of for the center of mass.
		sign,		sign, 1, positive; -1, negative.
		center_list,	center of mass list.

  Description:	This function find the center of mass for each point in the list.

  History:	Created by Tom Yang on 08/27/92. 
___________________________________________________________________________*/

#include "af3d_par.h"

static char recid [] = "$Header: /data/petsun4/src/af3d_par/RCS/cmass.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $";

PUBLIC void cmass (input_image, num_slices, list, list_size, radius, sign, center_list)
	short		input_image [][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
	short		num_slices;
	POINT3D		*list;
	int		list_size;
	float		radius;
	int		sign;
	FLOAT_POINT3D	*center_list;
{
	int	i;
	int	j;
	int	k;
	int	l;
	float	d2;
	float	r2;
	float	xsum;
	float	ysum;
	float	zsum;
	float	weight;
	float	x;
	float	x0;
	float	y;
	float	y0;
	float	z;
	float	z0;
	int	pixel_value;
	float	ref_value;

	r2	= radius * radius;
	for (l = 0; l < list_size; l++)
	{
		x0	= list [l].x;
		y0	= list [l].y;
		z0	= list [l].z;

		xsum	= 0.0;
		ysum	= 0.0;
		zsum	= 0.0;
		weight	= 0.0;

		for (x = x0 - radius; x <= x0 + radius + ERROR_BOUND; x++)
		{
			for (y = y0 - radius; y <= y0 + radius + ERROR_BOUND; y++)
			{
				for (z = z0 - radius; z <= z0 + radius + ERROR_BOUND; z++)
				{
					i	= ROUND (x);
					j	= ROUND (y);
					k	= ROUND (z);
					d2	= (i - x0) * (i - x0) 
						+ (j - y0) * (j - y0) 
						+ (k - z0) * (k - z0); 
					if (k >= 0 && k < num_slices 
					&& j >= 0 && j < ENCODED_SLICE_HEIGHT 
					&& i >= 0 && i < ENCODED_SLICE_WIDTH
					&& d2 <= r2 + ERROR_BOUND
					&& (pixel_value = sign * input_image [k][j][i]) > 0)
					{
						ref_value	= (float) pixel_value;
						xsum		+= i * ref_value; 	
						ysum		+= j * ref_value; 	
						zsum		+= k * ref_value; 	
						weight		+= ref_value;
					}
				}
			}
		}

		if (weight != 0.0)
		{
			center_list [l].x	= xsum / weight;
			center_list [l].y	= ysum / weight;
			center_list [l].z	= zsum / weight;
		}
		else 
		{
			center_list [l].x	= (float) x0;
			center_list [l].y	= (float) y0;
			center_list [l].z	= (float) z0;
		}
	}
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d11 2
a12 2
		POINT3D *list, int list_size, POINT3D *region_location, 
		int num_location, int sign, FLOAT_POINT3D *center_list).
d14 7
a20 8
  Arguments:	input_image,		input image array.
		num_slices,		number of slices in image.
		list,			3d list array.
		list_size,		list array size.
		region_location,	array for storing region coordinates.
		num_location,		number of points in region.
		sign,			sign, 1, positive; -1, negative.
		center_list,		center of mass list.
d29 1
a29 1
static char recid [] = "$Header$";
d31 1
a31 2
PUBLIC void cmass (input_image, num_slices, list, list_size, region_location, 
			num_location, sign, center_list)
d36 1
a36 2
	POINT3D		*region_location;
	int		num_location;
d41 5
a45 3
	int	x;
	int	y;
	int	z;
d50 6
a55 4
	int	j;
	int	x0;
	int	y0;
	int	z0;
d59 2
a60 1
	for (i = 0; i < list_size; i++)
d62 3
a64 3
		x	= list [i].x;
		y	= list [i].y;
		z	= list [i].z;
d71 1
a71 1
		for (j = 0; j < num_location; j++)
d73 1
a73 8
			x0	= x + region_location [j].x;
			y0	= y + region_location [j].y;
			z0	= z + region_location [j].z;

			if ((x0 >= 0 && x0 < ENCODED_SLICE_WIDTH)
			&& (y0 >= 0 && y0 < ENCODED_SLICE_HEIGHT)
			&& (z0 >= 0 && z0 < num_slices)
			&& ((pixel_value = sign * input_image [z0][y0][x0]) > 0))
d75 21
a95 5
				ref_value	= (float) pixel_value;
				xsum		+= x0 * ref_value; 	
				ysum		+= y0 * ref_value; 	
				zsum		+= z0 * ref_value; 	
				weight		+= ref_value;
d101 3
a103 3
			center_list [i].x	= xsum / weight;
			center_list [i].y	= ysum / weight;
			center_list [i].z	= zsum / weight;
d107 3
a109 3
			center_list [i].x	= (float) x;
			center_list [i].y	= (float) y;
			center_list [i].z	= (float) z;
@
