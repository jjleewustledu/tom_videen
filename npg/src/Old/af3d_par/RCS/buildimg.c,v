head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	95.04.14.15.43.56;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.03.29.20.16.32;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version with debugging messages.
@


1.2
log
@Final release.
@
text
@/*$Id: buildimg.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $*/
/*$Log: buildimg.c,v $
 * Revision 1.1  1995/03/29  20:16:32  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
File:		buildimg.c

Function:	void buildimg (int imgfd, char *image_file, char image_encoded, 
		short image_num_slices, int image_type, short *image3d).

Arguments:	imgfd,			file descriptor for image file;
		image_file,		image file name;
		image_encoded,		encoded flag;
		image_num_slices,	number of slices in image;
		image_type,		image type;
		image3d,		output 3D image array.

Description:	This function reads and builds a 3-D image array.

Author:		Tom Yang, March 1995.

History:	Created by Tom Yang on 03/31/95. 
___________________________________________________________________________*/

#include "af3d_par.h"

static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/buildimg.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $";

PUBLIC void buildimg (imgfd, image_file, image_encoded, image_num_slices, image_type, image3d)
	int	imgfd;
	char	*image_file;
	char	image_encoded;
	short	image_num_slices;
	int	image_type;
	short	image3d [][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
{
	BOOLEAN		err_value;
	int		row_start;
	int		x;
	int		y;
	int		z;
	short		*header;
	short		*pet_slice_image;

	header	= (short *) malloc (HEADER_SIZE);
	if (header == (short *) NULL)
	{
		fprintf (stderr, "Error: Can't allocate header.\n");
		return;
	}

	pet_slice_image	= (short *) calloc (ENCODED_SLICE_DIM,  sizeof (short));
	if (pet_slice_image == (short *) NULL)
	{
		fprintf (stderr, "Error: Can't allocate pet_slice_image.\n");
		return;
	}

	/*
	 * Read in each slice and write into the 3-d image array.
	 */
	for (z = 0; z < image_num_slices; z++)
	{
		/*
		 * The slice number always start at 1, hence the "z + 1"
		 * in the following calling statemnet.
		 */
		getimage (pet_slice_image, header, imgfd, image_file, z + 1, 
			image_encoded, image_num_slices, image_type, &err_value);

		if (err_value)
			return;

		for (y = 0; y < ENCODED_SLICE_HEIGHT; y++)
		{
			row_start	= y * ENCODED_SLICE_WIDTH;
			for (x = 0; x < ENCODED_SLICE_WIDTH; x++)
			{
				image3d [z][y][x]	= pet_slice_image [row_start + x];
			}
		}
	}

	free (header);
	free (pet_slice_image);
}

@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d8 1
a8 1
  File:		buildimg.c
d10 2
a11 2
  Function:	void buildimg (int imgfd, char *image_file, char image_encoded, 
			short image_num_slices, int image_type, short *image3d).
d13 1
a13 1
  Arguments:	imgfd,			file descriptor for image file;
d20 1
a20 1
  Description:	This function reads and builds a 3-D image array.
d22 3
a24 1
  History:	 Created by Tom Yang on 08/18/92. 
d29 1
a29 1
static char rcsid [] = "$Header$";
@
