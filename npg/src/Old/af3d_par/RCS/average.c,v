head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	95.05.08.20.16.10;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	95.04.14.15.41.17;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	95.04.14.15.07.00;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	95.04.12.20.21.50;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	95.04.12.20.02.48;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	95.04.11.19.57.53;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	95.04.07.14.44.48;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.03.29.20.16.32;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version with debugging messages.
@


1.8
log
@Read data as real array.
@
text
@/*$Id: average.c,v 1.7 1995/04/14 15:41:17 ty7777 Exp ty7777 $*/
/*$Log: average.c,v $
 * Revision 1.7  1995/04/14  15:41:17  ty7777
 * Final release.
 *
 * Revision 1.6  1995/04/14  15:07:00  ty7777
 * Added sphere_center.
 *
 * Revision 1.5  1995/04/12  20:21:50  ty7777
 * Use ROUND ().
 *
 * Revision 1.4  1995/04/12  20:02:48  ty7777
 * Working version.
 *
 * Revision 1.3  1995/04/11  19:57:53  ty7777
 * sphere_center = 0 means centerd on pixel.
 *
 * Revision 1.2  1995/04/07  14:44:48  ty7777
 * Use real radii.
 *
 * Revision 1.1  1995/03/29  20:16:32  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
File:		average.c

Function:	void average (float input_image [][][], int width, int height, 
		int num_slices, float radius, BOOLEAN use_table, BOOLEAN sphere_center, 
		POINT3D *region_location, int num_locations, int region_number, FLOAT_POINT3D 
		*center_list, float *value_list, int zorigin)

Arguments:	input_image,		3D input image array.	
		width,			width of slices of the input image.
		height,			height of slices of the input image.
		num_slices,		number of slices of the input image.
		radius,			magnitude radius used to define regions.
		use_table,		use predefined table for defining sphere.
		sphere_center,		0: center at pixel; 1: fractional pixel.
		region_location,	location array.
		num_locations,		number of locations.
		region_number,		number of regions.
		center_list,		array of center coordinates.
		value_list,		array of magnitudes.
		zorigin,		zorigin of the input image.

Description:	This function compute the averages of regions.

Authors:	Tom Yang, Gordon Shulman

History:	Created by Tom Yang and Gordon Shulman on 04/10/95. 
___________________________________________________________________________*/

#include "af3d_par.h"

static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/average.c,v 1.7 1995/04/14 15:41:17 ty7777 Exp ty7777 $";

PUBLIC void average (input_image, width, height, num_slices, radius, use_table, sphere_center,
	region_location, num_locations, region_number, center_list, value_list, zorigin)
	float		input_image [][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
	int		width;
	int		height;
	int		num_slices;
	float		radius;
	BOOLEAN		use_table;
	BOOLEAN		sphere_center;
	POINT3D		*region_location;
	int		num_locations;
	int		region_number;
	FLOAT_POINT3D	*center_list;
	float		*value_list;
	int		zorigin;
{
	int	i;
	float	x;
	float	y;
	float	z;

	for (i = 0; i < region_number; i++)
	{
		/*
		 * The image index starts at 1, while the C inedx starts at 0.
		 */
		x	= XtoSlice (center_list [i].x) - 1;
		y	= YtoSlice (center_list [i].y) - 1;
		z	= zorigin - center_list [i].z / 2.0 - 1;

		if (use_table)
			table_mean (ROUND (x), ROUND (y), ROUND (z), region_location, num_locations, 
			input_image, width, height, num_slices, 1, value_list + i);
		else
		{
			if (sphere_center == 0)
			{
				x	= ROUND (x);
				y	= ROUND (y);
				z	= ROUND (z);
			}
			sphere_mean (x, y, z, radius, input_image, width, height, num_slices, 
			1, value_list + i);
		}
	}
}
@


1.7
log
@Final release.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.6 1995/04/14 15:07:00 ty7777 Exp ty7777 $*/
d3 3
d28 1
a28 1
Function:	void average (short input_image [][][], int width, int height, 
d56 1
a56 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/average.c,v 1.6 1995/04/14 15:07:00 ty7777 Exp ty7777 $";
d60 1
a60 1
	short		input_image [][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
@


1.6
log
@Added sphere_center.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.5 1995/04/12 20:21:50 ty7777 Exp ty7777 $*/
d3 3
d23 1
a23 1
  File:		average.c
d25 4
a28 4
  Function:	void average (short input_image [][][], int width,
		int height, int num_slices, float radius, BOOLEAN use_table, 
		BOOLEAN sphere_center, POINT3D *region_location, int num_locations, 
		int region_number, FLOAT_POINT3D *center_list, float *value_list, int zorigin)
d30 1
a30 1
  Arguments:	input_image,		3D input image array.	
d44 1
a44 1
  Description:	This function compute the averages of regions.
d46 3
a48 1
  History:	 Created by Tom Yang on 09/30/92. 
d53 1
a53 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/average.c,v 1.5 1995/04/12 20:21:50 ty7777 Exp ty7777 $";
@


1.5
log
@Use ROUND ().
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.4 1995/04/12 20:02:48 ty7777 Exp ty7777 $*/
d3 3
d24 2
a25 2
		POINT3D *region_location, int num_locations, int region_number, 
		FLOAT_POINT3D *center_list, float *value_list, int zorigin)
d33 1
d48 1
a48 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/average.c,v 1.4 1995/04/12 20:02:48 ty7777 Exp ty7777 $";
d50 2
a51 2
PUBLIC void average (input_image, width, height, num_slices, radius, use_table, region_location, 
	num_locations, region_number, center_list, value_list, zorigin)
d58 1
d78 1
a78 1
		z	= zorigin - (center_list [i].z - 1) / 2.0;
d84 7
d93 1
@


1.4
log
@Working version.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.3 1995/04/11 19:57:53 ty7777 Exp ty7777 $*/
d3 3
d21 2
a22 3
		POINT3D *region_location, int num_locations, BOOLEAN sphere_center, 
		int region_number, FLOAT_POINT3D *center_list, float *value_list, 
		int zorigin)
d24 5
a28 5
  Arguments:	input_image,	3D input image array.	
		width,		width of slices of the input image.
		height,		height of slices of the input image.
		num_slices,	number of slices of the input image.
		radius,		magnitude radius used to define regions.
d32 4
a35 5
		sphere_center,	move center of sphere to the closest voxel.
		region_number,	number of regions.
		center_list,	array of center coordinates.
		value_list,	array of magnitudes.
		zorigin,	zorigin of the input image.
d44 1
a44 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/average.c,v 1.3 1995/04/11 19:57:53 ty7777 Exp ty7777 $";
d47 1
a47 1
	num_locations, sphere_center, region_number, center_list, value_list, zorigin)
a55 1
	BOOLEAN		sphere_center;
a73 6
		if (sphere_center == 0)
		{
			x	= (int) ROUND (x);
			y	= (int) ROUND (y);
			z	= (int) ROUND (z);
		}
d76 1
a76 1
			table_mean ((int) x, (int) y, (int) z, region_location, num_locations, 
@


1.3
log
@sphere_center = 0 means centerd on pixel.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.2 1995/04/07 14:44:48 ty7777 Exp ty7777 $*/
d3 3
d43 1
a43 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/average.c,v 1.2 1995/04/07 14:44:48 ty7777 Exp ty7777 $";
d81 1
a81 1
		if (use_table && sphere_center == 0)
@


1.2
log
@Use real radii.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $*/
d3 3
d14 2
a15 1
		int height, int num_slices, float radius, BOOLEAN sphere_center, 
d24 3
d40 1
a40 1
static char rcsid [] = "$Header: /data/petsun4/src/af3d_par/RCS/average.c,v 1.1 1995/03/29 20:16:32 ty7777 Exp ty7777 $";
d42 2
a43 2
PUBLIC void average (input_image, width, height, num_slices, radius, sphere_center, 
	region_number, center_list, value_list, zorigin)
d49 3
d71 1
a71 1
		if (sphere_center)
d73 3
a75 3
			x	= ROUND (x);
			y	= ROUND (y);
			z	= ROUND (z);
d78 5
a82 1
		sphere_mean (x, y, z, radius, input_image, width, height, num_slices, 
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d10 4
a13 3
  Function:	void average (short input_image [][][], short num_slices,
		int num_location, POINT3D *region_location, int region_number,
		FLOAT_POINT3D *center_list, float *value_list, int zorigin)
d15 10
a24 8
  Arguments:	input_image,		3D input image array.	
		num_slices,		number of slices of the input image.
		num_locations,		number of locations.
		region_location,	location array.
		region_number,		number of regions.
		center_list,		array of center coordinates.
		value_list,		array of magnitudes.
		zorigin,		zorigin of the input image.
d33 1
a33 1
static char rcsid [] = "$Header$";
d35 12
a46 10
PUBLIC void average (input_image, num_slices, num_locations, region_location, 
			region_number, center_list, value_list, zorigin)
	short			input_image [][ENCODED_SLICE_HEIGHT][ENCODED_SLICE_WIDTH];
	short			num_slices;
	int			num_locations;
	POINT3D			*region_location;
	int			region_number;
	FLOAT_POINT3D		*center_list;
	float			*value_list;
	int			zorigin;
a47 1
	int	actual_num_locations;
d49 3
a51 8
	int	j;
	int	x;
	int	y;
	int	z;
	int	x0;
	int	y0;
	int	z0;
	float	sum;
d56 1
a56 1
		 * The Pett index starts at 1, while the C inedx starts at 0.
d58 4
a61 8
		x0			= ROUND (XtoSlice (center_list [i].x) - 1);
		y0			= ROUND (YtoSlice (center_list [i].y) - 1);
		z0			= z2slice (center_list [i].z, zorigin) - 1;

		sum			= 0.0;
		actual_num_locations	= 0;

		for (j = 0; j < num_locations; j++)
d63 3
a65 11
			x	= x0 + region_location [j].x;
			y	= y0 + region_location [j].y;
			z	= z0 + region_location [j].z;

			if (z >= 0 && z < num_slices 
			&& y >= 0 && y < ENCODED_SLICE_HEIGHT 
			&& x >= 0 && x < ENCODED_SLICE_WIDTH) 
			{
				sum	+= (float) (input_image [z][y][x]); 
				actual_num_locations++;
			}
d68 2
a69 4
		if (actual_num_locations > 0)
			value_list [i]	= sum / ((float) actual_num_locations);
		else
			value_list [i]	= 0.0;
@
