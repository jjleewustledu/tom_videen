head	1.4;
access;
symbols;
locks
	tom:1.4; strict;
comment	@ * @;


1.4
date	93.08.12.22.58.02;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	93.08.06.15.16.49;	author tom;	state Exp;
branches;
next	;


desc
@initial version
@


1.4
log
@equivalent to hd6mean
@
text
@/* $Log */
/*	========================================================================
 *	Module:				image_scale.c
 *	Date:					10-Aug-93
 *	Author:				Tom Videen
 *	Description:	Scale image by smg_divisor and mask pixels using nin
 *	History:
 *		11-Aug-93:	Compute sd image (sd) for all pixels within a mask
 *				(if a mask is specified)
 *	========================================================================
 */

#include <stdio.h>
#include <math.h>
#include <petutil/petutil.h>
#include "atlas.h"

static char rcsid []= "$Id: image_scale.c,v 1.3 1993/08/06 15:16:49 tom Exp tom $";

/*	-----------------------
 *	Function image_scale
 *	-----------------------
 */
void image_scale (a, nin, nz, lstsize, smg_divisor, smg_included, paired_images, compute_sd, sd)
	REAL_SLICE	*a, *sd;
	SHORT_SLICE *nin;
	int		nz;
	int		lstsize;
	char	*smg_divisor;
	char	*smg_included;
	BOOLEAN paired_images, compute_sd;

{
	int		i, j, k;
	float	f, n;

/*
 *	Compute Standard Deviation image from sum-of-squares (sd), sum (a), and n (nin)
 */

	if (compute_sd) {
		for (i = 0; i < nz; ++i) {
			for (j = 0 ; j < DIM; ++j) {
				for (k = 0; k < DIM; ++k) {
					if (nin[i][j][k] == 0)
						sd[i][j][k] = 0;
					else {
						if (paired_images) {
							if (sd[i][j][k] >= 0.)
								sd[i][j][k] =  sqrt (sd[i][j][k] / nin[i][j][k]);
							else
								sd[i][j][k] = 0;
						} else {
							f = sd[i][j][k] - ((a[i][j][k] * a[i][j][k]) / nin[i][j][k]);
							if (f >= 0. )
								sd[i][j][k] =  sqrt (f / nin[i][j][k]);
							else
								sd[i][j][k] = 0;
						}
					}
				}
			}
		}
	}

/*
 *	All pixels; divide by total number of images
 */

	if (strcmp (smg_included, "all") == 0) {
		if (strcmp (smg_divisor, "global") == 0) {
			f = 1. / lstsize;
			for (i = 0; i < nz; ++i) {
				for (j = 0 ; j < DIM; ++j) {
					for (k = 0; k < DIM; ++k) {
						a[i][j][k] *= f;
					}
				}
			}

/*
 *	All pixels; divide by number of images contributing to each pixel
 */

		} else {
			for (i = 0; i < nz; ++i) {
				for (j = 0 ; j < DIM; ++j) {
					for (k = 0; k < DIM; ++k) {
						if (nin[i][j][k] > 0)
							a[i][j][k] /= nin[i][j][k];
					}
				}
			}
		}

/*
 *	Only fully sampled pixels; divide by total number of images
 */

	} else {
		f = 1. / lstsize;
		for (i = 0; i < nz; ++i) {
			for (j = 0 ; j < DIM; ++j) {
				for (k = 0; k < DIM; ++k) {
					if (nin[i][j][k] == lstsize)
						a[i][j][k] *= f;
					else
						a[i][j][k] = 0;
				}
			}
		}
	}
}
@


1.3
log
@reads prm and list files
@
text
@d4 1
a4 1
 *	Date:					06-Aug-93
d6 1
a6 1
 *	Description:	Scale image by pixel_divisor and mask pixels using nin
d8 2
d14 2
d18 1
a18 1
static char rcsid []= "$Id$";
d24 2
a25 2
void image_scale (a, nin, nz, lstsize, pixel_divisor, pixels_included)
	REAL_SLICE	*a;
d29 4
a32 2
	char	pixel_divisor[10];
	char	pixels_included[10];
d35 1
a35 1
	float	f;
d38 29
d70 2
a71 2
	if (strcmp (pixels_included, "all")) {
		if (strcmp (pixel_divisor, "global")) {
d89 2
a90 1
						a[i][j][k] /= nin[i][j][k];
d108 1
a108 1
						a[i][j][k] *= 0;
@
