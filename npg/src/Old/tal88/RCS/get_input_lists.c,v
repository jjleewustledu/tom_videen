head	1.4;
access;
symbols;
locks
	tom:1.4; strict;
comment	@ * @;


1.4
date	93.08.12.22.58.02;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	93.08.06.15.16.49;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	93.08.05.22.22.58;	author tom;	state Exp;
branches;
next	;


desc
@development version
@


1.4
log
@equivalent to hd6mean
@
text
@/* $Log: get_input_lists.c,v $
 * Revision 1.3  1993/08/06  15:16:49  tom
 * reads prm and list files
 *
 * Revision 1.1  1993/08/05  22:22:58  tom
 * revised matrix_mult and eliminated matrix_point_mult
 * */
/*	===============================================================================
 *	Module:				get_input_lists.c
 *	Date:					28-Jul-93
 *	Author:				Tom Videen
 *	Description:	Read an input image list file and an input image parameter file.
 *	History:			Modification of chklist.c
 *		11-Aug-93:	Changed for new checkimg.c (passes extension)
 *	===============================================================================
 */

#include <stdio.h>
#include <string.h>
#include <values.h>
#include <petutil/petutil.h>
#include <petutil/imglist.h>
#include "list.h"

static char rcsid []= "$Id: get_input_lists.c,v 1.3 1993/08/06 15:16:49 tom Exp tom $";

void get_input_lists (prmfile, lstfile, lstsize, image_mode, parameter_data, image_list, scan)

char							*prmfile;
char							*lstfile;
int								lstsize;
int								image_mode;
PARAMETER_DATA		*parameter_data;
IMAGE_LIST_DATA		*image_list;
INPUT_FILE_LIST		*scan;

{
	char			fullname [MAXPATH];
	char			shortname [MAXLINE];
	int				i;
	BOOLEAN		demigrate;

/* 
 * Read parameters into finfo.
 */

	if (readparm (prmfile, parameter_data) == FAIL) {
		printf ("Error: reading %s\n",prmfile);
		exit (FAIL);
	}

/* 
 * Get fullnames of activation, control and .sxr files.
 */

	demigrate	= FALSE;
	for (i = 0; i < lstsize; i++) {
		if (checkimg (*parameter_data, image_list [i], image_mode, ACTIVATION_SCAN, 
				demigrate, shortname, fullname) == FAIL)
			fprintf (stderr, "Activation file %s does not exist\n", shortname);
		else
			strcpy ((scan [i]).activation, fullname);	

		if (image_mode == STDIMAGE_MODE) {
			if (image_list [i].control_num != -MAXINT &&
					checkimg (*parameter_data, image_list [i], image_mode, CONTROL_SCAN, 
					demigrate, shortname, fullname) == FAIL)
				fprintf (stderr, "Control file %s does not exist\n", shortname);
			else
				strcpy ((scan [i]).control, fullname);	
		}

		if (checksxr (*parameter_data, image_list [i], demigrate, shortname, fullname) == FAIL)
			fprintf (stderr, "sxr file %s does not exist.\n", shortname);
		else
			strcpy ((scan [i]).sxr, fullname);	
	}
}
@


1.3
log
@reads prm and list files
@
text
@d2 3
d14 1
d20 1
d25 1
a25 1
static char rcsid []= "$Id$";
d27 1
a27 1
void get_input_lists (prmfile, lstfile, lstsize, parameter_data, image_list, finfo, scan)
d31 2
a32 1
int								*lstsize;
a34 1
struct INFO_TYPE	*finfo;
a39 1
	char			subject_id [MAXNAME];
a52 6
 * Fill the finfo structure.
 */

	get_finfo (parameter_data, finfo);

/* 
d57 3
a59 6
	for (i = 0; i < *lstsize; i++) {
		strcpy (subject_id, (*parameter_data).species);
		strcat (subject_id, image_list [i].subject_id);

		if (checkimg ((*parameter_data).datapath, finfo, subject_id, (*parameter_data).tracer, 
			image_list [i].activation_num, shortname, demigrate, fullname) == FAIL)
d64 8
a71 6
		if (image_list [i].control_num != FAIL &&
		checkimg ((*parameter_data).datapath, finfo, subject_id, (*parameter_data).tracer, 
		image_list [i].control_num, shortname, demigrate, fullname) == FAIL)
			fprintf (stderr, "Control file %s does not exist\n", shortname);
		else
			strcpy ((scan [i]).control, fullname);	
d73 1
a73 2
		if (checksxr ((*parameter_data).datapath, finfo, subject_id, image_list [i].sxr, 
			shortname, demigrate, fullname) == FAIL)
@


1.1
log
@revised matrix_mult and eliminated matrix_point_mult
@
text
@d1 4
a4 1
/* $Log$ */
d19 2
@
