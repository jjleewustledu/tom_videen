head	1.4;
access;
symbols;
locks
	tom:1.4; strict;
comment	@ * @;


1.4
date	93.08.12.22.58.02;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	93.08.06.15.16.49;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	93.06.24.18.57.01;	author tom;	state Exp;
branches;
next	;


desc
@Initial test version of tal88 reproduces the output of the current hd6mean
everywhere within the 100x100 inner array of pixels.
Tested by TOV 24-Jun-93 using p2000ho1 (PETT VI image)
@


1.4
log
@equivalent to hd6mean
@
text
@/* $Log: process_pet.c,v $
 * Revision 1.3  1993/08/06  15:16:49  tom
 * reads prm and list files
 *
 * Revision 1.1  1993/06/24  18:57:01  tom
 * Initial revision
 *
 */
/*	========================================================================
 *	Module:				process_pet.c
 *	Date:					28-Apr-93
 *	Author:				Tom Videen
 *	Description:	process an image for CBF, CBV, or counts and scale the result
 *	History:
 *	========================================================================
 */

#include <stdio.h>
#include <string.h>
#include <petutil/petutil.h>
#include "atlas.h"

static char rcsid []= "$Id: process_pet.c,v 1.3 1993/08/06 15:16:49 tom Exp tom $"; 

/*	-----------------------
 *	Function process_pet
 *	-----------------------
 */
int process_pet (pet, nx, ny, nz, scaler, process, filename)

	REAL_SLICE	*pet;			/* PET input image */
	short 	nx;						/* x-dimension of PET-array */
	short 	ny;						/* y-dimension of PET-array */
	short		nz;						/* z-dimension of PET-array/* no. of slices */
	float		scaler;				/* normalization factor */
	char		process[10];	/* type of processing */
	char		*filename;		/* image file name */

{
	short		i, j, k;
	float		x;						/* temp for pet */
	float		sx;						/* combined scaler */
	HEADER_DATA	hdr;			/* hdr structure */

/*
 *	Counts
 */

	if (strcmp (process, "none") == 0 || strcmp (process, "" ) == 0) {
		for (k = 0; k < nz; ++k) {
			for (j = 0; j < ny; ++j) {
				for (i = 0; i < nx; ++i) {
					pet[k][j][i] = scaler * pet[k][j][i];
				}
			}
		}
		return 0;
	}

/*
 *	Read HDR file

	if (gethdr (filename) > 0)
		return 1;

 *	Cerebral Blood Volume
 */

	if (strcmp (process, "cbv")  == 0 && hdr.ntype == 3) {
		sx = scaler * 100 * hdr.bvfactor1;
		for (k = 0; k < nz; ++k) {
			for (j = 0; j < ny; ++j) {
				for (i = 0; i < nx; ++i) {
					pet[k][j][i] = sx * pet[k][j][i];
				}
			}
		}
		return 0;
	}

/*
 *	Cerebral Blood Flow
 */

	if (strcmp (process, "cbf") == 0 && (hdr.ntype == 2 || hdr.ntype == 4)) {
		sx = scaler * 50;
		for (k = 0; k < nz; ++k) {
			for (j = 0; j < ny; ++j) {
				for (i = 0; i < nx; ++i) {
					x = pet[k][j][i];
					pet[k][j][i] = sx * x * ((hdr.aflow1 * x) + hdr.bflow1);
				}
			}
		}
		return 0;
	}

/*
 *	Not processed
 */

	return 1;
}
@


1.3
log
@reads prm and list files
@
text
@d2 3
d23 1
a23 1
static char rcsid []= "$Id: process_pet.c,v 1.1 1993/06/24 18:57:01 tom Exp tom $"; 
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$
d16 1
d20 1
a20 1
static char rcsid []= "$Id$"; 
d27 1
d46 1
a46 1
	if (process == "none" || process == NULL) {
d66 1
a66 1
	if (process == "cbv" && hdr.ntype == 3) {
d82 1
a82 1
	if (process == "cbf" && (hdr.ntype == 2 || hdr.ntype == 4)) {
@
