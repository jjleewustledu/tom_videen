head	1.4;
access;
symbols;
locks
	tom:1.4; strict;
comment	@ * @;


1.4
date	93.08.12.22.58.02;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	93.08.06.15.16.49;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	93.08.05.22.22.58;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	93.06.24.18.57.01;	author tom;	state Exp;
branches;
next	;


desc
@Initial test version of tal88 reproduces the output of the current hd6mean
everywhere within the 100x100 inner array of pixels.
Tested by TOV 24-Jun-93 using p2000ho1 (PETT VI image)
@


1.4
log
@equivalent to hd6mean
@
text
@/* $Log: matrix_mult.c,v $
 * Revision 1.3  1993/08/06  15:16:49  tom
 * reads prm and list files
 *
 * Revision 1.2  1993/08/05  22:22:58  tom
 * revised matrix_mult and eliminated matrix_point_mult
 *
 * Revision 1.1  1993/06/24  18:57:01  tom
 * Initial revision
 *
 */
/*	========================================================================
 *	Module:				matrix_mult.c
 *	Date:					21-Jun-93
 *	Author:				Tom Videen
 *	Description:	Multiply matrices:  c[n][m] = a[n][p] * b[p][m]
 *								when c and b are points, m = 1
 *	========================================================================
 */

#include <stdio.h>

static char rcsid []= "$Id: matrix_mult.c,v 1.3 1993/08/06 15:16:49 tom Exp tom $";

/*	-----------------------
 *	Function matrix_mult
 *	-----------------------
 */
void matrix_mult (a, b, c, n, m, p)
	float	*a, *b, *c;
	int		n, m, p;
{
	int		i, j, k;

	for (i = 0; i < n; ++i) {
		for (j = 0 ; j < m; ++j) {
			*(c + m*i + j) =	 0.0;
			for (k = 0; k < p; ++k)
				*(c + m*i + j) += *(a + p*i + k) * *(b + m*k + j);
		}
	}
	return;
}
@


1.3
log
@reads prm and list files
@
text
@d2 3
d23 1
a23 1
static char rcsid []= "$Id: matrix_mult.c,v 1.2 1993/08/05 22:22:58 tom Exp tom $";
@


1.2
log
@revised matrix_mult and eliminated matrix_point_mult
@
text
@d2 3
d20 1
a20 1
static char rcsid []= "$Id: matrix_mult.c,v 1.1 1993/06/24 18:57:01 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$
d10 2
a11 3
 *	Description:	Multiply matrices:  a[n][p] * b[p][m] = c[n][m]
 *								All matrices defined as MATRIX with dimensions MATDIM x MATDIM
 *								(n = m = p = MATDIM)
a15 1
#include "atlas.h"			/* MATRIX, MATDIM */
d17 1
a17 1
static char rcsid []= "$Id$";
d23 3
a25 2
int matrix_mult (a, b, c)
	MATRIX	a, b, c;
d29 5
a33 5
	for (i = 0; i < MATDIM; ++i) {
		for (j = 0 ; j < MATDIM; ++j) {
			c[i][j] = 0.0;
			for (k = 0; k < MATDIM; ++k)
				c[i][j] += a[i][k] * b[k][j];
d36 1
a36 1
	return (0);
@
