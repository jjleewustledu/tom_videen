head	1.12;
access;
symbols;
locks
	tom:1.12; strict;
comment	@ * @;


1.12
date	95.11.30.19.14.30;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	95.11.27.20.41.24;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	95.11.03.21.32.25;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	95.06.30.16.05.50;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	95.06.27.19.10.47;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	95.06.27.16.42.32;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	95.02.13.22.02.24;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	95.02.08.15.27.41;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	94.11.02.15.32.36;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	94.09.20.15.59.13;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.10.06.14.51.05;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.09.14.16.16.21;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in.
@


1.12
log
@Added processing for 961 images.
@
text
@/*$Id: SetParameters.c,v 1.11 1995/11/27 20:41:24 ty7777 Exp ty7777 $*/
/*$Log: SetParameters.c,v $
 * Revision 1.11  1995/11/27  20:41:24  ty7777
 * Updated for 953B new offset.
 *
 * Revision 1.10  1995/11/03  21:32:25  ty7777
 * Updated for ECAT 7.0.
 *
 * Revision 1.9  1995/06/30  16:05:50  ty7777
 * Added processing for Emission 1000.
 *
 * Revision 1.8  1995/06/27  19:10:47  ty7777
 * Updated to take any file names for HR data.
 *
 * Revision 1.7  1995/06/27  16:42:32  ty7777
 * Added processing for HR961 data.
 *
 * Revision 1.6  1995/02/13  22:02:24  ty7777
 * Added sxr_root to the argument list.
 *
 * Revision 1.5  1995/02/08  15:27:41  ty7777
 * Fixed the logic bug for checking scans acquired after oct., 95.
 *
 * Revision 1.4  1994/11/02  15:32:36  ty7777
 * Added new argument acquired_after_oct94.
 *
 * Revision 1.3  1994/09/20  15:59:13  ty7777
 * Added peakslice.
 *
 * Revision 1.2  1993/10/06  14:51:05  ty7777
 * Change XRAY_TYPE to XRAY_TYPE_NEUROLOGY.
 *
 * Revision 1.1  1993/09/14  16:16:21  ty7777
 * Initial revision
 *
 * Revision 1.1  1993/09/10  20:35:08  ty7777
 * Initial revision
 **/

#ifndef lint
static char sccsid [] = "@@(#)SetParameters.c	11/03/92  Copyright Neural Pet Group, Washington University 1992";
#endif

static char rcsid [] = "$Header: /home/petsun4/ty7777/src/xray/RCS/SetParameters.c,v 1.11 1995/11/27 20:41:24 ty7777 Exp ty7777 $";

/*___________________________________________________________________________
  File:		SetParameters.c

  Function:	void SetParameters ()

  Arguments:	

  Description:	This function assigns the parameters type, pix, slcsize, zatldim, apaldim.

  Called by:	xray.c and sxrweld.c 	

  Calling:	

  History:	Created by Tom Yang on 11/03/92. 
___________________________________________________________________________*/

#include <petutil/petutil.h>
#include <petutil/matrix_64.h>
#include "xray.h"
#define	CUTOFF_YEAR	1994
#define	CUTOFF_MONTH	11

PUBLIC int SetParameters (image_name, sxr_root, scanner_type, encoded, num_slices, 
	sxr_output, petimagetype, trim, acquired_after_oct94, hrscanner, assigned_threshold)
	char		*image_name;
	char		*sxr_root;
	int		scanner_type;
	BOOLEAN		encoded;
	short int	*num_slices;
	SXR_OUTPUT	*sxr_output;
	char		*petimagetype;
	char		*trim;
	BOOLEAN		*acquired_after_oct94;
	BOOLEAN		*hrscanner;
	BOOLEAN		assigned_threshold;
{
	BOOLEAN		err_value;
	Main_header_64	main_header64;
	MatrixFile	*fptr;
	PETT6HDR	*pett6_header;
	char		*string_patient_id;
	float		pixel_size;
	float		plane_separation;
	int		diff;  /* number of differences between spec and actual */
	int		fd;
	int		file_type;
	int		patient_id;
	short		height;
	short		*header;
	short		*slice_data;
	short		width;
	struct Matval	matval;

	sxr_output->type	= XRAY_TYPE_XRAY32;

	fd	= open (image_name, O_RDONLY, 0);
	if (fd == -1)
	{
		fprintf (stderr, "Can't open %s\n", image_name); 
		return FAIL;
	}

	if (scanner_type != ECAT953_SCANNER && scanner_type != ECAT961_SCANNER)
	{
		/* 
	 	 * Allocate header. 
	 	 */
		header = (short *) calloc (HEADER_SIZE / sizeof (short), sizeof (short));
		if (header == (short *) NULL)
		{
			pkg_message (PKG_ERROR, "xray", "SetParameters", "calloc",
					"Error: Can't allocate header.\n");
			return FAIL;
		}

		slice_data	= (short *) calloc (ENCODED_SLICE_DIM, sizeof (short));
		if (slice_data == (short *) NULL)
		{
			pkg_message (PKG_ERROR, "xray", "SetPetParameters", "calloc",
					"Error: Can't allocate slice_data.\n");
			return FAIL;
		}

		getimage (slice_data, header, fd, image_name, 1, 
				encoded, *num_slices, scanner_type, &err_value);
		pett6_header	= (PETT6HDR *) header;
		file_type	= pett6_header->file_type;
		if (file_type == TRANSMISSION_PET1010)
		{
			*petimagetype	= TRANSMISSION_SCAN;
			if (!assigned_threshold)
				sxr_output->threshold	= DEFAULT_PETT6_TRANS_THRESH;
		}
		else if (file_type == EMISSION_PET1000 || file_type == EMISSION_PET1020 
		|| file_type == EMISSION_PET2000 || file_type == EMISSION_PET2010)
		{
			*petimagetype	= EMISSION_SCAN;
			*trim		= 0;
		}
		else
		{
			fprintf (stderr, "Unknown PETT VI scan type %d.\n", file_type);
			return FAIL;
		}

		sxr_output->scan_position	= 0.0;
		sxr_output->pixel_size		= PETT6_PIXEL_SIZE;
		sxr_output->slice_separation	= PETT6_SEPARATION;
		sxr_output->reference_slice	= PETT6_REFERENCE;
		sxr_output->reference_offset	= PETT6_OFFSET;

		free (header);
		free (slice_data);
	}
	else
	{
		/*
	 	 * Assign default values for matval.
	 	 */
		matval.frame	= 1;
		matval.plane	= 1;
		matval.gate	= 1;
		matval.data	= 0;
		matval.bed	= 0;

		fptr	= OpenEcat (image_name, num_slices, &width, &height, 
				&pixel_size, &plane_separation, matval);
		if (fptr == (MatrixFile *) NULL)
		{
			fprintf (stderr, "SetParameters: OpenEcat error.\n");
			return (FAIL);
		}

		mh64_convert (&main_header64, fptr->mhptr);

		if (fptr->mhptr->system_type == SYSTEM_TYPE_961)
		{
			*hrscanner			= TRUE;
			sxr_output->scan_position	= ECAT961_OFFSET;
		}
		else
		{
			*hrscanner	= FALSE;

			string_patient_id	= strpbrk (sxr_root, "0123456789");
			if (string_patient_id == NULL)
				return FAIL;
			patient_id		= atoi (string_patient_id);

			if (patient_id >= FIRST_SCAN_AFTER_OCT95)
			{
				*acquired_after_oct94		= TRUE;
				sxr_output->scan_position	= ECAT953_OFFSET_AFTER_OCT95;
			}
			else if (patient_id >= FIRST_SCAN_AFTER_OCT94)
			{
				*acquired_after_oct94		= TRUE;
				sxr_output->scan_position	= ECAT_OFFSET_AFTER_OCT94;
			}
			else if (main_header64.scan_start_year > CUTOFF_YEAR 
			|| (main_header64.scan_start_year == CUTOFF_YEAR 
			&& main_header64.scan_start_month >= CUTOFF_MONTH))
			{
				fprintf (stderr, 
				"Error: your scan date and patient id do not match in image.\n"); 
				return FAIL;
			}
			else
			{
				*acquired_after_oct94		= FALSE;
				sxr_output->scan_position	= ECAT_OFFSET;
			}
		}

		if (plane_separation == 0.0)
			plane_separation	= DEFAULT_ECAT_SEP;

		if (main_header64.acquisition_type == TRANSMISSION_ECAT)
		{
			*petimagetype	= TRANSMISSION_SCAN;
			if (!assigned_threshold)
				sxr_output->threshold	= DEFAULT_ECAT_TRANS_THRESH;
		}
		else if (main_header64.acquisition_type > TRANSMISSION_ECAT)
		{
			*petimagetype	= EMISSION_SCAN;
			if (!assigned_threshold)
				sxr_output->threshold	= DEFAULT_ECAT_EMISSION_THRESH;
			*trim		= 0;
		}
		else
		{
			fprintf (stderr, "Unknown ECAT scan type %d.\n", scanner_type);
			return FAIL;
		}

		matrix_close (fptr);

		sxr_output->pixel_size		= pixel_size;
		sxr_output->slice_separation	= plane_separation;
		sxr_output->reference_slice	= ECAT_REFERENCE;
		sxr_output->reference_offset	= 0.0;

	}
	close (fd);

	sxr_output->zatlas_dimension	= ZATLAS_DIMENSION;
	sxr_output->apatlas_dimension	= APATLAS_DIMENSION;

	return SUCCEED;
}
@


1.11
log
@Updated for 953B new offset.
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.10 1995/11/03 21:32:25 ty7777 Exp ty7777 $*/
d3 3
d44 1
a44 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/xray/RCS/SetParameters.c,v 1.10 1995/11/03 21:32:25 ty7777 Exp ty7777 $";
d108 1
a108 1
	if (scanner_type != ECAT_SCANNER)
@


1.10
log
@Updated for ECAT 7.0.
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.9 1995/06/30 16:05:50 ty7777 Exp ty7777 $*/
d3 3
d41 1
a41 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/xray/RCS/SetParameters.c,v 1.9 1995/06/30 16:05:50 ty7777 Exp ty7777 $";
d192 6
a197 1
			if (patient_id >= FIRST_SCAN_AFTER_OCT94)
@


1.9
log
@Added processing for Emission 1000.
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.8 1995/06/27 19:10:47 ty7777 Exp ty7777 $*/
d3 3
d38 1
a38 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/xray/RCS/SetParameters.c,v 1.8 1995/06/27 19:10:47 ty7777 Exp ty7777 $";
d57 1
a57 1
#include <petutil/matrix.h>
a60 1
#define	SCANNER_961	961
d77 1
a78 1
	Mlist		*mlist;
d173 3
a175 1
		if (fptr->mhptr->system_type == SCANNER_961)
d194 3
a196 3
			else if (fptr->mhptr->scan_start_year > CUTOFF_YEAR 
			|| (fptr->mhptr->scan_start_year == CUTOFF_YEAR 
			&& fptr->mhptr->scan_start_month >= CUTOFF_MONTH))
d212 1
a212 6
		/*
	 	 * The number of mats in a list always gives the correct number of
	 	 * slices.
	 	 */
		mlist	= make_list (image_name, (char *) NULL, "*;*;*;*", &diff);
		if (!mlist) 
a213 8
			fprintf (stderr, "make_list error.\n");
			matrix_close (fptr);
			return (FAIL);
		}
		*num_slices	= mlist->nmats;

		if (fptr->mhptr->acquisition_type == TRANSMISSION_ECAT)
		{
d218 1
a218 1
		else if (fptr->mhptr->acquisition_type > TRANSMISSION_ECAT)
a230 1
		free_Mlist (mlist);
@


1.8
log
@Updated to take any file names for HR data.
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.7 1995/06/27 16:42:32 ty7777 Exp ty7777 $*/
d3 3
d35 1
a35 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/xray/RCS/SetParameters.c,v 1.7 1995/06/27 16:42:32 ty7777 Exp ty7777 $";
d131 2
a132 2
		else if (file_type == EMISSION_PET1020 || file_type == EMISSION_PET2000
			|| file_type == EMISSION_PET2010)
@


1.7
log
@Added processing for HR961 data.
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.6 1995/02/13 22:02:24 ty7777 Exp ty7777 $*/
d3 3
d32 1
a32 1
static char rcsid [] = "$Header: /export/home/petsun4/ty7777/src/xray/RCS/SetParameters.c,v 1.6 1995/02/13 22:02:24 ty7777 Exp ty7777 $";
a167 24
		string_patient_id	= strpbrk (sxr_root, "0123456789");
		if (string_patient_id == NULL)
			return FAIL;
		patient_id		= atoi (string_patient_id);

		if (patient_id >= FIRST_SCAN_AFTER_OCT94)
		{
			*acquired_after_oct94		= TRUE;
			sxr_output->scan_position	= ECAT_OFFSET_AFTER_OCT94;
		}
		else if (fptr->mhptr->scan_start_year > CUTOFF_YEAR 
		|| (fptr->mhptr->scan_start_year == CUTOFF_YEAR 
		&& fptr->mhptr->scan_start_month >= CUTOFF_MONTH))
		{
			fprintf (stderr, 
				"Error: your scan date and patient id do not match in image.\n"); 
			return FAIL;
		}
		else
		{
			*acquired_after_oct94		= FALSE;
			sxr_output->scan_position	= ECAT_OFFSET;
		}

d174 1
d176 25
@


1.6
log
@Added sxr_root to the argument list.
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.5 1995/02/08 15:27:41 ty7777 Exp ty7777 $*/
d3 3
d29 1
a29 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/xray/RCS/SetParameters.c,v 1.5 1995/02/08 15:27:41 ty7777 Exp ty7777 $";
d52 1
d55 1
a55 1
	sxr_output, petimagetype, trim, acquired_after_oct94, assigned_threshold)
d65 1
d188 8
@


1.5
log
@Fixed the logic bug for checking scans acquired after oct., 95.
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.4 1994/11/02 15:32:36 ty7777 Exp ty7777 $*/
d3 3
d26 1
a26 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/xray/RCS/SetParameters.c,v 1.4 1994/11/02 15:32:36 ty7777 Exp ty7777 $";
d50 2
a51 2
PUBLIC int SetParameters (image_name, scanner_type, encoded, num_slices, sxr_output,
	petimagetype, trim, acquired_after_oct94, assigned_threshold)
d53 1
d63 1
a65 2
	struct Matval	matval;
	BOOLEAN		err_value;
d67 1
d73 1
a74 1
	short		width;
d77 2
d160 11
a170 1
		if (fptr->mhptr->scan_start_year > CUTOFF_YEAR 
d174 3
a176 2
			*acquired_after_oct94		= TRUE;
			sxr_output->scan_position	= ECAT_OFFSET_AFTER_OCT94;
@


1.4
log
@Added new argument acquired_after_oct94.
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.3 1994/09/20 15:59:13 ty7777 Exp ty7777 $*/
d3 3
d23 1
a23 1
static char rcsid [] = "$Header$";
d154 3
a156 2
		if (fptr->mhptr->scan_start_year >= CUTOFF_YEAR 
		&& fptr->mhptr->scan_start_month >= CUTOFF_MONTH)
@


1.3
log
@Added peakslice.
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.2 1993/10/06 14:51:05 ty7777 Exp ty7777 $*/
d3 3
d20 1
a20 1
static char rcsid [] = "$Id: SetParameters.c,v 1.2 1993/10/06 14:51:05 ty7777 Exp ty7777 $";
d40 3
d45 1
a45 1
			petimagetype, trim, assigned_threshold)
d53 1
d151 12
a200 1
		sxr_output->scan_position	= ECAT_OFFSET;
@


1.2
log
@Change XRAY_TYPE to XRAY_TYPE_NEUROLOGY.
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.1 1993/09/14 16:16:21 ty7777 Exp ty7777 $*/
d3 3
d17 1
a17 1
static char rcsid [] = "$Id: SetParameters.c,v 1.1 1993/09/14 16:16:21 ty7777 Exp ty7777 $";
d64 1
a64 1
	sxr_output->type	= XRAY_TYPE_NEUROLOGY;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*$Id: SetParameters.c,v 1.1 1993/09/10 20:35:08 ty7777 Exp ty7777 $*/
d3 3
d14 1
a14 1
static char rcsid [] = "$Id: SetParameters.c,v 1.1 1993/09/10 20:35:08 ty7777 Exp ty7777 $";
d61 1
a61 1
	sxr_output->type	= XRAY_TYPE;
@
