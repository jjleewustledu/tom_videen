head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	93.07.27.15.27.47;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	93.04.20.18.46.57;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	93.03.02.18.40.52;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	93.01.27.22.06.40;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	93.01.27.20.42.26;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.01.26.20.57.18;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.01.26.20.56.10;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.01.22.21.33.25;	author ty7777;	state Exp;
branches;
next	;


desc
@petparm.c initial checking in.
@


1.8
log
@Use frame counts as the pixel value for ECAT images.
@
text
@/*$Id: petparm.c,v 1.7 1993/04/20 18:46:57 ty7777 Exp ty7777 $*/
/*$Log: petparm.c,v $
 * Revision 1.7  1993/04/20  18:46:57  ty7777
 * Before writing getsxr.
 *
 * Revision 1.6  1993/03/02  18:40:52  ty7777
 * Before taking magnification factor into sonsideration for Fran.
 *
 * Revision 1.5  1993/01/27  22:06:40  ty7777
 * After modifying petparm.c
 *
 * Revision 1.4  1993/01/27  20:42:26  ty7777
 * After adding PET image width and skull X ray width.
 *
 * Revision 1.3  1993/01/26  20:57:18  ty7777
 * petparm.c initial checking in.
 **/

#ifndef lint
static char sccsid [] = "@@(#)petparm.c	10/29/92  Copyright Neural Pet Group, Washington University 1992";
#endif

static char rcsid [] = "$Id: petparm.c,v 1.7 1993/04/20 18:46:57 ty7777 Exp ty7777 $";

/*___________________________________________________________________________
  File:		petparm.c

  Function:	void GetPetParameters ()

  Arguments:	

  Description:	This function obtains the parameters that are pertinent to
		the PET image.

  Called by:	

  Calling:	FindScanPeak () in this file.
		Template () in this file.

  History:	Created by Tom Yang on 10/29/92. 
___________________________________________________________________________*/

#include <math.h>
#include <values.h>
#include "xray.h"
#include <petutil/matrix.h>

PRIVATE int FindScanPeak ();
PRIVATE int PetSliceCmp ();
PRIVATE void Thresh ();
PRIVATE int Template ();
PRIVATE void Trim ();

PUBLIC int GetPetParameters (petimage_name, petimage_type, threshold, peaktype, trim, 
				num_slices, pettnum, encoded, sxr_output)
	char		*petimage_name;
	char		petimage_type;		
	char		threshold;		
	char		peaktype;		
	char		trim;		
	short		num_slices;
	int		pettnum;	
	BOOLEAN		encoded;
	SXR_OUTPUT	*sxr_output;
{
	MatrixFile	*fptr;
	Mlist		*mlist;
	PET_SLICE_DATA	*slice;
	POINT2D		bottom;
	POINT2D		left;
	POINT2D		right;
	POINT2D		top;
	float		maxpetdim;
	float		pixel_size;
	float		plane_separation;
	int		diff;  /* number of differences between spec and actual */
	int		fd;
	int		i;
	int		index;
	int		rows;
	int		x;
	int		y;
	short		height;
	short		peakvalue;
	short		*template;
	short		temp_num_slices;
	short		width;
	struct Matval	matval;

	fd	= open (petimage_name, O_RDONLY, 0);
	if (fd == -1)
		fprintf (stderr, "Can't open %s\n", petimage_name); 

	if (pettnum == ECAT_SCANNER)
	{
		matval.frame	= 1;
		matval.plane	= 1;
		matval.gate	= 1;
		matval.data	= 0;
		matval.bed	= 0;

		fptr	= OpenEcat (petimage_name, &temp_num_slices, &width, &height, 
				&pixel_size, &plane_separation, matval);
		if (fptr == (MatrixFile *) NULL)
		{
			close (fd);
			return FAIL;
		}

		mlist	= make_list (petimage_name, (char *) NULL, list, &diff);
		if (!mlist) 
		{
			fprintf (stderr, "make_list error.\n");
			matrix_close (fptr);
			close (fd);
			return FAIL;
		}
	}

	FindScanPeak (petimage_name, fd, fptr, mlist, peaktype, num_slices, pettnum, encoded, &peakvalue);

	/* 
	 * Clear memory corresponding to list.
	 */
	llhead (petlist);			/* step through the list */
	while (llsize (petlist) > 0)
	{
		/* 
		 * Get a slice. 
		 */
		slice = (PET_SLICE_DATA *) llretrieve (petlist);

		free (slice->input);

		free (slice);
		lldelete (petlist);
	}

	/* 
	 * Set comparison function for llinsert. 
	 */
	llcmp	= PetSliceCmp;

	/* 
	 * Build the pet list. 
	 */
	maxpetdim	= 0.0;
	for (i = 0; i < num_slices; i++)
	{
		template	= (short *) calloc (ENCODED_SLICE_DIM, sizeof (short));
		if (template == (short *) NULL)
		{
			pkg_message (PKG_ERROR, "xray", "GetPetParameters", "calloc",
						"Error: Can't allocate template.\n");
		}

		Template (template, petimage_name, fd, fptr, mlist, threshold, trim, 
			i + 1, &peakvalue, peaktype, num_slices, pettnum, encoded);

		/*
		 * Compute pet related parameters.
		 */
		left.x		= ENCODED_SLICE_WIDTH - 1;
		left.y		= 0;
		right.x		= 0;
		right.y		= 0;
		top.x		= 0;
		top.y		= ENCODED_SLICE_HEIGHT - 1;
		bottom.x	= 0;
		bottom.y	= 0;

		for (y = 0; y < ENCODED_SLICE_HEIGHT; y++) 
		{
			rows	= y * ENCODED_SLICE_WIDTH;
			for (x = 0; x < ENCODED_SLICE_WIDTH; x++) 
			{
				if (template [rows + x] == 1)
				{
					if (x < left.x)
					{
						left.x	= x;
						left.y	= y;
					}

					if (x > right.x)
					{
						right.x	= x;
						right.y	= y;
					}

					if (y < top.y)
					{
						top.x	= x;
						top.y	= y;
					}

					if (y > bottom.y)
					{
						bottom.x	= x;
						bottom.y	= y;
					}
				}
			}
		}

		if (left.x > right.x || top.y > bottom.y)
		{
			if (left.x > right.x)
			{
				sxr_output->rlpetdim [i]	= 0.0;
				sxr_output->rlcenter [i]	= (ENCODED_SLICE_WIDTH + 1) / 2.0;
			}
			else
			{
				sxr_output->rlpetdim [i]	= (float) (right.x - left.x);
				sxr_output->rlcenter [i]	= (left.x + 1) + (right.x - left.x) / 2.0;
			}

			if (top.y > bottom.y)
				sxr_output->vertical_petdim [i]	= 0.0;
			else
				sxr_output->vertical_petdim [i]	= (float) (bottom.y - top.y);

			fprintf (stderr, "Slice %d is indeterminate\n", i + 1);
		}
		else
		{
			sxr_output->rlpetdim [i]	= (float) (right.x - left.x);
			sxr_output->rlcenter [i]	= (left.x + 1) + (right.x - left.x) / 2.0;
			sxr_output->vertical_petdim [i]	= (float) (bottom.y - top.y);
		}


		if (sxr_output->rlpetdim [i] > maxpetdim)
		{
			maxpetdim	= sxr_output->rlpetdim [i];
		}

		/* 
		 * Allocate memory for a slice. 
		 */
		slice	= (PET_SLICE_DATA *) pkg_malloc (sizeof (PET_SLICE_DATA), 
						"GetPetParameters", "slice");

		slice->slice_index	= i + 1;
		slice->xstart		= left.x;
		slice->ystart		= top.y; 
		slice->width		= right.x - left.x + 1; 
		slice->height		= bottom.y - top.y + 1; 
		slice->bottom.x		= bottom.x;
		slice->bottom.y		= bottom.y;
		slice->left.x		= left.x;
		slice->left.y		= left.y;
		slice->right.x		= right.x;
		slice->right.y		= right.y;
		slice->top.x		= top.x;
		slice->top.y		= top.y;

		slice->input	= (short *) pkg_malloc (slice->width 
						* slice->height * sizeof (short), 
						"GetPetParameters", "slice->input");

		index	= 0;
		for (y = top.y; y <= bottom.y; y++)
		{
			rows	= y * ENCODED_SLICE_WIDTH;
			for (x = left.x; x <= right.x; x++)
			{
				slice->input [index++]	= template [rows + x];
			}
		}
		free (template);

		llinsert (petlist, slice);
	}

	if (pettnum == ECAT_SCANNER)
	{
		free_Mlist (mlist);
		matrix_close (fptr);
	}

	close (fd);

	llhead (petlist);
	for (i = 1; i < sxr_output->reference_slice; i++)
	{
		llnext (petlist);
	}
	slice = llretrieve (petlist);
	sxr_output->apcenter		= (slice->bottom.y + 1)
					+ (slice->top.y - slice->bottom.y) / 2.0;
	sxr_output->ear_separation	= maxpetdim * sxr_output->pixel_size + EARSEP_OFFSET;
	sxr_output->number_slices	= num_slices;

	return SUCCEED;
}


/*__________________________________________________________________________	
	Function:
		PetSliceCmp	
	Arguments:
		s1: pet slice structure.
		s2: pet slice structure.
	Description:
		Function for llcmp assignment which compares two pet slices
		by their slice number. Returns:

			-1: is slice number of s1 < slice number of s2
			 0: is slice number of s1 = slice number of s2
			 1: is slice number of s1 > slice number of s2
__________________________________________________________________________*/

PRIVATE int PetSliceCmp (s1, s2)
PET_SLICE_DATA	*s1;
PET_SLICE_DATA	*s2;
{
	if (s1->slice_index < s2->slice_index)
		return (-1);
	if (s1->slice_index > s2->slice_index)
		return (1);
	return (0);
}

/*___________________________________________________________________________
  Function:	void FindScanPeak ()

  Arguments:	

  Return Value:

  Description:	This function finds the peak of a scan if necessary.

  Calling:	Library functions getimage () from libpetutil.a.

  Called by:	GetPetParameters () in this file.	

  History:	Created by Tom Yang on 10/29/92. 
___________________________________________________________________________*/
PRIVATE int FindScanPeak (petimage_name, imgfd, fptr, mlist, peaktype, num_slices, 
							pettnum, encoded, peakvalue)
	char		*petimage_name;
	int		imgfd;
	MatrixFile	*fptr;
	Mlist		*mlist;
	char		peaktype;		
	short		num_slices;
	int		pettnum;	
	BOOLEAN		encoded;
	short		*peakvalue;
{
	MatrixData	*matrix_read ();

	BOOLEAN		err_value;
	Image_subheader	*image_subheader;
	MatrixData	*matrixx_data;
	float		ecat_calibration_fctr;
	float		scale;
	int		frame_duration;
	int		height;
	int		i;
	int		j;
	int		width;
	long		rows;
	short		*actual_slice_data;
	short		*header;
	short		*raw_slice_data;
	short		slice_index;

	/* 
	 * Allocate header 
	 */
	header = (short *) calloc (HEADER_SIZE / sizeof (short), sizeof (short));
	if (header == (short *) NULL)
	{
		pkg_message (PKG_ERROR, "xray", "GetPetParameters", "calloc",
					"Error: Can't allocate header.\n");
	}

	*peakvalue	= 0;

	if (peaktype == PEAK_PER_SCAN)
	{
		for (slice_index = 1; slice_index <= num_slices; slice_index++)
		{
			actual_slice_data	= (short *) calloc (ENCODED_SLICE_DIM, sizeof (short));
			if (actual_slice_data == (short *) NULL)
			{
				pkg_message (PKG_ERROR, "xray", "GetPetParameters", "calloc",
						"Error: Can't allocate actual_slice_data.\n");
			}

			if (pettnum != ECAT_SCANNER)
			{
				getimage (actual_slice_data, header, imgfd, petimage_name, slice_index, 
						encoded, num_slices, pettnum, &err_value);
			}
			else
			{
       				/* 
	 			 * Read the matrix data. 
	 			 */
				matrixx_data	= matrix_read (fptr, mlist->list [slice_index - 1]);
				if (!matrixx_data) 
				{
					fprintf (stderr, "filter: matrixx_data reading error.\n");
					return FAIL;
				}

				image_subheader	= (Image_subheader *) matrixx_data->shptr;
				raw_slice_data	= (short *) matrixx_data->data_ptr;

				/*
		 		 * Factor multiplied to ecah pixel value.
	 			 */
				if (image_subheader->ecat_calibration_fctr != 0.0)
					ecat_calibration_fctr	= image_subheader->ecat_calibration_fctr;
				else	
					ecat_calibration_fctr	= DEFAULT_CALIBRATION_FACTOR;
				if (image_subheader->frame_duration != 0)
					frame_duration	= image_subheader->frame_duration;
				else	
					frame_duration	= DEFAULT_FRAME_DURATION;
				scale	= image_subheader->quant_scale * frame_duration
						* ecat_calibration_fctr;

				width		= image_subheader->dimension_1;
				height		= image_subheader->dimension_2;

				for (j = 0; j < height; j++)
				{
					for (i = 0; i < width; i++)
					{
						actual_slice_data [j * width + i]
						= ROUND (raw_slice_data [j * width + i] * scale);
					}
				}

				free_matrix_data (matrixx_data);
			}

			for (i = 0; i < ENCODED_SLICE_HEIGHT; i++)
			{
				rows	= i * ENCODED_SLICE_WIDTH;
				for (j = 0; j < ENCODED_SLICE_WIDTH; j++)
				{
					if (actual_slice_data [rows + j] > *peakvalue)	
					{
						*peakvalue	= actual_slice_data [rows + j];
					}
				}
			}

			free (actual_slice_data);
		}
	}

	return SUCCEED;
}

/*___________________________________________________________________________
  Function:	void Template ()

  Arguments:	

  Return Value:

  Description:	This function applying threshold to the template image
		and trim the templated image if necessary.

  Calling:	Thresh () in this file.	

  Called by:	GetPetParameters () in this file.	

  History:	Created by Tom Yang on 10/29/92. 
___________________________________________________________________________*/
PRIVATE int Template (template, petimage_name, imgfd, fptr, mlist, threshold, trim, 
		slice_index, peakvalue, peaktype, num_slices, pettnum, encoded)
	short		*template;
	char		*petimage_name;
	int		imgfd;
	MatrixFile	*fptr;
	Mlist		*mlist;
	char		threshold;
	char		trim;
	short		slice_index;
	short		*peakvalue;
	char		peaktype;		
	short		num_slices;
	int		pettnum;	
	BOOLEAN		encoded;
{
	MatrixData	*matrix_read ();

	BOOLEAN		err_value;
	Image_subheader	*image_subheader;
	MatrixData	*matrixx_data;
	float		ecat_calibration_fctr;
	float		scale;
	int		frame_duration;
	int		height;
	int		i;
	int		j;
	int		width;
	long		rows;
	short		*actual_slice_data;
	short		cutoff;
	short		*header;
	short		*raw_slice_data;

	/* 
	 * Allocate header. 
	 */
	header = (short *) calloc (HEADER_SIZE / sizeof (short), sizeof (short));
	if (header == (short *) NULL)
	{
		pkg_message (PKG_ERROR, "xray", "Template", "calloc",
					"Error: Can't allocate header.\n");
	}

	actual_slice_data	= (short *) calloc (ENCODED_SLICE_DIM, sizeof (short));
	if (actual_slice_data == (short *) NULL)
	{
		pkg_message (PKG_ERROR, "xray", "Template", "calloc",
					"Error: Can't allocate actual_slice_data.\n");
	}

	if (pettnum != ECAT_SCANNER)
	{
		getimage (actual_slice_data, header, imgfd, petimage_name, slice_index, 
				encoded, num_slices, pettnum, &err_value);
	}
	else
	{
       		/* 
		 * Read the matrix data. 
		 */
		matrixx_data	= matrix_read (fptr, mlist->list [slice_index - 1]);
		if (!matrixx_data) 
		{
			fprintf (stderr, "filter: matrixx_data reading error.\n");
			return FAIL;
		}

		image_subheader	= (Image_subheader *) matrixx_data->shptr;
		raw_slice_data	= (short *) matrixx_data->data_ptr;

		/*
		 * Factor multiplied to ecah pixel value.
		 */
		if (image_subheader->ecat_calibration_fctr != 0.0)
			ecat_calibration_fctr	= image_subheader->ecat_calibration_fctr;
		else	
			ecat_calibration_fctr	= DEFAULT_CALIBRATION_FACTOR;
		if (image_subheader->frame_duration != 0)
			frame_duration	= image_subheader->frame_duration;
		else	
			frame_duration	= DEFAULT_FRAME_DURATION;
		scale	= image_subheader->quant_scale * frame_duration * ecat_calibration_fctr;

		width		= image_subheader->dimension_1;
		height		= image_subheader->dimension_2;

		for (j = 0; j < height; j++)
		{
			for (i = 0; i < width; i++)
			{
				actual_slice_data [j * width + i]
				= ROUND (raw_slice_data [j * width + i] * scale);
			}
		}

		free_matrix_data (matrixx_data);
	}

	/*
	 * Find peak value of slice if needed.
	 */
	if (peaktype == PEAK_PER_SLICE)
	{
		*peakvalue	= 0;	
		for (i = 0; i < ENCODED_SLICE_HEIGHT; i++)
		{
			rows	= i * ENCODED_SLICE_WIDTH;
			for (j = 0; j < ENCODED_SLICE_WIDTH; j++)
			{
				if (actual_slice_data [rows + j] > *peakvalue)	
				{
					*peakvalue	= actual_slice_data [rows + j];
				}
			}
		}
	}

	/*
	 * Calculate cutoff.
	 */
	cutoff	= ROUND (PERCENT_FACTOR * threshold * *peakvalue);

	/*
	 * Call Thresh.
	 */
	Thresh (actual_slice_data, cutoff, threshold);

	/*
	 * Call Trim.
	 */
	Trim (actual_slice_data, trim);

	for (j = 0; j < ENCODED_SLICE_HEIGHT; j++)
	{
		rows	= j * ENCODED_SLICE_WIDTH;
		for (i = 0; i < ENCODED_SLICE_WIDTH; i++)
		{
			if (actual_slice_data [rows + i] == -MAXSHORT)
				template [rows + i]	= 0;
			else
				template [rows + i]	= 1;
		}
	}

	free (actual_slice_data);

	return SUCCEED;
}

/*___________________________________________________________________________
  Function:	void Thresh ()

  Arguments:	

  Return Value:

  Description:	This function assigns -MAXSHORT to all pixels out of %-of-peak 
		bound for a slice.

  Calling:	

  Called by:	Template () in this file.	

  History:	Created by Tom Yang on 11/02/92. 
___________________________________________________________________________*/
PRIVATE void Thresh (slice_data, cutoff, threshold)
	short	*slice_data;
	short	cutoff;
{
	int	i;
	int	j;
	int	k;
	int	nx;
	int	ny;
	long	rows;

	if (threshold == ONE_HUNDRED)
	{
		for (j = 0; j < ENCODED_SLICE_HEIGHT; j++)
		{
			rows	= j * ENCODED_SLICE_WIDTH;
			for (i = 0; i < ENCODED_SLICE_WIDTH; i++)
			{
				slice_data [rows + i] = 0;
			}
		}

		return;
	}

	for (j = 0; j < ENCODED_SLICE_HEIGHT; j++)
	{
		nx	= 0;
		ny	= 0;

		rows	= j * ENCODED_SLICE_WIDTH;
		for (i = 0; i < ENCODED_SLICE_WIDTH; i++)
		{
			if (slice_data [rows + i] < cutoff)
				slice_data [rows + i]	= -MAXSHORT;
			else
				break;
		}
		k	= i;

		if (k < ENCODED_SLICE_WIDTH)
		{
			for (i = ENCODED_SLICE_WIDTH - 1; i >= k; i--)
			{
				if (slice_data [rows + i] < cutoff)
					slice_data [rows + i]	= -MAXSHORT;
				else
					break;
			}
		}
	}
}

/*___________________________________________________________________________
  Function:	void Trim ()

  Arguments:	

  Return Value:

  Description:	This function trims a passed number of pixels from a thresholded 
		array.

  Calling:	None.	

  Called by:	Template () in this file.	

  History:	Created by Tom Yang on 11/02/92. 
___________________________________________________________________________*/
PRIVATE void Trim (slice_data, trim)
	short	*slice_data;
	char	trim;
{
	int	i;
	int	j;
	int	k;
	long	rows;

	if (trim <= 0)
		return;

	for (k = 1; k <= trim; k++)
	{
		for (j = 0; j < ENCODED_SLICE_HEIGHT; j++)
		{
			rows	= j * ENCODED_SLICE_WIDTH;
			for (i = 0; i < ENCODED_SLICE_WIDTH; i++)
			{
				if (slice_data [rows + i] != -MAXSHORT)
				{
					if ((i - 1 >= 0 && slice_data [rows + i - 1] == -MAXSHORT) 
					|| (i + 1 < ENCODED_SLICE_WIDTH 
					&& slice_data [rows + i + 1] == -MAXSHORT)
					|| (j - 1 >= 0
					&& slice_data [(j - 1) * ENCODED_SLICE_WIDTH + i] == -MAXSHORT)
					|| (j + 1 < ENCODED_SLICE_WIDTH
					&& slice_data [(j + 1) * ENCODED_SLICE_WIDTH + i] == -MAXSHORT))
						slice_data [rows + i]	= -MAXSHORT + 1;
				}
			}
		}
	}

	for (j = 0; j < ENCODED_SLICE_HEIGHT; j++)
	{
		rows	= j * ENCODED_SLICE_WIDTH;
		for (i = 0; i < ENCODED_SLICE_WIDTH; i++)
		{
			if (slice_data [rows + i] == -MAXSHORT + 1)
			{
				slice_data [rows + i]	= -MAXSHORT;
			}
		}
	}
}


/*_____________________________________________________________________________      
	Function:       Transformation
	Arguments:	dOldWidth, dOldHeight:	old space dimension.
			nNewWidth, nNewHeight:	new space dimension.
			nOldx, nOldy:		old coordinates.
			npNewx, npNewy:		new coordinates.
	Description:
			Transform coordinates from one space to another.

	Return Value:	none.
	Author:		Tom Yang 
			(03/18/1991)
______________________________________________________________________________*/ 

PUBLIC void Transformation (dScaleSize, dOldCenterx, dOldCentery, 
			     nOldx, nOldy, nNewCenterx, nNewCentery, npNewx, npNewy)
float	dScaleSize;
float	dOldCenterx, dOldCentery;
int	nOldx, nOldy;
int	nNewCenterx, nNewCentery;
int	*npNewx, *npNewy;
{
	*npNewx	= ROUND (dScaleSize * (nOldx - dOldCenterx)) + nNewCenterx;
	*npNewy = ROUND (dScaleSize * (nOldy - dOldCentery)) + nNewCentery;
}
@


1.7
log
@Before writing getsxr.
@
text
@d1 1
a1 1
/*$Id: petparm.c,v 1.6 1993/03/02 18:40:52 ty7777 Exp ty7777 $*/
d3 3
d23 1
a23 1
static char rcsid [] = "$Id: petparm.c,v 1.6 1993/03/02 18:40:52 ty7777 Exp ty7777 $";
d358 2
a359 1
	float		quant_factor;
d417 4
d424 3
a426 2
					frame_duration	= 100000;
				quant_factor	= image_subheader->quant_scale * frame_duration;
d436 1
a436 1
					= ROUND (raw_slice_data [j * width + i] * quant_factor);
d499 2
a500 1
	float		quant_factor;
d552 4
d559 2
a560 2
			frame_duration	= 100000;
		quant_factor	= image_subheader->quant_scale * frame_duration;
d570 1
a570 1
					= ROUND (raw_slice_data [j * width + i] * quant_factor);
@


1.6
log
@Before taking magnification factor into sonsideration for Fran.
@
text
@d1 1
a1 1
/*$Id: petparm.c,v 1.5 1993/01/27 22:06:40 ty7777 Exp ty7777 $*/
d3 3
d20 1
a20 1
static char rcsid [] = "$Id: petparm.c,v 1.5 1993/01/27 22:06:40 ty7777 Exp ty7777 $";
d43 1
a43 1
#include <datacalc/datacalc.h>
d99 1
a99 1
		fptr	= OpenEcat (fd, petimage_name, &temp_num_slices, &width, &height, 
d111 1
a111 1
			matrixx_close (fptr);
d277 1
a277 1
		matrixx_close (fptr);
d350 2
d400 1
a400 2
				matrixx_data	= matrixx_read (fptr, mlist->list [slice_index - 1], 
								fptr->mhptr->data_type);
d431 1
a431 1
				free_matrixx_data (matrixx_data);
d485 2
d529 1
a529 2
		matrixx_data	= matrixx_read (fptr, mlist->list [slice_index - 1], 
						fptr->mhptr->data_type);
d560 1
a560 1
		free_matrixx_data (matrixx_data);
@


1.5
log
@After modifying petparm.c
@
text
@d1 1
a1 1
/*$Id: petparm.c,v 1.4 1993/01/27 20:42:26 ty7777 Exp ty7777 $*/
d3 3
d17 1
a17 1
static char rcsid [] = "$Id: petparm.c,v 1.4 1993/01/27 20:42:26 ty7777 Exp ty7777 $";
d200 12
a211 2
		if (left.x == ENCODED_SLICE_WIDTH  - 1 || top.y == ENCODED_SLICE_HEIGHT - 1)
			fprintf (stderr, "Slice %d is indeterminate\n", i);
d213 14
a226 3
		sxr_output->rlpetdim [i]	= (float) (right.x - left.x);
		sxr_output->rlcenter [i]	= (left.x + 1) + (right.x - left.x) / 2.0;
		sxr_output->vertical_petdim [i]	= (float) (bottom.y - top.y);
@


1.4
log
@After adding PET image width and skull X ray width.
@
text
@d1 1
a1 1
/*$Id: petparm.c,v 1.3 1993/01/26 20:57:18 ty7777 Exp ty7777 $*/
d3 3
d14 1
a14 1
static char rcsid [] = "$Id: petparm.c,v 1.3 1993/01/26 20:57:18 ty7777 Exp ty7777 $";
d112 17
@


1.3
log
@petparm.c initial checking in.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d11 1
a11 1
static char rcsid [] = "$Id: petparm.c,v 1.2 1993/01/26 20:56:10 ty7777 Exp ty7777 $";
d182 1
@


1.2
log
@petparm.c initial checking in.
@
text
@d2 1
a2 1
/*$Log*/
d8 1
a8 1
static char rcsid [] = "$Id: petparm.c,v 1.1 1993/01/22 21:33:25 ty7777 Exp ty7777 $";
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
static char rcsid [] = "$Id$";
d177 1
a177 1
		sxr_output->rlpetdim [i]	= (float) (right.x - left.x + 2);
d300 1
d302 3
d307 1
d309 1
d311 1
a311 2
	short		*slice_data;
	short		*actual_slice_data;
d330 7
d339 1
a339 8
				slice_data	= (short *) calloc (ENCODED_SLICE_DIM, sizeof (short));
				if (slice_data == (short *) NULL)
				{
					pkg_message (PKG_ERROR, "xray", "GetPetParameters", "calloc",
						"Error: Can't allocate slice_data.\n");
				}

				getimage (slice_data, header, imgfd, petimage_name, slice_index, 
a340 1
				actual_slice_data	= slice_data;
d355 25
a379 1
				actual_slice_data	= (short *) matrixx_data->data_ptr;
d387 1
a387 1
					if (slice_data [rows + j] > *peakvalue)	
d394 1
a394 8
			if (pettnum != ECAT_SCANNER)
			{
				free (slice_data);
			}
			else
			{
				free_matrixx_data (matrixx_data);
			}
d433 2
d436 11
a446 8
	BOOLEAN	err_value;
	short	*header;
	short	cutoff;
	int	i;
	int	j;
	long	rows;
	short	*slice_data;
	short	*actual_slice_data;
d458 2
a459 2
	slice_data	= (short *) calloc (ENCODED_SLICE_DIM, sizeof (short));
	if (slice_data == (short *) NULL)
d461 2
a462 2
		pkg_message (PKG_ERROR, "xray", "GetPetParameters", "calloc",
					"Error: Can't allocate slice_data.\n");
d467 1
a467 8
		slice_data	= (short *) calloc (ENCODED_SLICE_DIM, sizeof (short));
		if (slice_data == (short *) NULL)
		{
			pkg_message (PKG_ERROR, "xray", "GetPetParameters", "calloc",
					"Error: Can't allocate slice_data.\n");
		}

		getimage (slice_data, header, imgfd, petimage_name, slice_index, 
a468 1
		actual_slice_data	= slice_data;
d483 25
a507 1
		actual_slice_data	= (short *) matrixx_data->data_ptr;
d556 1
a556 8
	if (pettnum != ECAT_SCANNER)
	{
		free (slice_data);
	}
	else
	{
		free_matrixx_data (matrixx_data);
	}
@
