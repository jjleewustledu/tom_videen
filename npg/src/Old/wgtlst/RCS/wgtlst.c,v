head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	95.01.03.22.05.07;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	94.12.22.19.58.30;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	94.12.21.20.09.29;	author ty7777;	state Exp;
branches;
next	;


desc
@First checking in, working version.
@


1.3
log
@Added processing for the weight.
@
text
@/*$Id: wgtlst.c,v 1.2 1994/12/22 19:58:30 ty7777 Exp ty7777 $*/
/*$Log: wgtlst.c,v $
 * Revision 1.2  1994/12/22  19:58:30  ty7777
 * Added the reciprocal of the number of scan_pairs.
 *
 * Revision 1.1  1994/12/21  20:09:29  ty7777
 * Initial revision
 **/

/*______________________________________________________________________________
File Name:		wgtlst.c

Author:			Tom Yang.

Description:		weight the global averages of images.

History:		Created by Tom Yang on 12/21/1994.

Input Parameters:	1) image list file.
			2) weights list.
			3) output list file.

Algorithm for wgtlst:	1) read image list and get number of pairs.
			2) read weight list.
			3) check if #list = #wgtlist
			4) sum up the weights
			5) new_normalization = old_normalization * sum / (wgt * #scan_pairs).
			6) save new list.
______________________________________________________________________________*/

#include <petutil/imglist.h>
#define ERROR_BOUND	0.000000001

static char rcsid [] = "$Header: /home/petsun4/ty7777/src/wgtlst/RCS/wgtlst.c,v 1.2 1994/12/22 19:58:30 ty7777 Exp ty7777 $";

main (argc, argv)
	int             argc;
	char          **argv;
{
	IMAGE_LIST_DATA *image_list;
	char		*image_list_file;
	char		*new_list_file;
	char		*weight_list_file;
	float		factor;
	float		total_weight;
	float		*weight_list;
	int             i;
	int             num_image_list;
	int		num_weight;

	/*
	 * Get command line arguments.
	 */
	image_list_file		= argv [1];
	weight_list_file	= argv [2];
	new_list_file		= argv [3];

	/*
	 * Allocate memory for image list structures.
	 */
	image_list	= (IMAGE_LIST_DATA *) pkg_malloc (sizeof (IMAGE_LIST_DATA)
			  * MAX_IMAGE_LIST_SIZE, "wgtlst", "image_list");

	/*
	 * Read image_list_file into IMAGE_LIST_DATA structure.
	 */
	if (readimglist (image_list_file, image_list, &num_image_list) == FAIL) 
	{
		fprintf (stderr, "Error: from readimglist ().\n");
		free (image_list);
		exit (FAIL);
	}

	/*
	 * Read image weights.
	 */
	weight_list	= (float *) malloc (sizeof (float) * MAX_IMAGE_LIST_SIZE);
	if (weight_list == (float *) NULL)
	{
		fprintf (stderr, "Cannot allocate memory for weight_list.\n");
		return FAIL;
	}

	if (getwgt (weight_list_file, weight_list, &num_weight) == FAIL)
	{
		fprintf (stderr, "Error: from getwgt ().\n");
		free (image_list);
		exit (FAIL);
	}

	/*
	 * Check if the weight list file and the image list file have the
	 * same number of list.
	 */
	if (num_image_list != num_weight)
	{
		fprintf (stderr, "Error: #weights != #image_pairs.\n");
		free (image_list);
		free (weight_list);
		exit (FAIL);
	}

	/*
	 * Sum up the weights.
	 */
	total_weight	= 0.0;
	for (i = 0; i < num_image_list; i++) 
	{
		if (pkg_abs (weight_list [i]) < ERROR_BOUND) 
		{
			fprintf (stderr, "The %dth weight is 0.\n", i + 1);
			free (image_list);
			free (weight_list);
			exit (FAIL);
		}
		else
			total_weight	+= weight_list [i];
	}

	/*
	 * Weight the global averages.
	 */
	for (i = 0; i < num_image_list; i++) 
	{
		factor			= total_weight / (weight_list [i] * num_image_list);
		image_list [i].mean1	*= factor;
		image_list [i].mean2	*= factor;
		image_list [i].weight	= weight_list [i];
	}

	/*
	 * Save the modified image list.
	 */
	savelist (new_list_file, num_image_list, image_list);

	free (image_list);
	free (weight_list);
}
@


1.2
log
@Added the reciprocal of the number of scan_pairs.
@
text
@d1 1
a1 1
/*$Id: wgtlst.c,v 1.1 1994/12/21 20:09:29 ty7777 Exp ty7777 $*/
d3 3
d34 1
a34 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/wgtlst/RCS/wgtlst.c,v 1.1 1994/12/21 20:09:29 ty7777 Exp ty7777 $";
d128 1
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d24 1
a24 1
			5) new_normalization = old_normalization * sum / wgt.
d31 1
a31 1
static char rcsid [] = "$Header$";
d122 1
a122 1
		factor			= total_weight / weight_list [i];
@
