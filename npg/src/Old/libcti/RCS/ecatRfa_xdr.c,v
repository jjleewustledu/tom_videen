head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	94.03.03.17.23.49;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.09.13.19.38.17;	author ty7777;	state Exp;
branches;
next	;


desc
@Introduce rcsid.
@


1.3
log
@build in Solaris 2
@
text
@/*$Id: ecatRfa_xdr.c,v 1.2 1994/03/03 17:23:49 ty7777 Exp tom $*/
/*$Log: ecatRfa_xdr.c,v $
 * Revision 1.2  1994/03/03  17:23:49  ty7777
 * Change from if to header.
 **/

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/rpc.h>
#include "ecatRfa.h"

#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/ecatRfa_xdr.c,v 1.2 1994/03/03 17:23:49 ty7777 Exp tom $";
#endif

bool_t
xdr_RFA_FUNCTIONS (xdrs, objp)
	XDR            *xdrs;

	RFA_FUNCTIONS  *objp;
{
	if (!xdr_enum (xdrs, (enum_t *) objp)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RREN_args (xdrs, objp)
	XDR            *xdrs;

	RREN_args      *objp;
{
	if (!xdr_string (xdrs, &objp->oldName, 80)) {
		return (FALSE);
	}
	if (!xdr_string (xdrs, &objp->newName, 80)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RCPY_args (xdrs, objp)
	XDR            *xdrs;

	RCPY_args      *objp;
{
	if (!xdr_string (xdrs, &objp->oldName, 80)) {
		return (FALSE);
	}
	if (!xdr_string (xdrs, &objp->newName, 80)) {
		return (FALSE);
	}
	if (!xdr_long (xdrs, &objp->fileSize)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RDIR_args (xdrs, objp)
	XDR            *xdrs;

	RDIR_args      *objp;
{
	if (!xdr_string (xdrs, &objp->dirPath, 80)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->currDirNo)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RDIR_resp (xdrs, objp)
	XDR            *xdrs;

	RDIR_resp      *objp;
{
	if (!xdr_string (xdrs, &objp->dirEntry, 80)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->nextDirNo)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->freeChunk)) {
		return (FALSE);
	}
	return (TRUE);
}
@


1.2
log
@Change from if to header.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d15 3
a17 1
static char rcsid [] = "$Header$";
d20 4
a23 3
xdr_RFA_FUNCTIONS(xdrs, objp)
	XDR *xdrs;
	RFA_FUNCTIONS *objp;
d25 1
a25 1
	if (!xdr_enum(xdrs, (enum_t *)objp)) {
d32 4
a35 3
xdr_RREN_args(xdrs, objp)
	XDR *xdrs;
	RREN_args *objp;
d37 1
a37 1
	if (!xdr_string(xdrs, &objp->oldName, 80)) {
d40 1
a40 1
	if (!xdr_string(xdrs, &objp->newName, 80)) {
d47 4
a50 3
xdr_RCPY_args(xdrs, objp)
	XDR *xdrs;
	RCPY_args *objp;
d52 1
a52 1
	if (!xdr_string(xdrs, &objp->oldName, 80)) {
d55 1
a55 1
	if (!xdr_string(xdrs, &objp->newName, 80)) {
d58 1
a58 1
	if (!xdr_long(xdrs, &objp->fileSize)) {
d65 4
a68 3
xdr_RDIR_args(xdrs, objp)
	XDR *xdrs;
	RDIR_args *objp;
d70 1
a70 1
	if (!xdr_string(xdrs, &objp->dirPath, 80)) {
d73 1
a73 1
	if (!xdr_int(xdrs, &objp->currDirNo)) {
d80 4
a83 3
xdr_RDIR_resp(xdrs, objp)
	XDR *xdrs;
	RDIR_resp *objp;
d85 1
a85 1
	if (!xdr_string(xdrs, &objp->dirEntry, 80)) {
d88 1
a88 1
	if (!xdr_int(xdrs, &objp->nextDirNo)) {
d91 1
a91 1
	if (!xdr_int(xdrs, &objp->freeChunk)) {
@


1.1
log
@Initial revision
@
text
@d1 3
d12 1
a12 1
static char rcsid [] = "$Id$";
@
