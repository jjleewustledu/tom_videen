head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	94.03.03.17.22.37;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.09.13.19.36.55;	author ty7777;	state Exp;
branches;
next	;


desc
@Introduce rcsid.
@


1.3
log
@build in Solaris 2
@
text
@/*$Id: ecatMcs_xdr.c,v 1.2 1994/03/03 17:22:37 ty7777 Exp tom $*/
/*$Log: ecatMcs_xdr.c,v $
 * Revision 1.2  1994/03/03  17:22:37  ty7777
 * Change from id to header.
 **/

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/rpc.h>
#include "ecatMcs.h"

#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/ecatMcs_xdr.c,v 1.2 1994/03/03 17:22:37 ty7777 Exp tom $";
#endif

bool_t
xdr_MCS_FUNCTIONS (xdrs, objp)
	XDR            *xdrs;

	MCS_FUNCTIONS  *objp;
{
	if (!xdr_enum (xdrs, (enum_t *) objp)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_MCS_MOTIONS (xdrs, objp)
	XDR            *xdrs;

	MCS_MOTIONS    *objp;
{
	if (!xdr_enum (xdrs, (enum_t *) objp)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_MCS_STATUS (xdrs, objp)
	XDR            *xdrs;

	MCS_STATUS     *objp;
{
	if (!xdr_int (xdrs, &objp->ps_status)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->rs_status)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->wob_status)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->bed_status)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->tilt_status)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->rot_status)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->ps_encoder)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->wob_encoder)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->hb_encoder)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->vb_encoder)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->tilt_encoder)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->rot_encoder)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->mcs_inp)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->ps_speed)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->wob_speed)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->bed_ref_encoder)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->septa_status)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_MCS_ZEROES (xdrs, objp)
	XDR            *xdrs;

	MCS_ZEROES     *objp;
{
	if (!xdr_int (xdrs, &objp->axis)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->value)) {
		return (FALSE);
	}
	return (TRUE);
}
@


1.2
log
@Change from id to header.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d15 3
a17 1
static char rcsid [] = "$Header$";
d20 4
a23 3
xdr_MCS_FUNCTIONS(xdrs, objp)
	XDR *xdrs;
	MCS_FUNCTIONS *objp;
d25 1
a25 1
	if (!xdr_enum(xdrs, (enum_t *)objp)) {
d32 4
a35 3
xdr_MCS_MOTIONS(xdrs, objp)
	XDR *xdrs;
	MCS_MOTIONS *objp;
d37 1
a37 1
	if (!xdr_enum(xdrs, (enum_t *)objp)) {
d44 4
a47 3
xdr_MCS_STATUS(xdrs, objp)
	XDR *xdrs;
	MCS_STATUS *objp;
d49 1
a49 1
	if (!xdr_int(xdrs, &objp->ps_status)) {
d52 1
a52 1
	if (!xdr_int(xdrs, &objp->rs_status)) {
d55 1
a55 1
	if (!xdr_int(xdrs, &objp->wob_status)) {
d58 1
a58 1
	if (!xdr_int(xdrs, &objp->bed_status)) {
d61 1
a61 1
	if (!xdr_int(xdrs, &objp->tilt_status)) {
d64 1
a64 1
	if (!xdr_int(xdrs, &objp->rot_status)) {
d67 1
a67 1
	if (!xdr_int(xdrs, &objp->ps_encoder)) {
d70 1
a70 1
	if (!xdr_int(xdrs, &objp->wob_encoder)) {
d73 1
a73 1
	if (!xdr_float(xdrs, &objp->hb_encoder)) {
d76 1
a76 1
	if (!xdr_int(xdrs, &objp->vb_encoder)) {
d79 1
a79 1
	if (!xdr_int(xdrs, &objp->tilt_encoder)) {
d82 1
a82 1
	if (!xdr_int(xdrs, &objp->rot_encoder)) {
d85 1
a85 1
	if (!xdr_int(xdrs, &objp->mcs_inp)) {
d88 1
a88 1
	if (!xdr_int(xdrs, &objp->ps_speed)) {
d91 1
a91 1
	if (!xdr_int(xdrs, &objp->wob_speed)) {
d94 1
a94 1
	if (!xdr_float(xdrs, &objp->bed_ref_encoder)) {
d97 1
a97 1
	if (!xdr_int(xdrs, &objp->septa_status)) {
d104 4
a107 3
xdr_MCS_ZEROES(xdrs, objp)
	XDR *xdrs;
	MCS_ZEROES *objp;
d109 1
a109 1
	if (!xdr_int(xdrs, &objp->axis)) {
d112 1
a112 1
	if (!xdr_int(xdrs, &objp->value)) {
@


1.1
log
@Initial revision
@
text
@d1 3
d12 1
a12 1
static char rcsid [] = "$Id$";
@
