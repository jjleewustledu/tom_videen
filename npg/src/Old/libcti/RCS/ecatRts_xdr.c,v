head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	94.03.03.17.24.51;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.09.13.19.39.18;	author ty7777;	state Exp;
branches;
next	;


desc
@Introduce rcsid.
@


1.3
log
@build in Solaris 2
@
text
@/*$Id: ecatRts_xdr.c,v 1.2 1994/03/03 17:24:51 ty7777 Exp tom $*/
/*$Log: ecatRts_xdr.c,v $
 * Revision 1.2  1994/03/03  17:24:51  ty7777
 * Change from if to header.
 **/

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/rpc.h>
#include "ecatRts.h"
/* @@(#)ecatRts.x	2.2 9/20/91 */

#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/ecatRts_xdr.c,v 1.2 1994/03/03 17:24:51 ty7777 Exp tom $";
#endif

bool_t
xdr_RTS_FUNCTIONS (xdrs, objp)
	XDR            *xdrs;

	RTS_FUNCTIONS  *objp;
{
	if (!xdr_enum (xdrs, (enum_t *) objp)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RTS_INFO_FUNCTIONS (xdrs, objp)
	XDR            *xdrs;

	RTS_INFO_FUNCTIONS *objp;
{
	if (!xdr_enum (xdrs, (enum_t *) objp)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_XMAIN_HEAD (xdrs, objp)
	XDR            *xdrs;

	XMAIN_HEAD     *objp;
{
	if (!xdr_opaque (xdrs, objp->original_file_name, 20)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->sw_version)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->data_type)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->system_type)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->file_type)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->node_id, 10)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->scan_start_day)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->scan_start_month)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->scan_start_year)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->scan_start_hour)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->scan_start_minute)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->scan_start_second)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->isotope_code, 8)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->isotope_halflife)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->radiopharmaceutical, 32)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->gantry_tilt)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->gantry_rotation)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->bed_elevation)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->rot_source_speed)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->wobble_speed)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->transm_source_type)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->axial_fov)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->transaxial_fov)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->transaxial_samp_mode)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->coin_samp_mode)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->axial_samp_mode)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->calibration_factor)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->calibration_units)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->compression_code)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->study_name, 12)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->patient_id, 16)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->patient_name, 32)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->patient_sex, 1)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->patient_age, 10)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->patient_height, 10)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->patient_weight, 10)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->patient_dexterity, 1)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->physician_name, 32)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->operator_name, 32)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->study_description, 32)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->acquisition_type)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->bed_type)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->septa_type)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->facility_name, 20)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->num_planes)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->num_frames)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->num_gates)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->num_bed_pos)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->init_bed_position)) {
		return (FALSE);
	}
	if (!xdr_vector (xdrs, (char *) objp->bed_offset, 15, sizeof (float), xdr_float)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->plane_separation)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->lwr_sctr_thres)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->lwr_true_thres)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->upr_true_thres)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->collimator)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->user_process_code, 10)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->acquisition_mode)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_XSCAN_SUB (xdrs, objp)
	XDR            *xdrs;

	XSCAN_SUB      *objp;
{
	if (!xdr_short (xdrs, &objp->data_type)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->dimension_1)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->dimension_2)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->smoothing)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->processing_code)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->sample_distance)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->isotope_halflife)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->frame_duration_sec)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->gate_duration)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->r_wave_offset)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->scale_factor)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->scan_min)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->scan_max)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->prompts)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->delayed)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->multiples)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->net_trues)) {
		return (FALSE);
	}
	if (!xdr_vector (xdrs, (char *) objp->cor_singles, 16, sizeof (float), xdr_float)) {
		return (FALSE);
	}
	if (!xdr_vector (xdrs, (char *) objp->uncor_singles, 16, sizeof (float), xdr_float)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->tot_avg_cor)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->tot_avg_uncor)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->total_coin_rate)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frame_start_time)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frame_duration)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->loss_correction_fctr)) {
		return (FALSE);
	}
	if (!xdr_vector (xdrs, (char *) objp->phy_planes, 8, sizeof (int), xdr_int)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_XIMAGE_SUB (xdrs, objp)
	XDR            *xdrs;

	XIMAGE_SUB     *objp;
{
	if (!xdr_short (xdrs, &objp->data_type)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->num_dimensions)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->dimension_1)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->dimension_2)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->x_origin)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->y_origin)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->recon_scale)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->quant_scale)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->image_min)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->image_max)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->pixel_size)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->slice_width)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frame_duration)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frame_start_time)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->slice_location)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->recon_start_hour)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->recon_start_minute)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->recon_start_sec)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->recon_duration)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->filter_code)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->scan_matrix_num)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->norm_matrix_num)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->atten_cor_matrix_num)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->image_rotation)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->plane_eff_corr_fctr)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->decay_corr_fctr)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->loss_corr_fctr)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->processing_code)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->quant_units)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->recon_start_day)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->recon_start_month)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->recon_start_year)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->ecat_calibration_fctr)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->well_counter_cal_fctr)) {
		return (FALSE);
	}
	if (!xdr_vector (xdrs, (char *) objp->filter_params, 6, sizeof (float), xdr_float)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->annotation, 40)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_XNORM_SUB (xdrs, objp)
	XDR            *xdrs;

	XNORM_SUB      *objp;
{
	if (!xdr_short (xdrs, &objp->data_type)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->dimension_1)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->dimension_2)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->scale_factor)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->norm_hour)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->norm_minute)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->norm_second)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->norm_day)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->norm_month)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->norm_year)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->fov_source_width)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->ecat_calib_factor)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_XATTEN_SUB (xdrs, objp)
	XDR            *xdrs;

	XATTEN_SUB     *objp;
{
	if (!xdr_short (xdrs, &objp->data_type)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->attenuation_type)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->dimension_1)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->dimension_2)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->scale_factor)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->x_origin)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->y_origin)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->x_radius)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->y_radius)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->tilt_angle)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->attenuation_coeff)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->sample_distance)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_CREF_args (xdrs, objp)
	XDR            *xdrs;

	CREF_args      *objp;
{
	if (!xdr_string (xdrs, &objp->file_name, 64)) {
		return (FALSE);
	}
	if (!xdr_XMAIN_HEAD (xdrs, &objp->mhead)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->data_size)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_DPLN_args (xdrs, objp)
	XDR            *xdrs;

	DPLN_args      *objp;
{
	if (!xdr_int (xdrs, &objp->log_plane)) {
		return (FALSE);
	}
	if (!xdr_vector (xdrs, (char *) objp->phy_plane, 6, sizeof (int), xdr_int)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_DFRM_args (xdrs, objp)
	XDR            *xdrs;

	DFRM_args      *objp;
{
	if (!xdr_int (xdrs, &objp->nframes)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->delay)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->duration)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->nsegs)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_MODL_args (xdrs, objp)
	XDR            *xdrs;

	MODL_args      *objp;
{
	if (!xdr_int (xdrs, &objp->model)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->number_of_rings)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_CFRM_args (xdrs, objp)
	XDR            *xdrs;

	CFRM_args      *objp;
{
	if (!xdr_int (xdrs, &objp->frame)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->delay)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->duration)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_CONF_args (xdrs, objp)
	XDR            *xdrs;

	CONF_args      *objp;
{
	if (!xdr_int (xdrs, &objp->config)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->pile_up_factor)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->plane_factor)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_STRT_args (xdrs, objp)
	XDR            *xdrs;

	STRT_args      *objp;
{
	if (!xdr_int (xdrs, &objp->numberFrames)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->acqType)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RECT_args (xdrs, objp)
	XDR            *xdrs;

	RECT_args      *objp;
{
	if (!xdr_int (xdrs, &objp->frame)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->plane)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->segment)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->data)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->startView)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->endView)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_STOR_args (xdrs, objp)
	XDR            *xdrs;

	STOR_args      *objp;
{
	if (!xdr_string (xdrs, &objp->filename, ~0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frame)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->matframe)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->bed)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_ASTR_args (xdrs, objp)
	XDR            *xdrs;

	ASTR_args      *objp;
{
	if (!xdr_string (xdrs, &objp->file_name, 64)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->auto_store)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_GLOG_args (xdrs, objp)
	XDR            *xdrs;

	GLOG_args      *objp;
{
	if (!xdr_string (xdrs, &objp->filename, ~0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frame)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->plane)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->segment)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->data)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->bed)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_GIMI_args (xdrs, objp)
	XDR            *xdrs;

	GIMI_args      *objp;
{
	if (!xdr_int (xdrs, &objp->frame)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->plane)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->segment)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->data)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->bed)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_SNGL_args (xdrs, objp)
	XDR            *xdrs;

	SNGL_args      *objp;
{
	if (!xdr_int (xdrs, &objp->start_bucket)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->end_bucket)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frequency)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->timeout)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->num_ipcs)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RBLK_args (xdrs, objp)
	XDR            *xdrs;

	RBLK_args      *objp;
{
	if (!xdr_string (xdrs, &objp->filename, ~0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->block_number)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_WBLK_args (xdrs, objp)
	XDR            *xdrs;

	WBLK_args      *objp;
{
	if (!xdr_string (xdrs, &objp->filename, ~0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->block_number)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->wblk, 512)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_GIMI_resp (xdrs, objp)
	XDR            *xdrs;

	GIMI_resp      *objp;
{
	if (!xdr_int (xdrs, &objp->time)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->start_time)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->nproj)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->nview)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->minval)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->maxval)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->prompts)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->delayeds)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->multiples)) {
		return (FALSE);
	}
	if (!xdr_vector (xdrs, (char *) objp->corrected_sing, 64, sizeof (int), xdr_int)) {
		return (FALSE);
	}
	if (!xdr_vector (xdrs, (char *) objp->uncorrected_sing, 64, sizeof (int), xdr_int)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->total_ipc_prompts)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->total_ipc_delayeds)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->total_ipc_multiples)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->status)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_GLOG_resp (xdrs, objp)
	XDR            *xdrs;

	GLOG_resp      *objp;
{
	if (!xdr_int (xdrs, &objp->time)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->start_time)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->minval)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->maxval)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->prompts)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->delayeds)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->multiples)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->net_trues)) {
		return (FALSE);
	}
	if (!xdr_float (xdrs, &objp->dtcor)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->status)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_INFO_resp (xdrs, objp)
	XDR            *xdrs;

	INFO_resp      *objp;
{
	if (!xdr_int (xdrs, &objp->acq_status)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->total_time)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->prompt_events)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->delayed_events)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->multiple_events)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->current_frame)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->total_frames)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frame_time)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frame_end_time)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->scan_end_time)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->singles_Kcps_corrected)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->singles_Kcps_uncorrected)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->total_ipc_prompt_rate)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->total_ipc_delayed_rate)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->total_ipc_multiple_rate)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->contig_disk_space)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RBLK_resp (xdrs, objp)
	XDR            *xdrs;

	RBLK_resp      *objp;
{
	if (!xdr_int (xdrs, &objp->status)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->rblk, 512)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RMHD_resp (xdrs, objp)
	XDR            *xdrs;

	RMHD_resp      *objp;
{
	if (!xdr_int (xdrs, &objp->status)) {
		return (FALSE);
	}
	if (!xdr_XMAIN_HEAD (xdrs, &objp->xmain_head)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_WMHD_args (xdrs, objp)
	XDR            *xdrs;

	WMHD_args      *objp;
{
	if (!xdr_string (xdrs, &objp->file_name, ~0)) {
		return (FALSE);
	}
	if (!xdr_XMAIN_HEAD (xdrs, &objp->xmain_head)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RSHD_args (xdrs, objp)
	XDR            *xdrs;

	RSHD_args      *objp;
{
	if (!xdr_string (xdrs, &objp->file_name, ~0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->matnum)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RSHD_resp (xdrs, objp)
	XDR            *xdrs;

	RSHD_resp      *objp;
{
	if (!xdr_int (xdrs, &objp->status)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->rhdat, 512)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_WSHD_args (xdrs, objp)
	XDR            *xdrs;

	WSHD_args      *objp;
{
	if (!xdr_string (xdrs, &objp->file_name, ~0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->matnum)) {
		return (FALSE);
	}
	if (!xdr_opaque (xdrs, objp->whdat, 512)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RDAT_args (xdrs, objp)
	XDR            *xdrs;

	RDAT_args      *objp;
{
	if (!xdr_string (xdrs, &objp->file_name, ~0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->matnum)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_RDAT_resp (xdrs, objp)
	XDR            *xdrs;

	RDAT_resp      *objp;
{
	if (!xdr_int (xdrs, &objp->status)) {
		return (FALSE);
	}
	if (!xdr_bytes (xdrs, (char **) &objp->rdat.rdat_val, (u_int *) & objp->rdat.rdat_len, ~0)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_WDAT_args (xdrs, objp)
	XDR            *xdrs;

	WDAT_args      *objp;
{
	if (!xdr_string (xdrs, &objp->file_name, ~0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->matnum)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->data_type)) {
		return (FALSE);
	}
	if (!xdr_bytes (xdrs, (char **) &objp->wdat.wdat_val, (u_int *) & objp->wdat.wdat_len, ~0)) {
		return (FALSE);
	}
	return (TRUE);
}
@


1.2
log
@Change from if to header.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d16 3
a18 1
static char rcsid [] = "$Header$";
d21 4
a24 3
xdr_RTS_FUNCTIONS(xdrs, objp)
	XDR *xdrs;
	RTS_FUNCTIONS *objp;
d26 1
a26 1
	if (!xdr_enum(xdrs, (enum_t *)objp)) {
d33 3
a35 2
xdr_RTS_INFO_FUNCTIONS(xdrs, objp)
	XDR *xdrs;
d38 1
a38 1
	if (!xdr_enum(xdrs, (enum_t *)objp)) {
d45 4
a48 3
xdr_XMAIN_HEAD(xdrs, objp)
	XDR *xdrs;
	XMAIN_HEAD *objp;
d50 1
a50 1
	if (!xdr_opaque(xdrs, objp->original_file_name, 20)) {
d53 1
a53 1
	if (!xdr_short(xdrs, &objp->sw_version)) {
d56 1
a56 1
	if (!xdr_short(xdrs, &objp->data_type)) {
d59 1
a59 1
	if (!xdr_short(xdrs, &objp->system_type)) {
d62 1
a62 1
	if (!xdr_short(xdrs, &objp->file_type)) {
d65 1
a65 1
	if (!xdr_opaque(xdrs, objp->node_id, 10)) {
d68 1
a68 1
	if (!xdr_short(xdrs, &objp->scan_start_day)) {
d71 1
a71 1
	if (!xdr_short(xdrs, &objp->scan_start_month)) {
d74 1
a74 1
	if (!xdr_short(xdrs, &objp->scan_start_year)) {
d77 1
a77 1
	if (!xdr_short(xdrs, &objp->scan_start_hour)) {
d80 1
a80 1
	if (!xdr_short(xdrs, &objp->scan_start_minute)) {
d83 1
a83 1
	if (!xdr_short(xdrs, &objp->scan_start_second)) {
d86 1
a86 1
	if (!xdr_opaque(xdrs, objp->isotope_code, 8)) {
d89 1
a89 1
	if (!xdr_float(xdrs, &objp->isotope_halflife)) {
d92 1
a92 1
	if (!xdr_opaque(xdrs, objp->radiopharmaceutical, 32)) {
d95 1
a95 1
	if (!xdr_float(xdrs, &objp->gantry_tilt)) {
d98 1
a98 1
	if (!xdr_float(xdrs, &objp->gantry_rotation)) {
d101 1
a101 1
	if (!xdr_float(xdrs, &objp->bed_elevation)) {
d104 1
a104 1
	if (!xdr_short(xdrs, &objp->rot_source_speed)) {
d107 1
a107 1
	if (!xdr_short(xdrs, &objp->wobble_speed)) {
d110 1
a110 1
	if (!xdr_short(xdrs, &objp->transm_source_type)) {
d113 1
a113 1
	if (!xdr_float(xdrs, &objp->axial_fov)) {
d116 1
a116 1
	if (!xdr_float(xdrs, &objp->transaxial_fov)) {
d119 1
a119 1
	if (!xdr_short(xdrs, &objp->transaxial_samp_mode)) {
d122 1
a122 1
	if (!xdr_short(xdrs, &objp->coin_samp_mode)) {
d125 1
a125 1
	if (!xdr_short(xdrs, &objp->axial_samp_mode)) {
d128 1
a128 1
	if (!xdr_float(xdrs, &objp->calibration_factor)) {
d131 1
a131 1
	if (!xdr_short(xdrs, &objp->calibration_units)) {
d134 1
a134 1
	if (!xdr_short(xdrs, &objp->compression_code)) {
d137 1
a137 1
	if (!xdr_opaque(xdrs, objp->study_name, 12)) {
d140 1
a140 1
	if (!xdr_opaque(xdrs, objp->patient_id, 16)) {
d143 1
a143 1
	if (!xdr_opaque(xdrs, objp->patient_name, 32)) {
d146 1
a146 1
	if (!xdr_opaque(xdrs, objp->patient_sex, 1)) {
d149 1
a149 1
	if (!xdr_opaque(xdrs, objp->patient_age, 10)) {
d152 1
a152 1
	if (!xdr_opaque(xdrs, objp->patient_height, 10)) {
d155 1
a155 1
	if (!xdr_opaque(xdrs, objp->patient_weight, 10)) {
d158 1
a158 1
	if (!xdr_opaque(xdrs, objp->patient_dexterity, 1)) {
d161 1
a161 1
	if (!xdr_opaque(xdrs, objp->physician_name, 32)) {
d164 1
a164 1
	if (!xdr_opaque(xdrs, objp->operator_name, 32)) {
d167 1
a167 1
	if (!xdr_opaque(xdrs, objp->study_description, 32)) {
d170 1
a170 1
	if (!xdr_short(xdrs, &objp->acquisition_type)) {
d173 1
a173 1
	if (!xdr_short(xdrs, &objp->bed_type)) {
d176 1
a176 1
	if (!xdr_short(xdrs, &objp->septa_type)) {
d179 1
a179 1
	if (!xdr_opaque(xdrs, objp->facility_name, 20)) {
d182 1
a182 1
	if (!xdr_short(xdrs, &objp->num_planes)) {
d185 1
a185 1
	if (!xdr_short(xdrs, &objp->num_frames)) {
d188 1
a188 1
	if (!xdr_short(xdrs, &objp->num_gates)) {
d191 1
a191 1
	if (!xdr_short(xdrs, &objp->num_bed_pos)) {
d194 1
a194 1
	if (!xdr_float(xdrs, &objp->init_bed_position)) {
d197 1
a197 1
	if (!xdr_vector(xdrs, (char *)objp->bed_offset, 15, sizeof(float), xdr_float)) {
d200 1
a200 1
	if (!xdr_float(xdrs, &objp->plane_separation)) {
d203 1
a203 1
	if (!xdr_short(xdrs, &objp->lwr_sctr_thres)) {
d206 1
a206 1
	if (!xdr_short(xdrs, &objp->lwr_true_thres)) {
d209 1
a209 1
	if (!xdr_short(xdrs, &objp->upr_true_thres)) {
d212 1
a212 1
	if (!xdr_float(xdrs, &objp->collimator)) {
d215 1
a215 1
	if (!xdr_opaque(xdrs, objp->user_process_code, 10)) {
d218 1
a218 1
	if (!xdr_short(xdrs, &objp->acquisition_mode)) {
d225 4
a228 3
xdr_XSCAN_SUB(xdrs, objp)
	XDR *xdrs;
	XSCAN_SUB *objp;
d230 1
a230 1
	if (!xdr_short(xdrs, &objp->data_type)) {
d233 1
a233 1
	if (!xdr_short(xdrs, &objp->dimension_1)) {
d236 1
a236 1
	if (!xdr_short(xdrs, &objp->dimension_2)) {
d239 1
a239 1
	if (!xdr_short(xdrs, &objp->smoothing)) {
d242 1
a242 1
	if (!xdr_short(xdrs, &objp->processing_code)) {
d245 1
a245 1
	if (!xdr_float(xdrs, &objp->sample_distance)) {
d248 1
a248 1
	if (!xdr_float(xdrs, &objp->isotope_halflife)) {
d251 1
a251 1
	if (!xdr_short(xdrs, &objp->frame_duration_sec)) {
d254 1
a254 1
	if (!xdr_int(xdrs, &objp->gate_duration)) {
d257 1
a257 1
	if (!xdr_int(xdrs, &objp->r_wave_offset)) {
d260 1
a260 1
	if (!xdr_float(xdrs, &objp->scale_factor)) {
d263 1
a263 1
	if (!xdr_short(xdrs, &objp->scan_min)) {
d266 1
a266 1
	if (!xdr_short(xdrs, &objp->scan_max)) {
d269 1
a269 1
	if (!xdr_int(xdrs, &objp->prompts)) {
d272 1
a272 1
	if (!xdr_int(xdrs, &objp->delayed)) {
d275 1
a275 1
	if (!xdr_int(xdrs, &objp->multiples)) {
d278 1
a278 1
	if (!xdr_int(xdrs, &objp->net_trues)) {
d281 1
a281 1
	if (!xdr_vector(xdrs, (char *)objp->cor_singles, 16, sizeof(float), xdr_float)) {
d284 1
a284 1
	if (!xdr_vector(xdrs, (char *)objp->uncor_singles, 16, sizeof(float), xdr_float)) {
d287 1
a287 1
	if (!xdr_float(xdrs, &objp->tot_avg_cor)) {
d290 1
a290 1
	if (!xdr_float(xdrs, &objp->tot_avg_uncor)) {
d293 1
a293 1
	if (!xdr_int(xdrs, &objp->total_coin_rate)) {
d296 1
a296 1
	if (!xdr_int(xdrs, &objp->frame_start_time)) {
d299 1
a299 1
	if (!xdr_int(xdrs, &objp->frame_duration)) {
d302 1
a302 1
	if (!xdr_float(xdrs, &objp->loss_correction_fctr)) {
d305 1
a305 1
	if (!xdr_vector(xdrs, (char *)objp->phy_planes, 8, sizeof(int), xdr_int)) {
d312 4
a315 3
xdr_XIMAGE_SUB(xdrs, objp)
	XDR *xdrs;
	XIMAGE_SUB *objp;
d317 1
a317 1
	if (!xdr_short(xdrs, &objp->data_type)) {
d320 1
a320 1
	if (!xdr_short(xdrs, &objp->num_dimensions)) {
d323 1
a323 1
	if (!xdr_short(xdrs, &objp->dimension_1)) {
d326 1
a326 1
	if (!xdr_short(xdrs, &objp->dimension_2)) {
d329 1
a329 1
	if (!xdr_float(xdrs, &objp->x_origin)) {
d332 1
a332 1
	if (!xdr_float(xdrs, &objp->y_origin)) {
d335 1
a335 1
	if (!xdr_float(xdrs, &objp->recon_scale)) {
d338 1
a338 1
	if (!xdr_float(xdrs, &objp->quant_scale)) {
d341 1
a341 1
	if (!xdr_short(xdrs, &objp->image_min)) {
d344 1
a344 1
	if (!xdr_short(xdrs, &objp->image_max)) {
d347 1
a347 1
	if (!xdr_float(xdrs, &objp->pixel_size)) {
d350 1
a350 1
	if (!xdr_float(xdrs, &objp->slice_width)) {
d353 1
a353 1
	if (!xdr_int(xdrs, &objp->frame_duration)) {
d356 1
a356 1
	if (!xdr_int(xdrs, &objp->frame_start_time)) {
d359 1
a359 1
	if (!xdr_short(xdrs, &objp->slice_location)) {
d362 1
a362 1
	if (!xdr_short(xdrs, &objp->recon_start_hour)) {
d365 1
a365 1
	if (!xdr_short(xdrs, &objp->recon_start_minute)) {
d368 1
a368 1
	if (!xdr_short(xdrs, &objp->recon_start_sec)) {
d371 1
a371 1
	if (!xdr_int(xdrs, &objp->recon_duration)) {
d374 1
a374 1
	if (!xdr_short(xdrs, &objp->filter_code)) {
d377 1
a377 1
	if (!xdr_int(xdrs, &objp->scan_matrix_num)) {
d380 1
a380 1
	if (!xdr_int(xdrs, &objp->norm_matrix_num)) {
d383 1
a383 1
	if (!xdr_int(xdrs, &objp->atten_cor_matrix_num)) {
d386 1
a386 1
	if (!xdr_float(xdrs, &objp->image_rotation)) {
d389 1
a389 1
	if (!xdr_float(xdrs, &objp->plane_eff_corr_fctr)) {
d392 1
a392 1
	if (!xdr_float(xdrs, &objp->decay_corr_fctr)) {
d395 1
a395 1
	if (!xdr_float(xdrs, &objp->loss_corr_fctr)) {
d398 1
a398 1
	if (!xdr_short(xdrs, &objp->processing_code)) {
d401 1
a401 1
	if (!xdr_short(xdrs, &objp->quant_units)) {
d404 1
a404 1
	if (!xdr_short(xdrs, &objp->recon_start_day)) {
d407 1
a407 1
	if (!xdr_short(xdrs, &objp->recon_start_month)) {
d410 1
a410 1
	if (!xdr_short(xdrs, &objp->recon_start_year)) {
d413 1
a413 1
	if (!xdr_float(xdrs, &objp->ecat_calibration_fctr)) {
d416 1
a416 1
	if (!xdr_float(xdrs, &objp->well_counter_cal_fctr)) {
d419 1
a419 1
	if (!xdr_vector(xdrs, (char *)objp->filter_params, 6, sizeof(float), xdr_float)) {
d422 1
a422 1
	if (!xdr_opaque(xdrs, objp->annotation, 40)) {
d429 4
a432 3
xdr_XNORM_SUB(xdrs, objp)
	XDR *xdrs;
	XNORM_SUB *objp;
d434 1
a434 1
	if (!xdr_short(xdrs, &objp->data_type)) {
d437 1
a437 1
	if (!xdr_short(xdrs, &objp->dimension_1)) {
d440 1
a440 1
	if (!xdr_short(xdrs, &objp->dimension_2)) {
d443 1
a443 1
	if (!xdr_float(xdrs, &objp->scale_factor)) {
d446 1
a446 1
	if (!xdr_short(xdrs, &objp->norm_hour)) {
d449 1
a449 1
	if (!xdr_short(xdrs, &objp->norm_minute)) {
d452 1
a452 1
	if (!xdr_short(xdrs, &objp->norm_second)) {
d455 1
a455 1
	if (!xdr_short(xdrs, &objp->norm_day)) {
d458 1
a458 1
	if (!xdr_short(xdrs, &objp->norm_month)) {
d461 1
a461 1
	if (!xdr_short(xdrs, &objp->norm_year)) {
d464 1
a464 1
	if (!xdr_float(xdrs, &objp->fov_source_width)) {
d467 1
a467 1
	if (!xdr_float(xdrs, &objp->ecat_calib_factor)) {
d474 4
a477 3
xdr_XATTEN_SUB(xdrs, objp)
	XDR *xdrs;
	XATTEN_SUB *objp;
d479 1
a479 1
	if (!xdr_short(xdrs, &objp->data_type)) {
d482 1
a482 1
	if (!xdr_short(xdrs, &objp->attenuation_type)) {
d485 1
a485 1
	if (!xdr_short(xdrs, &objp->dimension_1)) {
d488 1
a488 1
	if (!xdr_short(xdrs, &objp->dimension_2)) {
d491 1
a491 1
	if (!xdr_float(xdrs, &objp->scale_factor)) {
d494 1
a494 1
	if (!xdr_float(xdrs, &objp->x_origin)) {
d497 1
a497 1
	if (!xdr_float(xdrs, &objp->y_origin)) {
d500 1
a500 1
	if (!xdr_float(xdrs, &objp->x_radius)) {
d503 1
a503 1
	if (!xdr_float(xdrs, &objp->y_radius)) {
d506 1
a506 1
	if (!xdr_float(xdrs, &objp->tilt_angle)) {
d509 1
a509 1
	if (!xdr_float(xdrs, &objp->attenuation_coeff)) {
d512 1
a512 1
	if (!xdr_float(xdrs, &objp->sample_distance)) {
d519 4
a522 3
xdr_CREF_args(xdrs, objp)
	XDR *xdrs;
	CREF_args *objp;
d524 1
a524 1
	if (!xdr_string(xdrs, &objp->file_name, 64)) {
d527 1
a527 1
	if (!xdr_XMAIN_HEAD(xdrs, &objp->mhead)) {
d530 1
a530 1
	if (!xdr_int(xdrs, &objp->data_size)) {
d537 4
a540 3
xdr_DPLN_args(xdrs, objp)
	XDR *xdrs;
	DPLN_args *objp;
d542 1
a542 1
	if (!xdr_int(xdrs, &objp->log_plane)) {
d545 1
a545 1
	if (!xdr_vector(xdrs, (char *)objp->phy_plane, 6, sizeof(int), xdr_int)) {
d552 4
a555 3
xdr_DFRM_args(xdrs, objp)
	XDR *xdrs;
	DFRM_args *objp;
d557 1
a557 1
	if (!xdr_int(xdrs, &objp->nframes)) {
d560 1
a560 1
	if (!xdr_int(xdrs, &objp->delay)) {
d563 1
a563 1
	if (!xdr_int(xdrs, &objp->duration)) {
d566 1
a566 1
	if (!xdr_int(xdrs, &objp->nsegs)) {
d573 4
a576 3
xdr_MODL_args(xdrs, objp)
	XDR *xdrs;
	MODL_args *objp;
d578 1
a578 1
	if (!xdr_int(xdrs, &objp->model)) {
d581 1
a581 1
	if (!xdr_int(xdrs, &objp->number_of_rings)) {
d588 4
a591 3
xdr_CFRM_args(xdrs, objp)
	XDR *xdrs;
	CFRM_args *objp;
d593 1
a593 1
	if (!xdr_int(xdrs, &objp->frame)) {
d596 1
a596 1
	if (!xdr_int(xdrs, &objp->delay)) {
d599 1
a599 1
	if (!xdr_int(xdrs, &objp->duration)) {
d606 4
a609 3
xdr_CONF_args(xdrs, objp)
	XDR *xdrs;
	CONF_args *objp;
d611 1
a611 1
	if (!xdr_int(xdrs, &objp->config)) {
d614 1
a614 1
	if (!xdr_float(xdrs, &objp->pile_up_factor)) {
d617 1
a617 1
	if (!xdr_float(xdrs, &objp->plane_factor)) {
d624 4
a627 3
xdr_STRT_args(xdrs, objp)
	XDR *xdrs;
	STRT_args *objp;
d629 1
a629 1
	if (!xdr_int(xdrs, &objp->numberFrames)) {
d632 1
a632 1
	if (!xdr_int(xdrs, &objp->acqType)) {
d639 4
a642 3
xdr_RECT_args(xdrs, objp)
	XDR *xdrs;
	RECT_args *objp;
d644 1
a644 1
	if (!xdr_int(xdrs, &objp->frame)) {
d647 1
a647 1
	if (!xdr_int(xdrs, &objp->plane)) {
d650 1
a650 1
	if (!xdr_int(xdrs, &objp->segment)) {
d653 1
a653 1
	if (!xdr_int(xdrs, &objp->data)) {
d656 1
a656 1
	if (!xdr_int(xdrs, &objp->startView)) {
d659 1
a659 1
	if (!xdr_int(xdrs, &objp->endView)) {
d666 4
a669 3
xdr_STOR_args(xdrs, objp)
	XDR *xdrs;
	STOR_args *objp;
d671 1
a671 1
	if (!xdr_string(xdrs, &objp->filename, ~0)) {
d674 1
a674 1
	if (!xdr_int(xdrs, &objp->frame)) {
d677 1
a677 1
	if (!xdr_int(xdrs, &objp->matframe)) {
d680 1
a680 1
	if (!xdr_int(xdrs, &objp->bed)) {
d687 4
a690 3
xdr_ASTR_args(xdrs, objp)
	XDR *xdrs;
	ASTR_args *objp;
d692 1
a692 1
	if (!xdr_string(xdrs, &objp->file_name, 64)) {
d695 1
a695 1
	if (!xdr_int(xdrs, &objp->auto_store)) {
d702 4
a705 3
xdr_GLOG_args(xdrs, objp)
	XDR *xdrs;
	GLOG_args *objp;
d707 1
a707 1
	if (!xdr_string(xdrs, &objp->filename, ~0)) {
d710 1
a710 1
	if (!xdr_int(xdrs, &objp->frame)) {
d713 1
a713 1
	if (!xdr_int(xdrs, &objp->plane)) {
d716 1
a716 1
	if (!xdr_int(xdrs, &objp->segment)) {
d719 1
a719 1
	if (!xdr_int(xdrs, &objp->data)) {
d722 1
a722 1
	if (!xdr_int(xdrs, &objp->bed)) {
d729 4
a732 3
xdr_GIMI_args(xdrs, objp)
	XDR *xdrs;
	GIMI_args *objp;
d734 1
a734 1
	if (!xdr_int(xdrs, &objp->frame)) {
d737 1
a737 1
	if (!xdr_int(xdrs, &objp->plane)) {
d740 1
a740 1
	if (!xdr_int(xdrs, &objp->segment)) {
d743 1
a743 1
	if (!xdr_int(xdrs, &objp->data)) {
d746 1
a746 1
	if (!xdr_int(xdrs, &objp->bed)) {
d753 4
a756 3
xdr_SNGL_args(xdrs, objp)
	XDR *xdrs;
	SNGL_args *objp;
d758 1
a758 1
	if (!xdr_int(xdrs, &objp->start_bucket)) {
d761 1
a761 1
	if (!xdr_int(xdrs, &objp->end_bucket)) {
d764 1
a764 1
	if (!xdr_int(xdrs, &objp->frequency)) {
d767 1
a767 1
	if (!xdr_int(xdrs, &objp->timeout)) {
d770 1
a770 1
	if (!xdr_int(xdrs, &objp->num_ipcs)) {
d777 4
a780 3
xdr_RBLK_args(xdrs, objp)
	XDR *xdrs;
	RBLK_args *objp;
d782 1
a782 1
	if (!xdr_string(xdrs, &objp->filename, ~0)) {
d785 1
a785 1
	if (!xdr_int(xdrs, &objp->block_number)) {
d792 4
a795 3
xdr_WBLK_args(xdrs, objp)
	XDR *xdrs;
	WBLK_args *objp;
d797 1
a797 1
	if (!xdr_string(xdrs, &objp->filename, ~0)) {
d800 1
a800 1
	if (!xdr_int(xdrs, &objp->block_number)) {
d803 1
a803 1
	if (!xdr_opaque(xdrs, objp->wblk, 512)) {
d810 4
a813 3
xdr_GIMI_resp(xdrs, objp)
	XDR *xdrs;
	GIMI_resp *objp;
d815 1
a815 1
	if (!xdr_int(xdrs, &objp->time)) {
d818 1
a818 1
	if (!xdr_int(xdrs, &objp->start_time)) {
d821 1
a821 1
	if (!xdr_int(xdrs, &objp->nproj)) {
d824 1
a824 1
	if (!xdr_int(xdrs, &objp->nview)) {
d827 1
a827 1
	if (!xdr_int(xdrs, &objp->minval)) {
d830 1
a830 1
	if (!xdr_int(xdrs, &objp->maxval)) {
d833 1
a833 1
	if (!xdr_int(xdrs, &objp->prompts)) {
d836 1
a836 1
	if (!xdr_int(xdrs, &objp->delayeds)) {
d839 1
a839 1
	if (!xdr_int(xdrs, &objp->multiples)) {
d842 1
a842 1
	if (!xdr_vector(xdrs, (char *)objp->corrected_sing, 64, sizeof(int), xdr_int)) {
d845 1
a845 1
	if (!xdr_vector(xdrs, (char *)objp->uncorrected_sing, 64, sizeof(int), xdr_int)) {
d848 1
a848 1
	if (!xdr_int(xdrs, &objp->total_ipc_prompts)) {
d851 1
a851 1
	if (!xdr_int(xdrs, &objp->total_ipc_delayeds)) {
d854 1
a854 1
	if (!xdr_int(xdrs, &objp->total_ipc_multiples)) {
d857 1
a857 1
	if (!xdr_int(xdrs, &objp->status)) {
d864 4
a867 3
xdr_GLOG_resp(xdrs, objp)
	XDR *xdrs;
	GLOG_resp *objp;
d869 1
a869 1
	if (!xdr_int(xdrs, &objp->time)) {
d872 1
a872 1
	if (!xdr_int(xdrs, &objp->start_time)) {
d875 1
a875 1
	if (!xdr_int(xdrs, &objp->minval)) {
d878 1
a878 1
	if (!xdr_int(xdrs, &objp->maxval)) {
d881 1
a881 1
	if (!xdr_int(xdrs, &objp->prompts)) {
d884 1
a884 1
	if (!xdr_int(xdrs, &objp->delayeds)) {
d887 1
a887 1
	if (!xdr_int(xdrs, &objp->multiples)) {
d890 1
a890 1
	if (!xdr_int(xdrs, &objp->net_trues)) {
d893 1
a893 1
	if (!xdr_float(xdrs, &objp->dtcor)) {
d896 1
a896 1
	if (!xdr_int(xdrs, &objp->status)) {
d903 4
a906 3
xdr_INFO_resp(xdrs, objp)
	XDR *xdrs;
	INFO_resp *objp;
d908 1
a908 1
	if (!xdr_int(xdrs, &objp->acq_status)) {
d911 1
a911 1
	if (!xdr_int(xdrs, &objp->total_time)) {
d914 1
a914 1
	if (!xdr_int(xdrs, &objp->prompt_events)) {
d917 1
a917 1
	if (!xdr_int(xdrs, &objp->delayed_events)) {
d920 1
a920 1
	if (!xdr_int(xdrs, &objp->multiple_events)) {
d923 1
a923 1
	if (!xdr_int(xdrs, &objp->current_frame)) {
d926 1
a926 1
	if (!xdr_int(xdrs, &objp->total_frames)) {
d929 1
a929 1
	if (!xdr_int(xdrs, &objp->frame_time)) {
d932 1
a932 1
	if (!xdr_int(xdrs, &objp->frame_end_time)) {
d935 1
a935 1
	if (!xdr_int(xdrs, &objp->scan_end_time)) {
d938 1
a938 1
	if (!xdr_int(xdrs, &objp->singles_Kcps_corrected)) {
d941 1
a941 1
	if (!xdr_int(xdrs, &objp->singles_Kcps_uncorrected)) {
d944 1
a944 1
	if (!xdr_int(xdrs, &objp->total_ipc_prompt_rate)) {
d947 1
a947 1
	if (!xdr_int(xdrs, &objp->total_ipc_delayed_rate)) {
d950 1
a950 1
	if (!xdr_int(xdrs, &objp->total_ipc_multiple_rate)) {
d953 1
a953 1
	if (!xdr_int(xdrs, &objp->contig_disk_space)) {
d960 4
a963 3
xdr_RBLK_resp(xdrs, objp)
	XDR *xdrs;
	RBLK_resp *objp;
d965 1
a965 1
	if (!xdr_int(xdrs, &objp->status)) {
d968 1
a968 1
	if (!xdr_opaque(xdrs, objp->rblk, 512)) {
d975 4
a978 3
xdr_RMHD_resp(xdrs, objp)
	XDR *xdrs;
	RMHD_resp *objp;
d980 1
a980 1
	if (!xdr_int(xdrs, &objp->status)) {
d983 1
a983 1
	if (!xdr_XMAIN_HEAD(xdrs, &objp->xmain_head)) {
d990 4
a993 3
xdr_WMHD_args(xdrs, objp)
	XDR *xdrs;
	WMHD_args *objp;
d995 1
a995 1
	if (!xdr_string(xdrs, &objp->file_name, ~0)) {
d998 1
a998 1
	if (!xdr_XMAIN_HEAD(xdrs, &objp->xmain_head)) {
d1005 4
a1008 3
xdr_RSHD_args(xdrs, objp)
	XDR *xdrs;
	RSHD_args *objp;
d1010 1
a1010 1
	if (!xdr_string(xdrs, &objp->file_name, ~0)) {
d1013 1
a1013 1
	if (!xdr_int(xdrs, &objp->matnum)) {
d1020 4
a1023 3
xdr_RSHD_resp(xdrs, objp)
	XDR *xdrs;
	RSHD_resp *objp;
d1025 1
a1025 1
	if (!xdr_int(xdrs, &objp->status)) {
d1028 1
a1028 1
	if (!xdr_opaque(xdrs, objp->rhdat, 512)) {
d1035 4
a1038 3
xdr_WSHD_args(xdrs, objp)
	XDR *xdrs;
	WSHD_args *objp;
d1040 1
a1040 1
	if (!xdr_string(xdrs, &objp->file_name, ~0)) {
d1043 1
a1043 1
	if (!xdr_int(xdrs, &objp->matnum)) {
d1046 1
a1046 1
	if (!xdr_opaque(xdrs, objp->whdat, 512)) {
d1053 4
a1056 3
xdr_RDAT_args(xdrs, objp)
	XDR *xdrs;
	RDAT_args *objp;
d1058 1
a1058 1
	if (!xdr_string(xdrs, &objp->file_name, ~0)) {
d1061 1
a1061 1
	if (!xdr_int(xdrs, &objp->matnum)) {
d1068 4
a1071 3
xdr_RDAT_resp(xdrs, objp)
	XDR *xdrs;
	RDAT_resp *objp;
d1073 1
a1073 1
	if (!xdr_int(xdrs, &objp->status)) {
d1076 1
a1076 1
	if (!xdr_bytes(xdrs, (char **)&objp->rdat.rdat_val, (u_int *)&objp->rdat.rdat_len, ~0)) {
d1083 4
a1086 3
xdr_WDAT_args(xdrs, objp)
	XDR *xdrs;
	WDAT_args *objp;
d1088 1
a1088 1
	if (!xdr_string(xdrs, &objp->file_name, ~0)) {
d1091 1
a1091 1
	if (!xdr_int(xdrs, &objp->matnum)) {
d1094 1
a1094 1
	if (!xdr_int(xdrs, &objp->data_type)) {
d1097 1
a1097 1
	if (!xdr_bytes(xdrs, (char **)&objp->wdat.wdat_val, (u_int *)&objp->wdat.wdat_len, ~0)) {
@


1.1
log
@Initial revision
@
text
@d1 3
d13 1
a13 1
static char rcsid [] = "$Id$";
@
