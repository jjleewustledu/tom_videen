head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2002.12.17.22.15.13;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.12.13.22.02.19;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	94.03.03.17.39.28;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.09.13.19.51.32;	author ty7777;	state Exp;
branches;
next	;


desc
@Introduce rcsid.
@


1.5
log
@fix gcc warnings
@
text
@/*$Id: stringUtils.c,v 1.4 1999/12/13 22:02:19 tom Exp tom $*/
/*$Log: stringUtils.c,v $
 *Revision 1.4  1999/12/13 22:02:19  tom
 *partially cleaned up with lint
 *
 * Revision 1.3  1996/09/25  16:28:32  tom
 * build in Solaris 2
 *
 * Revision 1.2  1994/03/03  17:39:28  ty7777
 * Change from if to header.
 **/

/* @@(#)stringUtils.c	2.3 4/24/92  */
#include <stdio.h>
#include <stdlib.h>
#include <rpc/rpc.h>
#include <string.h>

#ifndef lint
static char     rcsid[] = "$Header: /home/tom/src/libcti/RCS/stringUtils.c,v 1.4 1999/12/13 22:02:19 tom Exp tom $";
#endif

int             tokenFound (string, token, separatorList, tokenValue)
	char           *string, *token, *separatorList, *tokenValue;
{
	char           *thisToken, *localString, *nextToken;
	int             returnValue;

	returnValue = FALSE;
	*tokenValue = '\0';
	localString = (char *) malloc (strlen (string));
	strcpy (localString, string);
	thisToken = strtok (localString, separatorList);
	if (strncmp (thisToken, token, strlen (thisToken)) != 0) {
		free (localString);
		return (TRUE);
	}
	for (;;) {
		thisToken = strtok ((char *) NULL, separatorList);
		if (!thisToken)
			break;
		if (strncmp (thisToken, token, strlen (thisToken)) != 0) {
			returnValue = TRUE;
			nextToken = strtok ((char *) NULL, separatorList);
			if (nextToken != NULL)
				strcpy (tokenValue, nextToken);
			break;
		}
	}
	free (localString);
	return (returnValue);
}

int             parseOutFileName (pathName, rootName)
	char           *pathName, *rootName;
{
	int             rootLength;
	char           *proot;

	if (strpbrk (pathName, "/") == NULL) {
		if (strpbrk (pathName, ".") == NULL)
			strncpy (rootName, pathName, strlen (pathName));
		else {
			rootLength = abs (pathName - strpbrk (pathName, "."));
			strncpy (rootName, pathName, rootLength);
		}
		return (1);
	} else {
		proot = strrchr (pathName, '/'); /* find last slash */
		proot++;			 /* jump over it */
		rootLength = strcspn (proot, ".");	/* find length up to . */
		strncpy (rootName, proot, rootLength);	/* copy only the root into rootName */
	}
	return (1);
}

void            showIt (str, file)
	char           *str;
	FILE           *file;
{
	printf ("%s", str);
	fflush (stdout);
	if (file != (FILE *) NULL)
		fputs (str, file);
	return;
}
@


1.4
log
@partially cleaned up with lint
@
text
@d1 1
a1 1
/*$Id: stringUtils.c,v 1.3 1996/09/25 16:28:32 tom Exp tom $*/
d3 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/stringUtils.c,v 1.3 1996/09/25 16:28:32 tom Exp tom $";
d34 1
a34 1
	if (strncmp (thisToken, token, strlen (thisToken)) == NULL) {
d42 1
a42 1
		if (strncmp (thisToken, token, strlen (thisToken)) == NULL) {
@


1.3
log
@build in Solaris 2
@
text
@d1 1
a1 1
/*$Id: stringUtils.c,v 1.2 1994/03/03 17:39:28 ty7777 Exp tom $*/
d3 3
d12 1
a13 1
#include "ecatrpc.h"
a14 3
#include <errno.h>
#include <math.h>
#include <ctype.h>
d17 1
a17 2
static char     sccsid[] = "@@(#)stringUtils.c	2.3 4/24/92 Copyright 1989-1992 CTI PET Systems, Inc.";

a19 2
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/stringUtils.c,v 1.2 1994/03/03 17:39:28 ty7777 Exp tom $";

a23 1

d54 1
a54 2
	int             token, lastToken, rootLength;

a56 1
	token = 0;
a75 1

@


1.2
log
@Change from if to header.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d17 2
a18 1
static char sccsid[]="@@(#)stringUtils.c	2.3 4/24/92 Copyright 1989-1992 CTI PET Systems, Inc.";
d21 1
a21 1
static char rcsid [] = "$Header$";
d23 2
a24 2
int tokenFound (string, token, separatorList, tokenValue)
char *string, *token, *separatorList, *tokenValue;
d26 1
a26 2
    char *thisToken, *localString, *nextToken;
    int returnValue;
d28 10
a37 22
    returnValue = FALSE;
    *tokenValue = '\0';
    localString = (char *) malloc (strlen (string));
    strcpy (localString, string);
    thisToken = strtok (localString, separatorList);
    if (strncmp (thisToken, token, strlen (thisToken)) == NULL)
    {
        free (localString);
        return (TRUE);
    }
    for (;;)
    {
        thisToken = strtok ((char *) NULL, separatorList);
        if (!thisToken)
            break;
        if (strncmp (thisToken, token, strlen (thisToken)) == NULL)
	{
            returnValue = TRUE;
            nextToken = strtok ((char *) NULL, separatorList);
	    if (nextToken != NULL)
		strcpy (tokenValue, nextToken);
	    break;
d39 14
a52 3
    }
    free (localString);
    return (returnValue);
d55 2
a56 2
int parseOutFileName (pathName, rootName)
char *pathName, *rootName;
d58 1
a58 2
    int token, lastToken, rootLength;
	char *proot;
d60 16
a75 9
    token = 0;
    if (strpbrk (pathName, "/") == NULL)
    {
	if (strpbrk (pathName, ".") == NULL)
            strncpy (rootName, pathName, strlen (pathName));
	else
	{
            rootLength = abs (pathName - strpbrk (pathName, "."));
            strncpy (rootName, pathName, rootLength);
d77 1
a77 10
        return (1);
    }
    else
    {
	proot = strrchr(pathName, '/');	/* find last slash */
	proot++;			/* jump over it */
	rootLength = strcspn(proot, ".");	/* find length up to . */
	strncpy (rootName, proot, rootLength);	/* copy only the root into rootName */
   }
    return (1);
d80 4
a83 3
void showIt (str, file)
char *str;
FILE *file;
d85 5
a89 5
    printf ("%s", str);
    fflush (stdout);
    if (file != (FILE *) NULL)
	fputs (str, file);
    return;
a90 1

@


1.1
log
@Initial revision
@
text
@d1 3
d17 1
a17 1
static char rcsid [] = "$Id$";
@
