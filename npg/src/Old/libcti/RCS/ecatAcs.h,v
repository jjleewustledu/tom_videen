head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	99.12.13.22.02.19;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	94.03.11.19.31.26;	author ty7777;	state Exp;
branches;
next	;


desc
@Added rcs headers.
@


1.3
log
@partially cleaned up with lint
@
text
@/*$Id: ecatAcs.h,v 1.2 1996/09/25 16:28:32 tom Exp tom $*/
/*$Log: ecatAcs.h,v $
 * Revision 1.2  1996/09/25  16:28:32  tom
 * build in Solaris 2
 *
 * Revision 1.1  1994/03/11  19:31:26  ty7777
 * Initial revision
 **/

#ifndef ECATACS_INCLUDED
#define ECATACS_INCLUDED
#ifndef lint
static char     rcsid_ecatAcs[] = "$Header: /home/npggw/tom/src/libcti/RCS/ecatAcs.h,v 1.2 1996/09/25 16:28:32 tom Exp tom $";
#endif

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/types.h>

/* @@(#)ecatAcs.x	2.4 12/2/91 */
#define ECAT_ACS_SERVER 600000035
#define ECAT_ACS_VERSION 1
#define FrameServer 600000037
#define FrameServerVersion 1
#define ArchiveNotifyServer 600000042
#define ArchiveNotifyServerVersion 1

enum ECAT_ACS_FUNCTIONS {
	ACS_MAGPIE = 1,
	ACS_ALLOCATE = 1 + 1,
	ACS_DEALLOCATE = 1 + 2,
	MCS_ALLOCATE = 1 + 3,
	MCS_DEALLOCATE = 1 + 4,
	ACS_WHAT_TIME_IS_IT = 1 + 5,
	ACS_FRAME_COMPLETE = 1 + 6,
	ACS_FRAME_TRANSFERRED = 1 + 7,
	IS_THIS_FRAME_COMPLETE = 1 + 8,
	IS_THIS_FRAME_TRANSFERRED = 1 + 9,
	RESET_FRAME_TRANSFERRED = 1 + 10,
	ACS_IMAGE_COMPLETE = 1 + 11,
	TELL_ME_ABOUT_STUFF = 1 + 12,
	STOP_TELLING_ME = 1 + 13,
	INIT_MY_MCS = 1 + 14,
	ACQ_STARTED = 1 + 15,
	RFA_FORMAT_COMPLETE = 1 + 16,
	RFA_FORMAT_STARTED = 1 + 17,
	IS_FORMAT_COMPLETE = 1 + 18,
	GEN_LOG_FILE = 1 + 19,
	NOGEN_LOG_FILE = 1 + 20,
	DELETE_LOG_ENTRY = 1 + 21,
	DUMP_ECAT_CONFIGURATION = 1 + 22,
	ARC_GET_TIME_FROM_DATE = 1 + 23,
	ARC_GET_DATE_FROM_TIME = 1 + 24,
	ARC_SET_FILE_MTIME = 1 + 25,
	ARC_GET_FILE_STAT = 1 + 26,
	ARC_JOB_NOTIFY = 1 + 27,
	ARC_STAT_TBD = 1 + 28
};

typedef enum ECAT_ACS_FUNCTIONS ECAT_ACS_FUNCTIONS;

bool_t          xdr_ECAT_ACS_FUNCTIONS ();

struct ButtonId {
	int             requestorPid;
	char           *requestedNode;
};

typedef struct ButtonId ButtonId;

bool_t          xdr_ButtonId ();

struct TIMEX_resp {
	int             seconds;
	int             minute;
	int             hour;
	int             day;
	int             month;
	int             year;
};

typedef struct TIMEX_resp TIMEX_resp;

bool_t          xdr_TIMEX_resp ();

struct TELL_ME_args {
	char           *whoIam;
	int             tellMeAboutFrames;
	int             frameServerProg;
	int             frameServerVers;
	int             tellMeAboutImages;
	int             imageServerProg;
	int             imageServerVers;
	int             tellMeAboutArchives;
	int             archiveServerProg;
	int             archiveServerVers;
};

typedef struct TELL_ME_args TELL_ME_args;

bool_t          xdr_TELL_ME_args ();

struct TELL_ME_resp {
	int             frameServerProg;
	int             frameServerVers;
	int             tellMeAboutImages;
	int             imageServerProg;
	int             imageServerVers;
	int             archiveServerProg;
	int             archiveServerVers;
};

typedef struct TELL_ME_resp TELL_ME_resp;

bool_t          xdr_TELL_ME_resp ();

struct STOP_TELLING_ME_args {
	char           *whoIam;
	int             tellMeAboutFrames;
	int             frameServerProg;
	int             frameServerVers;
	int             tellMeAboutImages;
	int             imageServerProg;
	int             imageServerVers;
	int             tellMeAboutArchives;
	int             archiveServerProg;
	int             archiveServerVers;
};

typedef struct STOP_TELLING_ME_args STOP_TELLING_ME_args;

bool_t          xdr_STOP_TELLING_ME_args ();

struct GEN_LOG_FILE_args {
	char           *file;
	int             frame;
	int             matframe;
	int             bed;
	int             append;
};

typedef struct GEN_LOG_FILE_args GEN_LOG_FILE_args;

bool_t          xdr_GEN_LOG_FILE_args ();

struct DELETE_LOG_ENTRY_args {
	char           *file;
	int             frame;
	int             matframe;
	int             bed;
};

typedef struct DELETE_LOG_ENTRY_args DELETE_LOG_ENTRY_args;

bool_t          xdr_DELETE_LOG_ENTRY_args ();

struct ARC_JOB_NOTIFY_args {
	int             status;
	int             jobtype;
	int             error_code;
	char           *study;
	char           *vol_name;
	char           *filespec;
};

typedef struct ARC_JOB_NOTIFY_args ARC_JOB_NOTIFY_args;

bool_t          xdr_ARC_JOB_NOTIFY_args ();

struct ARC_GET_FILE_STAT_args {
	short           st_dev;
	u_long          st_ino;
	u_short         st_mode;
	short           st_nlink;
	u_short         st_uid;
	u_short         st_gid;
	short           st_rdev;
	long            st_size;
	u_long          st_atime0;
	int             st_spare1;
	u_long          st_mtime0;
	int             st_spare2;
	u_long          st_ctime0;
	int             st_spare3;
	long            st_blksize;
	long            st_blocks;
	long            st_spare4[2];
};

typedef struct ARC_GET_FILE_STAT_args ARC_GET_FILE_STAT_args;

bool_t          xdr_ARC_GET_FILE_STAT_args ();

struct ARC_SET_FILE_MTIME_args {
	char           *filename;
	u_long          mtime;
};

typedef struct ARC_SET_FILE_MTIME_args ARC_SET_FILE_MTIME_args;

bool_t          xdr_ARC_SET_FILE_MTIME_args ();

#endif						 /* ECATACS_INCLUDED */
@


1.2
log
@build in Solaris 2
@
text
@d1 1
a1 1
/*$Id: ecatAcs.h,v 1.1 1994/03/11 19:31:26 ty7777 Exp tom $*/
d3 3
d12 3
a15 3
static char     rcsid_ecatAcs[] = "$Header: /home/npggw/tom/src/libcti/RCS/ecatAcs.h,v 1.1 1994/03/11 19:31:26 ty7777 Exp tom $";


d60 1
a60 1
	ARC_STAT_TBD = 1 + 28,
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d10 1
a10 1
static char rcsid_ecatAcs [] = "$Header$";
d59 1
a60 1
bool_t xdr_ECAT_ACS_FUNCTIONS();
d62 2
d65 2
a66 2
	int requestorPid;
	char *requestedNode;
d68 1
a69 1
bool_t xdr_ButtonId();
d71 2
d74 6
a79 6
	int seconds;
	int minute;
	int hour;
	int day;
	int month;
	int year;
d81 1
a82 1
bool_t xdr_TIMEX_resp();
d84 2
d87 10
a96 10
	char *whoIam;
	int tellMeAboutFrames;
	int frameServerProg;
	int frameServerVers;
	int tellMeAboutImages;
	int imageServerProg;
	int imageServerVers;
	int tellMeAboutArchives;
	int archiveServerProg;
	int archiveServerVers;
d98 1
a99 1
bool_t xdr_TELL_ME_args();
d101 2
d104 7
a110 7
	int frameServerProg;
	int frameServerVers;
	int tellMeAboutImages;
	int imageServerProg;
	int imageServerVers;
	int archiveServerProg;
	int archiveServerVers;
d112 1
a113 1
bool_t xdr_TELL_ME_resp();
d115 2
d118 10
a127 10
	char *whoIam;
	int tellMeAboutFrames;
	int frameServerProg;
	int frameServerVers;
	int tellMeAboutImages;
	int imageServerProg;
	int imageServerVers;
	int tellMeAboutArchives;
	int archiveServerProg;
	int archiveServerVers;
d129 1
a130 1
bool_t xdr_STOP_TELLING_ME_args();
d132 2
d135 5
a139 5
	char *file;
	int frame;
	int matframe;
	int bed;
	int append;
d141 1
a142 1
bool_t xdr_GEN_LOG_FILE_args();
d144 2
d147 4
a150 4
	char *file;
	int frame;
	int matframe;
	int bed;
d152 1
a153 1
bool_t xdr_DELETE_LOG_ENTRY_args();
d155 2
d158 6
a163 6
	int status;
	int jobtype;
	int error_code;
	char *study;
	char *vol_name;
	char *filespec;
d165 1
a166 1
bool_t xdr_ARC_JOB_NOTIFY_args();
d168 2
d171 17
a187 17
	short st_dev;
	u_long st_ino;
	u_short st_mode;
	short st_nlink;
	u_short st_uid;
	u_short st_gid;
	short st_rdev;
	long st_size;
	u_long st_atime;
	int st_spare1;
	u_long st_mtime;
	int st_spare2;
	u_long st_ctime;
	int st_spare3;
	long st_blksize;
	long st_blocks;
	long st_spare4[2];
d189 1
a190 1
bool_t xdr_ARC_GET_FILE_STAT_args();
d192 2
d195 2
a196 2
	char *filename;
	u_long mtime;
d198 1
a199 1
bool_t xdr_ARC_SET_FILE_MTIME_args();
d201 3
a203 1
#endif /* ECATACS_INCLUDED */
@
