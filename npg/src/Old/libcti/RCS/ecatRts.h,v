head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	99.12.13.22.02.19;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	94.03.11.19.45.40;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.3
log
@partially cleaned up with lint
@
text
@/*$Id: ecatRts.h,v 1.2 1996/09/25 16:28:32 tom Exp tom $*/
/*$Log: ecatRts.h,v $
 * Revision 1.2  1996/09/25  16:28:32  tom
 * build in Solaris 2
 *
 * Revision 1.1  1994/03/11  19:45:40  ty7777
 * Initial revision
 **/

#ifndef ECATRTS_INCLUDED
#define ECATRTS_INCLUDED

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/types.h>

/* @@(#)ecatRts.x	2.2 9/20/91 */
#define RTS_SERVER 600000032
#define RTS_SERVER_VERSION 1
#define RTS_INFO_SERVER 600000036
#define RTS_INFO_VERSION 1

#ifndef lint
static char     rcsid_ecatrts[] = "$Header: /home/npggw/tom/src/libcti/RCS/ecatRts.h,v 1.2 1996/09/25 16:28:32 tom Exp tom $";
#endif

enum RTS_FUNCTIONS {
	CONF = 1,
	DPLN = 1 + 1,
	DFRM = 1 + 2,
	SINM = 1 + 3,
	RESO = 1 + 4,
	STRT = 1 + 5,
	STOP = 1 + 6,
	FCLR = 1 + 7,
	INFO = 1 + 8,
	STOR = 1 + 9,
	GANT = 1 + 10,
	RGAN = 1 + 11,
	SNGL = 1 + 12,
	DBUG = 1 + 13,
	CREF = 1 + 14,
	DCRF = 1 + 15,
	REMS = 1 + 16,
	MODL = 1 + 17,
	GIMI = 1 + 18,
	THRT = 1 + 19,
	CONT = 1 + 20,
	RMHD = 1 + 21,
	WMHD = 1 + 22,
	RSHD = 1 + 23,
	WSHD = 1 + 24,
	RDAT = 1 + 25,
	WDAT = 1 + 26,
	FDEL = 1 + 27,
	ASTR = 1 + 28,
	DFOV = 1 + 29,
	MASH = 1 + 30,
	RBLK = 1 + 31,
	WBLK = 1 + 32,
	RECT = 1 + 33,
	GLOG = 1 + 34,
	GCTL = 1 + 35,
	ACQM = 1 + 36,
	RWIN = 1 + 37,
	RRDB = 1 + 38
};

typedef enum RTS_FUNCTIONS RTS_FUNCTIONS;

bool_t          xdr_RTS_FUNCTIONS ();

enum RTS_INFO_FUNCTIONS {
	INFO_STRT = 1,
	INFO_STOP = 1 + 1
};

typedef enum RTS_INFO_FUNCTIONS RTS_INFO_FUNCTIONS;

bool_t          xdr_RTS_INFO_FUNCTIONS ();

struct XMAIN_HEAD {
	char            original_file_name[20];
	short           sw_version;
	short           data_type;
	short           system_type;
	short           file_type;
	char            node_id[10];
	short           scan_start_day;
	short           scan_start_month;
	short           scan_start_year;
	short           scan_start_hour;
	short           scan_start_minute;
	short           scan_start_second;
	char            isotope_code[8];
	float           isotope_halflife;
	char            radiopharmaceutical[32];
	float           gantry_tilt;
	float           gantry_rotation;
	float           bed_elevation;
	short           rot_source_speed;
	short           wobble_speed;
	short           transm_source_type;
	float           axial_fov;
	float           transaxial_fov;
	short           transaxial_samp_mode;
	short           coin_samp_mode;
	short           axial_samp_mode;
	float           calibration_factor;
	short           calibration_units;
	short           compression_code;
	char            study_name[12];
	char            patient_id[16];
	char            patient_name[32];
	char            patient_sex[1];
	char            patient_age[10];
	char            patient_height[10];
	char            patient_weight[10];
	char            patient_dexterity[1];
	char            physician_name[32];
	char            operator_name[32];
	char            study_description[32];
	short           acquisition_type;
	short           bed_type;
	short           septa_type;
	char            facility_name[20];
	short           num_planes;
	short           num_frames;
	short           num_gates;
	short           num_bed_pos;
	float           init_bed_position;
	float           bed_offset[15];
	float           plane_separation;
	short           lwr_sctr_thres;
	short           lwr_true_thres;
	short           upr_true_thres;
	float           collimator;
	char            user_process_code[10];
	short           acquisition_mode;
};

typedef struct XMAIN_HEAD XMAIN_HEAD;

bool_t          xdr_XMAIN_HEAD ();

struct XSCAN_SUB {
	short           data_type;
	short           dimension_1;
	short           dimension_2;
	short           smoothing;
	short           processing_code;
	float           sample_distance;
	float           isotope_halflife;
	short           frame_duration_sec;
	int             gate_duration;
	int             r_wave_offset;
	float           scale_factor;
	short           scan_min;
	short           scan_max;
	int             prompts;
	int             delayed;
	int             multiples;
	int             net_trues;
	float           cor_singles[16];
	float           uncor_singles[16];
	float           tot_avg_cor;
	float           tot_avg_uncor;
	int             total_coin_rate;
	int             frame_start_time;
	int             frame_duration;
	float           loss_correction_fctr;
	int             phy_planes[8];
};

typedef struct XSCAN_SUB XSCAN_SUB;

bool_t          xdr_XSCAN_SUB ();

struct XIMAGE_SUB {
	short           data_type;
	short           num_dimensions;
	short           dimension_1;
	short           dimension_2;
	float           x_origin;
	float           y_origin;
	float           recon_scale;
	float           quant_scale;
	short           image_min;
	short           image_max;
	float           pixel_size;
	float           slice_width;
	int             frame_duration;
	int             frame_start_time;
	short           slice_location;
	short           recon_start_hour;
	short           recon_start_minute;
	short           recon_start_sec;
	int             recon_duration;
	short           filter_code;
	int             scan_matrix_num;
	int             norm_matrix_num;
	int             atten_cor_matrix_num;
	float           image_rotation;
	float           plane_eff_corr_fctr;
	float           decay_corr_fctr;
	float           loss_corr_fctr;
	short           processing_code;
	short           quant_units;
	short           recon_start_day;
	short           recon_start_month;
	short           recon_start_year;
	float           ecat_calibration_fctr;
	float           well_counter_cal_fctr;
	float           filter_params[6];
	char            annotation[40];
};

typedef struct XIMAGE_SUB XIMAGE_SUB;

bool_t          xdr_XIMAGE_SUB ();

struct XNORM_SUB {
	short           data_type;
	short           dimension_1;
	short           dimension_2;
	float           scale_factor;
	short           norm_hour;
	short           norm_minute;
	short           norm_second;
	short           norm_day;
	short           norm_month;
	short           norm_year;
	float           fov_source_width;
	float           ecat_calib_factor;
};

typedef struct XNORM_SUB XNORM_SUB;

bool_t          xdr_XNORM_SUB ();

struct XATTEN_SUB {
	short           data_type;
	short           attenuation_type;
	short           dimension_1;
	short           dimension_2;
	float           scale_factor;
	float           x_origin;
	float           y_origin;
	float           x_radius;
	float           y_radius;
	float           tilt_angle;
	float           attenuation_coeff;
	float           sample_distance;
};

typedef struct XATTEN_SUB XATTEN_SUB;

bool_t          xdr_XATTEN_SUB ();

struct CREF_args {
	char           *file_name;
	XMAIN_HEAD      mhead;
	int             data_size;
};

typedef struct CREF_args CREF_args;

bool_t          xdr_CREF_args ();

struct DPLN_args {
	int             log_plane;
	int             phy_plane[6];
};

typedef struct DPLN_args DPLN_args;

bool_t          xdr_DPLN_args ();

struct DFRM_args {
	int             nframes;
	int             delay;
	int             duration;
	int             nsegs;
};

typedef struct DFRM_args DFRM_args;

bool_t          xdr_DFRM_args ();

struct MODL_args {
	int             model;
	int             number_of_rings;
};

typedef struct MODL_args MODL_args;

bool_t          xdr_MODL_args ();

struct CFRM_args {
	int             frame;
	int             delay;
	int             duration;
};

typedef struct CFRM_args CFRM_args;

bool_t          xdr_CFRM_args ();

struct CONF_args {
	int             config;
	float           pile_up_factor;
	float           plane_factor;
};

typedef struct CONF_args CONF_args;

bool_t          xdr_CONF_args ();

struct STRT_args {
	int             numberFrames;
	int             acqType;
};

typedef struct STRT_args STRT_args;

bool_t          xdr_STRT_args ();

struct RECT_args {
	int             frame;
	int             plane;
	int             segment;
	int             data;
	int             startView;
	int             endView;
};

typedef struct RECT_args RECT_args;

bool_t          xdr_RECT_args ();

struct STOR_args {
	char           *filename;
	int             frame;
	int             matframe;
	int             bed;
};

typedef struct STOR_args STOR_args;

bool_t          xdr_STOR_args ();

struct ASTR_args {
	char           *file_name;
	int             auto_store;
};

typedef struct ASTR_args ASTR_args;

bool_t          xdr_ASTR_args ();

struct GLOG_args {
	char           *filename;
	int             frame;
	int             plane;
	int             segment;
	int             data;
	int             bed;
};

typedef struct GLOG_args GLOG_args;

bool_t          xdr_GLOG_args ();

struct GIMI_args {
	int             frame;
	int             plane;
	int             segment;
	int             data;
	int             bed;
};

typedef struct GIMI_args GIMI_args;

bool_t          xdr_GIMI_args ();

struct SNGL_args {
	int             start_bucket;
	int             end_bucket;
	int             frequency;
	int             timeout;
	int             num_ipcs;
};

typedef struct SNGL_args SNGL_args;

bool_t          xdr_SNGL_args ();

struct RBLK_args {
	char           *filename;
	int             block_number;
};

typedef struct RBLK_args RBLK_args;

bool_t          xdr_RBLK_args ();

struct WBLK_args {
	char           *filename;
	int             block_number;
	char            wblk[512];
};

typedef struct WBLK_args WBLK_args;

bool_t          xdr_WBLK_args ();

struct GIMI_resp {
	int             time;
	int             start_time;
	int             nproj;
	int             nview;
	int             minval;
	int             maxval;
	int             prompts;
	int             delayeds;
	int             multiples;
	int             corrected_sing[64];
	int             uncorrected_sing[64];
	int             total_ipc_prompts;
	int             total_ipc_delayeds;
	int             total_ipc_multiples;
	int             status;
};

typedef struct GIMI_resp GIMI_resp;

bool_t          xdr_GIMI_resp ();

struct GLOG_resp {
	int             time;
	int             start_time;
	int             minval;
	int             maxval;
	int             prompts;
	int             delayeds;
	int             multiples;
	int             net_trues;
	float           dtcor;
	int             status;
};

typedef struct GLOG_resp GLOG_resp;

bool_t          xdr_GLOG_resp ();

struct INFO_resp {
	int             acq_status;
	int             total_time;
	int             prompt_events;
	int             delayed_events;
	int             multiple_events;
	int             current_frame;
	int             total_frames;
	int             frame_time;
	int             frame_end_time;
	int             scan_end_time;
	int             singles_Kcps_corrected;
	int             singles_Kcps_uncorrected;
	int             total_ipc_prompt_rate;
	int             total_ipc_delayed_rate;
	int             total_ipc_multiple_rate;
	int             contig_disk_space;
};

typedef struct INFO_resp INFO_resp;

bool_t          xdr_INFO_resp ();

struct RBLK_resp {
	int             status;
	char            rblk[512];
};

typedef struct RBLK_resp RBLK_resp;

bool_t          xdr_RBLK_resp ();

struct RMHD_resp {
	int             status;
	XMAIN_HEAD      xmain_head;
};

typedef struct RMHD_resp RMHD_resp;

bool_t          xdr_RMHD_resp ();

struct WMHD_args {
	char           *file_name;
	XMAIN_HEAD      xmain_head;
};

typedef struct WMHD_args WMHD_args;

bool_t          xdr_WMHD_args ();

struct RSHD_args {
	char           *file_name;
	int             matnum;
};

typedef struct RSHD_args RSHD_args;

bool_t          xdr_RSHD_args ();

struct RSHD_resp {
	int             status;
	char            rhdat[512];
};

typedef struct RSHD_resp RSHD_resp;

bool_t          xdr_RSHD_resp ();

struct WSHD_args {
	char           *file_name;
	int             matnum;
	char            whdat[512];
};

typedef struct WSHD_args WSHD_args;

bool_t          xdr_WSHD_args ();

struct RDAT_args {
	char           *file_name;
	int             matnum;
};

typedef struct RDAT_args RDAT_args;

bool_t          xdr_RDAT_args ();

struct RDAT_resp {
	int             status;
	struct {
		u_int           rdat_len;
		char           *rdat_val;
	}               rdat;
};

typedef struct RDAT_resp RDAT_resp;

bool_t          xdr_RDAT_resp ();

struct WDAT_args {
	char           *file_name;
	int             matnum;
	int             data_type;
	struct {
		u_int           wdat_len;
		char           *wdat_val;
	}               wdat;
};

typedef struct WDAT_args WDAT_args;

bool_t          xdr_WDAT_args ();

#endif						 /* ECATRTS_INCLUDED */
@


1.2
log
@build in Solaris 2
@
text
@d1 1
a1 1
/*$Id: ecatRts.h,v 1.1 1994/03/11 19:45:40 ty7777 Exp tom $*/
d3 3
d26 3
a28 1
static char     rcsid_ecatrts[] = "$Header: /home/npggw/tom/src/libcti/RCS/ecatRts.h,v 1.1 1994/03/11 19:45:40 ty7777 Exp tom $";
d69 1
a69 1
	RRDB = 1 + 38,
d78 1
a78 1
	INFO_STOP = 1 + 1,
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d23 1
a23 1
static char rcsid_ecatrts [] = "$Header$";
d66 1
a67 1
bool_t xdr_RTS_FUNCTIONS();
d69 2
d75 1
a76 1
bool_t xdr_RTS_INFO_FUNCTIONS();
d78 2
d81 57
a137 57
	char original_file_name[20];
	short sw_version;
	short data_type;
	short system_type;
	short file_type;
	char node_id[10];
	short scan_start_day;
	short scan_start_month;
	short scan_start_year;
	short scan_start_hour;
	short scan_start_minute;
	short scan_start_second;
	char isotope_code[8];
	float isotope_halflife;
	char radiopharmaceutical[32];
	float gantry_tilt;
	float gantry_rotation;
	float bed_elevation;
	short rot_source_speed;
	short wobble_speed;
	short transm_source_type;
	float axial_fov;
	float transaxial_fov;
	short transaxial_samp_mode;
	short coin_samp_mode;
	short axial_samp_mode;
	float calibration_factor;
	short calibration_units;
	short compression_code;
	char study_name[12];
	char patient_id[16];
	char patient_name[32];
	char patient_sex[1];
	char patient_age[10];
	char patient_height[10];
	char patient_weight[10];
	char patient_dexterity[1];
	char physician_name[32];
	char operator_name[32];
	char study_description[32];
	short acquisition_type;
	short bed_type;
	short septa_type;
	char facility_name[20];
	short num_planes;
	short num_frames;
	short num_gates;
	short num_bed_pos;
	float init_bed_position;
	float bed_offset[15];
	float plane_separation;
	short lwr_sctr_thres;
	short lwr_true_thres;
	short upr_true_thres;
	float collimator;
	char user_process_code[10];
	short acquisition_mode;
d139 1
a140 1
bool_t xdr_XMAIN_HEAD();
d142 2
d145 26
a170 26
	short data_type;
	short dimension_1;
	short dimension_2;
	short smoothing;
	short processing_code;
	float sample_distance;
	float isotope_halflife;
	short frame_duration_sec;
	int gate_duration;
	int r_wave_offset;
	float scale_factor;
	short scan_min;
	short scan_max;
	int prompts;
	int delayed;
	int multiples;
	int net_trues;
	float cor_singles[16];
	float uncor_singles[16];
	float tot_avg_cor;
	float tot_avg_uncor;
	int total_coin_rate;
	int frame_start_time;
	int frame_duration;
	float loss_correction_fctr;
	int phy_planes[8];
d172 1
a173 1
bool_t xdr_XSCAN_SUB();
d175 2
d178 36
a213 36
	short data_type;
	short num_dimensions;
	short dimension_1;
	short dimension_2;
	float x_origin;
	float y_origin;
	float recon_scale;
	float quant_scale;
	short image_min;
	short image_max;
	float pixel_size;
	float slice_width;
	int frame_duration;
	int frame_start_time;
	short slice_location;
	short recon_start_hour;
	short recon_start_minute;
	short recon_start_sec;
	int recon_duration;
	short filter_code;
	int scan_matrix_num;
	int norm_matrix_num;
	int atten_cor_matrix_num;
	float image_rotation;
	float plane_eff_corr_fctr;
	float decay_corr_fctr;
	float loss_corr_fctr;
	short processing_code;
	short quant_units;
	short recon_start_day;
	short recon_start_month;
	short recon_start_year;
	float ecat_calibration_fctr;
	float well_counter_cal_fctr;
	float filter_params[6];
	char annotation[40];
d215 1
a216 1
bool_t xdr_XIMAGE_SUB();
d218 2
d221 12
a232 12
	short data_type;
	short dimension_1;
	short dimension_2;
	float scale_factor;
	short norm_hour;
	short norm_minute;
	short norm_second;
	short norm_day;
	short norm_month;
	short norm_year;
	float fov_source_width;
	float ecat_calib_factor;
d234 1
a235 1
bool_t xdr_XNORM_SUB();
d237 2
d240 12
a251 12
	short data_type;
	short attenuation_type;
	short dimension_1;
	short dimension_2;
	float scale_factor;
	float x_origin;
	float y_origin;
	float x_radius;
	float y_radius;
	float tilt_angle;
	float attenuation_coeff;
	float sample_distance;
d253 1
a254 1
bool_t xdr_XATTEN_SUB();
d256 2
d259 3
a261 3
	char *file_name;
	XMAIN_HEAD mhead;
	int data_size;
d263 1
a264 1
bool_t xdr_CREF_args();
d266 2
d269 2
a270 2
	int log_plane;
	int phy_plane[6];
d272 1
a273 1
bool_t xdr_DPLN_args();
d275 2
d278 4
a281 4
	int nframes;
	int delay;
	int duration;
	int nsegs;
d283 1
a284 1
bool_t xdr_DFRM_args();
d286 2
d289 2
a290 2
	int model;
	int number_of_rings;
d292 1
a293 1
bool_t xdr_MODL_args();
d295 2
d298 3
a300 3
	int frame;
	int delay;
	int duration;
d302 1
a303 1
bool_t xdr_CFRM_args();
d305 2
d308 3
a310 3
	int config;
	float pile_up_factor;
	float plane_factor;
d312 1
a313 1
bool_t xdr_CONF_args();
d315 2
d318 2
a319 2
	int numberFrames;
	int acqType;
d321 1
a322 1
bool_t xdr_STRT_args();
d324 2
d327 6
a332 6
	int frame;
	int plane;
	int segment;
	int data;
	int startView;
	int endView;
d334 1
a335 1
bool_t xdr_RECT_args();
d337 2
d340 4
a343 4
	char *filename;
	int frame;
	int matframe;
	int bed;
d345 1
a346 1
bool_t xdr_STOR_args();
d348 2
d351 2
a352 2
	char *file_name;
	int auto_store;
d354 1
a355 1
bool_t xdr_ASTR_args();
d357 2
d360 6
a365 6
	char *filename;
	int frame;
	int plane;
	int segment;
	int data;
	int bed;
d367 1
a368 1
bool_t xdr_GLOG_args();
d370 2
d373 5
a377 5
	int frame;
	int plane;
	int segment;
	int data;
	int bed;
d379 1
a380 1
bool_t xdr_GIMI_args();
d382 2
d385 5
a389 5
	int start_bucket;
	int end_bucket;
	int frequency;
	int timeout;
	int num_ipcs;
d391 1
a392 1
bool_t xdr_SNGL_args();
d394 2
d397 2
a398 2
	char *filename;
	int block_number;
d400 1
a401 1
bool_t xdr_RBLK_args();
d403 2
d406 3
a408 3
	char *filename;
	int block_number;
	char wblk[512];
d410 1
a411 1
bool_t xdr_WBLK_args();
d413 2
d416 15
a430 15
	int time;
	int start_time;
	int nproj;
	int nview;
	int minval;
	int maxval;
	int prompts;
	int delayeds;
	int multiples;
	int corrected_sing[64];
	int uncorrected_sing[64];
	int total_ipc_prompts;
	int total_ipc_delayeds;
	int total_ipc_multiples;
	int status;
d432 1
a433 1
bool_t xdr_GIMI_resp();
d435 2
d438 10
a447 10
	int time;
	int start_time;
	int minval;
	int maxval;
	int prompts;
	int delayeds;
	int multiples;
	int net_trues;
	float dtcor;
	int status;
d449 1
a450 1
bool_t xdr_GLOG_resp();
d452 2
d455 16
a470 16
	int acq_status;
	int total_time;
	int prompt_events;
	int delayed_events;
	int multiple_events;
	int current_frame;
	int total_frames;
	int frame_time;
	int frame_end_time;
	int scan_end_time;
	int singles_Kcps_corrected;
	int singles_Kcps_uncorrected;
	int total_ipc_prompt_rate;
	int total_ipc_delayed_rate;
	int total_ipc_multiple_rate;
	int contig_disk_space;
d472 1
a473 1
bool_t xdr_INFO_resp();
d475 2
d478 2
a479 2
	int status;
	char rblk[512];
d481 1
a482 1
bool_t xdr_RBLK_resp();
d484 2
d487 2
a488 2
	int status;
	XMAIN_HEAD xmain_head;
d490 1
a491 1
bool_t xdr_RMHD_resp();
d493 2
d496 2
a497 2
	char *file_name;
	XMAIN_HEAD xmain_head;
d499 1
a500 1
bool_t xdr_WMHD_args();
d502 2
d505 2
a506 2
	char *file_name;
	int matnum;
d508 1
a509 1
bool_t xdr_RSHD_args();
d511 2
d514 2
a515 2
	int status;
	char rhdat[512];
d517 1
a518 1
bool_t xdr_RSHD_resp();
d520 2
d523 3
a525 3
	char *file_name;
	int matnum;
	char whdat[512];
d527 1
a528 1
bool_t xdr_WSHD_args();
d530 2
d533 2
a534 2
	char *file_name;
	int matnum;
d536 1
a537 1
bool_t xdr_RDAT_args();
d539 2
d542 1
a542 1
	int status;
d544 3
a546 3
		u_int rdat_len;
		char *rdat_val;
	} rdat;
d548 1
a549 1
bool_t xdr_RDAT_resp();
d551 2
d554 3
a556 3
	char *file_name;
	int matnum;
	int data_type;
d558 3
a560 3
		u_int wdat_len;
		char *wdat_val;
	} wdat;
d562 1
a563 1
bool_t xdr_WDAT_args();
d565 1
a565 1
#endif /* ECATRTS_INCLUDED */
d567 1
@
