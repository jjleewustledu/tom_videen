head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	99.12.13.22.02.19;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	94.03.03.17.13.53;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.09.13.19.28.05;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.03.04.19.39.15;	author ty7777;	state Exp;
branches;
next	;


desc
@Working version of acsRpc.c, modified by Tom Yang to get rid of sunview libraries.
@


1.5
log
@partially cleaned up with lint
@
text
@/*$Id: acsRpc.c,v 1.4 1996/09/25 16:28:32 tom Exp tom $*/
/*$Log: acsRpc.c,v $
 * Revision 1.4  1996/09/25  16:28:32  tom
 * build in Solaris 2
 *
 * Revision 1.3  1994/03/03  17:13:53  ty7777
 * Changed id to header.
 **/

/*
 * acsRpc.c collection of modules to allow rpc communications with the acquisition node.
 * all modules look at the environment variable VXHOST or the process's default
 * database for the value of /Ecat/EcatAcqServer
 * to determine who the acquisition node is.
 * t.w. jansto 3/28/90
 */

#include <stdio.h>
#include <signal.h>
#include <strings.h>
#include <netdb.h>
#include <rpc/rpc.h>
#include <rpc/pmap_prot.h>
#include "ecatrpc.h"
extern int      errno;

#define RETRIES 3
#define AF_INET 2

#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/acsRpc.c,v 1.4 1996/09/25 16:28:32 tom Exp tom $";
#endif

static CLIENT  *client;

/*
static struct timeval timeout = {10, 0};
*/

int             init_netacp ()
{
	initializeTCPClient ();
	return (0);
}

int             initializeTCPClient ()
{
	struct sockaddr_in sock;
	struct hostent *hp;

	/*
	 * int channel, status, response; u_long program = RTS_SERVER, version =
	 * RTS_SERVER_VERSION;
	 * 
	 * hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") : defaults_get_string
	 * ("/Ecat/EcatAcqServer", "localhost", 0))); if (hp == NULL) { fprintf (stderr,
	 * "ERROR...no host available\n"); return (FALSE); } bcopy (hp->h_addr, (caddr_t) &
	 * sock.sin_addr, hp->h_length); sock.sin_family = AF_INET; sock.sin_port = 0; channel =
	 * RPC_ANYSOCK; if ((client = clnttcp_create (&sock, program, version, &channel, 1024,
	 * 1024)) == NULL) { clnt_pcreateerror ("client_error"); return (FALSE); }
	 */
	return (TRUE);
}

bool_t          do_netacp_command (command, inProc, inArg, outProc, outArg)
	int             command;

	xdrproc_t       inProc, outProc;

	caddr_t         inArg, outArg;
{
	enum clnt_stat  status;

	/*
	 * Commented out by Tom Yang on 1/28/93. if (!(initializeTCPClient ())) return (FALSE);
	 * status = clnt_call (client, command, inProc, inArg, outProc, outArg, timeout); if
	 * ((status != RPC_SUCCESS) && (errno != EINTR)) { clnt_perror (client, "client_error");
	 * return (FALSE); }
	 */
	return (TRUE);
}

static CLIENT  *acqClient;

/* Tom Yang on 1/28/93
static struct timeval acqTimeout = {60, 0};
*/

int             initAcqTcpClient ()
{
	struct sockaddr_in sock;

	struct hostent *hp;

	int             retry = RETRIES + 1;

	int             channel, status, response;

	u_long          program = RTS_SERVER, version = RTS_SERVER_VERSION;

/*
    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") :
	defaults_get_string ("/Ecat/EcatAcqServer", "localhost", 0)));
    if (hp == NULL)
    {
	fprintf (stderr, "ERROR...no host available\n");
	return (FALSE);
    }
    bcopy (hp->h_addr, (caddr_t) & sock.sin_addr, hp->h_length);
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    channel = RPC_ANYSOCK;
    while((acqClient = clnttcp_create (&sock, program, version, &channel,
		1024, 1024)) == NULL && --retry)
    {
	fprintf(stderr, "%d - ", RETRIES - retry + 1);
	clnt_pcreateerror ("acqClient_error");
    	sock.sin_port = 0;
    	channel = RPC_ANYSOCK;
    }
*/
	return (retry);
}

bool_t          doAcsAcqCommand (command, inProc, inArg, outProc, outArg)
	int             command;

	xdrproc_t       inProc, outProc;

	caddr_t         inArg, outArg;
{
	enum clnt_stat  status;

	/*
	 * if (!(initAcqTcpClient ())) return (FALSE); status = clnt_call (acqClient, command,
	 * inProc, inArg, outProc, outArg, acqTimeout); if (status != RPC_SUCCESS && errno !=
	 * EINTR) { clnt_perror (acqClient, "acqClient_error"); clnt_destroy (acqClient); return
	 * (FALSE); } clnt_destroy (acqClient);
	 */
	return (TRUE);
}

static CLIENT  *mcsClient;

/*
static struct timeval mcsTimeout = {60, 0};
*/

int             initMcsTcpClient ()
{
	struct sockaddr_in sock;

	struct hostent *hp;

/*
    int channel, status, response;
    u_long program = MCS_SERVER, version = MCS_SERVER_VERSION;

    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") :
	defaults_get_string ("/Ecat/EcatAcqServer", "localhost", 0)));
    if (hp == NULL)
    {
	fprintf (stderr, "ERROR...no host available\n");
	return (FALSE);
    }
    bcopy (hp->h_addr, (caddr_t) & sock.sin_addr, hp->h_length);
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    channel = RPC_ANYSOCK;
    if ((mcsClient = clnttcp_create (&sock, program, version, &channel, 1024, 1024)) == NULL)
    {
	clnt_pcreateerror ("mcsClient_error");
	return (FALSE);
    }
*/
	return (TRUE);
}

bool_t          doAcsMcsCommand (command, inProc, inArg, outProc, outArg)
	int             command;

	xdrproc_t       inProc, outProc;

	caddr_t         inArg, outArg;
{
	enum clnt_stat  status;

	/*
	 * if (!(initMcsTcpClient ())) return (FALSE); status = clnt_call (mcsClient, command,
	 * inProc, inArg, outProc, outArg, mcsTimeout); if (status != RPC_SUCCESS && errno !=
	 * EINTR) { clnt_perror (mcsClient, "mcsClient_error"); clnt_destroy (mcsClient); return
	 * (FALSE); } clnt_destroy (mcsClient);
	 */
	return (TRUE);
}

bool_t          changeMcsTimeoutValue (waitThisManySeconds)
	int             waitThisManySeconds;
{

	/*
	 * mcsTimeout.tv_sec = waitThisManySeconds;
	 */
	return (TRUE);
}

static CLIENT  *reconClient;

/* Tom Yang 1/28/93.
static struct timeval reconTimeout = {15, 0};
*/

int             initReconTcpClient ()
{
	struct sockaddr_in sock;

	struct hostent *hp;

/*
    int channel, status, response;
    u_long program = RECON_SERVER, version = RECON_SERVER_VERSION;

    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") :
	defaults_get_string ("/Ecat/EcatAcqServer", "localhost", 0)));
    if (hp == NULL)
    {
	fprintf (stderr, "ERROR...no host available\n");
	return (FALSE);
    }
    bcopy (hp->h_addr, (caddr_t) & sock.sin_addr, hp->h_length);
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    channel = RPC_ANYSOCK;
    if ((reconClient = clntudp_create (&sock, program, version, reconTimeout, &channel, 1024, 1024)) == NULL)
    {
	clnt_pcreateerror ("reconClient_error");
	return (FALSE);
    }
*/
	return (TRUE);
}

bool_t          doAcsReconCommand (command, inProc, inArg, outProc, outArg)
	int             command;

	xdrproc_t       inProc, outProc;

	caddr_t         inArg, outArg;
{
	enum clnt_stat  status;

	/*
	 * if (!(initReconTcpClient ())) return (FALSE); status = clnt_call (reconClient, command,
	 * inProc, inArg, outProc, outArg, reconTimeout); if (status != RPC_SUCCESS && errno !=
	 * EINTR) { clnt_perror (reconClient, "reconClient_error"); clnt_destroy (reconClient);
	 * return (FALSE); } clnt_destroy (reconClient);
	 */
	return (TRUE);
}

static CLIENT  *AutoQueClnt;

/*
static struct timeval AutoQueTimeout = {10, 0};
*/

int             initAutoQue ()
{
	initAutoQueClient ();
	return (0);
}

int             initAutoQueClient ()
{
	struct sockaddr_in sock;

	struct hostent *hp;

/* Tom Yang on 1/28/93.
    int channel, status, response;
    u_long program = RTS_SERVER, version = RTS_SERVER_VERSION;

    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") :
	defaults_get_string ("/Ecat/EcatAcqServer", "localhost", 0)));
    if (hp == NULL)
    {
	fprintf (stderr, "ERROR...no host available\n");
	return (FALSE);
    }
    bcopy (hp->h_addr, (caddr_t) & sock.sin_addr, hp->h_length);
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    channel = RPC_ANYSOCK;
    if ((AutoQueClnt = clnttcp_create (&sock, program, version, &channel,
		1024, 1024)) == NULL)
    {
	clnt_pcreateerror ("AutoQueClnt_error");
	return (FALSE);
    }
*/
	return (TRUE);
}

bool_t          doAutoQueCmd (command, inProc, inArg, outProc, outArg)
	int             command;

	xdrproc_t       inProc, outProc;

	caddr_t         inArg, outArg;
{
	enum clnt_stat  status;

	/*
	 * Tom Yang 1/28/93. if (!(initAutoQueClient ())) return (FALSE); status = clnt_call
	 * (AutoQueClnt, command, inProc, inArg, outProc, outArg, AutoQueTimeout); if (status !=
	 * RPC_SUCCESS && errno != EINTR) { clnt_perror (AutoQueClnt, "AutoQueClnt_error"); return
	 * (FALSE); }
	 */
	return (TRUE);
}

static CLIENT  *acsClnt;

/*
static struct timeval acsTimeout = {20, 0};
*/

int             initAcsClient ()
{
	struct sockaddr_in sock;

	struct hostent *hp;

/*
    int channel, status, response;
    u_long program = ECAT_ACS_SERVER, version = ECAT_ACS_VERSION;

    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") :
	defaults_get_string ("/Ecat/EcatAcqServer", "localhost", 0)));
    if (hp == NULL)
    {
	fprintf (stderr, "ERROR...no host available\n");
	return (FALSE);
    }
    bcopy (hp->h_addr, (caddr_t) & sock.sin_addr, hp->h_length);
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    channel = RPC_ANYSOCK;
    if ((acsClnt = clntudp_create (&sock, program, version, acsTimeout, &channel)) == NULL)
    {
	clnt_pcreateerror ("acsClnt_error");
	return (FALSE);
    }
*/
	return (TRUE);
}

bool_t          doAcsAcsCommand (command, inProc, inArg, outProc, outArg)
	int             command;

	xdrproc_t       inProc, outProc;

	caddr_t         inArg, outArg;
{
	enum clnt_stat  status;

	/*
	 * Tom Yang on 1/28/93. if (!(initAcsClient ())) return (FALSE); status = clnt_call
	 * (acsClnt, command, inProc, inArg, outProc, outArg, acsTimeout); if (status !=
	 * RPC_SUCCESS && errno != EINTR) { clnt_perror (acsClnt, "acsClnt_error"); clnt_destroy
	 * (acsClnt); return (FALSE); } clnt_destroy (acsClnt);
	 */
	return (TRUE);
}

static CLIENT  *rfaClnt;

/* Tom Yang on 1/28/93.
static struct timeval rfaTimeout = {20, 0};
*/

int             initRfaClient ()
{
	struct sockaddr_in sock;

	struct hostent *hp;

/* Tom Yang on 1/28/93.
    int channel, status, response;
    u_long program = RFA_SERVER, version = RFA_SERVER_VERSION;

    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") :
	defaults_get_string ("/Ecat/EcatAcqServer", "localhost", 0)));
    if (hp == NULL)
    {
	fprintf (stderr, "ERROR...no host available\n");
	return (FALSE);
    }
    bcopy (hp->h_addr, (caddr_t) & sock.sin_addr, hp->h_length);
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    channel = RPC_ANYSOCK;
    if ((rfaClnt =  clnttcp_create (&sock, program, version, &channel, 1024, 1024)) == NULL)
    {
	clnt_pcreateerror ("rfaClnt_error");
	return (FALSE);;
    }
*/
	return (TRUE);
}

bool_t          doAcsRfaCommand (command, inProc, inArg, outProc, outArg)
	int             command;

	xdrproc_t       inProc, outProc;

	caddr_t         inArg, outArg;
{
	enum clnt_stat  status;

	/*
	 * if (!(initRfaClient ())) return (FALSE); status = clnt_call (rfaClnt, command, inProc,
	 * inArg, outProc, outArg, rfaTimeout); if (status != RPC_SUCCESS && errno != EINTR) {
	 * clnt_perror (rfaClnt, "rfaClnt_error"); clnt_destroy (rfaClnt); return (FALSE); }
	 * clnt_destroy (rfaClnt);
	 */
	return (TRUE);
}

bool_t          changeRfaTimeoutValue (waitThisManySeconds)
	int             waitThisManySeconds;
{

	/*
	 * rfaTimeout.tv_sec = waitThisManySeconds;
	 */
	return (TRUE);
}

static CLIENT  *arcClient;

/* Tom Yang on 1/28/93.
static struct timeval arcTimeout = {60, 0};
*/

int             initArcTcpClient ()
{
	struct sockaddr_in sock;

	struct hostent *hp;

	int             channel, status, response;

	u_long          program = ARC_SERVER, version = ARC_SERVER_VERSION;

/* Tom Yang on 1/28/93
    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") :
	 defaults_get_string ("/Ecat/EcatAcqServer", "localhost", 0)));
    if (hp == NULL)
    {
	fprintf (stderr, "ERROR...no host available\n");
	return (FALSE);
    }
    bcopy (hp->h_addr, (caddr_t) & sock.sin_addr, hp->h_length);
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    channel = RPC_ANYSOCK;
    if ((arcClient = clnttcp_create (&sock, program, version, &channel, 1024, 1024)) == NULL)
    {
	clnt_pcreateerror ("arcClient_error");
	return (FALSE);
    }
*/
	return (TRUE);
}

bool_t          doAcsArcCommand (command, inProc, inArg, outProc, outArg)
	int             command;

	xdrproc_t       inProc, outProc;

	caddr_t         inArg, outArg;
{
	enum clnt_stat  status;

	/*
	 * if (!(initArcTcpClient ())) return (FALSE); status = clnt_call (arcClient, command,
	 * inProc, inArg, outProc, outArg, arcTimeout); if (status != RPC_SUCCESS && errno !=
	 * EINTR) { clnt_perror (arcClient, "arcClient_error"); clnt_destroy (arcClient); return
	 * (FALSE); } clnt_destroy (arcClient);
	 */
	return (TRUE);
}

bool_t          changeArcTimeoutValue (waitThisManySeconds)
	int             waitThisManySeconds;
{

	/*
	 * arcTimeout.tv_sec = waitThisManySeconds;
	 */
	return (TRUE);
}

int             getNextRPCVersion (rpcProgram)
	int             rpcProgram;
{
	struct pmaplist *pmap_getmaps (), *pMapList = NULL;

	struct sockaddr_in sock;

	struct hostent *hp;

	int             channel, status, response;

	u_long          version = 0;

	hp = gethostbyname ("localhost");
	bcopy (hp->h_addr, (caddr_t) & sock.sin_addr, hp->h_length);
	sock.sin_family = AF_INET;
	sock.sin_port = 0;
	channel = RPC_ANYSOCK;
	pMapList = pmap_getmaps (&sock);
	if (pMapList) {
		for (; pMapList != NULL; pMapList = pMapList->pml_next) {
			if (rpcProgram == pMapList->pml_map.pm_prog)
				if (pMapList->pml_map.pm_vers > version)
					version = pMapList->pml_map.pm_vers;
		}
	}
	return (version + 1);
}
@


1.4
log
@build in Solaris 2
@
text
@d1 1
a1 1
/*$Id: acsRpc.c,v 1.3 1994/03/03 17:13:53 ty7777 Exp tom $*/
d3 3
a18 3
/*
#include <suntool/sunview.h>
*/
d20 1
a20 3
/*
#include <sys/socket.h>
*/
a23 1
#include <errno.h>
d31 1
a31 2
static char     sccsid[] = "@@(#)acsRpc.c	2.6 4/24/92  Copyright 1989-1992 CTI PET Systems, Inc.";
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/acsRpc.c,v 1.3 1994/03/03 17:13:53 ty7777 Exp tom $";
a48 1

a268 2
	int             initializeAutoQueSocket ();

@


1.3
log
@Changed id to header.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d9 2
a10 2
 * all modules look at the environment variable VXHOST or the process's default 
 * database for the value of /Ecat/EcatAcqServer 
d28 1
a28 1
extern int errno;
d34 2
a35 1
static char sccsid[]="@@(#)acsRpc.c	2.6 4/24/92  Copyright 1989-1992 CTI PET Systems, Inc.";
a36 1
static char rcsid[] = "$Header$";
d38 2
a39 1
static CLIENT *client;
d44 1
a44 1
int init_netacp ()
d46 2
a47 2
    initializeTCPClient ();
    return;
d50 1
a50 1
int initializeTCPClient ()
d52 1
a52 2
    struct sockaddr_in sock;
    struct hostent *hp;
d54 1
a54 3
    /*
    int channel, status, response;
    u_long program = RTS_SERVER, version = RTS_SERVER_VERSION;
d56 12
a67 18
    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") : 
	defaults_get_string ("/Ecat/EcatAcqServer", "localhost", 0)));
    if (hp == NULL)
    {
	fprintf (stderr, "ERROR...no host available\n");
	return (FALSE);
    }
    bcopy (hp->h_addr, (caddr_t) & sock.sin_addr, hp->h_length);
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    channel = RPC_ANYSOCK;
    if ((client = clnttcp_create (&sock, program, version, &channel, 1024, 1024)) == NULL)
    {
	clnt_pcreateerror ("client_error");
	return (FALSE);
    }
    */
    return (TRUE);
d70 6
a75 4
bool_t do_netacp_command (command, inProc, inArg, outProc, outArg)
int command;
xdrproc_t inProc, outProc;
caddr_t inArg, outArg;
d77 1
a77 1
    enum clnt_stat status;
d79 7
a85 12
    /* Commented out by Tom Yang on 1/28/93.
    if (!(initializeTCPClient ()))
	return (FALSE);
    status = clnt_call (client, command, inProc, inArg, 
	outProc, outArg, timeout);
    if ((status != RPC_SUCCESS) && (errno != EINTR))
    {
	clnt_perror (client, "client_error");
	return (FALSE);
    }
    */
    return (TRUE);
d88 2
a89 1
static CLIENT *acqClient;
d94 1
a94 1
int initAcqTcpClient ()
d96 1
a96 3
    struct sockaddr_in sock;
    struct hostent *hp;
    int retry = RETRIES + 1;
d98 1
a98 2
    int channel, status, response;
    u_long program = RTS_SERVER, version = RTS_SERVER_VERSION;
d100 6
d107 1
a107 1
    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") : 
d127 1
a127 1
    return (retry);
d130 6
a135 4
bool_t doAcsAcqCommand (command, inProc, inArg, outProc, outArg)
int command;
xdrproc_t inProc, outProc;
caddr_t inArg, outArg;
d137 1
a137 1
    enum clnt_stat status;
d139 7
a145 14
    /*
    if (!(initAcqTcpClient ()))
	return (FALSE);
    status = clnt_call (acqClient, command, inProc, inArg, 
	outProc, outArg, acqTimeout);
    if (status != RPC_SUCCESS && errno != EINTR)
    {
	clnt_perror (acqClient, "acqClient_error");
        clnt_destroy (acqClient);
	return (FALSE);
    }
    clnt_destroy (acqClient);
    */
    return (TRUE);
d148 2
a149 1
static CLIENT *mcsClient;
d154 1
a154 1
int initMcsTcpClient ()
d156 1
a156 2
    struct sockaddr_in sock;
    struct hostent *hp;
d158 2
d164 1
a164 1
    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") : 
d181 1
a181 1
    return (TRUE);
d184 6
a189 4
bool_t doAcsMcsCommand (command, inProc, inArg, outProc, outArg)
int command;
xdrproc_t inProc, outProc;
caddr_t inArg, outArg;
d191 1
a191 1
    enum clnt_stat status;
d193 7
a199 14
    /*
    if (!(initMcsTcpClient ()))
	return (FALSE);
    status = clnt_call (mcsClient, command, inProc, inArg,
	outProc, outArg, mcsTimeout);
    if (status != RPC_SUCCESS && errno != EINTR)
    {
	clnt_perror (mcsClient, "mcsClient_error");
        clnt_destroy (mcsClient);
	return (FALSE);
    }
    clnt_destroy (mcsClient);
    */
    return (TRUE);
d202 2
a203 2
bool_t changeMcsTimeoutValue (waitThisManySeconds)
int waitThisManySeconds;
d205 5
a209 4
    /*
    mcsTimeout.tv_sec = waitThisManySeconds;
    */
    return (TRUE);
d212 2
a213 1
static CLIENT *reconClient;
d218 1
a218 1
int initReconTcpClient ()
d220 1
a220 2
    struct sockaddr_in sock;
    struct hostent *hp;
d222 2
d228 1
a228 1
    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") : 
d245 1
a245 1
    return (TRUE);
d248 6
a253 4
bool_t doAcsReconCommand (command, inProc, inArg, outProc, outArg)
int command;
xdrproc_t inProc, outProc;
caddr_t inArg, outArg;
d255 1
a255 1
    enum clnt_stat status;
d257 7
a263 14
    /*
    if (!(initReconTcpClient ()))
	return (FALSE);
    status = clnt_call (reconClient, command, inProc, inArg, 
	outProc, outArg, reconTimeout);
    if (status != RPC_SUCCESS && errno != EINTR)
    {
	clnt_perror (reconClient, "reconClient_error");
        clnt_destroy (reconClient);
	return (FALSE);
    }
    clnt_destroy (reconClient);
    */
    return (TRUE);
d266 2
a267 1
static CLIENT *AutoQueClnt;
d272 1
a272 1
int initAutoQue ()
d274 1
a274 1
    int initializeAutoQueSocket ();
d276 2
a277 2
    initAutoQueClient ();
    return;
d280 1
a280 1
int initAutoQueClient ()
d282 1
a282 2
    struct sockaddr_in sock;
    struct hostent *hp;
d284 2
d290 1
a290 1
    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") : 
d308 1
a308 1
    return (TRUE);
d311 6
a316 4
bool_t doAutoQueCmd (command, inProc, inArg, outProc, outArg)
int command;
xdrproc_t inProc, outProc;
caddr_t inArg, outArg;
d318 1
a318 1
    enum clnt_stat status;
d320 7
a326 12
    /* Tom Yang 1/28/93.
    if (!(initAutoQueClient ()))
	return (FALSE);
    status = clnt_call (AutoQueClnt, command, inProc, inArg, 
	outProc, outArg, AutoQueTimeout);
    if (status != RPC_SUCCESS && errno != EINTR)
    {
	clnt_perror (AutoQueClnt, "AutoQueClnt_error");
	return (FALSE);
    }
    */
    return (TRUE);
d329 2
a330 1
static CLIENT *acsClnt;
d335 1
a335 1
int initAcsClient ()
d337 1
a337 2
    struct sockaddr_in sock;
    struct hostent *hp;
d339 2
d345 1
a345 1
    hp = gethostbyname ((getenv ("VXHOST") ? getenv ("VXHOST") : 
d362 1
a362 1
    return (TRUE);
d365 6
a370 4
bool_t doAcsAcsCommand (command, inProc, inArg, outProc, outArg)
int command;
xdrproc_t inProc, outProc;
caddr_t inArg, outArg;
d372 1
a372 1
    enum clnt_stat status;
d374 7
a380 14
    /* Tom Yang on 1/28/93.
    if (!(initAcsClient ()))
	return (FALSE);
    status = clnt_call (acsClnt, command, inProc, inArg, 
	outProc, outArg, acsTimeout);
    if (status != RPC_SUCCESS && errno != EINTR)
    {
	clnt_perror (acsClnt, "acsClnt_error");
        clnt_destroy (acsClnt);
	return (FALSE);
    }
    clnt_destroy (acsClnt);
    */
    return (TRUE);
d383 2
a384 1
static CLIENT *rfaClnt;
d389 1
a389 1
int initRfaClient ()
d391 1
a391 2
    struct sockaddr_in sock;
    struct hostent *hp;
d393 2
d416 1
a416 1
    return (TRUE);
d419 6
a424 4
bool_t doAcsRfaCommand (command, inProc, inArg, outProc, outArg)
int command;
xdrproc_t inProc, outProc;
caddr_t inArg, outArg;
d426 1
a426 1
    enum clnt_stat status;
d428 7
a434 14
    /*
    if (!(initRfaClient ()))
	return (FALSE);
    status = clnt_call (rfaClnt, command, inProc, inArg, 
	outProc, outArg, rfaTimeout);
    if (status != RPC_SUCCESS && errno != EINTR)
    {
	clnt_perror (rfaClnt, "rfaClnt_error");
        clnt_destroy (rfaClnt);
	return (FALSE);
    }
    clnt_destroy (rfaClnt);
    */
    return (TRUE);
d437 2
a438 2
bool_t changeRfaTimeoutValue (waitThisManySeconds)
int waitThisManySeconds;
d440 5
a444 4
    /*
    rfaTimeout.tv_sec = waitThisManySeconds;
    */
    return (TRUE);
d447 2
a448 1
static CLIENT *arcClient;
d453 1
a453 1
int initArcTcpClient ()
d455 1
a455 4
    struct sockaddr_in sock;
    struct hostent *hp;
    int channel, status, response;
    u_long program = ARC_SERVER, version = ARC_SERVER_VERSION;
d457 6
d481 1
a481 1
    return (TRUE);
d484 6
a489 4
bool_t doAcsArcCommand (command, inProc, inArg, outProc, outArg)
int command;
xdrproc_t inProc, outProc;
caddr_t inArg, outArg;
d491 1
a491 1
    enum clnt_stat status;
d493 7
a499 14
    /*
    if (!(initArcTcpClient ()))
	return (FALSE);
    status = clnt_call (arcClient, command, inProc, inArg, 
	outProc, outArg, arcTimeout);
    if (status != RPC_SUCCESS && errno != EINTR)
    {
	clnt_perror (arcClient, "arcClient_error");
        clnt_destroy (arcClient);
	return (FALSE);
    }
    clnt_destroy (arcClient);
    */
    return (TRUE);
d502 2
a503 2
bool_t changeArcTimeoutValue (waitThisManySeconds)
int waitThisManySeconds;
d505 5
a509 4
    /*
    arcTimeout.tv_sec = waitThisManySeconds;
    */
    return (TRUE);
d512 2
a513 2
int getNextRPCVersion (rpcProgram)
int rpcProgram;
d515 1
a515 3
    struct pmaplist *pmap_getmaps (), *pMapList = NULL;
    struct sockaddr_in sock;
    struct hostent *hp;
d517 1
a517 2
    int channel, status, response;
    u_long version = 0;
d519 18
a536 13
    hp = gethostbyname ("localhost");
    bcopy (hp->h_addr, (caddr_t) & sock.sin_addr, hp->h_length);
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    channel = RPC_ANYSOCK;
    pMapList = pmap_getmaps (&sock);
    if (pMapList)
    {
	for (; pMapList != NULL; pMapList = pMapList->pml_next) 
	{
	    if (rpcProgram == pMapList->pml_map.pm_prog)
		if (pMapList->pml_map.pm_vers > version)
		    version = pMapList->pml_map.pm_vers;
d538 1
a538 2
    }
    return (version + 1);
@


1.2
log
@Introduce rcsid.
@
text
@d1 3
a3 1
/*    @@(#)acsRpc.c	2.6  4/24/92    */
d33 1
a33 1
static char rcsid[] = "$Id$";
@


1.1
log
@Initial revision
@
text
@d31 1
@
