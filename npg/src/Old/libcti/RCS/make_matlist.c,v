head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	99.12.13.22.02.19;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	95.10.30.16.54.44;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	94.09.23.19.18.09;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	94.03.03.17.26.48;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.09.13.19.41.29;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.03.04.19.43.16;	author ty7777;	state Exp;
branches;
next	;


desc
@Working version of make_matlist.c, modified by Tom Yang to get rid of sunview related libraries.
@


1.7
log
@partially cleaned up with lint
@
text
@/*$Id: make_matlist.c,v 1.6 1996/09/25 16:28:32 tom Exp tom $*/
/*$Log: make_matlist.c,v $
 * Revision 1.6  1996/09/25  16:28:32  tom
 * build in Solaris 2
 *
 * Revision 1.5  1995/10/30  16:54:44  tom
 * changed petutil/matrix.h to matrix.h
 *
 * Revision 1.4  1994/09/23  19:18:09  ty7777
 * Modified by Tom Yang to fix memory leaks.
 *
 * Revision 1.3  1994/03/03  17:26:48  ty7777
 * Change from rcs keyword id to header.
 *
 * Revision 1.2  1993/09/13  19:41:29  ty7777
 * Introduce rcsid.
 *
 * Revision 1.1  1993/03/04  19:43:16  ty7777
 * Initial revision
 **/

/*     @@(#)make_matlist.c	2.1   2/24/92     */

#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/make_matlist.c,v 1.6 1996/09/25 16:28:32 tom Exp tom $";
#endif

#include <stdlib.h>
#include <matrix.h>

/*______________________________________________________________________________
	description	make_matlist() takes the lists of frames,
			planes, gates, and beds and creates a list
			of matrix numbers.

	input		The input consists of pointers to arrays containing
		        lists of frame numbers, plane numbers, gates numbers,
		        and bed numbers. Along with each pointer is an integer
		     	whose value is the length of its corresponding array.
		        Also passed as input is a pointer to an Mlist structure
		        into which the list of matrix numbers will be put.

	output		On exit, mlist->list will be the list of matrix numbers
			of length mlist->nmats.

	called by	make_list()

	written by	Will Tribbey	3/6/91

	history:	Modified by Tom Yang on Sep. 23, 1994 to fix memory leaks.

______________________________________________________________________________*/

void            make_matlist (file1, file2, f, nf, p, np, g, ng, b, nb, mlist)
	MatrixFile     *file1, *file2;		 /* files from which  list is to be made         */

	int            *f, nf,			 /* pointer to frame array and length of array   */
	               *p, np,			 /* pointer to frame array and length of array   */
	               *g, ng,			 /* pointer to frame array and length of array   */
	               *b, nb;			 /* pointer to frame array and length of array   */

	Mlist          *mlist;			 /* pointer to Mlist structure to be filled      */
{
	struct MatDir  *matdir_file1;

	struct MatDir  *matdir_file2;

	struct MatDir  *matrix_find ();

	int             i, j, k, l, m, matnum, matflag, nmats = 0;

	for (i = 0; i < nf; i++) {
		for (j = 0; j < np; j++) {
			for (k = 0; k < ng; k++) {
				for (l = 0; l < nb; l++) {
					matnum = mat_numcod (f[i], p[j], g[k], 0, b[l]);
					matflag = 0;
					for (m = 0; m < nmats; m++) {

						/*
						 * Check for duplicate matnums
						 */
						if (matnum == mlist->list[m])
							matflag = 1;
					}
					if (!matflag) {	/* if flag not set, look up matrix with
							 * matnum  */
						if (file2) {
							matdir_file1 = matrix_find (matnum, file1);
							matdir_file2 = matrix_find (matnum, file2);
							if (matdir_file1 && matdir_file2) {
								nmats++;
								mlist->list[nmats - 1] = matnum;
							}
							if (matdir_file1)
								free (matdir_file1);
							if (matdir_file2)
								free (matdir_file2);
						} else {
							matdir_file1 = matrix_find (matnum, file1);
							if (matdir_file1) {
								nmats++;
								mlist->list[nmats - 1] = matnum;
								free (matdir_file1);
							}
						}
					}
				}
			}
		}
	}

	mlist->nmats = nmats;

	return;
}
@


1.6
log
@build in Solaris 2
@
text
@d1 1
a1 1
/*$Id: make_matlist.c,v 1.5 1995/10/30 16:54:44 tom Exp tom $*/
d3 3
d25 1
a25 2
static char     sccsid[] = "@@(#)make_matlist.c	2.1   2/24/92  Copyright 1989-1991 CTI PET Systems, Inc.";
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/make_matlist.c,v 1.5 1995/10/30 16:54:44 tom Exp tom $";
d28 1
d70 1
a70 1
	int             i, j, k, l, m, matnum, matflag, nmats = 0, er;
@


1.5
log
@changed petutil/matrix.h to matrix.h
@
text
@d1 1
a1 1
/*$Id: make_matlist.c,v 1.4 1994/09/23 19:18:09 ty7777 Exp tom $*/
d3 3
d22 2
a23 1
static char sccsid[]="@@(#)make_matlist.c	2.1   2/24/92  Copyright 1989-1991 CTI PET Systems, Inc.";
a25 2
static char rcsid [] = "$Header: /home/npggw/tom/src/libcti/RCS/make_matlist.c,v 1.4 1994/09/23 19:18:09 ty7777 Exp tom $";

d31 1
a31 1
			of matrix numbers.	
d41 1
a41 1
			of length mlist->nmats. 
d47 1
a47 1
	history:	Modified by Tom Yang on Sep. 23, 1994 to fix memory leaks.	
d51 9
a59 7
void make_matlist (file1, file2, f, nf, p, np, g, ng, b, nb, mlist)
	MatrixFile	*file1, *file2;		/*   files from which  list is to be made         */
	int		*f, nf,			/*   pointer to frame array and length of array   */
			*p, np,			/*   pointer to frame array and length of array   */
			*g, ng,			/*   pointer to frame array and length of array   */
			*b, nb;			/*   pointer to frame array and length of array   */
	Mlist		*mlist;			/*   pointer to Mlist structure to be filled      */
d61 1
a61 4
	struct MatDir	*matdir_file1;
	struct MatDir	*matdir_file2;
	struct MatDir	*matrix_find ();
	int		i, j, k, l, m, matnum, matflag, nmats = 0, er;
d63 16
a78 14
	for (i = 0; i < nf; i++) 
	{
		for (j = 0; j < np; j++) 
		{
			for (k = 0; k < ng; k++) 
			{
				for (l = 0; l < nb; l++) 
				{
					matnum	= mat_numcod (f [i], p [j], g [k], 0, b [l]);
					matflag	= 0;
					for (m = 0; m < nmats; m++) 
					{
						/*  
						 * Check for duplicate matnums  
d80 2
a81 2
						if (matnum == mlist->list [m])  
							matflag	= 1;
d83 8
a90 10
					if (!matflag) 
					{  /* if flag not set, look up matrix with matnum  */   
						if (file2) 
						{ 
							matdir_file1 = matrix_find (matnum, file1); 
							matdir_file2 = matrix_find (matnum, file2); 
							if (matdir_file1 && matdir_file2)
							{
								nmats++;                   
								mlist->list [nmats - 1]	= matnum;
d96 5
a100 8
						} 
						else 
						{
							matdir_file1 = matrix_find (matnum, file1); 
							if (matdir_file1) 
							{ 
								nmats++;                   
								mlist->list [nmats - 1]	= matnum;
d110 1
a110 1
	mlist->nmats	= nmats;
@


1.4
log
@Modified by Tom Yang to fix memory leaks.
@
text
@d1 1
a1 1
/*$Id: make_matlist.c,v 1.3 1994/03/03 17:26:48 ty7777 Exp ty7777 $*/
d3 3
d22 1
a22 1
static char rcsid [] = "$Header: /amd/home/petsun4/ty7777/src/libcti/RCS/make_matlist.c,v 1.3 1994/03/03 17:26:48 ty7777 Exp ty7777 $";
d24 1
a24 1
#include <petutil/matrix.h>
@


1.3
log
@Change from rcs keyword id to header.
@
text
@d1 1
a1 1
/*$Id: make_matlist.c,v 1.2 1993/09/13 19:41:29 ty7777 Exp ty7777 $*/
d3 3
d19 1
a19 1
static char rcsid [] = "$Header$";
d42 1
a42 1
	modification history :
a43 2
	WHO		DATE		CHANGE

d54 2
a55 1
	struct MatDir	entry;
d81 3
a83 2
							if (matrix_find (matnum, file1) 
								&& matrix_find (matnum, file2)) 
d88 4
d95 2
a96 1
							if (matrix_find (matnum, file1)) 
d100 1
@


1.2
log
@Introduce rcsid.
@
text
@d1 1
a1 1
/*$Id: make_matlist.c,v 1.1 1993/03/04 19:43:16 ty7777 Exp ty7777 $*/
d3 3
d16 1
a16 1
static char rcsid [] = "$Id$";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d13 3
a15 1
#include "petutil/matrix.h"
@
