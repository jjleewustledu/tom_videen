head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	99.12.13.22.02.19;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	95.10.30.16.54.44;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	94.03.03.17.35.17;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.09.13.19.48.12;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.03.04.19.55.09;	author ty7777;	state Exp;
branches;
next	;


desc
@Working version, modified by Tom Yang to get rid of sunview related library functions.
@


1.6
log
@partially cleaned up with lint
@
text
@/*$Id: parse_matnum.c,v 1.5 1996/09/25 16:28:32 tom Exp tom $*/
/*$Log: parse_matnum.c,v $
 * Revision 1.5  1996/09/25  16:28:32  tom
 * build in Solaris 2
 *
 * Revision 1.4  1995/10/30  16:54:44  tom
 * changed petutil/matrix.h to matrix.h
 *
 * Revision 1.3  1994/03/03  17:35:17  ty7777
 * Change from if to header.
 **/

/*   @@(#)parse_matnum.c	2.1   2/24/92     */

#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/parse_matnum.c,v 1.5 1996/09/25 16:28:32 tom Exp tom $";
#endif

#include <stdlib.h>
#include <ctype.h>

/*_________________________________________________________________________
	description	parse_matnum takes the input string buff
			and parses it into a list of integers, allocates
		        space for the list and returns the pointer to the
	                list.

	input		buff is a string containing the a specification
			for a list of integers, num_in_header is the number of
			frames, planes, gates, beds in the main header, and
			bedflag indicates if the number of bed postions is to
			be parsed.

	output	        On successful exit, n points to the number of
			integers in the array of integers pointed to by
			the returned value of parse_matnum. If an error
			occurs a NULL pointer is returned. The pointer
			returned by parse_matnum should be free'd
			after use.

	called by	make_list(), make_sum_list()

	calls		extract_num(), qsort()

	syntax		the syntax for buff is a string consisting of
			numbers separated by spaces and ranges of numbers
	                are indicated by using '-' or a '*' can be used to
			indicate that the header information is to be used.

	example		list = parse_matnum("1 2 3-10 11 15-20", main.num_frames, 0, &n)

	written by	Will Tribbey	3/6/91

	modification history :

	WHO		DATE		CHANGE

_________________________________________________________________________*/

int            *parse_matnum (buff, num_in_header, bedflag, n)
	char           *buff;

	int             num_in_header, bedflag, *n;
{
	char           *p;

	int             ctr = 0, num1, num2, *list, i, extract_num (), add, numcomp ();

	/*
	 * Check for NULL string
	 */
	p = &buff[0];

	if (*p == '\0')
		return ((int *) 0);

	/*
	 * If entire range is to generated make the list and return
	 */
	if (*p == '*') {
		if (bedflag) {
			ctr = num_in_header;
			list = (int *) malloc ((ctr + 1) * sizeof (int));
			if (!list)
				return ((int *) 0);
			for (i = 0; i < ctr; i++)
				list[i] = i;
			*n = ctr;
		} else {
			ctr = (num_in_header > 0) ? num_in_header : 1;
			list = (int *) malloc (ctr * sizeof (int));
			if (!list)
				return ((int *) 0);
			for (i = 0; i < ctr; i++)
				list[i] = i + 1;
			*n = ctr;
		}
		return (list);
	}

	/*
	 * Check syntax
	 */
	while (*p != '\0') {
		if ((!isdigit (*p)) && (*p != ' ') && (*p != '-'))
			return ((int *) 0);
		p++;
	}

	/*
	 * Find length of list
	 */
	p = &buff[0];

	while (*p != '\0') {
		if (isdigit (*p)) {
			num1 = extract_num (p, &add);
			ctr++;
			p += add;
		} else if (*p == '-') {
			p++;
			if (!isdigit (*p))
				return ((int *) 0);
			num2 = extract_num (p, &add);
			if (num2 <= num1)
				return ((int *) 0);
			ctr += num2 - num1;
			p += add;
			if ((*p != ' ') && (*p != '\0'))
				return ((int *) 0);
		} else
			p++;
	}

	/*
	 * Allocate memory for list
	 */
	list = (int *) malloc (ctr * sizeof (int));
	if (!list)
		return ((int *) 0);

	/*
	 * Fill in list
	 */
	p = &buff[0];
	*n = ctr;
	ctr = 0;

	while (*p != '\0') {
		if (isdigit (*p)) {
			num1 = extract_num (p, &add);
			list[ctr] = num1;
			ctr++;
			p += add;
		} else if (*p == '-') {
			p++;
			num2 = extract_num (p, &add);
			for (i = num1 + 1; i <= num2; i++) {
				list[ctr] = i;
				ctr++;
			}
			p += add;
		} else
			p++;
	}

	/*
	 * Sort list
	 */
	qsort ((char *) list, *n, sizeof (int), numcomp);

	return (list);
}
@


1.5
log
@build in Solaris 2
@
text
@d1 1
a1 1
/*$Id: parse_matnum.c,v 1.4 1995/10/30 16:54:44 tom Exp tom $*/
d3 3
d16 1
a16 2
static char     sccsid[] = "@@(#)parse_matnum.c	2.1   2/24/92  Copyright 1989-1991 CTI PET Systems, Inc.";

d19 2
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/parse_matnum.c,v 1.4 1995/10/30 16:54:44 tom Exp tom $";
a21 2
#include <matrix.h>

@


1.4
log
@changed petutil/matrix.h to matrix.h
@
text
@d1 1
a1 1
/*$Id: parse_matnum.c,v 1.3 1994/03/03 17:35:17 ty7777 Exp tom $*/
d3 3
d13 2
a14 1
static char sccsid[]="@@(#)parse_matnum.c	2.1   2/24/92  Copyright 1989-1991 CTI PET Systems, Inc.";
d17 1
a17 1
static char rcsid [] = "$Header: /home/npggw/tom/src/libcti/RCS/parse_matnum.c,v 1.3 1994/03/03 17:35:17 ty7777 Exp tom $";
d33 2
a34 2
	output	        On successful exit, n points to the number of 
			integers in the array of integers pointed to by 
d36 2
a37 2
			occurs a NULL pointer is returned. The pointer 
			returned by parse_matnum should be free'd 
d42 1
a42 1
	calls		extract_num(), qsort()	
d59 4
a62 3
int *parse_matnum (buff, num_in_header, bedflag, n) 
	char	*buff;
	int	num_in_header, bedflag, *n;
d64 1
a64 2
	char	*p;
	int	ctr = 0, num1, num2, *list, i, extract_num (), add, numcomp ();
d66 4
a69 2
	/*   
	 * Check for NULL string   
d71 1
a71 1
	p	= &buff[0];
d73 2
a74 2
	if (*p == '\0')	
		return ((int *)0);
d76 11
a86 13
	/*   
	 * If entire range is to generated make the list and return           
	 */   
	if (*p == '*') 
	{
		if (bedflag) 
		{
			ctr	= num_in_header;
			list	= (int *) malloc ((ctr + 1) * sizeof (int));
			if (!list)  
				return ((int*) 0);
			for (i = 0; i < ctr ; i++)
				list [i]	= i;
d88 5
a92 7
		}
		else 
		{
			ctr	= (num_in_header > 0)? num_in_header: 1;
			list	= (int *) malloc (ctr * sizeof (int));
			if (!list)  
				return ((int*) 0);
d94 2
a95 2
				list [i]	= i + 1;
			*n	= ctr;
d100 4
a103 5
	/*   
	 * Check syntax    
	 */   
	while (*p != '\0') 
	{
d109 2
a110 2
	/*   
	 * Find length of list   
d112 1
a112 1
	p	= &buff [0];
d114 3
a116 5
	while (*p != '\0') 
	{
		if (isdigit (*p)) 
		{
			num1	= extract_num (p, &add);
d118 2
a119 4
			p	+= add;
		}
		else if (*p == '-') 
		{
d123 1
a123 1
			num2	= extract_num (p, &add);
d126 2
a127 2
			ctr	+= num2 - num1;
			p	+= add;
d130 1
a130 2
		}
		else
d132 1
a132 1
	} 
d134 4
a137 4
	/*   
	 * Allocate memory for list   
	 */ 
	list	= (int *) malloc (ctr * sizeof (int));
d141 2
a142 2
	/*  
	 * Fill in list   
d144 3
a146 3
	p	= &buff [0];
	*n	= ctr;
	ctr	= 0;
d148 4
a151 6
	while (*p != '\0') 
	{
		if (isdigit (*p)) 
		{
			num1		= extract_num (p, &add);
			list [ctr]	= num1;
d153 2
a154 4
			p		+= add;
		}
		else if (*p == '-') 
		{
d156 3
a158 4
			num2	= extract_num (p, &add);
			for (i = num1 + 1; i <= num2 ; i++) 
			{
				list [ctr]	= i;
d161 2
a162 3
			p	+= add;
		}
		else
d166 2
a167 2
	/*   
	 * Sort list   
d169 1
a169 1
	qsort ((char*) list, *n, sizeof (int), numcomp);
@


1.3
log
@Change from if to header.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d13 1
a13 1
static char rcsid [] = "$Header$";
d15 1
a15 1
#include <petutil/matrix.h>
@


1.2
log
@Introduce rcsid.
@
text
@d1 3
d10 1
a10 1
static char rcsid [] = "$Id$";
@


1.1
log
@Initial revision
@
text
@d7 2
@
