head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	99.12.13.22.02.19;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	95.10.30.16.54.44;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	94.03.03.17.28.50;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.09.13.19.43.42;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.03.04.19.45.45;	author ty7777;	state Exp;
branches;
next	;


desc
@Working version, modified by Tom Yang to get rid of sunview related library functions.
@


1.6
log
@partially cleaned up with lint
@
text
@/*$Id: mat_get_spec.c,v 1.5 1996/09/25 16:28:32 tom Exp tom $*/
/*$Log: mat_get_spec.c,v $
 * Revision 1.5  1996/09/25  16:28:32  tom
 * build in Solaris 2
 *
 * Revision 1.4  1995/10/30  16:54:44  tom
 * changed petutil/matrix.h to matrix.h
 *
 * Revision 1.3  1994/03/03  17:28:50  ty7777
 * Change from id to header.
 *
 * Revision 1.2  1993/09/13  19:43:42  ty7777
 * Introduce rcsid.
 *
 * Revision 1.1  1993/03/04  19:45:45  ty7777
 * Initial revision
 **/

/* @@(#)mat_get_spec.c	2.1  10/14/91 */
/*
*	Module:		mat_get_spec.c
*	Author:		E. Pearson
*	Date:		May 1991
*	Description:	Return the actual number of frames, planes, gates, and bed
*			positions in a file.
*		Inputs:	 filename of matrix file (any type)
*		Outputs:  number of frames (int *)
*				  number of planes (int *)
*				  number of gates  (int *)
*				  number of beds   (int *)
*
*				All the return paramters are 1 based.
*/

#include	<stdio.h>
#include	<matrix.h>

#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/mat_get_spec.c,v 1.5 1996/09/25 16:28:32 tom Exp tom $";
#endif

int             mat_get_spec (file, num_frames, num_planes, num_gates, num_bed)
	char           *file;
	int            *num_frames, *num_planes, *num_gates, *num_bed;
{
	struct MatDir   matrixlist[5000];
	FILE           *fptr;
	int             status, num_matrices, i;
	struct Matval   matnum;

	/* initialization */
	status = 0;
	*num_frames = 0;
	*num_planes = 0;
	*num_gates = 0;
	*num_bed = 0;

	/* open the specified file */
	fptr = mat_open (file, "r");
	if (fptr != NULL) {
		/* get the matrix entries */
		num_matrices = mat_list (fptr, matrixlist, 5000);

		for (i = 0; i < num_matrices; i++) {
			mat_numdoc (matrixlist[i].matnum, &matnum);

			if (matnum.frame > *num_frames)
				(*num_frames)++;

			if (matnum.plane > *num_planes)
				(*num_planes)++;

			if (matnum.gate > *num_gates)
				(*num_gates)++;

			if (matnum.bed > *num_bed)
				(*num_bed)++;
		}

		/*
		 * bed is zero based in the matrix number, but all numbers returned from this
		 * function will be one based
		 */
		(*num_bed)++;
		mat_close (fptr);
	} else
		status = 1;

	return (status);
}
@


1.5
log
@build in Solaris 2
@
text
@d1 1
a1 1
/*$Id: mat_get_spec.c,v 1.4 1995/10/30 16:54:44 tom Exp tom $*/
d3 3
a20 1
*
a21 1
*
a22 1
*
a23 1
*
d26 2
a27 4
*
*			Inputs:	 filename of matrix file (any type)
*
*			Outputs:  number of frames (int *)
a32 4
*
*	Modifications:
*
*
a35 1
#include	<sys/file.h>
d39 1
a39 2
static char     sccsid[] = "@@(#)mat_get_spec.c	2.1  10/14/91  Copyright(c) 1989-1991 CTI PET Systems, Inc.";
static char     rcsid[] = "$Header$";
a43 1

d47 1
a47 3

	FILE           *fopen (), *fptr;

a48 1

@


1.4
log
@changed petutil/matrix.h to matrix.h
@
text
@d1 1
a1 1
/*$Id: mat_get_spec.c,v 1.3 1994/03/03 17:28:50 ty7777 Exp tom $*/
d3 3
d17 1
a17 1
/* 
d38 2
a39 2
*	
*			
d47 2
a48 1
static char sccsid[]="@@(#)mat_get_spec.c	2.1  10/14/91  Copyright(c) 1989-1991 CTI PET Systems, Inc.";
d51 2
a52 1
static char rcsid [] = "$Heasder$";
d54 1
a54 3
int mat_get_spec (file, num_frames, num_planes, num_gates, num_bed)
char *file;
int  *num_frames, *num_planes, *num_gates, *num_bed;
d56 1
a56 4
  struct MatDir matrixlist[5000];
  FILE *fopen(), *fptr;
  int status, num_matrices, i;
  struct Matval	matnum;
d58 1
a58 6
  /* initialization */
  status = 0;
  *num_frames = 0;
  *num_planes = 0;
  *num_gates = 0;
  *num_bed = 0;
d60 1
a60 6
  /* open the specified file */
  fptr = mat_open (file, "r");
  if (fptr != NULL)
  { 
    /* get the matrix entries */
    num_matrices = mat_list( fptr, matrixlist, 5000);
d62 1
a62 16
    for (i=0; i<num_matrices; i++)
    {
      mat_numdoc (matrixlist[i].matnum, &matnum);
 
     if (matnum.frame > *num_frames)
	(*num_frames)++;
    
      if (matnum.plane > *num_planes)
	(*num_planes)++;
    
      if (matnum.gate > *num_gates)
	(*num_gates)++;
        
      if (matnum.bed > *num_bed)
	(*num_bed)++;
    }
d64 6
a69 7
    /* bed is zero based in the matrix number, but all numbers returned from this
	function will be one based  */
    (*num_bed)++;
    mat_close (fptr);
  }
  else
    status = 1;
d71 32
a102 1
  return(status);
@


1.3
log
@Change from id to header.
@
text
@d1 1
a1 1
/*$Id: mat_get_spec.c,v 1.2 1993/09/13 19:43:42 ty7777 Exp ty7777 $*/
d3 3
d41 1
a41 1
#include	<petutil/matrix.h>
@


1.2
log
@Introduce rcsid.
@
text
@d1 1
a1 1
/*$Id: mat_get_spec.c,v 1.1 1993/03/04 19:45:45 ty7777 Exp ty7777 $*/
d3 3
d44 1
a44 1
static char rcsid [] = "$Id$";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d41 1
@
