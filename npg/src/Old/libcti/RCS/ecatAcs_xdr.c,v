head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	96.09.25.16.28.32;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	94.03.03.17.21.39;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.09.13.19.35.22;	author ty7777;	state Exp;
branches;
next	;


desc
@Introduce rcsid.
@


1.3
log
@build in Solaris 2
@
text
@/*$Id: ecatAcs_xdr.c,v 1.2 1994/03/03 17:21:39 ty7777 Exp tom $*/
/*$Log: ecatAcs_xdr.c,v $
 * Revision 1.2  1994/03/03  17:21:39  ty7777
 * Change from if to header.
 **/

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/rpc.h>
#include "ecatAcs.h"
/* @@(#)ecatAcs.x	2.4 12/2/91 */

#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libcti/RCS/ecatAcs_xdr.c,v 1.2 1994/03/03 17:21:39 ty7777 Exp tom $";
#endif

bool_t          xdr_ECAT_ACS_FUNCTIONS (xdrs, objp)
	XDR            *xdrs;

	ECAT_ACS_FUNCTIONS *objp;
{
	if (!xdr_enum (xdrs, (enum_t *) objp)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_ButtonId (xdrs, objp)
	XDR            *xdrs;

	ButtonId       *objp;
{
	if (!xdr_int (xdrs, &objp->requestorPid)) {
		return (FALSE);
	}
	if (!xdr_string (xdrs, &objp->requestedNode, 32)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_TIMEX_resp (xdrs, objp)
	XDR            *xdrs;

	TIMEX_resp     *objp;
{
	if (!xdr_int (xdrs, &objp->seconds)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->minute)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->hour)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->day)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->month)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->year)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_TELL_ME_args (xdrs, objp)
	XDR            *xdrs;

	TELL_ME_args   *objp;
{
	if (!xdr_string (xdrs, &objp->whoIam, 32)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->tellMeAboutFrames)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frameServerProg)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frameServerVers)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->tellMeAboutImages)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->imageServerProg)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->imageServerVers)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->tellMeAboutArchives)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->archiveServerProg)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->archiveServerVers)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_TELL_ME_resp (xdrs, objp)
	XDR            *xdrs;

	TELL_ME_resp   *objp;
{
	if (!xdr_int (xdrs, &objp->frameServerProg)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frameServerVers)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->tellMeAboutImages)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->imageServerProg)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->imageServerVers)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->archiveServerProg)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->archiveServerVers)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_STOP_TELLING_ME_args (xdrs, objp)
	XDR            *xdrs;

	STOP_TELLING_ME_args *objp;
{
	if (!xdr_string (xdrs, &objp->whoIam, 32)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->tellMeAboutFrames)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frameServerProg)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frameServerVers)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->tellMeAboutImages)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->imageServerProg)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->imageServerVers)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->tellMeAboutArchives)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->archiveServerProg)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->archiveServerVers)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_GEN_LOG_FILE_args (xdrs, objp)
	XDR            *xdrs;

	GEN_LOG_FILE_args *objp;
{
	if (!xdr_string (xdrs, &objp->file, 32)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frame)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->matframe)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->bed)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->append)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_DELETE_LOG_ENTRY_args (xdrs, objp)
	XDR            *xdrs;

	DELETE_LOG_ENTRY_args *objp;
{
	if (!xdr_string (xdrs, &objp->file, 32)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->frame)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->matframe)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->bed)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_ARC_JOB_NOTIFY_args (xdrs, objp)
	XDR            *xdrs;

	ARC_JOB_NOTIFY_args *objp;
{
	if (!xdr_int (xdrs, &objp->status)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->jobtype)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->error_code)) {
		return (FALSE);
	}
	if (!xdr_string (xdrs, &objp->study, ~0)) {
		return (FALSE);
	}
	if (!xdr_string (xdrs, &objp->vol_name, ~0)) {
		return (FALSE);
	}
	if (!xdr_string (xdrs, &objp->filespec, ~0)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_ARC_GET_FILE_STAT_args (xdrs, objp)
	XDR            *xdrs;

	ARC_GET_FILE_STAT_args *objp;
{
	if (!xdr_short (xdrs, &objp->st_dev)) {
		return (FALSE);
	}
	if (!xdr_u_long (xdrs, &objp->st_ino)) {
		return (FALSE);
	}
	if (!xdr_u_short (xdrs, &objp->st_mode)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->st_nlink)) {
		return (FALSE);
	}
	if (!xdr_u_short (xdrs, &objp->st_uid)) {
		return (FALSE);
	}
	if (!xdr_u_short (xdrs, &objp->st_gid)) {
		return (FALSE);
	}
	if (!xdr_short (xdrs, &objp->st_rdev)) {
		return (FALSE);
	}
	if (!xdr_long (xdrs, &objp->st_size)) {
		return (FALSE);
	}
	if (!xdr_u_long (xdrs, &objp->st_atime0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->st_spare1)) {
		return (FALSE);
	}
	if (!xdr_u_long (xdrs, &objp->st_mtime0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->st_spare2)) {
		return (FALSE);
	}
	if (!xdr_u_long (xdrs, &objp->st_ctime0)) {
		return (FALSE);
	}
	if (!xdr_int (xdrs, &objp->st_spare3)) {
		return (FALSE);
	}
	if (!xdr_long (xdrs, &objp->st_blksize)) {
		return (FALSE);
	}
	if (!xdr_long (xdrs, &objp->st_blocks)) {
		return (FALSE);
	}
	if (!xdr_vector (xdrs, (char *) objp->st_spare4, 2, sizeof (long), xdr_long)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_ARC_SET_FILE_MTIME_args (xdrs, objp)
	XDR            *xdrs;

	ARC_SET_FILE_MTIME_args *objp;
{
	if (!xdr_string (xdrs, &objp->filename, ~0)) {
		return (FALSE);
	}
	if (!xdr_u_long (xdrs, &objp->mtime)) {
		return (FALSE);
	}
	return (TRUE);
}
@


1.2
log
@Change from if to header.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d16 3
a18 1
static char rcsid [] = "$Header$";
d20 3
a22 2
bool_t xdr_ECAT_ACS_FUNCTIONS(xdrs, objp)
	XDR *xdrs;
d25 1
a25 1
	if (!xdr_enum(xdrs, (enum_t *)objp)) {
d32 4
a35 3
xdr_ButtonId(xdrs, objp)
	XDR *xdrs;
	ButtonId *objp;
d37 1
a37 1
	if (!xdr_int(xdrs, &objp->requestorPid)) {
d40 1
a40 1
	if (!xdr_string(xdrs, &objp->requestedNode, 32)) {
d47 4
a50 3
xdr_TIMEX_resp(xdrs, objp)
	XDR *xdrs;
	TIMEX_resp *objp;
d52 1
a52 1
	if (!xdr_int(xdrs, &objp->seconds)) {
d55 1
a55 1
	if (!xdr_int(xdrs, &objp->minute)) {
d58 1
a58 1
	if (!xdr_int(xdrs, &objp->hour)) {
d61 1
a61 1
	if (!xdr_int(xdrs, &objp->day)) {
d64 1
a64 1
	if (!xdr_int(xdrs, &objp->month)) {
d67 1
a67 1
	if (!xdr_int(xdrs, &objp->year)) {
d74 4
a77 3
xdr_TELL_ME_args(xdrs, objp)
	XDR *xdrs;
	TELL_ME_args *objp;
d79 1
a79 1
	if (!xdr_string(xdrs, &objp->whoIam, 32)) {
d82 1
a82 1
	if (!xdr_int(xdrs, &objp->tellMeAboutFrames)) {
d85 1
a85 1
	if (!xdr_int(xdrs, &objp->frameServerProg)) {
d88 1
a88 1
	if (!xdr_int(xdrs, &objp->frameServerVers)) {
d91 1
a91 1
	if (!xdr_int(xdrs, &objp->tellMeAboutImages)) {
d94 1
a94 1
	if (!xdr_int(xdrs, &objp->imageServerProg)) {
d97 1
a97 1
	if (!xdr_int(xdrs, &objp->imageServerVers)) {
d100 1
a100 1
	if (!xdr_int(xdrs, &objp->tellMeAboutArchives)) {
d103 1
a103 1
	if (!xdr_int(xdrs, &objp->archiveServerProg)) {
d106 1
a106 1
	if (!xdr_int(xdrs, &objp->archiveServerVers)) {
d113 4
a116 3
xdr_TELL_ME_resp(xdrs, objp)
	XDR *xdrs;
	TELL_ME_resp *objp;
d118 1
a118 1
	if (!xdr_int(xdrs, &objp->frameServerProg)) {
d121 1
a121 1
	if (!xdr_int(xdrs, &objp->frameServerVers)) {
d124 1
a124 1
	if (!xdr_int(xdrs, &objp->tellMeAboutImages)) {
d127 1
a127 1
	if (!xdr_int(xdrs, &objp->imageServerProg)) {
d130 1
a130 1
	if (!xdr_int(xdrs, &objp->imageServerVers)) {
d133 1
a133 1
	if (!xdr_int(xdrs, &objp->archiveServerProg)) {
d136 1
a136 1
	if (!xdr_int(xdrs, &objp->archiveServerVers)) {
d143 3
a145 2
xdr_STOP_TELLING_ME_args(xdrs, objp)
	XDR *xdrs;
d148 1
a148 1
	if (!xdr_string(xdrs, &objp->whoIam, 32)) {
d151 1
a151 1
	if (!xdr_int(xdrs, &objp->tellMeAboutFrames)) {
d154 1
a154 1
	if (!xdr_int(xdrs, &objp->frameServerProg)) {
d157 1
a157 1
	if (!xdr_int(xdrs, &objp->frameServerVers)) {
d160 1
a160 1
	if (!xdr_int(xdrs, &objp->tellMeAboutImages)) {
d163 1
a163 1
	if (!xdr_int(xdrs, &objp->imageServerProg)) {
d166 1
a166 1
	if (!xdr_int(xdrs, &objp->imageServerVers)) {
d169 1
a169 1
	if (!xdr_int(xdrs, &objp->tellMeAboutArchives)) {
d172 1
a172 1
	if (!xdr_int(xdrs, &objp->archiveServerProg)) {
d175 1
a175 1
	if (!xdr_int(xdrs, &objp->archiveServerVers)) {
d182 3
a184 2
xdr_GEN_LOG_FILE_args(xdrs, objp)
	XDR *xdrs;
d187 1
a187 1
	if (!xdr_string(xdrs, &objp->file, 32)) {
d190 1
a190 1
	if (!xdr_int(xdrs, &objp->frame)) {
d193 1
a193 1
	if (!xdr_int(xdrs, &objp->matframe)) {
d196 1
a196 1
	if (!xdr_int(xdrs, &objp->bed)) {
d199 1
a199 1
	if (!xdr_int(xdrs, &objp->append)) {
d206 3
a208 2
xdr_DELETE_LOG_ENTRY_args(xdrs, objp)
	XDR *xdrs;
d211 1
a211 1
	if (!xdr_string(xdrs, &objp->file, 32)) {
d214 1
a214 1
	if (!xdr_int(xdrs, &objp->frame)) {
d217 1
a217 1
	if (!xdr_int(xdrs, &objp->matframe)) {
d220 1
a220 1
	if (!xdr_int(xdrs, &objp->bed)) {
d227 3
a229 2
xdr_ARC_JOB_NOTIFY_args(xdrs, objp)
	XDR *xdrs;
d232 1
a232 1
	if (!xdr_int(xdrs, &objp->status)) {
d235 1
a235 1
	if (!xdr_int(xdrs, &objp->jobtype)) {
d238 1
a238 1
	if (!xdr_int(xdrs, &objp->error_code)) {
d241 1
a241 1
	if (!xdr_string(xdrs, &objp->study, ~0)) {
d244 1
a244 1
	if (!xdr_string(xdrs, &objp->vol_name, ~0)) {
d247 1
a247 1
	if (!xdr_string(xdrs, &objp->filespec, ~0)) {
d254 3
a256 2
xdr_ARC_GET_FILE_STAT_args(xdrs, objp)
	XDR *xdrs;
d259 1
a259 1
	if (!xdr_short(xdrs, &objp->st_dev)) {
d262 1
a262 1
	if (!xdr_u_long(xdrs, &objp->st_ino)) {
d265 1
a265 1
	if (!xdr_u_short(xdrs, &objp->st_mode)) {
d268 1
a268 1
	if (!xdr_short(xdrs, &objp->st_nlink)) {
d271 1
a271 1
	if (!xdr_u_short(xdrs, &objp->st_uid)) {
d274 1
a274 1
	if (!xdr_u_short(xdrs, &objp->st_gid)) {
d277 1
a277 1
	if (!xdr_short(xdrs, &objp->st_rdev)) {
d280 1
a280 1
	if (!xdr_long(xdrs, &objp->st_size)) {
d283 1
a283 1
	if (!xdr_u_long(xdrs, &objp->st_atime)) {
d286 1
a286 1
	if (!xdr_int(xdrs, &objp->st_spare1)) {
d289 1
a289 1
	if (!xdr_u_long(xdrs, &objp->st_mtime)) {
d292 1
a292 1
	if (!xdr_int(xdrs, &objp->st_spare2)) {
d295 1
a295 1
	if (!xdr_u_long(xdrs, &objp->st_ctime)) {
d298 1
a298 1
	if (!xdr_int(xdrs, &objp->st_spare3)) {
d301 1
a301 1
	if (!xdr_long(xdrs, &objp->st_blksize)) {
d304 1
a304 1
	if (!xdr_long(xdrs, &objp->st_blocks)) {
d307 1
a307 1
	if (!xdr_vector(xdrs, (char *)objp->st_spare4, 2, sizeof(long), xdr_long)) {
d314 3
a316 2
xdr_ARC_SET_FILE_MTIME_args(xdrs, objp)
	XDR *xdrs;
d319 1
a319 1
	if (!xdr_string(xdrs, &objp->filename, ~0)) {
d322 1
a322 1
	if (!xdr_u_long(xdrs, &objp->mtime)) {
@


1.1
log
@Initial revision
@
text
@d1 2
d13 1
a13 1
static char rcsid [] = "$Id$";
d15 1
a15 2
bool_t
xdr_ECAT_ACS_FUNCTIONS(xdrs, objp)
@
