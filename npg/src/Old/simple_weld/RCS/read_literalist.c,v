head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	95.07.19.18.52.08;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	95.07.19.15.46.51;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.07.19.15.11.24;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.3
log
@Created the fancy header.
@
text
@/*$Id: read_literalist.c,v 1.2 1995/07/19 15:46:51 ty7777 Exp ty7777 $*/
/*$Log: read_literalist.c,v $
 * Revision 1.2  1995/07/19  15:46:51  ty7777
 * After indent.
 *
 * Revision 1.1  1995/07/19  15:11:24  ty7777
 * Initial revision
 **/

/* ===============================================================================
 *  Module:	read_literalist.c
 *  Function:	int read_literalist (char *literalist_file, LITERALIST_DATA *literalist,
 *		int *num_literalist)
 *  Arguments:	literalist_file,	file containing a list of short literal scan names.
 *					passed in.
 *		literalist,		an array of structures, each structure for a list,
 *					The user should be responsible for allocation enough
 *					momory for this array, returned.
 *		num_literalist,		total number of literal list in file, returned.
 *  Return:	SUCCEED: succeesful; FAIL: error.
 *  Date:	July 19, 1995.	          
 *  Author:	Tom Yang       
 *  Description:This function reads a literal list file and put the information
		it contains in an array of structures. Each line should contains
		exactly 3 strings if the line can be used as a data line.
 *  History:	Created by Tom Yang on 07/19/95.
 * ===============================================================================
 */

#include "simple_weld.h"

static char     rcsid[] = "$Header: /data/petsun4/src/new/RCS/read_literalist.c,v 1.2 1995/07/19 15:46:51 ty7777 Exp ty7777 $";

PUBLIC int      read_literalist (literalist_file, literalist, num_literalist)
	char           *literalist_file;
	LITERALIST_DATA *literalist;
	int            *num_literalist;
{
	FILE           *fp;
	char            line[MAXLINE];
	char            string1[MAXLINE];
	char            string2[MAXLINE];
	char            string3[MAXLINE];
	char            string4[MAXLINE];
	int             i;
	int             nitems;

	fp = fopen (literalist_file, "r");

	i = 0;
	while (fgets (line, MAXLINE, fp) != NULL && i < MAX_IMAGE_LIST_SIZE) {
		nitems = sscanf (line, "%s %s %s %s", string1, string2, string3, string4);
		if ((nitems != 3 && nitems != 4) || strncmp (string1, "#", 1) == 0)
			continue;

		strcpy (literalist[i].topscan, string1);
		strcpy (literalist[i].bottomscan, string2);
		strcpy (literalist[i].weldedscan, string3);
		strcpy (literalist[i].matfile, string4);
		i++;
	}

	fclose (fp);

	*num_literalist = i;

	if (*num_literalist == 0) {
		fprintf (stderr, "Error: File %s contains no literal lists.\n", literalist_file);
		return FAIL;
	} else if (*num_literalist > MAX_IMAGE_LIST_SIZE) {
		fprintf (stderr, "Error: your list size %d exceeded the maximum allowable size %d\n",
			 *num_literalist, MAX_IMAGE_LIST_SIZE);
		return FAIL;
	}
	return SUCCEED;
}
@


1.2
log
@After indent.
@
text
@d1 1
a1 1
/*$Id: read_literalist.c,v 1.1 1995/07/19 15:11:24 ty7777 Exp ty7777 $*/
d3 3
d10 14
a23 14
/*___________________________________________________________________________
  File:		read_literalist.c

  Function:	int read_literalist (char *literalist_file, LITERALIST_DATA *literalist,
			int *num_literalist)

  Arguments:	literalist_file,	file containing a list of short literal scan names.
					passed in.
		literalist,		an array of structures, each structure for a list,
					The user should be responsible for allocation enough
					momory for this array, returned.
		num_literalist,		total number of literal list in file, returned.

  Description:	This function reads a literal list file and put the information
d26 3
a29 7
  Return:	SUCCEED for successful; FAIL for error.

  Author:	Tom Yang

  History:	Created by Tom Yang on 10/28/93.
___________________________________________________________________________*/

d32 1
a32 1
static char     rcsid[] = "$Header: /data/petsun4/src/new/RCS/read_literalist.c,v 1.1 1995/07/19 15:11:24 ty7777 Exp ty7777 $";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d10 1
a10 1
  Function:	int read_literalist (char *literalist_file, LITERALIST_DATA *literalist, 
d15 1
a15 1
		literalist,		an array of structures, each structure for a list, 
d20 1
a20 1
  Description:	This function reads a literal list file and put the information 
d28 1
a28 1
  History:	Created by Tom Yang on 10/28/93. 
d33 1
a33 1
static char rcsid [] = "$Header$";
d35 4
a38 4
PUBLIC int read_literalist (literalist_file, literalist, num_literalist)
	char		*literalist_file;
	LITERALIST_DATA	*literalist;
	int		*num_literalist;
d40 8
a47 8
	FILE	*fp;
	char	line [MAXLINE];
	char	string1 [MAXLINE];
	char	string2 [MAXLINE];
	char	string3 [MAXLINE];
	char	string4 [MAXLINE];
	int	i;
	int	nitems;
d49 1
a49 1
	fp	= fopen (literalist_file, "r");
d51 3
a53 4
	i	= 0;
	while (fgets (line, MAXLINE, fp) != NULL && i < MAX_IMAGE_LIST_SIZE)
	{
		nitems	= sscanf (line, "%s %s %s %s", string1, string2, string3, string4); 
d57 4
a60 4
		strcpy (literalist [i].topscan, string1);
		strcpy (literalist [i].bottomscan, string2);
		strcpy (literalist [i].weldedscan, string3);
		strcpy (literalist [i].matfile, string4);
d66 1
a66 1
	*num_literalist	= i;
d68 2
a69 3
	if (*num_literalist == 0)
	{
		fprintf (stderr, "Error: File %s contains no literal lists.\n", literalist_file); 
d71 1
a71 3
	}
	else if (*num_literalist > MAX_IMAGE_LIST_SIZE)
	{
d73 1
a73 1
			*num_literalist, MAX_IMAGE_LIST_SIZE);
a75 1

@
