head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	95.07.19.18.48.45;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	95.07.19.15.46.38;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.07.19.15.11.01;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.3
log
@Created the fancy header.
@
text
@/*$Id: getfactor.c,v 1.2 1995/07/19 15:46:38 ty7777 Exp ty7777 $*/
/*$Log: getfactor.c,v $
 * Revision 1.2  1995/07/19  15:46:38  ty7777
 * After indent.
 *
 * Revision 1.1  1995/07/19  15:11:01  ty7777
 * Initial revision
 **/

/* ===============================================================================
 *  Module:	getfactor.c
 *  Function:	int getfactor (PARAMETER_DATA parameter_data,
 *		IMAGE_LIST_DATA image_list, int image_mode, char *top_short_file,
 *		char *bottom_short_file, int noisy_slices, FILE *recfp);
 *  Arguments:	parameter_data:		data structure contains all the parameters from
 *					the parameter file. PARAMETER_DATA is defined in
 *					/usr/local/include/petutil/imglist.h.
 *		image_list:		data structure containing scan identification,
 *					activation scan number, and control scan number.
 *					IMAGE_LIST_DATA is defined in
 *					/usr/locla/include/petutil/imglist.h.
 *		image_mode:		image mode. Used here to determine the image
 *					category.
 *		top_short_file:		short file name for top scan.
 *		bottom_short_file:	short file name for bottom scan.
 *		noisy_slices:		number of noisy slices for 3D scan.
 *		recfp:			recfile file pointer.
 *  Return:	SUCCEED: successful; FAIL: failed.
 *  Date:	July 19, 1995.	          
 *  Author:	Tom Yang       
 *  Description:Get the top and bottom scaling factor.
 *  History:	Created by Tom Yang on 07/19/95.
 * ===============================================================================
 */

#include <petutil/imglist.h>
#include "simple_weld.h"

static char     rcsid[] = "$Header: /data/petsun4/src/new/RCS/getfactor.c,v 1.2 1995/07/19 15:46:38 ty7777 Exp ty7777 $";

PUBLIC int      getfactor (parameter_data, image_list, image_mode, short_top_scan,
	                 short_bottom_scan, complete_top_scan, complete_bottom_scan, noisy_slices,
			                   top_scaling_factor, bottom_scaling_factor, recfp)
	PARAMETER_DATA  parameter_data;
	IMAGE_LIST_DATA image_list;
	int             image_mode;
	char           *short_top_scan;
	char           *short_bottom_scan;
	char           *complete_top_scan;
	char           *complete_bottom_scan;
	int             noisy_slices;
	float          *top_scaling_factor;
	float          *bottom_scaling_factor;
	FILE           *recfp;
{
	BOOLEAN         demigrate;
	BOOLEAN         top_bottom_flipped;
	char            cbuffer[MAXLINE];
	float           fbuffer;
	float           offset;

	demigrate = TRUE;

	if (pkg_abs (image_list.mean1) <= ERROR_BOUND) {
		fprintf (stderr, "Error: the mean for %s is 0.0\n", short_top_scan);
		return FAIL;
	}
	if (pkg_abs (image_list.mean2) <= ERROR_BOUND) {
		fprintf (stderr, "Error: the mean for %s is 0.0\n", short_bottom_scan);
		return FAIL;
	}
	*top_scaling_factor = NORMAL_MEAN / image_list.mean1;
	*bottom_scaling_factor = NORMAL_MEAN / image_list.mean2;

/*
 * Find out if the top and bottom scans are flipped.
 */
	if (GetIndexingScanOffset (complete_top_scan, complete_bottom_scan, &offset,
				   &top_bottom_flipped, FALSE, recfp) == FAIL) {
		fprintf (stderr, "Error: in GetIndexingScanOffset ().\n");
		return FAIL;
	}
	if (top_bottom_flipped) {
		strcpy (cbuffer, short_top_scan);
		strcpy (short_top_scan, short_bottom_scan);
		strcpy (short_bottom_scan, cbuffer);

		fbuffer = *top_scaling_factor;
		*top_scaling_factor = *bottom_scaling_factor;
		*bottom_scaling_factor = fbuffer;
	}
	return SUCCEED;
}
@


1.2
log
@After indent.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.1 1995/07/19 15:11:01 ty7777 Exp ty7777 $*/
d3 3
d10 25
a34 2
/*_________________________________________________________________
  File:		getfactor.c
a35 33
  Function:	int getfactor (PARAMETER_DATA parameter_data,
		IMAGE_LIST_DATA image_list, int image_mode, char *top_short_file,
		char *bottom_short_file, int noisy_slices, FILE *recfp);

  Arguments:	parameter_data:		data structure contains all the parameters from
					the parameter file. PARAMETER_DATA is defined in
					/usr/local/include/petutil/imglist.h.
		image_list:		data structure containing scan identification,
					activation scan number, and control scan number.
					IMAGE_LIST_DATA is defined in
					/usr/locla/include/petutil/imglist.h.
		image_mode:		image mode. Used here to determine the image
					category.
		top_short_file:		short file name for top scan.
		bottom_short_file:	short file name for bottom scan.
		noisy_slices:		number of noisy slices for 3D scan.
		recfp:			recfile file pointer.

  Return Value:	SUCCEED:	successful;
		FAIL:		failed.

  Description:	This function reads the matrix file and returns the
		T4 matrices for both the top and the bottom scans. The
		normalization factor between the top and the bottom is
		also returned.

  Calling:

  Called by:

  Author:	Created by Tom Yang on 10/13/93.
_________________________________________________________________*/

d39 1
a39 1
static char     rcsid[] = "$Header: /data/petsun4/src/new/RCS/getfactor.c,v 1.1 1995/07/19 15:11:01 ty7777 Exp ty7777 $";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d10 1
a10 1
  Function:	int getfactor (PARAMETER_DATA parameter_data, 
d19 1
a19 1
					IMAGE_LIST_DATA is defined in 
d32 2
a33 2
		T4 matrices for both the top and the bottom scans. The 
		normalization factor between the top and the bottom is 
d36 1
a36 1
  Calling:	
d40 1
a40 1
  Author:	Created by Tom Yang on 10/13/93. 
d46 1
a46 1
static char rcsid [] = "$Header$";
d48 14
a61 14
PUBLIC int getfactor (parameter_data, image_list, image_mode, short_top_scan, 
	short_bottom_scan, complete_top_scan, complete_bottom_scan, noisy_slices,
	top_scaling_factor, bottom_scaling_factor, recfp)
	PARAMETER_DATA		parameter_data;
	IMAGE_LIST_DATA		image_list;
	int			image_mode;
	char			*short_top_scan;
	char			*short_bottom_scan;
	char			*complete_top_scan;
	char			*complete_bottom_scan;
	int			noisy_slices;
	float			*top_scaling_factor;
	float			*bottom_scaling_factor;
	FILE			*recfp;
d63 5
a67 5
	BOOLEAN		demigrate;
	BOOLEAN		top_bottom_flipped;
	char		cbuffer [MAXLINE];
	float		fbuffer;
	float		offset;
d69 1
a69 1
	demigrate		= TRUE;
d71 1
a71 2
	if (pkg_abs (image_list.mean1) <= ERROR_BOUND)
	{
d75 1
a75 3

	if (pkg_abs (image_list.mean2) <= ERROR_BOUND)
	{
d79 2
d82 5
a86 9
	*top_scaling_factor	= NORMAL_MEAN / image_list.mean1;
	*bottom_scaling_factor	= NORMAL_MEAN / image_list.mean2;

	/* 
	 * Find out if the top and bottom scans are flipped.
	 */
	if (GetIndexingScanOffset (complete_top_scan, complete_bottom_scan, &offset, 
	&top_bottom_flipped, FALSE, recfp) == FAIL)
	{
d90 4
d95 3
a97 9
	if (top_bottom_flipped)
	{
		strcpy (cbuffer, short_top_scan);	
		strcpy (short_top_scan, short_bottom_scan);	
		strcpy (short_bottom_scan, cbuffer);	

		fbuffer	= *top_scaling_factor;
		*top_scaling_factor	= *bottom_scaling_factor; 
		*bottom_scaling_factor	= fbuffer;
a98 1

@
