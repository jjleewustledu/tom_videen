head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	95.07.19.18.35.36;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	95.07.19.15.45.57;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.07.19.15.09.54;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.3
log
@Created fancy header.
@
text
@/*$Id: GetIndexingScanOffset.c,v 1.2 1995/07/19 15:45:57 ty7777 Exp ty7777 $*/
/*$Log: GetIndexingScanOffset.c,v $
 * Revision 1.2  1995/07/19  15:45:57  ty7777
 * After indent.
 *
 * Revision 1.1  1995/07/19  15:09:54  ty7777
 * Initial revision
 **/

/* ===============================================================================
 *  Module:		GetIndexingScanOffset.c
 *  Function:		int GetIndexingScanOffset (char *top_scan, char *bottom_scan,
 *			float *offset, BOOLEAN *top_bottom_flipped, BOOLEAN show_offset,
 *			FILE *recfp)
 *  Arguments:		top_scan,		top scan name.
 *			bottom_scan,		bottom scan name.
 *			offset,			offset of the horizontal bed position.
 *			top_bottom_flipped,	the top and the bottom scan image is
 *						flipped after runing this function.
 *			show_offset,		show the offset on screen.
 *			recfp,			file pointer for the recfile.
 *  Return:		SUCCEED: succeesful; FAIL: error.
 *  Date:		July 19, 1995.	          
 *  Author:		Tom Yang       
 *  Description:	This functions get the offset of indexing scans in mm.
 *  History:		Created by Tom Yang on 07/19/95.
 * ===============================================================================
 */

#include "simple_weld.h"
#include <petutil/matrix.h>

PRIVATE int     GetBedPosition ();

static char     rcsid[] = "$Header: /data/petsun4/src/new/RCS/GetIndexingScanOffset.c,v 1.2 1995/07/19 15:45:57 ty7777 Exp ty7777 $";

PUBLIC int      GetIndexingScanOffset (top_scan, bottom_scan, offset, top_bottom_flipped, show_offset, recfp)
	char           *top_scan;
	char           *bottom_scan;
	float          *offset;
	BOOLEAN        *top_bottom_flipped;
	BOOLEAN         show_offset;
	FILE           *recfp;
{
	char            cbuffer[MAXLINE];
	float           bottom_scan_position;
	float           top_scan_position;

	if (GetBedPosition (top_scan, &top_scan_position, show_offset, recfp) == FAIL) {
		fprintf (stderr, "Error in GetBedPosition () for %s\n", top_scan);
		return FAIL;
	}
	if (GetBedPosition (bottom_scan, &bottom_scan_position, show_offset, recfp) == FAIL) {
		fprintf (stderr, "Error in GetBedPosition () for %s\n", bottom_scan);
		return FAIL;
	}
	if (top_scan_position <= bottom_scan_position) {
		*offset = bottom_scan_position - top_scan_position;
		*top_bottom_flipped = FALSE;
	} else {
		*offset = top_scan_position - bottom_scan_position;
		strcpy (cbuffer, top_scan);
		strcpy (top_scan, bottom_scan);
		strcpy (bottom_scan, cbuffer);
		*top_bottom_flipped = TRUE;
	}

	return SUCCEED;
}

PRIVATE int     GetBedPosition (ecat_filename, scan_position, show_offset, recfp)
	char           *ecat_filename;
	float          *scan_position;
	BOOLEAN         show_offset;
	FILE           *recfp;
{
	MatrixFile     *matrix_open ();

	Main_header    *main_header;
	MatrixFile     *matfptr;

	matfptr = matrix_open (ecat_filename, "r");
	if (matfptr == NULL) {
		fprintf (stderr, "Error: matrix_open in opening %s ().\n", ecat_filename);
		return FAIL;
	}
	main_header = matfptr->mhptr;

/*
 * Check if the ECAT file is a really an ECAT image.
 */
	if (main_header->data_type != IMAGE_DATA) {
		fprintf (stderr, "Error: Data type is not compatible with image data type.\n");
		matrix_close (matfptr);
		return FAIL;
	}
	*scan_position = main_header->init_bed_position;
	matrix_close (matfptr);

/*
 * Check if the scan_position is 0.
 */
	if (*scan_position == 0.0) {
		fprintf (stdout, "The horizontal bed position for scan %s is 0.0.\n",
			 ecat_filename);
		fprintf (stdout, "Please specify the horizontal bed position for scan %s in mm.\n",
			 ecat_filename);
		scanf ("%f", scan_position);
	} else if (show_offset) {
		fprintf (stdout, "The horizontal bed position for scan %s is %f.\n",
			 ecat_filename, *scan_position);
		fprintf (recfp, "The horizontal bed position for scan %s is %f.\n",
			 ecat_filename, *scan_position);
		fprintf (stdout, "Please make sure it is correct.\n\n");
	}
	return SUCCEED;
}
@


1.2
log
@After indent.
@
text
@d1 1
a1 1
/*$Id: GetIndexingScanOffset.c,v 1.1 1995/07/19 15:09:54 ty7777 Exp ty7777 $*/
d3 3
d10 19
a28 2
/*_________________________________________________________________
  File:		GetIndexingScanOffset.c
a29 20
  Function:	int GetIndexingScanOffset (char *top_scan, char *bottom_scan,
		float *offset, BOOLEAN *top_bottom_flipped, BOOLEAN show_offset,
		FILE *recfp)

  Arguments:	top_scan,		top scan name.
		bottom_scan,		bottom scan name.
		offset,			offset of the horizontal bed position.
		top_bottom_flipped,	the top and the bottom scan image is
					flipped after runing this function.
		show_offset,		show the offset on screen.
		recfp,			file pointer for the recfile.

  Return:	SUCCEED: succeesful; FAIL: error.

  Description:	This functions get the offset of indexing scans in
		mm.

  History:	Created by Tom Yang on 05/05/93.
_________________________________________________________________*/

d35 1
a35 1
static char     rcsid[] = "$Header: /data/petsun4/src/new/RCS/GetIndexingScanOffset.c,v 1.1 1995/07/19 15:09:54 ty7777 Exp ty7777 $";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d27 1
a27 1
  History:	Created by Tom Yang on 05/05/93. 
d33 1
a33 1
PRIVATE int GetBedPosition ();
d35 1
a35 1
static char rcsid []= "$Header$";
d37 7
a43 7
PUBLIC int GetIndexingScanOffset (top_scan, bottom_scan, offset, top_bottom_flipped, show_offset, recfp)
	char	*top_scan;
	char	*bottom_scan;
	float	*offset;
	BOOLEAN	*top_bottom_flipped;
	BOOLEAN	show_offset;
	FILE	*recfp;
d45 3
a47 3
	char	cbuffer [MAXLINE];
	float	bottom_scan_position;
	float	top_scan_position;
d49 1
a49 2
	if (GetBedPosition (top_scan, &top_scan_position, show_offset, recfp) == FAIL)
	{
d53 1
a53 3

	if (GetBedPosition (bottom_scan, &bottom_scan_position, show_offset, recfp) == FAIL)
	{
d57 5
a61 9

	if (top_scan_position <= bottom_scan_position)
	{
		*offset			= bottom_scan_position - top_scan_position;
		*top_bottom_flipped	= FALSE;
	}
	else
	{
		*offset	= top_scan_position - bottom_scan_position;
d65 1
a65 1
		*top_bottom_flipped	= TRUE;
d71 5
a75 5
PRIVATE int GetBedPosition (ecat_filename, scan_position, show_offset, recfp)
	char	*ecat_filename;
	float	*scan_position;
	BOOLEAN	show_offset;
	FILE	*recfp;
d77 1
a77 1
	MatrixFile	*matrix_open ();
d79 2
a80 2
	Main_header	*main_header;
	MatrixFile	*matfptr;
d82 2
a83 3
	matfptr	= matrix_open (ecat_filename, "r");
	if (matfptr == NULL)
	{
d87 1
d89 4
a92 7
	main_header	= matfptr->mhptr;

	/*
	 * Check if the ECAT file is a really an ECAT image.
	 */
	if (main_header->data_type != IMAGE_DATA)
	{
d97 1
a97 2

	*scan_position		= main_header->init_bed_position;
d100 4
a103 5
	/*
	 * Check if the scan_position is 0.
	 */
	if (*scan_position == 0.0)
	{
d105 1
a105 1
			ecat_filename);
d107 1
a107 1
			ecat_filename);
d109 1
a109 3
	}
	else if (show_offset)
	{
d111 1
a111 1
			ecat_filename, *scan_position);
d113 1
a113 1
			ecat_filename, *scan_position);
a115 1

@
