head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	95.07.20.16.04.08;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	95.07.20.16.00.27;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	95.07.19.18.34.29;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	95.07.19.15.46.10;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	95.07.19.15.10.22;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.5
log
@Modified the description.
@
text
@/*$Id: GetSamplingMode.c,v 1.4 1995/07/20 16:00:27 ty7777 Exp ty7777 $*/
/*$Log: GetSamplingMode.c,v $
 * Revision 1.4  1995/07/20  16:00:27  ty7777
 * Modified the description.
 *
 * Revision 1.3  1995/07/19  18:34:29  ty7777
 * Created fancy header.
 *
 * Revision 1.2  1995/07/19  15:46:10  ty7777
 * After indent.
 *
 * Revision 1.1  1995/07/19  15:10:22  ty7777
 * Initial revision
 **/

/* ===============================================================================
 *  Module:		GetSamplingMode.c
 *  Function:		int GetSamplingMode (char *ecat_filename, int *mode)
 *  Arguments:		ecat_filename,		ECAT image file.
 *			mode,			either SAMPLING_MODE_3D,
 *						or SAMPLING_MODE_2D.
 *  Return:		SUCCEED: if the sampling mode is obtained successfully; 
 *			FAIL: if there is something wrong.
 *  Date:		July 19, 1995.	          
 *  Author:		Tom Yang       
 *  Description:	This function gets the sampling mode of indexing scans (top 
 *			and bottom) in mm.
 *  History:		Created by Tom Yang on 07/19/95.
 * ===============================================================================
 */

#include "simple_weld.h"
#include <petutil/matrix.h>

static char     rcsid[] = "$Header: /data/petsun4/src/new/RCS/GetSamplingMode.c,v 1.4 1995/07/20 16:00:27 ty7777 Exp ty7777 $";

PUBLIC int      GetSamplingMode (ecat_filename, mode)
	char           *ecat_filename;
	int            *mode;
{
	MatrixData     *matrix_read ();
	MatrixFile     *matrix_open ();

	Image_subheader *image_subheader;
	Main_header    *main_header;
	MatrixData     *matrixx_data;
	MatrixFile     *matfptr;
	Mlist          *mlist;
	int             diff;			 /* number of differences between spec and actual */

	matfptr = matrix_open (ecat_filename, "r");
	if (matfptr == NULL) {
		fprintf (stderr, "Error: matrix_open in GetSamplingMode ().\n");
		return FAIL;
	}
	main_header = matfptr->mhptr;

/*
 * Check if the ECAT file is a really an ECAT image.
 */
	if (main_header->data_type != IMAGE_DATA) {
		fprintf (stderr, "Error: Data type is not compatible with image data type.\n");
		matrix_close (matfptr);
		return FAIL;
	}

/*
 * The number of mats in a list always gives the correct number of slices.
 */
	mlist = make_list (ecat_filename, (char *) NULL, "*;*;*;*", &diff);
	if (!mlist) {
		fprintf (stderr, "make_list error in GetSamplingMode ().\n");
		matrix_close (matfptr);
		return FAIL;
	}

/*
 * Get the image subheader for slice 1.
 */
	matrixx_data = matrix_read (matfptr, mlist->list[0]);
	if (matrixx_data == NULL) {
		fprintf (stderr, "Error: matrixx_read in GetSamplingMode ().\n");
		matrix_close (matfptr);
		free_Mlist (mlist);
		return FAIL;
	}
	image_subheader = (Image_subheader *) matrixx_data->shptr;

	if (main_header->wobble_speed == 0 && image_subheader->filter_params[0] == 1.0)
		*mode = SAMPLING_MODE_3D;
	else
		*mode = SAMPLING_MODE_2D;

	free_Mlist (mlist);
	free_matrix_data (matrixx_data);
	matrix_close (matfptr);

	return SUCCEED;
}
@


1.4
log
@Modified the description.
@
text
@d1 1
a1 1
/*$Id: GetSamplingMode.c,v 1.3 1995/07/19 18:34:29 ty7777 Exp ty7777 $*/
d3 3
d22 2
a23 1
 *  Return:		SUCCEED: succeesful; FAIL: error.
d26 2
a27 2
 *  Description:	This functions get the offset of indexing scans (top and bottom)
 *			in mm.
d35 1
a35 1
static char     rcsid[] = "$Header: /data/petsun4/src/new/RCS/GetSamplingMode.c,v 1.3 1995/07/19 18:34:29 ty7777 Exp ty7777 $";
@


1.3
log
@Created fancy header.
@
text
@d1 1
a1 1
/*$Id: GetSamplingMode.c,v 1.2 1995/07/19 15:46:10 ty7777 Exp ty7777 $*/
d3 3
d22 2
a23 1
 *  Description:	This functions get the offset of indexing scans in mm.
d31 1
a31 1
static char     rcsid[] = "$Header$";
@


1.2
log
@After indent.
@
text
@d1 1
a1 1
/*$Id: GetSamplingMode.c,v 1.1 1995/07/19 15:10:22 ty7777 Exp $*/
d3 3
d10 14
d27 1
a27 1
static char     rcsid[] = "$Id$";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d10 1
a10 1
static char rcsid [] = "$Id";
d12 3
a14 3
PUBLIC int GetSamplingMode (ecat_filename, mode)
	char	*ecat_filename;
	int	*mode;
d16 2
a17 2
	MatrixData	*matrix_read ();
	MatrixFile	*matrix_open ();
d19 6
a24 6
	Image_subheader	*image_subheader;
	Main_header	*main_header;
	MatrixData	*matrixx_data;
	MatrixFile	*matfptr;
	Mlist		*mlist;
	int		diff;  /* number of differences between spec and actual */
d26 2
a27 3
	matfptr	= matrix_open (ecat_filename, "r");
	if (matfptr == NULL)
	{
d31 1
d33 4
a36 7
	main_header	= matfptr->mhptr;

	/*
	 * Check if the ECAT file is a really an ECAT image.
	 */
	if (main_header->data_type != IMAGE_DATA)
	{
d42 5
a46 6
	/*
	 * The number of mats in a list always gives the correct number of slices.
 	 */
	mlist	= make_list (ecat_filename, (char *) NULL, "*;*;*;*", &diff);
	if (!mlist) 
	{
d52 5
a56 6
	/*
 	 * Get the image subheader for slice 1. 
 	 */
	matrixx_data	= matrix_read (matfptr, mlist->list [0]);
	if (matrixx_data == NULL)
	{
d62 1
a62 1
	image_subheader	= (Image_subheader *) matrixx_data->shptr;
d64 4
a67 4
	if (main_header->wobble_speed == 0 && image_subheader->filter_params [0] == 1.0)
		*mode	= SAMPLING_MODE_3D;
	else 
		*mode	= SAMPLING_MODE_2D;
@
