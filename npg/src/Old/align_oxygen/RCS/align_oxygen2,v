head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	99.03.25.17.52.08;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.03.22.15.23.40;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.03.02.15.23.47;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@#!/bin/csh
#   Module: align_oxygen2
#   Author: Tom Videen
#   Date:   Mar-99
#   Use:    Align PET images (HO, OO, CO) to create OEF image.
#	rcsid = $Id: align_oxygen2,v 1.2 1999/03/22 15:23:40 tom Exp $

if ($#argv != 7) then
    echo "Usage: align_oxygen2 pid slices tr ho1 ho2 oc oo"
	echo " i.e., align_oxygen2 p5000 3to37 1 1 2 2 2"
	echo " (assumes that ho1 and ho2 are aligned as rp5000ho1_g3.v and rp5000ho2_g3.v)"
    exit (-1)
endif

set PID    = $1
set SLICES = $2
set FIL    = _g3

# Notes on filenames:
#   TR  - used for mask for airdif check
#   H1  - reference water (HO1 is filtered)
#   H2  - 2nd water already aligned to H1 (HO2 is filtered)
#   OC, OO - aligned to H2 (OC2, OO2 are filtered)
#   OEF - created for comparison with unaligned oef
#   HOX - aligned OO2 renamed as ho for imean
#   OOX - aligned OO2 minus HO1

set RID  = r$PID
set TR   = tr${3}_2dg5
set H1   = ho${4}
set H2   = ho${5}
set OC   = oc${6}
set OO   = oo${7}
set OEF  = oef${7}
set HOX  = ho${7}00${FIL}
set OOHOSET = "${7}00 $5"
set OEFSET  = ${7}f${5}v${6}

set HO1 = ${H1}${FIL}
set HO2 = ${H2}${FIL}
set OC2 = ${OC}${FIL}
set OO2 = ${OO}${FIL}
set OOX = ${OO}00
set OCHO = ${OC}_to_${H2}
set OOHO = ${OO}_to_${H2}
set OEF1 = oef1
set ID = `echo $PID | cut -c2-`
set THRESH_OC = 30
set BOT = `echo $SLICES | cut -f2 -do`
set BOC = `echo $BOT - 20 | bc`
set SLICES_OC = 1to${BOC}

# Check existence of files:

set EFILES = "oef.prm oo-ho2.prm ua_oef.prm ${PID}${TR}.v ${RID}${HO1}.v ${RID}${H2}.v ${RID}${HO2}.v ${PID}${OO}.v ${PID}${OO2}.v ${PID}${OC}.v ${PID}${OC2}.v ${RID}${HO2}.hdr ${PID}${OO2}.hdr ${PID}${OC2}.hdr"
set STATUS = 0
foreach i ($EFILES)
	if (! -e $i) then
		echo "ERROR [align_oxygen2]: $i does not exist."
		set STATUS = 1
	endif
end
if ( $STATUS != 0) exit (-1)

# Check the pixel size in PET headers:

set PIXSIZE = `imghdr ${RID}${HO1}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($PIXSIZE == 0.208634) then
	echo "Note: pixel size of ${RID}${H2}.v is $PIXSIZE"
endif
set TPIXSIZE = `imghdr ${RID}${H2}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($TPIXSIZE != $PIXSIZE) then
	echo "ERROR [align_oxygen2]: different pixel sizes:"
	echo "  ${RID}${HO1}.v = $PIXSIZE"
	echo "  ${RID}${H2}.v = $TPIXSIZE"
	exit (-1)
endif
set TPIXSIZE = `imghdr ${RID}${HO2}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($TPIXSIZE != $PIXSIZE) then
	echo "ERROR [align_oxygen2]: different pixel sizes:"
	echo "  ${RID}${HO1}.v = $PIXSIZE"
	echo "  ${RID}${HO2}.v = $TPIXSIZE"
	exit (-1)
endif
set TPIXSIZE = `imghdr ${PID}${OO}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($TPIXSIZE != $PIXSIZE) then
	echo "ERROR [align_oxygen2]: different pixel sizes:"
	echo "  ${RID}${HO1}.v = $PIXSIZE"
	echo "  ${PID}${OO}.v = $TPIXSIZE"
	exit (-1)
endif
set TPIXSIZE = `imghdr ${PID}${OC}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($TPIXSIZE != $PIXSIZE) then
	echo "ERROR [align_oxygen2]: different pixel sizes:"
	echo "  ${RID}${HO1}.v = $PIXSIZE"
	echo "  ${PID}${OC}.v = $TPIXSIZE"
	exit (-1)
endif
set TPIXSIZE = `imghdr ${PID}${TR}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($TPIXSIZE != $PIXSIZE) then
	echo "ERROR [align_oxygen2]: different pixel sizes:"
	echo "  ${RID}${HO1}.v = $PIXSIZE"
	echo "  ${PID}${TR}.v = $TPIXSIZE"
	exit (-1)
endif

# Setup log file:

set BINFILE = `which align_oxygen2`
set VER = `grep rcsid $BINFILE | cut -f2- -d: | cut -f1 -dE | head -1`

set LOGFILE = ${PID}${OEF}_align.log
echo "$PID $OEF alignment:  " `whoami` `date` >! $LOGFILE
echo "Version: " $VER         >> $LOGFILE
echo ""                       >> $LOGFILE
echo ">> parameters"          >> $LOGFILE
echo "PID       = $PID"       >> $LOGFILE
echo "SLICES    = $SLICES"    >> $LOGFILE
echo ""                       >> $LOGFILE

# Use existing brain mask from transmission: 
# Convert images to Analyze format:

img2analyze ${RID}${H2}.v a${RID}${H2}
img2analyze ${PID}${OO}.v a${PID}${OO}
img2analyze ${PID}${OC}.v a${PID}${OC}
img2analyze ${RID}${HO2}.v a${RID}${HO2}
img2analyze ${PID}${OO2}.v a${PID}${OO2}
img2analyze ${PID}${OC2}.v a${PID}${OC2}

# Align OO to HO, then reslice OO:

setanamin abrainmsk 0
setanamin a${RID}${HO2} 0
setanamin a${PID}${OO2} 0
echo "Aligning: ${PID}${OO2} to ${RID}${HO2}"
set PRM = '-m 6 -p1 256 -t1 100 -p2 256 -t2 100 -e1 abrainmsk -e2 abrainmsk -x 1 -v'
alignlinear a${RID}${HO2} a${PID}${OO2} ${PID}${OOHO}.air $PRM >! log
echo ">> alignlinear oo to ho" >> $LOGFILE
tail -6 log | head -3 >> $LOGFILE
tail -1 log >> $LOGFILE
imgreslice a${PID}${OO2} ${PID}${OOHO}
analyze2img ra${PID}${OO2} r${PID}${OO2}.v
/usr/bin/cp ${PID}${OO2}.hdr r${PID}${OO2}.hdr
imgreslice a${PID}${OO} ${PID}${OOHO}
analyze2img ra${PID}${OO} r${PID}${OO}.v
/usr/bin/cp ${PID}${OO2}.hdr r${PID}${OO}.hdr

# Check amount of movement using existing null.air file

echo ">> airdif ${PID}${OOHO}.air" >> $LOGFILE
airdif ${PID}${OOHO}.air null.air brainmsk.v | tail -7 >> $LOGFILE

# Create OO-HO with imean:

echo "slices:	$SLICES" >> oo-ho2.prm
/usr/bin/cp r${PID}${OO2}.v ${RID}${HOX}.v
echo "$ID $OOHOSET" >! oo-ho2.lst
imgmean oo-ho2.prm oo-ho2.lst 
imean oo-ho2.prm oo-ho2.lst ${PID}${OOX}-${H2}.v
img2analyze ${PID}${OOX}-${H2}.v a${PID}${OOX}-${H2}
/usr/bin/rm ${RID}${HOX}.v

# Create a vessel mask from CO2:
 
threshpct ${PID}${OC2}.v vas2.v $THRESH_OC $SLICES_OC
invertimg vas2.v nonvas2.v
img2analyze vas2.v avas2
setanamin avas2 0

# Align CO to OO-HO, then reslice CO:

setanamin a${PID}${OOX}-${H2} 0
setanamin a${PID}${OC2} 0
echo "Aligning: ${PID}${OC2} to ${PID}${OOX}-${H2}"
set PRM = '-m 6 -p1 256 -t1 100 -p2 256 -t2 100 -e1 avas2 -e2 avas2 -x 1 -v'
alignlinear a${PID}${OOX}-${H2} a${PID}${OC2} ${PID}${OCHO}.air $PRM >! log
echo ">> alignlinear oc to oo-ho" >> $LOGFILE
tail -6 log | head -3 >> $LOGFILE
tail -1 log >> $LOGFILE
/usr/bin/rm log
imgreslice a${PID}${OC2} ${PID}${OCHO}
analyze2img ra${PID}${OC2} r${PID}${OC2}.v
/usr/bin/cp ${PID}${OC2}.hdr r${PID}${OC2}.hdr
imgreslice a${PID}${OC} ${PID}${OCHO}
analyze2img ra${PID}${OC} r${PID}${OC}.v
/usr/bin/cp ${PID}${OC2}.hdr r${PID}${OC}.hdr

# Check amount of movement:

echo ">> airdif ${PID}${OCHO}.air" >> $LOGFILE
airdif ${PID}${OCHO}.air null.air brainmsk.v | tail -7 >> $LOGFILE

# Create filtered, aligned OEF image:

/usr/bin/cp ${PID}${HO2}.hdr r${PID}${HO2}.hdr
echo "$ID $OEFSET 1.0" >! oef.lst
imean oef.prm oef.lst r${PID}${OEF}${FIL}.v

# Create filtered, unaligned OEF image:

imean ua_oef.prm oef.lst ${PID}${OEF}${FIL}.v

# Use existing brain+venous and venous masks
# Combine brain-only mask with realigned OO and HO to exclude
# pixels not included in all images

histoimg ${PID}${OEF}${FIL}.v mask${OEF1}u.v 1 0 1000 100 | tail -16 | head -13 >! a.tmp
histoimg r${PID}${OEF}${FIL}.v mask${OEF1}.v 1 0 1000 100 | tail -16 | head -13 >! b.tmp
echo ">> histoimg ${PID}${OEF}${FIL}.v r${PID}${OEF}${FIL}.v" >> $LOGFILE
echo "Brain   Original   Aligned" >> $LOGFILE
echo "-----   --------   -------" >> $LOGFILE
cut -c7- b.tmp >! c.tmp
paste a.tmp c.tmp >> $LOGFILE
/usr/bin/rm a.tmp b.tmp c.tmp
echo '' >> $LOGFILE
histoimg ${PID}${OEF}${FIL}.v mask${OEF1}u.v 1 0 1000 100 | tail -3 >> $LOGFILE
histoimg r${PID}${OEF}${FIL}.v mask${OEF1}.v 1 0 1000 100 | tail -1 >> $LOGFILE
echo '' >> $LOGFILE

echo "Processing Complete [align_oxygen2]:  r${PID}${OEF}${FIL}.v"

@


1.2
log
@*** empty log message ***
@
text
@d6 1
a6 1
#	rcsid = $Id: align_oxygen2,v 1.1 1999/03/02 15:23:47 tom Exp $
d8 4
a11 4
if ($#argv != 8) then
    echo "Usage: align_oxygen2 pid slices tr ho1 ho2 oc oo oef"
	echo " i.e., align_oxygen2 p5000 3to37 1 1 2 2 2 2"
	echo " (assumes that ho1 and ho2 are aligned as rp5000ho1_g3.v and rp5000ho2_g3.v)
d28 11
a38 3
set RID    = r$PID
set TR  = tr${3}_2dg5
set H1  = ho${4}
a39 1
set H2  = ho${5}
a40 2
set HOX = ${H2}00${FIL}
set OC  = oc${6}
a41 1
set OO  = oo${7}
a43 1
set OEF = oef${8}
a45 2
set OOHOSET = "${5}00 $5"
set OEFSET  = ${7}f${5}v${6}
d48 4
a132 1
set mask = abrainmsk
d137 2
a138 1
alignlinear a${RID}${HO2} a${PID}${OO2} ${PID}${OOHO}.air -m 6 -p1 256 -t1 100 -p2 256 -t2 100 -e1 $mask -e2 $mask -x 1 -v >! log
d164 7
a170 1
# Use existing vessel mask from CO1:
a172 1
set mask = avas0
d174 1
a174 1
setanamin a${PID}${OC} 0
d176 2
a177 1
alignlinear a${PID}${OOX}-${H2} a${PID}${OC2} ${PID}${OCHO}.air -m 6 -p1 256 -t1 100 -p2 256 -t2 100 -e1 $mask -e2 $mask -x 1 -v >! log
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
#	rcsid = $Id: align_oxygen2,v 1.15 1999/01/05 18:19:30 tom Exp tom $
d11 1
d19 10
d30 10
a39 6
set HO  = ho${4}${FIL}
set HO2 = ho${5}${FIL}
set HOX = ho${5}00${FIL}
set OC  = oc${6}${FIL}
set OO  = oo${7}${FIL}
set OOX = oo${7}00
d41 2
a42 2
set OCHO = oc${6}_to_ho${4}
set OOHO = oo${7}_to_ho${4}
d50 1
a50 1
set EFILES = "oef.prm oo-ho.prm ua_oef.prm ${PID}${TR}.v ${PID}${HO}.v ${PID}${HO2}.v ${PID}${OO}.v ${PID}${OC}.v ${PID}${HO}.hdr ${PID}${HO2}.hdr ${PID}${OO}.hdr ${PID}${OC}.hdr"
d60 42
d107 2
a108 2
set LOGFILE = ${PID}_align2.log
echo "${PID} OEF2 alignment:  " `whoami` `date` >! $LOGFILE
a115 24
# Check the pixel size in PET headers:

set PIXSIZE = `imghdr ${PID}${HO}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($PIXSIZE == 0.208634) then
	echo "Note: pixel size of ${PID}${HO}.v is $PIXSIZE"
endif
set PIXSIZE = `imghdr ${PID}${HO2}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($PIXSIZE == 0.208634) then
	echo "Note: pixel size of ${PID}${HO2}.v is $PIXSIZE"
endif
set PIXSIZE = `imghdr ${PID}${OO}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($PIXSIZE == 0.208634) then
	echo "Note: pixel size of ${PID}${OO}.v is $PIXSIZE"
endif
set PIXSIZE = `imghdr ${PID}${OC}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($PIXSIZE == 0.208634) then
	echo "Note: pixel size of ${PID}${OC}.v is $PIXSIZE"
endif
set TPIXSIZE = `imghdr ${PID}${TR}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($TPIXSIZE != $PIXSIZE) then
	echo "ERROR: pixel size of ${PID}${TR}.v differs from ${PID}${OC}.v"
	exit (-1)
endif

d119 1
a119 2
img2analyze ${PID}${HO}.v a${PID}${HO}
img2analyze ${PID}${HO2}.v a${PID}${HO2}
d122 3
d130 4
a133 3
setanamin a${PID}${HO} 0
setanamin a${PID}${OO} 0
alignlinear a${PID}${HO} a${PID}${OO} ${PID}${OOHO}.air -m 6 -p1 256 -t1 100 -p2 256 -t2 100 -e1 $mask -e2 $mask -x 1 -v >! log
d137 3
a139 1
echo " " >> $LOGFILE
d142 1
a142 1
/usr/bin/cp ${PID}${OO}.hdr r${PID}${OO}.hdr
d147 1
a147 2
airdif ${PID}${OOHO}.air null.air brainmsk.v | tail -4 >> $LOGFILE
echo " " >> $LOGFILE
d151 2
a152 2
echo "slices:	$SLICES" >> oo-ho.prm
/usr/bin/cp r${PID}${OO}.v r${PID}${HOX}.v
d155 3
a157 3
imean oo-ho2.prm oo-ho2.lst ${PID}${OOX}-${HO}.v
img2analyze ${PID}${OOX}-${HO}.v a${PID}${OOX}-${HO}
/usr/bin/rm r${PID}${HOX}.v
d163 1
a163 1
setanamin a${PID}${OOX}-${HO} 0
d165 2
a166 1
alignlinear a${PID}${OOX}-${HO} a${PID}${OC} ${PID}${OCHO}.air -m 6 -t1 100 -p1 1 -t2 100 -p2 1 -e1 $mask -e2 $mask -x 1 -v >! log
d171 3
d176 1
a176 1
/usr/bin/cp ${PID}${OC}.hdr r${PID}${OC}.hdr
a179 1
echo " " >> $LOGFILE
d181 1
a181 2
airdif ${PID}${OCHO}.air null.air brainmsk.v | tail -4 >> $LOGFILE
echo " " >> $LOGFILE
a184 1
/usr/bin/cp ${PID}${HO2}.v r${PID}${HO2}.v
@
