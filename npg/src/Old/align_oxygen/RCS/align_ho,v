head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	99.05.11.14.48.58;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.05.04.19.54.22;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.03.22.15.24.12;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.03.02.15.23.47;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@change to -x 3
@
text
@#!/bin/csh
#   Module: align_ho
#   Author: Tom Videen
#   Date:   May-99
#   Use:    Align 2 HO images 
#	rcsid = $Id: align_ho,v 1.3 1999/05/04 19:54:22 tom Exp $

if ($#argv != 3) then
    echo "Usage: align_ho pid std res"
	echo " i.e., align_ho p5000 1 2"
    exit (-1)
endif

set PID = $1
set STD = ho$2
set RES = ho$3
set FIL = _g3
set HO1 = ${PID}${STD}${FIL}
set H2  = ${PID}${RES}
set HO2 = ${PID}${RES}${FIL}
set THRESH_HO = 30
set AIR = ${PID}${RES}_to_${STD}

# Check existence of files:

if (! -e ${HO1}.v) then
	echo "ERROR [align_ho]: ${HO1}.v does not exist."
	exit
endif
if (! -e ${HO2}.v) then
	echo "ERROR [align_ho]: ${HO2}.v does not exist."
	exit
endif
if (! -e ${H2}.v) then
	echo "ERROR [align_ho]: ${H2}.v does not exist."
	exit
endif

# Setup log file:

set BINFILE = `which align_ho`
set VER = `grep rcsid $BINFILE | cut -f2- -d: | cut -f1 -dE | head -1`

set LOGFILE = ${H2}_to_${STD}_align.log
echo "${H2} alignment:  " `whoami` `date` >! $LOGFILE
echo "Version: " $VER         >> $LOGFILE
echo ""                       >> $LOGFILE
echo ">> parameters"          >> $LOGFILE
echo "THRESH_HO = $THRESH_HO" >> $LOGFILE
echo ""                       >> $LOGFILE

# Check the pixel size in PET headers:

set PIXSIZE = `imghdr ${HO1}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($PIXSIZE == 0.208634) then
	echo "Note: pixel size of ${HO1}.v is $PIXSIZE"
endif
set PIXSIZE = `imghdr ${HO2}.v | grep 'Pixel size' | cut -f4 -d' '`
if ($PIXSIZE == 0.208634) then
	echo "Note: pixel size of ${HO2}.v is $PIXSIZE"
endif

# Create a brain mask from transmission: 

maskpct ${HO1}.v maskcbf.v $THRESH_HO 

# Convert images to Analyze format:

img2analyze ${HO1}.v a${HO1}
img2analyze ${HO2}.v a${HO2}
img2analyze ${H2}.v a${H2}

# Align HO2 to HO1, then reslice:

set a = `imghdr ${HO1}.v | grep Max | cut -f3 -d' '`
set thresh1 = `echo $a / 3 | bc`
set b = `imghdr ${HO2}.v | grep Max | cut -f3 -d' '`
set thresh2 = `echo $b / 3 | bc`
setanamin a${HO1} 0
setanamin a${HO2} 0
echo "Aligning: ${HO2} to ${HO1}"
set PRM = "-m 6 -p1 1 -t1 $thresh1 -p2 1 -t2 $thresh2 -x 3 -v"
alignlinear a${HO1} a${HO2} ${AIR}.air $PRM >! log
echo ">> alignlinear $HO2 to $HO1" >> $LOGFILE
tail -6 log | head -3 >> $LOGFILE
tail -1 log >> $LOGFILE
imgreslice a${H2} $AIR
analyze2img ra${H2} r${H2}.v

imgreslice a${HO2} $AIR
analyze2img ra${HO2} r${HO2}.v

if (-e ${HO2}.hdr) then
	/usr/bin/cp ${HO2}.hdr r${H2}.hdr
	/usr/bin/cp ${HO2}.hdr r${HO2}.hdr
endif

# Check amount of movement:

if (! -e null.air) then
	alignlinear a${HO1} a${HO1} null.air -m 6 -p1 1 -t1 100 -p2 0 -x 2
endif
echo ">> airdif ${AIR}.air" >> $LOGFILE
airdif ${AIR}.air null.air maskcbf.v | tail -7 >> $LOGFILE
echo "Complete [align_ho]:  r${H2}.v"

@


1.3
log
@fix set PRM
@
text
@d6 1
a6 1
#	rcsid = $Id: align_ho,v 1.2 1999/03/22 15:24:12 tom Exp $
d82 1
a82 1
set PRM = "-m 6 -p1 1 -t1 $thresh1 -p2 1 -t2 $thresh2 -x 1 -v"
@


1.2
log
@*** empty log message ***
@
text
@d4 1
a4 1
#   Date:   Mar-99
d6 1
a6 1
#	rcsid = $Id: align_ho,v 1.1 1999/03/02 15:23:47 tom Exp $
d76 1
a76 1
set thresh1 = `echo $a / 3 | bc -l`
d78 1
a78 1
set thresh2 = `echo $b / 3 | bc -l`
d82 2
a83 1
alignlinear a${HO1} a${HO2} ${AIR}.air -m 6 -p1 1 -t1 $thresh1 -p2 1 -t2 $thresh2 -x 1 -v >! log
a88 1
/usr/bin/cp ${HO2}.hdr r${H2}.hdr
a91 1
/usr/bin/cp ${HO2}.hdr r${HO2}.hdr
d93 5
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
#	rcsid = $Id$
d9 2
a10 2
    echo "Usage: align_ho std res fil"
	echo " i.e., align_ho rp5000ho1 p5000ho2 g3"
d14 7
a20 4
set H2  = $2
set FIL = _$3
set HO1 = ${1}${FIL}
set HO2 = ${H2}${FIL}
d22 1
d44 2
a45 2
set LOGFILE = ${HO2}_align.log
echo "${HO2} alignment:  " `whoami` `date` >! $LOGFILE
d81 2
a82 1
alignlinear a${HO1} a${HO2} ${H2}.air -m 6 -p1 1 -t1 $thresh1 -p2 1 -t2 $thresh2 -x 1 -v >! log
d86 1
a86 2
echo " " >> $LOGFILE
imgreslice a${H2} ${H2}
d90 1
a90 1
imgreslice a${HO2} ${H2}
d92 1
d96 5
a100 5
alignlinear a${HO1} a${HO1} null.air -m 6 -p1 1 -t1 100 -p2 1 -t2 100 -x 1
echo ">> airdif ${H2}.air" >> $LOGFILE
airdif ${H2}.air null.air maskcbf.v | tail -4 >> $LOGFILE
echo " " >> $LOGFILE

@
