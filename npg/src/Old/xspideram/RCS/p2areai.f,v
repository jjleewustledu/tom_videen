head	1.3;
access;
symbols;
locks; strict;
comment	@c @;


1.3
date	93.10.04.21.55.32;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	92.04.23.21.25.39;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	92.04.13.19.12.07;	author tom;	state Exp;
branches;
next	;


desc
@Spideram function.
@


1.3
log
@added rcsheader
@
text
@CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  Subroutine:   P2AREAI.FTN
C
C  Author:       Tom O. Videen
C  Date:         27-Mar-87
C  Written For:  SPIDERAM Super PET Image Display Program
C
C  Intent:
C     This routine returns all points included within the region REG.
C     Only interior points will be included (not the boundary points).
C     All of the points are inserted into the list INREGION.
C
C  Common Blocks from SPIDERAM.INC:
C     **IMAGEDAT - image arrays                   (write)
C     **REGION   - region analysis parameters     (read only)
C     **AREA     - region analysis                (write)
C
C  Variable Passed:
C      REG = number of the region of interest (1-100);
C
C  Local Variables:
C      X1 = XMIN(REG)   these four values define the image field
C      Y1 = YMIN(REG)       which will contain all points in the
C      X2 = XMAX(REG)       region of interest
C      Y2 = YMAX(REG)
C
C  Common Block Array:
C      IARRAY(X,Y) = array of points representing an image mask for
C         the region of interest;
C         points are:
C            initialized to 0;
C            set to 1 if included in the boundary;
C            set to -1 if excluded from the region;
C
C
C  No Subroutines:
C
C  Called by:
C     R2STATS
C     A2ANALYZ
C     P2LOCATE
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE P2AREAI(REG)
C
      INTEGER*4  REG,PTR,X1,Y1,X2,Y2,I,J,TEMP
      LOGICAL*1  MORE
      character*256 rcsheader
C
      INCLUDE 'spideram.inc'
      rcsheader = "$Id$"
C
C  Initializations
C
      DO 20 I=1,128
        DO 10 J=1,128
          IARRAY(I,J) = 0
10      CONTINUE
20    CONTINUE
      RTOP = 0
      X1 = XMIN(REG)
      X2 = XMAX(REG)
      Y1 = YMIN(REG)
      Y2 = YMAX(REG)
      PTR = BVAL(REG)
C
C  First include all the boundary points in IARRAY.
C  (by setting their values in IARRAY to 1)
C
      DO 200 I=1,AVAL(REG)
        IARRAY(BOUNDARY(1,PTR),BOUNDARY(2,PTR)) = 1
        PTR = PTR+1
200   CONTINUE
C
C  If the boundary is either no more than two columns or two rows
C     wide, then the region consists only of the boundary points.
C
      IF (((Y2-Y1).LE.1).OR.((X2-X1).LE.1)) GO TO 2000
C
C  Exclude all points that are on the edges of the image field
C     (defined by X1,Y1 and X2,Y2) but which are not
C      boundary points.
C
      DO 300 I=X1,X2
        IF (IARRAY(I,Y1).NE.1) IARRAY(I,Y1)=-1
        IF (IARRAY(I,Y2).NE.1) IARRAY(I,Y2)=-1
300   CONTINUE
C
      DO 400 J=Y1,Y2
        IF (IARRAY(X1,J).NE.1) IARRAY(X1,J)=-1
        IF (IARRAY(X2,J).NE.1) IARRAY(X2,J)=-1
400   CONTINUE
C
C  Now, starting with the edges of the image field, expand the
C     area excluded from the region by setting to -1 all points
C     directly adjacent to a point whose value is -1.
C     (directly adjacent means connected by one face;
C      it excludes points connected only on a diagonal)
C
      MORE = .FALSE.
C
C  Row of IARRAY for Y1
C
      DO 500 I=X1,X2
        IF (IARRAY(I,Y1).EQ.-1) THEN
          IF (IARRAY(I,Y1+1).EQ.0) THEN
            IARRAY(I,Y1+1) = -1
            MORE = .TRUE.
          END IF
        END IF
500   CONTINUE
C
C  Row of IARRAY for Y2
C
      DO 600 I=X1,X2
        IF (IARRAY(I,Y2).EQ.-1) THEN
          IF (IARRAY(I,Y2-1).EQ.0) THEN
            IARRAY(I,Y2-1) = -1
            MORE = .TRUE.
          END IF
        END IF
600   CONTINUE
C
C  Column of IARRAY for X1
C
      DO 700 J=Y1,Y2
        IF (IARRAY(X1,J).EQ.-1) THEN
          IF (IARRAY(X1+1,J).EQ.0) THEN
            IARRAY(X1+1,J) = -1
            MORE = .TRUE.
          END IF
        END IF
700   CONTINUE
C
C  Column of IARRAY for X1
C
      DO 800 J=Y1,Y2
        IF (IARRAY(X2,J).EQ.-1) THEN
          IF (IARRAY(X2-1,J).EQ.0) THEN
            IARRAY(X2-1,J) = -1
            MORE = .TRUE.
          END IF
        END IF
800   CONTINUE
C
C   If there are no more points to be excluded,
C     all the points that are not -1 are in the region.
C
      IF (.NOT.MORE) GO TO 2000
C
C   If the boundary is not a rectangle, check all the inside points.
C   This loop is repeated until it cycles once with no more points
C      added to the outside of the region.
C
1000  MORE = .FALSE.
      DO 1500 I=X1+1,X2-1
        DO 1400 J=Y1+1,Y2-1
          IF (IARRAY(I,J).EQ.-1) THEN
            IF (IARRAY(I-1,J).EQ.0) THEN
              IARRAY(I-1,J) = -1
              MORE = .TRUE.
            END IF
            IF (IARRAY(I+1,J).EQ.0) THEN
              IARRAY(I+1,J) = -1
              MORE = .TRUE.
            END IF
            IF (IARRAY(I,J-1).EQ.0) THEN
              IARRAY(I,J-1) = -1
              MORE = .TRUE.
            END IF
            IF (IARRAY(I,J+1).EQ.0) THEN
              IARRAY(I,J+1) = -1
              MORE = .TRUE.
            END IF
          END IF
1400    CONTINUE
1500  CONTINUE
      IF (MORE) GO TO 1000
C
C  All points that now have the value 0 are included in the
C    region and will be stored in the array INREGION.
C
2000  DO 3000 I=X1,X2
        DO 2500 J=Y1,Y2
          TEMP = IARRAY(I,J)
          IF (TEMP.EQ.0) THEN
            RTOP = RTOP+1
            INREGION(RTOP,1) = I
            INREGION(RTOP,2) = J
          END IF
2500    CONTINUE
3000  CONTINUE
C
C  The list INREGION now contains all the points included in the
C    region.  RTOP is the number of points included.
C
      RETURN
      END
@


1.2
log
@Save window dump. 04/23/92 by Tom Yang
@
text
@a47 1
C
d50 1
d53 1
a53 1
C
@


1.1
log
@Initial revision
@
text
@@
