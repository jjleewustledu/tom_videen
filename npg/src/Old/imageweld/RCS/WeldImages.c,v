head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	95.07.18.14.56.40;	author ty7777;	state Exp;
branches;
next	1.15;

1.15
date	95.07.17.22.02.36;	author ty7777;	state Exp;
branches;
next	1.14;

1.14
date	95.07.14.17.31.38;	author ty7777;	state Exp;
branches;
next	1.13;

1.13
date	95.07.13.22.02.48;	author ty7777;	state Exp;
branches;
next	1.12;

1.12
date	95.07.13.15.52.18;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	95.07.12.19.40.34;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	95.07.11.21.58.12;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	93.12.13.23.03.21;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	93.11.04.21.58.51;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	93.11.04.21.08.20;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	93.11.02.18.28.54;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	93.10.20.15.52.46;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	93.10.19.20.40.52;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.10.19.19.07.07;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.10.15.20.51.39;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.09.08.16.37.39;	author ty7777;	state Exp;
branches;
next	;


desc
@WeldImages.c first checking in.
@


1.16
log
@Modified to separate simple_weld from normal weld.
@
text
@/*$Id: WeldImages.c,v 1.15 1995/07/17 22:02:36 ty7777 Exp ty7777 $*/
/*$Log: WeldImages.c,v $
 * Revision 1.15  1995/07/17  22:02:36  ty7777
 * Calculate kk.
 *
 * Revision 1.14  1995/07/14  17:31:38  ty7777
 * The matrix for simple_weld is identity.
 *
 * Revision 1.13  1995/07/13  22:02:48  ty7777
 * After (t + b) / 2 is implemented.
 *
 * Revision 1.12  1995/07/13  15:52:18  ty7777
 * Added the number of overlapped slices.
 *
 * Revision 1.11  1995/07/12  19:40:34  ty7777
 * Added processing for simple weld.
 *
 * Revision 1.10  1995/07/11  21:58:12  ty7777
 * After introducing noisy_slices.
 *
 * Revision 1.9  1993/12/13  23:03:21  ty7777
 * Added processing for top_lslice = 0 and bottom_lslice = 0.
 * Reported by Avi.
 *
 * Revision 1.8  1993/11/04  21:58:51  ty7777
 * Processing for time and version stamp.
 *
 * Revision 1.7  1993/11/04  21:08:20  ty7777
 * Processing for rec file.
 *
 * Revision 1.6  1993/11/02  18:28:54  ty7777
 * Before adding rec file.
 *
 * Revision 1.5  1993/10/20  15:52:46  ty7777
 * Fixed imgval. Delete the code for boundary points.
 *
 * Revision 1.4  1993/10/19  20:40:52  ty7777
 * Added processing for getting rid of the movement artifacts.
 *
 * Revision 1.3  1993/10/19  19:07:07  ty7777
 * Transform each pixel to get rid of movement artifacts.
 *
 * Revision 1.2  1993/10/15  20:51:39  ty7777
 * Before Interpolation.
 *
 * Revision 1.1  1993/09/08  16:37:39  ty7777
 * Initial revision
 **/

/*_________________________________________________________________
  File:		WeldImages.c

  Function:	int WeldImages (char *top_scan, char *bottom_scan, char *whole_scan, 
		BOOLEAN simple_weld, int noisy_slices, float topT4 [4][4], 
		float bottomT4 [4][4], float top_scaling_factor, float bottom_scaling_factor, 
		float normalization_factor, FILE *recfp, char *now, char *version)

  Arguments:	top_scan,		the top scan image name.
		bottom_scan,		the bottom scan image name.
		whole_scan,		the image file name for the welded image.
		simple_weld,		1: simple weld; 0: normal weld.
		noisy_slices,		number of noisy slices.
		topT4,			the T4 matrix for the top scan. It contains all
					the parameters for rotation and translation.
		bottomT4,		the T4 matrix for the bottom scan. It contains 
					all the parameters for rotation and translation.
		top_scaling_factor,	scaling factor for the top scan.
		bottom_scaling_factor,	scaling factor for the bottom scan.
		normalization_factor,	normalization factor applied to the bottom scan
					to make it compatible with the top scan.
		recfp,			rec file pointer, passed in.
		now,			the current time stamp.
		version,		the program version.

  Return:	SUCCEED: successful; FAIL: error.

  Calling:	GetIndexingScanOffset () in GetIndexingScanOffset.c	
		GetSamplingMode () in GetSamplingMode.c	
  
		Library functions in libhp.a include:
		getimagedim ()
		getrealimg ()
		pkg_malloc ()
		writerealimg ()

		Library functions in libcti.a include:
		matrixx_init_image_subheader ();

  Called by:	the main program in imageweld.c.

  Description:	This program reads two ECAT images which represent the
		top and bottom scans of the brain with some overlapped
		slices. It then construct an ECAT image for the whole
		brain. The overlapped slices is constructed in such a
		way that the noise is minimum.

  History:	Created by Tom Yang on 05/05/93. 
_________________________________________________________________*/

#include "imageweld.h"
#include <values.h>
#include <petutil/matrix.h>
#include <petutil/standard_deviations.h>

static char rcsid []= "$Id: WeldImages.c,v 1.15 1995/07/17 22:02:36 ty7777 Exp ty7777 $";

PUBLIC int WeldImages (top_scan, bottom_scan, whole_scan, simple_weld, noisy_slices, topT4, 
	bottomT4, top_scaling_factor, bottom_scaling_factor, normalization_factor, 
	recfp, now, version)
	char		*top_scan;
	char		*bottom_scan;
	char		*whole_scan;
	BOOLEAN		simple_weld;
	int		noisy_slices;
	float		topT4 [4][4];
	float		bottomT4 [4][4];
	float		top_scaling_factor;
	float		bottom_scaling_factor;
	float		normalization_factor;
	FILE		*recfp;
	char		*now;
	char		*version;
{
	extern		imgval_ ();

	BOOLEAN		top_bottom_flipped;
	Image_subheader	**bottom_subheader_list;
	Image_subheader	**subheader_list;
	Image_subheader	**top_subheader_list;
	Main_header	*bottom_main_header;
	Main_header	*main_header;
	Main_header	*top_main_header;
	char		rec_file [MAXLINE];
	float		*bottom_image3d;
	float		bottom_value;
	float		bottom_weight;
	float		*image3d;
	float		corrected_normalization_factor;
	float		offset;
	float		scaling_factor;
	float		*top_image3d;
	float		top_weight;
	float		pixel_size;
	float		plane_separation;
	float		*sigma3d	= standard_deviations3d;
	float		top_value;
	float		*weight_table;
	int		bottom_lslice;
	int		corrected_noisy_slices;
	int		dimension;
	int		i;
	int		j;
	int		k;
	int		kk;
	int		num_overlapped_slices;
	int		num_shifted_slices;
	int		nslice;
	int		nx;
	int		ny;
	int		sampling_mode;
	int		scanner;
	int		slice_dim;
	int		top_lslice;
	int		top_scan_overlap_start;
	long		current_rows;
	long		current_slices;
	short		bottom_num_slices;
	short		height;
	short		num_slices;
	short		top_num_slices;
	short		width;
	struct Matval	matval;

	if (simple_weld || pkg_abs (normalization_factor - MAXSHORT) <= ERROR_BOUND)
		corrected_normalization_factor	= 1.0;
	else
		corrected_normalization_factor	= normalization_factor;

	/*______________________________________________________
	 * Assign default values for matval.
	 *______________________________________________________*/
	matval.frame	= 1;
	matval.plane	= 1;
	matval.gate	= 1;
	matval.data	= 0;
	matval.bed	= 0;

	/*______________________________________________________
	 * Get image type and do error checking.
	 *______________________________________________________*/
	if (getimagedim (top_scan, matval, &scanner, &width, &height, &top_num_slices, 
		&pixel_size, &pixel_size, &plane_separation) == FAIL) 
	{
		fprintf (stderr, "Error: getimagedim () failed.\n");
		return FAIL;
	}

	if (scanner != ECAT_SCANNER)
	{
		fprintf (stderr, "Error: top scan file %s is not an ECAT image.\n", top_scan);
		return FAIL;
	}

	/*______________________________________________________
	 * Determine the sampling mode.
	 *______________________________________________________*/
	if (GetSamplingMode (top_scan, &sampling_mode) == FAIL)
	{
		fprintf (stderr, "Error: in GetSamplingMode for file %s\n", top_scan);
		return FAIL;
	}
	else
	{
		fprintf (stdout, "\nProcessing in %dD mode\n", sampling_mode);
		fprintf (recfp, "\nProcessing in %dD mode\n", sampling_mode);
	}

	/*______________________________________________________
	 * Get the offset for the indexing scan.
	 *______________________________________________________*/
	if (GetIndexingScanOffset (top_scan, bottom_scan, &offset, 
	&top_bottom_flipped, TRUE, recfp) == FAIL)
	{
		fprintf (stderr, "Error: in GetIndexingScanOffset ().\n");
		return FAIL;
	}

	if (top_bottom_flipped)
	{
		scaling_factor		= top_scaling_factor;
		top_scaling_factor	= bottom_scaling_factor; 
		bottom_scaling_factor	= scaling_factor;

		for (j = 0; j < 4; j++)
		{
			for (i = 0; i < 4; i++)
			{
				scaling_factor	= topT4 [i][j];
				topT4 [i][j]	= bottomT4 [i][j];
				bottomT4 [i][j]	= scaling_factor;
			}
		}
	}

	/*______________________________________________________
	 * Get the number of the overlapped slices.
	 *______________________________________________________*/
	num_shifted_slices	= ROUND (offset / (plane_separation * MMS_PER_CM));
	num_overlapped_slices	= top_num_slices - num_shifted_slices;
	corrected_noisy_slices	= pkg_min (num_overlapped_slices / 2, noisy_slices);

	if (pkg_abs (offset - num_shifted_slices * plane_separation * MMS_PER_CM) > ERROR_BOUND)
	{
		fprintf (stdout, "Image shift differs from exact slice alignment by %.3f mm\n",
			num_shifted_slices * plane_separation * MMS_PER_CM - offset);
		fprintf (recfp, "Image shift differs from exact slice alignment by %.3f mm\n",
			num_shifted_slices * plane_separation * MMS_PER_CM - offset);
	}
	fprintf (stdout, "\nNumber of overlaped slices = %d\n", num_overlapped_slices);
	fprintf (recfp, "\nNumber of overlaped slices = %d\n", num_overlapped_slices);

	if (num_overlapped_slices > top_num_slices)
	{
		fprintf (stderr, "Error: number of overlapped slices %d is greater than %d.\n", 
			num_overlapped_slices, top_num_slices);
		return FAIL;
	}

	fprintf (stdout, "The top scan image is %s\n", top_scan);
	fprintf (stdout, "The bottom scan image is %s\n", bottom_scan);
	fprintf (recfp, "The top scan image is %s\n", top_scan);
	fprintf (recfp, "The bottom scan image is %s\n", bottom_scan);

	/*______________________________________________________
	 * Get data from the top scan.
	 *______________________________________________________*/
	top_subheader_list	= (Image_subheader **) pkg_malloc (top_num_slices * sizeof (caddr_t), 
					"WeldImages", "top_subheader_list");

	slice_dim	= width * height;
	dimension	= slice_dim * top_num_slices;
	top_image3d	= (float *) pkg_malloc (dimension * sizeof (float), "WeldedImages", "top_image3d");
	top_main_header	= (Main_header *) calloc (1, sizeof (Main_header));

	if (getrealimg (top_scan, scanner, matval, width, height, top_num_slices, top_image3d, 
		top_main_header, top_subheader_list) == FAIL)
	{
		fprintf (stderr, "Error: getrealimg () failed.\n");
		free (top_subheader_list);
		free (top_main_header);
		free (top_image3d);
		return FAIL;
	}

	fprintf (stdout, "top	bottom\n");   
	fprintf (recfp, "top	bottom\n");   

	top_scan_overlap_start	= top_num_slices - num_overlapped_slices;
	for (i = 0; i < num_overlapped_slices; i++)
	{
		fprintf (stdout, "%d	%d\n", top_scan_overlap_start + i + 1, (i + 1));
		fprintf (recfp, "%d	%d\n", top_scan_overlap_start + i + 1, (i + 1));
	}

	top_scan_overlap_start	= top_num_slices - num_overlapped_slices + corrected_noisy_slices;

	/*______________________________________________________
	 * Get data from the bottom scan.
	 *______________________________________________________*/
	if (getimagedim (bottom_scan, matval, &scanner, &width, &height, &bottom_num_slices, 
		&pixel_size, &pixel_size, &plane_separation) == FAIL) 
	{
		fprintf (stderr, "Error: getimagedim () failed.\n");
		return FAIL;
	}

	if (scanner != ECAT_SCANNER)
	{
		fprintf (stderr, "Error: bottom scan file %s is not an ECAT image.\n", bottom_scan);
		return FAIL;
	}

	if (num_overlapped_slices > bottom_num_slices)
	{
		fprintf (stderr, "Error: number of overlapped slices %d is greater than %d.\n", 
			num_overlapped_slices, bottom_num_slices);
		return FAIL;
	}

	bottom_subheader_list	= (Image_subheader **) pkg_malloc (bottom_num_slices * sizeof (caddr_t), 
					"WeldImages", "bottom_subheader_list");

	dimension		= slice_dim * bottom_num_slices;
	bottom_image3d		= (float *) pkg_malloc (dimension * sizeof (float), 
						"WeldedImages", "bottom_image3d");
	bottom_main_header	= (Main_header *) calloc (1, sizeof (Main_header));

	if (getrealimg (bottom_scan, scanner, matval, width, height, bottom_num_slices, bottom_image3d, 
		bottom_main_header, bottom_subheader_list) == FAIL)
	{
		fprintf (stderr, "Error: getrealimg () failed.\n");
		free (bottom_subheader_list);
		free (bottom_main_header);
		free (bottom_image3d);
		return FAIL;
	}

	/*______________________________________________________
	 * Generate merged 3D real array.
	 *______________________________________________________*/
	num_slices	= top_num_slices + bottom_num_slices - num_overlapped_slices;
	subheader_list	= (Image_subheader **) pkg_malloc (num_slices * sizeof (caddr_t), 
					"WeldImages", "subheader_list");
	main_header	= (Main_header *) calloc (1, sizeof (Main_header));
	bcopy (top_main_header, main_header, sizeof (Main_header));
	dimension	= slice_dim * num_slices;
	image3d		= (float *) pkg_malloc (dimension * sizeof (float), "WeldImages", "image3d");

	/* 
	 * Generate the top planes.
	 */
	nx		= width;
	ny		= height;
	nslice		= top_num_slices;

	for (k = 1; k <= top_scan_overlap_start; k++)
	{
		current_slices	= (k - 1) * slice_dim;
		if (!simple_weld)
		{
			for (j = 1; j <= height; j++)
			{
				current_rows	= current_slices + (j - 1) * width;
				for (i = 1; i <= width; i++)
				{
					imgval_ (topT4, top_image3d, &nx, &ny, &nslice,		
						&i, &j, &k, &top_value, &top_lslice);
					if (top_lslice == 0)
						top_value	= 0.0;
					image3d [current_rows + i - 1] = top_value * top_scaling_factor;
				}
			}
		}
		else
		{
			for (j = 0; j < slice_dim; j++)
				image3d [current_slices + j]	= top_image3d [current_slices + j] 
								* top_scaling_factor;
		}

		/*
	 	 * Copy the sub headers.
	 	 */
		*(subheader_list + k - 1)	
		= matrixx_init_image_subheader (*(top_subheader_list + k - 1));
	}

	/*______________________________________________________
	 * Compute the weight table.
	 *______________________________________________________*/
	if (simple_weld)
	{
		top_weight	= top_scaling_factor / 2;
		bottom_weight	= bottom_scaling_factor / 2;
	}
	else
	{
		weight_table	= (float *) pkg_malloc (STANDARD_DEVIATIONS3D_SIZE * sizeof (float), 
					"WeldImages", "weight_table");
		if (sampling_mode == SAMPLING_MODE_3D)
		{
			for (i = 0; i < STANDARD_DEVIATIONS3D_SIZE; i++)
			{
				weight_table [i]	= (1.0 / (sigma3d [i] * sigma3d [i])
						+ 1.0 / (sigma3d [(STANDARD_DEVIATIONS3D_SIZE - 1) -  i]
						* sigma3d [(STANDARD_DEVIATIONS3D_SIZE - 1) - i])) / 2;
			}

			for (j = 0; j < corrected_noisy_slices; j++)
			{
				weight_table [j]					= 0.0;
				weight_table [STANDARD_DEVIATIONS3D_SIZE - 1 - j]	= 0.0;
			}
		}
		else
		{
			for (i = 0; i < STANDARD_DEVIATIONS3D_SIZE; i++)
			{
				weight_table [i]	= weight2d [i];
			}
			weight_table [0]				= 0.0;
			weight_table [STANDARD_DEVIATIONS3D_SIZE - 1]	= 0.0;
		}
	}

	/* 
	 * Compute the overlapped planes.
	 */
	for (k = top_scan_overlap_start + 1; 
	k <= top_scan_overlap_start + num_overlapped_slices - 2 * corrected_noisy_slices; k++)
	{
		current_slices	= (k - 1) * slice_dim;
		kk		= k - top_scan_overlap_start + corrected_noisy_slices;
		if (!simple_weld)
		{
			for (j = 1; j <= height; j++)
			{
				current_rows	= current_slices + (j - 1) * width;
				for (i = 1; i <= width; i++)
				{
					imgval_ (topT4, top_image3d, &nx, &ny, &nslice,		
						&i, &j, &k, &top_value, &top_lslice);

					if (top_lslice == 0)
						top_value	= 0.0;

					imgval_ (bottomT4, bottom_image3d, &nx, &ny, &nslice,		
						&i, &j, &kk, &bottom_value, &bottom_lslice);

					if (bottom_lslice == 0)
						bottom_value	= 0.0;

					top_lslice	-= 1;
					bottom_lslice	-= 1;

					if (top_lslice == -1)
					{
						top_weight	= 0.0;
						bottom_weight	= bottom_scaling_factor 
								* corrected_normalization_factor;
					}
					else if (bottom_lslice == -1)
					{
						top_weight	= top_scaling_factor;
						bottom_weight	= 0.0;
					}
					else if (pkg_abs (weight_table [top_lslice] 
					+ weight_table [bottom_lslice]) <= ERROR_BOUND)
					{
						top_weight	= 0.0;
						bottom_weight	= 0.0;
					}
					else
					{
						if (pkg_abs (normalization_factor - MAXSHORT) > ERROR_BOUND)
						{
							top_weight	= (weight_table [top_lslice] 
									* top_scaling_factor)
									/ (weight_table [top_lslice] 
									+ weight_table [bottom_lslice]);
							bottom_weight	= (weight_table [bottom_lslice] 
									* bottom_scaling_factor
									* normalization_factor)
									/ (weight_table [top_lslice] 
									+ weight_table [bottom_lslice]);
						}
						else
						{
							top_weight	= 0.0;
							bottom_weight	= corrected_normalization_factor;
						}
					}

					image3d [current_rows + i - 1]	
					= top_weight * top_value + bottom_weight * bottom_value;
				}
			}
		}
		else
		{
			for (j = 0; j < slice_dim; j++)
				image3d [current_slices + j]	
					= top_image3d [current_slices + j] * top_weight
					+ bottom_image3d [(kk - 1) * slice_dim + j] * bottom_weight;
		}

		*(subheader_list + k - 1)	
		= matrixx_init_image_subheader (*(top_subheader_list + k - 1));
	}

	if (!simple_weld)
		free (weight_table);

	for (i = 0; i < top_num_slices; i++)
	{
		free (top_subheader_list [i]);
	}
	free (top_subheader_list);
	free (top_main_header);
	free (top_image3d);

	/* 
	 * Generate the bottom planes.
	 */
	for (k = top_scan_overlap_start + num_overlapped_slices - 2 * corrected_noisy_slices + 1; 
	k <= num_slices; k++)
	{
		current_slices	= (k - 1) * slice_dim;
		kk		= k - top_scan_overlap_start + corrected_noisy_slices;

		if (!simple_weld)
		{
			for (j = 1; j <= height; j++)
			{
				current_rows	= current_slices + (j - 1) * width;
				for (i = 1; i <= width; i++)
				{
					imgval_ (bottomT4, bottom_image3d, &nx, &ny, &nslice,		
						&i, &j, &kk, &bottom_value, &bottom_lslice);
					if (bottom_lslice == 0)
						bottom_value	= 0.0;
					image3d [current_rows + i - 1] 
						= bottom_value * bottom_scaling_factor 
						* corrected_normalization_factor;
				}
			}
		}
		else
		{
			for (j = 0; j < slice_dim; j++)
				image3d [current_slices + j]	
				= bottom_image3d [(kk - 1) * slice_dim + j] 
				* bottom_scaling_factor;
		}
		
		*(subheader_list + k - 1)	
		= matrixx_init_image_subheader (*(bottom_subheader_list + kk - 1));
	}

	for (i = 0; i < bottom_num_slices; i++)
	{
		free (bottom_subheader_list [i]);
	}
	free (bottom_subheader_list);
	free (bottom_main_header);
	free (bottom_image3d);

	/*______________________________________________________
	 * Write 3D image to an ECAT matrix file.
	 *______________________________________________________*/
	strncpy (main_header->physician_name, version + 5, sizeof (main_header->physician_name) - 1);
	strncpy (main_header->operator_name, now, sizeof (main_header->operator_name) - 1);
	strncat (main_header->study_description, " Welded Image", 13);

	if (writerealimg (whole_scan, matval, width, height, num_slices, image3d, 
			main_header, subheader_list) == FAIL)
	{
		fprintf (stderr, "Error: writerealimg () failed.\n");
	}

	for (i = 0; i < num_slices; i++)
	{
		free (subheader_list [i]);
	}
	free (subheader_list);
	free (main_header);
	free (image3d);

	return SUCCEED;
}
@


1.15
log
@Calculate kk.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.14 1995/07/14 17:31:38 ty7777 Exp ty7777 $*/
d3 3
d105 1
a105 1
static char rcsid []= "$Id: WeldImages.c,v 1.14 1995/07/14 17:31:38 ty7777 Exp ty7777 $";
d444 1
a444 1
		for (j = 1; j <= height; j++)
d446 1
a446 2
			current_rows	= current_slices + (j - 1) * width;
			for (i = 1; i <= width; i++)
d448 5
a452 2
				imgval_ (topT4, top_image3d, &nx, &ny, &nslice,		
					&i, &j, &k, &top_value, &top_lslice);
d454 2
a455 2
				if (top_lslice == 0)
					top_value	= 0.0;
d457 2
a458 2
				imgval_ (bottomT4, bottom_image3d, &nx, &ny, &nslice,		
					&i, &j, &kk, &bottom_value, &bottom_lslice);
d460 2
a461 2
				if (bottom_lslice == 0)
					bottom_value	= 0.0;
a462 2
				if (!simple_weld)
				{
d503 3
a506 3

				image3d [current_rows + i - 1]	
				= top_weight * top_value + bottom_weight * bottom_value;
d508 7
@


1.14
log
@The matrix for simple_weld is identity.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.13 1995/07/13 22:02:48 ty7777 Exp ty7777 $*/
d3 3
d102 1
a102 1
static char rcsid []= "$Id: WeldImages.c,v 1.13 1995/07/13 22:02:48 ty7777 Exp ty7777 $";
d366 1
a366 1
		for (j = 1; j <= height; j++)
d368 1
a368 2
			current_rows	= current_slices + (j - 1) * width;
			for (i = 1; i <= width; i++)
d370 9
a378 5
				imgval_ (topT4, top_image3d, &nx, &ny, &nslice,		
					&i, &j, &k, &top_value, &top_lslice);
				if (top_lslice == 0)
					top_value	= 0.0;
				image3d [current_rows + i - 1] = top_value * top_scaling_factor;
d381 6
d440 1
a440 1
		kk		= 1 + k - top_scan_overlap_start;
d529 3
a531 2
		kk		= 1 + k - top_scan_overlap_start;
		for (j = 1; j <= height; j++)
d533 1
a533 2
			current_rows	= current_slices + (j - 1) * width;
			for (i = 1; i <= width; i++)
d535 11
a545 6
				imgval_ (bottomT4, bottom_image3d, &nx, &ny, &nslice,		
					&i, &j, &kk, &bottom_value, &bottom_lslice);
				if (bottom_lslice == 0)
					bottom_value	= 0.0;
				image3d [current_rows + i - 1] 
				= bottom_value * bottom_scaling_factor * corrected_normalization_factor;
d547 7
@


1.13
log
@After (t + b) / 2 is implemented.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.12 1995/07/13 15:52:18 ty7777 Exp ty7777 $*/
d3 3
d99 1
a99 1
static char rcsid []= "$Id: WeldImages.c,v 1.12 1995/07/13 15:52:18 ty7777 Exp ty7777 $";
d434 2
a435 4
				if (!simple_weld)
				{
					imgval_ (topT4, top_image3d, &nx, &ny, &nslice,		
						&i, &j, &k, &top_value, &top_lslice);
d437 2
a438 2
					if (top_lslice == 0)
						top_value	= 0.0;
d440 2
a441 2
					imgval_ (bottomT4, bottom_image3d, &nx, &ny, &nslice,		
						&i, &j, &kk, &bottom_value, &bottom_lslice);
d443 2
a444 2
					if (bottom_lslice == 0)
						bottom_value	= 0.0;
d446 2
@


1.12
log
@Added the number of overlapped slices.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.11 1995/07/12 19:40:34 ty7777 Exp ty7777 $*/
d3 3
d7 1
a7 1
 * Added processing for simple wled.
d44 2
a45 2
  Function:	int WeldImages (char *top_scan, char *bottom_scan, 
		char *whole_scan, int noisy_slices, float topT4 [4][4], 
d52 1
d96 1
a96 1
static char rcsid []= "$Id: WeldImages.c,v 1.11 1995/07/12 19:40:34 ty7777 Exp ty7777 $";
d98 2
a99 2
PUBLIC int WeldImages (top_scan, bottom_scan, whole_scan, noisy_slices, topT4, bottomT4,
	top_scaling_factor, bottom_scaling_factor, normalization_factor, 
d104 1
d165 1
a165 1
	if (pkg_abs (normalization_factor - MAXSHORT) <= ERROR_BOUND)
d383 1
a383 3
	weight_table	= (float *) pkg_malloc (STANDARD_DEVIATIONS3D_SIZE * sizeof (float), 
				"WeldImages", "weight_table");
	if (sampling_mode == SAMPLING_MODE_3D)
d385 8
a392 1
		for (i = 0; i < STANDARD_DEVIATIONS3D_SIZE; i++)
d394 3
a396 1
			weight_table [i]	= (1.0 / (sigma3d [i] * sigma3d [i])
d399 1
a399 1
		}
d401 5
a405 4
		for (j = 0; j < corrected_noisy_slices; j++)
		{
			weight_table [j]					= 0.0;
			weight_table [STANDARD_DEVIATIONS3D_SIZE - 1 - j]	= 0.0;
d407 1
a407 4
	}
	else
	{
		for (i = 0; i < STANDARD_DEVIATIONS3D_SIZE; i++)
d409 6
a414 1
			weight_table [i]	= weight2d [i];
a415 2
		weight_table [0]				= 0.0;
		weight_table [STANDARD_DEVIATIONS3D_SIZE - 1]	= 0.0;
d431 4
a434 2
				imgval_ (topT4, top_image3d, &nx, &ny, &nslice,		
					&i, &j, &k, &top_value, &top_lslice);
d436 2
a437 2
				if (top_lslice == 0)
					top_value	= 0.0;
d439 2
a440 2
				imgval_ (bottomT4, bottom_image3d, &nx, &ny, &nslice,		
					&i, &j, &kk, &bottom_value, &bottom_lslice);
d442 2
a443 2
				if (bottom_lslice == 0)
					bottom_value	= 0.0;
d445 2
a446 2
				top_lslice	-= 1;
				bottom_lslice	-= 1;
d448 1
a448 20
				if (top_lslice == -1)
				{
					top_weight	= 0.0;
					bottom_weight	= bottom_scaling_factor 
							* corrected_normalization_factor;
				}
				else if (bottom_lslice == -1)
				{
					top_weight	= top_scaling_factor;
					bottom_weight	= 0.0;
				}
				else if (pkg_abs (weight_table [top_lslice] 
				+ weight_table [bottom_lslice]) <= ERROR_BOUND)
				{
					top_weight	= 0.0;
					bottom_weight	= 0.0;
				}
				else
				{
					if (pkg_abs (normalization_factor - MAXSHORT) > ERROR_BOUND)
d450 3
a452 9
						top_weight	= (weight_table [top_lslice] 
								* top_scaling_factor)
								/ (weight_table [top_lslice] 
								+ weight_table [bottom_lslice]);
						bottom_weight	= (weight_table [bottom_lslice] 
								* bottom_scaling_factor
								* normalization_factor)
								/ (weight_table [top_lslice] 
								+ weight_table [bottom_lslice]);
d454 1
a454 1
					else
d456 6
d463 1
a463 1
						bottom_weight	= corrected_normalization_factor;
d465 20
d495 3
a497 1
	free (weight_table);
@


1.11
log
@Added processing for simple wled.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.10 1995/07/11 21:58:12 ty7777 Exp ty7777 $*/
d3 3
d92 1
a92 1
static char rcsid []= "$Id: WeldImages.c,v 1.10 1995/07/11 21:58:12 ty7777 Exp ty7777 $";
d245 2
a246 2
	fprintf (stdout, "Number of overlaped slices = %d\n\n\n", num_overlapped_slices);
	fprintf (recfp, "Number of overlaped slices = %d\n\n\n", num_overlapped_slices);
d255 2
d279 10
@


1.10
log
@After introducing noisy_slices.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.9 1993/12/13 23:03:21 ty7777 Exp ty7777 $*/
d3 3
d39 2
a40 2
		char *whole_scan, float topT4 [4][4], float bottomT4 [4][4],
		float top_scaling_factor, float bottom_scaling_factor, 
d46 1
d89 1
a89 1
static char rcsid []= "$Id: WeldImages.c,v 1.9 1993/12/13 23:03:21 ty7777 Exp ty7777 $";
d91 1
a91 1
PUBLIC int WeldImages (top_scan, bottom_scan, whole_scan, topT4, bottomT4,
d97 1
d132 1
d233 1
d235 1
a235 1
	if (offset - num_shifted_slices * plane_separation * MMS_PER_CM != 0.0)
d276 1
a276 1
	top_scan_overlap_start	= top_num_slices - num_overlapped_slices + 1;
d373 6
d386 2
a388 2
	weight_table [0]				= 0.0;
	weight_table [STANDARD_DEVIATIONS3D_SIZE - 1]	= 0.0;
d393 2
a394 1
	for (k = top_scan_overlap_start + 1; k <= top_scan_overlap_start + num_overlapped_slices - 2; k++)
d477 2
a478 1
	for (k = top_scan_overlap_start + num_overlapped_slices - 1; k <= num_slices; k++)
@


1.9
log
@Added processing for top_lslice = 0 and bottom_lslice = 0.
Reported by Avi.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.8 1993/11/04 21:58:51 ty7777 Exp ty7777 $*/
d3 4
d81 1
d85 1
a85 1
static char rcsid []= "$Id: WeldImages.c,v 1.8 1993/11/04 21:58:51 ty7777 Exp ty7777 $";
d116 1
d151 5
d407 2
a408 1
					bottom_weight	= bottom_scaling_factor * normalization_factor;
d415 2
a416 1
				else if (weight_table [top_lslice] + weight_table [bottom_lslice] == 0.0)
d423 17
a439 9
					top_weight	= (weight_table [top_lslice] 
							* top_scaling_factor)
							/ (weight_table [top_lslice] 
							+ weight_table [bottom_lslice]);
					bottom_weight	= (weight_table [bottom_lslice] 
							* bottom_scaling_factor
							* normalization_factor)
							/ (weight_table [top_lslice] 
							+ weight_table [bottom_lslice]);
d477 1
a477 1
				= bottom_value * bottom_scaling_factor * normalization_factor;
@


1.8
log
@Processing for time and version stamp.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.7 1993/11/04 21:08:20 ty7777 Exp ty7777 $*/
d3 3
d80 1
a80 1
static char rcsid []= "$Id: WeldImages.c,v 1.7 1993/11/04 21:08:20 ty7777 Exp ty7777 $";
d234 3
d393 1
a393 1
				if (weight_table [top_lslice] + weight_table [bottom_lslice] == 0.0)
d395 2
a396 1
					image3d [current_rows + i - 1]	= 0.0; 
d398 10
a418 2
					image3d [current_rows + i - 1]	
					= top_weight * top_value + bottom_weight * bottom_value;
d420 3
@


1.7
log
@Processing for rec file.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.6 1993/11/02 18:28:54 ty7777 Exp ty7777 $*/
d3 3
d31 1
a31 1
		float normalization_factor, FILE *recfp)
d45 2
d77 1
a77 1
static char rcsid []= "$Id: WeldImages.c,v 1.6 1993/11/02 18:28:54 ty7777 Exp ty7777 $";
d80 2
a81 1
	top_scaling_factor, bottom_scaling_factor, normalization_factor, recfp)
d91 2
d457 2
d460 1
@


1.6
log
@Before adding rec file.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.5 1993/10/20 15:52:46 ty7777 Exp ty7777 $*/
d3 3
d28 1
a28 1
		float normalization_factor)
d37 3
a39 3
		top_scaling_factor:	scaling factor for the top scan.
		bottom_scaling_factor:	scaling factor for the bottom scan.
		normalization_factor:	normalization factor applied to the bottom scan
d41 1
d72 1
a72 1
static char rcsid []= "$Id: WeldImages.c,v 1.5 1993/10/20 15:52:46 ty7777 Exp ty7777 $";
d75 1
a75 1
	top_scaling_factor, bottom_scaling_factor, normalization_factor)
d84 1
d95 1
d168 1
d170 2
d177 1
a177 1
	&top_bottom_flipped, TRUE) == FAIL)
d210 2
d214 1
@


1.5
log
@Fixed imgval. Delete the code for boundary points.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.4 1993/10/19 20:40:52 ty7777 Exp ty7777 $*/
d3 3
d68 1
a68 1
static char rcsid []= "$Id: WeldImages.c,v 1.4 1993/10/19 20:40:52 ty7777 Exp ty7777 $";
d437 1
a437 2
	strcpy (main_header->study_description, "Welded Image");
	strcpy (main_header->facility_name, "Washington Univ");
@


1.4
log
@Added processing for getting rid of the movement artifacts.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.3 1993/10/19 19:07:07 ty7777 Exp ty7777 $*/
d3 3
d65 1
a65 1
static char rcsid []= "$Id: WeldImages.c,v 1.3 1993/10/19 19:07:07 ty7777 Exp ty7777 $";
d300 1
a300 3
				if (i == width || j == height)
					top_value	= top_image3d [current_rows + i - 1];
				else if (top_lslice == 0)
a350 5
				if (i == width || j == height)
				{
					top_value	= top_image3d [current_rows + i - 1];
					top_lslice	= k;
				}
a356 6
				if (i == width || j == height)
				{
					bottom_value	= bottom_image3d [(kk - 1) 
							* slice_dim + (j - 1) * width + i - 1]; 
					bottom_lslice	= kk;
				}
d412 1
a412 4
				if (i == width || j == height)
					bottom_value	
				= bottom_image3d [(kk - 1) * slice_dim + (j - 1) * width + i - 1]; 
				else if (bottom_lslice == 0)
@


1.3
log
@Transform each pixel to get rid of movement artifacts.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.2 1993/10/15 20:51:39 ty7777 Exp ty7777 $*/
d3 3
d14 35
d62 1
a62 1
static char rcsid []= "$Id: WeldImages.c,v 1.2 1993/10/15 20:51:39 ty7777 Exp ty7777 $";
d156 1
a156 1
		fprintf (stdout, "\n\n\nProcessing in %dD mode\n", sampling_mode);
d161 2
a162 1
	if (GetIndexingScanOffset (top_scan, bottom_scan, &offset, &top_bottom_flipped) == FAIL)
d193 1
a193 1
		fprintf (stdout, "\nImage shift differs from exact slice alignment by %.3f mm\n",
a194 1
		fprintf (stdout, "Number of overlaped slices = %d\n", num_overlapped_slices);
d196 1
a196 2
	else
		fprintf (stdout, "\nNumber of overlaped slices = %d\n", num_overlapped_slices);
@


1.2
log
@Before Interpolation.
@
text
@d1 1
a1 1
/*$Id: WeldImages.c,v 1.1 1993/09/08 16:37:39 ty7777 Exp ty7777 $*/
d3 3
d24 1
a24 1
static char rcsid []= "$Id: WeldImages.c,v 1.1 1993/09/08 16:37:39 ty7777 Exp ty7777 $";
d37 2
d47 1
a47 3
	float		*bottom_image3d_nonoverlap;
	float		*bottom_image3d_overlap;
	float		bottom_overlap_sum;
a48 1
	float		buffer [4][4];
a49 1
	float		*nonoverlap_image3d;
a50 1
	float		*overlap_image3d;
a52 2
	float		*top_image3d_overlap;
	float		top_overlap_sum;
d57 1
d59 1
a59 1
	int		bottom_scan_overlap_end;
d63 2
d67 3
d73 1
d75 2
a83 3
printf ("top fac = %f bot fac = %f FACTOR = %f\n", top_scaling_factor, 
	bottom_scaling_factor, normalization_factor);

d118 1
a118 1
		fprintf (stdout, "Processing in %dD mode\n\n", sampling_mode);
d131 1
a131 1
		scaling_factor	= top_scaling_factor;
d172 1
a172 1
					"imageweld", "top_subheader_list");
d176 1
a176 1
	top_image3d	= (float *) pkg_malloc (dimension * sizeof (float), "imageweld", "top_image3d");
d215 1
a215 1
					"imageweld", "bottom_subheader_list");
d219 1
a219 1
						"imageweld", "bottom_image3d");
a231 2
	bottom_scan_overlap_end	= num_overlapped_slices;

a232 40
	 * Get scaling factor;
	 *______________________________________________________*/
	top_image3d_overlap	= top_image3d + top_scan_overlap_start * slice_dim;
	bottom_image3d_overlap	= bottom_image3d + slice_dim;

	top_overlap_sum		= 0.0;
	bottom_overlap_sum	= 0.0;
	j			= (num_overlapped_slices  - 2) * slice_dim;
	for (i = 0; i < j; i++)
	{
		top_overlap_sum		+= top_image3d_overlap [i];
		bottom_overlap_sum	+= bottom_image3d_overlap [i];
	}

	if (bottom_overlap_sum != 0.0)
		scaling_factor	= top_overlap_sum / bottom_overlap_sum;
	else
	{
		fprintf (stderr, "Error: the sum for the bottom scan %s is 0.0\n", bottom_scan);
		return FAIL;
	}

	fprintf (stdout, "\nGlobal bottom image multiplier = %f\n\n", scaling_factor);
	fprintf (stdout, "top	bottom	top/bottom	scaled\n");   
	for (i = 0; i < num_overlapped_slices - 2; i++)
	{
		top_overlap_sum		= 0.0;
		bottom_overlap_sum	= 0.0;
		for (j = 0; j < slice_dim; j++)
		{
			top_overlap_sum		+= top_image3d_overlap [i * slice_dim + j];
			bottom_overlap_sum	+= bottom_image3d_overlap [i * slice_dim + j];
		}
		fprintf (stdout, "%d	%d	%f	%f\n", 
				top_scan_overlap_start + i + 1, 1 + (i + 1), 
				top_overlap_sum / bottom_overlap_sum, 
				top_overlap_sum / (bottom_overlap_sum * scaling_factor));
	}

	/*______________________________________________________
d237 1
a237 1
					"imageweld", "subheader_list");
d241 1
a241 1
	image3d		= (float *) pkg_malloc (dimension * sizeof (float), "imageweld", "image3d");
d244 1
a244 1
	 * Copy the top planes.
d246 5
a250 2
	dimension	= top_scan_overlap_start * slice_dim;
	for (i = 0; i < dimension; i++)
d252 21
a272 1
		image3d [i]	= top_image3d [i];
a273 4
	for (i = 0; i < top_scan_overlap_start; i++)
	{
		*(subheader_list + i)	= matrixx_init_image_subheader (*(top_subheader_list + i));
	}
d276 1
a276 1
	 * Compute the weights.
d279 1
a279 1
				"imageweld", "weight_table");
d302 1
a302 1
	for (i = 0; i < num_overlapped_slices - 2; i++)
d304 14
a317 3
		overlap_image3d 	= image3d + (top_scan_overlap_start + i) * slice_dim;
		top_image3d_overlap	= top_image3d + (top_scan_overlap_start + i) * slice_dim;
		bottom_image3d_overlap	= bottom_image3d + (1 + i) * slice_dim;
d319 37
a355 13
		*(subheader_list + top_scan_overlap_start + i)	
			= matrixx_init_image_subheader (*(top_subheader_list 
				+ top_scan_overlap_start + i));
		top_weight	= weight_table [top_scan_overlap_start + i] 
				/ (weight_table [top_scan_overlap_start + i] 
				+ weight_table [1 + i]);
		bottom_weight	= scaling_factor * weight_table [1 + i] 
				/ (weight_table [top_scan_overlap_start + i] 
				+ weight_table [1 + i]);
		for (j = 0; j < slice_dim; j++)
		{
			overlap_image3d [j]	= top_weight * top_image3d_overlap [j]
						+ bottom_weight * bottom_image3d_overlap [j];
d357 3
d372 1
a372 1
	 * Copy the bottom planes.
d374 1
a374 5
	nonoverlap_image3d 		= image3d + (top_scan_overlap_start 
						+ num_overlapped_slices - 2) * slice_dim;
	bottom_image3d_nonoverlap	= bottom_image3d + (num_overlapped_slices - 1) * slice_dim;
	dimension			= (bottom_num_slices - (num_overlapped_slices - 1)) * slice_dim;
	for (i = 0; i < dimension; i++)
d376 21
a396 7
		nonoverlap_image3d [i]	= bottom_image3d_nonoverlap [i] * scaling_factor;
	}
	for (i = num_overlapped_slices - 1; i < bottom_num_slices; i++)
	{
		*(subheader_list + (top_scan_overlap_start + num_overlapped_slices - 2) 
			+ (i - (num_overlapped_slices - 1)))	
		= matrixx_init_image_subheader (*(bottom_subheader_list + i));
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d21 1
a21 1
static char rcsid []= "$Id$";
d23 2
a24 1
PUBLIC int WeldImages (top_scan, bottom_scan, whole_scan)
d28 5
d34 1
a40 2
	float		average;
	float		bottom_average_variance;
d46 1
a51 1
	float		top_average_variance;
d77 3
d119 1
a119 1
	if (GetIndexingScanOffset (top_scan, bottom_scan, &offset) == FAIL)
d123 17
@
