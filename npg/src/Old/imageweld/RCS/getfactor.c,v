head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	95.07.13.22.03.21;	author ty7777;	state Exp;
branches;
next	1.12;

1.12
date	95.07.13.15.58.32;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	95.07.13.15.52.33;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	95.07.12.18.20.33;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	95.07.12.17.05.16;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	95.07.11.21.58.22;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	95.07.11.16.47.17;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	93.11.04.21.08.39;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	93.11.03.22.22.22;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	93.10.26.18.12.20;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.10.19.20.58.57;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.10.19.19.08.21;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.10.15.20.52.05;	author ty7777;	state Exp;
branches;
next	;


desc
@Before Interpolcation.
@


1.13
log
@ After (t + b) / 2 is implemented.
@
text
@/*$Id: getfactor.c,v 1.12 1995/07/13 15:58:32 ty7777 Exp ty7777 $*/
/*$Log: getfactor.c,v $
 * Revision 1.12  1995/07/13  15:58:32  ty7777
 * Modified the on line message.
 *
 * Revision 1.11  1995/07/13  15:52:33  ty7777
 * Same as the last version.
 *
 * Revision 1.10  1995/07/12  18:20:33  ty7777
 * Added processing for images with overlapped slices < 10.
 *
 * Revision 1.9  1995/07/12  17:05:16  ty7777
 * Modified error checking.
 *
 * Revision 1.8  1995/07/11  21:58:22  ty7777
 * After introducing noisy_slices.
 *
 * Revision 1.7  1995/07/11  16:47:17  ty7777
 * Changed id to header.
 *
 * Revision 1.6  1993/11/04  21:08:39  ty7777
 * Processing for rec file.
 *
 * Revision 1.5  1993/11/03  22:22:22  ty7777
 * Processing for literal matrix file.
 *
 * Revision 1.4  1993/10/26  18:12:20  ty7777
 * Added argument mmppix.
 *
 * Revision 1.3  1993/10/19  20:58:57  ty7777
 * Adding documentation.
 *
 * Revision 1.2  1993/10/19  19:08:21  ty7777
 * Transform each pixel to get rid of movement artifacts.
 *
 * Revision 1.1  1993/10/15  20:52:05  ty7777
 * Initial revision
 **/

/*_________________________________________________________________
  File:		getfactor.c

  Function:	int getfactor (PARAMETER_DATA parameter_data, 
		IMAGE_LIST_DATA image_list, int image_mode, BOOLEAN demigrate, 
		MATRIX_DATA *matrix_list, int list_size, char *complete_top_scan, 
		char *complete_bottom_scan, BOOLEAN simple_weld, int noisy_slices, 
		float *normalization_factor, BOOLEAN *top_bottom_flipped, float *mmppix, recfp)

  Arguments:	parameter_data,		structure containing the necessary data
					for searching and reading files.
		image_list,		a structure which specify the scan id,
					scan number, etc.			
		image_mode,		image mode, used for displaying error
					messages.
		demigrate:		TRUE: migrate data files; FALSE: no
					migration.
		matrix_list,		a list of structures correspoing to
					data in a matrix file.
		list_size,		size of matrix_list.
		complete_top_scan,	complete file name for the top scan.
		complete_bottom_scan,	complete file name for the bottom scan.
		simple_weld,		1: simple weld; 0: weighted weld.
		noisy_slices,		number of noisy slices at the beginning and
					and the end of an indexed 3D scan.
		normalization_factor,	normalization factor applied to the
					bottom scan to make it compatible with
					the top scan, returned.
		top_bottom_flipped,	TRUE: the top ans the bottom scans are
					changed; FALSE: no change.
		mmppix,			voxel size, changed on if not set by readmt ().
		recfp,			file pointer for the recfile.

  Return Value:	SUCCEED:	successful;
		FAIL:		failed.

  Description:	This function get the normalization factor between
		the top and bottom reference scans.

  Calling:	FindReferenceScans () in this file.	
		GetIndexingScanOffset () in GetIndexingScanOffset.c.
   
		Functions in libhp.a includes:
		getimagedim ()
		getrealimg ()

  Called by:	BuildTransform () in BuildTransform.c.

  Author:	Created by Tom Yang on 10/14/93. 
_________________________________________________________________*/

#include <petutil/imglist.h>
#include <petutil/matrix.h>
#include "imageweld.h"
#include <values.h>

static char rcsid []= "$Header: /data/petsun4/src/simple_weld/RCS/getfactor.c,v 1.12 1995/07/13 15:58:32 ty7777 Exp ty7777 $";

PRIVATE int FindReferenceScans ();

PUBLIC int getfactor (parameter_data, image_list, image_mode, demigrate, 
matrix_list, list_size, complete_top_scan, complete_bottom_scan, simple_weld, 
noisy_slices, normalization_factor, top_bottom_flipped, mmppix, recfp)
	PARAMETER_DATA		parameter_data;
	IMAGE_LIST_DATA		image_list;
	int			image_mode;
	BOOLEAN			demigrate;
	MATRIX_DATA		*matrix_list;
	int			list_size;
	char			*complete_top_scan;
	char			*complete_bottom_scan;
	BOOLEAN			simple_weld;
	int			noisy_slices;
	float			*normalization_factor;
	BOOLEAN			*top_bottom_flipped;
	float			*mmppix;
	FILE			*recfp;
{
	BOOLEAN			use_default_scans;
	Image_subheader		**bottom_subheader_list;
	Image_subheader		**top_subheader_list;
	Main_header		*bottom_main_header;
	Main_header		*top_main_header;
	float			*bottom_image3d;
	float			*bottom_image3d_overlap;
	float			bottom_overlap_sum;
	float			offset;
	float			*overlap_image3d;
	float			*top_image3d;
	float			*top_image3d_overlap;
	float			top_overlap_sum;
	float			pixel_size;
	float			plane_separation;
	char			complete_reference_scans [2][MAXPATH];
	char			short_reference_scans [2][MAXLINE];
	int			corrected_noisy_slices;
	int			dimension;
	int			i;
	int			j;
	int			num_overlapped_slices;
	int			num_shifted_slices;
	int			sampling_mode;
	int			scanner;
	int			slice_dim;
	int			top_scan_overlap_start;
	short			bottom_num_slices;
	short			height;
	short			num_slices;
	short			top_num_slices;
	short			width;
	struct Matval		matval;
	struct INFO_TYPE	finfo;

	/* 
	 * Get the reference scans and compute the normalization factor.
	 */
	use_default_scans	= FALSE;
	if (FindReferenceScans (matrix_list, list_size, short_reference_scans) == SUCCEED)
	{
		if (image_mode != LITERAL_IMAGE_MODE)
		{
			if (checkimg (parameter_data, image_list, image_mode, demigrate, 
			2, short_reference_scans, complete_reference_scans) == FAIL)
				use_default_scans	= TRUE;
		}
		else
		{
			/* 
	 	 	 * Fill the finfo structure for searching in archive.
	 	 	 */
			get_finfo (parameter_data, &finfo);

			for (j = 0; j < 2; j++)
			{
				if (searchpath (parameter_data.datapath, short_reference_scans [j], 
				finfo, complete_reference_scans [j]) == FAIL)
				{
					use_default_scans	= TRUE;
				}
			}
		}
	}
	else
		use_default_scans	= TRUE;

	if (use_default_scans)
	{
		strcpy (complete_reference_scans [0], complete_top_scan);
		strcpy (complete_reference_scans [1], complete_bottom_scan);
	}

	/*______________________________________________________
	 * Assign default values for matval.
	 *______________________________________________________*/
	matval.frame	= 1;
	matval.plane	= 1;
	matval.gate	= 1;
	matval.data	= 0;
	matval.bed	= 0;

	/*______________________________________________________
	 * Get image type and do error checking.
	 *______________________________________________________*/
	if (getimagedim (complete_reference_scans [0], matval, &scanner, &width, &height, 
	&top_num_slices, &pixel_size, &pixel_size, &plane_separation) == FAIL) 
	{
		fprintf (stderr, 
		"Error: getimagedim () failed for image %s.\n", 
		complete_reference_scans [0]);
		return FAIL;
	}

	if (mmppix [0] == 0.0 || mmppix [1] == 0.0 || mmppix [2] == 0.0)
	{
		mmppix [0]	= pixel_size * MMS_PER_CM;
		mmppix [1]	= mmppix [0];
		mmppix [2]	= plane_separation * MMS_PER_CM;
		fprintf (stdout, "The mmppix obtained from image file %s is %f %f %f.\n",
			complete_reference_scans [0], mmppix [0], mmppix [1], mmppix [2]); 
		fprintf (recfp, "The mmppix obtained from image file %s is %f %f %f.\n",
			complete_reference_scans [0], mmppix [0], mmppix [1], mmppix [2]); 
	}

	if (scanner != ECAT_SCANNER)
	{
		fprintf (stderr, 
		"Error: top scan file %s is not an ECAT image.\n", 
		complete_reference_scans [0]);
		return FAIL;
	}

	if (getimagedim (complete_reference_scans [1], matval, &scanner, &width, &height, 
	&bottom_num_slices, &pixel_size, &pixel_size, &plane_separation) == FAIL) 
	{
		fprintf (stderr, 
		"Error: getimagedim () failed for image %s.\n",
		complete_reference_scans [1]);
		return FAIL;
	}

	if (scanner != ECAT_SCANNER)
	{
		fprintf (stderr, 
		"Error: bottom scan file %s is not an ECAT image.\n", 
		complete_reference_scans [1]);
		return FAIL;
	}

	/*______________________________________________________
	 * Get the offset for the indexing scan.
	 *______________________________________________________*/
	if (GetIndexingScanOffset (complete_reference_scans [0], 
	complete_reference_scans [1], &offset, top_bottom_flipped, FALSE, recfp) == FAIL)
	{
		fprintf (stderr, "Error: in GetIndexingScanOffset ().\n");
		return FAIL;
	}

	if (*top_bottom_flipped)
	{
		if ((strcmp (complete_reference_scans [0], complete_top_scan) == 0 &&
		strcmp (complete_reference_scans [1], complete_bottom_scan) == 0) ||
		(strcmp (complete_reference_scans [1], complete_top_scan) == 0 &&
		strcmp (complete_reference_scans [0], complete_bottom_scan) == 0))
			*top_bottom_flipped	= TRUE;
		else
			*top_bottom_flipped	= FALSE;
	}

	/*
	 * Get the number of the overlapped slices.
	 */
	num_shifted_slices	= ROUND (offset / (plane_separation * MMS_PER_CM));
	num_overlapped_slices	= top_num_slices - num_shifted_slices;

	if (top_num_slices != bottom_num_slices)
	{
		fprintf (stderr, 
		"Error: the top scan %s and bottom scan %s have unequal number of slices\n",
			complete_reference_scans [0], complete_reference_scans [1]);
		return FAIL;
	}

	if (num_overlapped_slices > top_num_slices)
	{
		fprintf (stderr, 
		"Error: number of overlapped slices %d is greater than %d.\n", 
		num_overlapped_slices, top_num_slices);
		return FAIL;
	}
	else if (num_overlapped_slices < 0)
	{
		fprintf (stderr, 
		"Error: number of overlapped slices %d is less than 0.\n", 
		num_overlapped_slices);
		return FAIL;
	}

	/*______________________________________________________
	 * Get data from the top scan.
	 *______________________________________________________*/
	top_subheader_list	= (Image_subheader **) pkg_malloc (top_num_slices 
				* sizeof (caddr_t), "getscale", "top_subheader_list");

	slice_dim	= width * height;
	dimension	= slice_dim * top_num_slices;
	top_image3d	= (float *) pkg_malloc (dimension * sizeof (float), 
			"getscale", "top_image3d");
	top_main_header	= (Main_header *) calloc (1, sizeof (Main_header));

	if (getrealimg (complete_reference_scans [0], scanner, matval, width, height, 
	top_num_slices, top_image3d, top_main_header, top_subheader_list) == FAIL)
	{
		fprintf (stderr, "Error: getrealimg () failed.\n");
		for (i = 0; i < top_num_slices; i++)
		{
			free (top_subheader_list [i]);
		}
		free (top_subheader_list);
		free (top_main_header);
		free (top_image3d);
		return FAIL;
	}

	/*______________________________________________________
	 * Get data from the bottom scan.
	 *______________________________________________________*/
	bottom_subheader_list	= (Image_subheader **) pkg_malloc (bottom_num_slices 
				* sizeof (caddr_t), "getscale", "bottom_subheader_list");

	bottom_image3d		= (float *) pkg_malloc (dimension * sizeof (float), 
						"getscale", "bottom_image3d");
	bottom_main_header	= (Main_header *) calloc (1, sizeof (Main_header));

	if (getrealimg (complete_reference_scans [1], scanner, matval, width, height, 
	bottom_num_slices, bottom_image3d, bottom_main_header, bottom_subheader_list) == FAIL)
	{
		fprintf (stderr, "Error: getrealimg () failed.\n");
		for (i = 0; i < top_num_slices; i++)
		{
			free (top_subheader_list [i]);
			free (bottom_subheader_list [i]);
		}
		free (top_subheader_list);
		free (top_main_header);
		free (top_image3d);
		free (bottom_subheader_list);
		free (bottom_main_header);
		free (bottom_image3d);
		return FAIL;
	}

	/*
	 * Get the normalization factor;
	 */
	corrected_noisy_slices	= pkg_min (num_overlapped_slices / 2, noisy_slices);
	top_scan_overlap_start	= top_num_slices - num_overlapped_slices + corrected_noisy_slices;
	top_image3d_overlap	= top_image3d + top_scan_overlap_start * slice_dim;
	bottom_image3d_overlap	= bottom_image3d + corrected_noisy_slices * slice_dim;

	top_overlap_sum		= 0.0;
	bottom_overlap_sum	= 0.0;
	j			= (num_overlapped_slices  - 2 * corrected_noisy_slices) * slice_dim;
	for (i = 0; i < j; i++)
	{
		top_overlap_sum		+= top_image3d_overlap [i];
		bottom_overlap_sum	+= bottom_image3d_overlap [i];
	}

	if (pkg_abs (bottom_overlap_sum) > ERROR_BOUND)
	{
		*normalization_factor	= top_overlap_sum / bottom_overlap_sum;
	}
	else if (num_overlapped_slices >= 1
	&& pkg_abs (top_overlap_sum) <= ERROR_BOUND
	&& pkg_abs (bottom_overlap_sum) <= ERROR_BOUND)
	{
		*normalization_factor	= MAXSHORT;
	}
	else
	{
		fprintf (stderr, 
		"Error: the sum for the bottom scan %s is 0.0\n", 
		complete_reference_scans [1]);
		for (i = 0; i < top_num_slices; i++)
		{
			free (top_subheader_list [i]);
			free (bottom_subheader_list [i]);
		}
		free (top_subheader_list);
		free (top_main_header);
		free (top_image3d);
		free (bottom_subheader_list);
		free (bottom_main_header);
		free (bottom_image3d);
		return FAIL;
	}

	if (!simple_weld)
	{
		if (pkg_abs (*normalization_factor - MAXSHORT) > ERROR_BOUND)
		{
			fprintf (stdout, "Global bottom image multiplier = %f\n\n", *normalization_factor);
			fprintf (recfp, "Global bottom image multiplier = %f\n\n", *normalization_factor);
		}
		else
		{
			fprintf (stdout, "Global bottom image multiplier = %f\n\n", 1.0);
			fprintf (recfp, "Global bottom image multiplier = %f\n\n", 1.0);
		}
	}

	if (num_overlapped_slices - 2 * corrected_noisy_slices > 0)
	{
		fprintf (stdout, "Number of weighted slices = %d\n", 
			num_overlapped_slices - 2 * corrected_noisy_slices);   
		fprintf (recfp, "Number of weighted slices = %d\n", 
			num_overlapped_slices - 2 * corrected_noisy_slices);   
		if (!simple_weld)
		{
			fprintf (stdout, "top	bottom	top/bottom	scaled\n");   
			fprintf (recfp, "top	bottom	top/bottom	scaled\n");   

			for (i = 0; i < num_overlapped_slices - 2 * corrected_noisy_slices; i++)
			{
				top_overlap_sum		= 0.0;
				bottom_overlap_sum	= 0.0;
				for (j = 0; j < slice_dim; j++)
				{
					top_overlap_sum		+= top_image3d_overlap [i * slice_dim + j];
					bottom_overlap_sum	+= bottom_image3d_overlap [i * slice_dim + j];
				}
				fprintf (stdout, "%d	%d	%f	%f\n", 
					top_scan_overlap_start + i + 1, corrected_noisy_slices + (i + 1), 
					top_overlap_sum / bottom_overlap_sum, 
					top_overlap_sum / (bottom_overlap_sum * *normalization_factor));
				fprintf (recfp, "%d	%d	%f	%f\n", 
					top_scan_overlap_start + i + 1, corrected_noisy_slices + (i + 1), 
					top_overlap_sum / bottom_overlap_sum, 
					top_overlap_sum / (bottom_overlap_sum * *normalization_factor));
			}
		}
		else
		{
			for (i = 0; i < num_overlapped_slices - 2 * corrected_noisy_slices; i++)
			{
				fprintf (stdout, "%d	%d\n", 
					top_scan_overlap_start + i + 1, corrected_noisy_slices + (i + 1));
				fprintf (recfp, "%d	%d\n", 
					top_scan_overlap_start + i + 1, corrected_noisy_slices + (i + 1));
			}
		}
	}

	for (i = 0; i < top_num_slices; i++)
	{
		free (top_subheader_list [i]);
		free (bottom_subheader_list [i]);
	}
	free (top_subheader_list);
	free (top_main_header);
	free (top_image3d);

	free (bottom_subheader_list);
	free (bottom_main_header);
	free (bottom_image3d);

	return SUCCEED;
}


PRIVATE int FindReferenceScans (matrix_list, list_size, short_reference_scans)
	MATRIX_DATA	*matrix_list;
	int		list_size;
	char		short_reference_scans [][MAXLINE];
{
	int	i;
	int	j;

	j	= 0;
	for (i = 0; i < list_size && j < 2; i++)
	{
		if (matrix_list [i].scale_factor == 1.00000
		&& matrix_list [i].displacement [0] == 0.0000
		&& matrix_list [i].displacement [1] == 0.0000
		&& matrix_list [i].displacement [2] == 0.0000
		&& matrix_list [i].rotation_angle [0] == 0.0000
		&& matrix_list [i].rotation_angle [1] == 0.0000
		&& matrix_list [i].rotation_angle [2] == 0.0000)
		{
			strcpy (short_reference_scans [j], matrix_list [i].scanid);
			strcat (short_reference_scans [j], IMAGE_EXT);
			j++;
		}
	}

	if (j == 2)
		return	SUCCEED;
	else
		return	FAIL;
}
@


1.12
log
@Modified the on line message.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.11 1995/07/13 15:52:33 ty7777 Exp ty7777 $*/
d3 3
d46 2
a47 2
		char *complete_bottom_scan, int noisy_slices, float *normalization_factor, 
		BOOLEAN *top_bottom_flipped, float *mmppix, recfp)
d62 1
d96 1
a96 1
static char rcsid []= "$Header: /data/petsun4/src/simple_weld/RCS/getfactor.c,v 1.11 1995/07/13 15:52:33 ty7777 Exp ty7777 $";
d101 2
a102 2
matrix_list, list_size, complete_top_scan, complete_bottom_scan, noisy_slices,
normalization_factor, top_bottom_flipped, mmppix, recfp)
d111 1
d398 1
a398 1
	if (pkg_abs (*normalization_factor - MAXSHORT) > ERROR_BOUND)
d400 10
a409 2
		fprintf (stdout, "Global bottom image multiplier = %f\n\n", *normalization_factor);
		fprintf (recfp, "Global bottom image multiplier = %f\n\n", *normalization_factor);
a410 5
	else
	{
		fprintf (stdout, "Global bottom image multiplier = %f\n\n", 1.0);
		fprintf (recfp, "Global bottom image multiplier = %f\n\n", 1.0);
	}
d418 4
a421 3
		fprintf (stdout, "top	bottom	top/bottom	scaled\n");   
		fprintf (recfp, "top	bottom	top/bottom	scaled\n");   
	}
d423 20
a442 5
	for (i = 0; i < num_overlapped_slices - 2 * corrected_noisy_slices; i++)
	{
		top_overlap_sum		= 0.0;
		bottom_overlap_sum	= 0.0;
		for (j = 0; j < slice_dim; j++)
d444 7
a450 2
			top_overlap_sum		+= top_image3d_overlap [i * slice_dim + j];
			bottom_overlap_sum	+= bottom_image3d_overlap [i * slice_dim + j];
a451 8
		fprintf (stdout, "%d	%d	%f	%f\n", 
				top_scan_overlap_start + i + 1, 1 + (i + 1), 
				top_overlap_sum / bottom_overlap_sum, 
				top_overlap_sum / (bottom_overlap_sum * *normalization_factor));
		fprintf (recfp, "%d	%d	%f	%f\n", 
				top_scan_overlap_start + i + 1, 1 + (i + 1), 
				top_overlap_sum / bottom_overlap_sum, 
				top_overlap_sum / (bottom_overlap_sum * *normalization_factor));
@


1.11
log
@Same as the last version.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.10 1995/07/12 18:20:33 ty7777 Exp ty7777 $*/
d3 3
d92 1
a92 1
static char rcsid []= "$Header: /data/petsun4/src/simple_weld/RCS/getfactor.c,v 1.10 1995/07/12 18:20:33 ty7777 Exp ty7777 $";
d406 4
@


1.10
log
@Added processing for images with overlapped slices < 10.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.9 1995/07/12 17:05:16 ty7777 Exp ty7777 $*/
d3 3
d89 1
a89 1
static char rcsid []= "$Header: /data/petsun4/src/simple_weld/RCS/getfactor.c,v 1.9 1995/07/12 17:05:16 ty7777 Exp ty7777 $";
@


1.9
log
@Modified error checking.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.8 1995/07/11 21:58:22 ty7777 Exp ty7777 $*/
d3 3
d86 1
a86 1
static char rcsid []= "$Header: /data/petsun4/src/simple_weld/RCS/getfactor.c,v 1.8 1995/07/11 21:58:22 ty7777 Exp ty7777 $";
d124 1
d344 2
a345 1
	top_scan_overlap_start	= top_num_slices - num_overlapped_slices + noisy_slices;
d347 1
a347 1
	bottom_image3d_overlap	= bottom_image3d + noisy_slices * slice_dim;
d351 1
a351 1
	j			= (num_overlapped_slices  - 2 * noisy_slices) * slice_dim;
d398 1
a398 1
	if (num_overlapped_slices - 2 * noisy_slices > 0)
d404 1
a404 1
	for (i = 0; i < num_overlapped_slices - 2 * noisy_slices; i++)
@


1.8
log
@After introducing noisy_slices.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.7 1995/07/11 16:47:17 ty7777 Exp ty7777 $*/
d3 3
d83 1
a83 1
static char rcsid []= "$Header: /data/petsun4/src/simple_weld/RCS/getfactor.c,v 1.7 1995/07/11 16:47:17 ty7777 Exp ty7777 $";
d357 2
a358 1
	else if (pkg_abs (top_overlap_sum) <= ERROR_BOUND
@


1.7
log
@Changed id to header.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.6 1993/11/04 21:08:39 ty7777 Exp ty7777 $*/
d3 3
d31 1
a31 1
		char *complete_bottom_scan, float *normalization_factor, 
d47 2
d78 1
d80 1
a80 1
static char rcsid []= "$Header$";
d85 1
a85 1
matrix_list, list_size, complete_top_scan, complete_bottom_scan, 
d95 1
a117 1
	int			bottom_scan_overlap_end;
d251 1
a251 1
	/*______________________________________________________
d253 1
a253 1
	 *______________________________________________________*/
d334 4
a337 5
	/*______________________________________________________
	 * Get scaling factor;
	 *______________________________________________________*/
	top_scan_overlap_start	= top_num_slices - num_overlapped_slices + 1;
	bottom_scan_overlap_end	= num_overlapped_slices;
d339 1
a339 1
	bottom_image3d_overlap	= bottom_image3d + slice_dim;
d343 1
a343 1
	j			= (num_overlapped_slices  - 2) * slice_dim;
d350 2
a351 1
	if (bottom_overlap_sum != 0.0)
d353 6
d378 18
a395 5
	fprintf (stdout, "Global bottom image multiplier = %f\n\n", *normalization_factor);
	fprintf (recfp, "Global bottom image multiplier = %f\n\n", *normalization_factor);
	fprintf (stdout, "top	bottom	top/bottom	scaled\n");   
	fprintf (recfp, "top	bottom	top/bottom	scaled\n");   
	for (i = 0; i < num_overlapped_slices - 2; i++)
@


1.6
log
@Processing for rec file.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.5 1993/11/03 22:22:22 ty7777 Exp ty7777 $*/
d3 3
d74 1
a74 1
static char rcsid []= "$Id: getfactor.c,v 1.5 1993/11/03 22:22:22 ty7777 Exp ty7777 $";
@


1.5
log
@Processing for literal matrix file.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.4 1993/10/26 18:12:20 ty7777 Exp ty7777 $*/
d3 3
d26 1
a26 1
		BOOLEAN *top_bottom_flipped, float *mmppix)
d47 1
d71 1
a71 1
static char rcsid []= "$Id: getfactor.c,v 1.4 1993/10/26 18:12:20 ty7777 Exp ty7777 $";
d77 1
a77 1
normalization_factor, top_bottom_flipped, mmppix)
d89 1
d191 3
a193 1
		complete_reference_scans [0], mmppix [0], mmppix [1], mmppix [2]); 
d225 1
a225 1
	complete_reference_scans [1], &offset, top_bottom_flipped, FALSE) == FAIL)
d364 1
d366 1
d377 4
@


1.4
log
@Added argument mmppix.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.3 1993/10/19 20:58:57 ty7777 Exp ty7777 $*/
d3 3
d67 1
a67 1
static char rcsid []= "$Id: getfactor.c,v 1.3 1993/10/19 20:58:57 ty7777 Exp ty7777 $";
d86 34
a119 32
	Image_subheader	**bottom_subheader_list;
	Image_subheader	**top_subheader_list;
	Main_header	*bottom_main_header;
	Main_header	*top_main_header;
	float		*bottom_image3d;
	float		*bottom_image3d_overlap;
	float		bottom_overlap_sum;
	float		offset;
	float		*overlap_image3d;
	float		*top_image3d;
	float		*top_image3d_overlap;
	float		top_overlap_sum;
	float		pixel_size;
	float		plane_separation;
	char		complete_reference_scans [2][MAXPATH];
	char		short_reference_scans [2][MAXLINE];
	int		bottom_scan_overlap_end;
	int		dimension;
	int		i;
	int		j;
	int		num_overlapped_slices;
	int		num_shifted_slices;
	int		sampling_mode;
	int		scanner;
	int		slice_dim;
	int		top_scan_overlap_start;
	short		bottom_num_slices;
	short		height;
	short		num_slices;
	short		top_num_slices;
	short		width;
	struct Matval	matval;
d124 30
a153 3
	if (FindReferenceScans (matrix_list, list_size, short_reference_scans) == FAIL
	|| (checkimg (parameter_data, image_list, image_mode, demigrate, 
	2, short_reference_scans, complete_reference_scans)) == FAIL)
@


1.3
log
@Adding documentation.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.2 1993/10/19 19:08:21 ty7777 Exp ty7777 $*/
d3 3
d20 1
a20 1
		BOOLEAN *top_bottom_flipped)
d40 1
d64 1
a64 1
static char rcsid []= "$Id: getfactor.c,v 1.2 1993/10/19 19:08:21 ty7777 Exp ty7777 $";
d70 1
a70 1
normalization_factor, top_bottom_flipped)
d81 1
d146 9
@


1.2
log
@Transform each pixel to get rid of movement artifacts.
@
text
@d1 1
a1 1
/*$Id: getfactor.c,v 1.1 1993/10/15 20:52:05 ty7777 Exp ty7777 $*/
d3 3
d13 5
a17 2
  Function:	int getfactor (
		float *normalization_factor);
d19 18
a36 3
  Arguments:	
		normalization_factor:	normalization factor between the
					top and bottom scans.
d44 6
a49 1
  Calling:	
d60 1
a60 1
static char rcsid []= "$Id: getfactor.c,v 1.1 1993/10/15 20:52:05 ty7777 Exp ty7777 $";
d172 1
a172 1
	complete_reference_scans [1], &offset, top_bottom_flipped) == FAIL)
d310 1
a310 1
	fprintf (stdout, "\nGlobal bottom image multiplier = %f\n\n", *normalization_factor);
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d34 1
a34 1
static char rcsid []= "$Id$";
d282 17
@
