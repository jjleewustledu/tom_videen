head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	93.11.03.22.23.13;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.10.29.14.48.36;	author ty7777;	state Exp;
branches;
next	;


desc
@Reading literal list initial release.
@


1.2
log
@Processing for literal matrix file.
@
text
@/*$Id: read_literalist.c,v 1.1 1993/10/29 14:48:36 ty7777 Exp ty7777 $*/
/*$Log: read_literalist.c,v $
 * Revision 1.1  1993/10/29  14:48:36  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
  File:		read_literalist.c

  Function:	int read_literalist (char *literalist_file, LITERALIST_DATA *literalist, 
			int *num_literalist)

  Arguments:	literalist_file,	file containing a list of short literal scan names.
					passed in.
		literalist,		an array of structures, each structure for a list, 
					The user should be responsible for allocation enough
					momory for this array, returned.
		num_literalist,		total number of literal list in file, returned.

  Description:	This function reads a literal list file and put the information 
		it contains in an array of structures. Each line should contains
		exactly 3 strings if the line can be used as a data line.

  Return:	SUCCEED for successful; FAIL for error.

  Author:	Tom Yang

  History:	Created by Tom Yang on 10/28/93. 
___________________________________________________________________________*/

#include "imageweld.h"

static char rcsid [] = "$Header: /home/petsun4/ty7777/src/imageweld/RCS/read_literalist.c,v 1.1 1993/10/29 14:48:36 ty7777 Exp ty7777 $";

PUBLIC int read_literalist (literalist_file, literalist, num_literalist)
	char		*literalist_file;
	LITERALIST_DATA	*literalist;
	int		*num_literalist;
{
	FILE	*fp;
	char	line [MAXLINE];
	char	string1 [MAXLINE];
	char	string2 [MAXLINE];
	char	string3 [MAXLINE];
	char	string4 [MAXLINE];
	int	i;
	int	nitems;

	fp	= fopen (literalist_file, "r");

	i	= 0;
	while (fgets (line, MAXLINE, fp) != NULL && i < MAX_IMAGE_LIST_SIZE)
	{
		nitems	= sscanf (line, "%s %s %s %s", string1, string2, string3, string4); 
		if ((nitems != 3 && nitems != 4) || strncmp (string1, "#", 1) == 0)
			continue;

		strcpy (literalist [i].topscan, string1);
		strcpy (literalist [i].bottomscan, string2);
		strcpy (literalist [i].weldedscan, string3);
		strcpy (literalist [i].matfile, string4);
		i++;
	}

	fclose (fp);

	*num_literalist	= i;

	if (*num_literalist == 0)
	{
		fprintf (stderr, "Error: File %s contains no literal lists.\n", literalist_file); 
		return FAIL;
	}
	else if (*num_literalist > MAX_IMAGE_LIST_SIZE)
	{
		fprintf (stderr, "Error: your list size %d exceeded the maximum allowable size %d\n",
			*num_literalist, MAX_IMAGE_LIST_SIZE);
		return FAIL;
	}

	return SUCCEED;
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d33 1
a33 1
static char rcsid [] = "$Header$";
d45 1
d47 1
d54 2
a55 2
		if (sscanf (line, "%s %s %s", string1, string2, string3) != 3 ||
		strncmp (string1, "#", 1) == 0)
d61 1
@
