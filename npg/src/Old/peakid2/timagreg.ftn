CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  Subroutine:   TIMAGREG.FTN
C
C  Author:       Tom O. Videen
C  Date:         12-Oct-89
C  Written For:  T value images (TIMAGE.FTN)
C
C  Intent:
C     Generate a table of indices to relative pixel locations
C     which define one 2D section of a 3D region.
C
C  Input requirements:
C     RADIUS may be 0, 1, 2, 3, or 4
C     Z may be 0, 1, 2, 3, or 4
C     Z must be <= RADIUS
C
C  Called by:  TIMAGTAB
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE TIMAGREG (X, Y, Z, RADIUS, NPIX)
C
      INTEGER*4   X(400)   ; indices to x-position
      INTEGER*4   Y(400)   ; indices to y-positions
      INTEGER*4   Z        ; slice-location relative to region center
      INTEGER*4   RADIUS   ; overall radius of 3D region
      INTEGER*4   NPIX     ; pointer to current location of pixel
C                            to be included within a region
      INTEGER*4   I, J
C
C ----------------------------------------------------------------
C
C  Single pixel in region      X
C
      IF (RADIUS.EQ.0 .OR.
     &   (RADIUS.EQ.1 .AND. Z.EQ.1) .OR.
     &   (RADIUS.EQ.2 .AND. Z.EQ.2)) THEN
        NPIX = NPIX + 1
        X(NPIX) = 0
        Y(NPIX) = 0
C
C ----------------------------------------------------------------
C
C                             X
C  3x3 Cross (5 pixels)     X X X
C                             X
C
      ELSE IF ((RADIUS.EQ.1 .AND. Z.EQ.0) .OR.
     &         (RADIUS.EQ.3 .AND. Z.EQ.3) .OR.
     &         (RADIUS.EQ.4 .AND. Z.EQ.4)) THEN
        NPIX = NPIX + 1
        X(NPIX) = 0
        Y(NPIX) = -1
        NPIX = NPIX + 1
        X(NPIX) = 0
        Y(NPIX) = 0
        NPIX = NPIX + 1
        X(NPIX) = 0
        Y(NPIX) = 1
        NPIX = NPIX + 1
        X(NPIX) = -1
        Y(NPIX) = 0
        NPIX = NPIX + 1
        X(NPIX) = 1
        Y(NPIX) = 0
C
C ----------------------------------------------------------------
C
C                           X X X
C  3x3 Square (9 pixels)    X X X
C                           X X X
C
      ELSE IF (RADIUS.EQ.2 .AND. Z.EQ.1) THEN
        DO 320 J=-1,+1
          DO 310 I=-1,+1
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
310       CONTINUE
320     CONTINUE
C
C ----------------------------------------------------------------
C
C                                X
C  3x3 Square (9 pixels)       X X X
C  Plus 4-point Diamond      X X X X X
C  (13 pixels)                 X X X
C                                X
C
      ELSE IF (RADIUS.EQ.2 .AND. Z.EQ.0) THEN
C
C  first get the 4-corners of the diamond
C
        NPIX = NPIX + 1
        X(NPIX) = -2
        Y(NPIX) = 0
        NPIX = NPIX + 1
        X(NPIX) = 2
        Y(NPIX) = 0
        NPIX = NPIX + 1
        X(NPIX) = 0
        Y(NPIX) = -2
        NPIX = NPIX + 1
        X(NPIX) = 0
        Y(NPIX) = 2
C
C  then fill in the square
C
        DO 420 J=-1,+1
          DO 410 I=-1,+1
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
410       CONTINUE
420     CONTINUE
C
C ----------------------------------------------------------------
C
C                              X X X
C                            X X X X X
C  (21 pixels)               X X X X X
C                            X X X X X
C                              X X X
C
      ELSE IF (RADIUS.EQ.3 .AND. Z.EQ.2) THEN
        DO 520 J=-2,+2,4
          DO 510 I=-1,+1
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
510       CONTINUE
520     CONTINUE
        DO 540 J=-1,+1
          DO 530 I=-2,+2
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
530       CONTINUE
540     CONTINUE
C
C ----------------------------------------------------------------
C
C                           X X X X X
C                           X X X X X
C  5x5 Square (25 pixels)   X X X X X
C                           X X X X X
C                           X X X X X
C
      ELSE IF (RADIUS.EQ.4 .AND. Z.EQ.3) THEN
        DO 620 J=-2,+2
          DO 610 I=-2,+2
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
610       CONTINUE
620     CONTINUE
C
C ----------------------------------------------------------------
C                               X
C                           X X X X X
C  5x5 Square               X X X X X
C  Plus 4-point Diamond   X X X X X X X
C  (29 pixels)              X X X X X
C                           X X X X X
C                               X
C
      ELSE IF (RADIUS.EQ.3 .AND. Z.EQ.1) THEN
C
C  first get the 4-corners of the diamond
C
        NPIX = NPIX + 1
        X(NPIX) = -3
        Y(NPIX) = 0
        NPIX = NPIX + 1
        X(NPIX) = 3
        Y(NPIX) = 0
        NPIX = NPIX + 1
        X(NPIX) = 0
        Y(NPIX) = -3
        NPIX = NPIX + 1
        X(NPIX) = 0
        Y(NPIX) = 3
C
C  then fill in the square
C
        DO 720 J=-2,+2
          DO 710 I=-2,+2
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
710       CONTINUE
720     CONTINUE
C
C ----------------------------------------------------------------
C                             X X X
C                           X X X X X
C                         X X X X X X X
C  (37 pixels)            X X X X X X X
C                         X X X X X X X
C                           X X X X X
C                             X X X
C
      ELSE IF (RADIUS.EQ.3 .AND. Z.EQ.0) THEN
        DO 820 J=-3,+3,6
          DO 810 I=-1,+1
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
810       CONTINUE
820     CONTINUE
        DO 840 J=-2,+2,4
          DO 830 I=-2,+2
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
830       CONTINUE
840     CONTINUE
        DO 860 J=-1,+1
          DO 850 I=-3,+3
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
850       CONTINUE
860     CONTINUE
C
C ----------------------------------------------------------------
C                           X X X X X
C                         X X X X X X X
C                         X X X X X X X
C  (45 pixels)            X X X X X X X
C                         X X X X X X X
C                         X X X X X X X
C                           X X X X X
C
      ELSE IF (RADIUS.EQ.4 .AND. Z.EQ.2) THEN
        DO 920 J=-3,+3,6
          DO 910 I=-2,+2
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
910       CONTINUE
920     CONTINUE
        DO 940 J=-2,+2
          DO 930 I=-3,+3
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
930       CONTINUE
940     CONTINUE
C
C ----------------------------------------------------------------
C                               X
C                           X X X X X
C                         X X X X X X X
C                         X X X X X X X
C  (49 pixels)          X X X X X X X X X
C                         X X X X X X X
C                         X X X X X X X
C                           X X X X X
C                               X
C
      ELSE IF (RADIUS.EQ.4 .AND. Z.EQ.1) THEN
C
C  first get the 4-corners of the diamond
C
        NPIX = NPIX + 1
        X(NPIX) = -4
        Y(NPIX) = 0
        NPIX = NPIX + 1
        X(NPIX) = 4
        Y(NPIX) = 0
        NPIX = NPIX + 1
        X(NPIX) = 0
        Y(NPIX) = -4
        NPIX = NPIX + 1
        X(NPIX) = 0
        Y(NPIX) = 4
C
C  then fill in a 45-pixel region
C
        DO 1020 J=-3,+3,6
          DO 1010 I=-2,+2
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
1010      CONTINUE
1020    CONTINUE
        DO 1040 J=-2,+2
          DO 1030 I=-3,+3
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
1030      CONTINUE
1040    CONTINUE
C
C ----------------------------------------------------------------
C                             X X X
C                           X X X X X
C                         X X X X X X X
C                       X X X X X X X X X
C  (57 pixels)          X X X X X X X X X
C                       X X X X X X X X X
C                         X X X X X X X
C                           X X X X X
C                             X X X
C
      ELSE IF (RADIUS.EQ.4 .AND. Z.EQ.0) THEN
        DO 1110 J=-4,+4,8
          DO 1100 I=-1,+1
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
1100      CONTINUE
1110    CONTINUE
        DO 1130 J=-3,+3,6
          DO 1120 I=-2,+2
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
1120      CONTINUE
1130    CONTINUE
        DO 1150 J=-2,+2,4
          DO 1140 I=-3,+3
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
1140      CONTINUE
1150    CONTINUE
        DO 1170 J=-1,+1
          DO 1160 I=-4,+4
            NPIX = NPIX + 1
            X(NPIX) = I
            Y(NPIX) = J
1160      CONTINUE
1170    CONTINUE
      END IF
C
      RETURN
      END
