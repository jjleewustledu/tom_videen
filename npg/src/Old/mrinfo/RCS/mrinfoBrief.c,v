head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2000.02.14.14.14.47;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*___________________________________________________________________________________
 *
 *	Function:	mrinfoBrief.c
 *	Date:			22-Jun-92
 *	Author:		Tom Videen
 *	Description:	Read the header of an mri image file and display 1-line of information.
 *						This version will read headers of old and new Siemens formats.
 *						Old headers are 8-records; new headers are 16-records.
___________________________________________________________________________________*/

#include <stdio.h>
#include <string.h>

typedef struct {
	char	dum1 [32];
	char	id [8];
} HDR_CHK;

typedef struct {
	char	dum1 [1144];
	char	type [8];
	char	dum2 [896];
	char	scanner [40];
	char	name [80];
	char	date [40];
	char	time [10];
	char	dum3 [470];
	char	fi [40];
	char	tr [40];
	char	te [40];
	char	sl [40];
	char	sp [40];
	char	z [40];
	char	zf [32];
	char	ta [20];
} MRIHDR_OLD;

typedef struct {
	char	dum1 [7217];
	char	name [68];
	char	birthday [14];
	char	date [34];
	char	time [82];
	char	type [9];
	char	tr [11];
	char	te [13];
	char	ta [22];
	char	fov [11];
	char	matrix [11];
	char	sp [11];
	char	sl [86];
	char	scanner [19];
	char	loc [19];
} MRIHDR_NEW;

main (argc, argv)
int	argc;
char	*argv [];

{
	FILE				*hdrfp;
	HDR_CHK			*head;
	MRIHDR_OLD	*header0;
	MRIHDR_NEW	*header1;
	char				*mri_header;
	short				i;

/*	Check the existence of an input file */

	if (argc == 1) {
		printf ("Error: No header file specified.\n");
		exit (0);
	}

	if ((hdrfp = fopen (argv [1], "rb")) == (FILE *) NULL) {
		printf ("Error: Header file \"%s\" does not exist.\n", argv[1]);
		exit (0);
	}

/*	Check the type of the input file */

	mri_header	= (char *) malloc (sizeof (HDR_CHK));
	fread (mri_header, sizeof (HDR_CHK), 1, hdrfp);
	head = (HDR_CHK *) mri_header;
	fclose (hdrfp);
	free (mri_header);

/*	Read and display information for NEW HEADERS */

	if (strncmp (head->id, "ACR-NEMA", 8) == 0) {
		if ((hdrfp = fopen (argv [1], "rb")) == (FILE *) NULL) {
			printf ("Error: Header file \"%s\" does not exist.\n", argv[1]);
			exit (0);
		}
		mri_header	= (char *) malloc (sizeof (MRIHDR_NEW));
		fread (mri_header, sizeof (MRIHDR_NEW), 1, hdrfp);
		header1 = (MRIHDR_NEW *) mri_header;
		printf ("%.10s %.10s%.8s%.8s%.10s%.11s%13.11s  %s\n",header1->name,header1->time,
			header1->type,header1->tr,header1->te,header1->sl,header1->sp,argv[1]);
	}

/*	Read and display information for OLD HEADERS */

	else {
		if ((hdrfp = fopen (argv [1], "rb")) == (FILE *) NULL) {
			printf ("Error: Header file \"%s\" does not exist.\n", argv[1]);
			exit (0);
		}
		mri_header	= (char *) malloc (sizeof (MRIHDR_OLD));
		fread (mri_header, sizeof (MRIHDR_OLD), 1, hdrfp);
		header0 = (MRIHDR_OLD *) mri_header;
		printf ("%.10 s%.10s%.10s%.10s%.10s%.10s%.10s%s\n",header0->name,header0->time,
			header0->fi,header0->tr,header0->te,header0->sl,header0->sp,argv[1]);
	}

/*	Clean up	*/

	fclose (hdrfp);
	free (mri_header);
}
@
