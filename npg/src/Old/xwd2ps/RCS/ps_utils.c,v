head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	91.11.20.22.23.22;	author todd;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#ifndef LINT
static char rcsid[] = "$Header: /homedisk/zephyrus/u0/mcgowan/src/xwd2ps/ps_utils.c,v 1.9 90/08/14 13:30:08 mcgowan Exp $";
#endif
/*
 *** ps_utils.c - dump various PostScript structures to stdout

Copyright (c) 1990 General Electric Company

Permission to use, copy, modify, distribute, and sell this software
and its documentation for any purpose is hereby granted without fee,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of General Electric
Company not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.  General Electric Company makes no representations about
the suitability of this software for any purpose.  It is provided "as
is" without express or implied warranty.

General Electric Company DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL General Electric Company BE LIABLE FOR ANY
SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 */

#include <stdio.h>

#include "xwd2ps.h"
#include "my_logo.h"
#include "ps_color.h"

extern char progname[];

/*
 ** outputBorder() - put a border around the image
 */
outputBorder(the_image)
     Image the_image;
{
  printf("\nnewpath\n");
  printf("0 0 moveto\n");
  if(the_image.orientation == PORTRAIT) {
    printf("%f inch 0 rlineto\n", the_image.width);
    printf("0 %f inch rlineto\n", the_image.height);
    printf("-%f inch 0 rlineto\n", the_image.width);
  }
  else {
    printf("%f inch 0 rlineto\n", the_image.height);
    printf("0 %f inch rlineto\n", the_image.width);
    printf("-%f inch 0 rlineto\n", the_image.height);
  }
  printf("closepath\n");
  printf("stroke\n");
}

/*
 ** outputDate() - output the date
 */
outputDate(the_image)
     Image the_image;
{
  float xpos, ypos;
  char mytime[20];           /* character representation of current time */
  char mydate[40];           /* character representation of current date */

  get_time_and_date(mytime, mydate);

  printf("\nmatrix currentmatrix\n");
  printf("newpath\n");
    
  if(the_image.orientation == PORTRAIT) {
    xpos = 0;
    ypos = the_image.height;
    printf("%f inch %f inch moveto %% upper left of image\n", xpos, ypos);
  }
  else {
    xpos = 0;
    ypos = 0;
    printf("%f inch %f inch moveto  %% upper left of image\n", xpos, ypos);
    printf("90 rotate\n");
  }
    
  printf("/Times-Roman findfont\n");
  printf("10 scalefont\n");
  printf("setfont \n");
  printf("0 .12 inch rmoveto\n");
  printf("(%s) show\n",mydate);
  printf("stroke\n");
  printf("setmatrix\n\n");
}

/*
 ** outputSentence() - put a label in the diagram
 */
outputTitle(the_image, the_options)
     Image the_image;
     Options the_options;
{
  float xpos, ypos;

  printf("\nmatrix currentmatrix\n");
  printf("newpath\n");

  if(the_image.orientation == PORTRAIT) {
    xpos = the_image.width/2;
    ypos = the_image.height;
    printf("%f inch %f inch moveto %% upper center of image\n", xpos, ypos);
  }
  else {
    xpos = 0;
    ypos = the_image.width/2;
    printf("%f inch %f inch moveto  %% upper center of image\n", xpos, ypos);
    printf("90 rotate\n");
  }

  printf("/Times-Roman findfont\n");
  printf("%d scalefont\n",the_options.title.font_size);
  printf("setfont \n");
  printf("(%s) stringwidth\n",the_options.title.string);
  printf("pop -2 div .1 inch rmoveto\n");
  printf("(%s) show\n",the_options.title.string);
  printf("stroke\n");
  printf("setmatrix\n\n");
}


/*
 ** ouputTime() - put the time in the output
 */

outputTime(the_image)
     Image the_image;
{
  char mytime[20];           /* character representation of current time */
  char mydate[40];           /* character representation of current date */
  float x, y;

  get_time_and_date(mytime, mydate);

  printf("\nmatrix currentmatrix\n");
  printf("newpath\n");
  
  if(the_image.orientation == PORTRAIT) {
    x = the_image.width;
    y = the_image.height;
    printf("%f inch %f inch moveto %% upper right of image\n", x, y);
  }
  else {
    x = 0;
    y = the_image.width;
    printf("%f inch %f inch moveto  %% upper right of image\n", x, y);
    printf("90 rotate\n");
  }

  printf("/Times-Roman findfont\n");
  printf("10 scalefont\n");
  printf("setfont \n");
  printf("(%s) stringwidth\n",mytime);
  printf("pop -1 mul .12 inch rmoveto\n");
  printf("(%s) show\n",mytime);
  printf("stroke\n");
  printf("setmatrix\n\n");
}

/*
 ** outputColorImage() - output the code to support color
 **                      image printing on monochrome devices
 */
outputColorImage()
{
  printPS(ColorImage);
}


/*
 ** outputLogo() - print out your logo
 */
outputLogo(the_image)
     Image the_image;
{
  float xpos, ypos;

  printPS(my_logo);  /* print out the logo */

  /*
   * set up the scaling factors
   */
  printf("\nmatrix currentmatrix\n");
  printf("newpath\n");
  printf("0 0 moveto\n");
  
  if(the_image.orientation == PORTRAIT) {
    xpos = 0;
    ypos = - LOGOHEIGHT;
    printf("%f inch %f inch translate\n", xpos,ypos);
  }
  else {
    xpos = the_image.height + LOGOHEIGHT;
    ypos = 0;
    printf("%f inch %f inch translate\n", xpos,ypos);
    printf("90 rotate\n");
  }

  /* 
   * output the company name
   */
  printf("/xlinepos 0 def\n");
  printf("/ylinepos 0 def\n");
  printf("/charheight .11 inch def\n");
  printf("/logoheight %f inch def\n",LOGOHEIGHT);
  printf("/xlogopos xlinepos def\n");
  printf("/ylogopos ylinepos logoheight 0.2 mul add def\n");
  printf("/logosize logoheight 0.6 mul def\n");
  printf("/xtextpos xlinepos logosize 2 charheight mul add add def\n");
  printf("/ytextpos ylogopos charheight add def\n");
  printf("/nextline {\n   /ytextpos ytextpos charheight sub store\n");
  printf("   xtextpos ytextpos moveto\n} def\n");
  printf("/Helvetica-BoldOblique findfont\n");
  printf("8 scalefont\n");
  printf("setfont \n");
  printf("xlogopos ylogopos logosize 1 0 %s \n", LOGONAME);
  printf("xtextpos ytextpos moveto  %% locate lower left corner of image\n");
  printf("(%s) show\n", COMPANYNAME1);
  printf("nextline\n");
  printf("xtextpos ytextpos moveto\n");
  printf("(%s) show\n", COMPANYNAME2);
  printf("1 0 0 setrgbcolor         %% draw laser line\n");
  printf("newpath\n");
  printf("xlogopos ylinepos moveto\n");
  printf("1.2 inch 0 rlineto\n");
  printf("stroke\n");
  printf("setmatrix\n\n");
}


/*
 * print_ps() - output the PostScript String
 *
 * This subroutine prints out PostScript code structures
 *
 * Written March 1990 by Craig A. McGowan
 */
printPS(p)
     char **p;
{
  while (*p)
    printf("%s\n",*p++);
}


/*
 *** printEPSF() - print out the Encapsulated PS header
 *
 */
printEPSF(image, page, file_name)
Image image;
Page  page;
char  *file_name;
{
  long clock;

  printf("%%!PS-Adobe-2.0 EPSF-1.2\n");    /* standard PS header */
  if(image.orientation == PORTRAIT)
    printf("%%%%BoundingBox: %f %f %f %f\n",
	   72*page.ximagepos - 1, 72*page.yimagepos - 1, 
	   72*(page.ximagepos+image.width) + 1, 
	   72*(page.yimagepos+image.height-page.yoffset) + 1);
  else
    printf("%%%%BoundingBox: %f %f %f %f\n",
	   72*page.ximagepos - 1, 72*page.yimagepos - 1, 
	   72*(page.ximagepos+image.height) + 1, 
	   72*(page.yimagepos+image.width-page.yoffset) + 1);

  printf("%%%%Creator: %s\n", progname);
  printf("%%%%CreationDate: %s", (time (&clock), ctime (&clock)));
  printf("%%%%Title: %s\n", file_name);
  printf("%%%%EndComments\n");
}
@
