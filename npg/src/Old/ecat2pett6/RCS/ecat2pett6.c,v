head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	93.10.26.15.05.00;	author ty7777;	state Exp;
branches;
next	1.13;

1.13
date	93.10.22.21.48.05;	author ty7777;	state Exp;
branches;
next	1.12;

1.12
date	93.10.06.21.59.38;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	93.10.06.20.11.42;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	93.07.14.20.24.25;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	93.03.11.20.40.14;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	93.01.18.17.06.14;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	92.11.12.20.34.42;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	92.10.09.15.38.23;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	92.10.09.15.10.53;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	92.10.08.14.50.34;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	92.10.07.19.18.42;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	92.10.07.17.34.21;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	92.10.07.17.03.24;	author ty7777;	state Exp;
branches;
next	;


desc
@ecat2pett6 initial checkin. It does not work properly.
@


1.14
log
@Same as the last version.
@
text
@/*$Id: ecat2pett6.c,v 1.13 1993/10/22 21:48:05 ty7777 Exp $*/
/*$Log: ecat2pett6.c,v $
 * Revision 1.13  1993/10/22  21:48:05  ty7777
 * Change the PutPett6Image () pett6_header to slice_header.
 *
 * Revision 1.12  1993/10/06  21:59:38  ty7777
 * Assgn 1 to ecat_orientation.
 *
 * Revision 1.11  1993/10/06  20:11:42  ty7777
 * Same as the last version.
 *
 * Revision 1.10  1993/07/14  20:24:25  ty7777
 * Checking in.
 *
 * Revision 1.9  1993/03/11  20:40:14  ty7777
 * Linking with changed libhp.a
 *
 * Revision 1.8  1993/01/18  17:06:14  ty7777
 * Can get correct number of slices.
 *
 * Revision 1.7  1992/11/12  20:34:42  ty7777
 * Added frames specification.
 *
 * Revision 1.6  1992/10/09  15:38:23  ty7777
 * Testing binary information.
 *
 * Revision 1.5  1992/10/09  15:10:53  ty7777
 * Working version of ecat2pett6. Before changing frame, plane, gate, data, and bed.
 **/

#ifndef lint
static char sccsid[]="@@(#)ecat2pett6.c	10/09/92  Copyright Neural Pet Group, Washington University 1992";
#endif

static char rcsid []= "$Id: ecat2pett6.c,v 1.13 1993/10/22 21:48:05 ty7777 Exp $";

#include <petutil/petutil.h>
#include <petutil/matrix.h>

char list [] = "*;*;*;*"; /* any frame plane gate bed */

main (argc, argv)
	int	argc;
	char	**argv;
{
	BOOLEAN		default_eframe_flag;
	BOOLEAN		default_eplane_flag;
	BOOLEAN		default_sframe_flag;
	BOOLEAN		default_splane_flag;
	MatrixFile	*fptr;
	Mlist		*mlist;
	PETT6HDR	*pett6_header;
	char		*ecat_image_name;
	char		*pett6_image_name;
	float		pixel_size;
	float		plane_separation;
	float		scale;
	int		bed;
	int		datatype;
	int		diff;  /* number of differences between spec and actual */
	int		frame_start;
	int		frame_end;
	int		gate;
	int		i, j, k, l;
	int		planes_end;
	int		planes_start;
	int		slice_size;
	int		slice_index;
	short		num_slices;
	short		*pett6_slice_data;
	short		*slice_data;
	short		*slice_header;
	short		xdim;
	short		ydim;
	struct Matval	matval;

	ecat_image_name		= argv [1];
	pett6_image_name	= argv [2];
	scale			= atof (argv [3]);
	frame_start		= atoi (argv [4]);
	frame_end		= atoi (argv [5]);
	planes_start		= atoi (argv [6]);
	planes_end		= atoi (argv [7]);
	gate			= atoi (argv [8]);
	datatype		= atoi (argv [9]);
	bed			= atoi (argv [10]);
	default_sframe_flag	= atoi (argv [11]);
	default_eframe_flag	= atoi (argv [12]);
	default_splane_flag	= atoi (argv [13]);
	default_eplane_flag	= atoi (argv [14]);

	matval.frame	= 1;
	matval.plane	= 1;
	matval.gate	= gate;
	matval.data	= datatype;
	matval.bed	= bed;

	fptr	= OpenEcat (ecat_image_name, &num_slices, &xdim, &ydim, 
				&pixel_size, &plane_separation, matval);
	if (fptr == (MatrixFile *) NULL)
	{
		exit (-1);
	}

	/*
	 * The number of mats in a list always gives the correct number of
	 * slices.
	 */
	mlist	= make_list (ecat_image_name, (char *) NULL, list, &diff);
	if (!mlist) 
	{
		fprintf (stderr, "make_list error.\n");
		matrix_close (fptr);
		exit (FAIL);
	}

	if (pkg_abs (frame_end - frame_start) > mlist->frames)
	{
		fprintf (stderr, " Error: Specified frames range [%d, %d] is outside actual range [1, %d].\n",
			frame_start, frame_end, mlist->frames);
		exit (FAIL);
	}

	if (planes_start > mlist->planes)
	{
		fprintf (stderr, " Error: Specified planes range [%d, %d] is outside actual range [1, %d].\n",
			planes_start, planes_end, mlist->planes);
		exit (FAIL);
	}

	if (frame_end > mlist->frames || (default_sframe_flag && default_eframe_flag))
	{
		frame_end	= mlist->frames;
	}

	if (planes_end > mlist->planes || (default_splane_flag && default_eplane_flag))
	{
		planes_end	= mlist->planes;
	}
	free_Mlist (mlist);

	num_slices	= (frame_end - frame_start + 1) * (planes_end - planes_start + 1);

	slice_size	= sizeof (short) * xdim * ydim;

	slice_index	= 0;
	for (i = frame_start; i <= frame_end; i++)
	{
		for (j = planes_start; j <= planes_end; j++)
		{
			/* 
		 	 * Allocate header. 
		 	 */
			pett6_header	= (PETT6HDR *) calloc (1, sizeof (PETT6HDR));
			if (pett6_header == (PETT6HDR *) NULL)
			{
				fprintf (stderr, "Error: Can't allocate pet image header.\n");
			}

			/* 
		 	 * Allocate image array. 
		 	 */
			slice_data = (short *) malloc (slice_size);
			if (slice_data == (short *) NULL)
			{
				fprintf (stderr, "Error: Can't allocate pet image array.\n");
			}

			matval.frame	= i;
			matval.plane	= j;
			if (Ecat2Pett6 (fptr, scale, pett6_header, 
				slice_data, num_slices, matval) == FAIL)
			{
				fprintf (stderr, "Error\n");
				exit (-1);
			}

			/* 
		 	 * Allocate and zero the image array 
		 	 */
			pett6_slice_data = (short *) malloc (PETT6_SLICE_SIZE);
			if (pett6_slice_data == (short *) NULL)
			{
				fprintf (stderr, "Error: Can't allocate pett6 image array.\n");
			}

			for (k = 0; k < PETT6_SLICE_HEIGHT; k++)
			{
				for (l = 0; l < PETT6_SLICE_WIDTH; l++)
				{
					pett6_slice_data [k * PETT6_SLICE_WIDTH + l]
						= (slice_data [(k + HALF_DHEIGHT) 
						* xdim + HALF_DWIDTH + l]);
				}
			}
			free (slice_data);

			slice_index++;
			pett6_header->ecat_orientation	= 1;
			slice_header			= (short *) pett6_header;
			PutImagePett6 (pett6_slice_data, slice_index, slice_header, pett6_image_name);

			free (pett6_header);
			free (pett6_slice_data);
		}
	}

	matrix_close (fptr);
}
@


1.13
log
@Change the PutPett6Image () pett6_header to slice_header.
@
text
@d1 1
a1 1
/*$Id: ecat2pett6.c,v 1.12 1993/10/06 21:59:38 ty7777 Exp ty7777 $*/
d3 3
d35 1
a35 1
static char rcsid []= "$Id: ecat2pett6.c,v 1.12 1993/10/06 21:59:38 ty7777 Exp ty7777 $";
@


1.12
log
@Assgn 1 to ecat_orientation.
@
text
@d1 1
a1 1
/*$Id: ecat2pett6.c,v 1.11 1993/10/06 20:11:42 ty7777 Exp ty7777 $*/
d3 3
d32 1
a32 1
static char rcsid []= "$Id: ecat2pett6.c,v 1.11 1993/10/06 20:11:42 ty7777 Exp ty7777 $";
d69 1
d197 2
a198 1
			PutImagePett6 (pett6_slice_data, slice_index, pett6_header, pett6_image_name);
@


1.11
log
@Same as the last version.
@
text
@d1 1
a1 1
/*$Id: ecat2pett6.c,v 1.10 1993/07/14 20:24:25 ty7777 Exp ty7777 $*/
d3 3
d29 1
a29 1
static char rcsid []= "$Id: ecat2pett6.c,v 1.10 1993/07/14 20:24:25 ty7777 Exp ty7777 $";
d192 1
@


1.10
log
@Checking in.
@
text
@d1 1
a1 1
/*$Id: ecat2pett6.c,v 1.9 1993/03/11 20:40:14 ty7777 Exp ty7777 $*/
d3 3
d26 1
a26 1
static char rcsid []= "$Id: ecat2pett6.c,v 1.9 1993/03/11 20:40:14 ty7777 Exp ty7777 $";
@


1.9
log
@Linking with changed libhp.a
@
text
@d1 1
a1 1
/*$Id: ecat2pett6.c,v 1.8 1993/01/18 17:06:14 ty7777 Exp ty7777 $*/
d3 3
d23 1
a23 1
static char rcsid []= "$Id: ecat2pett6.c,v 1.8 1993/01/18 17:06:14 ty7777 Exp ty7777 $";
d26 1
a26 1
#include <datacalc/datacalc.h>
d104 1
a104 1
	if (frame_start > mlist->frames)
@


1.8
log
@Can get correct number of slices.
@
text
@d1 1
a1 1
/*$Id: ecat2pett6.c,v 1.7 1992/11/12 20:34:42 ty7777 Exp ty7777 $*/
d3 3
d20 1
a20 1
static char rcsid []= "$Id: ecat2pett6.c,v 1.7 1992/11/12 20:34:42 ty7777 Exp ty7777 $";
d33 2
a45 1
	int		fd;
d71 4
a74 2
	default_eframe_flag	= atoi (argv [11]);
	default_eplane_flag	= atoi (argv [12]);
d76 2
a77 2
	matval.frame	= frame_start;
	matval.plane	= planes_start;
d82 1
a82 2
	fd	= open (ecat_image_name, O_RDONLY, 0);
	fptr	= OpenEcat (fd, ecat_image_name, &num_slices, &xdim, &ydim, 
d97 1
a97 2
		matrixx_close (fptr);
		close (fd);
d101 1
a101 1
	if (default_eframe_flag || frame_end > mlist->frames)
d103 14
d120 1
a120 1
	if (default_eplane_flag || planes_end > mlist->planes)
a190 1
	close (fd);
@


1.7
log
@Added frames specification.
@
text
@d1 1
a1 1
/*$Id: ecat2pett6.c,v 1.6 1992/10/09 15:38:23 ty7777 Exp ty7777 $*/
d3 3
d17 1
a17 1
static char rcsid []= "$Id: ecat2pett6.c,v 1.6 1992/10/09 15:38:23 ty7777 Exp ty7777 $";
d20 1
d22 2
d28 2
d31 1
d35 2
d40 1
d67 2
d77 2
a78 1
	fptr	= OpenEcat (fd, ecat_image_name, &num_slices, &xdim, &ydim, matval);
d84 24
d109 1
d137 6
a142 1
			Ecat2Pett6 (fptr, scale, pett6_header, slice_data, num_slices, matval);
d172 1
a172 1
	matrixx_close (fptr);
@


1.6
log
@Testing binary information.
@
text
@d1 1
a1 1
/*$Id: ecat2pett6.c,v 1.5 1992/10/09 15:10:53 ty7777 Exp ty7777 $*/
d3 3
d14 1
a14 1
static char rcsid []= "$Id: ecat2pett6.c,v 1.5 1992/10/09 15:10:53 ty7777 Exp ty7777 $";
d30 2
a31 1
	int		frame;
d33 1
a33 1
	int		i, j, k;
d37 1
d48 7
a54 8
	frame			= atoi (argv [4]);
	planes_start		= atoi (argv [5]);
	planes_end		= atoi (argv [6]);
	gate			= atoi (argv [7]);
	datatype		= atoi (argv [8]);
	bed			= atoi (argv [9]);
printf ("frame = %d start = %d end = %d gate = %d data = %d bed = %d\n",
frame, planes_start, planes_end, gate, datatype, bed);
d56 1
a56 1
	matval.frame	= frame;
d63 1
a63 1
	fptr	= OpenEcat (fd, ecat_image_name, &num_slices, &xdim, &ydim);
d69 2
a70 1
	slice_size	= sizeof (short) * ENCODED_SLICE_DIM;
d72 2
a73 1
	for (i = 1; i <= num_slices; i++)
d75 1
a75 5
		/* 
		 * Allocate header. 
		 */
		pett6_header	= (PETT6HDR *) calloc (1, sizeof (PETT6HDR));
		if (pett6_header == (PETT6HDR *) NULL)
d77 8
a84 2
			fprintf (stderr, "Error: Can't allocate pet image header.\n");
		}
d86 8
a93 8
		/* 
		 * Allocate image array. 
		 */
		slice_data = (short *) malloc (slice_size);
		if (slice_data == (short *) NULL)
		{
			fprintf (stderr, "Error: Can't allocate pet image array.\n");
		}
d95 3
a97 1
		Ecat2Pett6 (fptr, i, scale, pett6_header, slice_data, num_slices);
d99 8
a106 8
		/* 
		 * Allocate and zero the image array 
		 */
		pett6_slice_data = (short *) malloc (PETT6_SLICE_SIZE);
		if (pett6_slice_data == (short *) NULL)
		{
			fprintf (stderr, "Error: Can't allocate pett6 image array.\n");
		}
d108 1
a108 3
		for (j = 0; j < PETT6_SLICE_HEIGHT; j++)
		{
			for (k = 0; k < PETT6_SLICE_WIDTH; k++)
d110 6
a115 3
				pett6_slice_data [j * PETT6_SLICE_WIDTH + k]
					= (slice_data [(j + HALF_DHEIGHT) 
					* xdim + HALF_DWIDTH + k]);
d117 1
a117 2
		}
		free (slice_data);
d119 2
a120 1
		PutImagePett6 (pett6_slice_data, i, pett6_header, pett6_image_name);
d122 3
a124 2
		free (pett6_header);
		free (pett6_slice_data);
@


1.5
log
@Working version of ecat2pett6. Before changing frame, plane, gate, data, and bed.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d7 6
a37 1
	static char	rcsid []	= "$Id$";
@


1.4
log
@Before making changes on 10/07/92.
@
text
@d1 3
d29 2
d41 8
@


1.3
log
@ecat2pett6 working version.
@
text
@d9 2
d12 2
d15 2
d18 3
a23 1
	int		slice_size;
d27 9
a35 4
	if (argc == 4)
		scale	= atof (argv [3]);
	else
		scale	= 0.1;
d37 2
a38 2
	fd	= open (argv [1], O_RDONLY, 0);
	fptr	= OpenEcat (fd, argv [1], &num_slices, &xdim, &ydim);
d66 1
a66 1
		Ecat2Pett6 (fptr, i, scale, pett6_header, slice_data);
d88 1
a88 1
		PutImagePett6 (pett6_slice_data, i, pett6_header, argv [2]);
@


1.2
log
@Version similar to the one in spideram.
@
text
@a11 2
	int		pettnum;
	BOOLEAN		encoded;
a12 1
	BOOLEAN		err;
d25 5
a29 2
	pettnum = getimage_type (fd, argv [1], &encoded, &num_slices);
	close (fd);
d53 1
a53 4
		fd	= open (argv [1], O_RDONLY, 0);
		getimage (slice_data, pett6_header, fd, argv [1], 
			i, encoded, num_slices, pettnum, &err);
		close (fd);
d80 3
@


1.1
log
@Initial revision
@
text
@d12 2
d15 1
d28 1
a28 5
	fptr	= OpenEcat (fd, argv [1], &num_slices, &xdim, &ydim);
	if (fptr == (MatrixFile *) NULL)
	{
		exit (-1);
	}
d53 4
a56 1
		Ecat2Pett6 (fptr, i, scale, pett6_header, slice_data);
a82 2

	matrixx_close (fptr);
@
