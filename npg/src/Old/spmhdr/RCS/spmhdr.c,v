head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2001.07.23.22.23.00;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Log$ */
/*	===============================================================================
 *	Module:			spmhdr.c
 *	Date:			Jul 2001
 *	Author:			Tom Videen
 *	Description:	Read SPM version of Analyze hdr
 *	===============================================================================
 */
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/spmhdr/RCS/spmhdr.c,v 1.2 2000/01/27 21:26:29 tom Exp $";
#endif

#include <stdio.h>
#include <SPM.h>				 /* dsr */

main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;
	FILE           *fd_hdr;
	char           *ANALYZE_hdr;
	int				i;

	if (argc != 2) {
		fprintf (stdout, "Usage: spmhdr filename\n");
		return (-1);
	}
	ANALYZE_hdr = argv[1];
	if ((fd_hdr = fopen (ANALYZE_hdr, "r")) == 0) {
		fprintf (stderr, "ERROR [spmhdr]: Cannot open: %s\n", ANALYZE_hdr);
		return (-1);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [spmhdr]: Reading: %s\n", ANALYZE_hdr);
		return (-1);
	}
	fclose (fd_hdr);

	printf ("sizeof_hdr    %d\n", hdr.hk.sizeof_hdr);
	printf ("data_type     %s\n", hdr.hk.data_type);
	printf ("db_name       %s\n", hdr.hk.db_name);
	printf ("extents       %d\n", hdr.hk.extents);
	printf ("session_error %d\n", hdr.hk.session_error);
	printf ("regular       %c\n", hdr.hk.regular);
	printf ("hkey_un0      %c\n\n", hdr.hk.hkey_un0);

	for (i=0; i < 8; i++)
		printf ("dim[%d]      %d\n", i, hdr.dime.dim[i]);
	printf ("unused8     %d\n", hdr.dime.unused8);
	printf ("unused9     %d\n", hdr.dime.unused9);
	printf ("unused10    %d\n", hdr.dime.unused10);
	printf ("unused11    %d\n", hdr.dime.unused11);
	printf ("unused12    %d\n", hdr.dime.unused12);
	printf ("unused13    %d\n", hdr.dime.unused13);
	printf ("unused14    %d\n", hdr.dime.unused14);
	printf ("datatype    %d\n", hdr.dime.datatype);
	printf ("bitpix      %d\n", hdr.dime.bitpix);
	printf ("dim_un0     %d\n", hdr.dime.dim_un0);
	for (i=0; i < 8; i++)
		printf ("pixdim[%d]   %f\n", i, hdr.dime.pixdim[i]);
	printf ("funused8    %f\n", hdr.dime.funused8);
	printf ("funused9    %f\n", hdr.dime.funused9);
	printf ("funused10   %f\n", hdr.dime.funused10);
	printf ("funused11   %f\n", hdr.dime.funused11);
	printf ("funused12   %f\n", hdr.dime.funused12);
	printf ("funused13   %f\n", hdr.dime.funused13);
	printf ("compressed  %f\n", hdr.dime.compressed);
	printf ("verified    %f\n", hdr.dime.verified);
	printf ("glmax       %d\n", hdr.dime.glmax);
	printf ("glmin       %d\n\n", hdr.dime.glmin);

	printf ("descrip     %s\n", hdr.hist.descrip);
	printf ("aux_fil     %s\n", hdr.hist.aux_file);
	printf ("x-org       %d\n", hdr.hist.xorg);
	printf ("y-org       %d\n", hdr.hist.yorg);
	printf ("z-org       %d\n", hdr.hist.zorg);
	printf ("views       %d\n", hdr.hist.views);
	printf ("vols_added  %d\n", hdr.hist.vols_added);
	printf ("start_field %d\n", hdr.hist.start_field);
	printf ("field_skip  %d\n", hdr.hist.field_skip);
	printf ("omax        %d\n", hdr.hist.omax);
	printf ("omin        %d\n", hdr.hist.omin);
	printf ("smax        %d\n", hdr.hist.smax);
	printf ("smin        %d\n", hdr.hist.smin);

	return (0);
}
@
