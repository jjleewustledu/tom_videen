head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	96.06.10.13.39.01;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.05.06.19.10.34;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@changed zdim from 77 to 64 slices
@
text
@/*	$Id: boontrans.c,v 1.1 1996/05/06 19:10:34 tom Exp tom $
	$Log: boontrans.c,v $
 * Revision 1.1  1996/05/06  19:10:34  tom
 * Initial revision
 *
 * Revision 1.3  1996/04/24  16:03:47  tom
 * changed pixel dimension units to cm
 *
 * Revision 1.2  1995/10/24  20:15:21  tom
 * changed z-scaling to use ACPC plane to top of brain
 *
 * Revision 1.1  1995/10/12  21:19:02  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			boontrans.c
 *	Date:			Apr-96
 *	Author:			Tom Videen
 *	Description:
 *		Transform PET images into baboon atlas space using matrix.
 *		Optionally process images as cvf, cbv, oef, cmro2.
 *
 *	Command line parameters:
 *		parameter file
 *		image list
 *		output filename
 *
 *	Input Files:
 *		parameter file  (prm (5))
 *		image list      (imagelist (5))
 *		PET image files (PETT VI, ECAT image format; any readable by getrealimg)
 *		hdr files       (hdr (5))
 *		image mask      (PETT VI, ECAT image format; any readable by getrealimg)
 *		matrix files
 *
 *	Output Files:
 *		atlas image     (ECAT image format)
 *		rec file        (rec (5))
 *		hdr file        (hdr (5))
 *		sd image        (ECAT image format)
 *		n image         (ECAT image format)
 *
 *	History:
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/petsun19/tom/src/boontrans/RCS/boontrans.c,v 1.1 1996/05/06 19:10:34 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <petutil/matrix.h>
#include <petutil/package.h>	 /* BOOLEAN */
#include <petutil/petutil.h>
#include <petutil/imglist.h>	 /* IMAGE_LIST_DATA, MAXPATH */
#include <nrecipes/kr/nr.h>
#include <nrecipes/kr/nrutil.h>
#include "brain_atlas.h"		 /* BRAIN_ATLAS */
#define  LSTSIZE 2000			 /* max size of imglist */

char            list[] = "*;*;*;*";		 /* any frame plane gate bed */

REAL_SLICE     *atlas_image;	 /* atlas-transformed image */
REAL_SLICE     *totwt;			 /* total of weighted images contributing to each
						  			element of atlas_image */

/*	----------------------------
 *	Function:	boontrans
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{
	int             atlas_scalers ();
	void            getlists ();
	void            atlas_transform ();
	int             getmap ();
	void            matrix_inv ();

	Image_subheader **subheader;
	Main_header    *main_header;
	MatrixFile     *fptr;
	FILE           *recfp;
	BRAIN_ATLAS     atlas;			 /* brain atlas definition */
	PARAMETER_DATA  parameter_data;
	IMAGE_LIST_DATA *imglist;
	HEADER_DATA    *hdr;			 /* hdr structure */
	float         **map;			 /* conversion matrix Atlas -> PET   */

	BOOLEAN         encoded_flag;
	BOOLEAN         use_mask = 0;
	BOOLEAN         compute_sd = 0;
	BOOLEAN         paired_images = 0;
	BOOLEAN         oxygen_mode = 0;
	COMMENT_INFO    comment_info_data;
	char           *lstfile;
	char           *prmfile;
	char           *outfile;
	char           *recfile;
	char            maskfile[MAXPATH];
	char            sdfile[MAXPATH];
	char            wtfile[MAXPATH];
	char            matrixfile[LSTSIZE][MAXPATH];
	char           *ext;
	char            date[40];
	char           *today;
	char           *userid;
	char           *activation_scan;
	char           *control_scan;
	char           *flow_scan1;
	char           *vol_scan1;
	char           *flow_scan2;
	char           *vol_scan2;
	int             lstsize;
	int             image_mode;
	int             filter_mode;
	int             fd;
	int             i, j, k, m;		 /* array indices */
	float           scaler;			 /* scale individual PET images */
	float           pixel_size;
	float           plane_separation;
	float           default_pixel_size;
	float           default_plane_separation;
	float           weight;
	float           maxwt;
	int             scanner;		 /* 6 = PETT VI;  10 = 953B */
	short           nx;
	short           ny;
	short           num_slices;
	struct Matval   matval;
	REAL_SLICE     *image1;			 /* first (activation) PET image */
	REAL_SLICE     *image2;			 /* second (control) PET image */
	REAL_SLICE     *image3;			 /* flow PET image for oxygen processing */
	REAL_SLICE     *image4;			 /* volume PET image for oxygen processing */
	REAL_SLICE     *sdimage;		 /* SD image */
	REAL_SLICE     *mask;			 /* mask for PET images */
	SCANLIST_ARRAY *scan;

/*
 *	parameters read from prm file
 */

	float           smg_norm;
	float           smg_mskpct;
	int             first_slice;
	int             last_slice;
	int             zorigin;
	int             zmax;
	char            smg_mode[10];
	char            smg_divisor[10];
	char            smg_included[10];
	char            processing[10];
	char            smg_mask[10];
	char            smg_compute[10];
	char            smg_sdimage[10];
	char            smg_nimage[10];
	char            smg_symmetry[10];
	char            atlas_name[10];

	matval.frame = 1;			 /* default values for matval */
	matval.plane = 1;
	matval.gate = 1;
	matval.data = 0;
	matval.bed = 0;

	filter_mode = IMGFILTER_MODE;
	maxwt = 0;
	map = matrix (1, 4, 1, 4);

/*
 *	Read command line arguments and initialize filenames.
 *	---------------------------------------------------
 */

	printf ("Copyright 1991-1996, Washington University\n");
	printf ("All rights reserved. Unauthorized reproduction prohibited.\n");
	if (argc != 13) {
		printf ("Usage: boontrans prmlist imglist outfile recfile date\n");
		exit (FAIL);
	}
	prmfile = argv[1];
	lstfile = argv[2];
	outfile = argv[3];
	recfile = argv[4];
	sprintf (date, "%s %s %s %s %s %s", argv[5], argv[6], argv[7], argv[8], argv[9], argv[10]);
	today = argv[11];
	userid = argv[12];

	strcpy (sdfile, outfile);
	ext = strrchr (sdfile, '.');
	if (ext != NULL)
		strcpy (ext, ".sd");
	else
		strcat (sdfile, ".sd");

	strcpy (wtfile, outfile);
	ext = strrchr (wtfile, '.');
	if (ext != NULL)
		strcpy (ext, ".n");
	else
		strcat (wtfile, ".n");

	recfp = fopen (recfile, "a");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "Error: cannot open %s\n", recfile);
		exit (FAIL);
	}
/*
 *	Read imagelist into structure imglist
 *	----------------------------------------
 */

	imglist = (IMAGE_LIST_DATA *) malloc (sizeof (IMAGE_LIST_DATA) * LSTSIZE);

	if (readlist (lstfile, imglist, &lstsize) == FAIL) {
		fprintf (stderr, "Error: reading %s\n", lstfile);
		exit (FAIL);
	}
	if (lstsize > LSTSIZE) {
		fprintf (stderr, "Error: imglist size %d > %d\n", lstsize, LSTSIZE);
		exit (FAIL);
	}
/*
 *	Read parameters into structure parameter_data
 *	---------------------------------------------
 */

	scan = (SCANLIST_ARRAY *) malloc (lstsize * sizeof (SCANLIST_ARRAY));

	if (getprms_atlas (prmfile, &smg_norm, smg_divisor, smg_included, processing, smg_mode, smg_mask,
	     smg_sdimage, smg_nimage, smg_symmetry, &smg_mskpct, smg_compute, &default_pixel_size,
			 &default_plane_separation, &first_slice, &last_slice, &zorigin, &zmax,
			 atlas_name) == FAIL) {
		fprintf (stderr, "Error: reading parameter file %s\n", prmfile);
		exit (FAIL);
	}
	if (strcmp (smg_mode, "paired") == 0)
		paired_images = 1;

	if ((strcmp (processing, "oef") == 0) || (strcmp (processing, "cmro2") == 0)) {
		oxygen_mode = 1;
		image_mode = MULTITRACER_IMAGE_MODE;
	} else if (strcmp (smg_mode, "diff") == 0)
		image_mode = DIFIMAGE_MODE;
	else
		image_mode = STDIMAGE_MODE;

/*
 *	Construct full path names in scan
 */
	getlists (prmfile, lstsize, image_mode, filter_mode, scan, matrixfile,
		  &parameter_data, imglist);

/*
 *	Get atlas values and allocate memory
 */

	if (!(strcmp (atlas_name, "dh68"))) {
		get_dh68atlas (&atlas);
		if (zorigin > 0)
			atlas.z0 = zorigin - 1;
		if (zmax > 0)
			atlas.zdim = zmax;
	}
	main_header = (Main_header *) calloc (1, sizeof (Main_header));
	subheader = (Image_subheader **) malloc (atlas.zdim * sizeof (caddr_t));
	atlas_image = (REAL_SLICE *) malloc (atlas.zdim * sizeof (REAL_SLICE));
	totwt = (REAL_SLICE *) malloc (atlas.zdim * sizeof (REAL_SLICE));
	hdr = (HEADER_DATA *) malloc (sizeof (HEADER_DATA));

/*
 *	LOOP for each image or image-pair in the list:
 *	---------------------------------------------
 */

	for (i = 0; i < lstsize; ++i) {
		activation_scan = scan[i][0];
		if (oxygen_mode) {
			flow_scan1 = scan[i][1];
			vol_scan1 = scan[i][2];
			if (paired_images) {
				control_scan = scan[i][3];
				flow_scan2 = scan[i][4];
				vol_scan2 = scan[i][5];
			}
		} else if (paired_images) {
			control_scan = scan[i][1];
		}
/*
 *	First image, first time -- get scanner and dimensions; zero arrays (atlas_image, totwt, sdimage)
 *	------------------------------------------------------------------
 */
		if (i == 0) {
			fd = open (activation_scan, O_RDONLY, 0);
			if (fd == -1) {
				fprintf (stderr, "Error opening %s\n", activation_scan);
				exit (FAIL);
			}
			scanner = getimage_type (fd, activation_scan, &encoded_flag, &num_slices);
			close (fd);
			if (scanner == ERROR_SCANNER) {
				fprintf (stderr, "Error: file is not a recognized PET image\n");
				exit (FAIL);
			}
			if (scanner == ECAT_SCANNER) {
				fptr = OpenEcat (activation_scan, &num_slices, &nx, &ny, &pixel_size,
						 &plane_separation, matval);
				if (fptr == (MatrixFile *) NULL) {
					fprintf (stderr, "Error: cannot open %s as an ECAT image file\n", activation_scan);
					exit (FAIL);
				}
				matrix_close (fptr);
			} else {
				nx = DIM;
				ny = DIM;
			}

			image1 = (REAL_SLICE *) calloc (num_slices, sizeof (REAL_SLICE));
			if (paired_images)
				image2 = (REAL_SLICE *) calloc (num_slices, sizeof (REAL_SLICE));
			if (oxygen_mode) {
				image3 = (REAL_SLICE *) calloc (num_slices, sizeof (REAL_SLICE));
				image4 = (REAL_SLICE *) calloc (num_slices, sizeof (REAL_SLICE));
			}
			if (strcmp (smg_mask, "yes") == 0) {
				use_mask = 1;
				mask = (REAL_SLICE *) calloc (num_slices, sizeof (REAL_SLICE));
			}
			if (strcmp (smg_sdimage, "yes") == 0) {
				compute_sd = 1;
				sdimage = (REAL_SLICE *) calloc (atlas.zdim, sizeof (REAL_SLICE));
			} else
				sdimage = (REAL_SLICE *) calloc (1, sizeof (float));

			for (m = 0; m < atlas.zdim; ++m) {
				for (j = 0; j < DIM; ++j) {
					for (k = 0; k < DIM; ++k) {
						atlas_image[m][j][k] = 0;
						totwt[m][j][k] = 0;
						if (compute_sd)
							sdimage[m][j][k] = 0;
					}
				}
			}
		}
/*
 *	Read and process First (activation) image
 *	-----------------------------------------
 */
		if (oxygen_mode) {
			if (getrealimg (flow_scan1, scanner, matval, nx, ny, num_slices, image3,
					main_header, subheader) == FAIL) {
				fprintf (stderr, "Error reading %s\n", flow_scan1);
				exit (FAIL);
			}
			recout (recfp, flow_scan1);
			printf ("Flow = %s\n", flow_scan1);

			if (getrealimg (vol_scan1, scanner, matval, nx, ny, num_slices, image4,
					main_header, subheader) == FAIL) {
				fprintf (stderr, "Error reading %s\n", vol_scan1);
				exit (FAIL);
			}
			recout (recfp, vol_scan1);
			printf ("Vol  = %s\n", vol_scan1);
		}
		if (getrealimg (activation_scan, scanner, matval, nx, ny, num_slices, image1,
				main_header, subheader) == FAIL) {
			fprintf (stderr, "Error reading %s\n", activation_scan);
			exit (FAIL);
		}
		recout (recfp, activation_scan);
		printf ("Activation  = %s\n", activation_scan);

		if (strcmp (smg_compute, "no") != 0) {
			if (image_mode == DIFIMAGE_MODE)
				scaler = 1.0;
			else if (smg_norm == 0) {
				fprintf (stderr, "Error: Parameter smg_norm in parameter list is 0\n");
				exit (FAIL);
			} else if (imglist[i].mean1 == 0) {
				fprintf (stderr, "Error: Normalization factor in image list is 0\n");
				exit (FAIL);
			} else
				scaler = smg_norm / imglist[i].mean1;
			fprintf (recfp, "Scale %s by %f\n", activation_scan, scaler);
		} else
			scaler = 1.0;

		if (oxygen_mode) {
			if (process_oxygen (image1, image3, image4, nx, ny, num_slices, scaler,
			    processing, activation_scan, flow_scan1, vol_scan1, recfp, hdr) > 0) {
				fprintf (stderr, "Error processing %s %s %s\n", activation_scan,
					 flow_scan1, vol_scan1);
				exit (FAIL);
			}
		} else if (process_pet (image1, nx, ny, num_slices, scaler, processing,
					activation_scan, recfp, hdr) > 0) {
			fprintf (stderr, "Error processing %s\n", activation_scan);
			exit (FAIL);
		}
/*
 *	Read and process second (control) image (for paired lists)
 *	----------------------------------------------------------
 */

		if (paired_images) {
			if (oxygen_mode) {
				if (getrealimg (flow_scan2, scanner, matval, nx, ny, num_slices, image3,
						main_header, subheader) == FAIL) {
					fprintf (stderr, "Error reading %s\n", flow_scan2);
					exit (FAIL);
				}
				recout (recfp, flow_scan2);
				printf ("Flow = %s\n", flow_scan2);

				if (getrealimg (vol_scan2, scanner, matval, nx, ny, num_slices, image4,
						main_header, subheader) == FAIL) {
					fprintf (stderr, "Error reading %s\n", vol_scan2);
					exit (FAIL);
				}
				recout (recfp, vol_scan2);
				printf ("Vol  = %s\n", vol_scan2);
			}
			if (getrealimg (control_scan, scanner, matval, nx, ny, num_slices, image2,
					main_header, subheader) == FAIL) {
				fprintf (stderr, "Error reading %s\n", control_scan);
				exit (FAIL);
			}
			recout (recfp, control_scan);
			printf ("Control  = %s\n", control_scan);

			if (image_mode == DIFIMAGE_MODE)
				scaler = 1.0;
			else if (imglist[i].mean2 == 0) {
				fprintf (stderr, "Error: Normalization factor in image list is 0\n");
				exit (FAIL);
			} else
				scaler = smg_norm / imglist[i].mean2;
			fprintf (recfp, "Scale %s by %f\n", control_scan, scaler);

			if (oxygen_mode) {
				if (process_oxygen (image2, image3, image4, nx, ny, num_slices, scaler,
				processing, control_scan, flow_scan2, vol_scan2, recfp, hdr) > 0) {
					fprintf (stderr, "Error processing %s %s %s\n", control_scan,
						 flow_scan2, vol_scan2);
					exit (FAIL);
				}
			} else if (process_pet (image2, nx, ny, num_slices, scaler, processing,
						control_scan, recfp, hdr) > 0) {
				fprintf (stderr, "Error processing %s\n", control_scan);
				exit (FAIL);
			}
		}
/*
 *	Read the mask file (optional)
 *	-----------------------------
 */

		if (use_mask) {
			strcpy (maskfile, activation_scan);
			ext = strrchr (maskfile, '.');
			if (ext != NULL)
				strcpy (ext, ".msk");
			else
				strcat (maskfile, ".msk");
			if (getrealimg (maskfile, scanner, matval, nx, ny, num_slices, mask,
					main_header, subheader) == FAIL) {
				fprintf (stderr, "Error reading %s\n", maskfile);
				exit (FAIL);
			}
			recout (recfp, maskfile);
		}
/*
 *	Read Matrix file information
 *	-------------------------
 */

		if (getmap (matrixfile[i], map) == FAIL) {
			fprintf (stderr, "Error reading %s\n", matrixfile[i]);
			exit (FAIL);
		}
		fprintf (recfp, "%s\n", matrixfile[i]);
		fprintf (recfp, "Matrix Transform:  Matrix*Atlas -> PET\n");
		matrix_print (map, 4, 4);

/*
 *	Subtract, transform to atlas space, and sum
 */

		if (paired_images)
			image_diff (image1, image2, num_slices);
		weight = imglist[i].weight;
		maxwt += weight;
		atlas_transform (image1, atlas_image, sdimage, weight, totwt, atlas, mask, map,
				 num_slices, use_mask, compute_sd, first_slice, last_slice);
	}

/*	End LOOP
 *	--------
 *
 *	Scale final atlas image and mask pixels
 *	---------------------------------------
 */

	image_scale (atlas_image, totwt, atlas.zdim, maxwt, smg_divisor, smg_included,
		     compute_sd, sdimage);

/*
 *	Write Summed Image to outfile
 *	-----------------------------
 *	pixel_size and slice_separation must be set in all subheaders
 */

	for (i = num_slices; i < atlas.zdim; i++) {
		subheader[i] = matrixx_init_image_subheader (subheader[0]);
	}
	for (i = 0; i < atlas.zdim; i++) {
		subheader[i]->pixel_size = 0.1 * atlas.pixel_size;
		subheader[i]->slice_width = 0.1 * atlas.slice_separation;
	}
	main_header->plane_separation = 0.1 * atlas.slice_separation;
	strncpy (main_header->physician_name, &rcsid[48], sizeof (main_header->physician_name) - 1);
	strncpy (main_header->operator_name, date, sizeof (main_header->operator_name) - 1);

	comment_info (main_header->study_description, &comment_info_data);
	comment_info_data.zorigin = atlas.z0 + 1;
	info2comment (comment_info_data, main_header->study_description);

	if (writerealimg (outfile, matval, DIM, DIM, atlas.zdim, atlas_image, main_header, subheader)
	    == FAIL) {
		fprintf (stderr, "Error writing %s\n", outfile);
	}
/*
 *	Write HDR file
 *	--------------
 */

	if (strcmp (processing, "none") != 0) {
		if (writehdr (hdr, outfile, userid, today, processing, (short) atlas.zdim) == FAIL) {
			fprintf (stderr, "Error writing hdr file\n");
		}
	}
/*
 *	Write SD Image to sdfile
 *	------------------------
 */

	if (compute_sd) {
		if (writerealimg (sdfile, matval, DIM, DIM, atlas.zdim, sdimage, main_header, subheader)
		    == FAIL) {
			fprintf (stderr, "Error writing %s\n", sdfile);
		}
	}
/*
 *	Write Total Weight Image to wtfile
 *	----------------------------------
 */

	if (strcmp (smg_nimage, "yes") == 0) {
		if (writerealimg (wtfile, matval, DIM, DIM, atlas.zdim, totwt, main_header, subheader)
		    == FAIL) {
			fprintf (stderr, "Error writing %s\n", wtfile);
		}
	}
/*
 *	Clean up
 *	--------
 */

	for (i = 0; i < atlas.zdim; i++)
		free (subheader[i]);
	free (subheader);
	free (main_header);
	free (image1);
	if (paired_images)
		free (image2);
	if (oxygen_mode) {
		free (image3);
		free (image4);
	}
	free (sdimage);
	if (use_mask)
		free (mask);
	free (imglist);
	free (scan);
	free (hdr);
	free_matrix (map, 1, 4, 1, 4);
	fclose (recfp);
	exit (SUCCEED);
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: boontrans.c,v 1.3 1996/04/24 16:03:47 tom Exp $
d3 3
d46 1
a46 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/monktrans/RCS/boontrans.c,v 1.3 1996/04/24 16:03:47 tom Exp $";
@
