head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	96.05.06.19.10.45;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Id: getprms_atlas.c,v 1.1 1995/10/12 21:19:02 tom Exp $
	$Log: getprms_atlas.c,v $
 * Revision 1.1  1995/10/12  21:19:02  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			getprms_atlas.c
 *	Date:			12-Oct-95
 *	Author:			Tom Videen
 *	Description:	Read program-specific parameters from the parameter file.
 *
 *	Input:
 *		prmfile	-	name of parameter file
 *
 *	Output (parameters assigned values):
 *	Required:
 *		smg_norm
 *		smg_mode
 *		smg_divisor
 *		smg_included
 *		processing
 *	Optional:
 *		smg_mask
 *		smg_sdimage
 *		smg_nimage
 *		smg_symmetry
 *		smg_mskpct
 *		smg_compute
 *		pixel_size
 *		plane_separation
 *		first_slice
 *		last_slice
 *		zorigin
 *		zmax
 *
 *	History:
 *		12-Oct-95	Taken from t88mean
 *	===============================================================================
 */

#include <stdio.h>
#include <string.h>
#include <petutil/petutil.h>

static char     rcsid[] = "$Header: /home/petsun19/tom/src/monktrans/RCS/getprms_atlas.c,v 1.1 1995/10/12 21:19:02 tom Exp $";

int             getprms_atlas (prmfile, smg_norm, smg_divisor, smg_included, processing, smg_mode, smg_mask,
                       smg_sdimage, smg_nimage, smg_symmetry, smg_mskpct, smg_compute, pixel_size,
	                     plane_separation, first_slice, last_slice, zorigin, zmax, atlas_name)
	char           *prmfile;
	float          *smg_norm;
	char           *smg_divisor;
	char           *smg_included;
	char           *processing;
	char           *smg_mode;
	char           *smg_mask;
	char           *smg_compute;
	char           *smg_sdimage;
	char           *smg_nimage;
	char           *smg_symmetry;
	float          *smg_mskpct;
	float          *pixel_size;
	float          *plane_separation;
	int            *first_slice;
	int            *last_slice;
	int            *zorigin;
	int            *zmax;
	char           *atlas_name;

{
	FILE           *fp;
	char            line[MAXLINE];
	char            label[MAXLINE];
	char            parameter[MAXLINE];
	int             slice1, slice2;

	*smg_norm = 0;
	*smg_mskpct = 0;
	*pixel_size = 0;
	*plane_separation = 0;
	*first_slice = 0;
	*last_slice = 0;
	*zorigin = 0;
	*zmax = 0;
	strcpy (smg_divisor, "NONE");
	strcpy (smg_included, "NONE");
	strcpy (smg_mode, "NONE");
	strcpy (processing, "NONE");
	strcpy (smg_mask, "no");
	strcpy (smg_compute, "yes");
	strcpy (smg_sdimage, "no");
	strcpy (smg_nimage, "no");
	strcpy (smg_symmetry, "no");
	strcpy (atlas_name, "t88");

	fp = fopen (prmfile, "r");
	if (fp == (FILE *) NULL) {
		printf ("Error opening parameter file %s\n", prmfile);
		return FAIL;
	}
/*
 *	Read each line of parameter file.
 *	If the line has 2 strings, compare the label with the list of eligible keys:
 *	and if the key is found, set the appropriate parameter.
 */

	while (fgets (line, MAXLINE, fp) != NULL) {
		if (sscanf (line, "%s %s", label, parameter) == 2) {

/*
 *	Get smg_norm
 */

			if (strcmp (label, "smg_norm:") == 0) {
				if (DetermineType (parameter) == DATA_TYPE_REAL ||
				    DetermineType (parameter) == DATA_TYPE_INTEGER)
					*smg_norm = atof (parameter);
				else {
					printf ("Error reading smg_norm from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get smg_mode
 */

			} else if (strcmp (label, "smg_mode:") == 0) {
				if (strcmp (parameter, "single") == 0 ||
				    strcmp (parameter, "paired") == 0 ||
				    strcmp (parameter, "diff") == 0)
					strcpy (smg_mode, parameter);
				else {
					printf ("Error reading smg_mode from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get smg_divisor
 */

			} else if (strcmp (label, "smg_divisor:") == 0) {
				if (strcmp (parameter, "global") == 0 ||
				    strcmp (parameter, "local") == 0 ||
				    strcmp (parameter, "none") == 0)
					strcpy (smg_divisor, parameter);
				else {
					printf ("Error reading smg_divisor from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get smg_included
 */

			} else if (strcmp (label, "smg_included:") == 0) {
				if (strcmp (parameter, "all") == 0 ||
				    strcmp (parameter, "sampled") == 0 ||
				    strncmp (parameter, "n=", 2) == 0)
					strcpy (smg_included, parameter);
				else {
					printf ("Error reading smg_included from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get processing
 */

			} else if (strcmp (label, "processing:") == 0) {
				if (strcmp (parameter, "none") == 0 ||
				    strcmp (parameter, "cbf") == 0 ||
				    strcmp (parameter, "cbv") == 0 ||
				    strcmp (parameter, "oef") == 0 ||
				    strcmp (parameter, "cmro2") == 0)
					strcpy (processing, parameter);
				else {
					printf ("Error reading processing from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get smg_mask
 */

			} else if (strcmp (label, "smg_mask:") == 0) {
				strcpy (smg_mask, parameter);

/*
 *	Get smg_compute
 */

			} else if (strcmp (label, "smg_compute:") == 0) {
				strcpy (smg_compute, parameter);

/*
 *	Get smg_sdimage
 */

			} else if (strcmp (label, "smg_sdimage:") == 0) {
				strcpy (smg_sdimage, parameter);

/*
 *	Get smg_nimage
 */

			} else if (strcmp (label, "smg_nimage:") == 0) {
				strcpy (smg_nimage, parameter);

/*
 *	Get smg_symmetry
 */

			} else if (strcmp (label, "smg_symmetry:") == 0) {
				strcpy (smg_symmetry, parameter);

/*
 *	Get pixel_size
 */

			} else if (strcmp (label, "pixel_size:") == 0) {
				if (DetermineType (parameter) == DATA_TYPE_REAL ||
				    DetermineType (parameter) == DATA_TYPE_INTEGER)
					*pixel_size = atof (parameter);
				else {
					printf ("Error reading pixel_size from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get plane_separation
 */

			} else if (strcmp (label, "plane_separation:") == 0) {
				if (DetermineType (parameter) == DATA_TYPE_REAL ||
				    DetermineType (parameter) == DATA_TYPE_INTEGER)
					*plane_separation = atof (parameter);
				else {
					printf ("Error reading plane_separation from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get first_slice and last_slice
 */

			} else if (strcmp (label, "slices:") == 0) {
				if (sscanf (parameter, "%dto%d", &slice1, &slice2) == 2) {
					if (slice1 <= slice2) {
						*first_slice = slice1 - 1;
						*last_slice = slice2 - 1;
					} else {
						*first_slice = slice2 - 1;
						*last_slice = slice1 - 1;
					}
				}
/*
/*
 *	Get zorigin
 */

			} else if (strcmp (label, "z0:") == 0) {
				if (DetermineType (parameter) == DATA_TYPE_INTEGER)
					*zorigin = atoi (parameter);
				else {
					printf ("Error reading z0 from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get zmax
 */

			} else if (strcmp (label, "zmax:") == 0) {
				if (DetermineType (parameter) == DATA_TYPE_INTEGER)
					*zmax = atoi (parameter);
				else {
					printf ("Error reading zmax from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get smg_mskpct
 */

			} else if (strcmp (label, "smg_mskpct:") == 0) {
				if (DetermineType (parameter) == DATA_TYPE_REAL ||
				    DetermineType (parameter) == DATA_TYPE_INTEGER)
					*smg_mskpct = atof (parameter);
				else {
					printf ("Error reading smg_mskpct from %s\n", prmfile);
					return FAIL;
				}
/*
 *	Get atlas_name
 */

			} else if (strcmp (label, "atlas:") == 0) {
				if (strcmp (parameter, "none") == 0 ||
				    strcmp (parameter, "t88") == 0 ||
				    strcmp (parameter, "dh68") == 0)
					strcpy (atlas_name, parameter);
				else {
					printf ("Error reading atlas_name from %s\n", prmfile);
					return FAIL;
				}
			}
		}
	}

/*
 *	Check that all required parameters have been assigned new values before exiting.
 */

	if (strcmp (smg_compute, "yes") == 0) {
		if (*smg_norm == 0) {
			printf ("Error:  smg_norm not found in %s\n", prmfile);
			return FAIL;
		}
		if (strcmp (smg_divisor, "NONE") == 0) {
			printf ("Error:  smg_divisor not found in %s\n", prmfile);
			return FAIL;
		}
		if (strcmp (smg_included, "NONE") == 0) {
			printf ("Error:  smg_included not found in %s\n", prmfile);
			return FAIL;
		}
		if (strcmp (smg_mode, "NONE") == 0) {
			printf ("Error:  smg_mode not found in %s\n", prmfile);
			return FAIL;
		}
		if (strcmp (processing, "NONE") == 0) {
			printf ("Error:  processing not found in %s\n", prmfile);
			return FAIL;
		}
	}
}
@
