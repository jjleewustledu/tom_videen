head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.04.13.15.27.46;	author tom;	state Exp;
branches;
next	;


desc
@original
@


1.1
log
@Initial revision
@
text
@/*
$Id$
$Log$
===============================================================================
 *  Module:         subrandoms.c
 *  Date:           13-Apr-95
 *  Author:         Tom Videen
 *  Description:    Subtract delayeds from prompts in a sinogram
===============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "matrix.h"
#include "cti_proto.h"

static char     rcsid[] = "$Header$";

#define PROMPTS_DATA 0
#define DELAYEDS_DATA 1
#define FALSE 0
#define TRUE 1

char            Usage[] = "Usage: subrandoms inputfile.scn [debug]\n";
char            truename[128];

main (argc, argv)
	int             argc;
	char          **argv;
{
	Scan_subheader *shpr;
	Scan_subheader *shdl;
	Main_header    *mhpr;
	char           *fname;
	int             sinosize;		 /* computed size of sinogram in bins */
	int             j;
	int             debug = 0;
	float          *trues;
	float          *prompts;
	float          *delayed;
	float           truesmax;
	float           truesmin;
	int             pln, frame = 1, gate = 1, bed = 0, stat;
	char           *sptr;
	char            basename[128];
	short           ndbins;			 /* Scan_subheader dimensions for sinogram data */
	short           nangles;
	int             oneframe = FALSE;
	int             minfrm = 1;
	int             maxfrm = 1;
	int             frm, outfrm;

	ndbins = 0;
	nangles = 0;				 /* initialize to impossible values */

/* Filenames for input & output */

	if (argc < 2 || argc > 3) {
		fprintf (stderr, Usage);
		exit (-1);
	} else if (argc == 3) {
		debug = atoi (argv[2]);
	}
	fname = argv[1];

	strcpy (basename, fname);
	sptr = strstr (basename, ".");
	*sptr = 0;
	sprintf (truename, "%s_tu.scn", basename);
	printf ("%s_tu.scn\n", basename);

	if ((mhpr = getmhdr (fname)) == NULL) {
		fprintf (stderr, "Could not read main header., %s\n", fname);
		exit (ERROR);
	}
	if (mhpr->file_type != RAW_DATA) {
		fprintf (stderr,
			 "subrandoms: matrix main header file_type of %d is not a scan file\n",
			 mhpr->file_type);
		exit (-1);
	}
	if (oneframe == TRUE) {
		mhpr->num_frames = 1;
		minfrm = frame;
		maxfrm = frame;
	} else {
		minfrm = 1;
		maxfrm = mhpr->num_frames;
	}
	for (frm = minfrm; frm <= maxfrm; frm++) {
		for (pln = 1; pln <= mhpr->num_planes; pln++) {
			if (oneframe == TRUE)
				outfrm = 1;
			else
				outfrm = frm;

/* Read the prompts sinogram */

			if ((prompts = rdimg (fname, pln, frm, gate, PROMPTS_DATA, bed)) == NULL) {
				fprintf (stderr, "Error reading %s, plane %d\n", prompts, pln);
				exit (ERROR);
			}
			if ((shpr = getsbhdr (fname, pln, frm, gate, PROMPTS_DATA, bed)) == NULL) {
				fprintf (stderr, "Could not read main header., %s\n", fname);
				exit (ERROR);
			}
/* Read the delayeds sinogram */

			if ((delayed = rdimg (fname, pln, frm, gate, DELAYEDS_DATA, bed)) == NULL) {
				fprintf (stderr, "Error reading %s, plane %d\n", prompts, pln);
				exit (ERROR);
			}
			if ((shdl = getsbhdr (fname, pln, frm, gate, DELAYEDS_DATA, bed)) == NULL) {
				fprintf (stderr, "Could not read main header., %s\n", fname);
				exit (ERROR);
			}
			if (pln == 1 && frm == minfrm) {	/* we need to initialize things */
				ndbins = shpr->dimension_1;	/* number of distance bins */
				nangles = shpr->dimension_2;	/* number of view angles */
				sinosize = ndbins * nangles;	/* size in bins */
				trues = (float *) malloc (sinosize * sizeof (float));
				fprintf (stderr, "Sinogram is %d by %d (%d)\n", ndbins, nangles, sinosize);
			} else if (ndbins != shpr->dimension_1) {
				fprintf (stderr, "subrandoms: inconsistent sinogram size\n");
				exit (-1);
			}
/* Use sinograms that are not corrected for deadtime. */

			for (j = 0; j < sinosize; j++) {
				prompts[j] /= shpr->loss_correction_fctr;
				delayed[j] /= shpr->loss_correction_fctr;
			}

/* Calculate trues = prompts - delayeds */

			truesmin = 1.e20;
			truesmax = -1.e20;
			for (j = 0; j < sinosize; j++) {
				trues[j] = prompts[j] - delayed[j];
				if (trues[j] > truesmax)
					truesmax = trues[j];
				else if (trues[j] < truesmin)
					truesmin = trues[j];
			}
			if (debug)
				fprintf (stderr, "trues max %f  min %f\n", truesmax, truesmin);
			if ((stat = wrimg
			     (truename, trues, mhpr, shpr, pln, outfrm, gate, 0, bed)) != OK) {
				fprintf (stderr, "Error writing %s, plane %d\n", truename, pln);
				exit (ERROR);
			}
			free (prompts);
			free (delayed);
		}
	}
}
@
