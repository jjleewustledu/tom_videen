head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	97.09.23.15.42.49;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Id: getimage.c,v 1.3 1995/12/20 17:48:54 tom Exp $
	$Log: getimage.c,v $
 * Revision 1.3  1995/12/20  17:48:54  tom
 * change scaler
 *
 * Revision 1.2  1995/12/19  14:34:29  tom
 * fix scaling using duration
 *
 * Revision 1.1  1995/12/12  20:41:09  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			getimage.c
 *	Date:			Dec-95
 *	Author:			Tom Videen
 *	Description:	Read an image file using libimg C routines.
 * ===============================================================================
 */
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/spideram/RCS/getimage.c,v 1.3 1995/12/20 17:48:54 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <libimg.h>
#include <libnrimg.h>

#define DIM 128

void            getimage (img, fname, plane, nslices, petnum, zorigin,
		                 nuclide, scanlen, compound, scandate, counts, filtername, errval)
	short          *img;
	char           *fname;
	int             plane;
	int            *nslices;
	int            *petnum;
	int            *zorigin;
	char           *nuclide;
	int            *scanlen;
	char           *compound;
	char           *scandate;
	int            *counts;
	char           *filtername;
	int            *errval;
{
	FILE           *fp;
	MainHeader     *mh;
	SubHeader      *sh;
	float          *image;
	char          **files;
	int            *frm;
	int             i, j;
	char           *ptr;
	float           maxf;
	short           maxs;
	float           scaler;
	int             len;
	int             reverse;
	int             gate = 1, data = 0, bed = 0;

	ptr = strstr (fname, " ");
	*ptr = NULL;
	files = (char **) malloc (sizeof (char *));
	frm = (int *) malloc (sizeof (int));
	files[0] = fname;
	frm[0] = 1;
	*errval = 0;

	if ((fp = fopen (fname, "r")) == NULL) {
		*errval = 1;
		return;
	}
	fclose (fp);

	if ((mh = getmhdr (files[0])) == NULL) {
		*errval = 1;
		return;
	}
	reverse = mh->orientation;
	*nslices = mh->nplane;
	if (mh->scanner_type == 6)
		*petnum = 6;
	else if (mh->scanner_type == 953)
		*petnum = 10;
	else if (mh->scanner_type == 961)
		*petnum = 10;
	else
		*petnum = 0;
	*zorigin = mh->zorigin;
	strncpy (nuclide, mh->isotope, 7);
	strncpy (compound, mh->radiopharmaceutical, 9);
	strncpy (scandate, mh->date_time, 9);

	if (existimgfrm (mh, files[0], plane, frm[0], gate, data, bed) == ERROR) {
		if (frm[0] == 1) {
			frm[0] = 2;
			if (existimgfrm (mh, files[0], plane, frm[0], gate, data, bed) == ERROR) {
				*errval = 1;
				return;
			}
		} else {
			*errval = 1;
			return;
		}
	}
	if ((sh = getsbhdr (mh, files[0], plane, frm[0], gate, data, bed)) == NULL) {
		*errval = 1;
		return;
	}
	*counts = sh->total;
	*scanlen = sh->duration;		/* msec */

	if ((image = rdimg (mh, files[0], plane, frm[0], gate, data, bed)) == NULL) {
		*errval = 1;
		return;
	}
	if (reverse != 0)
		image = flipimg (image, mh, sh);
	if ((image = padplane (image, sh, DIM, DIM)) == NULL) {
		*errval = 1;
		return;
	}
	len = DIM * DIM;
	maxf = 0.;
	maxs = 0;

/*	Version 6 images are in ECAT counts/sec
 *	Version 7 images are in some approximation to Bq/ml
 *	Both need to be multiplied by framelength (in msec) to correspond to
 *	our standard PET conversion factor.
 */

	if (mh->version == 6 || mh->version == 64 || mh->version == 65)
		scaler = (float) *scanlen;
	else if (mh->version == 7 || mh->version >= 70)
		scaler = ((float) *scanlen) * REV7SCALER;
	else
		scaler = 1.;

	for (i = 0; i < len; i++) {
		img[i] = (short) (scaler * image[i]);
		if (image[i] > maxf)
			maxf = image[i];
		if (img[i] > maxs)
			maxs = img[i];
	}
	free (image);
	free_sh (sh);
	free_mh (mh);
	free (files);
	free (frm);
}
@
