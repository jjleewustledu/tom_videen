head	1.1;
access;
symbols;
locks; strict;
comment	@c @;


1.1
date	97.09.23.15.42.49;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@C$Id: m2region.f,v 1.4 1994/05/25 20:14:56 ty7777 Exp $
C$Log: m2region.f,v $
c Revision 1.4  1994/05/25  20:14:56  ty7777
c Modified to display the information only on the current slice.
c
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  Subroutine:   M2REGION.FTN
C
C  Author:       Tom O. Videen
C  Date:         04-Jun-87
C  Written For:  SPIDERAM Super PETT Image Display Program
C
C  History:
C     Modified by Tom Yang 26-Sep-91 for xspideram.
C     Modified by Tom Yang 26-May-94 for reading reg file generated
C       from the program locate.
C
C  Intent:
C     This subroutine is used for creating regions of interest,
C     moving them, enlarging or reducing them,
C     reading or writing regions lists from or to disk files,
C     and displaying the current regions list.
C     The options list is displayed in two columns.
C     Full screen editing techniques are used.
C
C  Common Blocks from SPIDERAM:
C     **LUINFO   - logical units (also /USRIO/)   (read only)
C     **DISPLAY  - display parameters             (read only)
C     **FILES    - scan file list                 (read only)
C     **REGION   - region analysis parameters     (write)
C
C  Local Variables:
C     TITLE - title of this menu;
C     WARNLINE - line on which warnings will be written;
C     MENU - menu options;
C     MENUSET - set of characters allowed for menu options;
C     CH - input character for selecting a menu option;
C     ROWCH,COLCH - location of the field for entering CH;
C     NEXT - logical variables required by some function calls but
C        which is not used in this calling program;
C     Q,A - question and answer;
C     HOME,CLEAR - values passed to TCONTROL to home the cursor and
C        clear the terminal screen;
C     RNUM = current region number;
C     NEXTNUM = next region number (used by 'N' option);
C     ZERO = 0 passed to R2MOVE as I*2;
C
C  Uses Subroutines:
C
C  SPIDERAM.LIB - main subroutines for SPIDERAM:
C     R2ALTER  - change the size of a region;
C     R2CREATE - create a region;
C     R2FLIP   - flip a region;
C     R2GET    - get a new regions list from a disk file;
C     R2LIST   - display/alter the regions list;
C     R2MOVE   - move a region;
C     R2PURGE  - purge the regions list;
C     R2SAVE   - save regions list in a disk file;
C     R2STATS  - get statistics on a region;
C
C     P2CORLIN - display the coronal line;
C     P2ERSCOR - erase the coronal line;
C     P2ERSMID - erase the midline;
C     P2IRREG  - draw an irregular region;
C     P2MIDLIN - display the midline;
C     P2MOVCOR - move the coronal line;
C     P2MOVMID - move the midline;
C     P2NOCIRC - erase a circular region;
C     P2NOIRRG - erase an irregular region;
C     P2NORECT - erase a rectangular region;
C     P2RECT   - draw a rectangular region;
C
C  FIELDS.LIB - terminal I/O routines using fields:
C     CHFIELD  - get a character from terminal;
C     WRTFIELD - write a character string to a field;
C     ERSFIELD - erase a field;
C     INTFIELD - get an integer from a field;
C     QUERY    - write a question and get a Y or N response;
C
C  Called by:  SPIDERAM
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE M2REGION
C
      INTEGER*4    WARNLINE,ROWCH,COLCH,HOME,CLEAR,RNUM,XLAST,YLAST,
     &             NEXTNUM,L,I
      INTEGER*2    ZERO
      CHARACTER*1  CH,BELL
      CHARACTER*20 TITLE,DASH
      CHARACTER*80 Q,MENU(16),MENUSET,STR
      LOGICAL*1    A,NEXT,ERRFLAG
      character*256 rcsheader
C
      INCLUDE 'spideram.inc'
      rcsheader = "$Headser$"

      DATA HOME,CLEAR,ZERO /1,2,0/
      DATA TITLE /'Regions of Interest:'/
      DATA DASH  /'------------------- '/
      DATA MENU(1)(1:39)  /'C = Create'/
      DATA MENU(2)(1:39)  /'D = Display one region'/
      DATA MENU(3)(1:39)  /'N = Display Next region on slice'/
      DATA MENU(4)(1:39)  /'A = Display All regions on slice'/
      DATA MENU(5)(1:39)  /'H = Hold region on display'/
      DATA MENU(6)(1:39)  /'O = Flip region to Opposite Side'/
      DATA MENU(7)(1:39)  /'B = Blank (erase) a region'/
      DATA MENU(8)(1:39)  /'W = Withdraw (erase) all regions'/
      DATA MENU(9)(1:39)  /'L = List all stored regions'/
      DATA MENU(10)(1:39) /'F = File regions list on disk'/
      DATA MENU(11)(1:39) /'G = Get new list from a disk file'/
      DATA MENU(12)(1:39) /'P = Purge regions list'/
      DATA MENU(13)(1:39) /'T = Type Statistics on a region'/
      DATA MENU(14)(1:39) /'M = Exit to Main Menu'/
      DATA MENU(15)(1:39) /'                                 '/
      DATA MENU(16)(1:39) /'                                 '/
C
      DATA MENU(1)(40:80) /'S = Select Region to Alter:'/
      DATA MENU(2)(40:80) /'I = Increment for Alterations:'/
      DATA MENU(3)(40:80) /'X = X-dimension only with E or R'/
      DATA MENU(4)(40:80) /'Y = Y-dimension only with E or R'/
      DATA MENU(5)(40:80) /'Z = Both dimensions with E or R'/
      DATA MENU(6)(40:80) /'E = Expand'/
      DATA MENU(7)(40:80) /'R = Reduce'/
      DATA MENU(8)(40:80) /'1-9 = Move region'/
      DATA MENU(9)(40:80)  /'V = Display the midline'/
      DATA MENU(10)(40:80) /'U = Erase the midline'/
      DATA MENU(11)(40:80) /'< = Move midline to the left'/
      DATA MENU(12)(40:80) /'> = Move midline to the right'/
      DATA MENU(13)(40:80) /'K = Display coronal line'/
      DATA MENU(14)(40:80) /'J = Erase coronal line'/
      DATA MENU(15)(40:80) /'+ = Move coronal line up'/
      DATA MENU(16)(40:80) /'- = Move coronal line down'/
      DATA ROWCH,COLCH,WARNLINE /21,1,23/
      MENUSET ='CDNAHOBWLFGPTMSIXYZERVU<>KJ+_'//
     &         'cdnahobwlfgptmsixyzervu,.kj=-12346789'
      BELL = CHAR(7)
      RNUM = LASTREGN
      NEXTNUM = 0
      ERRFLAG = .FALSE.
C
C ===================================================================
C
C  Clear the screen and write the menu in two columns
C
8010  FORMAT (A20)
8020  FORMAT (A20)
8030  FORMAT (I2)
8080  FORMAT (A80)
C
100   CALL TCONTROL(HOME,0,0)
      CALL TCONTROL(CLEAR,0,0)
      WRITE (USEROUT,8010) TITLE
      WRITE (USEROUT,8020) DASH
      WRITE (USEROUT,*)
      DO 120 I=1,16
        WRITE (USEROUT,8080) MENU(I)
120   CONTINUE
C
C  Indicate the region number selected for alterations,
C  the increment size, and the dimensions altered by Expand/Reduce
C
      CALL WRITEINT(RNUM,3,4,68)
      CALL WRITEINT(INT(INC),3,5,71)
      STR = '*'
      IF (ALTERX.AND..NOT.ALTERY) THEN
        CALL WRTFIELD(STR,1,6,39)
      ELSE IF (ALTERY.AND..NOT.ALTERX) THEN
        CALL WRTFIELD(STR,1,7,39)
      ELSE
        ALTERX = .TRUE.
        ALTERY = .TRUE.
        CALL WRTFIELD(STR,1,8,39)
      END IF
C
C ===================================================================
C
C  Get the options selected by the user and execute it
C
200   CALL CHFIELD(CH,MENUSET,ROWCH,COLCH,0)
C
C ----------------------------------------------------
C  Regions can only be displayed on images of the same type
C    (same orientation and same PETT scanner)
C
      IF (ERRFLAG) THEN
        CALL ERSFIELD(73,WARNLINE,1)
        ERRFLAG = .FALSE.
      END IF
      IF ((ORIENT.NE.RORIENT .OR. PETTNUM.NE.RSCANNER) .AND.
     &  (RORIENT.NE.' ' .AND. RSCANNER.NE.0)) THEN
        L = IANYL('LFGPMlfgpm',CH)
        IF (L.EQ.0) THEN
          STR = 'Region list was created on a different type of '//
     &       'image (options: L,F,G,P,M)'//BELL
          CALL WRTFIELD(STR,75,WARNLINE,1)
          ERRFLAG = .TRUE.
          GO TO 200
        END IF
      END IF
C
C ----------------------------------------------------
C  #1 = Create a Region
C
      IF (CH.EQ.'C' .OR. CH.EQ.'c') THEN
        Q = 'Create Region Number'
        L = INANYR(Q,' ')
        CALL WRTFIELD(Q,L,ROWCH,COLCH)
        STR = '(enter 0 to cancel)'
        CALL WRTFIELD(STR,20,ROWCH,COLCH+L+6)
        RNUM = LASTREGN+1
        CALL INTFIELD(RNUM,0,100,2,ROWCH,COLCH+L+2,WARNLINE,NEXT)
        IF (RNUM.NE.0) THEN
          CALL R2CREATE(RNUM)
          LASTREGN = RNUM
          GO TO 100
        END IF
C
C ----------------------------------------------------
C  #2 = Display a region
C
      ELSE IF (CH.EQ.'D' .OR. CH.EQ.'d') THEN
        Q = 'Display Region Number'
        L = INANYR(Q,' ')
        CALL WRTFIELD(Q,L,ROWCH,COLCH)
        STR = '(enter 0 to cancel)'
        CALL WRTFIELD(STR,20,ROWCH,COLCH+L+6)
        CALL INTFIELD(RNUM,0,100,2,ROWCH,COLCH+L+2,WARNLINE,NEXT)
        IF (RNUM.NE.0) THEN
          IF (REGTYPE(RNUM).EQ.'R') THEN
            CALL P2RECT(RNUM,REGPLANE)
          ELSE IF (REGTYPE(RNUM).EQ.'I') THEN
            CALL P2IRREG(RNUM,REGPLANE)
          END IF
        END IF
C
C ----------------------------------------------------
C  #3 = Display the next region on the current slice
C
      ELSE IF (CH.EQ.'N' .OR. CH.EQ.'n') THEN
        IF (NEXTNUM.EQ.100) NEXTNUM=0
1030    IF (NEXTNUM.LT.100) THEN
          NEXTNUM = NEXTNUM+1
          IF ((REGTYPE(NEXTNUM).EQ.' ') .OR.
     &        (SLICE(NEXTNUM).NE.DSECTION)) THEN
            GO TO 1030
          ELSE IF (REGTYPE(NEXTNUM).EQ.'R') THEN
            CALL P2RECT(NEXTNUM,REGPLANE)
          ELSE IF (REGTYPE(NEXTNUM).EQ.'I') THEN
            CALL P2IRREG(NEXTNUM,REGPLANE)
          END IF
          RNUM = NEXTNUM
        ELSE
          STR = 'End of region list'//BELL
          CALL WRTFIELD(STR,20,WARNLINE,1)
          ERRFLAG = .TRUE.
          RNUM = LASTREGN
        END IF
C
C ----------------------------------------------------
C  #4 = Display ALL regions on the current slice
C
      ELSE IF (CH .EQ. 'A' .OR. CH .EQ. 'a') THEN
        DO 1040 I = 1, 100
          IF (SLICE (I) .EQ. DSECTION) THEN
            IF (REGTYPE (I) .EQ. 'R') THEN
              CALL P2RECT (I, REGPLANE)
            ELSE IF (REGTYPE (I) .EQ. 'I') THEN
              CALL P2IRREG (I, REGPLANE)
            END IF
            LASTREGN = RNUM
          END IF
1040    CONTINUE
        LASTREGN = RNUM
C
C ----------------------------------------------------
C  #5 = Hold a region on the display (draw border in FIXPLANE)
C
      ELSE IF (CH .EQ. 'H' .OR. CH .EQ. 'h') THEN
        Q = 'Hold Region Number'
        L = INANYR (Q, ' ')
        CALL WRTFIELD (Q, L, ROWCH, COLCH)
        STR = '(enter 0 to cancel)'
        CALL WRTFIELD (STR, 20, ROWCH, COLCH + L + 6)
        CALL INTFIELD (RNUM, 0, 100, 2, ROWCH, COLCH + L + 2, WARNLINE, NEXT)
        IF (RNUM .GT. 0) THEN
          IF (SLICE (RNUM) .EQ. DSECTION) THEN
            IF (REGTYPE (RNUM) .EQ. 'R') THEN
              CALL P2RECT (RNUM, FIXPLANE)
            ELSE IF (REGTYPE (RNUM) .EQ. 'I') THEN
              CALL P2IRREG (RNUM, FIXPLANE)
            END IF
	  ELSE
	    STR (1:8)	= 'Region '
            WRITE (STR (9:10), 8030) RNUM
            STR (11:48)	= '  is not defined on the current slice.'
            STR (49:70)	= '                     '              
            CALL WRTFIELD (STR, 70, ROWCH + 1, COLCH + 4)
            STR (1:40)	= '                                        '
            STR (41:70)	= '                              '
            CALL WRTFIELD (STR, 70, ROWCH + 2, COLCH + 4)
	  ENDIF
        END IF
C
C ----------------------------------------------------
C  #6 = Flip region to opposite side of slice
C
      ELSE IF (CH.EQ.'O' .OR. CH.EQ.'o') THEN
        Q = 'Flip Region Number'
        L = INANYR(Q,' ')
        CALL WRTFIELD(Q,L,ROWCH,COLCH)
        STR = '(enter 0 to cancel)'
        CALL WRTFIELD(STR,20,ROWCH,COLCH+L+6)
        CALL INTFIELD(RNUM,0,100,2,ROWCH,COLCH+L+2,WARNLINE,NEXT)
        IF (RNUM.NE.0) THEN
          CALL P2MIDLIN(TEMPLANE)
          CALL R2FLIP(RNUM)
        END IF
C
C ----------------------------------------------------
C  #7 = Erase one region (from REGPLANE)
C
      ELSE IF (CH .EQ. 'B' .OR. CH .EQ. 'b') THEN
        Q = 'Erase Region Number'
        L = INANYR (Q, ' ')
        CALL WRTFIELD (Q, L, ROWCH, COLCH)
        STR = '(enter 0 to cancel)'
        CALL WRTFIELD (STR, 20, ROWCH, COLCH + L + 6)
        CALL INTFIELD (RNUM,0,100,2,ROWCH,COLCH+L+2,WARNLINE,NEXT)
        IF (RNUM .NE. 0) THEN
          IF (REGTYPE (RNUM) .EQ. 'R') THEN
            CALL P2NORECT (RNUM, REGPLANE)
          ELSE IF (REGTYPE (RNUM) .EQ. 'I') THEN
            CALL P2NOIRRG (RNUM, REGPLANE)
          END IF
        END IF
C
C ----------------------------------------------------
C  #8 = Erase all regions on current slice (REGPLANE & TEMPLANE)
C
      ELSE IF (CH .EQ. 'W' .OR. CH .EQ. 'w') THEN
        Q = 'Erase all regions from current slice'
        CALL QUERY (Q, A, ROWCH, COLCH)
        IF (A) THEN
          IF (MAG .LE. 2) THEN
            XLAST = XORG + MAG * 128
            YLAST = YORG + MAG * 128
          ELSE
            XLAST = XORG + MAG * AMAX
            YLAST = YORG + MAG * AMAX
          END IF
          DO 1080 I = 1, 100
            IF (REGTYPE (I) .EQ. 'R') THEN
              CALL P2NORECT (I, REGPLANE)
            ELSE IF (REGTYPE (I) .EQ. 'I') THEN
              CALL P2NOIRRG (I, REGPLANE)
            END IF
1080      CONTINUE
        END IF
C
C ----------------------------------------------------
C  #9 = Display the regions list
C
      ELSE IF (CH.EQ.'L' .OR. CH.EQ.'l') THEN
        CALL R2LIST
        GO TO 100
C
C ----------------------------------------------------
C  #10 = Save current regions list in a disk file
C
      ELSE IF (CH.EQ.'F' .OR. CH.EQ.'f') THEN
        CALL R2SAVE
        GO TO 100
C
C ----------------------------------------------------
C  #11 = Get a new regions list from a disk file
C
      ELSE IF (CH.EQ.'G' .OR. CH.EQ.'g') THEN
        CALL R2GET(ERRFLAG)
        GO TO 100
C
C ----------------------------------------------------
C  #12  = Purge the regions list
C
      ELSE IF (CH.EQ.'P' .OR. CH.EQ.'p') THEN
        Q = 'Purge all regions from the current list'
        CALL QUERY(Q,A,ROWCH,COLCH)
        IF (A) CALL R2PURGE
C
C ----------------------------------------------------
C  #13 = Type statistics on a reagion
C
      ELSE IF (CH .EQ. 'T' .OR. CH .EQ. 't') THEN
        Q = 'Statistics on Region Number'
        L = INANYR (Q, ' ')
        CALL WRTFIELD (Q, L, ROWCH, COLCH)
        STR = '(enter 0 to cancel)'
        CALL WRTFIELD (STR, 20, ROWCH, COLCH + L + 6)
        CALL INTFIELD (RNUM, 0, 100, 2, ROWCH, COLCH + L + 2, WARNLINE, NEXT)
        IF (RNUM .GT. 0) THEN
          IF (SLICE (RNUM) .EQ. DSECTION) THEN
	    CALL R2STATS (RNUM)
	  ELSE
	    STR (1:8)	= 'Region '
            WRITE (STR (9:10), 8030) RNUM
            STR (11:48)	= '  is not defined on the current slice.'
            STR (49:70)	= '                     '              
            CALL WRTFIELD (STR, 70, ROWCH + 1, COLCH + 4)
            STR (1:40)	= '                                        '
            STR (41:70)	= '                              '
            CALL WRTFIELD (STR, 70, ROWCH + 2, COLCH + 4)
	  ENDIF
        ENDIF
C
C ----------------------------------------------------
C  #14 = Exit to Main Menu
C
      ELSE IF (CH.EQ.'M' .OR. CH.EQ.'m') THEN
        GO TO 9000
C
C ----------------------------------------------------
C  #15 = Select region to alter
C
      ELSE IF (CH.EQ.'S' .OR. CH.EQ.'s') THEN
        Q = 'Region Number to Alter'
        L = INANYR(Q,' ')
        CALL WRTFIELD(Q,L,ROWCH,COLCH)
        STR = '(enter 0 to cancel)'
        CALL WRTFIELD(STR,20,ROWCH,COLCH+L+6)
        CALL INTFIELD(RNUM,0,100,3,ROWCH,COLCH+L+2,WARNLINE,NEXT)
        IF (RNUM.NE.0) THEN
          LASTREGN = RNUM
          CALL WRITEINT(RNUM,3,4,68)
        END IF
C
C ----------------------------------------------------
C  #16 = Set the increment size for expand, reduce, and shift
C
      ELSE IF (CH.EQ.'I' .OR. CH.EQ.'i') THEN
        Q = 'Increment Size'
        L = INANYR(Q,' ')
        CALL WRTFIELD(Q,L,ROWCH,COLCH)
        I = INT(INC)
        CALL INTFIELD(I,1,100,3,ROWCH,COLCH+L+2,WARNLINE,NEXT)
        INC = INT(I)
        CALL WRITEINT(I,3,5,71)
C
C ----------------------------------------------------
C  #17 = Expand/Reduce only the Width (x-dimension)
C
      ELSE IF (CH.EQ.'X' .OR. CH.EQ.'x') THEN
        ALTERX = .TRUE.
        ALTERY = .FALSE.
        STR = '*'
        CALL WRTFIELD(STR,1,6,39)
        CALL ERSFIELD(1,7,39)
        CALL ERSFIELD(1,8,39)
C
C ----------------------------------------------------
C  #18 = Expand/Reduce only the Height (y-dimension)
C
      ELSE IF (CH.EQ.'Y' .OR. CH.EQ.'y') THEN
        ALTERX = .FALSE.
        ALTERY = .TRUE.
        CALL ERSFIELD(1,6,39)
        STR = '*'
        CALL WRTFIELD(STR,1,7,39)
        CALL ERSFIELD(1,8,39)
C
C ----------------------------------------------------
C  #19 = Expand/Reduce Width & Height
C
      ELSE IF (CH.EQ.'Z' .OR. CH.EQ.'z') THEN
        ALTERX = .TRUE.
        ALTERY = .TRUE.
        CALL ERSFIELD(1,6,39)
        CALL ERSFIELD(1,7,39)
        STR = '*'
        CALL WRTFIELD(STR,1,8,39)
C
C ----------------------------------------------------
C  #20 = Expand a region
C
      ELSE IF (CH.EQ.'E' .OR. CH.EQ.'e') THEN
        IF (RNUM.NE.0) CALL R2ALTER(RNUM,+INC,+INC)
C
C ----------------------------------------------------
C  #21 = Reduce a region
C
      ELSE IF (CH.EQ.'R' .OR. CH.EQ.'r') THEN
        IF (RNUM.NE.0) CALL R2ALTER(RNUM,-INC,-INC)
C
C ----------------------------------------------------
C  #22 = Move a region
C
      ELSE IF (CH.EQ.'1') THEN
        CALL R2MOVE(RNUM,-INC,+INC)
      ELSE IF (CH.EQ.'2') THEN
        CALL R2MOVE(RNUM,ZERO,+INC)
      ELSE IF (CH.EQ.'3') THEN
        CALL R2MOVE(RNUM,+INC,+INC)
      ELSE IF (CH.EQ.'4') THEN
        CALL R2MOVE(RNUM,-INC,ZERO)
      ELSE IF (CH.EQ.'6') THEN
        CALL R2MOVE(RNUM,+INC,ZERO)
      ELSE IF (CH.EQ.'7') THEN
        CALL R2MOVE(RNUM,-INC,-INC)
      ELSE IF (CH.EQ.'8') THEN
        CALL R2MOVE(RNUM,ZERO,-INC)
      ELSE IF (CH.EQ.'9') THEN
        CALL R2MOVE(RNUM,+INC,-INC)
C
C ----------------------------------------------------
C  #23 = Display the midline
C
      ELSE IF (CH.EQ.'V' .OR. CH.EQ.'v') THEN
        CALL P2MIDLIN(TEMPLANE)
C
C ----------------------------------------------------
C  #24 = Erase the midline
C
      ELSE IF (CH.EQ.'U' .OR. CH.EQ.'u') THEN
        CALL P2ERSMID(TEMPLANE)
C
C ----------------------------------------------------
C  #25 = Move the midline to the left
C
      ELSE IF (CH.EQ.'<' .OR. CH.EQ.',') THEN
        CALL P2MOVMID(-INC,TEMPLANE)
C
C ----------------------------------------------------
C  #26 = Move the midline to the right
C
      ELSE IF (CH.EQ.'>' .OR. CH.EQ.'.') THEN
        CALL P2MOVMID(+INC,TEMPLANE)
C
C ----------------------------------------------------
C  #27 = Display a coronal line
C
      ELSE IF (CH.EQ.'K' .OR. CH.EQ.'k') THEN
        IF (YCORLINE.GT.YHIGH) YCORLINE=YHIGH
        CALL P2CORLIN(TEMPLANE)
C
C ----------------------------------------------------
C  #28 = Erase coronal line
C
      ELSE IF (CH.EQ.'J' .OR. CH.EQ.'j') THEN
        CALL P2ERSCOR(TEMPLANE)
C
C ----------------------------------------------------
C  #29 = Move coronal line up
C
      ELSE IF (CH.EQ.'+' .OR. CH.EQ.'=') THEN
        CALL P2MOVCOR(-INC,TEMPLANE)
C
C ----------------------------------------------------
C  #30 = Move coronal line down
C
      ELSE IF (CH.EQ.'-' .OR. CH.EQ.'_') THEN
        CALL P2MOVCOR(+INC,TEMPLANE)
      END IF
C
      CALL ERSFIELD(80,ROWCH,COLCH)
      GO TO 200
C ----------------------------------------------------
C
9000  RETURN
      END
@
