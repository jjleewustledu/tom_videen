head	1.1;
access;
symbols;
locks; strict;
comment	@c @;


1.1
date	97.09.23.15.42.49;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@C$Id: r2get.f,v 1.8 1994/05/26 16:06:08 ty7777 Exp $
C$Log: r2get.f,v $
c Revision 1.8  1994/05/26  16:06:08  ty7777
c Added processing for reading reg file for coronal and sagittal display.
c
c Revision 1.7  1994/05/25  18:16:58  ty7777
c Modified to read reg files generated by the program locate.
c
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  Subroutine:   R2GET.FTN
C
C  Author:       Tom O. Videen
C  Date:         04-Jun-87
C  Written For:  SPIDERAM Super PET Image Display Program
C
C  History:
C     Modified by TOV 15-Jul-87 to change record length of .REG
C        file from 256 to 80;
C     Modified by TOV 28-Dec-87 to read write-protected files;
C     Modified by TOV 20-Jul-90 to read "128x128 2 mm" as RSCANNER=1;
C        (for Scanditronix PC2048, CTI ECAT-953B, and 128x128 PETT VI
C        images)
C     Modified by Tom Yang on Sep. 23, 1991 to read coordinates of
C        irregular regions from file when porting to Sun workstation.
C     Modified by Tom Yang 29-Dec-92 to read ECAT 953b images.
C     Modified by Tom Yang 18-Nov-93 to read both .REG and .reg files.
C     Modified by Tom Yang 25-May-94 to read reg files generated by locate.
C
C  Intent:
C     This procedure reads a regions file from disk.
C     All currently defined regions are deleted when this
C     subroutine is called.
C
C     See REGFORM.TXT for a description of the file format.
C
C  Common Blocks from SPIDERAM.INC:
C     **LUINFO   - logical units (also /USRIO/)   (read only)
C     **REGION   - region analysis parameters     (write)
C     **REGCOMP  - region analysis parameters     (write)
C
C  Variable Passed back:
C     ERROR: false--> successfully read a region file;
C            true --> did not read a region file;
C
C  Variables:
C     INDEX = index used in reading the array BOUNDARY;
C     PB,IOREAD = used in SYSIO;
C     VAR = REAL variables read from file;
C     FNAME = file name
C     RS,RX,RY = used to read SLICE, XLOC, YLOC
C     A,B = used to read AVAL, BVAL
C
C  Uses:
C
C  SPIDERAM.LIB
C     R2PURGE
C
C  TERMINAL.LIB
C     GTSTRING
C
C  FORTRAN library
C     SYSIO
C
C  Called by:
C     M2REGION
C     M2ANALYZ
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE R2GET (ERROR)
C
      PARAMETER         (NFMAX = 16)
C
      INTEGER*4		IOREAD, RTYPE, NBYTES, FIRST, A, B, I, J, K, L
      INTEGER*4         LSUB (NFMAX)
      INTEGER*4         NF
      CHARACTER*1	CH, BELL
      CHARACTER*10	RNAME, ONAME
      CHARACTER*12	ANAME
      CHARACTER*14	SCNRNAME
      CHARACTER*20	FNAME
      CHARACTER*20	UPFNAME
      CHARACTER*256     RCSHEADER
      CHARACTER*256     STRING 
      CHARACTER*80      SUBSTR (NFMAX)
      CHARACTER*80	Q, STR, CANCEL
      LOGICAL*1		ERROR
      LOGICAL*1		REGLOCATE
      REAL		RAWX, RAWY, RAWZ
      REAL		RS, RX, RY
C
      INCLUDE 'spideram.inc'
C
      RCSHEADER	= "$Header: /home/npggw/tom/src/spideram/RCS/r2get.f,v 1.8 1994/05/26 16:06:08 ty7777 Exp $"

      DATA IOREAD /88/
      BELL	= CHAR (7)
      CANCEL	= 'CANCEL'
      ERROR	= .TRUE.
C
C  Get the file name where the old parameters are stored
C
      Q		= 'Region File Name (enter "CANCEL" to cancel)'
      STR	= REGFILE
100   CALL GTSTRING (Q, STR)
      IF (STR .EQ. CANCEL) RETURN
C
C  File must have .REG extension
C
      L	= IANYL (STR, '.')
      IF (L .NE. 0) THEN
	FNAME	 = STR (1:L)//'reg'
	UPFNAME  = STR (1:L)//'REG'
      ELSE
	L       = INANYR (STR, ' ')
	FNAME   = STR (1:L)//'.reg'
	UPFNAME = STR (1:L)//'.REG'
      END IF
C
      OPEN (DISK, FILE = FNAME, STATUS = 'OLD', ERR = 111)
      GO TO 150
111   OPEN (DISK, FILE = UPFNAME, STATUS = 'OLD', ERR = 110)
      GO TO 150
110   L	= INANYR (FNAME, ' ')
      WRITE (USEROUT, *) '*** ERROR: cannot open file ', 
     2        FNAME (1:L),' ***'
	GO TO 100
C
C  Zero the regions list
C
150   CALL R2PURGE
      DO 300 I = 1, 2000
	BOUNDARY (1, I)	= 0
	BOUNDARY (2, I)	= 0
300   CONTINUE
C
C  Read file type information, atlas and header
C
8000  FORMAT (I3, 5X, A10, 3X, A14, 3X, I2)
8100  FORMAT (A80)
8200  FORMAT (A12)
C
      REGLOCATE	= .FALSE.
   21 READ (DISK, "(a)", END = 22) STRING
      CALL PARSE (STRING, ' ', NFMAX, SUBSTR, LSUB, NF)
      IF (NF .LT. 1) GOTO 21
      IF (SUBSTR (1) .EQ. 'locate.c,v') THEN 
        REGLOCATE	= .TRUE.
      END IF
      GOTO 21
C
   22 REWIND (DISK)
C
      IF (REGLOCATE .EQ. .TRUE.) THEN
        RORIENT		= ORIENT
	RSCANNER	= PETTNUM
        I		= 0
   31   READ (DISK, "(a)", END = 32) STRING
        CALL PARSE (STRING, ' ', NFMAX, SUBSTR, LSUB, NF)
        IF (NF .NE. 4) GOTO 31
C
        DECODE (LSUB (2), "(f)", SUBSTR (2)) RAWX
        DECODE (LSUB (3), "(f)", SUBSTR (3)) RAWY
        DECODE (LSUB (4), "(f)", SUBSTR (4)) RAWZ

        A	= 5
        B	= 5	
        IF (RORIENT .EQ. 'T') THEN
	  RX	= RAWX
	  RY	= RAWY
	  RS	= RAWZ
	ELSE IF (RORIENT .EQ. 'C') THEN
	  RX	= RAWX
	  RY	= RAWZ
	  RS	= RAWY
	ELSE IF (RORIENT .EQ. 'S') THEN
	  RX	= RAWY
	  RY	= RAWZ
	  RS	= RAWX
        ELSE
	  WRITE (USEROUT, *)'*** ILLEGAL ORIENTATION NAME IN FILE ***', BELL
	  CLOSE (DISK)
	  GO TO 100
	ENDIF

	I		= I + 1
	REGNAME (I)	= SUBSTR (1)
	REGTYPE (I)	= 'R'
	SLICE (I)	= NINT (RS)
	AVAL (I)	= A
        BVAL (I)	= B
        IF (MOD (A, 2) .EQ. 0) THEN
          XLOC (I)	= FLOAT (INT (RX)) + 0.5
        ELSE
          XLOC (I)	= FLOAT (NINT (RX))
        END IF
        IF (MOD (B, 2) .EQ. 0) THEN
          YLOC (I)	= FLOAT (INT (RY)) + 0.5
        ELSE
          YLOC (I)	= FLOAT (NINT (RY))
        END IF
	GO TO 31
   32   NREGS	= I
      ELSE
        READ (DISK, 8000) RTYPE, ONAME, SCNRNAME, RSLICES
        WRITE (USEROUT, 8000) RTYPE, ONAME, SCNRNAME, RSLICES
        IF (ONAME .EQ. 'TRANSVERSE') THEN
	  RORIENT	= 'T'
        ELSE IF (ONAME .EQ. 'CORONAL') THEN
	  RORIENT	= 'C'
        ELSE IF (ONAME .EQ. 'SAGITTAL') THEN
	  RORIENT	= 'S'
        ELSE
	  WRITE (USEROUT, *)'*** ILLEGAL ORIENTATION NAME IN FILE ***', BELL
	  CLOSE (DISK)
	  GO TO 100
        END IF
        IF (SCNRNAME .EQ. 'PETT 6') THEN
	  RSCANNER	= 6
        ELSE IF (SCNRNAME .EQ. 'SUPER PETT I') THEN
	  RSCANNER	= 7
        ELSE IF (SCNRNAME .EQ. 'SUPER PETT II') THEN
	  RSCANNER	= 8
        ELSE IF (SCNRNAME .EQ. '128x128 2 mm ') THEN
	  RSCANNER	= 1
        ELSE IF (SCNRNAME .EQ. 'ECAT 953B') THEN
	  RSCANNER	= 10
        ELSE
	  WRITE (USEROUT, *) '*** ILLEGAL SCANNER NAME IN FILE ***',BELL
	  CLOSE (DISK)
	  GO TO 100
        END IF
C
C       Read atlas name and header
C
        READ (DISK, 8200) ANAME
        WRITE (USEROUT, *) ANAME
        L = IANYL (ANAME (1:8), '.') - 1
        IF (L .LT. 1) L = 8
        REGATLAS	= ANAME (1:L)
        READ (DISK, 8100) STR
        WRITE (USEROUT, *) STR
C
C       Read region information
C
C       Requirements for region parameters:
C
C       Rectangles:  AVAL,BVAL must have integral values;
C                    AVAL odd, then XLOC has integral value;
C                    AVAL even, then XLOC has half-integral value;
C                    (similar for BVAL and YLOC)
C
8300    FORMAT (I3, 3X, A10, 5X, A1, F9.2, F8.2, F8.2, 3X, I4, 3X, I4)
400     READ (DISK, 8300) I, RNAME, CH, RS, RX, RY, A, B
        IF (I .GT. 0) THEN
	  REGNAME (I)	= RNAME
	  REGTYPE (I)	= CH
	  SLICE (I)	= NINT (RS)
	  AVAL (I)	= A
	  IF (CH .EQ. 'R') THEN
            BVAL(I)	= B
            IF (MOD (A, 2) .EQ. 0) THEN
              XLOC (I)	= FLOAT (INT (RX)) + 0.5
            ELSE
              XLOC(I)	= FLOAT (NINT (RX))
            END IF
            IF (MOD (B, 2) .EQ. 0) THEN
              YLOC (I)	= FLOAT (INT (RY)) + 0.5
            ELSE
              YLOC (I)	= FLOAT (NINT (RY))
            END IF
          ELSE IF (REGTYPE (I) .EQ. 'I') THEN
            XLOC (I)	= FLOAT (NINT (RX))
            YLOC (I)	= FLOAT (NINT (RY))
            FIRST	= TOP + 1
            BVAL (I)	= FIRST
            TOP		= TOP + A
            NBYTES	= A * 4
            READ (DISK, 8400) ((BOUNDARY (J, K), J = 1, 2), K = FIRST, TOP)
8400        FORMAT (40Z2.2)
	  END IF
          GO TO 400
        ELSE
	  NREGS		= B
	  LASTREGN	= NREGS
        END IF
      END IF
      CLOSE (DISK)
C
C     Get x, y values which enclose the region
C
      DO 700 I = 1, NREGS
        IF (REGTYPE (I) .EQ. 'R') THEN
          XMIN (I)	= NINT (XLOC (I) - FLOAT (AVAL(I)) / 2. + 0.5)
          XMAX (I)	= XMIN (I) + AVAL (I) - 1
          YMIN (I)	= NINT (YLOC (I) - FLOAT (BVAL (I)) / 2. + 0.5)
          YMAX (I)	= YMIN (I) + BVAL (I) - 1
        ELSE IF (REGTYPE (I) .EQ. 'I') THEN
          K		= BVAL (I)
          XMIN (I)	= BOUNDARY (1, K)
          XMAX (I)	= BOUNDARY (1, K)
          YMIN (I)	= BOUNDARY (2, K)
          YMAX (I)	= BOUNDARY (2, K)
          DO 600 J = K, K + AVAL (I) - 1
            IF (BOUNDARY (1, J) .LT. XMIN (I)) THEN
              XMIN (I)	= BOUNDARY (1, J)
            ELSE IF (BOUNDARY (1, J) .GT. XMAX (I)) THEN
              XMAX (I)	= BOUNDARY (1, J)
            END IF
            IF (BOUNDARY (2, J) .LT. YMIN (I)) THEN
              YMIN (I)	= BOUNDARY (2, J)
            ELSE IF (BOUNDARY (2, J) .GT. YMAX (I)) THEN
              YMAX (I)	= BOUNDARY (2, J)
            END IF
600       CONTINUE
	END IF
700   CONTINUE
C
      ERROR	= .FALSE.
      REGFILE	= FNAME
      WRITE (USEROUT, *) 'Regions read from ',REGFILE
C
      RETURN
      END
@
