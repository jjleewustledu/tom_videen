head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	99.02.15.14.32.51;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/******************************************************
 *  Functions: get_header and get_counts
 *  Author:  	Karen Gauvain
 *  Date:    	November 1, 1991
 *
 *    The function get_header reads the header info
 *    from a file written by an awk command that parses
 *    the header file of a SuperPett 3000 image.
 *
 *    Returns a pointer to the header.
 ********************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "petthdr.h"
  
float total_counts[7];

void get_header_ (hdr)

petthdr *hdr;
{
  FILE *fp;
  char date_stamp[40];
  int i;
  
  fp = fopen("header.temp","r");
  if (fp == NULL) return;
  
/*  fscanf(fp, "%s %s %hd %s %hd",
		hdr->run_name,date_stamp,&hdr->scan_time,hdr->filter,&hdr->number_of_slices);
*/

  fscanf(fp, "%s %s %s %hd", hdr->run_name,date_stamp,hdr->filter,&hdr->number_of_slices);

/* read the total counts for each slice; 
		stores in a global variable to be referened by get_counts
 */
  for (i=0; i<7; i++)
    fscanf(fp,"%f",&total_counts[i]);

  /* all of the following lines parse the date;
     the format of the date in SuperPett 3000 is
     e.g. 26-Jun-91
     The format needed for PettIV images is 062691
  */
  hdr->date[2] = date_stamp[0];
  hdr->date[3] = date_stamp[1];
  hdr->date[4] = date_stamp[7];
  hdr->date[5] = date_stamp[8];

  hdr->date[0] = '0';

  switch (date_stamp[3]){
  case 'J':
  case 'j':
    switch (date_stamp[4]){
    case 'a':
    case 'A':
      hdr->date[1] = '1';
      break;
    case 'u':
    case 'U':
      switch (date_stamp[5]){
      case 'n':
      case 'N':
	hdr->date[1] = '6';
	break;
      case 'l':
      case 'L':
	hdr->date[1] = '7';
	break;
      default:
	break;
      }
      break;
    default:
      break;
    }
    break;
  case 'F':
  case 'f':
    hdr->date[1] = '2';
    break;
  case 'M':
  case 'm':
    switch (date_stamp[5]){
    case 'r':
    case 'R':
      hdr->date[1] = '3';
      break;
    case 'y':
    case 'Y':
      hdr->date[1] = '5';
      break;
    default:
      break;
    }
    break;
  case 'A':
  case 'a':
    switch (date_stamp[4]){
    case 'p':
    case 'P':
      hdr->date[1] = '4';
      break;
    case 'u':
    case 'U':
      hdr->date[1] = '8';
      break;
    default:
      break;
    }
    break;
  case 'S':
  case 's':
    hdr->date[1] = '9';
    break;
  case 'O':
  case 'o':
    hdr->date[0] = '1';
    hdr->date[1] = '0';
    break;
  case 'N':
  case 'n':
    hdr->date[0] = '1';
    hdr->date[1] = '1';
    break;
  case 'D':
  case 'd':
    hdr->date[0] = '1';
    hdr->date[1] = '2';
    break;
  default:
    break;
  }
}

/* this function returns the a pointer to the counts for each individual slice */

void get_counts_ (i,counts)
  int  *i;
  int  *counts;
{
  *counts = (int)total_counts[*i];
}  
@
