head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2000.02.14.14.38.33;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Log$ */
/*	===============================================================================
 *	Module:			imgpath.c
 *	Date:			Jan-96
 *	Author:			Tom Videen
 *	Description:	Determine archive path parameters of a PET image file.
 *	===============================================================================
 */
static char     rcsid[] = "$Id$";

#include <stdio.h>
#include <stdlib.h>
#include <libimage.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	MainHeader     *mh;
	SubHeader      *sh;
	char          **files;
	int            *frm;
	int             plane = 1, gate = 1, data = 0, bed = 0;

	if (argc != 2) {
		printf ("Usage: imgpath filename\n");
		exit (ERROR);
	}
	files = (char **) malloc (argc * sizeof (char *));
	frm = (int *) malloc (argc * sizeof (int));
	files[0] = argv[1];
	frm[0] = 1;

	if ((mh = getmhdr (files[0])) == NULL) {
		fprintf (stderr, "Could not open %s\n", files[0]);
		exit (ERROR);
	}
	if (existimgfrm (mh, files[0], plane, frm[0], gate, data, bed) == ERROR) {
		if (frm[0] == 1) {
			frm[0] = 2;
			if (existimgfrm (mh, files[0], plane, frm[0], gate, data, bed) == ERROR) {
				fprintf (stderr, "ERROR [imgpath]: cannot find %s frame 1 or 2\n", files[0]);
				exit (ERROR);
			}
		} else {
			fprintf (stderr, "ERROR [imgpath]: cannot find %s frame %d\n",
				 files[0], frm[0]);
			exit (ERROR);
		}
	}
	if ((sh = getsbhdr (mh, files[0], plane, frm[0], gate, data, bed)) == NULL) {
		fprintf (stderr, "Could not read file subheader in %s\n", files[0]);
		exit (ERROR);
	}
	printf ("%s_%s_%s_%s\n", mh->scanner, mh->acquisition, mh->reconstruction, mh->filtername);
	free_sh (sh);
	free_mh (mh);
}
@
