head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	93.12.28.16.36.59;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.1
log
@Initial revision
@
text
@/*$Id$*/
/*$Log$*/

static char rcsid []= "$Id$";

/*____________________________________________________________________________
File Name:	proj2d.c
 
Function:	void proj2d (int fd, int *x2d, int *y2d, int z, int radius, int *npixels)
 
Arguments:	fd:		region file descriptor. It need to be opened
 				before calling by using the UNIX system interface 
				call open ().
 		x2d:		an integer array. Indices to x position of a 3d 
 				sphere, returned.
 		y2d:		an integer array. Indices to y position of a 3d 
 				sphere, returned.
 		z:		an integer. Slice-location relative to region center.
 		radius:		overall radius of a 3D sphere.
 		npixels:	number of pixels in the 2d region, returned.
 
Return Value:	void.
 
Description:	Generate a table of coordinates to pixel locations which define
		one 2D projection of a 3D sphere along the z axis. The data from
 		a predefined table is read to save on line computation time. The
		maximum radius is 7 for the present time.
 
Called by:	T1SPHERI () in t1spheri.f.
 
Calling:	
 
Author:		Tom Yang. 
 
History:	Created by Tom Yang on 27/12/1993.
____________________________________________________________________________*/

#include <petutil/petutil.h>
#include <unistd.h>

void proj2d (fd, x2d, y2d, z, radius, npixels)
	int	fd;
	int	*x2d;
	int	*y2d;
	int	z;
	int	radius;
	int	*npixels;
{
	FILE	*rgnfp;

	int	i;
	int	location_num_read;
	int	radius_read;
	int	x;
	int	y;
	int	rz;
		
	rgnfp	= fdopen (fd, "r");
	fseek (rgnfp, 0L, SEEK_SET);

	/*
	 * Move the file pointer to the correct place.
	 */
	while (fscanf (rgnfp, "%d %d", &radius_read, &location_num_read) != EOF &&
		radius_read != radius)
	{
		for (i = 0; i < location_num_read; i++)	
			fscanf (rgnfp, "%d %d %d", &x, &y, &rz);
	}

	/*
	 * Fill in the arrays.
	 */
	*npixels	= 0;
	for (i = 0; i < location_num_read; i++)	
	{
		fscanf (rgnfp, "%d %d %d", &x, &y, &rz);
		if (rz == z)
		{
			x2d [*npixels]	= x;
			y2d [*npixels]	= y;
			(*npixels)++;
		}
	}
}
@
