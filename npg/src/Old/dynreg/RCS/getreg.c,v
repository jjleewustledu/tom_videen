head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	93.10.26.18.56.40;	author tom;	state Exp;
branches;
next	;


desc
@Initial version
@


1.1
log
@Initial revision
@
text
@/* $log$
 */
/*	========================================================================
 *	Module:				getreg.c
 *	Date:					25-Oct-93
 *	Author:				Tom Videen
 *	Description:	Read a region file from spideram
 *	========================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <petutil/petutil.h>

#define MAXSLICES 49
#define MAX_REGIONS 100

static char rcsid []= "$Id$"; 

/*	-----------------------
 *	Function getreg
 *	-----------------------
 */
int getreg (filename, numregs, regname, slice, xctr, yctr, xdim, ydim)

	char	*filename;
	int		*numregs;
	char	regname[MAX_REGIONS][11];
	float	slice[MAX_REGIONS];
	float	xctr[MAX_REGIONS];
	float	yctr[MAX_REGIONS];
	int		xdim[MAX_REGIONS];
	int		ydim[MAX_REGIONS];

{
	FILE	*fp;
	char	line [MAXLINE];
	char	regtype[5];
	int		i;
	int		regnum;

	fp	= fopen (filename, "r");
	if (fp == NULL) {
		fprintf (stderr, "Error in opening reg file %s\n", filename);
		return FAIL;
	}

	fgets (line, MAXLINE, fp);
	fgets (line, MAXLINE, fp);
	fgets (line, MAXLINE, fp);

	for (i = 0; i < MAX_REGIONS; i++) {
		fgets (line, MAXLINE, fp);
		sscanf (line, "%d %s %s %f %f %f %d %d", &regnum, regname[i], 
			regtype, &slice[i], &xctr[i], &yctr[i], &xdim[i], &ydim[i]);
		if ((regtype[0] != 'R') && (regnum != 0)) {
			fprintf (stderr, "Only rectangular ROIs allowed\n");
			return FAIL;
		}
		if (regnum == 0) {
			*numregs = i;
			return;
		}
		fprintf (stdout,"Region %d  %s\n", regnum, regname[i]);
	}
	*numregs = MAX_REGIONS;
	return;
}
@
