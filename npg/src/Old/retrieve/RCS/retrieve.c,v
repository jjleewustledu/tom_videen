head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	94.05.11.16.39.54;	author tom;	state Exp;
branches;
next	;


desc
@initial version
@


1.1
log
@Initial revision
@
text
@/* $Id$ */
/* $Log$ */
/*  ===============================================================================
 *  Module:		retrieve.c
 *  Date: 		11-May-94
 *  Author:		Tom Videen
 *  Description:	Retrieve a list of files from optical disk.
 *  History:
 * 	===============================================================================
 */

#include <string.h>
#include <petutil/imglist.h>		/* IMAGE_LIST_DATA, PARAMETER_DATA, INFO_TYPE */

static char rcsid [] = "$Header$";

main (argc, argv)
	int             argc;
	char           *argv[];
{
	BOOLEAN         demigrate;
	IMAGE_LIST_DATA *image_list;
	PARAMETER_DATA  parameter_data;
	char            complete_image_files[6][MAXPATH];
	char           *image_list_file;
	char           *parameter_list_file;
	char            short_image_files[6][MAXLINE];
	char            short_sxrfile[MAXLINE];
	int             image_mode;
	int             num_image_files;
	int             num_image_list;
	int             i, j, k;
	struct INFO_TYPE finfo;

	demigrate = TRUE;
/*
 * Get command line arguments.
 */
	parameter_list_file = argv[1];
	image_list_file = argv[2];

/*
 * Read parameter list
 */
	if (readparm (parameter_list_file, &parameter_data) == FAIL) {
		fprintf (stderr, "Error reading parameter list\n");
		exit (FAIL);
	}

/*
 * Read image list
 */
	image_list = (IMAGE_LIST_DATA *) malloc (sizeof (IMAGE_LIST_DATA) * MAX_IMAGE_LIST_SIZE);

	if (readimglist (image_list_file, image_list, &num_image_list) == FAIL) {
		fprintf (stderr, "Error: from readimglist ().\n");
		free (image_list);
		exit (FAIL);
	}

/*
 * Fill finfo structure using the parameter_data for searching in archive.
 */
	get_finfo (parameter_data, &finfo);

/*
 * Construct filenames from list
 */
	image_mode = parameter_data.imglist_mode;
	for (i = 0; i < num_image_list; i++) {
		if (build_shortnames (parameter_data, image_list[i], image_mode,
		    RECFILTER_MODE, &num_image_files, short_image_files, short_sxrfile) == FAIL) {
			fprintf (stderr, "Error constructing filenames from: %s %s %f %s %f %s\n",
				 image_list[i].subject_id,
				 image_list[i].scanset1_id, image_list[i].mean1,
				 image_list[i].scanset2_id, image_list[i].mean2,
				 image_list[i].sxrid);
		}

/*
 * Retrieve the files from the archive.
 */
		for (j = 0; j < num_image_files; j++)
			strcpy (complete_image_files[j], "");

		if (checkimg (parameter_data, image_list[i], image_mode, demigrate, num_image_files,
				short_image_files, complete_image_files) == FAIL) {
			fprintf (stderr,"Could not retrieve %s\n", image_list[i].subject_id);
		} else {
			printf ("Retrieved:\n");
			for (k = 0; k < 6; k++)	{
				if (strlen(complete_image_files[k]) > 1)
					printf ("	%s\n", complete_image_files[k]);
			}
		}
	}
	free (image_list);
}
@
