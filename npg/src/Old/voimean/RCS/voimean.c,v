head	1.24;
access;
symbols;
locks
	tom:1.24; strict;
comment	@ * @;


1.24
date	95.04.17.17.39.23;	author ty7777;	state Exp;
branches;
next	1.23;

1.23
date	95.01.10.22.25.27;	author ty7777;	state Exp;
branches;
next	1.22;

1.22
date	95.01.10.22.23.56;	author ty7777;	state Exp;
branches;
next	1.21;

1.21
date	94.10.06.20.44.53;	author ty7777;	state Exp;
branches;
next	1.20;

1.20
date	94.06.08.18.03.42;	author ty7777;	state Exp;
branches;
next	1.19;

1.19
date	94.05.19.19.13.30;	author ty7777;	state Exp;
branches;
next	1.18;

1.18
date	94.04.29.16.39.18;	author ty7777;	state Exp;
branches;
next	1.17;

1.17
date	94.04.23.18.32.57;	author ty7777;	state Exp;
branches;
next	1.16;

1.16
date	94.04.12.18.01.05;	author ty7777;	state Exp;
branches;
next	1.15;

1.15
date	94.04.12.15.51.46;	author ty7777;	state Exp;
branches;
next	1.14;

1.14
date	94.04.07.16.06.28;	author ty7777;	state Exp;
branches;
next	1.13;

1.13
date	94.04.05.19.15.48;	author ty7777;	state Exp;
branches;
next	1.12;

1.12
date	94.04.05.17.26.06;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	94.04.04.16.57.11;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	94.04.01.20.36.40;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	94.03.29.21.39.55;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	94.03.24.17.39.02;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	94.03.17.21.06.41;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	94.03.17.16.48.11;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	94.03.16.22.19.37;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	94.03.15.15.33.17;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	94.03.11.21.07.05;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	94.03.09.22.20.56;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	94.03.01.22.24.26;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in.
@


1.24
log
@Standard deviations.
@
text
@/*$Id: voimean.c,v 1.23 1995/01/10 22:25:27 ty7777 Exp ty7777 $*/
/*$Log: voimean.c,v $
 * Revision 1.23  1995/01/10  22:25:27  ty7777
 * Edited the error messages.
 *
 * Revision 1.22  1995/01/10  22:23:56  ty7777
 * Edited the error message.
 *
 * Revision 1.21  1994/10/06  20:44:53  ty7777
 * Only one point if all dimensions for a cube or sphere are 0.
 *
 * Revision 1.20  1994/06/08  18:03:42  ty7777
 * Update to introduce the frame_start_time parameter.
 *
 * Revision 1.19  1994/05/19  19:13:30  ty7777
 * Use the right hand coordinate system when reading an atlas file directly.
 *
 * Revision 1.18  1994/04/29  16:39:18  ty7777
 * Added processing for altas regions.
 *
 * Revision 1.17  1994/04/23  18:32:57  ty7777
 * Added processing for difference images.
 *
 * Revision 1.16  1994/04/12  18:01:05  ty7777
 * Getting filtered images.
 *
 * Revision 1.15  1994/04/12  15:51:46  ty7777
 * Changed the error message for filtered images.
 *
 * Revision 1.14  1994/04/07  16:06:28  ty7777
 * Use new reg file construction.
 *
 * Revision 1.13  1994/04/05  19:15:48  ty7777
 * Added normalization factor.
 *
 * Revision 1.12  1994/04/05  17:26:06  ty7777
 * command line regfile works.
 *
 * Revision 1.11  1994/04/04  16:57:11  ty7777
 * Release version.
 *
 * Revision 1.10  1994/04/01  20:36:40  ty7777
 * Tissue activity works now.
 *
 * Revision 1.9  1994/03/29  21:39:55  ty7777
 * Added processing for single file oxygen processing.
 *
 * Revision 1.8  1994/03/24  17:39:02  ty7777
 * Linked with cbf, cbv, tissue activity, oef, and cmro2 processing.
 *
 * Revision 1.7  1994/03/17  21:06:41  ty7777
 * mask works.
 *
 * Revision 1.6  1994/03/17  16:48:11  ty7777
 * Added mask image processing.
 *
 * Revision 1.5  1994/03/16  22:19:37  ty7777
 * Multiple framed images can now be processed.
 *
 * Revision 1.4  1994/03/15  15:33:17  ty7777
 * Multiple frames working.
 *
 * Revision 1.3  1994/03/11  21:07:05  ty7777
 * Use the filtered image if it is necessary.
 *
 * Revision 1.2  1994/03/09  22:20:56  ty7777
 * Wroking version, first release.
 *
 * Revision 1.1  1994/03/01  22:24:26  ty7777
 * Initial revision
 **/

/*_________________________________________________________________
  Description:	This program finds the mean value of a list of vois
		defined in the reg files.

  History:	Created by Tom Yang on 02/21/94. 
_________________________________________________________________*/

#include <petutil/imglist.h>
#include <petutil/matrix.h>
#include <stdlib.h>
#include "voimean.h"

static char rcsid [] = "$Header$";

main (argc, argv)
	int	argc;
	char	**argv;
{
	BOOLEAN			atlas_space;		/* TRUE: reg coordinates is atlas space */
	BOOLEAN			bool_value;
	BOOLEAN			command_line_reg_exist;
	BOOLEAN			demigrate;
	BOOLEAN			frame_start_ms;		/* TRUE: in msec; FALSE: in sec */
	BOOLEAN			mask_exist;
	BOOLEAN			oxygen_processing;
	FLOAT_POINT3D		voxel_size;
	IMAGE_LIST_DATA		*image_list;
	Image_subheader		**subheader_list;
	Main_header		*main_header;
	MatrixFile		*fptr;
	PARAMETER_DATA		parameter_data;
	RGTDATA			*rgtlist;
	VOIDATA			*voilist;
	char			complete_filtered_imgfiles [3] [MAXPATH];
	char			complete_filtered_mskimg [MAXPATH];
	char			complete_max_file [MAXPATH];
	char			complete_regfile [MAXPATH];
	char			date [MAXLINE];
	char			*extension;
	char			id [MAXNAME];
	char			*image_list_file;
	char			*parameter_list_file;
	char			program [MAXNAME];
	char			*regspace;
	char			*rgtfile;
	char			*sdfile;
	char			subject_id [MAXNAME];
	char			*short_atlfile;
	char			short_filtered_imgfiles [3] [MAXLINE];
	char			short_filtered_mskimg [MAXLINE];
	char			short_image_files [6][MAXLINE];
	char			short_regfile [MAXLINE];
	char			short_sxrfile [MAXLINE];
	char			*uid;
	char			version [MAXNAME];
	float			*real_array;
	float			*flow3d;
	float			*image3d;
	float			mask_pixel_height;
	float			mask_pixel_width;
	float			mask_plane_separation;
	float			normalization_factor;
	float			pixel_height;
	float			pixel_width;
	float			plane_separation;
	float			*volume3d;
	int			actual_pixels_in_voi;
	int			filter_mode;
	int			first_slice;
	int			i, j, k, l;
	int			image_mode;
	int			last_slice;
	int			nvoi_max;
	int			num_image_files;
	int			num_image_list;
	int			nvoi;
	int			pixels_in_voi;
	int			scanner;
	long			dimension;
	long			total_pixel;
	short			height;
	short			*mask3d;
	short			mask3d_mask_not_exist;
	short			mask_height;
	short			mask_num_slices;
	short			mask_width;
	short			num_slices;
	short			width;
	struct INFO_TYPE	finfo;
	struct Matval		matval;

	/*
	 * Get command line arguments.
	 */
	parameter_list_file	= argv [1];
	image_list_file		= argv [2];
	rgtfile			= argv [3];
	sdfile			= argv [4];
	frame_start_ms		= atoi (argv [5]);
	if (argc > 6)
		command_line_reg_exist	= atoi (argv [6]);
	else
		command_line_reg_exist	= FALSE;

	if (command_line_reg_exist)
	{
		strcpy (complete_regfile, argv [7]);
		if (strrchr (complete_regfile, '/') != NULL)
			strcpy (short_regfile, strrchr (complete_regfile, '/') + 1);
		else
			strcpy (short_regfile, complete_regfile);

		regspace	= argv [8];

		sprintf (date, "%s %s %s %s %s %s", 
			argv [9], argv [10], argv [11], argv [12], argv [13], argv [14]);
		uid	= argv [15];
	}
	else
	{
		regspace	= argv [7];

		sprintf (date, "%s %s %s %s %s %s", 
			argv [8], argv [9], argv [10], argv [11], argv [12], argv [13]);
		uid	= argv [14];
	}

	atlas_space	= FALSE;
	if (strcmp (regspace, "-atlas") == 0)
	{
		atlas_space	= TRUE;
	}

	sscanf (rcsid, "%s %s %s", id, program, version);
	strcat (program, " ");
	strcat (program, version);

	demigrate	= TRUE;

	/*
	 * Generates the copyright message.
	 */
	fprintf (stdout, "\nCopyright 1994, Washington University.\n"); 
	fprintf (stdout, "All rights reserved. Unauthorized reproduction prohibited.\n\n");

	/*______________________________________________________
	 * Initialization for matval.
	 *______________________________________________________*/
	matval.frame	= 1;
	matval.plane	= 1;
	matval.gate	= 1;
	matval.data	= 0;
	matval.bed	= 0;

	/* 
	 * Read the parameters in the parameters file.
	 */
	if (readparm (parameter_list_file, &parameter_data) == FAIL)
	{
		fprintf (stderr, "Error: from readparm ().\n");
		exit (FAIL);
	}

	if (strrchr (parameter_data.atlfile, '/') != NULL)
		short_atlfile	= strrchr (parameter_data.atlfile, '/') + 1;
	else
		short_atlfile	= parameter_data.atlfile;

	get_finfo (parameter_data, &finfo);

	/* 
	 * Read the subject file for manipulation.
	 */
	image_list	= (IMAGE_LIST_DATA *) pkg_malloc (sizeof (IMAGE_LIST_DATA) 
			* MAX_IMAGE_LIST_SIZE, "voimean", "image_list");
	if (readimglist (image_list_file, image_list, &num_image_list) == FAIL)
	{
		fprintf (stderr, "Error: from readimglist ().\n");

		free (image_list);
		exit (FAIL);
	}

	/* 
	 * Get the mask image if there is one.
	 */
	if (strlen (parameter_data.mskimg) != 0 
	&& parameter_data.mskfilter_type != FILTER_NONE 
	&& strncmp (parameter_data.scanner, "953", 3) == 0)
	{
		/*
		 * Construct filtered mask image name.
		 */
		build_filter_filename (parameter_data.mskimg, parameter_data.mskfilter_type, 
			parameter_data.mskfilter_cutoff, parameter_data.mskfilter_order, 
			short_filtered_mskimg);

		/*
		 * Find the complete name of the filtered image.
		 */
		if (setpath (parameter_data.datapath, short_filtered_mskimg, 
		subject_id, &finfo, complete_filtered_mskimg, demigrate) != SUCCEED)
		{
			fprintf (stderr, 
				"Error: the mask image %s cannot be found.\n",
				short_filtered_mskimg);

			free (image_list);
			exit (FAIL);
		}
	}
	else
		strcpy (complete_filtered_mskimg, parameter_data.mskimg);

	if (strlen (complete_filtered_mskimg) > 0)
	{
		mask_exist	= TRUE;

		/*
	 	 * Get image dimension and allocate memory for 3D mask image.
	 	 */
		if (getimagedim (complete_filtered_mskimg, matval, &scanner, &mask_width, 
		&mask_height, &mask_num_slices, &mask_pixel_width, &mask_pixel_height, 
		&mask_plane_separation) == FAIL) 
		{
			fprintf (stderr, "Error: getimagedim () from mask %s.\n",
			complete_filtered_mskimg);

			free (image_list);

			return FAIL;
		}

		dimension	= mask_width * ((long) mask_height) * mask_num_slices;
		mask3d		= (short *) malloc (dimension * sizeof (short));
		if (mask3d == (short *) NULL)
		{
			fprintf (stderr, "Error: cannot allocate memory from mask3d.\n");

			free (image_list);

			return FAIL;
		}

		/*
	 	 * Thresholding the filtered mask image.
	 	 */
		first_slice	= parameter_data.first_slice;
		last_slice	= parameter_data.last_slice;
		if (first_slice == 0 && last_slice == 0)
		{
			first_slice	= 1;
			last_slice	= mask_num_slices;
		}

		threshold (complete_filtered_mskimg, scanner, parameter_data.mskpct, 
		mask_width, mask_height, mask_num_slices, first_slice, last_slice, 
		mask3d, &total_pixel);	
	}
	else
	{
		mask_exist	= FALSE;
		mask3d		= &mask3d_mask_not_exist;
	}

	/* 
	 * Generate a list of voi for each reg file.
	 */
	if (parameter_data.processing == PROCESSING_OEF 
	|| parameter_data.processing == PROCESSING_CMRO2) 
	{
		oxygen_processing	= TRUE;
	}
	else
	{
		oxygen_processing	= FALSE;
	}

	image_mode	= parameter_data.imglist_mode;
	if (image_mode != STDIMAGE_MODE && image_mode != DIFIMAGE_MODE 
	&& image_mode != MULTITRACER_IMAGE_MODE) 
		image_mode	= STDIMAGE_MODE;

	filter_mode	= IMGFILTER_MODE;
	rgtlist		= (RGTDATA *) pkg_malloc (sizeof (RGTDATA) 
			* MAX_IMAGE_LIST_SIZE, "voimean", "rgtlist");
	nvoi_max	= 0;
	pixels_in_voi	= 0;

	for (i = 0; i < num_image_list; i++)
	{
		/* 
	 	 * Get the complete region file.
		 */
		if (!command_line_reg_exist)
		{
			/* 
	 	 	 * Construct the short reg file.
	 	 	 */
			strcpy (subject_id, parameter_data.species);
			strcat (subject_id, image_list [i].subject_id);

			strncpy (short_regfile, "\0", MAXLINE);
			strcpy (short_regfile, subject_id);
			if (strlen (image_list [i].sxrid) > 0)
			{
				extension	= strrchr (image_list [i].sxrid, '.');
				if (*extension)
					strncat (short_regfile, image_list [i].sxrid, 
					strlen (image_list [i].sxrid) - strlen (extension));
				else
					strcat (short_regfile, image_list [i].sxrid);
			}

			extension	= strrchr (short_atlfile, '.');
			if (extension && *extension)
			{
				strncat (short_regfile, short_atlfile, 
				strlen (short_atlfile) - strlen (extension));
			}
			else
			{
				strcat (short_regfile, short_atlfile);
			}
			strcat (short_regfile, REG_EXT);

			/* 
	 	 	 * Find the complete reg file.
	 	 	 */
 			finfo.type	= COMMON_DATA;
			if (setpath (parameter_data.datapath, short_regfile, subject_id, &finfo, 
			complete_regfile, demigrate) != SUCCEED) 
			{
				fprintf (stderr, "Error: reg file %s cannot be found.\n", short_regfile);

				for (j = 0; j < i; j++)
				{
					free (rgtlist [j].meanlist);
					free (rgtlist [j].sdlist);
				}
				free (image_list);
				if (mask_exist)
					free (mask3d);

				exit (FAIL);
			}
		}

		/* 
	 	 * Read in the region file.
	 	 */
		voilist	= (VOIDATA *) pkg_malloc (sizeof (VOIDATA) 
			* MAX_IMAGE_LIST_SIZE, "voimean", "voilist");
		if (readvoi (complete_regfile, &nvoi, voilist) == FAIL)
		{
			fprintf (stderr, "Error: from readvoi ().\n");

			for (j = 0; j < i; j++)
			{
				free (rgtlist [j].meanlist);
				free (rgtlist [j].sdlist);
			}
			free (image_list);
			if (mask_exist)
				free (mask3d);
			free (voilist);

			exit (FAIL);
		}

		if (nvoi > nvoi_max)
		{
			nvoi_max	= nvoi;
			strcpy (complete_max_file, complete_regfile);
		}

		/* 
	 	 * Transform the region from atlas space to the image space
		 * if it is necessory.
	 	 */
		if (atlas_space)
		{
			for (j = 0; j < nvoi; j++)
			{
				voilist [j].center.x	= XtoSlice (voilist [j].center.x);
				voilist [j].center.y	= YtoSlice (voilist [j].center.y);
				voilist [j].center.z	= z2slice (voilist [j].center.z, DEFAULT_ZORIGIN);
			}
		}

		/* 
	 	 * Build the short image file name.
	 	 */
		if (build_shortnames (parameter_data, image_list [i], image_mode, filter_mode, 
		&num_image_files, short_image_files, short_sxrfile) == FAIL)
		{
			fprintf (stderr, 
				"Error in building short names from image list %s %s %f %s %f %s\n",
				image_list [i].subject_id, 
				image_list [i].scanset1_id, image_list [i].mean1, 
				image_list [i].scanset2_id, image_list [i].mean2, 
				image_list [i].sxrid);

			for (j = 0; j < i; j++)
			{
				free (rgtlist [j].meanlist);
				free (rgtlist [j].sdlist);
			}
			free (image_list);
			if (mask_exist)
				free (mask3d);
			free (voilist);

			exit (FAIL);
		}

		if ((oxygen_processing 
		&& parameter_data.imglist_mode == MULTITRACER_IMAGE_MODE 
		&& num_image_files != 3)
		|| ((!oxygen_processing 
		|| parameter_data.imglist_mode != MULTITRACER_IMAGE_MODE) 
		&& num_image_files != 1))
		{
			fprintf (stderr, "Error: there are %d image files for one subject.\n",
			num_image_files);

			for (j = 0; j < i; j++)
			{
				free (rgtlist [j].meanlist);
				free (rgtlist [j].sdlist);
			}
			free (image_list);
			if (mask_exist)
				free (mask3d);
			free (voilist);

			exit (FAIL);
		}

		/* 
	 	 * Find the filtered image file.
	 	 */
		for (j = 0; j < num_image_files; j++)
		{
			strncpy (short_filtered_imgfiles [j], "\0", MAXLINE);
			strcpy (short_filtered_imgfiles [j], short_image_files [j]);
		}

		/*
	 	 * Find the filtered images.
	 	 */
 		finfo.type	= PET_IMAGE;
		for (j = 0; j < num_image_files; j++)
		{
			if (setpath (parameter_data.datapath, short_filtered_imgfiles [j], 
			subject_id, &finfo, complete_filtered_imgfiles [j], demigrate) != SUCCEED)
			{
				fprintf (stderr, 
				"Error: the image (raw or filtered) %s cannot be found.\n", 
					short_filtered_imgfiles [j]);
				fprintf (stderr, 
		"Filtered images can be created by using butterworth, gauss, or filter3d.\n", 
					short_filtered_imgfiles [j]);

				for (k = 0; k < i; k++)
				{
					free (rgtlist [k].meanlist);
					free (rgtlist [k].sdlist);
				}
				free (image_list);
				if (mask_exist)
					free (mask3d);
				free (voilist);

				exit (FAIL);
			}
		}

		/*
 	 	 * Get the number of frames.
 	 	 */
		matval.frame	= 1;
		matval.plane	= 1;
		matval.gate	= 1;
		matval.data	= 0;
		matval.bed	= 0;

		if (getimagedim (complete_filtered_imgfiles [0], matval, &scanner, &width, 
		&height, &num_slices, &pixel_width, &pixel_height, 
		&plane_separation) == FAIL) 
		{
			fprintf (stderr, "Error: getimagedim () from image %s.\n",
			short_filtered_imgfiles [0]);

			for (j = 0; j < i; j++)
			{
				free (rgtlist [j].meanlist);
				free (rgtlist [j].sdlist);
			}
			free (image_list);
			if (mask_exist)
				free (mask3d);
			free (voilist);

			exit (FAIL);
		}

		if (mask_exist && (width != mask_width || height != mask_height 
		|| num_slices != mask_num_slices || pixel_width != mask_pixel_width   
		|| pixel_height != mask_pixel_height || plane_separation != mask_plane_separation))
		{
			fprintf (stderr, "Error: the dimensions and voxel size does not match.\n",
			short_filtered_imgfiles [0]);
			fprintf (stderr, "Mask: image size (%d, %d, %d), voxel size (%f, %f, %f).\n",
				mask_width, mask_height, mask_num_slices, 
				mask_pixel_width, mask_pixel_height, mask_plane_separation);
			fprintf (stderr, "Image: image size (%d, %d, %d), voxel size (%f, %f, %f).\n",
				width, height, num_slices, 
				pixel_width, pixel_height, plane_separation);

			for (j = 0; j < i; j++)
			{
				free (rgtlist [j].meanlist);
				free (rgtlist [j].sdlist);
			}
			free (image_list);
			if (mask_exist)
				free (mask3d);
			free (voilist);

			exit (FAIL);
		}

		voxel_size.x 	= pixel_width * MMS_PER_CM;
		voxel_size.y 	= pixel_height * MMS_PER_CM;
		voxel_size.z 	= plane_separation * MMS_PER_CM;

		if (scanner == ECAT_SCANNER)
		{
			matval.frame	= 0;
			matval.plane	= 1;
			matval.gate	= 1;
			matval.data	= 0;
			matval.bed	= 0;

			fptr	= OpenEcat (complete_filtered_imgfiles [0], &num_slices, &width, 
					&height, &pixel_width, &plane_separation, matval);
			if (fptr == (MatrixFile *) NULL 
			|| fptr->mhptr->num_frames * fptr->mhptr->num_planes != num_slices)
			{
				if (fptr == (MatrixFile *) NULL) 
					fprintf (stderr, 
					"Error: Cann't open ECAT image %s.\n",
					complete_filtered_imgfiles [0]);
				else
					fprintf (stderr, "Wrong num_frames or num_planes.\n"); 

				for (j = 0; j < i; j++)
				{
					free (rgtlist [j].meanlist);
					free (rgtlist [j].sdlist);
				}
				free (image_list);
				if (mask_exist)
					free (mask3d);
				free (voilist);

				exit (FAIL);
			}

			rgtlist [i].nframe	= fptr->mhptr->num_frames;
			num_slices		= fptr->mhptr->num_planes;

			matrix_close (fptr);
		}
		else
			rgtlist [i].nframe	= 1;

		/* 
	 	 * Compute the means.
	 	 */
		rgtlist [i].nvoi	= nvoi;
		rgtlist [i].meanlist	= (float *) pkg_malloc (sizeof (float) 
					* rgtlist [i].nframe * rgtlist [i].nvoi, 
					"voimean", "meanlist");
		rgtlist [i].sdlist	= (float *) pkg_malloc (sizeof (float) 
					* rgtlist [i].nframe * rgtlist [i].nvoi, 
					"voimean", "sdlist");
		strcpy (rgtlist [i].complete_image_name, complete_filtered_imgfiles [0]);

		for (j = 0; j < rgtlist [i].nframe; j++)
		{
        		/*
	 		 * Read in the image data.
	 		 */
			main_header	= (Main_header *) calloc (1, sizeof (Main_header));
			subheader_list	= (Image_subheader **) pkg_malloc (num_slices * sizeof (caddr_t), 
					"voimean", "subheader_list");
			dimension	= width * ((long) height) * num_slices;
			image3d		= (float *) pkg_malloc (dimension * sizeof (float), 
					"voimean", "image3d");
			if (oxygen_processing && 
			parameter_data.imglist_mode == MULTITRACER_IMAGE_MODE)
			{
				flow3d		= (float *) pkg_malloc (dimension * sizeof (float), 
						"voimean", "flow3d");
				volume3d	= (float *) pkg_malloc (dimension * sizeof (float), 
						"voimean", "volume3d");
			}

			matval.frame	= j + 1;
			matval.plane	= 1;
			matval.gate	= 1;
			matval.data	= 0;
			matval.bed	= 0;

			for (k = 0; k < num_image_files; k++)
			{
				if (k == 1)
					real_array	= flow3d;
				else if (k == 2)
					real_array	= volume3d;
				else 
					real_array	= image3d; 
				if (getrealimg (complete_filtered_imgfiles [k], scanner, matval, 
				width, height, num_slices, real_array, main_header, 
				subheader_list) == FAIL)
				{
					fprintf (stderr, "Error occured when reading image %s.\n", 
					complete_filtered_imgfiles [l]);

					for (l = 0; l < num_slices; l++)
					{
						free (subheader_list [l]);
					}
					free (subheader_list);
					free (main_header);
					free (real_array);
					if (oxygen_processing
					&& parameter_data.imglist_mode == MULTITRACER_IMAGE_MODE)
					{
						free (flow3d);
						free (volume3d);
					}

					for (l = 0; l <= i; l++)
					{
						free (rgtlist [l].meanlist);
						free (rgtlist [l].sdlist);
					}
					free (image_list);
					if (mask_exist)
						free (mask3d);
					free (voilist);

					exit (FAIL);
				}
			}

			for (k = 0; k < num_slices; k++)
			{
				free (subheader_list [k]);
			}
			free (subheader_list);
			free (main_header);

        		/*
	 		 * Processing image.
	 		 */
			if (oxygen_processing)
			{
				bool_value	= ProcessOxygen (image3d, flow3d, 
						volume3d, dimension, parameter_data.processing, 
						complete_filtered_imgfiles [0], 
						complete_filtered_imgfiles [1], 
						complete_filtered_imgfiles [2]);
			}
			else 
			{
				bool_value	= ProcessImage (image3d, dimension, 
						parameter_data.processing, 
						parameter_data.halflife, 
						complete_filtered_imgfiles [0], matval);
			}

			/*
			 * Normalize image if it is required.
			 */
			if (parameter_data.voi_norm > 0.0 && image_list [i].mean1 > 0.0)
			{
				normalization_factor	= parameter_data.voi_norm 
							/ image_list [i].mean1;
				for (k = 0; k < dimension; k++)
				{
					image3d [k]	*= normalization_factor;
				}
			}

			if (bool_value == FAIL)
			{
				fprintf (stderr, "Error processing %s\n", 
				complete_filtered_imgfiles [0]);
				 
				free (image3d);
				if (oxygen_processing
				&& parameter_data.imglist_mode == MULTITRACER_IMAGE_MODE)
				{
					free (flow3d);
					free (volume3d);
				}
				for (k = 0; k <= i; k++)
				{
					free (rgtlist [k].meanlist);
					free (rgtlist [k].sdlist);
				}
				free (image_list);
				if (mask_exist)
					free (mask3d);
				free (voilist);

				exit (FAIL);
			}

        		/*
	 		 * Compute the mean.
	 		 */
			bool_value	= rgtmean (image3d, mask3d, mask_exist, width, height, 
					num_slices, voxel_size, nvoi, voilist, parameter_data, 
					rgtlist [i].meanlist + j * rgtlist [i].nvoi,
					rgtlist [i].sdlist + j * rgtlist [i].nvoi,
					&actual_pixels_in_voi);
			if (actual_pixels_in_voi > pixels_in_voi)
				pixels_in_voi	= actual_pixels_in_voi;

			free (image3d);
			if (oxygen_processing
			&& parameter_data.imglist_mode == MULTITRACER_IMAGE_MODE)
			{
				free (flow3d);
				free (volume3d);
			}

			if (bool_value == FAIL)
			{
				fprintf (stderr, "Error in compute the voi means.\n");

				for (k = 0; k <= i; k++)
				{
					free (rgtlist [k].meanlist);
					free (rgtlist [k].sdlist);
				}
				free (image_list);
				if (mask_exist)
					free (mask3d);
				free (voilist);

				exit (FAIL);
			}
		}
		free (voilist);
	}

	voilist	= (VOIDATA *) pkg_malloc (sizeof (VOIDATA) 
		* nvoi_max, "voimean", "voilist");
	if (readvoi (complete_max_file, &nvoi, voilist) == FAIL)
	{
		fprintf (stderr, "Error: from readvoi ().\n");
		free (voilist);
		free (image_list);
		for (i = 0; i < num_image_list; i++)
		{
			free (rgtlist [i].meanlist);
			free (rgtlist [i].sdlist);
		}
		free (rgtlist);

		exit (FAIL);
	}

	/* 
	 * Write the rgt data to rgtfile.
	 */
	if (writergt (rgtfile, parameter_data, program, nvoi, voilist, 
	num_image_list, rgtlist, date, uid, short_regfile, parameter_list_file, 
	pixels_in_voi, voxel_size, frame_start_ms, FALSE) == FAIL)
	{
		fprintf (stderr, "Error in writing rgt data to file %s\n", rgtfile);
	}

	if (parameter_data.voi_sd)
	{
		if (writergt (sdfile, parameter_data, program, nvoi, voilist, 
		num_image_list, rgtlist, date, uid, short_regfile, parameter_list_file, 
		pixels_in_voi, voxel_size, frame_start_ms, TRUE) == FAIL)
		{
			fprintf (stderr, "Error in writing sd data to file %s\n", sdfile);
		}
	}

	free (voilist);
	free (image_list);
	if (mask_exist)
		free (mask3d);
	for (i = 0; i < num_image_list; i++)
	{
		free (rgtlist [i].meanlist);
		free (rgtlist [i].sdlist);
	}
	free (rgtlist);
}
@


1.23
log
@Edited the error messages.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.22 1995/01/10 22:23:56 ty7777 Exp ty7777 $*/
d3 3
d85 1
a85 1
static char rcsid [] = "$Id: voimean.c,v 1.22 1995/01/10 22:23:56 ty7777 Exp ty7777 $";
d118 1
d170 4
a173 3
	frame_start_ms		= atoi (argv [4]);
	if (argc > 5)
		command_line_reg_exist	= atoi (argv [5]);
d179 1
a179 1
		strcpy (complete_regfile, argv [6]);
d185 1
a185 1
		regspace	= argv [7];
d188 2
a189 2
			argv [8], argv [9], argv [10], argv [11], argv [12], argv [13]);
		uid	= argv [14];
d193 1
a193 1
		regspace	= argv [6];
d196 2
a197 2
			argv [7], argv [8], argv [9], argv [10], argv [11], argv [12]);
		uid	= argv [13];
d411 1
d433 1
d479 1
d502 1
d540 1
d570 1
d596 1
d633 1
d658 3
d721 1
d786 1
d802 1
d822 1
d845 1
d855 3
a857 3
	if (writergt (rgtfile, parameter_data, program, nvoi, voilist, num_image_list, 
	rgtlist, date, uid, short_regfile, parameter_list_file, pixels_in_voi, 
	voxel_size, frame_start_ms) == FAIL)
d862 10
d879 1
@


1.22
log
@Edited the error message.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.21 1994/10/06 20:44:53 ty7777 Exp ty7777 $*/
d3 3
d82 1
a82 1
static char rcsid [] = "$Id: voimean.c,v 1.21 1994/10/06 20:44:53 ty7777 Exp ty7777 $";
d525 1
a525 1
		"Filtered image %s can be created by using butterworth, gauss, or filter3d.\n", 
@


1.21
log
@Only one point if all dimensions for a cube or sphere are 0.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.20 1994/06/08 18:03:42 ty7777 Exp ty7777 $*/
d3 3
d79 1
a79 1
static char rcsid [] = "$Id: voimean.c,v 1.20 1994/06/08 18:03:42 ty7777 Exp ty7777 $";
d518 2
a519 1
				fprintf (stderr, "Error: the filtered image %s cannot be found.\n", 
d522 1
a522 1
		"Please create the filtered image %s using butterworth, gauss, or filter3d.\n", 
@


1.20
log
@Update to introduce the frame_start_time parameter.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.19 1994/05/19 19:13:30 ty7777 Exp ty7777 $*/
d3 3
d76 1
a76 1
static char rcsid [] = "$Id: voimean.c,v 1.19 1994/05/19 19:13:30 ty7777 Exp ty7777 $";
d145 1
d324 1
d402 2
a403 1
				free (mask3d);
d423 2
a424 1
			free (mask3d);
d468 2
a469 1
			free (mask3d);
d490 2
a491 1
			free (mask3d);
d526 2
a527 1
				free (mask3d);
d555 2
a556 1
			free (mask3d);
d580 2
a581 1
			free (mask3d);
d616 2
a617 1
				free (mask3d);
d700 2
a701 1
					free (mask3d);
d764 2
a765 1
				free (mask3d);
d798 2
a799 1
				free (mask3d);
d836 2
a837 1
	free (mask3d);
@


1.19
log
@Use the right hand coordinate system when reading an atlas file directly.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.18 1994/04/29 16:39:18 ty7777 Exp ty7777 $*/
d3 3
d73 1
a73 1
static char rcsid [] = "$Id: voimean.c,v 1.18 1994/04/29 16:39:18 ty7777 Exp ty7777 $";
d83 1
d156 3
a158 2
	if (argc > 4)
		command_line_reg_exist	= atoi (argv [4]);
d164 1
a164 1
		strcpy (complete_regfile, argv [5]);
d170 1
a170 1
		regspace	= argv [6];
d173 2
a174 2
			argv [7], argv [8], argv [9], argv [10], argv [11], argv [12]);
		uid	= argv [13];
d178 1
a178 1
		regspace	= argv [5];
d181 2
a182 2
			argv [6], argv [7], argv [8], argv [9], argv [10], argv [11]);
		uid	= argv [12];
d372 2
a373 1
			if (*extension)
d376 1
d378 1
d380 1
d812 2
a813 1
	rgtlist, date, uid, short_regfile, parameter_list_file, pixels_in_voi, voxel_size) == FAIL)
@


1.18
log
@Added processing for altas regions.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.17 1994/04/23 18:32:57 ty7777 Exp ty7777 $*/
d3 3
d70 1
a70 1
static char rcsid [] = "$Id: voimean.c,v 1.17 1994/04/23 18:32:57 ty7777 Exp ty7777 $";
d428 2
a429 2
				voilist [j].center.x	= XYtoSlice (voilist [j].center.x);
				voilist [j].center.y	= XYtoSlice (voilist [j].center.y);
@


1.17
log
@Added processing for difference images.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.16 1994/04/12 18:01:05 ty7777 Exp ty7777 $*/
d3 3
d67 1
a67 1
static char rcsid [] = "$Id: voimean.c,v 1.16 1994/04/12 18:01:05 ty7777 Exp ty7777 $";
d73 1
d97 2
a99 1
	char			*rgtfile;
d161 3
d165 2
a166 2
			argv [6], argv [7], argv [8], argv [9], argv [10], argv [11]);
		uid	= argv [12];
d170 2
d173 2
a174 2
			argv [5], argv [6], argv [7], argv [8], argv [9], argv [10]);
		uid	= argv [11];
d177 6
d415 14
@


1.16
log
@Getting filtered images.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.15 1994/04/12 15:51:46 ty7777 Exp ty7777 $*/
d3 3
d64 1
a64 1
static char rcsid [] = "$Id: voimean.c,v 1.15 1994/04/12 15:51:46 ty7777 Exp ty7777 $";
a303 1
		image_mode 		= parameter_data.imglist_mode;
a307 1
		image_mode 		= STDIMAGE_MODE;
d310 6
@


1.15
log
@Changed the error message for filtered images.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.14 1994/04/07 16:06:28 ty7777 Exp ty7777 $*/
d3 3
d61 1
a61 1
static char rcsid [] = "$Id: voimean.c,v 1.14 1994/04/07 16:06:28 ty7777 Exp ty7777 $";
d141 4
a144 1
	command_line_reg_exist	= atoi (argv [4]);
d445 1
a445 23
		}

		if (parameter_data.imgfilter_type != FILTER_NONE &&
		strncmp (parameter_data.scanner, "953", 3) == 0)
		{
			/*
		 	 * Construct filtered short image name.
		 	 */
			for (j = 0; j < num_image_files; j++)
			{
				build_filter_filename (short_image_files [j], 
				parameter_data.imgfilter_type, 
				parameter_data.imgfilter_cutoff, 
				parameter_data.imgfilter_order, 
				short_filtered_imgfiles [j]);
			}
		}
		else
		{
			for (j = 0; j < num_image_files; j++)
			{
				strcpy (short_filtered_imgfiles [j], short_image_files [j]);
			}
@


1.14
log
@Use new reg file construction.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.13 1994/04/05 19:15:48 ty7777 Exp ty7777 $*/
d3 3
d58 1
a58 1
static char rcsid [] = "$Id: voimean.c,v 1.13 1994/04/05 19:15:48 ty7777 Exp ty7777 $";
d474 3
@


1.13
log
@Added normalization factor.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.12 1994/04/05 17:26:06 ty7777 Exp ty7777 $*/
d3 3
d55 1
a55 1
static char rcsid [] = "$Id: voimean.c,v 1.12 1994/04/05 17:26:06 ty7777 Exp ty7777 $";
d319 1
d321 10
a330 2
			strcat (short_regfile, parameter_data.tracer);
			strcat (short_regfile, image_list [i].scanset1_id);
@


1.12
log
@command line regfile works.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.11 1994/04/04 16:57:11 ty7777 Exp ty7777 $*/
d3 3
d52 1
a52 1
static char rcsid [] = "$Id: voimean.c,v 1.11 1994/04/04 16:57:11 ty7777 Exp ty7777 $";
d97 1
d667 13
@


1.11
log
@Release version.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.10 1994/04/01 20:36:40 ty7777 Exp ty7777 $*/
d3 3
d49 1
a49 1
static char rcsid [] = "$Id: voimean.c,v 1.10 1994/04/01 20:36:40 ty7777 Exp ty7777 $";
d56 1
d128 1
d130 17
a146 2
	sprintf (date, "%s %s %s %s %s %s", argv[4], argv[5], argv[6], argv[7], argv[8], argv[9]);
	uid			= argv [10];
d302 9
a310 4
	 	 * Construct the short reg file.
	 	 */
		strcpy (subject_id, parameter_data.species);
		strcat (subject_id, image_list [i].subject_id);
d312 10
a321 10
		strcpy (short_regfile, subject_id);
		strcat (short_regfile, parameter_data.tracer);
		strcat (short_regfile, image_list [i].scanset1_id);
		extension	= strrchr (short_atlfile, '.');
		if (*extension)
			strncat (short_regfile, short_atlfile, 
			strlen (short_atlfile) - strlen (extension));
		else
			strcat (short_regfile, short_atlfile);
		strcat (short_regfile, REG_EXT);
d323 8
a330 8
		/* 
	 	 * Find the complete reg file.
	 	 */
 		finfo.type	= COMMON_DATA;
		if (setpath (parameter_data.datapath, short_regfile, subject_id, &finfo, 
		complete_regfile, demigrate) != SUCCEED) 
		{
			fprintf (stderr, "Error: reg file %s cannot be found.\n", short_regfile);
d332 8
a339 3
			for (j = 0; j < i; j++)
			{
				free (rgtlist [j].meanlist);
a340 4
			free (image_list);
			free (mask3d);

			exit (FAIL);
d744 1
a744 1
	rgtlist, date, uid, short_regfile, parameter_list_file, pixels_in_voi) == FAIL)
@


1.10
log
@Tissue activity works now.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.9 1994/03/29 21:39:55 ty7777 Exp ty7777 $*/
d3 3
d46 1
a46 1
static char rcsid [] = "$Id: voimean.c,v 1.9 1994/03/29 21:39:55 ty7777 Exp ty7777 $";
d94 1
d104 1
d277 1
d667 4
a670 1
					rgtlist [i].meanlist + j * rgtlist [i].nvoi);
d718 1
a718 1
	rgtlist, date, uid, short_regfile, parameter_list_file) == FAIL)
@


1.9
log
@Added processing for single file oxygen processing.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.8 1994/03/24 17:39:02 ty7777 Exp ty7777 $*/
d3 3
d43 1
a43 1
static char rcsid [] = "$Id: voimean.c,v 1.8 1994/03/24 17:39:02 ty7777 Exp ty7777 $";
d440 1
a440 1
		matval.frame	= 0;
d465 2
a466 2
		|| pixel_width != mask_pixel_width || pixel_height != mask_pixel_height
		|| plane_separation != mask_plane_separation))
d470 6
d494 6
@


1.8
log
@Linked with cbf, cbv, tissue activity, oef, and cmro2 processing.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.7 1994/03/17 21:06:41 ty7777 Exp ty7777 $*/
d3 3
d40 1
a40 1
static char rcsid [] = "$Id: voimean.c,v 1.7 1994/03/17 21:06:41 ty7777 Exp ty7777 $";
a149 8
	if (strlen (parameter_data.atlfile) == 0)
	{
		fprintf (stderr, 
		"Error: parameter file %s does not contain any atlfile.\n", 
		parameter_list_file);
		exit (FAIL);
	}

d257 1
a257 1
		image_mode 		= MULTITRACER_IMAGE_MODE;
d358 6
a363 2
		if ((oxygen_processing && num_image_files != 3)
		|| (oxygen_processing && num_image_files != 1))
d365 2
a366 1
			fprintf (stderr, "Error: there are more than one image files for one subject.\n");
d536 2
a537 1
			if (oxygen_processing)
d573 2
a574 1
					if (oxygen_processing)
d590 1
d592 3
a594 6
				for (l = 0; l < num_slices; l++)
				{
					free (subheader_list [l]);
				}
				free (subheader_list);
				free (main_header);
d596 2
d624 2
a625 1
				if (oxygen_processing)
d649 2
a650 1
			if (oxygen_processing)
d694 1
a694 1
	rgtlist, date, uid) == FAIL)
@


1.7
log
@mask works.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.6 1994/03/17 16:48:11 ty7777 Exp ty7777 $*/
d3 3
d37 1
a37 1
static char rcsid [] = "$Id: voimean.c,v 1.6 1994/03/17 16:48:11 ty7777 Exp ty7777 $";
d46 1
d55 1
a55 1
	char			complete_filtered_image [MAXPATH];
d68 1
a68 1
	char			short_filtered_image [MAXLINE];
d75 2
d84 1
d87 1
a87 1
	int			i;
a88 2
	int			j;
	int			k;
a249 5
printf ("maskimg = %s scanner = %d first = %d last = %d\n", 
	complete_filtered_mskimg, scanner, first_slice, last_slice);
printf ("mask_width = %d mask_height = %d mask_num_slices = %d\n", 
	mask_width, mask_height, mask_num_slices); 
printf ("pct = %d total_pixel = %d\n", parameter_data.mskpct, total_pixel);
d259 11
a269 1
	image_mode	= STDIMAGE_MODE;	
d363 2
a364 1
		if (num_image_files != 1)
d382 5
a386 1
		strncpy (short_filtered_image, "\0", MAXLINE);
d393 8
a400 4
			build_filter_filename (short_image_files [0], parameter_data.imgfilter_type, 
				parameter_data.imgfilter_cutoff, parameter_data.imgfilter_order, 
				short_filtered_image);

d404 4
a407 1
			strcpy (short_filtered_image, short_image_files [0]);
d411 1
a411 1
	 	 * Find the filtered image.
d414 1
a414 2
		if (setpath (parameter_data.datapath, short_filtered_image, 
		subject_id, &finfo, complete_filtered_image, demigrate) != SUCCEED)
d416 5
a420 2
			fprintf (stderr, "Error: the filtered image %s cannot be found.\n", 
					short_filtered_image, complete_filtered_image);
d422 9
a430 3
			for (j = 0; j < i; j++)
			{
				free (rgtlist [j].meanlist);
a431 5
			free (image_list);
			free (mask3d);
			free (voilist);

			exit (FAIL);
d443 1
a443 1
		if (getimagedim (complete_filtered_image, matval, &scanner, &width, 
d448 1
a448 1
			short_filtered_image);
d466 1
a466 1
			short_filtered_image);
d485 1
a485 1
			fptr	= OpenEcat (complete_filtered_image, &num_slices, &width, 
d493 1
a493 1
					complete_filtered_image);
d523 1
a523 1
		strcpy (rgtlist [i].complete_image_name, complete_filtered_image);
d536 7
d550 1
a550 2
			if (getrealimg (complete_filtered_image, scanner, matval, width, height, 
			num_slices, image3d, main_header, subheader_list) == FAIL)
d552 12
a563 2
				fprintf (stderr, "Error occured when reading image %s.\n", 
				complete_filtered_image);
d565 25
a589 1
				for (k = 0; k < num_slices; k++)
d591 1
a591 1
					free (subheader_list [k]);
d595 26
d622 5
a626 1

d645 2
a646 1
			for (k = 0; k < num_slices; k++)
d648 2
a649 1
				free (subheader_list [k]);
a650 3
			free (subheader_list);
			free (main_header);
			free (image3d);
@


1.6
log
@Added mask image processing.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.5 1994/03/16 22:19:37 ty7777 Exp ty7777 $*/
d3 3
d34 1
a34 1
static char rcsid [] = "$Id: voimean.c,v 1.5 1994/03/16 22:19:37 ty7777 Exp ty7777 $";
d245 5
@


1.5
log
@Multiple framed images can now be processed.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.4 1994/03/15 15:33:17 ty7777 Exp ty7777 $*/
d3 3
d31 1
a31 1
static char rcsid [] = "$Id: voimean.c,v 1.4 1994/03/15 15:33:17 ty7777 Exp ty7777 $";
a241 2

		free (mask3d);
d290 1
d309 1
d339 1
d354 1
d395 1
d422 1
d440 1
d469 1
d529 1
d538 2
a539 2
			bool_value	= rgtmean (image3d, mask3d, width, height, num_slices, 
					voxel_size, nvoi, voilist, parameter_data, 
d559 1
a563 2


d595 1
@


1.4
log
@Multiple frames working.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.3 1994/03/11 21:07:05 ty7777 Exp ty7777 $*/
d3 3
d28 1
a28 1
static char rcsid [] = "$Id: voimean.c,v 1.3 1994/03/11 21:07:05 ty7777 Exp ty7777 $";
d481 1
a481 1
		strcpy (rgtlist [i].short_image_name, short_filtered_image);
@


1.3
log
@Use the filtered image if it is necessary.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.2 1994/03/09 22:20:56 ty7777 Exp ty7777 $*/
d3 3
d21 1
d25 1
a25 1
static char rcsid [] = "$Id: voimean.c,v 1.2 1994/03/09 22:20:56 ty7777 Exp ty7777 $";
d31 1
d33 2
d36 3
d43 1
d56 1
d62 7
d70 1
d72 1
d74 2
a75 1
	int			image_mode;
d80 10
d91 1
d107 2
d115 9
d156 1
d162 1
a162 1
	 * Generate the reg file for each atl file.
d164 83
a246 1
	demigrate	= TRUE;
d392 79
d474 3
a476 1
		rgtlist [i].meanlist	= (float *) pkg_malloc (sizeof (float) * nvoi, 
a477 1
		rgtlist [i].nvoi	= nvoi;
d480 1
a480 3
		if (rgtmean (complete_filtered_image, nvoi, voilist, 
		parameter_data.voi_shape, parameter_data.voi_xdim, parameter_data.voi_ydim, 
		parameter_data.voi_zdim, rgtlist [i].meanlist) == FAIL)
d482 9
a490 1
			fprintf (stderr, "Error in compute the voi means.\n");
d492 5
a496 2
			free (image_list);
			free (voilist);
d498 54
a551 1
			exit (FAIL);
@


1.2
log
@Wroking version, first release.
@
text
@d1 1
a1 1
/*$Id: voimean.c,v 1.1 1994/03/01 22:24:26 ty7777 Exp ty7777 $*/
d3 3
d21 1
a21 1
static char rcsid [] = "$Id: voimean.c,v 1.1 1994/03/01 22:24:26 ty7777 Exp ty7777 $";
d32 1
a32 1
	char			complete_image_files [6][MAXPATH];
d38 1
d41 1
d44 1
a47 2
	char			*image_list_file;
	char			regroot [MAXNAME];
d52 1
a103 3
 	finfo.cat	= INDIVIDUAL;
 	finfo.type	= COMMON_DATA;

d131 2
a132 2
		strcpy (regroot, parameter_data.species);
		strcat (regroot, image_list [i].subject_id);
d134 1
a134 1
		strcpy (short_regfile, regroot);
d148 2
a149 1
		if (setpath (parameter_data.datapath, short_regfile, regroot, &finfo, 
d154 4
d171 6
d178 1
d201 4
d215 4
d226 1
a226 1
	 	 * find the image files.
d228 3
a230 2
		if (checkimg (parameter_data, image_list [i], image_mode, demigrate, 
		num_image_files, short_image_files, complete_image_files) == FAIL)
d232 6
a237 6
			fprintf (stderr, 
				"Error in checking files from image list %s %s %f %s %f %s\n\n",
				image_list [i].subject_id, 
				image_list [i].scanset1_id, image_list [i].mean1, 
				image_list [i].scanset2_id, image_list [i].mean2, 
				image_list [i].sxrid);
d239 20
d271 1
a271 1
		strcpy (rgtlist [i].short_image_name, short_image_files [0]);
d273 1
a273 1
		if (rgtmean (complete_image_files [0], nvoi, voilist, 
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d18 1
a18 1
static char rcsid [] = "$Id$";
d32 1
d44 1
d61 4
d263 2
a264 1
	if (writergt (rgtfile, program, nvoi, voilist, num_image_list, rgtlist) == FAIL)
d269 1
@
