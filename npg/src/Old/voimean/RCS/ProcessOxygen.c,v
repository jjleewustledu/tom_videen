head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	94.03.29.21.39.15;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	94.03.24.16.06.58;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	94.03.24.15.51.06;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in.
@


1.3
log
@Working version, before release.
@
text
@/*$Id: ProcessOxygen.c,v 1.2 1994/03/24 16:06:58 ty7777 Exp ty7777 $*/
/*$Log: ProcessOxygen.c,v $
 * Revision 1.2  1994/03/24  16:06:58  ty7777
 * deleted halflife.
 *
 * Revision 1.1  1994/03/24  15:51:06  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
  File:		ProcessOxygen.c

  Function:	PUBLIC int ProcessOxygen (float *oxygenimage, float *flowimage, 
		float *volumeimage, long dimension, int processing, 
		char *oxygen_imgfile, char *flow_imgfile, 
		char *volume_imgfile)

  Arguments:	oxygenimage,	a real array containing the 3d oxygen image data, 
				changed upon return.
		flowimage,	a real array containing the 3d blood flow image data, 
				changed upon return.
		volumeimage,	a real array containing the 3d blood volume image data, 
				changed upon return.
		dimension,	dimension of image.
		processing,	processing code.
		oxygen_imgfile,	oxygen image file name, used to get the oxygen 
				header file.
		flow_imgfile,	flow image file name, used to get the blood flow 
				header file.
		volume_imgfile,	flow image file name, used to get the blood volume 
				header file.

  Return:	SUCCEED: successful; FAIL: error.

  Description:	This function processes an image for OEF, CMRO2.

  Called by:	ProcessOxygen.c	

  Calling:	None.	

  History:	Created by Tom Yang on 03/23/94. 
___________________________________________________________________________*/

#include <petutil/imglist.h>
#include <petutil/matrix.h>
#include <values.h>
#include <math.h>
#include "voimean.h"

#define	SMALL_VESSEL_RATIO	0.85	/* radio of cerebral vessel to large vessel hematocrit */
#define	VOLUME_FACTOR		0.835	/* (postcapillary vol + 0.5 * capillary vol) / total blood vol */
#define	BRAIN_DENSITY		1.05	/* density of brain, unit: g / ml */

static char rcsid [] = "$Header: /home/petsun4/ty7777/src/voimean/RCS/ProcessOxygen.c,v 1.2 1994/03/24 16:06:58 ty7777 Exp ty7777 $";

PUBLIC int ProcessOxygen (oxygenimage, flowimage, volumeimage, dimension, processing, 
	oxygen_imgfile, flow_imgfile, volume_imgfile)
	float	*oxygenimage;
	float	*flowimage;
	float	*volumeimage;
	long	dimension;
	int	processing;
	char	*oxygen_imgfile;
	char	*flow_imgfile;
	char	*volume_imgfile;
{
	HEADER_DATA	header_data;
	char		complete_hdrfile [MAXPATH];
	char		short_hdrfile [MAXLINE];
	float		a1;
	float		a2;
	float		a3;
	float		a4;
	float		a5;
	float		c1;
	float		c2;
	float		c3;
	float		value;
	float		x1;
	float		x2;
	float		x3;
	long		i;
	struct Matval	matval;

	/*
	 * No processing if not OEF or CMRO2.
	 */
	if (processing != PROCESSING_OEF
	&& processing != PROCESSING_CMRO2)
		return SUCCEED;

	/*
	 * No processing if not OEF or CMRO2.
	 */
	gethdrfile (oxygen_imgfile, short_hdrfile, complete_hdrfile);

	if (gethdr (short_hdrfile, &header_data) != SUCCEED)
	{
		if (gethdr (complete_hdrfile, &header_data) != SUCCEED)
		{
			fprintf (stderr, "Error: header file can not be found as %s or %s\n", 
				short_hdrfile, complete_hdrfile);

			return FAIL;
		}
	}

	/*
	 * Process the flow image.
	 */
	if (header_data.ntype == 1)
	{
		if (ProcessImage (flowimage, dimension, PROCESSING_CBF, 0.0, 
		flow_imgfile, matval) == FAIL)
		{
			fprintf (stderr, "Error in processing flow image %s\n", flow_imgfile);

			return FAIL;
		}

		/*
	 	 * Process the volume image.
	 	 */
		if (ProcessImage (volumeimage, dimension, PROCESSING_CBV, 0.0, 
		volume_imgfile, matval) == FAIL)
		{
			fprintf (stderr, "Error in processing volume image %s\n", volume_imgfile);

			return FAIL;
		}
	}

	/*
	 * Constants for oxygen processing.
	 */
	c1	= SMALL_VESSEL_RATIO * header_data.o2cnts1 / 100.0;
	c2	= VOLUME_FACTOR * c1;
	c3	= header_data.pettcnv1 / BRAIN_DENSITY;

	if (header_data.ntype == 1)
	{
		for (i = 0; i < dimension; i++)
		{
			x1	= oxygenimage [i];
			if (x1 != 0.0)
			{
				x2	= flowimage [i];
				x3	= volumeimage [i];
				a1	= c3 * x1;
				a2	= x2 * (header_data.awater1 * x2 + header_data.bwater1);
				a3	= c1 * x3;
				a4	= x2 * (header_data.aoxygen1 * x2 + header_data.boxygen1);
				a5	= c2 * x3;
				if (a4 == a5)
					oxygenimage [i]	= 0.0;
				else if (processing == PROCESSING_OEF)
					oxygenimage [i]	= (a1 - a2 - a3) / (a4 - a5);
				else if (processing == PROCESSING_CMRO2)
					oxygenimage [i]	= x2 * header_data.oxycont1 
							* (a1 - a2 - a3) / (a4 - a5);
			}
		}
	}
	else if ((processing == PROCESSING_OEF && header_data.ntype == 11) 
	|| (processing == PROCESSING_CMRO2 && header_data.ntype == 12)) 
	{
		for (i = 0; i < dimension; i++)
		{
			oxygenimage [i]	*= header_data.aoxygen1;
		}
	}
	else
	{
		fprintf (stderr,
		"Error: processing %d and data type %d in header file %s does not match.\n",
		processing, header_data.ntype, short_hdrfile);

		return FAIL;
	}


	return SUCCEED;
}
@


1.2
log
@deleted halflife.
@
text
@d1 1
a1 1
/*$Id: ProcessOxygen.c,v 1.1 1994/03/24 15:51:06 ty7777 Exp ty7777 $*/
d3 3
d13 1
a13 1
  Function:	int ProcessOxygen (float *oxygenimage, float *flowimage, 
d54 1
a54 1
static char rcsid [] = "$Header: /home/petsun4/ty7777/src/voimean/RCS/ProcessOxygen.c,v 1.1 1994/03/24 15:51:06 ty7777 Exp ty7777 $";
d56 1
a56 1
int ProcessOxygen (oxygenimage, flowimage, volumeimage, dimension, processing, 
a77 1
	float		sx;
d88 1
a88 1
	if (processing != PROCESSING_CBF
d93 1
a93 1
	 * Process the flow image.
d95 3
a97 2
	if (ProcessImage (flowimage, dimension, PROCESSING_CBF, 0, 
	flow_imgfile, matval) == FAIL)
d99 4
a102 1
		fprintf (stderr, "Error in processing flow image %s\n", flowimage);
d104 2
a105 1
		return FAIL;
d109 1
a109 1
	 * Process the volume image.
d111 1
a111 2
	if (ProcessImage (volumeimage, dimension, PROCESSING_CBV, 0, 
	volume_imgfile, matval) == FAIL)
d113 4
a116 1
		fprintf (stderr, "Error in processing volume image %s\n", volumeimage);
d118 2
a119 2
		return FAIL;
	}
d121 5
a125 5
	gethdrfile (oxygen_imgfile, short_hdrfile, complete_hdrfile);

	if (gethdr (short_hdrfile, &header_data) != SUCCEED)
	{
		if (gethdr (complete_hdrfile, &header_data) != SUCCEED)
d127 1
a127 2
			fprintf (stderr, "Error:  header file not found as %s or %s\n", 
				short_hdrfile, complete_hdrfile);
d129 1
a129 1
			return (FAIL);
d134 1
a134 2
	 * Constants for oxygen processing, scaled by 1000 to maintain dynamic 
	 * range with integer pixels.
a135 1
	sx	= 1000.0;
d140 1
a140 1
	if (processing == PROCESSING_OEF)
d145 1
a145 3
			if (x1 == 0.0)
				oxygenimage [i]	= 0.0;
			else
d147 2
a148 2
				x2	= flowimage [i] * CBF_SCALER;
				x3	= volumeimage [i] * CBV_SCALER;
d156 5
a160 6
				else
					oxygenimage [i]	= sx * (a1 - a2 - a3) / (a4 - a5);
				if (oxygenimage [i] > 1000.0)
					oxygenimage [i]	= 0.0;
				else if (oxygenimage [i] < 0.0)
					oxygenimage [i]	= 0.0;
d164 2
a165 1
	else if (processing == PROCESSING_CMRO2)
d169 1
a169 18
			x1	= oxygenimage [i];
			if (x1 == 0.0)
				oxygenimage [i]	= 0.0;
			else
			{
				x2	= flowimage [i] * CBF_SCALER;
				x3	= volumeimage [i] * CBV_SCALER;
				a1	= c3 * x1;
				a2	= x2 * (header_data.awater1 * x2 + header_data.bwater1);
				a3	= c1 * x3;
				a4	= x2 * (header_data.aoxygen1 * x2 + header_data.boxygen1);
				a5	= c2 * x3;
				if (a4 == a5)
					oxygenimage [i]	= 0.0;
				else
					oxygenimage [i]	= sx * x2 * header_data.oxycont1 
							* (a1 - a2 - a3) / (a4 - a5);
			}
d172 9
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d12 1
a12 1
		float halflife, char *oxygen_imgfile, char *flow_imgfile, 
a22 2
		halflife,	half life of the radio isotope, used for tissue
				activity.
d51 1
a51 1
static char rcsid [] = "$Header$";
d54 1
a54 1
	halflife, oxygen_imgfile, flow_imgfile, volume_imgfile)
a59 1
	float	halflife;
@
