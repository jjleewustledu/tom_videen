head	1.10;
access;
symbols;
locks
	tom:1.10; strict;
comment	@ * @;


1.10
date	95.04.17.17.37.57;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	94.10.06.20.44.13;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	94.04.05.20.40.06;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	94.04.05.16.55.53;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	94.04.04.16.56.46;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	94.04.04.16.17.08;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	94.04.04.15.53.06;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	94.03.17.21.06.01;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	94.03.17.16.47.14;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	94.03.09.22.19.08;	author ty7777;	state Exp;
branches;
next	;


desc
@Working version.
@


1.10
log
@Compute the standard deviations.
@
text
@/*$Id: average.c,v 1.9 1994/10/06 20:44:13 ty7777 Exp ty7777 $*/
/*$Log: average.c,v $
 * Revision 1.9  1994/10/06  20:44:13  ty7777
 * there is noly one point if the dimensions are all 0.
 *
 * Revision 1.8  1994/04/05  20:40:06  ty7777
 * Move initialization of voxel_num to the outside of the loop.
 *
 * Revision 1.7  1994/04/05  16:55:53  ty7777
 * Changed the cc computation.
 *
 * Revision 1.6  1994/04/04  16:56:46  ty7777
 * Final release version.
 *
 * Revision 1.5  1994/04/04  16:17:08  ty7777
 * Added the total number of pixels in voi.
 *
 * Revision 1.4  1994/04/04  15:53:06  ty7777
 * The module voimean () is change to average ().
 *
 * Revision 1.3  1994/03/17  21:06:01  ty7777
 * Mask works.
 *
 * Revision 1.2  1994/03/17  16:47:14  ty7777
 * Added mask processing.
 *
 * Revision 1.1  1994/03/09  22:19:08  ty7777
 * Initial revision
 **/

/*___________________________________________________________________________
  File:		average.c

  Function:	int average (VOIDATA voidata, short width, short height,
		short num_slices, float *image3d, short *mask3d, 
		BOOLEAN mask_exist, FLOAT_POINT3D voxel_size, 
		float *mean, float *sd, int *voxels_in_voi)

  Arguments:	voidata,	data contains voi center and dimension.
		width,		width of each slice.
		height,		height of each slice.
		num_slices,	number of slices in image.
		image3d,	a real array containing the image data.
		mask3d,		a short interger array containing the masked image.
		mask_exist,	TRUE: mask image exists; FALSE: not exist.
		voxel_size,	voxel size in mm.
		mean,		mean of voi, returned.
		sd,		stadard deviation.
		voxels_in_voi,	number of pixels in voi.

  Return:	SUCCEED: successful; FAIL: error.

  Description:	This function computes the mean value of a voi.

  Called by:	rgtmean.c.	

  Calling:	None.	

  History:	Created by Tom Yang on 02/25/94. 
___________________________________________________________________________*/

#include <petutil/imglist.h>
#include <petutil/matrix.h>
#include <math.h>
#include "voimean.h"

#define	ERROR_BOUND	0.1

static char rcsid [] = "$Header$";

PUBLIC int average (voidata, width, height, num_slices, image3d, mask3d, 
mask_exist, voxel_size, mean, sd, voxels_in_voi)
	VOIDATA		voidata;
	short		width;
	short		height;
	short		num_slices;
	float		*image3d;
	short		*mask3d;
	BOOLEAN		mask_exist;
	FLOAT_POINT3D	voxel_size;
	float		*mean;
	float		*sd;
	int		*voxels_in_voi;
{
	double	sumsqrs;
	float	dx;
	float	dy;
	float	dz;
	float	l2;
	float	r2;
	float	rx;
	float	ry;
	float	rz;
	float	sum;
	float	value;
	float	xc;
	float	yc;
	float	zc;
	int	x;
	int	xmin;	/* in image space, in [1, width] */
	int	xmax;	/* in image space, in [xmin, width] */
	int	y;
	int	ymin;	/* in image space, in [1, height] */
	int	ymax;	/* in image space, in [ymin, height] */
	int	z;
	int	zmin;	/* in image space, in [1, num_slices] */
	int	zmax;	/* in image space, in [zmin, num_slices] */
	long	row_index;
	long	slice_dimension;
	long	slice_index;

	/*
	 * Define a volume that contains the 3D voi.
	 */
	xc	= voidata.center.x;
	yc	= voidata.center.y;
	zc	= voidata.center.z;
	dx	= voidata.dimension.x / voxel_size.x; 
	dy	= voidata.dimension.y / voxel_size.y; 
	dz	= voidata.dimension.z / voxel_size.z; 
	rx	= dx / 2.0;
	ry	= dy / 2.0;
	rz	= dz / 2.0;

	/*
	 * Move the center if necessary to make dimensions unchanged.
	 */
	x	= (int) dx;
	y	= (int) dy;
	z	= (int) dz;

	if (dx > 0 && xc - ((int) (xc)) == 0.0 && dx - x == 0.0 && x % 2 == 0)
	{
		xc	+= 0.5;
	}

	if (dy > 0 && yc - ((int) (yc)) == 0.0 && dy - y == 0.0 && y % 2 == 0)
	{
		yc	+= 0.5;
	}

	if (dz > 0 && zc - ((int) (zc)) == 0.0 && dz - z == 0.0 && z % 2 == 0)
	{
		zc	+= 0.5;
	}

	if (dx >= 0.0 && dx < 1.0)
		xc	= ROUND (xc);

	if (dy >= 0.0 && dy < 1.0)
		yc	= ROUND (yc);

	if (dz >= 0.0 && dz < 1.0)
		zc	= ROUND (zc);

	xmin		= ROUND (xc - rx);
	xmax		= ROUND (xc + rx);
	ymin		= ROUND (yc - ry);
	ymax		= ROUND (yc + ry);
	zmin		= ROUND (zc - rz);
	zmax		= ROUND (zc + rz);

	*mean		= 0.0;
	*sd		= 0.0;
	*voxels_in_voi	= 0;
	sum		= 0.0;
	sumsqrs		= 0.0;
	if (xmin >= 1 && xmax <= width 
	&& ymin >= 1 && ymax <= height
	&& zmin >= 1 && zmax <= num_slices)
	{
		slice_dimension	= width * height;

		if (voidata.voi_shape == VOI_CUBE)
		{
			for (z = zmin; z <= zmax; z++)
			{
				slice_index	= (z - 1) * slice_dimension;
				for (y = ymin; y <= ymax; y++)
				{
					row_index	= slice_index + (y - 1) * width;
					for (x = xmin; x <= xmax; x++)
					{
						if (pkg_abs (x - xc) <= rx 
						&& pkg_abs (y - yc) <= ry
						&& pkg_abs (z - zc) <= rz
						&& (!mask_exist 
						|| mask3d [row_index + x - 1] > 0))
						{
							value	= image3d [row_index + x - 1];
							sum	+= value;
							sumsqrs	+= value * value;
							(*voxels_in_voi)++;
						}
					}
				}
			}
		}
		else if (voidata.voi_shape == VOI_SPHERE)
		{
			r2	= rx * rx;
			for (z = zmin; z <= zmax; z++)
			{
				slice_index	= (z - 1) * slice_dimension;
				for (y = ymin; y <= ymax; y++)
				{
					row_index	= slice_index + (y - 1) * width;
					for (x = xmin; x <= xmax; x++)
					{
						l2	= (x - xc) * (x - xc)
							+ (y - yc) * (y - yc)
							+ (z - zc) * (z - zc);
						if (l2 <= r2
						&& (!mask_exist 
						|| mask3d [row_index + x - 1] > 0))
						{
							value	= image3d [row_index + x - 1];
							sum	+= value;
							sumsqrs	+= value * value;
							(*voxels_in_voi)++;
						}
					}
				}
			}
		}

		if (*voxels_in_voi > 0)
			*mean	= sum / *voxels_in_voi;
		else
			*mean	= MEAN_UNDEFINED;
	}
	else
	{
		*mean	= MEAN_UNDEFINED;
	}

	if (pkg_abs (*mean - MEAN_UNDEFINED) < ERROR_BOUND) 
	{
		*sd	= MEAN_UNDEFINED;
	}
	else if (*voxels_in_voi > 1)
	{
		*sd	= sqrt ( (sumsqrs - *voxels_in_voi * *mean * *mean) 
			/ (*voxels_in_voi - 1.0) );
	}

	return SUCCEED;
}
@


1.9
log
@there is noly one point if the dimensions are all 0.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.8 1994/04/05 20:40:06 ty7777 Exp ty7777 $*/
d3 3
d37 1
a37 1
		float *mean, int *voxels_in_voi)
d48 1
d64 1
d67 1
a67 1
static char rcsid [] = "$Id: average.c,v 1.8 1994/04/05 20:40:06 ty7777 Exp ty7777 $";
d69 2
d72 1
a72 1
mask_exist, voxel_size, mean, voxels_in_voi)
d82 1
d85 1
d148 1
a148 1
		xc	= ROUND (dx);
d151 1
a151 1
		yc	= ROUND (dy);
d154 1
a154 1
		zc	= ROUND (dz);
d163 2
d166 2
a171 1
		sum		= 0.0;
d190 3
a192 1
							sum	+= image3d [row_index + x - 1];
a212 1
						value	= image3d [row_index + x - 1];
d217 1
d219 1
d235 10
@


1.8
log
@Move initialization of voxel_num to the outside of the loop.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.7 1994/04/05 16:55:53 ty7777 Exp ty7777 $*/
d3 3
d62 1
a62 1
static char rcsid [] = "$Id: average.c,v 1.7 1994/04/05 16:55:53 ty7777 Exp ty7777 $";
d117 1
a117 1
	 * Move the center if necessary.
d138 9
d153 1
a154 1

@


1.7
log
@Changed the cc computation.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.6 1994/04/04 16:56:46 ty7777 Exp ty7777 $*/
d3 3
d31 1
a31 1
		float *mean, int *pixels_in_voi)
d42 1
a42 1
		pixels_in_voi,	number of pixels in voi.
d59 1
a59 1
static char rcsid [] = "$Id: average.c,v 1.6 1994/04/04 16:56:46 ty7777 Exp ty7777 $";
d62 1
a62 1
mask_exist, voxel_size, mean, pixels_in_voi)
d72 1
a72 1
	int		*pixels_in_voi;
d135 7
a141 6
	xmin	= ROUND (xc - rx);
	xmax	= ROUND (xc + rx);
	ymin	= ROUND (yc - ry);
	ymax	= ROUND (yc + ry);
	zmin	= ROUND (zc - rz);
	zmax	= ROUND (zc + rz);
a147 1
		*pixels_in_voi	= 0;
d167 1
a167 1
							(*pixels_in_voi)++;
d193 1
a193 1
							(*pixels_in_voi)++;
d200 2
a201 2
		if (*pixels_in_voi > 0)
			*mean	= sum / *pixels_in_voi;
@


1.6
log
@Final release version.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.5 1994/04/04 16:17:08 ty7777 Exp ty7777 $*/
d3 3
d56 1
a56 1
static char rcsid [] = "$Id: average.c,v 1.5 1994/04/04 16:17:08 ty7777 Exp ty7777 $";
a195 1

@


1.5
log
@Added the total number of pixels in voi.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.4 1994/04/04 15:53:06 ty7777 Exp ty7777 $*/
d3 3
d53 1
a53 1
static char rcsid [] = "$Id: average.c,v 1.4 1994/04/04 15:53:06 ty7777 Exp ty7777 $";
d55 2
a56 1
PUBLIC int average (voidata, width, height, num_slices, image3d, mask3d, mask_exist, voxel_size, mean)
@


1.4
log
@The module voimean () is change to average ().
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.3 1994/03/17 21:06:01 ty7777 Exp ty7777 $*/
d3 3
d22 1
a22 1
		float *mean)
d33 1
d50 1
a50 1
static char rcsid [] = "$Id: average.c,v 1.3 1994/03/17 21:06:01 ty7777 Exp ty7777 $";
d62 1
a85 1
	long	actual_num_locations;
d136 3
a138 3
		sum			= 0.0;
		actual_num_locations	= 0;
		slice_dimension		= width * height;
d157 1
a157 1
							actual_num_locations++;
d183 1
a183 1
							actual_num_locations++;
d191 2
a192 2
		if (actual_num_locations > 0)
			*mean	= sum / actual_num_locations;
@


1.3
log
@Mask works.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.2 1994/03/17 16:47:14 ty7777 Exp ty7777 $*/
d3 3
d46 1
a46 1
static char rcsid [] = "$Id: average.c,v 1.2 1994/03/17 16:47:14 ty7777 Exp ty7777 $";
d48 1
a48 1
PUBLIC int voimean (voidata, width, height, num_slices, image3d, mask3d, mask_exist, voxel_size, mean)
@


1.2
log
@Added mask processing.
@
text
@d1 1
a1 1
/*$Id: average.c,v 1.1 1994/03/09 22:19:08 ty7777 Exp ty7777 $*/
d3 3
d14 2
a15 1
		short num_slices, float *image3d, FLOAT_POINT3D voxel_size, 
d23 2
d43 1
a43 1
static char rcsid [] = "$Id: average.c,v 1.1 1994/03/09 22:19:08 ty7777 Exp ty7777 $";
d51 1
a51 1
	float		*mask3d;
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d37 1
a37 1
static char rcsid [] = "$Id$";
d39 1
a39 1
PUBLIC int voimean (voidata, width, height, num_slices, image3d, voxel_size, mean)
d45 2
d139 3
a141 1
						&& pkg_abs (z - zc) <= rz)
d165 3
a167 1
						if (l2 <= r2)
@
