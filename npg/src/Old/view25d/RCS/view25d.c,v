head	2.19;
access;
symbols;
locks; strict;
comment	@ * @;


2.19
date	95.10.26.19.04.10;	author ty7777;	state Exp;
branches;
next	2.18;

2.18
date	95.09.08.21.41.05;	author ty7777;	state Exp;
branches;
next	2.17;

2.17
date	95.09.06.18.26.29;	author ty7777;	state Exp;
branches;
next	2.16;

2.16
date	95.08.31.20.18.59;	author ty7777;	state Exp;
branches;
next	2.15;

2.15
date	95.08.28.15.39.11;	author ty7777;	state Exp;
branches;
next	2.14;

2.14
date	95.07.31.15.11.30;	author ty7777;	state Exp;
branches;
next	2.13;

2.13
date	95.07.07.17.12.55;	author ty7777;	state Exp;
branches;
next	2.12;

2.12
date	95.06.30.15.22.33;	author ty7777;	state Exp;
branches;
next	2.11;

2.11
date	95.01.18.19.41.29;	author ty7777;	state Exp;
branches;
next	2.10;

2.10
date	95.01.18.19.04.43;	author ty7777;	state Exp;
branches;
next	2.9;

2.9
date	95.01.17.20.08.27;	author ty7777;	state Exp;
branches;
next	2.8;

2.8
date	94.12.30.21.20.17;	author ty7777;	state Exp;
branches;
next	2.7;

2.7
date	94.12.19.22.47.32;	author ty7777;	state Exp;
branches;
next	2.6;

2.6
date	94.12.01.20.10.34;	author ty7777;	state Exp;
branches;
next	2.5;

2.5
date	94.12.01.17.12.11;	author ty7777;	state Exp;
branches;
next	2.4;

2.4
date	94.11.03.20.12.51;	author ty7777;	state Exp;
branches;
next	2.3;

2.3
date	94.10.26.16.14.58;	author ty7777;	state Exp;
branches;
next	2.2;

2.2
date	94.10.19.19.27.10;	author ty7777;	state Exp;
branches;
next	2.1;

2.1
date	94.10.19.17.04.11;	author ty7777;	state Exp;
branches;
next	1.52;

1.52
date	94.10.18.19.41.38;	author ty7777;	state Exp;
branches;
next	1.51;

1.51
date	94.10.17.20.10.34;	author ty7777;	state Exp;
branches;
next	1.50;

1.50
date	94.08.17.19.06.52;	author ty7777;	state Exp;
branches;
next	1.49;

1.49
date	94.08.16.16.28.40;	author ty7777;	state Exp;
branches;
next	1.48;

1.48
date	94.05.09.16.08.21;	author ty7777;	state Exp;
branches;
next	1.47;

1.47
date	94.04.18.17.55.36;	author ty7777;	state Exp;
branches;
next	1.46;

1.46
date	94.04.13.15.10.21;	author ty7777;	state Exp;
branches;
next	1.45;

1.45
date	94.04.12.19.02.17;	author ty7777;	state Exp;
branches;
next	1.44;

1.44
date	94.04.12.15.28.03;	author ty7777;	state Exp;
branches;
next	1.43;

1.43
date	94.02.28.19.47.46;	author ty7777;	state Exp;
branches;
next	1.42;

1.42
date	94.01.24.20.08.52;	author ty7777;	state Exp;
branches;
next	1.41;

1.41
date	94.01.12.21.41.26;	author ty7777;	state Exp;
branches;
next	1.40;

1.40
date	94.01.11.22.23.45;	author ty7777;	state Exp;
branches;
next	1.39;

1.39
date	93.12.16.15.52.17;	author ty7777;	state Exp;
branches;
next	1.38;

1.38
date	93.12.14.20.00.53;	author ty7777;	state Exp;
branches;
next	1.37;

1.37
date	93.12.13.15.19.31;	author ty7777;	state Exp;
branches;
next	1.36;

1.36
date	93.10.07.16.19.03;	author ty7777;	state Exp;
branches;
next	1.35;

1.35
date	93.10.04.21.02.11;	author ty7777;	state Exp;
branches;
next	1.34;

1.34
date	93.09.27.19.01.54;	author ty7777;	state Exp;
branches;
next	1.33;

1.33
date	93.09.27.14.21.34;	author ty7777;	state Exp;
branches;
next	1.32;

1.32
date	93.09.23.20.41.59;	author ty7777;	state Exp;
branches;
next	1.31;

1.31
date	93.07.13.15.07.39;	author ty7777;	state Exp;
branches;
next	1.30;

1.30
date	93.07.06.16.50.30;	author ty7777;	state Exp;
branches;
next	1.29;

1.29
date	93.06.02.17.17.36;	author ty7777;	state Exp;
branches;
next	1.28;

1.28
date	93.05.20.15.11.13;	author ty7777;	state Exp;
branches;
next	1.27;

1.27
date	93.05.07.21.56.23;	author ty7777;	state Exp;
branches;
next	1.26;

1.26
date	93.04.09.16.22.53;	author ty7777;	state Exp;
branches;
next	1.25;

1.25
date	93.04.05.17.33.49;	author ty7777;	state Exp;
branches;
next	1.24;

1.24
date	93.02.23.18.15.48;	author ty7777;	state Exp;
branches;
next	1.23;

1.23
date	93.01.28.15.43.29;	author ty7777;	state Exp;
branches;
next	1.22;

1.22
date	93.01.11.15.49.38;	author ty7777;	state Exp;
branches;
next	1.21;

1.21
date	92.12.07.20.35.23;	author ty7777;	state Exp;
branches;
next	1.20;

1.20
date	92.11.20.16.35.54;	author ty7777;	state Exp;
branches;
next	1.19;

1.19
date	92.09.23.19.31.02;	author ty7777;	state Exp;
branches;
next	1.18;

1.18
date	92.08.03.15.01.58;	author ty7777;	state Exp;
branches;
next	1.17;

1.17
date	92.07.31.20.52.18;	author ty7777;	state Exp;
branches;
next	1.16;

1.16
date	92.07.20.19.31.28;	author ty7777;	state Exp;
branches;
next	1.15;

1.15
date	92.07.17.18.05.08;	author ty7777;	state Exp;
branches;
next	1.14;

1.14
date	92.07.16.18.57.29;	author ty7777;	state Exp;
branches;
next	1.13;

1.13
date	92.07.16.14.32.54;	author ty7777;	state Exp;
branches;
next	1.12;

1.12
date	92.07.15.15.44.16;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	92.07.14.14.58.53;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	92.07.09.22.15.18;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	92.07.08.18.48.28;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	92.07.06.22.22.46;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	92.07.06.18.19.31;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	92.06.30.21.49.52;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	92.06.01.13.50.36;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	92.05.27.14.51.44;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	92.05.26.14.48.36;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	92.05.20.19.50.13;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	92.04.28.17.58.26;	author ty7777;	state Exp;
branches;
next	;


desc
@View25d C Source Code First Version.
@


2.19
log
@Release version.
@
text
@/*$Id: view25d.c,v 2.18 1995/09/08 21:41:05 ty7777 Exp ty7777 $*/
/*$Log: view25d.c,v $
 * Revision 2.18  1995/09/08  21:41:05  ty7777
 * Updated to introduce atlas 2.
 *
 * Revision 2.17  1995/09/06  18:26:29  ty7777
 * Before fixing bugs reported by Avi.
 *
 * Revision 2.16  1995/08/31  20:18:59  ty7777
 * Before watch cursor works.
 *
 * Revision 2.15  1995/08/28  15:39:11  ty7777
 * Before adding mutual image1 and image2 point display.
 *
 * Revision 2.14  1995/07/31  15:11:30  ty7777
 * Before working on tracking.
 *
 * Revision 2.13  1995/07/07  17:12:55  ty7777
 * Two data sets works correctly.
 *
 * Revision 2.12  1995/06/30  15:22:33  ty7777
 *  Before making further changes, tow independent color bars worked.
 *
 * Revision 2.11  1995/01/18  19:41:29  ty7777
 * Increase the array size for ColorTableItems.
 *
 * Revision 2.10  1995/01/18  19:04:43  ty7777
 * Added PosNeg_on_White.tbl.
 *
 * Revision 2.9  1995/01/17  20:08:27  ty7777
 * Deleted things that are related to data_stes.
 *
 * Revision 2.8  1994/12/30  21:20:17  ty7777
 * Added processing for big fonts.
 *
 * Revision 2.7  1994/12/19  22:47:32  ty7777
 * Added color tables Positive.tbl and Negative.tbl.
 *
 * Revision 2.6  1994/12/01  20:10:34  ty7777
 * Get rid of the path in the atl files.
 *
 * Revision 2.5  1994/12/01  17:12:11  ty7777
 * Get rid of szLibraryPath.
 *
 * Revision 2.4  1994/11/03  20:12:51  ty7777
 * Added local_path.
 *
 * Revision 2.3  1994/10/26  16:14:58  ty7777
 * Deleted winutil.h because app.h already contains it.
 *
 * Revision 2.2  1994/10/19  19:27:10  ty7777
 * Same as the last one.
 *
 * Revision 2.1  1994/10/19  17:04:11  ty7777
 * The pattern *pattern* works in the file selection menu.
 *
 * Revision 1.52  1994/10/18  19:41:38  ty7777
 * After *pattern works.
 *
 * Revision 1.51  1994/10/17  20:10:34  ty7777
 * After *.pattern works.
 *
 * Revision 1.50  1994/08/17  19:06:52  ty7777
 * Dynamic change of X, Y, Z labels.
 *
 * Revision 1.49  1994/08/16  16:28:40  ty7777
 * Moved the opening of the Data Type menu to view25d.c.
 *
 * Revision 1.48  1994/05/09  16:08:21  ty7777
 * Added Color43.tbl.
 *
 * Revision 1.47  1994/04/18  17:55:36  ty7777
 * Added procesing for zorigin.
 *
 * Revision 1.46  1994/04/13  15:10:21  ty7777
 * Changed the color table names.
 *
 * Revision 1.45  1994/04/12  19:02:17  ty7777
 * Change from Raichle.tbl to White_on_Black.tbl.
 *
 * Revision 1.44  1994/04/12  15:28:03  ty7777
 * Added Raichle.tbl.
 *
 * Revision 1.43  1994/02/28  19:47:46  ty7777
 * Added Black_on_White color table.
 *
 * Revision 1.42  1994/01/24  20:08:52  ty7777
 * Added copyright information.
 *
 * Revision 1.41  1994/01/12  21:41:26  ty7777
 * Change the default af3d directory.
 *
 * Revision 1.40  1994/01/11  22:23:45  ty7777
 * Added processing for legend.
 *
 * Revision 1.39  1993/12/16  15:52:17  ty7777
 * Added coordEditTextData.
 *
 * Revision 1.38  1993/12/14  20:00:53  ty7777
 * Added button Maximum Distance (mm) in the AF3D Representation menu.
 *
 * Revision 1.37  1993/12/13  15:19:31  ty7777
 * After adding view25d.
 *
 * Revision 1.36  1993/10/07  16:19:03  ty7777
 * Added rcsid.
 **/

#include "app.h"
#include "view25d.h"
#include <petutil/matrix7.h>
#include <sys/stat.h>

#define MAX_STRINGS  64
#define MAX_ARGS     64

char *getenv ();

Window cursor_window;

#include "view25d.widgets"
#include "view25d.callbacks"

static char *rcsid = "$Id: view25d.c,v 2.18 1995/09/08 21:41:05 ty7777 Exp ty7777 $";

PUBLIC XmString xmStrErrorMessages [];
PUBLIC XmString xmStrSymbolSize [];

/*________________________________________________________________________________	
	Function:
		main	
	Arguments:
		argc:	number of command line arguments
		argv:	vector of command line arguments
			argv[0] : name of input file for gammaz data sets
	Description:
		Maintains a virtual screen of size DRAW_AREA_WIDTH by
		DRAW_AREA_HEIGHT. The virtual screen is viewed through a
		drawing area widget with slider bars to control positioning
		over the virtual screen. Atlas slices are read in and displayed
		from an external file (see hardcoded name below in function).
		Mouse functions and window manipulation are controlled by
		a menu on top edge of screen. Both the menu and drawing area
		are children of the Motif widget MainMenu.

	Author:	Tom Yang
	Date:	Jan 15, 1991
_________________________________________________________________________________*/

char	*colorSetTable []	= {"Black_on_White.tbl",
				   "Color40.tbl", 
				   "Color42.tbl", 
				   "Color43.tbl", 
				   "Negative.tbl",
				   "PosNeg_on_Black.tbl",
				   "PosNeg_on_White.tbl",
				   "Positive.tbl",
				   "White_on_Black.tbl"};
char	*fontTable []		= {"courier", 
				   "helvetica", 
				   "new century schoolbook", 
				   "symbol", 
				   "times"};
char	*fontSizeTable []	= {"8", 
				   "10", 
				   "12", 
				   "14", 
				   "18", 
				   "24", 
				   "32", 
				   "36", 
				   "48", 
				   "60", 
				   "72", 
				   "100", 
				   "150", 
				   "200", 
				   "300"};

char	*alignmentList []	= {"Left", 
				   "Center", 
				   "Right"};

char	*slantList []		= {"Roman", 
				   "Italic", 
				   "Oblique"};

char	*weightList []		= {"Medium", 
				   "Bold"};

char	*orientList []		= {"Horizontal", 
				   "Vertical"};

char	*scaleList []		= {"Positive", 
				   "Negative",
				   "Both"};

char	*atlasOrientList []	= {"Transverse", 
				   "Coronal",
				   "FacingLeft",
				   "FacingRight"};

char *errorMessages [] = {"Your binary af3d file has incorrect format. Please try again or cancel",
			  "The file you selected is a directory, empty or does not exist. Please try again.",
		          "The directory you selected does not exist."};

static unsigned char rect_bitmap [32] = {
	0xff, 0xff, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 
	0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 
	0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 
	0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xff, 0xff};

static unsigned char filled_rect_bitmap [32] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

static unsigned char circle_bitmap [32] = {   
	0x07, 0xc0, 0x18, 0x30, 0x20, 0x10, 0x40, 0x08,
	0x40, 0x08, 0x80, 0x04, 0x80, 0x04, 0x80, 0x04,
	0x80, 0x04, 0x80, 0x04, 0x40, 0x08, 0x40, 0x08,
	0x20, 0x10, 0x18, 0x30, 0x07, 0xc0, 0x00, 0x00};

static unsigned char filled_circle_bitmap [32] = {
	0x07, 0xc0, 0x1f, 0xf0, 0x3f, 0xf8, 0x7f, 0xfc, 
	0x7f, 0xfc, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 
	0xff, 0xfe, 0xff, 0xfe, 0x7f, 0xfc, 0x7f, 0xfc,
	0x3f, 0xf8, 0x1f, 0xf0, 0x07, 0xc0, 0x00, 0x00};

static unsigned char diamond_bitmap [32] = {
	0x01, 0x80, 0x02, 0x40, 0x04, 0x20, 0x08, 0x10, 
	0x10, 0x08, 0x20, 0x04, 0x40, 0x02, 0x80, 0x01, 
	0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10, 0x08,
	0x08, 0x10, 0x04, 0x20, 0x02, 0x40, 0x01, 0x80};

static unsigned char filled_diamond_bitmap [32] = {
	0x01, 0x80, 0x03, 0xc0, 0x07, 0xe0, 0x0f, 0xf0, 
	0x1f, 0xf8, 0x3f, 0xfc, 0x7f, 0xfe, 0xff, 0xff, 
	0xff, 0xff, 0x7f, 0xfe, 0x3f, 0xfc, 0x1f, 0xf8, 
	0x0f, 0xf0, 0x07, 0xe0, 0x03, 0xc0, 0x01, 0x80};

static unsigned char up_triangle_bitmap [32] = {
	0x01, 0x80, 0x02, 0x40, 0x02, 0x40, 0x04, 0x20, 
	0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x10, 0x08, 
	0x10, 0x08, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04,
	0x40, 0x02, 0x40, 0x02, 0x80, 0x01, 0xff, 0xff};

static unsigned char filled_up_triangle_bitmap [32] = {
	0x01, 0x80, 0x01, 0x80, 0x03, 0xc0, 0x03, 0xc0, 
	0x07, 0xe0, 0x07, 0xe0, 0x0f, 0xf0, 0x0f, 0xf0, 
	0x1f, 0xf8, 0x1f, 0xf8, 0x3f, 0xfc, 0x3f, 0xfc, 
	0x7f, 0xfe, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff};

static unsigned char down_triangle_bitmap [32] = {
	0xff, 0xff, 0x80, 0x01, 0x40, 0x02, 0x40, 0x02, 
	0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0x10, 0x08, 
	0x10, 0x08, 0x08, 0x10, 0x08, 0x10, 0x04, 0x20,
	0x04, 0x20, 0x02, 0x40, 0x02, 0x40, 0x01, 0x80};

static unsigned char filled_down_triangle_bitmap [32] = {
	0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0x7f, 0xfe, 
	0x3f, 0xfc, 0x3f, 0xfc, 0x1f, 0xf8, 0x1f, 0xf8, 
	0x0f, 0xf0, 0x0f, 0xf0, 0x07, 0xe0, 0x07, 0xe0, 
	0x03, 0xc0, 0x03, 0xc0, 0x01, 0x80, 0x01, 0x80};

static unsigned char left_triangle_bitmap [32] = {
	0x00, 0x03, 0x00, 0x0c, 0x00, 0x31, 0x00, 0xc1, 
	0x03, 0x01, 0x0c, 0x01, 0x30, 0x01, 0xc0, 0x01, 
	0xc0, 0x01, 0x30, 0x01, 0x0c, 0x01, 0x03, 0x01, 
	0x00, 0xc1, 0x00, 0x31, 0x00, 0x0c, 0x00, 0x03};

static unsigned char filled_left_triangle_bitmap [32] = {
	0x00, 0x03, 0x00, 0x0f, 0x00, 0x3f, 0x00, 0xff, 
	0x03, 0xff, 0x0f, 0xff, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x3f, 0xff, 0x0f, 0xff, 0x03, 0xff,
	0x00, 0xff, 0x00, 0x3f, 0x00, 0x0f, 0x00, 0x03};

static unsigned char right_triangle_bitmap [32] = {
	0xc0, 0x00, 0xb0, 0x00, 0x8c, 0x00, 0x83, 0x00, 
	0x80, 0xc0, 0x80, 0x30, 0x80, 0x0c, 0x80, 0x03, 
	0x80, 0x03, 0x80, 0x0c, 0x80, 0x30, 0x80, 0xc0,
	0x83, 0x00, 0x8c, 0x00, 0xb0, 0x00, 0xc0, 0x00};

static unsigned char filled_right_triangle_bitmap [32] = {
	0xc0, 0x00, 0xf0, 0x00, 0xfc, 0x00, 0xff, 0x00, 
	0xff, 0xc0, 0xff, 0xf0, 0xff, 0xfc, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xf0, 0xff, 0xc0,
	0xff, 0x00, 0xfc, 0x00, 0xf0, 0x00, 0xc0, 0x00};

static unsigned char pixel_bitmap [32] = {
	0xff, 0xff, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 
	0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0xff, 0xff, 
	0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 
	0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0xff, 0xff};

Widget createDialogShell (name)
	char	*name;
{
	Widget	shell;
	char	*s;

	s = XtMalloc (strlen (name) + 4);
	strcpy (s, name);
	strcat (s, "_ds");
	shell = XmCreateDialogShell (appShell, s, NULL, 0);
	XtFree (s);
	return (shell);
}

PUBLIC void SetColorParameters (display, window, screen, default_parameters)
	Display		*display;
	Window		window;
	int		screen;
	PARAMETERS_DATA	*default_parameters;
{
	int			n;
	Arg			arglist[2];
	Pixel			selected_color_pixel;
	XColor			color;
	Colormap		dcmap;
	
	dcmap		= XDefaultColormap (display, screen);

	n	= 0;
	XtSetArg (arglist [n], XtNbackground, &selected_color_pixel); n++;
	XtGetValues (GetActiveWidget (default_parameters->back_color_set, 
						MAX_NONIMAGE_COLOR), arglist, n);
	color.pixel	= selected_color_pixel;
	XQueryColor (display, dcmap, &color); 
	rgbBackground.red	= color.red;
	rgbBackground.green	= color.green;
	rgbBackground.blue	= color.blue;

	n	= 0;
	XtSetArg (arglist [n], XtNbackground, &selected_color_pixel); n++;
	XtGetValues (GetActiveWidget (default_parameters->atlas1_color_set, 
						MAX_NONIMAGE_COLOR + 1), arglist, n);
	color.pixel	= selected_color_pixel;
	XQueryColor (display, dcmap, &color); 
	rgbAtlas1.red	= color.red;
	rgbAtlas1.green	= color.green;
	rgbAtlas1.blue	= color.blue;

	n	= 0;
	XtSetArg (arglist [n], XtNbackground, &selected_color_pixel); n++;
	XtGetValues (GetActiveWidget (default_parameters->atlas2_color_set, 
						MAX_NONIMAGE_COLOR + 1), arglist, n);
	color.pixel	= selected_color_pixel;
	XQueryColor (display, dcmap, &color); 
	rgbAtlas2.red	= color.red;
	rgbAtlas2.green	= color.green;
	rgbAtlas2.blue	= color.blue;

	n	= 0;
	XtSetArg (arglist [n], XtNbackground, &selected_color_pixel); n++;
	XtGetValues (GetActiveWidget (default_parameters->label_color_set, 
						MAX_NONIMAGE_COLOR), arglist, n);
	color.pixel	= selected_color_pixel;
	XQueryColor (display, dcmap, &color); 
	rgbLabel.red	= color.red;
	rgbLabel.green	= color.green;
	rgbLabel.blue	= color.blue;

	n	= 0;
	XtSetArg (arglist[n], XtNbackground, &pixelTextColor); n++;
	XtGetValues (GetActiveWidget (default_parameters->font_menu->font_color_set, 
					MAX_NONIMAGE_COLOR), arglist, n);

	ImageColormap (display, window, szImage1ColorTableName, szImage2ColorTableName);
}

main (argc, argv)
int argc;
char **argv;
{
	ADD_POINTS_DATA			cancelAddPointsData;
	ADD_POINTS_DATA			selectAddPointsData;
	ALTER_REGION_DATA		alterRegionData [MAX_REGIONSET_NUM];
	ALTER_SYMBOL_DATA		alterSymbolData [MAX_AF3DSET_NUM];
	AUTO_IMAGE_VALUE_DATA		autoImage1ValueData;
	AUTO_IMAGE_VALUE_DATA		autoImage2ValueData;
	Arg				arglist [MAX_ARGS];
	BOOLEAN				*display_region		= bDisplayRegion;
	BOOLEAN				*display_symbol		= bDisplaySymbol;
	COLOR_BAR_DATA			redrawColorBarData;
	COLOR_BAR_DATA			selectColorBarData;
	COLOR_BAR_DATA			cancelColorBarData;
	COLOR_BAR_MENU			color_bar_menu;
	Colormap			colormap;	/* X colormap, for color allocation */
	Cursor				watch_cursor;
	DATA_FILE_SELECTION		selectFileData;
	DATA_TYPE_DATA			selectSliceCancelData;
	DATA_TYPE_DATA			selectSliceData;
	DATA_TYPE_DATA			selectSliceOKData;
	DATA_TYPE_MENU			data_type_menu;
	DRAW_DATA			draw_data;
	Display				*display;	/* X display */
	FILE_SELECTION_DATA		AF3DFileSelectionData;
	FILE_SELECTION_DATA		atlasFileSelectionData;
	FILE_SELECTION_DATA		logFileSelectionData;
	FILE_SELECTION_DATA		getDefaultsSelectionData;
	FILE_SELECTION_DATA		maskFileSelectionData;
	FILE_SELECTION_DATA		image1FileSelectionData;
	FILE_SELECTION_DATA		image2FileSelectionData;
	FILE_SELECTION_DATA		regionFileSelectionData;
	FILE_SELECTION_DATA		saveDefaultsSelectionData;
	FILE_SELECTION_DATA		saveWinDumpSelectionData;
	FONT_DATA			cancelFontData;
	FONT_DATA			selectFontData;
	FONT_MENU			font_menu;
	FORMAT_SCREEN_DATA		cancelFormatScreenData;
	FORMAT_SCREEN_DATA		redrawFormatScreenData;
	FORMAT_SCREEN_DATA		selectFormatScreenData;
	FORMAT_SCREEN_MENU		format_screen_menu;
	GC				gcCanvas;       /* gc for canvas */
	GC				xorgc;      	/* gc for inverting */
	GRAPHICS_DATA			graphics_data;
	LABEL_CHANGE_DATA		areaSavedLabel;
	LABEL_CHANGE_DATA		fileFormatLabel;
	MAGNIFICATION_SCALE_DATA	magnificationScaleData;
	MAG_SCALE_DATA			optionCancelData;
	MAG_SCALE_DATA			optionRedrawData;
	MAG_SCALE_DATA			optionSelectData;
	MAG_SCALE_MENU			mag_scale_menu;
	NONIMAGE_COLOR_DATA		atlas1ColorData;
	NONIMAGE_COLOR_DATA		atlas2ColorData;
	NONIMAGE_COLOR_DATA		backColorData;
	NONIMAGE_COLOR_DATA		labelColorData;
	OPEN_ADDPOINTS_DATA		openAddPointsData;		
	PARAMETERS_DATA			default_parameters;
	IMAGE_COLOR_DATA		cancelImage1ColorData;
	IMAGE_COLOR_DATA		selectImage1ColorData;
	IMAGE_COLOR_DATA		cancelImage2ColorData;
	IMAGE_COLOR_DATA		selectImage2ColorData;
	Pixel				background;
	Pixel				foreground;
	Pixel				old_foreground;
	Pixel				*pixel_region_color	= pixelRegionColor;
	Pixel				*pixel_symbol_color	= pixelAF3DColor;
	Pixmap				AF3DLabelSymbols [MAX_AF3DSET_NUM];
	Pixmap				AF3DSymbols [MAX_SYMBOL_NUM];
	Pixmap				RegionLabelPatterns [MAX_REGIONSET_NUM];
	Pixmap				RegionStyles [REGION_STYLE_NUM];
	REGION_BASIC_DATA		regionBasicData;
	REGION_DATA			cancelRegionData;
	REGION_DATA			redrawRegionData;
	REGION_DATA			selectRegionData;
	REGION_MENU			region_menu;
	REGION_SHOW_DATA		regionColorShowData [MAX_NONIMAGE_COLOR];
	REGION_SHOW_DATA		regionPatternShowData;
	SAVE_IMAGE_DATA			cancelSaveImageData;
	SAVE_IMAGE_DATA			selectSaveImageData;
	SELECT_SLICES_DATA		selectSlicesData;
	STATUS_CHANGE_DATA		dynamicPatternData [REGION_STYLE_NUM];
	STATUS_CHANGE_DATA		dynamicShapeData [MAX_SYMBOL_NUM];
	STATUS_CHANGE_DATA		freezeEnableData;
	STATUS_CHANGE_DATA		freezeDisableData;
	SYMBOL_BASIC_DATA		symbolBasicData;
	SYMBOL_DATA			cancelSymbolData;
	SYMBOL_DATA			redrawSymbolData;
	SYMBOL_DATA			selectSymbolData;
	SYMBOL_MENU			symbol_menu;
	SYMBOL_SHOW_DATA		symbolColorShowData [MAX_NONIMAGE_COLOR];
	SYMBOL_SHOW_DATA		symbolShapeShowData;
	TEXT_EDIT_DATA			cancelTextEditData;
	TEXT_EDIT_DATA			coordTextEditData;
	TEXT_EDIT_DATA			mouseTextEditData;
	Widget				atlas1ColorSet [MAX_NONIMAGE_COLOR + 1];
	Widget				atlas2ColorSet [MAX_NONIMAGE_COLOR + 1];
	Widget				backColorSet [MAX_NONIMAGE_COLOR];
	Widget				fontColorSet [MAX_NONIMAGE_COLOR];
	Widget				labelColorSet [MAX_NONIMAGE_COLOR];
	Widget				mag_set [MAG_NUM];
	Widget				orientation_set [ORIENTATION_NUM];
	Window				root_window;	/* window to display in */
	Widget				scale_set_image1 [SCALE_NUM];
	Widget				scale_set_image2 [SCALE_NUM];
	Widget				textAlignment [ALIGNMENT_NUM];
	Widget				textOrient [ORIENT_NUM];
	Widget				textSlant [SLANT_NUM];
	Widget				textWeight [WEIGHT_NUM];
	Window				window;         /* window to display in */
	XColor				color;		/* used to the default color */
	XSetWindowAttributes		wattr;		/* window attribute buffer */
	XmString			string_cancel;
	XmString			string_redraw;
	XmString			string_select;
	XmString			string_null;
	XmString			ColorTableItems [9];
	XmString			*xmerror_messages	= xmStrErrorMessages;
	XmString			xmfont_table [5];
	XmString			*xmsize_symbol		= xmStrSymbolSize;
	XmString			xmsize_table [15];
	XmString			xmstring_buffer;
	char				*af3d_pathname		= szAF3DPathName;
	char				*atlas_filename		= szAtlasFileName;
	char				*atlas_pathname		= szAtlasPathName;
	char				*coordinates_pathname	= szCoordinatesPathName;
	char				*defaults_pathname	= szDefaultsPathName;
	char				*dynamic_region_color	= cDynamicRegionColor;
	char				*dynamic_region_type	= cDynamicRegionType;
	char				*dynamic_symbol_color	= cDynamicSymbolColor;
	char				*dynamic_symbol_type	= cDynamicSymbolType;
	char				*library_pathname;
	char				*local_path;
	char				*parameter_file;
	char				*petmask_pathname	= szImageMaskPathName;
	char				*image1_pathname	= szImage1PathName;
	char				*image2_pathname	= szImage2PathName;
	char				*region_color_code	= cRegionColor;
	char				*region_pathname	= szRegionPathName;
	char				*region_type		= cRegionType;
	char				*symbol_color_code	= cSymbolColor;
	char				**symbol_names		= symbolNames;
	char				*symbol_type		= cSymbolType;
	char				szBuffer [MAXLINE]; /* atlas region filename */
	char				*windump_pathname	= szWinDumpPathName;
	int				i, j, k;	/* counters */
	int				n;
	int				screen;		/* X screen */
	unsigned short			*symbol_size		= nSymbolSize;

     unsigned long valuemask;
     XSetWindowAttributes attributes;

	if (argc < 5)
	{
		fprintf (stderr, "Library Path Is Not Found.\n");
		exit (FAIL);
	}

	library_pathname	= argv [1];
	local_path		= argv [2];
	parameter_file		= argv [3];
	strcpy (atlas_filename, argv [4]);
	strcpy (szImageMaskFileName, argv [5]);
	strcpy (szImage1ColorTableName, argv [6]);
	strcpy (szImage2ColorTableName, argv [7]);

	for (i = 0; i < XtNumber (colorSetTable); i++)
	{
		ColorTableItems [i] = XmStringCreate (colorSetTable [i], XmSTRING_DEFAULT_CHARSET);	
	}

	for (i = 0; i < XtNumber (fontTable); i++)
	{
		xmfont_table [i] = XmStringCreate (fontTable [i], XmSTRING_DEFAULT_CHARSET);	
	}

	for (i = 0; i < XtNumber (fontSizeTable); i++)
	{
		xmsize_table [i] = XmStringCreate (fontSizeTable [i], XmSTRING_DEFAULT_CHARSET);	
	}

	for (i = 0; i < XtNumber (errorMessages); i++)
	{
		xmerror_messages [i] = XmStringCreate (errorMessages [i], XmSTRING_DEFAULT_CHARSET);	
	}

	appShell	= XtInitialize ("topLevel", "view25d", NULL, 0, &argc, argv);

	/* 
	 * Get the current display and screen. 
	 */
	display			= XtDisplay (appShell);
	screen			= DefaultScreen (display);
	colormap		= DefaultColormap (display, screen);

	IMAGE_DATA_TYPE		= XInternAtom (display, "Image Data Type", 0);
	IMAGE_COLOR_TYPE	= XInternAtom (display, "Image Color Type", 0);
	IMAGE_NCOLOR		= XInternAtom (display, "Image Color Number", 0);

	string_redraw	= XmStringCreate ("Redraw", XmSTRING_DEFAULT_CHARSET);	
	string_select	= XmStringCreate ("Select", XmSTRING_DEFAULT_CHARSET);	
	string_cancel	= XmStringCreate ("Cancel", XmSTRING_DEFAULT_CHARSET);	
	string_null	= XmStringCreate ("", XmSTRING_DEFAULT_CHARSET);	

	for (i = 0; i < MAX_AF3DSET_NUM; i++)
	{
		itoa (*(symbol_size + i), szBuffer);
		*(xmsize_symbol + i)		= XmStringCreate (szBuffer, XmSTRING_DEFAULT_CHARSET);	
	}

#include "view25d.code"

	mag_set [0]		= toggleScale2;
	mag_set [1]		= toggleScale1;
	mag_set [2]		= toggleScaleHalf;
	mag_set [3]		= toggleScaleQuarter;
	mag_set [4]		= toggleScaleAny;

	scale_set_image1 [0]	= toggleImage1Positive;
	scale_set_image1 [1]	= toggleImage1Negative;
	scale_set_image1 [2]	= toggleImage1Dual;

	scale_set_image2 [0]	= toggleImage2Positive;
	scale_set_image2 [1]	= toggleImage2Negative;
	scale_set_image2 [2]	= toggleImage2Dual;

	orientation_set [0]	= toggleTransverse;
	orientation_set [1]	= toggleCoronal;
	orientation_set [2]	= toggleLSagittal;
	orientation_set [3]	= toggleRSagittal;

	backColorSet[0]		= toggleBackBlack;
	backColorSet[1]		= toggleBackBlue;
	backColorSet[2]		= toggleBackCyan;
	backColorSet[3]		= toggleBackGreen;
	backColorSet[4]		= toggleBackYellow;
	backColorSet[5]		= toggleBackMagenta;
	backColorSet[6]		= toggleBackRed;
	backColorSet[7]		= toggleBackWhite;

	atlas1ColorSet [0]	= toggleAtlas1Black;	
	atlas1ColorSet [1]	= toggleAtlas1Blue;	
	atlas1ColorSet [2]	= toggleAtlas1Cyan;	
	atlas1ColorSet [3]	= toggleAtlas1Green;	
	atlas1ColorSet [4]	= toggleAtlas1Yellow;	
	atlas1ColorSet [5]	= toggleAtlas1Magenta;	
	atlas1ColorSet [6]	= toggleAtlas1Red;	
	atlas1ColorSet [7]	= toggleAtlas1White;	
	atlas1ColorSet [8]	= toggleAtlas1GrayScale;	

	atlas2ColorSet [0]	= toggleAtlas2Black;	
	atlas2ColorSet [1]	= toggleAtlas2Blue;	
	atlas2ColorSet [2]	= toggleAtlas2Cyan;	
	atlas2ColorSet [3]	= toggleAtlas2Green;	
	atlas2ColorSet [4]	= toggleAtlas2Yellow;	
	atlas2ColorSet [5]	= toggleAtlas2Magenta;	
	atlas2ColorSet [6]	= toggleAtlas2Red;	
	atlas2ColorSet [7]	= toggleAtlas2White;	
	atlas2ColorSet [8]	= toggleAtlas2GrayScale;	

	labelColorSet[0]	= toggleLabelBlack;	
	labelColorSet[1]	= toggleLabelBlue;	
	labelColorSet[2]	= toggleLabelCyan;	
	labelColorSet[3]	= toggleLabelGreen;	
	labelColorSet[4]	= toggleLabelYellow;	
	labelColorSet[5]	= toggleLabelMagenta;	
	labelColorSet[6]	= toggleLabelRed;	
	labelColorSet[7]	= toggleLabelWhite;	

	fontColorSet[0]		= toggleTextBlack;	
	fontColorSet[1]		= toggleTextBlue;	
	fontColorSet[2]		= toggleTextCyan;	
	fontColorSet[3]		= toggleTextGreen;	
	fontColorSet[4]		= toggleTextYellow;	
	fontColorSet[5]		= toggleTextMagenta;	
	fontColorSet[6]		= toggleTextRed;	
	fontColorSet[7]		= toggleTextWhite;	

	textAlignment[0]	= toggleLeft;	
	textAlignment[1]	= toggleCenter;	
	textAlignment[2]	= toggleRight;	

	textSlant[0]	= toggleRoman;	
	textSlant[1]	= toggleItalic;	
	textSlant[2]	= toggleOblique;	

	textWeight[0]	= toggleMedium;	
	textWeight[1]	= toggleBold;	

	textOrient[0]	= toggleHori;	
	textOrient[1]	= toggleVert;	

	data_type_menu.atlas_trim	= &toggleAtlasTrim;
	data_type_menu.atlas1		= &toggleImage1DisplayAtlas;
	data_type_menu.image1		= &toggleDisplayImage1;
	data_type_menu.mask1		= &toggleImage1ApplyMask;
	data_type_menu.atlas2		= &toggleImage2DisplayAtlas;
	data_type_menu.image2		= &toggleDisplayImage2;
	data_type_menu.mask2		= &toggleImage2ApplyMask;
	data_type_menu.label		= &toggleDisplayLabel;
	data_type_menu.slice_num_flag	= &toggleZValues;
	data_type_menu.first_slice	= &textFirstSlice;
	data_type_menu.last_slice	= &textLastSlice;
	data_type_menu.spacing		= &textSpacing;
	data_type_menu.orientation_set	= orientation_set;

	mag_scale_menu.mag_set			= mag_set;
	mag_scale_menu.text_mag_any		= &textScaleAny;
	mag_scale_menu.scale_set_image1		= scale_set_image1;
	mag_scale_menu.auto_minmax_image1	= &toggleImage1AutoMinMax;
	mag_scale_menu.min_text_image1		= &image1_minimum_text;
	mag_scale_menu.max_text_image1		= &image1_maximum_text;
	mag_scale_menu.scale_set_image2		= scale_set_image2;
	mag_scale_menu.auto_minmax_image2	= &toggleImage2AutoMinMax;
	mag_scale_menu.min_text_image2		= &image2_minimum_text;
	mag_scale_menu.max_text_image2		= &image2_maximum_text;

	region_menu.toggle_alter_set		= toggleRegionSet;
	region_menu.display_onoff_set		= toggleOnOffRegion;
	region_menu.label_file_set		= labelRegionFileShow;
	region_menu.label_pattern_set		= labelRegionPatternShow;
	region_menu.toggle_color_set		= toggleRegionColor;
	region_menu.toggle_pattern_set		= toggleRegionPattern;
	region_menu.toggle_talairach_region	= &toggleTalairach88Region;

	symbol_menu.toggle_alter_set		= toggleSymbolSet;
	symbol_menu.display_onoff_set		= toggleOnOffShow;
	symbol_menu.label_file_set		= labelAF3DFileShow;
	symbol_menu.label_symbol_set		= labelAF3DSymbolShow;
	symbol_menu.label_symbol_size_set	= labelSymbolSizeShow;
	symbol_menu.toggle_color_set		= toggleAF3DColor;
	symbol_menu.toggle_symbol_set		= toggleAF3DSymbol;
	symbol_menu.filled			= &toggleFilledSymbol;
	symbol_menu.size_scale			= &scaleSymbolSize;
	symbol_menu.all_planes			= &toggleAF3DAllPlane;
	symbol_menu.outline_width		= &scaleOutlineWidth;
	symbol_menu.text_maximum_distance	= &textMaximumDistance;

	format_screen_menu.format_x		= &xFormatScreenText;
	format_screen_menu.format_y		= &yFormatScreenText;
	format_screen_menu.format_width		= &wFormatScreenText;
	format_screen_menu.format_height	= &hFormatScreenText;
	format_screen_menu.xstart_text_image1	= &xImage1StartText;
	format_screen_menu.ystart_text_image1	= &yImage1StartText;
	format_screen_menu.xstart_text_image2	= &xImage2StartText;
	format_screen_menu.ystart_text_image2	= &yImage2StartText;
	format_screen_menu.xoffset_text		= &xOffsetText;
	format_screen_menu.yoffset_text		= &yOffsetText;
	format_screen_menu.rowxoffset_text	= &xRowRowText;
	format_screen_menu.rowyoffset_text	= &yRowRowText;
	format_screen_menu.label_xstart		= &xLabelStartText;
	format_screen_menu.label_ystart		= &yLabelStartText;
	format_screen_menu.display_order	= &displayOrder;

	color_bar_menu.image1_xstart		= &xImage1ColorBarText;	
	color_bar_menu.image1_ystart		= &yImage1ColorBarText;	
	color_bar_menu.image1_width		= &wImage1ColorBarText;	
	color_bar_menu.image1_height		= &hImage1ColorBarText;	
	color_bar_menu.image1_orientation	= &orientationImage1ColorBar;	
	color_bar_menu.image1_onoff		= &onOffImage1ColorBar;	
	color_bar_menu.image2_xstart		= &xImage2ColorBarText;	
	color_bar_menu.image2_ystart		= &yImage2ColorBarText;	
	color_bar_menu.image2_width		= &wImage2ColorBarText;	
	color_bar_menu.image2_height		= &hImage2ColorBarText;	
	color_bar_menu.image2_orientation	= &orientationImage2ColorBar;	
	color_bar_menu.image2_onoff		= &onOffImage2ColorBar;	

	font_menu.font_color_set	= fontColorSet;
	font_menu.font_list		= &textFontList;
	font_menu.size_list		= &textSizeList;
	font_menu.font_name		= &textSelectedFontName;
	font_menu.size_name		= &textSelectedSizeName;
	font_menu.weight_set		= textWeight;
	font_menu.orient_set		= textOrient;
	font_menu.slant_set		= textSlant;
	font_menu.alignment_set		= textAlignment;
	font_menu.line_spacing		= &scaleLineSpace;

	default_parameters.library_path		= library_pathname;
	default_parameters.back_color_set	= backColorSet;
	default_parameters.atlas1_color_set	= atlas1ColorSet;
	default_parameters.atlas2_color_set	= atlas2ColorSet;
	default_parameters.image1_color_box	= &selectionBoxImage1Color;
	default_parameters.image2_color_box	= &selectionBoxImage2Color;
	default_parameters.label_color_set	= labelColorSet;
	default_parameters.data_type_menu	= &data_type_menu;
	default_parameters.mag_scale_menu	= &mag_scale_menu;
	default_parameters.region_menu		= &region_menu;
	default_parameters.symbol_menu		= &symbol_menu;
	default_parameters.format_screen_menu	= &format_screen_menu;
	default_parameters.color_bar_menu	= &color_bar_menu;
	default_parameters.font_menu		= &font_menu;
	default_parameters.save_format		= &toggleFileFormat;
	default_parameters.save_area		= &toggleAreaSaved;

	XtRealizeWidget (appShell);

        /* 
	 * Get the drawing area window. 
	 */
	root_window	= XtWindow (appShell);
	window		= XtWindow (mainWindow_ww);
	watch_cursor	= XCreateFontCursor (display, XC_watch);


     /* Ignore device events while the busy cursor is displayed. */
     valuemask = CWDontPropagate | CWCursor;
     attributes.do_not_propagate_mask =  (KeyPressMask | KeyReleaseMask |
         ButtonPressMask | ButtonReleaseMask | PointerMotionMask);
     attributes.cursor = XCreateFontCursor (XtDisplay (appShell), XC_watch);

     /* The window will be as big as the display screen, and clipped by
        its own parent window, so we never have to worry about resizing */
     cursor_window = XCreateWindow (XtDisplay (appShell), XtWindow (appShell), 0, 0,
         65535, 65535, (unsigned int) 0, 0, InputOnly,
         CopyFromParent, valuemask, &attributes);

	strcpy (atlas_pathname, library_pathname);
	strcat (atlas_pathname, filePatternList [OpenAtlas]);

	strcpy (petmask_pathname, library_pathname);
	strcat (petmask_pathname, filePatternList [OpenMask]);

	strcpy (szBuffer, local_path);
	strcat (szBuffer, "/");
	strcpy (image1_pathname, szBuffer);
	strcat (image1_pathname, filePatternList [OpenImage1]);

	strcpy (image2_pathname, szBuffer);
	strcat (image2_pathname, filePatternList [OpenImage2]);

	strcpy (defaults_pathname, szBuffer);
	strcat (defaults_pathname, filePatternList [GetDefaults]);

	strcpy (windump_pathname, szBuffer);
	strcat (windump_pathname, filePatternList [SaveWinDump]);

	strcpy (region_pathname, szBuffer);
	strcat (region_pathname, filePatternList [OpenRegion]);

	strcpy (af3d_pathname, szBuffer);
	strcat (af3d_pathname, filePatternList [OpenAF3D]);

	strcpy (coordinates_pathname, szBuffer);
	strcat (coordinates_pathname, filePatternList [SaveCoordinates]);

	for (i = 0; i < MAX_REGIONSET_NUM; i++)
	{
		n = 0;
		XtSetArg (arglist [n], XtNbackground, pixel_region_color + i); n++;
		XtGetValues (labelRegionPatternShow [i], arglist, n);

		*(dynamic_region_color + i)	= *(region_color_code + i);
		*(dynamic_region_type + i)	= *(region_type + i);
	}

	for (i = 0; i < MAX_AF3DSET_NUM; i++)
	{
		n = 0;
		XtSetArg (arglist[n], XtNbackground, pixel_symbol_color + i); n++;
		XtGetValues (labelAF3DSymbolShow [i], arglist, n);

		*(dynamic_symbol_color + i)	= *(symbol_color_code + i);
		*(dynamic_symbol_type + i)	= *(symbol_type + i);
	}

	wActiveRegionColor	= toggleRegionColor [6];
	wActiveAF3DColor	= toggleAF3DColor [6];

	n	= 0;
	XtSetArg (arglist[n], XtNbackground, &pixelTextColor); n++;
	XtGetValues (toggleTextWhite, arglist, n);

	/* 
	 * Initialize global lists. 
	 */
	alist1		= llinit ();
	alist2		= llinit ();
	plist1		= llinit ();
	plist2		= llinit ();
	region_sets	= llinit ();

	/* 
	 * Set backing store on window. 
	 */
	wattr.backing_store	= WhenMapped;
	wattr.background_pixel	= BACKGROUND_CELL;
	XChangeWindowAttributes (display, window, CWBackingStore | CWBackPixel, &wattr);

	/* 
	 * Set the graphics context 
	 */
	gcCanvas	= XCreateGC (display, window, 0, 0);
	xorgc		= CreateXorGC (mainWindow_ww);

	/* 
	 * Getting the default parameters.
	 */
	GetDefaultParameters (display, root_window, gcCanvas,
		parameter_file, &default_parameters, xmsize_symbol);
	ReadAtlasHeader (atlas_filename, library_pathname);

	/*
	LoadXwd (display, window, gcCanvas, "copyright_logo.xwd");
	*/

	draw_data.display	= display;
	draw_data.window	= window;
	draw_data.gc		= gcCanvas;
	draw_data.cursor	= watch_cursor;
	XtAddCallback (clearScreen, XmNactivateCallback, ClearWindowCallback, &draw_data);

	selectSaveImageData.node_flag		= SELECT;
	selectSaveImageData.dialog		= frameSaveOptions;
	selectSaveImageData.information		= winMoveInfo;
	selectSaveImageData.file_format		= toggleFileFormat;
	selectSaveImageData.area_saved		= toggleAreaSaved;
	XtAddCallback (selectSaveOptions, XmNactivateCallback, 
			SaveOptionsCallback, &selectSaveImageData);

	XtAddCallback (XmMessageBoxGetChild (winMoveInfo, 
			XmDIALOG_OK_BUTTON), XmNactivateCallback, 
			SaveWinDumpCallback, &draw_data);

	cancelSaveImageData.node_flag		= CANCEL;
	cancelSaveImageData.dialog		= frameSaveOptions;
	cancelSaveImageData.information		= winMoveInfo;
	cancelSaveImageData.file_format		= toggleFileFormat;
	cancelSaveImageData.area_saved		= toggleAreaSaved;
	XtAddCallback (cancelSaveOptions, XmNactivateCallback, 
			SaveOptionsCallback, &cancelSaveImageData);

    	selectImage1ColorData.display		= display;
    	selectImage1ColorData.root_window	= root_window;
    	selectImage1ColorData.dialog		= frameImage1Color;
	selectImage1ColorData.node_flag		= SELECT;
	selectImage1ColorData.image_status	= OpenImage1;
	selectImage1ColorData.library_path	= library_pathname;
	selectImage1ColorData.color_table_name	= szImage1ColorTableName;
    	XtAddCallback (selectionBoxImage1Color, XmNokCallback, 
			ImageColorCallback, &selectImage1ColorData);

    	cancelImage1ColorData.display		= display;
    	cancelImage1ColorData.dialog		= frameImage1Color;
	cancelImage1ColorData.node_flag		= CANCEL;
	cancelImage1ColorData.image_status	= OpenImage1;
	cancelImage1ColorData.library_path	= library_pathname;
	cancelImage1ColorData.color_table_name	= szImage1ColorTableName;
    	XtAddCallback (selectionBoxImage1Color, XmNcancelCallback, 
			ImageColorCallback, &cancelImage1ColorData);

    	selectImage2ColorData.display		= display;
    	selectImage2ColorData.root_window	= root_window;
    	selectImage2ColorData.dialog		= frameImage2Color;
	selectImage2ColorData.node_flag		= SELECT;
	selectImage2ColorData.image_status	= OpenImage2;
	selectImage2ColorData.library_path	= library_pathname;
	selectImage2ColorData.color_table_name	= szImage2ColorTableName;
    	XtAddCallback (selectionBoxImage2Color, XmNokCallback, 
			ImageColorCallback, &selectImage2ColorData);

    	cancelImage2ColorData.display		= display;
    	cancelImage2ColorData.dialog		= frameImage2Color;
	cancelImage2ColorData.node_flag		= CANCEL;
	cancelImage2ColorData.image_status	= OpenImage2;
	cancelImage2ColorData.library_path	= library_pathname;
	cancelImage2ColorData.color_table_name	= szImage2ColorTableName;
    	XtAddCallback (selectionBoxImage2Color, XmNcancelCallback, 
			ImageColorCallback, &cancelImage2ColorData);

	selectFileData.draw_data		= &draw_data;
	selectFileData.root_window		= root_window;
	selectFileData.parent			= &frameAF3DRepresent;
	selectFileData.dialog			= fileSelection;
	selectFileData.region_file_label	= &labelRegionFileShow [0];
	selectFileData.AF3D_symbol_label	= &labelAF3DFileShow [0];
	selectFileData.default_parameters	= &default_parameters;
	selectFileData.information		= frameSaveOptions;
	XtAddCallback (XmFileSelectionBoxGetChild (fileSelection, 
			XmDIALOG_CANCEL_BUTTON), XmNactivateCallback, 
			SelectFileCallback, &selectFileData);
	XtAddCallback (XmFileSelectionBoxGetChild (fileSelection, XmDIALOG_HELP_BUTTON),
		XmNactivateCallback, CancelFileSelectionCallback, &selectFileData);

	optionRedrawData.draw_data	= &draw_data;
	optionRedrawData.node_flag	= REDRAW;
	optionRedrawData.frame		= &frameSliceOptions;
	optionRedrawData.mag_scale_menu	= &mag_scale_menu;
	XtAddCallback (optionRedrawPush, XmNactivateCallback, MagScaleCallback, &optionRedrawData);

	optionSelectData.draw_data	= &draw_data;
	optionSelectData.node_flag	= SELECT;
	optionSelectData.frame		= &frameSliceOptions;
	optionSelectData.mag_scale_menu	= &mag_scale_menu;
	XtAddCallback (optionSelectPush, XmNactivateCallback, MagScaleCallback, &optionSelectData);

	optionCancelData.draw_data	= &draw_data;
	optionCancelData.node_flag	= CANCEL;
	optionCancelData.frame		= &frameSliceOptions;
	optionCancelData.mag_scale_menu	= &mag_scale_menu;
	XtAddCallback (optionCancelPush, XmNactivateCallback, MagScaleCallback, &optionCancelData);

	redrawFormatScreenData.draw_data		= &draw_data;
	redrawFormatScreenData.node_flag		= REDRAW;
	redrawFormatScreenData.frame			= &frameFormatScreen;
	redrawFormatScreenData.format_screen_menu	= &format_screen_menu;
	XtAddCallback (redrawFormatScreen, XmNactivateCallback, FormatScreenCallback, 
								&redrawFormatScreenData);

	selectFormatScreenData.draw_data		= &draw_data;
	selectFormatScreenData.node_flag		= SELECT;
	selectFormatScreenData.frame			= &frameFormatScreen;
	selectFormatScreenData.format_screen_menu	= &format_screen_menu;
	XtAddCallback (selectFormatScreen, XmNactivateCallback, FormatScreenCallback, 
								&selectFormatScreenData);

	cancelFormatScreenData.draw_data		= &draw_data;
	cancelFormatScreenData.node_flag		= CANCEL;
	cancelFormatScreenData.frame			= &frameFormatScreen;
	cancelFormatScreenData.format_screen_menu	= &format_screen_menu;
	XtAddCallback (cancelFormatScreen, XmNactivateCallback, FormatScreenCallback, 
								&cancelFormatScreenData);

	XtAddCallback (displayRedrawScreen, XmNactivateCallback, RedrawScreenCallback, 
			&draw_data);

	selectSliceOKData.draw_data		= &draw_data;
	selectSliceOKData.node_flag		= REDRAW;
	selectSliceOKData.dialog		= frameSliceDisplay;
	selectSliceOKData.default_parameters	= &default_parameters;
	XtAddCallback (okDisplaySlice, XmNactivateCallback, DataTypeCallback, &selectSliceOKData);

	selectSliceData.draw_data		= &draw_data;
	selectSliceData.node_flag		= SELECT;
	selectSliceData.dialog			= frameSliceDisplay;
	selectSliceData.default_parameters	= &default_parameters;
	XtAddCallback (selectSliceDisplay, XmNactivateCallback, DataTypeCallback, &selectSliceData);

	selectSliceCancelData.draw_data			= &draw_data;
	selectSliceCancelData.node_flag			= CANCEL;
	selectSliceCancelData.dialog			= frameSliceDisplay;
	selectSliceCancelData.default_parameters	= &default_parameters;
	XtAddCallback (cancelSliceDisplay, XmNactivateCallback, DataTypeCallback, 
								&selectSliceCancelData);

	XtAddCallback (displaySliceButton, XmNactivateCallback, 
			ShowDataTypeCallback, &selectSliceCancelData);

	redrawColorBarData.draw_data		= &draw_data;	
	redrawColorBarData.node_flag		= REDRAW;	
	redrawColorBarData.dialog		= &frameColorBar;	
	redrawColorBarData.color_bar_menu	= &color_bar_menu;	
	XtAddCallback (redrawColorBar, XmNactivateCallback, ColorBarCallback, &redrawColorBarData);

	selectColorBarData.draw_data		= &draw_data;	
	selectColorBarData.node_flag		= SELECT;	
	selectColorBarData.dialog		= &frameColorBar;	
	selectColorBarData.color_bar_menu	= &color_bar_menu;	
	XtAddCallback (selectColorBar, XmNactivateCallback, ColorBarCallback, &selectColorBarData);

	cancelColorBarData.draw_data		= &draw_data;	
	cancelColorBarData.node_flag		= CANCEL;	
	cancelColorBarData.dialog		= &frameColorBar;	
	cancelColorBarData.color_bar_menu	= &color_bar_menu;	
	XtAddCallback (cancelColorBar, XmNactivateCallback, ColorBarCallback, &cancelColorBarData);

	/* 
	 * Background, Atlas, Region, AF3D, and Label Color Callbacks 
	 */
	backColorData.display		= display;	
	backColorData.root_window	= root_window;	
	backColorData.rgb_value		= &rgbBackground;	
	backColorData.color_set		= backColorSet;	
	backColorData.num_colors	= MAX_NONIMAGE_COLOR;	
	backColorData.dialog		= &frameBackColor;
	XtAddCallback (selectBackColor, XmNactivateCallback, 
			NonImageColorCallback, &backColorData);

	atlas1ColorData.display		= display;	
	atlas1ColorData.root_window	= root_window;	
	atlas1ColorData.rgb_value	= &rgbAtlas1;	
	atlas1ColorData.color_set	= atlas1ColorSet;	
	atlas1ColorData.num_colors	= MAX_NONIMAGE_COLOR + 1;	
	atlas1ColorData.dialog		= &frameAtlas1Color;
	XtAddCallback (selectAtlas1Color, XmNactivateCallback, 
			NonImageColorCallback, &atlas1ColorData);

	atlas2ColorData.display		= display;	
	atlas2ColorData.root_window	= root_window;	
	atlas2ColorData.rgb_value	= &rgbAtlas2;	
	atlas2ColorData.color_set	= atlas2ColorSet;	
	atlas2ColorData.num_colors	= MAX_NONIMAGE_COLOR + 1;	
	atlas2ColorData.dialog		= &frameAtlas2Color;
	XtAddCallback (selectAtlas2Color, XmNactivateCallback, 
			NonImageColorCallback, &atlas2ColorData);

	labelColorData.display		= display;	
	labelColorData.root_window	= root_window;	
	labelColorData.rgb_value	= &rgbLabel;	
	labelColorData.color_set	= labelColorSet;	
	labelColorData.num_colors	= MAX_NONIMAGE_COLOR;	
	labelColorData.dialog		= &frameLabelColor;
	XtAddCallback (selectLabelColor, XmNactivateCallback, 
			NonImageColorCallback, &labelColorData);

	selectFontData.draw_data	= &draw_data;
	selectFontData.node_flag	= SELECT;
	selectFontData.frame		= frameTextOptions;
	selectFontData.font_menu	= &font_menu;
	XtAddCallback (selectTextOptions, XmNactivateCallback, 
			SetTextFontCallback, &selectFontData);

	cancelFontData.draw_data	= &draw_data;
	cancelFontData.node_flag	= CANCEL;
	cancelFontData.frame		= frameTextOptions;
	cancelFontData.font_menu	= &font_menu;
	XtAddCallback (cancelTextOptions, XmNactivateCallback, 
			SetTextFontCallback, &cancelFontData);

	mouseTextEditData.node_flag	= SELECT;
	mouseTextEditData.draw_data	= &draw_data;
	mouseTextEditData.dialog	= frameTextEdit;
	mouseTextEditData.text		= textTextEdit;
	mouseTextEditData.xstart	= xTextEditCoordText;
	mouseTextEditData.ystart	= yTextEditCoordText;
	XtAddCallback (mouseTextEdit, XmNactivateCallback, 
		TextEditCallback, &mouseTextEditData);

	coordTextEditData.node_flag	= REDRAW;
	coordTextEditData.draw_data	= &draw_data;
	coordTextEditData.dialog	= frameTextEdit;
	coordTextEditData.text		= textTextEdit;
	coordTextEditData.xstart	= xTextEditCoordText;
	coordTextEditData.ystart	= yTextEditCoordText;
	XtAddCallback (coordTextEdit, XmNactivateCallback, 
		TextEditCallback, &coordTextEditData);

	cancelTextEditData.node_flag	= CANCEL;
	cancelTextEditData.draw_data	= &draw_data;
	cancelTextEditData.dialog	= frameTextEdit;
	cancelTextEditData.text		= textTextEdit;
	cancelTextEditData.xstart	= xTextEditCoordText;
	cancelTextEditData.ystart	= yTextEditCoordText;
	XtAddCallback (cancelTextEdit, XmNactivateCallback, 
		TextEditCallback, &cancelTextEditData);

	selectSlicesData.text_first		= textFirstSlice;
	selectSlicesData.text_last		= textLastSlice;
	selectSlicesData.text_spacing		= textSpacing;
	selectSlicesData.orientation_set	= orientation_set;
	XtAddCallback (toggleZValues, XmNvalueChangedCallback, 
		SelectSlicesCallback, &selectSlicesData);

	for (i = 0; i < ORIENTATION_NUM; i++)
	{
		XtAddCallback (orientation_set [i], XmNvalueChangedCallback, 
			SetAtlasOrientCallback, &data_type_menu);
	}

	redrawRegionData.node_flag	= REDRAW;
	redrawRegionData.draw_data	= &draw_data;
	redrawRegionData.dialog		= frameRegionRepresent;
	redrawRegionData.region_menu	= &region_menu;
	XtAddCallback (redrawRegionRepresent, XmNactivateCallback, 
		RegionCallback, &redrawRegionData);

	selectRegionData.node_flag	= SELECT;
	selectRegionData.draw_data	= &draw_data;
	selectRegionData.dialog		= frameRegionRepresent;
	selectRegionData.region_menu	= &region_menu;
	XtAddCallback (selectRegionRepresent, XmNactivateCallback, 
			RegionCallback, &selectRegionData);

	cancelRegionData.node_flag		= CANCEL;
	cancelRegionData.dialog			= frameRegionRepresent;
	cancelRegionData.symbol_name		= symbol_names;
	cancelRegionData.region_menu		= &region_menu;
	XtAddCallback (cancelRegionRepresent, XmNactivateCallback, 
				RegionCallback, &cancelRegionData);

	redrawSymbolData.node_flag	= REDRAW;
	redrawSymbolData.draw_data	= &draw_data;
	redrawSymbolData.dialog		= frameAF3DRepresent;
	redrawSymbolData.symbol_menu	= &symbol_menu;
	XtAddCallback (redrawAF3DRepresent, XmNactivateCallback, 
		AF3DSymbolCallback, &redrawSymbolData);

	selectSymbolData.node_flag	= SELECT;
	selectSymbolData.draw_data	= &draw_data;
	selectSymbolData.dialog		= frameAF3DRepresent;
	selectSymbolData.symbol_menu	= &symbol_menu;
	XtAddCallback (selectAF3DRepresent, XmNactivateCallback, 
			AF3DSymbolCallback, &selectSymbolData);

	cancelSymbolData.node_flag		= CANCEL;
	cancelSymbolData.dialog			= frameAF3DRepresent;
	cancelSymbolData.symbol_name		= symbol_names;
	cancelSymbolData.symbol_menu		= &symbol_menu;
	XtAddCallback (cancelAF3DRepresent, XmNactivateCallback, 
				AF3DSymbolCallback, &cancelSymbolData);

	openAddPointsData.frame		= frameCreateAF3D;
	openAddPointsData.parent	= frameAF3DRepresent;
	openAddPointsData.af3d_file	= &textAddPointsFileName;
	openAddPointsData.coordinates	= &textCreateAF3D;
	XtAddCallback (pushCreateAF3D, XmNactivateCallback, 
		ShowAddPointsMenuCallback, &openAddPointsData);

	selectAddPointsData.node_flag		= SELECT;
	selectAddPointsData.parent		= &frameAF3DRepresent;
	selectAddPointsData.frame		= &frameCreateAF3D;
	selectAddPointsData.af3d_file		= &textAddPointsFileName;
	selectAddPointsData.AF3D_symbol_label	= &labelAF3DFileShow [0];
	selectAddPointsData.coordinates		= &textCreateAF3D;
	XtAddCallback (okCreateAF3D, XmNactivateCallback, AddPointsCallback, &selectAddPointsData);

	cancelAddPointsData.node_flag		= CANCEL;
	cancelAddPointsData.parent		= &frameAF3DRepresent;
	cancelAddPointsData.frame		= &frameCreateAF3D;
	cancelAddPointsData.af3d_file		= &textAddPointsFileName;
	cancelAddPointsData.AF3D_symbol_label	= &labelAF3DFileShow [0];
	cancelAddPointsData.coordinates		= &textCreateAF3D;
	XtAddCallback (cancelCreateAF3D, XmNactivateCallback, AddPointsCallback, &cancelAddPointsData);


	/* 
	 * Load text font 
	 */
	FontStruct	= XLoadQueryFont (display, TEXT_FONT);
	if (FontStruct == 0)
		fprintf (stderr, "Can Not Find Font %s\n", TEXT_FONT);
	else
	{
		XSetFont (display, gcCanvas, FontStruct->fid);
	}

	XtAddCallback (labelPush, XmNactivateCallback, ShowMenuCallback, frameTextEdit);

	/* 
	 * Add event handlers for mouse button events. 
	 */
	graphics_data.draw_data		= &draw_data;
    	graphics_data.root_window	= root_window;
	graphics_data.xorgc		= xorgc;
	graphics_data.xtext_edit_coord	= xTextEditCoordText;
	graphics_data.ytext_edit_coord	= yTextEditCoordText;

	XtAddCallback (mainWindow_ww, XmNexposeCallback, RefreshCallback, &draw_data);

	XtAddEventHandler (mainWindow_ww, ButtonPressMask, FALSE, 
				ButtonDownEventHandler, &graphics_data);
	XtAddEventHandler (mainWindow_ww, ButtonMotionMask, FALSE, 
				ButtonMoveEventHandler, &graphics_data);
	XtAddEventHandler (mainWindow_ww, ButtonReleaseMask, FALSE, 
				ButtonReleaseEventHandler, &graphics_data);

	/* 
	 * Grab the mouse pointer on mouse events in virtual screen. 
	 */
	XGrabButton (XtDisplay (mainWindow_ww), AnyButton, AnyModifier, window, TRUE,
		ButtonPressMask | ButtonMotionMask | ButtonReleaseMask, GrabModeAsync, 
		GrabModeAsync, window, XCreateFontCursor (XtDisplay (mainWindow_ww), XC_fleur));

	XtMainLoop ();
}

@


2.18
log
@Updated to introduce atlas 2.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.17 1995/09/06 18:26:29 ty7777 Exp ty7777 $*/
d3 3
d111 1
a111 1
#include <petutil/matrix.h>
d124 1
a124 1
static char *rcsid = "$Id: view25d.c,v 2.17 1995/09/06 18:26:29 ty7777 Exp ty7777 $";
@


2.17
log
@Before fixing bugs reported by Avi.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.16 1995/08/31 20:18:59 ty7777 Exp ty7777 $*/
d3 3
d121 1
a121 1
static char *rcsid = "$Id: view25d.c,v 2.16 1995/08/31 20:18:59 ty7777 Exp ty7777 $";
d334 1
a334 1
	XtGetValues (GetActiveWidget (default_parameters->atlas_color_set, 
d338 3
a340 3
	rgbAtlas.red	= color.red;
	rgbAtlas.green	= color.green;
	rgbAtlas.blue	= color.blue;
d344 10
d423 2
a424 1
	NONIMAGE_COLOR_DATA		atlasColorData;
d466 2
a467 1
	Widget				atlasColorSet [MAX_NONIMAGE_COLOR + 1];
d612 9
a620 9
	atlasColorSet[0]	= toggleAtlasBlack;	
	atlasColorSet[1]	= toggleAtlasBlue;	
	atlasColorSet[2]	= toggleAtlasCyan;	
	atlasColorSet[3]	= toggleAtlasGreen;	
	atlasColorSet[4]	= toggleAtlasYellow;	
	atlasColorSet[5]	= toggleAtlasMagenta;	
	atlasColorSet[6]	= toggleAtlasRed;	
	atlasColorSet[7]	= toggleAtlasWhite;	
	atlasColorSet[8]	= toggleAtlasGrayScale;	
d622 10
d752 2
a753 1
	default_parameters.atlas_color_set	= atlasColorSet;
d1050 17
a1066 8
	atlasColorData.display		= display;	
	atlasColorData.root_window	= root_window;	
	atlasColorData.rgb_value	= &rgbAtlas;	
	atlasColorData.color_set	= atlasColorSet;	
	atlasColorData.num_colors	= MAX_NONIMAGE_COLOR + 1;	
	atlasColorData.dialog		= &frameAtlasColor;
	XtAddCallback (selectAtlasColor, XmNactivateCallback, 
			NonImageColorCallback, &atlasColorData);
@


2.16
log
@Before watch cursor works.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.15 1995/08/28 15:39:11 ty7777 Exp ty7777 $*/
d3 3
d113 2
d118 1
a118 1
static char *rcsid = "$Id: view25d.c,v 2.15 1995/08/28 15:39:11 ty7777 Exp ty7777 $";
d506 3
d743 3
a745 1
        /* get the drawing area window */
d749 13
@


2.15
log
@Before adding mutual image1 and image2 point display.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.14 1995/07/31 15:11:30 ty7777 Exp ty7777 $*/
d3 3
d113 1
a113 1
static char *rcsid = "$Id: view25d.c,v 2.14 1995/07/31 15:11:30 ty7777 Exp ty7777 $";
a630 1
	data_type_menu.atlas		= &toggleDisplayAtlas;
d632 1
d635 1
@


2.14
log
@Before working on tracking.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.13 1995/07/07 17:12:55 ty7777 Exp ty7777 $*/
d3 3
d110 1
a110 1
static char *rcsid = "$Id: view25d.c,v 2.13 1995/07/07 17:12:55 ty7777 Exp ty7777 $";
d694 1
d700 1
d716 2
a717 1
	default_parameters.pet_color_box	= &selectionBoxImage1Color;
@


2.13
log
@Two data sets works correctly.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.12 1995/06/30 15:22:33 ty7777 Exp ty7777 $*/
d3 3
d107 1
a107 1
static char *rcsid = "$Id: view25d.c,v 2.12 1995/06/30 15:22:33 ty7777 Exp ty7777 $";
d374 1
a374 1
	FILE_SELECTION_DATA		coordFileSelectionData;
@


2.12
log
@ Before making further changes, tow independent color bars worked.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.11 1995/01/18 19:41:29 ty7777 Exp ty7777 $*/
d3 3
d104 1
a104 1
static char *rcsid = "$Id: view25d.c,v 2.11 1995/01/18 19:41:29 ty7777 Exp ty7777 $";
d393 1
a393 1
	MAG_SCALE_DATA			optionOKData;
d445 2
a446 1
	Widget				scale_set [SCALE_NUM];
d558 3
a560 3
	scale_set [0]		= toggleImage1Positive;
	scale_set [1]		= toggleImage1Negative;
	scale_set [2]		= toggleImage1Dual;
d562 4
d624 4
a627 2
	data_type_menu.pet		= &toggleDisplayImage1;
	data_type_menu.mask		= &toggleImage1ApplyMask;
d635 10
a644 6
	mag_scale_menu.mag_set		= mag_set;
	mag_scale_menu.text_mag_any	= &textScaleAny;
	mag_scale_menu.scale_set	= scale_set;
	mag_scale_menu.auto_pet_minmax	= &toggleImage1AutoMinMax;
	mag_scale_menu.min_text		= &image1_minimum_text;
	mag_scale_menu.max_text		= &image1_maximum_text;
d671 4
a674 2
	format_screen_menu.xstart_text		= &xImage1StartText;
	format_screen_menu.ystart_text		= &yImage1StartText;
d894 5
a898 5
	optionOKData.draw_data		= &draw_data;
	optionOKData.node_flag		= REDRAW;
	optionOKData.frame		= &frameSliceOptions;
	optionOKData.mag_scale_menu	= &mag_scale_menu;
	XtAddCallback (optionRedrawPush, XmNactivateCallback, MagScaleCallback, &optionOKData);
@


2.11
log
@Increase the array size for ColorTableItems.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.10 1995/01/18 19:04:43 ty7777 Exp ty7777 $*/
d3 3
d101 1
a101 1
static char *rcsid = "$Id: view25d.c,v 2.10 1995/01/18 19:04:43 ty7777 Exp ty7777 $";
d337 1
a337 1
	PetColormap (display, window, szColorTableName);
d348 2
a349 1
	AUTO_PET_VALUE_DATA		autoPetValueData;
d371 2
a372 1
	FILE_SELECTION_DATA		petFileSelectionData;
d398 4
a401 2
	PET_COLOR_DATA			cancelPetColorData;
	PET_COLOR_DATA			selectPetColorData;
d472 3
a474 2
	char				*petmask_pathname	= szPetMaskPathName;
	char				*pet_pathname		= szPetPathName;
d498 3
a500 2
	strcpy (szPetMaskFileName, argv [5]);
	strcpy (szColorTableName, argv [6]);
d554 3
a556 3
	scale_set [0]		= togglePositive;
	scale_set [1]		= toggleNegative;
	scale_set [2]		= toggleDual;
d615 3
a617 2
	data_type_menu.pet		= &toggleDisplayPet;
	data_type_menu.mask		= &toggleApplyMask;
d628 3
a630 3
	mag_scale_menu.auto_pet_minmax	= &toggleAutoMinMax;
	mag_scale_menu.min_text		= &minimum_text;
	mag_scale_menu.max_text		= &maximum_text;
d657 2
a658 2
	format_screen_menu.xstart_text		= &xImageStartText;
	format_screen_menu.ystart_text		= &yImageStartText;
a665 1
	format_screen_menu.atlas_trim		= &toggleAtlasTrim;
d667 10
a676 5
	color_bar_menu.xstart		= &xColorBarText;	
	color_bar_menu.ystart		= &yColorBarText;	
	color_bar_menu.width		= &wColorBarText;	
	color_bar_menu.height		= &hColorBarText;	
	color_bar_menu.orientation	= &orientationColorBar;	
d692 1
a692 1
	default_parameters.pet_color_box	= &selectionBoxPetColor;
d719 2
a720 2
	strcpy (pet_pathname, szBuffer);
	strcat (pet_pathname, filePatternList [OpenPet]);
d722 3
d770 4
a773 2
	atlas		= llinit ();
	plist		= llinit ();
d826 9
a834 7
    	selectPetColorData.display	= display;
    	selectPetColorData.root_window	= root_window;
    	selectPetColorData.dialog	= framePetColor;
	selectPetColorData.node_flag	= SELECT;
	selectPetColorData.library_path	= library_pathname;
    	XtAddCallback (selectionBoxPetColor, XmNokCallback, 
			PetColorCallback, &selectPetColorData);
d836 27
a862 6
    	cancelPetColorData.display	= display;
    	cancelPetColorData.dialog	= framePetColor;
	cancelPetColorData.node_flag	= CANCEL;
	cancelPetColorData.library_path	= library_pathname;
    	XtAddCallback (selectionBoxPetColor, XmNcancelCallback, 
			PetColorCallback, &cancelPetColorData);
@


2.10
log
@Added PosNeg_on_White.tbl.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.9 1995/01/17 20:08:27 ty7777 Exp ty7777 $*/
d3 3
d98 1
a98 1
static char *rcsid = "$Id: view25d.c,v 2.9 1995/01/17 20:08:27 ty7777 Exp ty7777 $";
d447 1
a447 1
	XmString			ColorTableItems [8];
@


2.9
log
@Deleted things that are related to data_stes.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.8 1994/12/30 21:20:17 ty7777 Exp ty7777 $*/
d3 3
d95 1
a95 1
static char *rcsid = "$Id: view25d.c,v 2.8 1994/12/30 21:20:17 ty7777 Exp ty7777 $";
d126 2
a127 1
				   "PosNeg.tbl",
@


2.8
log
@Added processing for big fonts.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.7 1994/12/19 22:47:32 ty7777 Exp ty7777 $*/
d3 3
d92 1
a92 1
static char *rcsid = "$Id: view25d.c,v 2.7 1994/12/19 22:47:32 ty7777 Exp ty7777 $";
a748 1
	data_sets	= llinit ();
@


2.7
log
@Added color tables Positive.tbl and Negative.tbl.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.6 1994/12/01 20:10:34 ty7777 Exp ty7777 $*/
d3 3
d89 1
a89 1
static char *rcsid = "$Id: view25d.c,v 2.6 1994/12/01 20:10:34 ty7777 Exp ty7777 $";
d138 5
a142 1
				   "72"};
d441 1
a441 1
	XmString			xmsize_table [11];
@


2.6
log
@Get rid of the path in the atl files.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.5 1994/12/01 17:12:11 ty7777 Exp ty7777 $*/
d3 3
d86 1
a86 1
static char *rcsid = "$Id: view25d.c,v 2.5 1994/12/01 17:12:11 ty7777 Exp ty7777 $";
d116 1
d118 1
d430 1
a430 1
	XmString			ColorTableItems [6];
@


2.5
log
@Get rid of szLibraryPath.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.4 1994/11/03 20:12:51 ty7777 Exp ty7777 $*/
d3 3
d83 1
a83 1
static char *rcsid = "$Id: view25d.c,v 2.4 1994/11/03 20:12:51 ty7777 Exp ty7777 $";
d754 1
a754 1
	ReadAtlasHeader (atlas_filename);
@


2.4
log
@Added local_path.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.3 1994/10/26 16:14:58 ty7777 Exp ty7777 $*/
d3 3
d80 1
a80 1
static char *rcsid = "$Id: view25d.c,v 2.3 1994/10/26 16:14:58 ty7777 Exp ty7777 $";
d437 1
a437 1
	char				*library_pathname	= szLibraryPathName;
d461 3
a463 3
	strcpy (library_pathname, argv [1]);
	local_path	= argv [2];
	parameter_file	= argv [3];
d650 1
d787 1
d794 1
d857 1
a857 1
	selectSliceOKData.data_type_menu	= &data_type_menu;
d860 4
a863 4
	selectSliceData.draw_data	= &draw_data;
	selectSliceData.node_flag	= SELECT;
	selectSliceData.dialog		= frameSliceDisplay;
	selectSliceData.data_type_menu	= &data_type_menu;
d866 4
a869 4
	selectSliceCancelData.draw_data		= &draw_data;
	selectSliceCancelData.node_flag		= CANCEL;
	selectSliceCancelData.dialog		= frameSliceDisplay;
	selectSliceCancelData.data_type_menu	= &data_type_menu;
@


2.3
log
@Deleted winutil.h because app.h already contains it.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.2 1994/10/19 19:27:10 ty7777 Exp ty7777 $*/
d3 3
d77 1
a77 1
static char *rcsid = "$Id: view25d.c,v 2.2 1994/10/19 19:27:10 ty7777 Exp ty7777 $";
d435 1
a438 1
	char				*pwd;
d459 5
a463 4
	parameter_file	= argv [2];
	strcpy (atlas_filename, argv [3]);
	strcpy (szPetMaskFileName, argv [4]);
	strcpy (szColorTableName, argv [5]);
d674 1
a674 2
	pwd	= getenv ("PWD");
	strcpy (szBuffer, pwd);
@


2.2
log
@Same as the last one.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 2.1 1994/10/19 17:04:11 ty7777 Exp ty7777 $*/
d3 3
a63 1
#include <petutil/winutil.h>
d74 1
a74 1
static char *rcsid = "$Id: view25d.c,v 2.1 1994/10/19 17:04:11 ty7777 Exp ty7777 $";
@


2.1
log
@The pattern *pattern* works in the file selection menu.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.52 1994/10/18 19:41:38 ty7777 Exp ty7777 $*/
d3 3
d72 1
a72 1
static char *rcsid = "$Id: view25d.c,v 1.52 1994/10/18 19:41:38 ty7777 Exp ty7777 $";
@


1.52
log
@After *pattern works.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.51 1994/10/17 20:10:34 ty7777 Exp ty7777 $*/
d3 3
d69 1
a69 1
static char *rcsid = "$Id: view25d.c,v 1.51 1994/10/17 20:10:34 ty7777 Exp ty7777 $";
d417 5
a421 1
	char				*atlas_file_name	= szAtlasFileName;
d426 4
d432 1
d438 1
d444 1
a444 1
	if (argc < 2)
d447 1
a447 1
		exit (-1);
d450 5
a454 3
	szLibraryPathName	= argv [1];
	strcpy (szPetMaskFileName, argv [1]);
	strcat (szPetMaskFileName, "HD6.mask");
d659 2
a660 2
	strcpy (szColorTableName, argv [1]);
	strcat (szColorTableName, "Color40.tbl");
d662 2
a663 2
	strcpy (szAtlasPathName, argv [1]);
	strcat (szAtlasPathName, filePatternList [OpenAtlas]);
a664 3
	strcpy (szPetMaskPathName, argv [1]);
	strcat (szPetMaskPathName, filePatternList [OpenMask]);

d666 4
a669 3
	strcpy (szPetPathName, pwd);
	strcat (szPetPathName, "/");
	strcat (szPetPathName, filePatternList [OpenPet]);
d671 2
a672 3
	strcpy (szDefaultsPathName, pwd);
	strcat (szDefaultsPathName, "/");
	strcat (szDefaultsPathName, filePatternList [GetDefaults]);
d674 2
a675 3
	strcpy (szWinDumpPathName, pwd);
	strcat (szWinDumpPathName, "/");
	strcat (szWinDumpPathName, filePatternList [SaveWinDump]);
d677 2
a678 3
	strcpy (szRegionPathName, pwd);
	strcat (szRegionPathName, "/");
	strcat (szRegionPathName, filePatternList [OpenRegion]);
d680 2
a681 3
	strcpy (szAF3DPathName, pwd);
	strcat (szAF3DPathName, "/");
	strcat (szAF3DPathName, filePatternList [OpenAF3D]);
d683 2
a684 3
	strcpy (szCoordinatesPathName, pwd);
	strcat (szCoordinatesPathName, "/");
	strcat (szCoordinatesPathName, filePatternList [SaveCoordinates]);
a736 4
	strcpy (szBuffer, argv [1]);
	strcat (szBuffer, "view25d.parameters");
	strcpy (atlas_file_name, argv [1]);
	strcat (atlas_file_name, "HD6_transverse.atl");
d738 2
a739 2
		szBuffer, &default_parameters, xmsize_symbol);
	ReadAtlasHeader (atlas_file_name);
@


1.51
log
@After *.pattern works.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.50 1994/08/17 19:06:52 ty7777 Exp ty7777 $*/
d3 3
d66 1
a66 1
static char *rcsid = "$Id: view25d.c,v 1.50 1994/08/17 19:06:52 ty7777 Exp ty7777 $";
d302 20
a321 2
	Arg				arglist[MAX_ARGS];
	int				n;
d323 1
a323 21
	int				screen;		/* X screen */
	Colormap			colormap;	/* X colormap, for color allocation */
	XColor				color;		/* used to the default color */
	int				i, j, k;	/* counters */
	char				szBuffer [MAXLINE]; /* atlas region filename */
	Window				window;         /* window to display in */
	Window				root_window;	/* window to display in */
	XSetWindowAttributes		wattr;		/* window attribute buffer */
	GC				gcCanvas;       /* gc for canvas */
	GC				xorgc;      	/* gc for inverting */
	PET_COLOR_DATA			selectPetColorData;
	PET_COLOR_DATA			cancelPetColorData;
	NONIMAGE_COLOR_DATA		backColorData;
	NONIMAGE_COLOR_DATA		atlasColorData;
	NONIMAGE_COLOR_DATA		labelColorData;
	MAG_SCALE_DATA			optionOKData;
	MAG_SCALE_DATA			optionSelectData;
	MAG_SCALE_DATA			optionCancelData;
	FORMAT_SCREEN_DATA		redrawFormatScreenData;
	FORMAT_SCREEN_DATA		selectFormatScreenData;
	FORMAT_SCREEN_DATA		cancelFormatScreenData;
d325 3
a328 1
	FILE_SELECTION_DATA		maskFileSelectionData;
a329 2
	FILE_SELECTION_DATA		AF3DFileSelectionData;
	FILE_SELECTION_DATA		getDefaultsSelectionData;
d332 9
a340 2
	FILE_SELECTION_DATA		coordFileSelectionData;
	DRAW_DATA			draw_data;
d342 2
a343 25
	DATA_TYPE_DATA			selectSliceOKData;
	DATA_TYPE_DATA			selectSliceData;
	DATA_TYPE_DATA			selectSliceCancelData;
	AUTO_PET_VALUE_DATA		autoPetValueData;
	DATA_FILE_SELECTION		selectFileData;
	COLOR_BAR_DATA			redrawColorBarData;
	COLOR_BAR_DATA			selectColorBarData;
	COLOR_BAR_DATA			cancelColorBarData;
	FONT_DATA			selectFontData;
	FONT_DATA			cancelFontData;
	XmString			xmstring_buffer;
	XmString			string_redraw;
	XmString			string_select;
	XmString			string_cancel;
	XmString			string_null;
	XmString			ColorTableItems [6];
	XmString			xmfont_table [5];
	XmString			xmsize_table [11];
	Cursor				watch_cursor;
	STATUS_CHANGE_DATA		freezeEnableData;
	STATUS_CHANGE_DATA		freezeDisableData;
	TEXT_EDIT_DATA			mouseTextEditData;
	TEXT_EDIT_DATA			coordTextEditData;
	TEXT_EDIT_DATA			cancelTextEditData;
	SELECT_SLICES_DATA		selectSlicesData;
d345 12
d359 5
a363 1
	Pixel				background;
d365 2
a366 1
	Pixmap				RegionLabelPatterns [MAX_REGIONSET_NUM];
d369 1
a369 2
	REGION_DATA			cancelRegionData;
	REGION_BASIC_DATA		regionBasicData;
d372 3
a374 1
	ALTER_REGION_DATA		alterRegionData [MAX_REGIONSET_NUM];
d376 5
a380 2
	Pixmap				AF3DSymbols [MAX_SYMBOL_NUM];
	Pixmap				AF3DLabelSymbols [MAX_AF3DSET_NUM];
d383 1
a383 2
	SYMBOL_DATA			cancelSymbolData;
	SYMBOL_BASIC_DATA		symbolBasicData;
d386 7
a392 10
	ALTER_SYMBOL_DATA		alterSymbolData [MAX_AF3DSET_NUM];
	STATUS_CHANGE_DATA		dynamicShapeData [MAX_SYMBOL_NUM];
	LABEL_CHANGE_DATA		fileFormatLabel;
	LABEL_CHANGE_DATA		areaSavedLabel;
	SAVE_IMAGE_DATA			selectSaveImageData;
	SAVE_IMAGE_DATA			cancelSaveImageData;
	OPEN_ADDPOINTS_DATA		openAddPointsData;		
	ADD_POINTS_DATA			selectAddPointsData;
	ADD_POINTS_DATA			cancelAddPointsData;

d394 2
a396 5
	Widget				orientation_set [ORIENTATION_NUM];
	Widget				backColorSet [MAX_NONIMAGE_COLOR];
	Widget				atlasColorSet [MAX_NONIMAGE_COLOR + 1];
	Widget				labelColorSet [MAX_NONIMAGE_COLOR];
	Widget				fontColorSet [MAX_NONIMAGE_COLOR];
d398 1
d401 18
a418 9
	Widget				textOrient [ORIENT_NUM];
	MAG_SCALE_MENU			mag_scale_menu;
	DATA_TYPE_MENU			data_type_menu;
	REGION_MENU			region_menu;
	SYMBOL_MENU			symbol_menu;
	FORMAT_SCREEN_MENU		format_screen_menu;
	COLOR_BAR_MENU			color_bar_menu;
	FONT_MENU			font_menu;
	PARAMETERS_DATA			default_parameters;
a419 1
	BOOLEAN				*display_region		= bDisplayRegion;
a420 2
	char				*dynamic_region_color	= cDynamicRegionColor;
	Pixel				*pixel_region_color	= pixelRegionColor;
d422 1
a422 1
	char				*dynamic_region_type	= cDynamicRegionType;
a423 4
	BOOLEAN				*display_symbol		= bDisplaySymbol;
	char				*symbol_color_code	= cSymbolColor;
	char				*dynamic_symbol_color	= cDynamicSymbolColor;
	Pixel				*pixel_symbol_color	= pixelAF3DColor;
d425 4
a428 1
	char				*dynamic_symbol_type	= cDynamicSymbolType;
a429 3
	XmString			*xmsize_symbol		= xmStrSymbolSize;
	XmString			*xmerror_messages	= xmStrErrorMessages;
	char				*atlas_file_name	= szAtlasFileName;
d642 1
a643 1
	watch_cursor	= XCreateFontCursor (display, XC_watch);
d646 7
a652 2
	strncpy (szAtlasPathName, argv [1], strlen (argv [1]) - 1);
	strncpy (szPetMaskPathName, argv [1], strlen (argv [1]) - 1);
d655 11
d667 3
d671 6
a676 2
	strcpy (szDefaultsPathName, pwd);
	strcpy (szWinDumpPathName, pwd);
@


1.50
log
@Dynamic change of X, Y, Z labels.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.49 1994/08/16 16:28:40 ty7777 Exp ty7777 $*/
d3 3
d63 1
a63 1
static char *rcsid = "$Id: view25d.c,v 1.49 1994/08/16 16:28:40 ty7777 Exp ty7777 $";
a65 1
PUBLIC XmString xmStrPathName;
d344 1
a347 1
	XmString			string_star;
a474 1
	string_star	= XmStringCreate ("*", XmSTRING_DEFAULT_CHARSET);	
a475 1
	xmStrPathName	= XmStringCreate (".", XmSTRING_DEFAULT_CHARSET);	
@


1.49
log
@Moved the opening of the Data Type menu to view25d.c.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.48 1994/05/09 16:08:21 ty7777 Exp ty7777 $*/
d3 3
d60 1
a60 1
static char *rcsid = "$Id: view25d.c,v 1.48 1994/05/09 16:08:21 ty7777 Exp ty7777 $";
d928 6
@


1.48
log
@Added Color43.tbl.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.47 1994/04/18 17:55:36 ty7777 Exp ty7777 $*/
d3 3
d57 1
a57 1
static char *rcsid = "$Id: view25d.c,v 1.47 1994/04/18 17:55:36 ty7777 Exp ty7777 $";
d826 3
@


1.47
log
@Added procesing for zorigin.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.46 1994/04/13 15:10:21 ty7777 Exp ty7777 $*/
d3 3
d54 1
a54 1
static char *rcsid = "$Id: view25d.c,v 1.46 1994/04/13 15:10:21 ty7777 Exp ty7777 $";
d84 1
a84 1
				   "Color42_White0.tbl", 
@


1.46
log
@Changed the color table names.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.45 1994/04/12 19:02:17 ty7777 Exp ty7777 $*/
d3 3
d39 1
d51 1
a51 1
static char *rcsid = "$Id: view25d.c,v 1.45 1994/04/12 19:02:17 ty7777 Exp ty7777 $";
@


1.45
log
@Change from Raichle.tbl to White_on_Black.tbl.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.44 1994/04/12 15:28:03 ty7777 Exp ty7777 $*/
d3 3
d47 1
a47 1
static char *rcsid = "$Id: view25d.c,v 1.44 1994/04/12 15:28:03 ty7777 Exp ty7777 $";
a75 1
				   "Color41.tbl", 
d77 1
@


1.44
log
@Added Raichle.tbl.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.43 1994/02/28 19:47:46 ty7777 Exp ty7777 $*/
d3 3
d44 1
a44 1
static char *rcsid = "$Id: view25d.c,v 1.43 1994/02/28 19:47:46 ty7777 Exp ty7777 $";
d76 1
a76 1
				   "Raichle.tbl"};
@


1.43
log
@Added Black_on_White color table.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.42 1994/01/24 20:08:52 ty7777 Exp $*/
d3 3
d41 1
a41 1
static char *rcsid = "$Id: view25d.c,v 1.42 1994/01/24 20:08:52 ty7777 Exp $";
d72 2
a73 1
				   "PosNeg.tbl"};
d328 1
a328 1
	XmString			ColorTableItems [5];
@


1.42
log
@Added copyright information.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.41 1994/01/12 21:41:26 ty7777 Exp ty7777 $*/
d3 3
d38 1
a38 1
static char *rcsid = "$Id: view25d.c,v 1.41 1994/01/12 21:41:26 ty7777 Exp ty7777 $";
d65 2
a66 1
char	*colorSetTable []	= {"Color40.tbl", 
d324 1
a324 1
	XmString			ColorTableItems [4];
@


1.41
log
@Change the default af3d directory.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.40 1994/01/11 22:23:45 ty7777 Exp ty7777 $*/
d3 3
d35 1
a35 1
static char *rcsid = "$Id: view25d.c,v 1.40 1994/01/11 22:23:45 ty7777 Exp ty7777 $";
a257 2
	PetColormap (display, window, szColorTableName);

d262 2
d275 1
a275 1
	XColor				gray_color;	/* X alloc. gray color */
d684 4
@


1.40
log
@Added processing for legend.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.39 1993/12/16 15:52:17 ty7777 Exp ty7777 $*/
d3 3
d32 1
a32 1
static char *rcsid = "$Id: view25d.c,v 1.39 1993/12/16 15:52:17 ty7777 Exp ty7777 $";
d619 4
d632 1
a632 1
	strcpy (szAF3DPathName, "/tmp");
a641 2
	strcpy (szDefaultsPathName, pwd);
	strcpy (szWinDumpPathName, pwd);
@


1.39
log
@Added coordEditTextData.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.38 1993/12/14 20:00:53 ty7777 Exp ty7777 $*/
d3 3
d29 1
a29 1
static char *rcsid = "$Id: view25d.c,v 1.38 1993/12/14 20:00:53 ty7777 Exp ty7777 $";
d931 2
@


1.38
log
@Added button Maximum Distance (mm) in the AF3D Representation menu.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.37 1993/12/13 15:19:31 ty7777 Exp ty7777 $*/
d3 3
d26 1
a26 1
static char *rcsid = "$Id: view25d.c,v 1.37 1993/12/13 15:19:31 ty7777 Exp ty7777 $";
d317 2
a318 1
	TEXT_EDIT_DATA			selectTextEditData;
d850 8
a857 5
	selectTextEditData.node_flag	= SELECT;
	selectTextEditData.dialog	= frameTextEdit;
	selectTextEditData.text		= textTextEdit;
	XtAddCallback (okTextEdit, XmNactivateCallback, 
		TextEditCallback, &selectTextEditData);
d859 9
d869 1
d872 2
d967 2
@


1.37
log
@After adding view25d.
@
text
@d1 1
a1 1
/*$Id: view25d.c,v 1.36 1993/10/07 16:19:03 ty7777 Exp ty7777 $*/
d3 3
d23 1
a23 1
static char *rcsid = "$Id: view25d.c,v 1.36 1993/10/07 16:19:03 ty7777 Exp ty7777 $";
d547 1
@


1.36
log
@Added rcsid.
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d20 1
a20 1
static char *rcsid = "$Id$";
d928 1
a928 1
	FontStruct	= XLoadQueryFont (display, FONT);
d930 1
a930 1
		fprintf (stderr, "Can Not Find Font %s\n", FONT);
@


1.35
log
@Version build with image_orientation.
@
text
@d1 2
d16 2
@


1.34
log
@Added gray color for atlas color.
@
text
@d255 1
a255 1
	char				szBuffer [MAXLINE];	/* atlas region filename */
d257 1
a257 1
	Window				root_window;         /* window to display in */
@


1.33
log
@After savelog works.
@
text
@a8 1
#define MAX_GRAY_LEVELS     10
d219 1
a219 1
						MAX_NONIMAGE_COLOR), arglist, n);
d343 1
a343 1
	Widget				atlasColorSet [MAX_NONIMAGE_COLOR];
d467 1
d798 1
d807 1
d816 1
@


1.32
log
@View and Log Coordinates File.
@
text
@d9 1
a252 1
	Pixel				pixel;		/* a pixel, for color assignment */
d254 1
a254 2
	XColor				color;		/* X alloc. approximate color */
	XColor				exact;		/* X alloc. exact color */
d415 2
@


1.31
log
@After adding show point location.
@
text
@d4 3
d84 1
a84 1
char *errorMessages [] = {"Your af3d file format is incorrect. Please use ``gammaz2i'' to convert your data.",
a86 1

@


1.30
log
@Before working on Dr. Raichle's coordinates location problem.
@
text
@d280 1
@


1.29
log
@After multiple regions display worked.
@
text
@d520 1
@


1.28
log
@Before region changes.
@
text
@d170 6
a225 10
	XtGetValues (GetActiveWidget (default_parameters->region_color_set, 
						MAX_NONIMAGE_COLOR), arglist, n);
	color.pixel	= selected_color_pixel;
	XQueryColor (display, dcmap, &color); 
	rgbRegion.red	= color.red;
	rgbRegion.green	= color.green;
	rgbRegion.blue	= color.blue;

	n	= 0;
	XtSetArg (arglist [n], XtNbackground, &selected_color_pixel); n++;
a264 1
	NONIMAGE_COLOR_DATA		regionColorData;
d274 1
a275 1
	FILE_SELECTION_DATA		maskFileSelectionData;
a300 3
	STATUS_CHANGE_DATA		regionFilledData;
	STATUS_CHANGE_DATA		regionOutlineData;
	STATUS_CHANGE_DATA		regionPixelData;
d310 10
a342 1
	Widget				regionColorSet [MAX_NONIMAGE_COLOR];
d351 1
d358 6
a464 9
	regionColorSet[0]	= toggleRegionBlack;	
	regionColorSet[1]	= toggleRegionBlue;	
	regionColorSet[2]	= toggleRegionCyan;	
	regionColorSet[3]	= toggleRegionGreen;	
	regionColorSet[4]	= toggleRegionYellow;	
	regionColorSet[5]	= toggleRegionMagenta;	
	regionColorSet[6]	= toggleRegionRed;	
	regionColorSet[7]	= toggleRegionWhite;	

a499 1
	data_type_menu.region		= &toggleDisplayRegion;
d514 7
a567 1
	default_parameters.region_color_set	= regionColorSet;
d571 1
d593 9
d615 1
d627 1
d697 1
a804 8
	regionColorData.display		= display;	
	regionColorData.root_window	= root_window;	
	regionColorData.rgb_value	= &rgbRegion;	
	regionColorData.color_set	= regionColorSet;	
	regionColorData.dialog		= &frameRegionColor;
	XtAddCallback (selectRegionColor, XmNactivateCallback, 
			NonImageColorCallback, &regionColorData);

d845 21
@


1.27
log
@Add toggleApplyMask widget.
@
text
@d627 3
@


1.26
log
@Changed file selection cancel callback.
@
text
@d500 1
@


1.25
log
@After add AF3D points works.
@
text
@d684 1
a684 1
		XmNactivateCallback, CancelCallback, fileSelection);
@


1.24
log
@Before fixing ECAT image reading bug.
@
text
@d12 1
d81 3
d85 1
d332 3
d365 1
d380 1
a380 1
		ColorTableItems [i] = XmStringCreate (colorSetTable[i], XmSTRING_DEFAULT_CHARSET);	
d385 1
a385 1
		xmfont_table [i] = XmStringCreate (fontTable[i], XmSTRING_DEFAULT_CHARSET);	
d390 1
a390 1
		xmsize_table [i] = XmStringCreate (fontSizeTable[i], XmSTRING_DEFAULT_CHARSET);	
d393 5
d675 1
d853 22
@


1.23
log
@Before changing libcti.a.
@
text
@d606 3
a608 1
	/* set the graphics context */
d614 2
a617 2
	strcpy (atlas_file_name, argv [1]);
	strcat (atlas_file_name, "HD6_transverse.atl");
@


1.22
log
@Add atlas trim.
@
text
@d511 1
@


1.21
log
@Adding CreateDialog function.
@
text
@d525 1
@


1.20
log
@Same as last version.
@
text
@d165 14
@


1.19
log
@The AF3D files have the same path.
@
text
@@


1.18
log
@After Mask File Selection Menu Worked.
@
text
@d557 1
a559 2
		strcpy (szAF3DPathNames [i], "/tmp");

@


1.17
log
@Before adding mask menu.
@
text
@d261 1
d553 1
@


1.16
log
@After AF3D All Planes worked.
@
text
@d240 1
a240 1
	char				szBuffer[MAXLINE];		/* atlas region filename */
d342 1
d344 10
d549 3
a551 1
	strcpy (szColorTableName, DEFAULT_COLOR_TABLE);
d593 2
d596 4
a599 4
		"/usr/local/lib/VIEW25D/view25d.parameters", &default_parameters,
		xmsize_symbol);
	strcpy (szAtlasFileName, "/usr/local/lib/VIEW25D/HD6_transverse.atl");
	ReadAtlasHeader ("/usr/local/lib/VIEW25D/HD6_transverse.atl");
@


1.15
log
@After AF3D menu works.
@
text
@d484 1
@


1.14
log
@After AF3D menu cancel button works.
@
text
@a3 1
#include <X11/cursorfont.h>
a55 8
char	*nonImageColorList []	= {"Black", 
				   "Blue", 
				   "Cyan", 
				   "Green", 
				   "Yellow", 
				   "Magenta", 
				   "Red", 
				   "White"};
a164 16
static char *symbol_names [] = {
	"rect_outline",
	"circle_outline",
	"diamond_outline",
	"up_triangle_outline",
	"down_triangle_outline",
	"left_triangle_outline",
	"right_triangle_outline",
	"rect_filled",
	"circle_filled",
	"diamond_filled",
	"up_triangle_filled",
	"down_triangle_filled",
	"left_triangle_filled",
	"right_triangle_filled"};

d333 1
d580 2
a581 1
		"/usr/local/lib/VIEW25D/view25d.parameters", &default_parameters);
@


1.13
log
@Before AF3D menu cancel button works.
@
text
@d820 4
a823 3
	cancelSymbolData.node_flag	= CANCEL;
	cancelSymbolData.dialog		= frameAF3DRepresent;
	cancelSymbolData.symbol_menu	= &symbol_menu;
@


1.12
log
@Before symbol size works.
@
text
@d400 6
d499 9
a507 8
	symbol_menu.toggle_alter_set	= toggleSymbolSet;
	symbol_menu.display_onoff_set	= toggleOnOffShow;
	symbol_menu.label_file_set	= labelAF3DFileShow;
	symbol_menu.label_symbol_set	= labelAF3DSymbolShow;
	symbol_menu.toggle_color_set	= toggleAF3DColor;
	symbol_menu.toggle_symbol_set	= toggleAF3DSymbol;
	symbol_menu.filled		= &toggleFilledSymbol;
	symbol_menu.size_text		= &textSymbolSize;
d574 1
a574 4

		itoa (*(symbol_size + i), szBuffer);
printf ("i = %d %s\n", i + 1, szBuffer);
		*(xmsize_symbol + i)		= XmStringCreate (szBuffer, XmSTRING_DEFAULT_CHARSET);	
a606 5

	for (i = 0; i < MAX_AF3DSET_NUM; i++)
	{
		*(dynamic_symbol_type + i)	= *(symbol_type + i);
	}
@


1.11
log
@After AF3D menu works.
@
text
@d14 1
a14 1
PUBLIC XmString xmStrSymbolCodeName [];
d364 2
a365 1
	XmString			*symbol_code_name	= xmStrSymbolCodeName;
a381 6
	for (i = 0; i < 2 * MAX_SYMBOL_NUM; i++)
	{
		itoa (i, szBuffer);
		*(symbol_code_name + i)	= XmStringCreate (szBuffer, XmSTRING_DEFAULT_CHARSET);	
	}

d567 4
@


1.10
log
@Before Building AF3D Queue.
@
text
@d307 3
a309 3
	XmString			ColorTableItems[4];
	XmString			xmfont_table[5];
	XmString			xmsize_table[11];
d360 2
d363 1
a483 1
	data_type_menu.AF3D		= &toggleDisplayAF3D;
a501 2
	symbol_menu.color_code_set	= labelAF3DColorCodeShow;
	symbol_menu.label_code_set	= labelAF3DCodeShow;
d505 1
a505 2
	symbol_menu.width_text		= &wSymbolText;
	symbol_menu.height_text		= &hSymbolText;
d565 1
a565 1
		strcpy (szAF3DPathNames [i], pwd);
d568 1
a568 1
		XtSetArg (arglist[n], XtNbackground, pixelAF3DColor + i); n++;
d570 2
d604 5
@


1.9
log
@Before AF3D works
@
text
@d329 1
a329 1
	SYMBOL_SHOW_DATA		symbolColorShowData;
d358 2
a377 11
	for (i = 0; i < FILLED_SYMBOL_START; i++)
	{
		*(symbol_type + i)	= i + FILLED_SYMBOL_START;

	}

	for (i = FILLED_SYMBOL_START; i < MAX_AF3DSET_NUM; i++)
	{
		*(symbol_type + i)	= i - FILLED_SYMBOL_START;
	}

d500 1
@


1.8
log
@Before AF3D memu works
@
text
@d14 1
d321 1
d328 1
d331 1
a331 1
	STATUS_CHANGE_DATA		alterSymbolData [MAX_AF3DSET_NUM];
d358 2
d376 17
d412 1
d509 1
d573 1
d575 5
a587 4

	n	= 0;
	XtSetArg (arglist[n], XtNbackground, &pixelAF3DColor); n++;
	XtGetValues (toggleAF3DColor [MAX_NONIMAGE_COLOR - 2], arglist, n);
@


1.7
log
@Before AF3D menu works.
@
text
@d304 2
a305 1
	XmString			stringStar;
a325 1
	STATUS_CHANGE_DATA		alterSymbolData [MAX_AF3DSET_NUM];
d328 1
d349 1
d385 2
a386 1
	stringStar	= XmStringCreate ("*", XmSTRING_DEFAULT_CHARSET);	
d482 10
d530 1
d787 1
a787 5
	redrawSymbolData.toggle_color	= &toggleAF3DColor [0];
	redrawSymbolData.toggle_symbol	= &toggleAF3DSymbol [0];
	redrawSymbolData.filled		= toggleFilledSymbol;
	redrawSymbolData.width_text	= wSymbolText;
	redrawSymbolData.height_text	= hSymbolText;
d794 1
a794 5
	selectSymbolData.toggle_color	= &toggleAF3DColor [0];
	selectSymbolData.toggle_symbol	= &toggleAF3DSymbol [0];
	selectSymbolData.filled		= toggleFilledSymbol;
	selectSymbolData.width_text	= wSymbolText;
	selectSymbolData.height_text	= hSymbolText;
d800 1
a800 5
	cancelSymbolData.toggle_color	= &toggleAF3DColor [0];
	cancelSymbolData.toggle_symbol	= &toggleAF3DSymbol [0];
	cancelSymbolData.filled		= toggleFilledSymbol;
	cancelSymbolData.width_text	= wSymbolText;
	cancelSymbolData.height_text	= hSymbolText;
@


1.6
log
@Before AF3D Change.
@
text
@d326 1
a326 1
	SYMBOL_SHOW_DATA		symbolShowData;
d534 2
a535 1
	strcpy (szAF3DPathName, pwd);
@


1.5
log
@Before testing of center.
@
text
@d397 1
a397 1
	orientation_set [0]	= toggleHorizontal;
d701 3
a703 1
	/* Background, Atlas, Region, AF3D, and Label Color Callbacks */
d788 2
a789 1
	XtAddCallback (selectAF3DRepresent, XmNactivateCallback, AF3DSymbolCallback, &selectSymbolData);
d801 3
a803 1
	/* Load Text font */
d814 3
a816 1
	/* Add Event Handlers for Mouse Button Events */
d830 3
a832 1
	/* grab the mouse pointer on mouse events in virtual screen */
@


1.4
log
@Before coronal and sagittal functions are added.
@
text
@@


1.3
log
@Before cornoal and sagittal functions are added.
@
text
@d548 3
a550 1
	/* initialize global lists */
d555 3
a557 1
	/* set backing store on window */
@


1.2
log
@Save defaults for atlas orientations.
@
text
@@


1.1
log
@Initial revision
@
text
@d83 6
d336 1
d397 5
d470 1
d756 4
a759 3
	selectSlicesData.text_first	= textFirstSlice;
	selectSlicesData.text_last	= textLastSlice;
	selectSlicesData.text_spacing	= textSpacing;
@
