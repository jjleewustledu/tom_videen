head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	92.04.28.17.58.26;	author ty7777;	state Exp;
branches;
next	;


desc
@View25d C Source Code First Version.
@


1.1
log
@Initial revision
@
text
@/*_____________________________________________________________________________
* name:	interp
*								
* function:	perform bilinear interpolation to expand or contract images
*								
* purpose:	general bilinear interpolation routine to handle expansion
*		or contraction of non-integral images for image display
*		program, "disp".  
* algorithm:	If
*		X1A (J) <= x1 <= X1A (J + 1)
*		X2A (J) <= x2 <= X2A (J + 1)
*		defines J and K, then
*		y1 = YA (J, K)
*		y2 = YA (J + 1, K)
*		y3 = YA (J + 1, K + 1)
*		y4 = YA (J, K + 1).
*		The simplest interpolation in two dimensions is bilinear
*		interpolation on the grid square. Its formula are:
*		t = (x1 - X1A (J)) / (X1A (J + 1) - X1A (J))
*		u = (x2 - X2A (K)) / (X2A (K + 1) - X2A (K))
*		(so that t and u each lie between 0 and 1), and
*		y (x1, x2) = (1 - t)(1 - u) y1 + t(1 - u) y2
*				+ tu y3 + (1 - t)u y2.
*		Please see p. 96 of ``Numerical Recipes'' (The Art of Scientific
*		Computing) by William H. Press, Brain P. Flannery,
*		Saul A. Teukolsky, William T. Vertterling, Cambridge
*		University Press, 1986.
*									
* notation\								 
* explanation: 	The term "integral" is used to define the pixel ratio    
* 		between the input and output image as being a log to the 
*		base 2 integer--i.e. 512 by 512 to 256 by 256.           
*								 	 
* restrictions:							 
*   		1) Only GREYTYPE images can be interpolated in this routine.
*									
* author: Brian Whitney
* date:	Winter 1982
* course: Comp 90
*
* note: Modified from a program called "bilinterp.c" written by
*       S.M. Pizer, 26 Jan 1981 
______________________________________________________________________________*/
/*
	Modified to replace all references to type GREYTYPE with type short.
	Renamed to procedure interp.

	M. Todd Gamble
	07/10/90

	Modified to delete the scaledown (x) macro and replaced all
	references to 2.0 with integer 2. Add comments for the 
	algorithm source.

	Tom (Tongzeng) Yang
	01/12/92
*/


void	interp (oldimage, oldx, oldy, newimage, newx, newy)

	register short	*oldimage;		/* Input image to be interpolated or expanded */	
	register short	*newimage;		/* Output image */	
	int		oldx, oldy;            	/* Size of oldimage along x and y-axis */
	int		newx, newy;           	/* Size of newimage along x and y-axis */	
{
	int		i, j; 		  	/* Pixel indices */
	int		regx, regy; 	  	/* Region indices */
	float		xscale, yscale; 	  	/* Region dimensions in pixels */
	float		diffx, diffy; 	  	/* Positions relative to region center */
	int		lbound, rbound;		/* Intermediate interpolated values */
	float		ypixweight; 		/* weighting factor for intermediate */
						/* interpolated values lbound and rbound*/
	int		index_const;		/* address constant for new image used */
						/* to save additions in inner loop */
	register short	*oldpixel;		/* pointer to old image */

	/* interpolate */
	xscale		= ((float) newx) / oldx;
	yscale		= ((float) newy) /oldy;

	for (i = 0; i < newy; ++i)  
	{
		regy = i / yscale - 0.5;
		if (regy < 0) 
			regy = 0;
		else if (regy > oldy - 2) 
			regy = oldy - 2;
		diffy = i / yscale - (regy + 0.5);
		if (diffy < 0) 
			diffy = 0; 
		ypixweight = 1 - diffy;

		oldpixel = &oldimage [oldx * regy];

		for (j = 0; j < newx; ++j) 
		{
			regx = j / xscale - 0.5;
			if (regx < 0) 
				regx = 0;
			else if (regx > oldx - 2) 
				regx = oldx - 2;
			diffx = j / xscale - (regx + 0.5);
			if (diffx < 0) 
				diffx = 0;

			index_const	= regx + oldx;
			lbound		= ypixweight * *(oldpixel + regx) +
						diffy * *(oldpixel + index_const);
			rbound		= ypixweight * *(oldpixel + (++regx)) +
						diffy * *(oldpixel + (++index_const));
			(*newimage++)	= (short int) (diffx * rbound + (1 - diffx) * lbound);
		}
	}
}
@
