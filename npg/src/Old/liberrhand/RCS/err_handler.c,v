head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	99.12.13.14.46.37;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.06.10.08.50.54;	author jane;	state Exp;
branches;
next	;


desc
@Initial revision
@


1.2
log
@tov revision
@
text
@/*$Id: err_handler.c,v 1.1 1996/06/10 08:50:54 jane Exp tom $*/
/*$Log: err_handler.c,v $
 * Revision 1.1  1996/06/10  08:50:54  jane
 * Initial revision
 **/
/*  ===========================================================================
 *  File:        err_handler.c
 *  Date:        April-96
 *  Author:      Jane Dunford-Shore
 *  Description: Error handler
 *  Library:     liberrhand
 *  ===========================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errhand.h>

/* ---------------------
 * FUNCTION: err_handler
 * PURPOSE: Print error messages for program errors to standard error.
 *          Exit program with exit value that is program-defined error value.
 * ARGUMENTS: int errortype: program-defined error value
 *            const char *string: additional text for error message
 * RETURNS: void (nothing)
 * ---------------------
 */

static char     progname[MAXSTR];
static char     cmd_syntax[MAXLEN_CMDSYN];

void            err_handler_init (ERRVAR errvar, void *value)
{

	switch (errvar) {

		case PROGNAME:
		(void) strcpy (progname, (char *) value);
		break;

	case CMD_SYNTAX:
		(void) strcpy (cmd_syntax, (char *) value);
		break;

	default:
		break;

	}
}


void            err_handler (ERRTYPE errortype, const char *string)
{
	char            errstr[ERRSTRLEN];

	switch (errortype) {

	case CMD_SYNTAX_ERR:			 /* command-line parameter specification error */
		(void) strcpy (errstr, cmd_syntax);
		break;

	case MEM_ALLOC_ERR:			 /* memory allocation error */
		(void) strcpy (errstr, "Error: Unable to allocate memory for ");
		(void) strcat (errstr, string);
		(void) strcat (errstr, "\n");
		break;

	case FILE_CREATE_ERR:			 /* file creation error */
		(void) strcpy (errstr, "Error: Unable to create file ");
		(void) strcat (errstr, string);
		(void) strcat (errstr, "\n");
		break;

	case FILE_OPEN_ERR:			 /* error in opening of file */
		(void) strcpy (errstr, "Error: Unable to open file ");
		(void) strcat (errstr, string);
		(void) strcat (errstr, "\n");
		break;

	case FILE_READ_ERR:			 /* error in reading of file */
		(void) strcpy (errstr, "Error: Incorrect number of bytes read from file ");
		(void) strcat (errstr, string);
		(void) strcat (errstr, "\n");
		break;

	case CUSTOM:				 /* custom error message */
		(void) strcpy (errstr, "Error: ");
		(void) strcat (errstr, string);
		(void) strcat (errstr, "\n");
		break;

	case FILE_WRITE_ERR:			 /* error in writing to file */
		(void) strcpy (errstr, "Error: Incorrect number of bytes written to file ");
		(void) strcat (errstr, string);
		(void) strcat (errstr, "\n");
		break;

	default:
		(void) strcpy (errstr, "Undefined error.\n");
		break;

	}					 /* end switch/case */

	/* print error message to STDERR */

	if (errortype == CMD_SYNTAX_ERR)
		(void) fprintf (stderr, "%s", (const char *) errstr);
	else
		perror (errstr);

	exit (errortype);

}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d18 1
a18 1
#include "errhand.h"
d26 1
a26 1
 * RETURNS: void (nothing) 
d30 2
a31 2
char progname[MAXSTR];
char cmd_syntax[MAXLEN_CMDSYN];
d33 2
a34 1
void err_handler_init (ERRVAR errvar, void *value) {
d36 1
a36 5
    switch (errvar) {
      
    case PROGNAME:
        strcpy(progname, (char *)value);
        break;
d38 3
a40 6
    case CMD_SYNTAX:
        strcpy(cmd_syntax, (char *)value);
        break;
   
    default:
        break;
d42 8
a49 2
    }
    
d53 3
a55 4
void err_handler(ERRTYPE errortype, const char *string) {
   
    char errstr[ERRSTRLEN];
    const char *append_str;
d57 1
a57 1
    append_str = ((string == NULL) ? "" : string);
d59 3
a61 1
    switch (errortype) {
d63 5
a67 3
    case CMD_SYNTAX_ERR:   /* command-line parameter specification error */
        strcpy(errstr, cmd_syntax );
        break;
d69 5
a73 5
    case MEM_ALLOC_ERR:   /* memory allocation error */
        strcpy(errstr, "Error: Unable to allocate memory for ");
        strcat(errstr, string);
        strcat(errstr, "\n");
        break;
d75 5
a79 5
    case FILE_CREATE_ERR:   /* file creation error */
        strcpy(errstr, "Error: Unable to create file ");
        strcat(errstr, string);
        strcat(errstr, "\n");
        break; 
d81 5
a85 5
    case FILE_OPEN_ERR:   /* error in opening of file */
        strcpy(errstr, "Error: Unable to open file ");
        strcat(errstr, string);
        strcat(errstr, "\n");
        break;
d87 5
a91 5
    case FILE_READ_ERR:   /* error in reading of file */
        strcpy(errstr, "Error: Incorrect number of bytes read from file ");
        strcat(errstr, string);
        strcat(errstr, "\n");
        break;
d93 5
a97 5
    case CUSTOM:    /* custom error message */
        strcpy(errstr, "Error: ");
        strcat(errstr, string);
        strcat(errstr, "\n");
        break;
d99 3
a101 5
    case FILE_WRITE_ERR:   /* error in writing to file */
        strcpy(errstr, "Error: Incorrect number of bytes written to file ");
        strcat(errstr, string);
        strcat(errstr, "\n");
        break;
d103 1
a103 3
    default:
        strcpy(errstr, "Undefined error.\n");
        break;
d105 1
a105 1
    }   /* end switch/case */
d107 4
a110 1
    /* print error message to STDERR */
d112 1
a112 6
    if (errortype == CMD_SYNTAX_ERR) {
        fprintf(stderr, "%s", (const char *)errstr);
    }
    else {
        perror(errstr);
    }
a113 2
    exit(errortype);
    
@
