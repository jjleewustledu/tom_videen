head	2.3;
access;
symbols;
locks; strict;
comment	@ * @;


2.3
date	99.12.13.17.04.17;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.05.17.17.42.37;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.05.16.18.57.37;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.04.24.23.07.41;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.03.12.23.00.34;	author tom;	state Exp;
branches;
next	;


desc
@@


2.3
log
@tov revision
@
text
@/*	$Id: buildnames.c,v 2.2 1996/05/17 17:42:37 tom Exp tom $
	$Log: buildnames.c,v $
 * Revision 2.2  1996/05/17  17:42:37  tom
 * reinsert filtmode
 *
 * Revision 2.1  1996/05/16  18:57:37  tom
 * eliminate filtmode from parameter list
 *
 * Revision 2.0  1996/04/24  23:07:41  tom
 * new library release
 *
 * Revision 1.1  1996/03/12  23:00:34  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			buildnames.c
 *	Date:			Jun-93
 *	Author:			Tom Yang
 *	Description:	Construct short filenames from prm and imglist structures.
 *	History:
 *		Apr-96	TOV	Eliminate input parameter imgmode (get from prm).
 *
 *	Algorithm:
 *		if (imgmode == STDIMAGE_MODE) then
 *			fname [0]:
 *			<species><subject_id><tracer><scanset1_id><filter>[.<extension>]
 *	
 *			fname [1]:
 *			<species><subject_id><tracer><scanset2_id><filter>[.<extension>]
 *		else if (imgmode == DIFIMAGE_MODE)
 *			fname [0]:
 *			<species><subject_id><tracer><scanset1_id>-<scanset2_id><suffix><filter>[.<extension>]
 *		else if (imgmode == PREWELDED_IMAGE_MODE)
 *			fname [0]:
 *			<species><subject_id><tracer><scanset1_n1><filter>[.<extension>]
 *	
 *			fname [1]:
 *			<species><subject_id><tracer><scanset1_n2><filter>[.<extension>]
 *	
 *			fname [2]:
 *			<species><subject_id><tracer><scanset2_n1><filter>[.<extension>]
 *	
 *			fname [3]:
 *			<species><subject_id><tracer><scanset2_n2><filter>[.<extension>]
 *		else if (imgmode == MULTITRACER_IMAGE_MODE)
 *			fname [0]:
 *			<species><subject_id><tracer><scanset1_n1><filter>[.<extension>]
 *	
 *			fname [1]:
 *			<species><subject_id><ftracer><scanset1_n2><filter>[.<extension>]
 *	
 *			fname [2]:
 *			<species><subject_id><vtracer><scanset1_n3><filter>[.<extension>]
 *	
 *			fname [3]:
 *			<species><subject_id><tracer><scanset2_n1><filter>[.<extension>]
 *	
 *			fname [4]:
 *			<species><subject_id><ftracer><scanset2_n2><filter>[.<extension>]
 *	
 *			fname [5]:
 *			<species><subject_id><vtracer><scanset2_n3><filter>[.<extension>]
 *		else if (imgmode == WELDED_IMAGE_MODE)
 *			fname [0]:
 *			<species><subject_id><tracer><scanset1_id>w<scanset2_id>[.<extension>]
 *		endif
 *
 * ===============================================================================
 */
#ifndef lint
static char		rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/buildnames.c,v 2.2 1996/05/17 17:42:37 tom Exp tom $";
#endif 

#include <stdio.h>
#include <string.h>
#include <imgutil.h>
#include <myvalues.h>

#define	MINUS	"-"
#define	WELD	"w"

int      buildnames (prm, imglist, filtmode, nfiles, fname, sxrname)
	PARAMETER_DATA  *prm;
	IMAGE_LIST_DATA *imglist;
	int             filtmode;		/* IMGFILTER_MODE, MSKFILTER_MODE */
	int            *nfiles;			/* returned */
	char          **fname;			/* returned */
	char           *sxrname;		/* returned */

{
	int             imgmode;		/* STDIMAGE_MODE, DIFIMAGE_MODE */
	char            cbuffer[MAXPATH];
	char            extension[MAXPATH];
	char            fsuffix[MAXPATH];
	char            string[MAXPATH];
	char            subject[MAXPATH];
	float           filter_cutoff = 0;
	int             filter_order = 0;
	int             filter_type = 0;
	int             scanset_field[6];
	int             i;
	void			filter_suffix ();

	(void) strcpy (cbuffer, prm->species);
	(void) strcat (cbuffer, imglist->subject_id);
	(void) strcpy (subject, cbuffer);
	(void) strcat (cbuffer, prm->tracer);
	imgmode = prm->imglist_mode;

	if (filtmode == RECFILTER_MODE) {
		filter_type = prm->recfilter_type;
		filter_cutoff = prm->recfilter_cutoff;
		filter_order = prm->recfilter_order;
	} else if (filtmode == IMGFILTER_MODE) {
		filter_type = prm->imgfilter_type;
		filter_cutoff = prm->imgfilter_cutoff;
		filter_order = prm->imgfilter_order;
	} else if (filtmode == MSKFILTER_MODE) {
		filter_type = prm->mskfilter_type;
		filter_cutoff = prm->mskfilter_cutoff;
		filter_order = prm->mskfilter_order;
	}
	if (imgmode == STDIMAGE_MODE) {
		(void) strcpy (fname[0], cbuffer);
		(void) strcat (fname[0], imglist->scanset1_id);
		*nfiles = 1;
		if (strlen (imglist->scanset2_id) > 0) {
			(void) strcpy (fname[1], cbuffer);
			(void) strcat (fname[1], imglist->scanset2_id);
			*nfiles = 2;
		}
	} else if (imgmode == DIFIMAGE_MODE) {
		if (strlen (imglist->scanset2_id) == 0) {
			fprintf (stderr, "ERROR [buildnames]: image list is not paired\n");
			return (ERROR);
		}
		(void) strcpy (fname[0], cbuffer);
		(void) strcat (fname[0], imglist->scanset1_id);
		(void) strcat (fname[0], MINUS);
		(void) strcat (fname[0], imglist->scanset2_id);
		*nfiles = 1;
	} else if (imgmode == PREWELDED_IMAGE_MODE) {
		if (sscanf (imglist->scanset1_id, "%dw%d", scanset_field, scanset_field + 1) != 2) {
			fprintf (stderr, "ERROR [buildnames]: scanset1_id (%s) is not of the form n1wn2\n",
				 imglist->scanset1_id);
			return (ERROR);
		}
		for (i = 0; i <= 1; i++) {
			(void) strcpy (fname[i], cbuffer);
			itoa (scanset_field[i], string);
			(void) strcat (fname[i], string);
		}
		*nfiles = 2;

		if (strlen (imglist->scanset2_id) > 0) {
			if (sscanf (imglist->scanset2_id, "%dw%d", scanset_field,
				    scanset_field + 1) != 2) {
				fprintf (stderr, "ERROR [buildnames]: scanset2_id (%s) is no of the form n1wn2\n",
					 imglist->scanset2_id);
				return (ERROR);
			}
			for (i = 2; i <= 3; i++) {
				(void) strcpy (fname[i], cbuffer);
				itoa (scanset_field[i - 2], string);
				(void) strcat (fname[i], string);
			}
			*nfiles = 4;
		}
	} else if (imgmode == MULTITRACER_IMAGE_MODE) {
		if (sscanf (imglist->scanset1_id, "%df%dv%d",
			    scanset_field, scanset_field + 1, scanset_field + 2) != 3) {
			fprintf (stderr, "ERROR [buildnames]: scanset1_id (%s) is not of the form n1fn2vn3\n",
				 imglist->scanset1_id);
			return (ERROR);
		}
		(void) strcpy (fname[0], cbuffer);
		(void) strcpy (fname[1], subject);
		(void) strcat (fname[1], prm->ftracer);
		(void) strcpy (fname[2], subject);
		(void) strcat (fname[2], prm->vtracer);
		for (i = 0; i <= 2; i++) {
			itoa (scanset_field[i], string);
			(void) strcat (fname[i], string);
		}
		*nfiles = 3;

		if (strlen (imglist->scanset2_id) > 0) {
			if (sscanf (imglist->scanset2_id, "%df%dv%d",
				    scanset_field, scanset_field + 1, scanset_field + 2) != 3) {
				fprintf (stderr, "ERROR [buildnames]: scanset1_id (%s) is not of the form n1fn2vn3\n",
					 imglist->scanset2_id);
				return (ERROR);
			}
			(void) strcpy (fname[3], cbuffer);
			(void) strcpy (fname[4], subject);
			(void) strcat (fname[4], prm->ftracer);
			(void) strcpy (fname[5], subject);
			(void) strcat (fname[5], prm->vtracer);
			for (i = 3; i <= 5; i++) {
				itoa (scanset_field[i - 3], string);
				(void) strcat (fname[i], string);
			}
			*nfiles = 6;
		}
	} else if (imgmode == WELDED_IMAGE_MODE) {
		if (strlen (imglist->scanset2_id) == 0) {
			fprintf (stderr, "ERROR [buildnames]: image list is not paired\n");
			return (ERROR);
		}
		(void) strcpy (fname[0], cbuffer);
		(void) strcat (fname[0], imglist->scanset1_id);
		(void) strcat (fname[0], WELD);
		(void) strcat (fname[0], imglist->scanset2_id);
		*nfiles = 1;
	} else {
		fprintf (stderr, "ERROR [buildnames]: Unknown image mode: %d\n", imgmode);
		return (ERROR);
	}

/*
 * Add extension
 */
	if (strlen (prm->extension) == 0 && imgmode == DIFIMAGE_MODE)
		(void) strcpy (extension, DIFF_EXT);
	else
		(void) strcpy (extension, prm->extension);
	for (i = 0; i < *nfiles; i++) {
		(void) strcat (fname[i], prm->suffix);
		if (filter_type != FILTER_NONE) {
			filter_suffix (filter_type, filter_cutoff, filter_order, fsuffix);
			(void) strcat (fname[i], fsuffix);
		}
		(void) strcat (fname[i], extension);
	}

/*
 * Construct short sxr file
 */
	(void) strcpy (sxrname, subject);
	if (strlen (imglist->sxrid) > 0)
		(void) strcat (sxrname, imglist->sxrid);
	else
		(void) strcat (sxrname, SXR_EXT);
	return (OK);
}
@


2.2
log
@reinsert filtmode
@
text
@d1 1
a1 1
/*	$Id: buildnames.c,v 2.1 1996/05/16 18:57:37 tom Exp tom $
d3 3
d71 1
a71 1
static char		rcsid[] = "$Header: /home/petsun19/tom/src/libimgutil/RCS/buildnames.c,v 2.1 1996/05/16 18:57:37 tom Exp tom $";
d75 1
d77 1
d97 3
a99 3
	float           filter_cutoff;
	int             filter_order;
	int             filter_type;
d104 4
a107 4
	strcpy (cbuffer, prm->species);
	strcat (cbuffer, imglist->subject_id);
	strcpy (subject, cbuffer);
	strcat (cbuffer, prm->tracer);
d124 2
a125 2
		strcpy (fname[0], cbuffer);
		strcat (fname[0], imglist->scanset1_id);
d128 2
a129 2
			strcpy (fname[1], cbuffer);
			strcat (fname[1], imglist->scanset2_id);
d137 4
a140 4
		strcpy (fname[0], cbuffer);
		strcat (fname[0], imglist->scanset1_id);
		strcat (fname[0], MINUS);
		strcat (fname[0], imglist->scanset2_id);
d149 1
a149 1
			strcpy (fname[i], cbuffer);
d151 1
a151 1
			strcat (fname[i], string);
d163 1
a163 1
				strcpy (fname[i], cbuffer);
d165 1
a165 1
				strcat (fname[i], string);
d176 5
a180 5
		strcpy (fname[0], cbuffer);
		strcpy (fname[1], subject);
		strcat (fname[1], prm->ftracer);
		strcpy (fname[2], subject);
		strcat (fname[2], prm->vtracer);
d183 1
a183 1
			strcat (fname[i], string);
d194 5
a198 5
			strcpy (fname[3], cbuffer);
			strcpy (fname[4], subject);
			strcat (fname[4], prm->ftracer);
			strcpy (fname[5], subject);
			strcat (fname[5], prm->vtracer);
d201 1
a201 1
				strcat (fname[i], string);
d210 4
a213 4
		strcpy (fname[0], cbuffer);
		strcat (fname[0], imglist->scanset1_id);
		strcat (fname[0], WELD);
		strcat (fname[0], imglist->scanset2_id);
d224 1
a224 1
		strcpy (extension, DIFF_EXT);
d226 1
a226 1
		strcpy (extension, prm->extension);
d228 1
a228 1
		strcat (fname[i], prm->suffix);
d231 1
a231 1
			strcat (fname[i], fsuffix);
d233 1
a233 1
		strcat (fname[i], extension);
d239 1
a239 1
	strcpy (sxrname, subject);
d241 1
a241 1
		strcat (sxrname, imglist->sxrid);
d243 1
a243 1
		strcat (sxrname, SXR_EXT);
@


2.1
log
@eliminate filtmode from parameter list
@
text
@d1 1
a1 1
/*	$Id: buildnames.c,v 2.0 1996/04/24 23:07:41 tom Exp $
d3 3
d68 1
a68 1
static char		rcsid[] = "$Header: /home/petsun19/tom/src/libimgutil/RCS/buildnames.c,v 2.0 1996/04/24 23:07:41 tom Exp $";
d77 1
a77 1
int      buildnames (prm, imglist, nfiles, fname, sxrname)
d80 1
a86 1
	int             filtmode;		/* IMGFILTER_MODE, MSKFILTER_MODE */
a103 1
	filtmode = prm->mskfilter_type;
@


2.0
log
@new library release
@
text
@d1 1
a1 1
/*	$Id: buildnames.c,v 1.1 1996/03/12 23:00:34 tom Exp tom $
d3 3
d13 1
a13 1
 *	Description:	Construct short filenames from data structures.
d65 1
a65 1
static char		rcsid[] = "$Header: /home/petsun19/tom/src/libimgutil/RCS/buildnames.c,v 1.1 1996/03/12 23:00:34 tom Exp tom $";
d74 1
a74 1
int      buildnames (prm, imglist, filtmode, nfiles, fname, sxrname)
a76 1
	int             filtmode;		/* IMGFILTER_MODE, MSKFILTER_MODE */
d83 1
d101 1
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*	$Id$
	$Log$ */
d11 3
d62 1
a62 1
static char		rcsid[] = "$Header$";
a65 1
#include <myvalues.h>
d71 1
a71 1
int      buildnames (prm, imglist, imgmode, filtmode, nfiles, fname, sxrname)
a73 1
	int             imgmode;		/* STDIMAGE_MODE, DIFIMAGE_MODE */
d80 1
d89 1
a90 1
	int             scanset_field[6];
d97 1
@
