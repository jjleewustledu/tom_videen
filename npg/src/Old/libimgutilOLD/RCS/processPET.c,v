head	2.5;
access;
symbols;
locks; strict;
comment	@ * @;


2.5
date	99.12.13.17.04.17;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	96.11.22.16.03.04;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	96.10.30.22.12.23;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.09.03.19.22.32;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.04.29.14.23.51;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.04.24.23.07.41;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.03.12.23.00.34;	author tom;	state Exp;
branches;
next	;


desc
@@


2.5
log
@tov revision
@
text
@/* $Log: processPET.c,v $
 * Revision 2.4  1996/11/22  16:03:04  tom
 * add oxygen processing of single images when ntype > 10
 *
 * Revision 2.3  1996/10/30  22:12:23  tom
 * do NOT call readhdr for tissue activity
 *
 * Revision 2.2  1996/09/03  19:22:32  tom
 * change passed parameters
 *
 * Revision 2.1  1996/04/29  14:23:51  tom
 * *** empty log message ***
 *
 * Revision 2.0  1996/04/24  23:07:41  tom
 * new library release
 *
 * Revision 1.1  1996/03/12  23:00:34  tom
 * Initial revision
 *
 */
/*	========================================================================
 *	Module:			processPET.c
 *	Date:			28-Apr-93
 *	Author:			Tom Videen
 *	Description:	process an image for CBF, CBV, or counts
 *	Input:
 *		pet	-   unprocessed PET image
 *		hdr	- HEADER_DATA structure filled in
 *	Output:
 *		pet  -   processed, scaled PET image
 *
 *	Returns:
 *		OK or ERROR
 *	Note:
 *		The hdr file is read in this routine for CBF or CBV but must be passed
 *		in for tissue activity since for tissue activity the factor depends upon
 *		decay and frame duration which must be computed from the file subheader.
 *		(see voistat)
 *
 *	Algorithm:
 *	1)  If (process = 0) then only scale:
 *		pet = scaler * pet
 *	2)  If (process = PROC_CBV) and (hdr.ntype = 3) then process as blood volume:
 *		pet = scaler * hdr.bvfactor1 * pet
 *	3)  If (process = PROC_CBF)  and (hdr.ntype = 2 or 4) then process as blood flow:
 *		pet = scaler * pet * ((hdr.aflow1 * pet) + hdr.bflow1))
 *
 *	Reference:
 *		Videen et al (1987) JCBFM 7:513-516.
 *	========================================================================
 */
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/processPET.c,v 2.4 1996/11/22 16:03:04 tom Exp tom $";
#endif

#include <stdio.h>
#include <imgutil.h>

/*	-----------------------
 *	Function processPET
 *	-----------------------
 */
int             processPET (pet, dim, scaler, process, fname, recfp, hdr)
	float        ***pet;			 /* PET input image */
	long           *dim;			 /* dimensions of PET-array */
	float           scaler;			 /* normalization factor */
	int             process;		 /* type of processing */
	char           *fname;			 /* file name */
	FILE           *recfp;			 /* rec file pointer */
	HEADER_DATA    *hdr;			 /* hdr structure */
{
	long            i, j, k;
	float           x;			 /* temp for pet */
	float           sx;			 /* combined scaler */

/*
 *	Counts
 */
	if (process == PROC_NONE) {
		for (k = 1; k <= dim[2]; ++k) {
			for (j = 1; j <= dim[1]; ++j) {
				for (i = 1; i <= dim[0]; ++i) {
					pet[k][j][i] = scaler * pet[k][j][i];
				}
			}
		}
		return (OK);
	}
/*
 *	Cerebral Blood Volume
 */
	if (process == PROC_CBV) {
		if (readhdr (fname, hdr, recfp) == ERROR)
			return (ERROR);
		if (hdr->ntype != 3)
			return (ERROR);
		sx = scaler * hdr->bvfactor1;
		for (k = 1; k <= dim[2]; ++k) {
			for (j = 1; j <= dim[1]; ++j) {
				for (i = 1; i <= dim[0]; ++i) {
					pet[k][j][i] = sx * pet[k][j][i];
				}
			}
		}
		return (OK);
	}
/*
 *	Cerebral Blood Flow
 */
	if (process == PROC_CBF) {
		if (readhdr (fname, hdr, recfp) == ERROR)
			return (ERROR);
		if (hdr->ntype != 2 && hdr->ntype != 4)
			return (ERROR);
		sx = scaler;
		for (k = 1; k <= dim[2]; ++k) {
			for (j = 1; j <= dim[1]; ++j) {
				for (i = 1; i <= dim[0]; ++i) {
					x = pet[k][j][i];
					pet[k][j][i] = sx * x * ((hdr->aflow1 * x) + hdr->bflow1);
				}
			}
		}
		return (OK);
	}
/*
 *	Decay-Corrected Tissue Activity time frame duration
 *	Units will be: (well counts/ml)
 */
	if (process == PROC_DECAYCOR) {
		sx = scaler * hdr->decay_factor1;
		for (k = 1; k <= dim[2]; ++k) {
			for (j = 1; j <= dim[1]; ++j) {
				for (i = 1; i <= dim[0]; ++i) {
					x = pet[k][j][i];
					pet[k][j][i] = sx * x;
				}
			}
		}
		return (OK);
	}
/*
 *	Non-Decay-Corrected Tissue Activity time frame duration
 *	Units will be: (well counts/ml)
 */
	if (process == PROC_UNCORRECTED) {
		sx = scaler * hdr->pettcnv1;
		for (k = 1; k <= dim[2]; ++k) {
			for (j = 1; j <= dim[1]; ++j) {
				for (i = 1; i <= dim[0]; ++i) {
					x = pet[k][j][i];
					pet[k][j][i] = sx * x;
				}
			}
		}
		return (OK);
	}
/*
 *	Oxygen processing using single image (ntype >= 11)
 */
	if (process == PROC_OEF || process == PROC_CMRO2) {
		if (readhdr (fname, hdr, recfp) == ERROR)
			return (ERROR);
		if (hdr->ntype < 11)
			return (ERROR);
		sx = scaler * hdr->aoxygen1;
		for (k = 1; k <= dim[2]; ++k) {
			for (j = 1; j <= dim[1]; ++j) {
				for (i = 1; i <= dim[0]; ++i) {
					pet[k][j][i] = sx * pet[k][j][i];
				}
			}
		}
		return (OK);
	}
/*
 *	Not processed
 */
	return (ERROR);
}
@


2.4
log
@add oxygen processing of single images when ntype > 10
@
text
@d2 3
d53 1
a53 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/processPET.c,v 2.3 1996/10/30 22:12:23 tom Exp tom $";
a56 3
#include <stdlib.h>
#include <string.h>
#include <math.h>
a57 1
#include <image.h>
@


2.3
log
@do NOT call readhdr for tissue activity
@
text
@d2 3
d50 1
a50 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/processPET.c,v 2.2 1996/09/03 19:22:32 tom Exp tom $";
d156 18
@


2.2
log
@change passed parameters
@
text
@d2 3
d28 5
d47 1
a47 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/processPET.c,v 2.1 1996/04/29 14:23:51 tom Exp tom $";
a128 2
		if (readhdr (fname, hdr, recfp) == ERROR)
			return (ERROR);
a144 2
		if (readhdr (fname, hdr, recfp) == ERROR)
			return (ERROR);
@


2.1
log
@*** empty log message ***
@
text
@d2 3
d39 1
a39 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libimgutil/RCS/processPET.c,v 2.0 1996/04/24 23:07:41 tom Exp tom $";
d53 1
a53 1
int             processPET (pet, dim, scaler, process, hdr)
d58 2
d63 2
a64 2
	float           x;			 	 /* temp for pet */
	float           sx;			 	 /* combined scaler */
a78 1

d82 5
a86 1
	if (process == PROC_CBV && hdr->ntype == 3) {
a96 1

d100 5
a104 1
	if (process == PROC_CBF && (hdr->ntype == 2 || hdr->ntype == 4)) {
a115 1

d121 2
a133 1

d139 2
a151 1

@


2.0
log
@new library release
@
text
@d2 3
d36 1
a36 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/libimgutil/RCS/processPET.c,v 1.1 1996/03/12 23:00:34 tom Exp tom $";
d107 2
a108 1
 *	Decay-Corrected Tissue Activity
d124 2
a125 1
 *	Non-Decay-Corrected Tissue Activity
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$
d10 1
a10 2
 *	Description:	process an image for CBF, CBV, or counts and scale the result
 *
d12 2
a13 8
 *		pet         -   PET input image
 *		dim         -   dimensions of PET image
 *		scaler      -   normalization factor
 *		process     -   type of processing
 *		filename    -   image file name
 *		recfp       -   rec file pointer
 *		hdr         -   hdr structure (use: ntype, bvfactor1, aflow1, bflow1)
 *
a15 1
 *		writes hdr file used to rec file
d23 4
a26 7
 *	2)  Read the hdr file associated with pet
 *	3)  If (process = PROC_CBV) and (hdr.ntype = 3) then process as blood volume:
 *		(scaled by 100 to maintain dynamic range with integer pixels)
 *		pet = 100 * scaler * hdr.bvfactor1 * pet
 *	4)  If (process = PROC_CBF)  and (hdr.ntype = 2 or 4) then process as blood flow:
 *		(scaled by 50 to maintain dynamic range with integer pixels)
 *		pet = 50 * scaler * pet * ((hdr.aflow1 * pet) + hdr.bflow1))
d33 1
a33 1
static char     rcsid[] = "$Header$";
d37 1
a39 1
#include <myvalues.h>
d41 1
a41 1
#include <imagio.h>
d47 1
a47 1
int             processPET (pet, dim, scaler, process, filename, recfp, hdr)
a51 2
	char           *filename;		 /* image file name */
	FILE           *recfp;			 /* rec file pointer */
a52 1

d55 2
a56 5
	float           x;			 /* temp for pet */
	float           sx;			 /* combined scaler */
	char           *c;
	char           *hdrname;		 /* hdr filename */
	char           *local_hdrname;	 /* local hdr filename */
d73 1
a73 1
 *	Read HDR file
d75 11
a85 7
	hdrname = (char *) calloc (MAXPATH, sizeof (char));
	local_hdrname = (char *) calloc (MAXPATH, sizeof (char));
	strcpy (hdrname, filename);
	c = strrchr (hdrname, '.');
	if (c == NULL)
		c = strrchr (hdrname, '\0');
	strcpy (c, ".hdr");
d87 14
a100 17
	c = strrchr (hdrname, '/');
	if (c == NULL)
		strcpy (local_hdrname, hdrname);
	else
		strcpy (local_hdrname, c + 1);

	if (gethdr (local_hdrname, hdr) == 0) {
		printf ("HDR = %s\n", local_hdrname);
		fprintf (recfp, "%s\n", local_hdrname);
	} else if (gethdr (hdrname, hdr) == 0) {
		printf ("HDR = %s\n", hdrname);
		fprintf (recfp, "%s\n", hdrname);
	} else {
		printf ("ERROR [processPET]:  HDR not found\n as %s\n or %s\n", local_hdrname, hdrname);
		free (hdrname);
		free (local_hdrname);
		return (ERROR);
a101 2
	free (hdrname);
	free (local_hdrname);
d104 1
a104 1
 *	Cerebral Blood Volume  (scaled by 100 to maintain dynamic range with integer pixels)
d106 2
a107 2
	if (process == PROC_CBV && hdr->ntype == 3) {
		sx = scaler * 100 * hdr->bvfactor1;
d111 2
a112 1
					pet[k][j][i] = sx * pet[k][j][i];
d120 1
a120 1
 *	Cerebral Blood Flow  (scaled by 50 to maintain dynamic range with integer pixels)
d122 2
a123 3
	if (process == PROC_CBF
	    && (hdr->ntype == 2 || hdr->ntype == 4)) {
		sx = scaler * 50;
d128 1
a128 1
					pet[k][j][i] = sx * x * ((hdr->aflow1 * x) + hdr->bflow1);
@
