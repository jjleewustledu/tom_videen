head	1.2;
access;
symbols;
locks
	tom:1.2; strict;
comment	@ * @;


1.2
date	99.12.13.17.04.17;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.08.05.15.28.58;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@tov revision
@
text
@/*	$Log: readmaplist.c,v $
 * Revision 1.1  1996/08/05  15:28:58  tom
 * Initial revision
 *
 */
/* ===============================================================================
 *	Module:			readmaplist.c
 *	Date:			Jul-96
 *	Author:			Tom Videen (modified readimglist by Tom Yang)
 *	Description:	Reads an image list file into an array of structures.
 *		If the control number is not specified, it is assigned -MAXINT
 *
 *  Reminder:	Every real number should contain at least a decimal point.
 *		The map_id is used to find map files which include any characters
 *		other than "<species><subject_id>.map". If a map id is present, it
 *		must start with a letter and contains the string ".map".
 *
 *  Algorithm:	if (a line contains 7 fields)
 *		  <subject_id><scanset1_id><mean1><scanset2_id><mean2><weight><map_id>
 *		else if (a line contains 6 fields)
 *		  if (the last field is an integer or a real number)
 *		    <subject_id><scanset1_id><mean1><scanset2_id><mean2><weight>
 *		  else
 *		    <subject_id><scanset1_id><mean1><scanset2_id><mean2><map_id>
 *		  endif
 *		else
 *		  Same as before.
 *		endif
 *	
 * ===============================================================================
 */
#ifndef lint
static char		rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/readmaplist.c,v 1.1 1996/08/05 15:28:58 tom Exp tom $";
#endif 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <imgutil.h>

int      readmaplist (lstfile, imglist, lstsize)
	char           *lstfile;
	IMAGE_LIST_DATA *imglist;
	int            *lstsize;
{
	FILE           *fp;
	char            line[MAXLINE];
	char            scanset1_id[MAXLINE];
	char            string1[MAXLINE];
	char            string2[MAXLINE];
	char            string3[MAXLINE];
	char            string4[MAXLINE];
	char            subject_id[MAXLINE];
	char            map_id[MAXLINE];
	int             i;

	fp = fopen (lstfile, "r");

	i = 0;
	while (fgets (line, MAXLINE, fp) != NULL) {
		if (sscanf (line, "%s %s", subject_id, scanset1_id) != 2 ||
		    strncmp (subject_id, "#", 1) == 0)
			continue;

/*
 * Set the default values
 */
		strcpy (imglist[i].scanset1_id, "");
		imglist[i].mean1 = 0.0;
		strcpy (imglist[i].scanset2_id, "");
		imglist[i].mean2 = 0.0;
		imglist[i].weight = 1.0;
		strcpy (imglist[i].sxrid, "");

/*
 * <subject_id><scanset1_id><mean1><scanset2_id><mean2><weight><map_id>
 */
		if (sscanf (line, "%s %s %s %s %s %s %s", subject_id, scanset1_id,
			    string1, string2, string3, string4, map_id) == 7) {
			if (stringtype (string1) == TYPE_STRING ||
			    stringtype (string3) == TYPE_STRING ||
			    stringtype (string4) == TYPE_STRING ||
			    strstr (map_id, MAP_EXT) == NULL)
				continue;

			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
			imglist[i].mean1 = atof (string1);
			strcpy (imglist[i].scanset2_id, string2);
			imglist[i].mean2 = atof (string3);
			imglist[i].weight = atof (string4);
			strcpy (imglist[i].sxrid, map_id);
			i++;
			continue;
		}
		if (sscanf (line, "%s %s %s %s %s %s", subject_id, scanset1_id,
			    string1, string2, string3, string4) == 6) {
			if (stringtype (string1) == TYPE_STRING ||
			    stringtype (string3) == TYPE_STRING)
				continue;

			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
			imglist[i].mean1 = atof (string1);
			strcpy (imglist[i].scanset2_id, string2);
			imglist[i].mean2 = atof (string3);

/*
 * <subject_id><scanset1_id><mean1><scanset2_id><mean2><map_id>
 */
			if (stringtype (string4) == TYPE_STRING &&
			    strstr (string4, MAP_EXT) != NULL) {
				strcpy (imglist[i].sxrid, string4);

/*
 * <subject_id><scanset1_id><mean1><scanset2_id><mean2><weight>
 */
			} else if (stringtype (string4) == TYPE_REAL ||
				   stringtype (string4) == TYPE_INTEGER) {
				imglist[i].weight = atof (string4);
			}
			i++;
			continue;
		}
		if (sscanf (line, "%s %s %s %s %s", subject_id, scanset1_id,
			    string1, string2, string3) == 5) {

/*
 * <subject_id><scanset1_id><mean1><scanset2_id><mean2>
 */
			if (strstr (string3, MAP_EXT) == NULL) {
				if (stringtype (string1) == TYPE_STRING ||
				    stringtype (string3) == TYPE_STRING)
					continue;

				imglist[i].mean1 = atof (string1);
				strcpy (imglist[i].scanset2_id, string2);
				imglist[i].mean2 = atof (string3);
			} else {

/*
 * <subject_id><scanset1_id><mean1><scanset2_id><map_id>
 */
				if (stringtype (string1) == TYPE_REAL) {
					if (stringtype (string1) == TYPE_STRING)
						continue;
					imglist[i].mean1 = atof (string1);
					strcpy (imglist[i].scanset2_id, string2);
					strcpy (imglist[i].sxrid, string3);
				} else {

/*
 * <subject_id><scanset1_id><scanset2_id><mean2><map_id>
 */
					if (stringtype (string2) == TYPE_STRING)
						continue;
					strcpy (imglist[i].scanset2_id, string1);
					imglist[i].mean2 = atof (string2);
					strcpy (imglist[i].sxrid, string3);
				}
			}
			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
			i++;
			continue;
		}
		if (sscanf (line, "%s %s %s %s", subject_id, scanset1_id, string1, string2) == 4) {
			if (strstr (string2, MAP_EXT) != NULL) {
/*
 * <subject_id><scanset1_id><scanset2_id><map_id>
 */
				if (stringtype (string1) != TYPE_REAL) {
					strcpy (imglist[i].scanset2_id, string1);
					strcpy (imglist[i].sxrid, string2);

/*
 * <subject_id><scanset1_id><mean1><map_id>
 */
				} else {
					imglist[i].mean1 = atof (string1);
					strcpy (imglist[i].sxrid, string2);
				}
			} else {
/*
 * <subject_id><scanset1_id><scanset2_id><mean2>
 */
				if (stringtype (string1) != TYPE_REAL) {
					strcpy (imglist[i].scanset2_id, string1);
					imglist[i].mean2 = atof (string2);

/*
 * <subject_id><scanset1_id><mean1><scanset2_id>
 */
				} else {
					imglist[i].mean1 = atof (string1);
					strcpy (imglist[i].scanset2_id, string2);
				}
			}

			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
			i++;
			continue;
		}
		if (sscanf (line, "%s %s %s", subject_id, scanset1_id, string1) == 3) {
			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
/*
 * <subject_id><scanset1_id><map_id>
 */
			if (strstr (string1, MAP_EXT) != NULL)
				strcpy (imglist[i].sxrid, string1);
/*
 * <subject_id><scanset1_id><scanset2_id>
 */
			else if (stringtype (string1) != TYPE_REAL)
				strcpy (imglist[i].scanset2_id, string1);
/*
 * <subject_id><scanset1_id><mean1>
 */
			else
				imglist[i].mean1 = atof (string1);
			i++;
			continue;
		}
/*
 * <subject_id><scanset1_id>
 */
		if (sscanf (line, "%s %s", subject_id, scanset1_id) == 2) {
			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
			i++;
		}
	}
	fclose (fp);
	*lstsize = i;
	if (*lstsize == 0) {
		fprintf (stderr, "Error: File %s contains no image lists.\n", lstfile);
		return (ERROR);
	}
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$
d33 1
a33 1
static char		rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/readmaplist.c,v 2.0 1996/04/24 23:07:41 tom Exp $";
a38 2
#include <math.h>
#include <values.h>
@
