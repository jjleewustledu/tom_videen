head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2001.05.31.18.03.07;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.30.14.41.31;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/* $Log: procSSOxygen.c,v $
 * Revision 1.1  2001/05/30  14:41:31  tom
 * Initial revision
 * */
/*	========================================================================
 *	Module:			procSSOxygen.c
 *	Date:			May 2001
 *	Author:			Tom Videen
 *	Description:	process pet counts for CBF, CBV, OEF, CMRO2 or counts
 *					using steady-state model for oxygen
 *	Input:
 *		oxygencnts -   oxygen (oo) PET counts
 *		flowcnts   -   flow (ho) PET counts
 *		volcnts    -   vol (co) PET counts
 *		process    -   type of processing
 *		oxygenname -   oxygen image file name
 *		flowname   -   flow image file name
 *		volname    -   vol image file name
 *		hdr        -   pointer to HEADER_DATA structure
 *	Returns:
 *		Oxygen Extraction, CMRO2, or (float) ERROR.
 *
 *	Derivation of equations in Peter Herscovitch notes from Feb 1984.
 *	========================================================================
 */
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/procSSOxygen.c,v 1.1 2001/05/30 14:41:31 tom Exp tom $";
#endif

#include <stdio.h>
#include <imgutil.h>

/*	-----------------------
 *	Function procSSOxygen
 *	-----------------------
 */
float           procSSOxygen (oxygencnts, flowcnts, volcnts, process,
			                      oxygenname, flowname, volname, hdr, recfp)
	float           oxygencnts;		 /* oxygen (oo) PET input counts */
	float           flowcnts;		 /* flow (ho) PET input counts */
	float           volcnts;		 /* vol (co) PET input counts */
	int             process;		 /* type of processing */
	char           *oxygenname;		 /* oxygen image file name */
	char           *flowname;		 /* flow image file name */
	char           *volname;		 /* vol image file name */
	HEADER_DATA    *hdr;			 /* hdr structure */
	FILE           *recfp;			 /* rec file pointer */
{
	float			slvratio = 0.85; /* ratio of cerebral small vessel/large vessel hematocrit */
	float			volfactr = 0.835;/* (postcapillary vol + 0.5*capillary vol)/total blood vol */
	float           brainden = 1.05; /* density of brain (g/ml) */
	float           pc = 1.0;		 /* partition coefficient for water (ml blood/ml brain) */
	float           watercont;		 /* arterial O15 water content */
    float           c1;              /* slvratio * integral of blood O2 counts/100.0 */
    float           a1, a2, a3, a4, a5;  /* temporary components in computation */
	float           e;				 /* oxygen extraction	 */
	float           cmro;			 /* oxygen metabolism	 */
	float           kd;				 /* decay constant	*/
	float           cbf, cbv;		 /* computed flow and volume */
	int             localproc;		 /* type of processing */

/*	Check process	*/

	if (process != PROC_OEF && process != PROC_CMRO2)
		return ((float) ERROR);

/*	Process flow */

	if (readhdr (flowname, hdr, recfp) == ERROR)
		return ((float) ERROR);
	if (hdr->ntype != 2)
		return ((float) ERROR);
	localproc = PROC_CBF;
	cbf = procPET (flowcnts, localproc, flowname, hdr, recfp);
	if (cbf == (float) ERROR) {
		fprintf (stderr, "Error processing %s\n", flowname);
		return ((float) ERROR);
	}

/*	Process volume */

	if (readhdr (volname, hdr, recfp) == ERROR)
		return ((float) ERROR);
	if (hdr->ntype != 3)
		return ((float) ERROR);
	localproc = PROC_CBV;
	cbv = procPET (volcnts, localproc, volname, hdr, recfp);
	if (cbv == (float) ERROR) {
		fprintf (stderr, "Error processing %s\n", volname);
		return ((float) ERROR);
	}

/*   Read HDR file for oxygen image	*/

	if (readhdr (oxygenname, hdr, recfp) == ERROR)
		return ((float) ERROR);
	if (hdr->ntype != 7)
		return ((float) ERROR);

/*	Oxygen Extraction
 *	kd = decay_constant (1/sec)
 *	pc = partition coefficient for water = 1.0 (ml blood/ml brain)
 *	scantime = sec
 *	oxygencnts = ECATcnts/pixel/scantime
 *	pettcnv1 = decay-corrected conversion factor (wellcnts/ml/sec) / (ECATcnts/pixel/min)
 *	aoxygen1 = ratio O-15 water content / O-15 oxygen content
 *	oxycont1 = arterial O-15 oxygen content (ml/ml)
 *	watercont = arterial O-15 water content (ml/ml)
 */

	cbf = brainden * cbf / (60*100);			/* converts (ml/100g/min) -> (ml/ml/sec)	*/
	cbv = brainden * cbv / 100;					/* converts (ml/100g) -> (ml/ml)	*/
	kd = hdr->tau;								/* 1/sec	*/
	c1 = cbf / (kd + cbf/pc);					/* unitless	*/
	watercont = hdr->oxycont1 * hdr->aoxygen1;	/* ml/ml	*/ 

/*  Oxygen Extraction */

    a1 = oxygencnts * hdr->pettcnv1 / hdr->scantime;
    a2 = c1 * watercont;
    a3 = cbv * slvratio * hdr->oxycont1;
    a4 = c1 * hdr->oxycont1;
    a5 = cbv * slvratio * volfactr * hdr->oxycont1;
    if (a4 == a5)
        e = 0;
    else
        e = (a1 - a2 - a3) / (a4 - a5);

/*	CMRO2	*/

	if (process == PROC_CMRO2) {
		cmro = cbf * hdr->oxycont1 * e;
		return (cmro);
	} else
		return (e);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d27 1
a27 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/libimgutil/RCS/procOxygen.c,v 1.2 1999/12/13 17:04:17 tom Exp $";
d97 1
a97 1
	if (hdr->ntype != 1)
@
