head	1.7;
access;
symbols;
locks
	tom:1.7; strict;
comment	@c @;


1.7
date	93.07.26.22.07.02;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	93.07.26.18.59.25;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	93.07.26.15.04.31;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	93.07.26.14.47.06;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	93.07.22.22.30.15;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	93.07.16.22.19.48;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	93.07.16.20.21.57;	author tom;	state Exp;
branches;
next	;


desc
@avi's src
@


1.7
log
@fixed imgrots to use NROW and NCOL
@
text
@      SUBROUTINE IMGROTO (IMAGE, MASK, NSLICE, NCOL, NROW, FOVMM, MMPPIX, PARAM, SCALE, ERR)

C   FINDS OPTIMAL TRANSLATION/ROTATION TO ACHIEVE SYMMETRY ABOUT x=0
C
C		Steps through each of 3 parameters, fits a parabola to points computed at steps
C		over a fixed range given by DARAM, and takes the analytically determined minimum as the next
C		value of this parameter.

      PARAMETER (NTERM=6)
      PARAMETER (NI=7)
      PARAMETER (NPTS=2*NI+1)

      REAL*4		IMAGE(NCOL,NROW,NSLICE)
      INTEGER*2 MASK(NCOL,NROW,NSLICE)
			INTEGER*2	NSLICE
			INTEGER*2	NCOL
			INTEGER*2	NROW
      REAL*4 		FOVMM(3)
      REAL*4 		MMPPIX(3)
      REAL*4 		PARAM(12)
			REAL*4		SCALE
			REAL*4		ERR

			REAL*4		ROT(3,3,8)
			REAL*4		DEL
      REAL*4 		TARAM(NTERM)
      REAL*4 		CURVA(NTERM)
      REAL*4 		DARAM(NTERM) 	/1.8,1.8,2.1,3*0.06981317/
      REAL*4 		COEF(0:2)
      REAL*4 		ARRAY(3,3)
      REAL*4 		X(-NI:NI)
      REAL*4 		Y(-NI:NI)
      REAL*4 		REPORT(-NI:NI,6)			! The final points to which the parabolas were fit
      REAL*4 		T
      REAL*4 		R
      REAL*4 		RAXIS(3)

      INTEGER*4 JOFJJ(3) 			/1,5,6/	! PARAM indices for x=0 symmetery
			INTEGER*4	NN
			INTEGER*4	JAXIS
      INTEGER*4 LU 			/6/

      LOGICAL*4 LITER
			CHARACTER*256	RCSHEADER

			COMMON /ROTCOM/ ROT

      DATA JAXIS /1/
      DATA DEL	/8./			! sampling mesh (mm) in virtual image

			RCSHEADER = "$Id: imgroto.f,v 1.6 1993/07/26 18:59:25 tom Exp tom $"
      DEGPERAD = 45./ATAN(1.)
      DO 10 I=1,6
				PARAM(I) = 0.
10		CONTINUE 
      WRITE (LU,8101)
      CALL IMGROTE (IMAGE,MASK,NSLICE,NCOL,NROW,FOVMM,MMPPIX,PARAM,DEL,JAXIS,SCALE,ERR)
      WRITE (LU,8102) (PARAM(J),J=1,3),(PARAM(J)*DEGPERAD,J=4,6),SQRT(ERR)
      NITER = 5
100		LITER = .FALSE.
      DO 300 JJ=1,3
      	J = JOFJJ(JJ)
     		TARAM(J) = PARAM(J)
      	DO 200 I=-NI,NI
      		PARAM(J) = TARAM(J) + DARAM(J)*FLOAT(I)/FLOAT(NI)
      		CALL IMGROTE (IMAGE,MASK,NSLICE,NCOL,NROW,FOVMM,MMPPIX,PARAM,DEL,JAXIS,SCALE,ERR)
      		X(I) = FLOAT(I)/FLOAT(NI)
      		Y(I) = ERR
  		 		REPORT(I,J) = ERR
200			CONTINUE
				NN = 3

C		Fit a parabola to the computed points

      	CALL POLFIT (X,Y,NPTS,COEF,ARRAY,NN,CHISQR)

C		T should be the computed analytic minimum within the range -1 to +1

      	T = .5*COEF(1)/COEF(2)
      	IF (COEF(2).LT.0..OR.ABS(T).GT..5) THEN
      	  write (*,"(' T ',F10.6)")T
      	  T = SIGN(.5,COEF(1))
      	  NITER = NITER+1
      	  write (*,"(' T ',F10.6)")T
      	ENDIF
      	LITER = LITER.OR.ABS(T).GT.0.01
      	CURVA(J) = COEF(2)

C		Change PARAM to the new position (minimum or a half step)

	 			PARAM(J) = TARAM(J)-DARAM(J)*T

300		CONTINUE

      CALL IMGROTE (IMAGE,MASK,NSLICE,NCOL,NROW,FOVMM,MMPPIX,PARAM,DEL,JAXIS,SCALE,ERR)
      WRITE (LU,8102) (PARAM(J),J=1,3),(PARAM(J)*DEGPERAD,J=4,6),SQRT(ERR)
      NITER=NITER-1
      IF (LITER.AND.NITER.GT.0) GOTO 100
      WRITE (LU,"(' RMS REPORT')")
      WRITE (LU,8102)(DARAM(J),J=1,3),(DARAM(J)*DEGPERAD,J=4,6)
      WRITE (LU,"(6F10.0)")(CURVA(J)/DARAM(J)**2,J=1,3),
     &                        (CURVA(J)/(DARAM(J)*DEGPERAD)**2,J=4,6)
      DO 400 I=-NI,NI
			 	WRITE (LU,"(6F10.4)")(SQRT(REPORT(I,J)),J=1,6)
400		CONTINUE
      WRITE (LU,8102) (PARAM(J),J=1,3),(PARAM(J)*DEGPERAD,J=4,6),SQRT(ERR)

			T = SQRT (PARAM(1)**2 + PARAM(2)**2 + PARAM(3)**2)
			WRITE (LU,8000) T, PARAM(1)/T, PARAM(2)/T, PARAM(3)/T
			RAXIS(1) = 5 * (-ROT(2,3,8) + ROT(3,2,8))
			RAXIS(2) = 5 * ( ROT(1,3,8) - ROT(3,1,8))
			RAXIS(3) = 5 * (-ROT(1,2,8) + ROT(2,1,8))
			R = SQRT (RAXIS(1)**2 + RAXIS(2)**2 + RAXIS(3)**2)
			WRITE (LU,8001) R*DEGPERAD, RAXIS(1)/R, RAXIS(2)/R, RAXIS(3)/R

8000	FORMAT("translation ",f10.4," mm    direction ",3f10.4)
8001	FORMAT("rotation    ",f10.4," deg   axis      ",3f10.4)
8101	FORMAT(6X,'dXmm',6X,'dYmm',6X,'dZmm',5X,'dXrot',5X,'dYrot',5X,'dZrot','  rmsERROR')
8102	FORMAT(7F10.4,F8.4)

      RETURN
      END
@


1.6
log
@working c/fortran
@
text
@d51 1
a51 1
			RCSHEADER = "$Id: imgroto.f,v 1.5 1993/07/26 15:04:31 tom Exp tom $"
@


1.5
log
@working c/fortran
@
text
@d51 1
a51 1
			RCSHEADER = "$Id$"
@


1.4
log
@working c/fortran
@
text
@d44 1
d51 1
@


1.3
log
@working c/fortran
@
text
@d1 1
a1 1
      SUBROUTINE IMGROTO (IMAG, MASK, NSLICE, NCOL, NROW, FOVMM, MMPPIX, PARAM, SCALE, ERR)
d3 5
a7 1
C     FINDS OPTIMAL TRANSLATION/ROTATION TO ACHIEVE SYMMETRY ABOUT x=0
d13 1
a13 1
      REAL*4		IMAG(NCOL,NROW,NSLICE)
d33 1
a33 1
      REAL*4 		REPORT(-NI:NI,6)
d45 1
a45 1
			COMMON /ROTPARM/ ROT
d55 1
a55 1
      CALL IMGROTE (IMAG,MASK,NSLICE,NCOL,NROW,FOVMM,MMPPIX,PARAM,DEL,JAXIS,SCALE,ERR)
d64 1
a64 1
      		CALL IMGROTE (IMAG,MASK,NSLICE,NCOL,NROW,FOVMM,MMPPIX,PARAM,DEL,JAXIS,SCALE,ERR)
d70 3
d74 3
d86 3
d90 1
d92 2
a93 1
      CALL IMGROTE (IMAG,MASK,NSLICE,NCOL,NROW,FOVMM,MMPPIX,PARAM,DEL,JAXIS,SCALE,ERR)
@


1.2
log
@revision
@
text
@d1 2
a2 1
      SUBROUTINE IMGROTO(FOVMM,MMPPIX,NSLICE,IMAG,MASK,PARAM,ROT,SCALE,ERR)
d4 1
a4 5
      REAL*4 FOVMM(3),MMPPIX(3)
      PARAMETER (NPIX=10112)
      INTEGER*2 IMAG(NPIX,NSLICE)
      INTEGER*2 MASK(NPIX,NSLICE)
      REAL*4 PARAM(6)
a5 4
      REAL*4 TARAM(NTERM),CURVA(NTERM)
      REAL*4 DARAM(NTERM)/1.8,1.8,2.1,3*0.06981317/
      INTEGER*4 JOFJJ(3)/1,5,6/		! PARAM indices for x=0 symmetery
      REAL*4 COEF(0:2),ARRAY(3,3)
d8 31
a38 3
      REAL*4 X(-NI:NI),Y(-NI:NI)
      REAL*4 REPORT(-NI:NI,6)
      INTEGER*4 LISTLU/6/
d40 40
a79 39
      DATA JAXIS/1/
      DATA DEL/8./			! sampling mesh (mm) in virtual image
      DEGPERAD=45./ATAN(1.)
      DO 11 I=1,6
   11 PARAM(I)=0.
      WRITE(LISTLU,101)
  101 FORMAT(6X,'dXmm',6X,'dYmm',6X,'dZmm',5X,'dXrot',5X,'dYrot'
     &,5X,'dZrot','  rmsERROR')
      CALL IMGROTE(FOVMM,MMPPIX,NSLICE,IMAG,MASK,PARAM,DEL,JAXIS,ROT,SCALE,E1)
      WRITE(LISTLU,102)
     &(PARAM(J),J=1,3),(PARAM(J)*DEGPERAD,J=4,6),SQRT(E1)
      NITER=5
   83 LITER=.FALSE.
      DO 81 JJ=1,3
      J=JOFJJ(JJ)
      TARAM(J)=PARAM(J)
      DO 84 I=-NI,NI
      PARAM(J)=TARAM(J)+DARAM(J)*FLOAT(I)/FLOAT(NI)
      CALL IMGROTE(FOVMM,MMPPIX,NSLICE,IMAG,MASK,PARAM,DEL,JAXIS,ROT,SCALE,E1)
C      WRITE(LISTLU,102)
C     &(PARAM(JT),JT=1,3),(PARAM(JT)*DEGPERAD,JT=4,6),SQRT(E1)
      X(I)=FLOAT(I)/FLOAT(NI)
      Y(I)=E1
   84 REPORT(I,J)=E1
      CALL POLFIT(X,Y,NPTS,COEF,ARRAY,3,CHISQR)
      T=.5*COEF(1)/COEF(2)
      IF(COEF(2).LT.0..OR.ABS(T).GT..5)THEN
        write(*,"(' T ',F10.6)")T
        T=SIGN(.5,COEF(1))
        NITER=NITER+1
        write(*,"(' T ',F10.6)")T
      ENDIF
      LITER=LITER.OR.ABS(T).GT.0.01
      CURVA(J)=COEF(2)
   81 PARAM(J)=TARAM(J)-DARAM(J)*T
      CALL IMGROTE(FOVMM,MMPPIX,NSLICE,IMAG,MASK,PARAM,DEL,JAXIS,ROT,SCALE,E1)
      WRITE(LISTLU,102)
     &(PARAM(J),J=1,3),(PARAM(J)*DEGPERAD,J=4,6),SQRT(E1)
  102 FORMAT(7F10.4,F8.4)
d81 4
a84 4
      IF(LITER.AND.NITER.GT.0)GOTO 83
      WRITE(LISTLU,"(' RMS REPORT')")
      WRITE(LISTLU,102)(DARAM(J),J=1,3),(DARAM(J)*DEGPERAD,J=4,6)
      WRITE(LISTLU,"(6F10.0)")(CURVA(J)/DARAM(J)**2,J=1,3),
d86 18
a103 5
      DO 88 I=-NI,NI
   88 WRITE(LISTLU,"(6F10.4)")(SQRT(REPORT(I,J)),J=1,6)
      WRITE(LISTLU,102)
     &(PARAM(J),J=1,3),(PARAM(J)*DEGPERAD,J=4,6),SQRT(E1)
      ERR=E1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
      SUBROUTINE IMGROTO(FOVMM,MMPPIX,NSLICE,IMAG,MASK,PARAM,ERR)
d27 1
a27 1
      CALL IMGROTE(FOVMM,MMPPIX,NSLICE,IMAG,MASK,PARAM,DEL,JAXIS,E1)
d37 1
a37 1
      CALL IMGROTE(FOVMM,MMPPIX,NSLICE,IMAG,MASK,PARAM,DEL,JAXIS,E1)
d54 1
a54 1
      CALL IMGROTE(FOVMM,MMPPIX,NSLICE,IMAG,MASK,PARAM,DEL,JAXIS,E1)
@
