head	1.1;
access;
symbols;
locks
	ty7777:1.1; strict;
comment	@ * @;


1.1
date	93.05.19.22.09.12;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.1
log
@Initial revision
@
text
@/*$Id$*/
/*$Log$*/

/*___________________________________________________________________________
  File:		readimglist.c

  Function:	int readimglist (char *image_list_file, IMAGE_LIST_DATA *image_list, 
			int *num_image_list)

  Arguments:	
		image_list_file,	File containing a list of image files, means, 
					etc., passed in.
		image_list,		an array of structures, each structure for a list,
					returned.
		num_image_list,		total number of list in file, returned.

  Description:	This function reads an image list file and put the information it contains
		in an array of structures.
  Return:	SUCCEED for successful; FAIL for error.

  Reminder:	Every real number should contain at least a decimal point. The sxr file
		extension should start with a letter.

  History:	 Created by Tom Yang on 05/18/93. 
___________________________________________________________________________*/

#include <petutil/petutil.h>
#include <unistd.h>

PUBLIC int readimglist (image_list_file, image_list, num_image_list)
	char		*image_list_file;
	IMAGE_LIST_DATA	*image_list;
	int		*num_image_list;
{
	FILE	*fp;
	char	string [MAXLINE];
	char	line [MAXLINE];
	char	scan_id [MAXLINE];
	char	subject_id [MAXLINE];
	char	sxr [MAXLINE];
	float	activation_mean;
	float	control_mean;
	int	activation_num;
	int	control_num;
	int	i;
	int	j;

	fp	= fopen (image_list_file, "r");

	/*
	 * Determine the total number of image pairs.
	 */
	*num_image_list	= 0;
	while (fgets (line, MAXLINE, fp) != NULL)
	{
		if (sscanf (line, "%s %s %d %f %d %f %s", subject_id, scan_id, &activation_num,
			&activation_mean, &control_num, &control_mean, sxr) == 7 
		|| sscanf (line, "%s %s %d %f %d %f", subject_id, scan_id, &activation_num,
			&activation_mean, &control_num, &control_mean) == 6 
		|| sscanf (line, "%s %s %d %d %s", subject_id, scan_id, &activation_num,
			&control_num, sxr) == 5 
		|| sscanf (line, "%s %s %d %f %s", subject_id, scan_id, &activation_num,
			&activation_mean, sxr) == 5 
		|| sscanf (line, "%s %s %d %s", subject_id, scan_id, &activation_num, sxr) == 4 
		|| sscanf (line, "%s %s %d %d", subject_id, scan_id, &activation_num, &control_num) == 4 
		|| sscanf (line, "%s %s %d %f", subject_id, scan_id, &activation_num, &activation_mean) == 4 
		|| sscanf (line, "%s %s %d", subject_id, scan_id, &activation_num) == 3) 
			(*num_image_list)++;
	}

	if (*num_image_list == 0)
	{
		fprintf (stderr, "Error: File %s contains no image files.\n", image_list_file); 
		return FAIL;
	}

	if (*num_image_list > MAX_IMAGE_LIST_SIZE)
	{
		fprintf (stderr, "Error: your list size %d exceeded the maximum allowable size %d\n",
			*num_image_list, MAX_IMAGE_LIST_SIZE);
		return FAIL;
	}

	/*
	 * Put list data on the array of structures.
	 */
	if (fseek (fp, 0L, SEEK_SET))
	{
		fprintf (stderr, "Error: seeking error in readimglist ()\n"); 
		return FAIL;
	}

	i	= 0;
	while (fgets (line, MAXLINE, fp) != NULL)
	{
		if (sscanf (line, "%s %s %d %f %d %f %s", subject_id, scan_id, 
			&activation_num, &activation_mean, &control_num, &control_mean, sxr) == 7)
		{
			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scan_id, scan_id);
			image_list [i].activation_num	= activation_num;			
			image_list [i].activation_mean	= activation_mean;			
			image_list [i].control_num	= control_num;			
			image_list [i].control_mean	= control_mean;			
			strcpy (image_list [i].sxr, sxr);
			i++;

			continue;
		}

		if (sscanf (line, "%s %s %d %f %d %f", subject_id, scan_id, 
			&activation_num, &activation_mean, &control_num, &control_mean) == 6) 
		{
			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scan_id, scan_id);
			image_list [i].activation_num	= activation_num;			
			image_list [i].activation_mean	= activation_mean;			
			image_list [i].control_num	= control_num;			
			image_list [i].control_mean	= control_mean;			
			i++;

			continue;
		}

		if (sscanf (line, "%s %s %d %s %s", subject_id, scan_id, 
			&activation_num, string, sxr) == 5) 
		{
			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scan_id, scan_id);
			image_list [i].activation_num	= activation_num;			
			strcpy (image_list [i].sxr, sxr);

			if (strchr (string, '.') == NULL)
				image_list [i].control_num	= atoi (string);			
			else
				image_list [i].activation_mean	= atof (string);			
			i++;


			continue;
		}

		if (sscanf (line, "%s %s %d %s", subject_id, scan_id, 
			&activation_num, string) == 4)
		{
			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scan_id, scan_id);
			image_list [i].activation_num	= activation_num;			

			for (j = 0; j < strlen (string); j++)
				if (isalpha (string [j]))
					break;
			if (j < strlen (string))
				strcpy (image_list [i].sxr, string);
			else
			{
				if (strchr (string, '.') == NULL)
					image_list [i].control_num	= atoi (string);
				else
					image_list [i].activation_mean	= atof (string);			
			}

			i++;

			continue;
		}

		if (sscanf (line, "%s %s %d", subject_id, scan_id, &activation_num) == 3) 
		{
			strcpy (image_list [i].subject_id, subject_id);
			strcpy (image_list [i].scan_id, scan_id);
			image_list [i].activation_num	= activation_num;			
			i++;
		}
	}

	fclose (fp);

	return SUCCEED;
}
@
