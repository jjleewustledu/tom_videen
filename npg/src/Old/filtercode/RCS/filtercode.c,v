head	1.2;
access;
symbols;
locks
	ty7777:1.2; strict;
comment	@ * @;


1.2
date	93.05.03.21.29.24;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.05.03.20.37.07;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in.
@


1.2
log
@filtercode.c initial checking in.
@
text
@/*$Id: filtercode.c,v 1.1 1993/05/03 20:37:07 ty7777 Exp ty7777 $*/
/*$Log: filtercode.c,v $
 * Revision 1.1  1993/05/03  20:37:07  ty7777
 * Initial revision
 **/

/*_________________________________________________________________
  Description:	This program reads an ECAT image and change the filter code
		to the correct one.

  History:	Created by Tom Yang on 05/03/93. 
_________________________________________________________________*/

#include <petutil/petutil.h>
#include <petutil/matrix.h>

main (argc, argv)
	int	argc;
	char	**argv;
{
	MatrixFile	*matrix_create ();
	MatrixFile	*matrix_open ();
	MatrixData	*matrix_read ();
	int		matrix_write ();

	Image_subheader	*image_subheader;
	Main_header	*main_header;
	MatrixData	*matrixx_data;
	MatrixFile	*fptr;
	MatrixFile	*fptr_out;
	Mlist		*mlist;
	char		*ecat_image_file;
	char		*out_ecat_image_file;
	int		diff;  /* number of differences between spec and actual */
	int		filter_code;
	int		i;
	int		j;
	int		matnum;
	short		num_slices;
	struct Matval	matval;

	/*______________________________________________________
	 * Get command line arguments.
	 *______________________________________________________*/
	ecat_image_file		= argv [1];
	filter_code		= atoi (argv [2]);
	out_ecat_image_file	= argv [3];

	fptr	= matrix_open (ecat_image_file, "r");
	if (fptr == NULL || fptr->mhptr->data_type != IMAGE_DATA)
	{
		if (fptr == NULL)
			printf ("NULL MatrixFile pointer\n");
		else
			printf ("Incompatible data_type: %d. Correct data type should be: %d\n", 
				fptr->mhptr->data_type, IMAGE_DATA);
		fprintf (stderr, "matrix_open error in filtercode %s\n", ecat_image_file);

		exit (FAIL);
	}

	/*
 	 * The number of mats in a list always gives the correct number of
 	 * slices.
 	 */
	mlist	= make_list (ecat_image_file, (char *) NULL, "*;*;*;*", &diff);
	if (!mlist) 
	{
		fprintf (stderr, "make_list error in filtercode ().\n");
		matrix_close (fptr);
		exit (FAIL);
	}

	matval.gate	= mlist->gates;
	matval.data	= 0;
	matval.bed	= 0;

	fptr_out	= matrix_create (out_ecat_image_file, fptr->mhptr);
	if (fptr_out == NULL) 
	{
		fprintf (stderr, "Error: matrix_create () in filtercode\n");
		exit (FAIL);
	}

	/*
	 * Get the fields filled for the MatrixData structure.
	 */
	for (i = 1; i <= mlist->frames; i++)
	{
		matval.frame	= i;
		for (j = 1; j <= mlist->planes; j++)
		{
			matval.plane	= j;
			matnum	= mat_numcod (matval.frame, matval.plane, matval.gate, 
					matval.data, matval.bed);
			matrixx_data	= matrix_read (fptr, matnum);
			if (matrixx_data == NULL)
			{
				fprintf (stderr, "matrix_read error in filtercode.\n");
				return FAIL;
			}
			image_subheader			= (Image_subheader *) matrixx_data->shptr;
			image_subheader->filter_code	= filter_code;

			if (matrix_write (fptr_out, matnum, matrixx_data) == ERROR)
			{
				fprintf (stderr, "Error: matrix_write () in filtercode.\n"); 
        			free_matrix_data (matrixx_data);
				matrix_close (fptr_out);
				matrix_close (fptr);
				exit (FAIL);
			}
			free_matrix_data (matrixx_data);
		}
	}

	free_Mlist (mlist);
	matrix_close (fptr);
	matrix_close (fptr_out);
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
d21 1
d30 1
d33 1
d47 1
d78 7
d105 1
a105 1
			if (matrix_write (fptr, matnum, matrixx_data) == ERROR)
d109 1
d119 1
@
