head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2000.09.06.19.41.53;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	98.09.01.18.37.05;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.09.01.18.03.00;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.23.24.25;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@strcpy filename
@
text
@/*	$Log: point.c,v $
 * Revision 1.3  1998/09/01  18:37:05  tom
 * larger values for line
 *
 * Revision 1.2  1998/09/01  18:03:00  tom
 * create line.v
 *
 * Revision 1.1  1998/01/29  23:24:25  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			point.c
 *	Date:			Aug-96
 *	Author:			Tom Videen
 *	Description:	Create simulated point in image file.
 * ===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/point/RCS/point.c,v 1.3 1998/09/01 18:37:05 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nr.h>
#include <nrutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	float        ***img;			 /* image array and frequency spectrum */
	char           *fname1;			 /* file to process */
	char           *fname2;			 /* file to write */
	int             frm;			 /* frame number to process */
	int             n;
	char            runstamp[40];		 /* version, date and userid info */
	unsigned long   dim1, dim2, dim3;	 /* array dimensions */
	long            i, j, k;

/*	Get command line arguments */

	fname1 = argv[1];
	fname2 = argv[2];
	n = 2;
	sprintf (runstamp, "%s %s %s %s %s %s", argv[n + 1], argv[n + 2], argv[n + 3],
		 argv[n + 5], argv[n + 6], argv[n + 7]);

/*
 *	Get main header and subheader.
 *	Store RCS version in mh->sw_revision.
 */

	frm = 1;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file = make_imgfile (fname1);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [point]: Could not open %s\n", fname1);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [point]: Could not get MainHeader from %s\n", fname1);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		if (frm == 1) {
			indx.frm = 2;
			if (existimgfrm (file, &indx) == ERROR) {
				fprintf (stderr, "ERROR [point]: cannot find %s frame 1 or 2\n", fname1);
				return (ERROR);
			}
		} else {
			fprintf (stderr, "ERROR [point]: cannot find %s frame %d\n",
				 fname1, frm);
			return (ERROR);
		}
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [point]: Could not read file subheader in %s\n", fname1);
		return (ERROR);
	}
	mh = file->mh;
	sh = file->sh;

	save_rcs (file, rcsid, runstamp);

	dim1 = (unsigned long) sh->dim1;
	dim2 = (unsigned long) sh->dim2;
	dim3 = (unsigned long) sh->dim3;

/*	Read image */

	printf ("Reading %s, frame %d\n", fname1, indx.frm);
	if ((img = readtensor (file, &indx)) == NULL)
		return (ERROR);

	for (i = 1; i <= dim3; i++)
		for (j = 1; j <= dim2; j++)
			for (k = 1; k <= dim1; k++)
				img[i][j][k] = 0;

/*
	i = 1;
	j = 1;
	k = 1;
	img[i][j][k] = 1000;
*/

/*	Center 4 pixels
	i = 24;
	j = 64;
	k = 64;
	img[i][j][k] = 1000;
	img[i][j+1][k] = 1000;
	img[i][j][k+1] = 1000;
	img[i][j+1][k+1] = 1000;
*/


/*	Center 1 pixel */
	i = 24;
	j = 64;
	k = 64;
	for (i = 1; i <= dim3; i++)
		img[i][j][k] = 1000000;

/*	Write image */

	indx.frm = 1;
	printf ("Writing %s\n", fname2);
	close_imgfile (file);
	strcpy (file->name, fname2);
	strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [point]: Could not open %s\n", fname2);
		return (ERROR);
	}
	mh->nframe = indx.frm;
	if (put_mh (file) == ERROR)
		return (ERROR);
	if (writetensor (file, &indx, img) == ERROR)
		return (ERROR);
	free_f3tensor (img, 1, dim3, 1, dim2, 1, dim1);
	free_imgfile (file);
	return (OK);
}
@


1.3
log
@larger values for line
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/point/RCS/point.c,v 1.2 1998/09/01 18:03:00 tom Exp tom $";
d141 1
a141 2
	free (file->name);
	file->name = fname2;
@


1.2
log
@create line.v
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/point/RCS/point.c,v 1.1 1998/01/29 23:24:25 tom Exp tom $";
d131 1
a131 1
		img[i][j][k] = 1000;
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/point/RCS/point.c,v 2.8 1996/08/05 14:26:11 tom Exp $";
d127 2
a128 1
	img[i][j][k] = 10000000;
@
