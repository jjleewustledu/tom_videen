head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2000.02.14.14.13.35;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* p6cv.c converts PETVI images to ANALYZE format.  Modified for
DECstation version of PETVI images */

#include <stdio.h>
#include <sys/file.h>
#include <sys/types.h>
#include <strings.h>

struct	analyze_db{
	struct header_key{
		int		sizeof_hdr;
		char		data_type[10];
		char		db_name[18];
		int		extents;
		short int	session_error;
		char		regular;
		char		hkey_un0;
		} hk ;
	struct image_dimension{
		short int	dim[8];
		short int	unused8;
		short int	unused9;
		short int	unused10;
		short int	unused11;
		short int	unused12;
		short int	unused13;
		short int	unused14;
		short int	datatype;
		short int	bitpix;
		short int	dim_un0;
		float		pixdim[8];
		float		funused8;
		float		funused9;
		float		funused10;
		float		funused11;
		float		funused12;
		float		funused13;
		float		compressed;
		float		verified;
		int		glmax,glmin;
	} dime ;
	struct data_history{
		char		descrip[80];
		char		aux_file[24];
		char		orient;
		char		originator[10];
		char		generated[10];
		char		scannum[10];
		char		patient_id[10];
		char		exp_date[10];
		char		exp_time[10];
		char		hist_un0[3];
		int		views;
		int		vols_added;
		int		start_field;
		int		field_skip;
		int		omax,omin;
		int		smax,smin;
	} dh ;
};

main() {

	struct analyze_db	hdr;		/* header for ANALYZE	*/

	FILE 			*fd_hdr,	/* file for ANAL hdr	*/
				*fopen();	/* the fopen stuff	*/
	int 			fd_img,		/* file for ANAL image	*/
				fd_input,	/* file for PETT image	*/
				ret;		/* general return	*/

	char			header[256];	/* the header info	*/

	int		slices,		/* number of slices	*/
			bits_per_pix,	/* number of bits/pixel	*/
			global_max,	/* global maximum	*/
			global_min;	/* global minimum	*/

	char		inputfile[40],	/* input pett file	*/
			ANAL_head[40],	/* output analyze head	*/
			ANAL_imag[40];	/* output analyze image	*/

	int		i,j,k,		/* temps		*/
			ii,jj,II,
			bh,bi,bwi,
                     	high,low,	/* high and low bytes	*/
			xdim,ydim;	/* the x and y dimension */

	short int	little;		/* to test if it was reconstructed on
                                           DEC (little endian vs Concurrent
					   (big endian) */
	short int 	**image;	/* to set up dynamic arrays	*/
	short int 	**temp;		/* to set up dynamic arrays	*/

	bits_per_pix = 16;	/* should be 16 for PETT images */

	/* end of declarations */

	printf("\n\nImage Conversion  --PETT format to ANALYZE format--\n");

	printf("\n\nPETT image to convert: ");
	scanf("%s",inputfile);
	if((fd_input = open(inputfile,O_RDONLY)) < 1){
		printf("Unable to open PETT image %s\n",inputfile);
		exit(1);
	}
	strcpy(ANAL_head,inputfile);
	strcat(ANAL_head,".hdr");
	if((fd_hdr = fopen(ANAL_head,"w"))==0){
		printf("Unable to create ANALYZE header %s\n",ANAL_head);
		exit(1);
	}
	strcpy(ANAL_imag,inputfile);
	strcat(ANAL_imag,".img");

	if((fd_img = open(ANAL_imag,O_CREAT|O_RDWR,0666)) == 0){
		printf("Unable to create ANALYZE image %s\n",ANAL_imag);
		exit(1);
	}
	ydim = xdim = 100;
	slices = 7;

/* Allocate arrays	*/
	if( (image = (short int **) calloc(xdim,sizeof(short int *))) == NULL){
		printf("\n\nMEMORY ALLOCATION FAILED\n");
		exit(1);
	}
	for(i=0;i<xdim;i++){
	 if( (image[i] = (short int *) calloc(ydim,sizeof(short int))) == NULL){
		printf("\n\nMEMORY ALLOCATION FAILED\n");
		exit(1);
	 }
	}

	if( (temp = (short int **) calloc(xdim,sizeof(short int *))) == NULL){
		printf("\n\nMEMORY ALLOCATION FAILED\n");
		exit(1);
	}
	for(i=0;i<xdim;i++){
	 if( (temp[i] = (short int *) calloc(ydim,sizeof(short int))) == NULL){
		printf("\n\nMEMORY ALLOCATION FAILED\n");
		exit(1);
	 }
	}
/* Allocation finished 	*/

	global_max = 0;global_min = 32000;

	bh = read(fd_input, &little,2);
	lseek(fd_input,0,0);

	for(i=0;i<slices;i++){	/* find the maximum and create image
				   also strip off headers		*/
		bh = read(fd_input,(char *)header,256);
		bi = 0;
		/* needs to be this way since memory may not be contiguous */
		for(ii=0;ii<xdim;ii++)
			bi += read(fd_input,(char *)temp[ii],ydim*2);

		/* lseek to next sector boundary if necessary */
		if( (bi % 256) != 0)
			lseek(fd_input,(long)(256-(bi % 256)),1);

		/* flip image--top to bottom 
                   Swapping bytes for DEC's little ENDIAN format
                */

		II=0;
		for(ii=xdim-1;ii>=0;ii--){
			for(jj=0;jj<ydim;jj++){

				/* swap bytes if not little endian 
                                   The test is if the first short byte in head
				   not equal 16*/

			    if(little!=16) {
                                high  = low = temp[ii][jj];
				high = high << 8;
				low = (low >> 8 ) & 255;
				temp[ii][jj] = high | low;
			    }
				image[II][jj] = temp[ii][jj]; 
			}
			II++;
		}
		/* write out the image...find the min and max for header */
		bwi=0;
		for(ii=0;ii<xdim;ii++)
			bwi += write(fd_img,(char *)image[ii],ydim*2);
		for(j=0;j<xdim;j++){
			for(k=0;k<ydim;k++){
				if(image[j][k] > global_max)
					global_max = image[j][k];
				if(image[j][k] < global_min)
					global_min = image[j][k];
			}
		}
		/* some stats to give us some assurance it is working */
		printf("\nSlc: %2d  Head: %d  Image(R/W): (%d/%d)  Min/Max: %d/%d",
			i+1,bh,bi,bwi,global_min,global_max);
	}

	strcpy(hdr.hk.db_name,inputfile);
	hdr.dime.dim[0] = 4;		/* typically only 4 dimensions	*/
	hdr.hk.regular = 'r';		/* required by developers	*/
	hdr.hk.sizeof_hdr = sizeof(struct analyze_db);
					/* required by developers	*/
	hdr.hk.extents = 16384;		/* recommended by developers	*/
	hdr.dime.dim[1] = xdim;		/* x dimension of image		*/
	hdr.dime.pixdim[1] = 2.1;	/* should be input for scanner	*/
	hdr.dime.dim[2] = ydim;		/* y dimension of image		*/
	hdr.dime.pixdim[2] = 2.1;	/* should be input for scanner	*/
	hdr.dime.dim[3] = slices;	/* number of slices in volume	*/
	hdr.dime.pixdim[3] = 12.0;	/* should be input for scanner	*/
	hdr.dime.dim[4] = 1;		/* only one volume typically	*/
	hdr.dime.datatype = 4;		/* 16 bit signed integer	*/
	hdr.dime.bitpix = bits_per_pix;
	hdr.dime.glmax  = global_max;
	hdr.dime.glmin  = global_min;

	if((ret = fwrite(&hdr,sizeof(struct analyze_db),1,fd_hdr)) != 1){
		printf("\nError writing to: %s \n",ANAL_head);
		exit(1);
	}
	printf("\nSuccessful image conversion...\n");
	fclose(fd_hdr);
	close(fd_input);
	close(fd_img);
	exit(0);
}
@
