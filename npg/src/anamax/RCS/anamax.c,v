head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2008.11.07.13.58.46;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.16.21.20.44;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.16.20.50.31;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.14.19.02.03;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@permit dim=3
@
text
@/*	$Log: anamax.c,v $
 * Revision 1.3  2005/06/16  21:20:44  tom
 * fix bug
 *
 * Revision 1.2  2005/06/16  20:50:31  tom
 * read/write floats
 *
 * Revision 1.1  2005/06/14  19:02:03  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anamax.c
 *	Date:			Jun 2005
 *	Author:			Tom Videen
 *	Description:	Get the maximum pixel value for each pixel in a pair of Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamax/RCS/anamax.c,v 1.3 2005/06/16 21:20:44 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anamax
 *	----------------------------
 */
int main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file 1 */
	char           *img2, *hdr2;		 /* input file 2 */
	char           *img3, *hdr3;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	short          *imga, *imgb;		 /* images */
	float          *fimga, *fimgb;		 /* float image */
	int             itype1 = 0;		 /* 0 = int, 1 = float   */
	int             itype2 = 0;		 /* 0 = int, 1 = float   */

	if (argc != 7) {
		fprintf (stderr, "Usage: anamax hdr1 img1 hdr2 img2 hdr3 img3\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	hdr3 = argv[5];
	img3 = argv[6];

/*	Get image 1 */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anamax]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);


	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype1 = 0;
		imga = (short *) calloc (num, sizeof (short));
		if (imga == NULL) {
			fprintf (stderr, "ERROR [anamax]: calloc imga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anamax]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamax]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype1 = 1;
		fimga = (float *) calloc (num, sizeof (float));
		if (fimga == NULL) {
			fprintf (stderr, "ERROR [anamax]: calloc fimga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anamax]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamax]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else {
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

/*	Get second image */

	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamax]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamax]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anamax]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);
	if (num != dim1 * dim2 * dim3) {
		fprintf (stderr, "ERROR [anamax]: images are not same size\n");
		return (ERROR);
	}
	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype2 = 0;
		imgb = (short *) calloc (num, sizeof (short));
		if (imgb == NULL) {
			fprintf (stderr, "ERROR [anamax]: calloc imgb\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anamax]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (imgb, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamax]: reading: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype2 = 1;
		fimgb = (float *) calloc (num, sizeof (float));
		if (fimgb == NULL) {
			fprintf (stderr, "ERROR [anamax]: calloc fimgb\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anamax]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (fimgb, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamax]: reading: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
	} else {
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

/*	Save maximum pixel values */

	if ((fd_img = fopen (img3, "w")) == 0) {
		fprintf (stderr, "ERROR [anamax]: opening %s\n", img3);
		return (ERROR);
	}
	if (itype1 == 0 && itype2 == 0) {
		for (i = 0; i < num; i++)
			if (imga[i] < imgb[i])
				imga[i] = imgb[i];
		if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamax]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as integer\n", img3);
		free (imga);
		free (imgb);
	} else if (itype1 == 0 && itype2 == 1) {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			if (imga[i] > fimgb[i])
				fimgb[i] = imga[i];
		if ((fwrite (fimgb, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamax]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (imga);
		free (fimgb);
	} else if (itype1 == 1 && itype2 == 0) {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			if (fimga[i] < imgb[i])
				fimga[i] = imgb[i];
		if ((fwrite (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamax]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (fimga);
		free (imgb);
	} else {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			if (fimga[i] < fimgb[i])
				fimga[i] = fimgb[i];
		if ((fwrite (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamax]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (fimga);
		free (fimgb);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr3, "w")) == 0) {
		fprintf (stderr, "ERROR [anamax]: openng %s\n", hdr3);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamax]: writing %s\n", hdr3);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	return (OK);
}
@


1.3
log
@fix bug
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamax/RCS/anamax.c,v 1.2 2005/06/16 20:50:31 tom Exp tom $";
d32 1
a32 1
main (argc, argv)
d71 1
a71 1
	if (hdr.dime.dim[0] != 4) {
d134 1
a134 1
	if (hdr.dime.dim[0] != 4) {
@


1.2
log
@read/write floats
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamax/RCS/anamax.c,v 1.1 2005/06/14 19:02:03 tom Exp tom $";
d194 2
a195 1
			imga[i] = imga[i] > imgb[i];
d207 2
a208 1
			fimgb[i] = imga[i] > fimgb[i];
d220 2
a221 1
			fimga[i] = fimga[i] > imgb[i];
d233 2
a234 1
			fimga[i] = fimga[i] > fimgb[i];
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamax/RCS/anamax.c,v 2.0 2004/02/13 17:07:19 tom Exp $";
d40 3
a69 10
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
d73 1
a74 1
	num = dim1 * dim2 * dim3;
d76 39
a114 3
	imga = (short *) calloc (num, sizeof (short));
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anamax]: Cannot calloc imga\n");
a116 10
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anamax]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img1);
d118 1
a119 2
/*	Get image 2 */

d121 1
a121 1
		fprintf (stderr, "ERROR [anamax]: Cannot open: %s\n", hdr2);
d125 1
a125 1
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", hdr2);
d129 1
a129 1
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", hdr2);
d133 7
a139 3
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
d142 35
a176 1
	if (hdr.dime.bitpix != 16) {
d178 1
a181 6
	if (dim1 != hdr.dime.dim[1] || dim2 != hdr.dime.dim[2] || dim3 != hdr.dime.dim[3]) {
		fprintf (stderr, "ERROR [anamax]: Dimensions of 2 images do not match\n");
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	imgb = (short *) calloc (num, sizeof (short));
a182 16
	if (imgb == NULL) {
		fprintf (stderr, "ERROR [anamax]: Cannot calloc imgb\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamax]: Cannot open: %s\n", img2);
		return (ERROR);
	}
	if ((fread (imgb, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamax]: Reading: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img2);


a184 4
	for (i = 0; i < num; i++)
		if (imgb[i] > imga[i])
			imga[i] = imgb[i];

d186 1
a186 1
		fprintf (stderr, "ERROR [anamax]: Unable to open %s\n", img3);
d189 46
a234 3
	if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamax]: Error writing to: %s\n", img3);
		return (ERROR);
d239 1
a239 1
		fprintf (stderr, "ERROR [anamax]: Unable to open %s\n", hdr3);
d243 1
a243 1
		fprintf (stderr, "ERROR [anamax]: Error writing to: %s\n", hdr3);
a246 1
	free (imga);
@
