head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.18.13.52;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.12.14.19.38.37;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.09.20.21.18.50;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: anasum_nobj.c,v $
 * Revision 1.2  1999/12/14  19:38:37  tom
 * lint cleaning
 *
 * Revision 1.1  1999/09/20  21:18:50  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anasum_nobj.c
 *	Date:			Sep 1999
 *	Author:			Tom Videen
 *	Description:	Add number of pixels contributing from 1 or more Analyze object images
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasum_nobj/RCS/anasum_nobj.c,v 1.2 1999/12/14 19:38:37 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anasum_nobj
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdrstr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img, *hdr;		 /* file namess */
	long            dim[3];			 /* dimensions of image */
	long            len=0;
	long            len1;
	long            num, n, i;
	int             first = 1;
	short           val1, val2;
	short          *sum, *new;		 /* image */

	if (argc < 7) {
		printf ("Usage: anasum_nobj outhdr outimg val1 val2 inhdr1 inimg1 inhdr2 inimg2\n");
		return (ERROR);
	}
	num = (argc - 4) / 2;
	val1 = atoi (argv[3]);
	val2 = atoi (argv[4]);

	for (n = 0; n < num; n++) {
		hdr = argv[2 * n + 5];
		img = argv[2 * n + 6];

		if ((fd_hdr = fopen (hdr, "r")) == 0) {
			fprintf (stderr, "ERROR [anasum_nobj]: Cannot open: %s\n", hdr);
			return (ERROR);
		}
		if ((fread (&hdrstr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
			fprintf (stderr, "ERROR [anasum_nobj]: Reading: %s\n", hdr);
			return (ERROR);
		}
		if (hdrstr.dime.dim[0] != 4) {
			fprintf (stderr, "ERROR [anasum_nobj]: Reading: %s\n", hdr);
			fprintf (stderr, "Dimensions = %d\n", hdrstr.dime.dim[0]);
			return (ERROR);
		}
		if (hdrstr.dime.datatype != 4) {
			fprintf (stderr, "ERROR [anasum_nobj]: Reading: %s\n", hdr);
			fprintf (stderr, "Datatype = %d\n", hdrstr.dime.datatype);
			return (ERROR);
		}
		if (hdrstr.dime.bitpix != 16) {
			fprintf (stderr, "ERROR [anasum_nobj]: Reading: %s\n", hdr);
			fprintf (stderr, "Bits/pixel = %d\n", hdrstr.dime.bitpix);
			return (ERROR);
		}
		dim[0] = hdrstr.dime.dim[1];
		dim[1] = hdrstr.dime.dim[2];
		dim[2] = hdrstr.dime.dim[3];
		len1 = dim[0] * dim[1] * dim[2];
		if (first) {
			first = 0;
			len = len1;
			sum = (short *) calloc (len, sizeof (short));
			if (sum == NULL) {
				fprintf (stderr, "ERROR [anasum_nobj]: Cannot calloc sum\n");
				return (ERROR);
			}
			new = (short *) calloc (len, sizeof (short));
			if (new == NULL) {
				fprintf (stderr, "ERROR [anasum_nobj]: Cannot calloc new\n");
				return (ERROR);
			}
		} else if (len != len1) {
			fprintf (stderr, "ERROR [anasum_nobj]: Reading: %s\n", hdr);
			fprintf (stderr, "Image size %d differs from previous %d\n", (int) len1, (int) len);
			return (ERROR);
		}
		(void) fclose (fd_hdr);

		if ((fd_img = fopen (img, "r")) == 0) {
			fprintf (stderr, "ERROR [anasum_nobj]: Cannot open: %s\n", img);
			return (ERROR);
		}
		if ((fread (new, sizeof (short), len, fd_img)) != len) {
			fprintf (stderr, "ERROR [anasum_nobj]: Reading: %d\n", (int) new);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img);

		for (i = 0; i < len; i++)
			if (new[i] >= val1 && new[i] <= val2)
				sum[i] += 1;

	}

	hdr = argv[1];
	if ((fd_hdr = fopen (hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [anasum_nobj]: Unable to open %s\n", hdr);
		return (ERROR);
	}
	if ((fwrite (&hdrstr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anasum_nobj]: Error writing to: %s\n", hdr);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	free (new);

	img = argv[2];
	if ((fd_img = fopen (img, "w")) == 0) {
		fprintf (stderr, "ERROR [anasum_nobj]: Unable to open %s\n", img);
		return (ERROR);
	}
	if ((fwrite (sum, sizeof (short), len, fd_img)) != len) {
		fprintf (stderr, "ERROR [anasum_nobj]: Error writing to: %s\n", img);
		return (ERROR);
	}
	(void) fclose (fd_img);

	return (OK);
}
@


1.2
log
@lint cleaning
@
text
@d2 3
d10 1
a10 1
 *	Date:			Sep-99
d15 1
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasum_nobj/RCS/anasum_nobj.c,v 1.1 1999/09/20 21:18:50 tom Exp tom $";
d103 1
a103 1
		fclose (fd_hdr);
d113 1
a113 1
		fclose (fd_img);
d131 1
a131 1
	fclose (fd_hdr);
d143 1
a143 1
	fclose (fd_img);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasum_nobj/RCS/anasum_nobj.c,v 1.3 1999/09/20 15:07:42 tom Exp $";
d35 2
a36 1
	long            len, len1;
d96 1
a96 1
			fprintf (stderr, "Image size %d differs from previous %d\n", len1, len);
d106 1
a106 1
			fprintf (stderr, "ERROR [anasum_nobj]: Reading: %s\n", new);
a139 1
	free (sum);
@
