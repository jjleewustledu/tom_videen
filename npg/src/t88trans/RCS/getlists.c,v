head	1.1;
access;
symbols;
locks
	tom:1.1; strict;
comment	@ * @;


1.1
date	95.10.12.21.19.02;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Id$
	$Log$ */
/*	===============================================================================
 *	Module:			getlists.c
 *	Date:			12-Oct-95
 *	Author:			Tom Videen
 *	Description:	Read an input image list file and an input image parameter file
 *		and return complete image and matrix filenames.
 *
 *	Input:
 *		prmfile     - parameter filename
 *		image_mode  - STDIMAGE_MODE, DIFIMAGE_MODE, MULTITRACER_IMAGE_MODE
 *		filter_mode - IMGFILTER_MODE in imglist.h
 *
 *	Output:
 *		prm  	-   structure PARAMETER_DATA (petutil.h)
 *		imglist -   structure IMAGE_LIST_DATA (petutil.h)
 *		scan    -   structure SCANLIST_ARRAY (petutil.h)
 *		matlist -	matrix filenames
 *		lstsize -   number of scan (pairs) in image list
 *
 *	History:
 *		Modified version of get_input_lists.c
 *	===============================================================================
 */
#include <stdio.h>
#include <string.h>
#include <values.h>
#include <petutil/petutil.h>
#include <petutil/imglist.h>		/* IMAGE_LIST_DATA, MAXPATH */
#include "brain_atlas.h"			/* SCANLIST_ARRAY */

static char     rcsid[] = "$Header$";

void            getlists (prmfile, lstsize, image_mode, filter_mode,
				                 scan, matlist, prm, imglist)
	char           *prmfile;
	int             lstsize;
	int             image_mode;
	int             filter_mode;
	PARAMETER_DATA *prm;
	SCANLIST_ARRAY *scan;
	char           matlist[][MAXPATH];
	IMAGE_LIST_DATA *imglist;

{
	char            short_imgfile[6][MAXLINE];
	char            full_imgfile[6][MAXPATH];
	int             nfiles;
	int             i, j;
	BOOLEAN         demigrate = TRUE;

/*
 * Read parameters into finfo.
 */

	if (readparm (prmfile, prm) == FAIL) {
		fprintf (stderr, "Error: reading %s\n", prmfile);
		exit (FAIL);
	}
/*
 * Get full names of activation, control and .mat files.
 */

	for (i = 0; i < lstsize; i++) {
		if (buildnames (prm, imglist[i], image_mode, filter_mode,
				&nfiles, short_imgfile, matlist[i]) == FAIL) {
			fprintf (stderr, "Error in build_short_names using: %s %s %f %s %f %s\n",
				 imglist[i].subject_id, imglist[i].scanset1_id, imglist[i].mean1,
				 imglist[i].scanset2_id, imglist[i].mean2, imglist[i].sxrid);
			exit (FAIL);
		}
/*
 * Clean the array of complete image files.
 */

		for (j = 0; j < nfiles; j++)
			strcpy (full_imgfile[j], "");

/* there is no distinction between single & paired multitracer in this function, hence */

		if (nfiles == 3)
			for (j = 3; j < 6; j++)
				strcpy (full_imgfile[j], "");
		if (checkimg (prm, imglist[i], image_mode, demigrate, nfiles,
			      short_imgfile, full_imgfile) == FAIL) {
			fprintf (stderr, "Error in checkimg using: %s %s %f %s %f\n",
			 imglist[i].subject_id, imglist[i].scanset1_id, imglist[i].mean1,
				 imglist[i].scanset2_id, imglist[i].mean2);
			exit (FAIL);
		}
		for (j = 0; j < nfiles; j++)
			strcpy (scan[i][j], full_imgfile[j]);
	}
}
@
