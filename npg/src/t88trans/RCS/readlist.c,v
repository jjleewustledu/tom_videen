head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.10.12.21.19.02;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Id$
	$Log$ */
/* ===============================================================================
 *	Module:			readlist.c
 *	Date:			12-Oct-95
 *	Author:			Tom Videen
 *	Description:	Read an imglist into a structure.
 *	Arguments:
 *		listfile	- list of image files, means, etc. (in)
 *		imglist		- array of structures for a list (out)
 *		listsize	- number of files (or pairs) in list (out)
 *
 *	Return:	SUCCEED or FAIL
 *
 *	Note:	Every real number should contain at least a decimal point.
 *			The sxr_id is used to find map files which include any characters
 *			other than "<species><subject_id>.map". If an map id is present, it
 *			must start with a letter and contains the string MAP_EXT.
 *
 * ===============================================================================
 */
#include <values.h>
#include <petutil/imglist.h>

#define MAP_EXT ".map"

static char     rcsid[] = "$Header$";

int      readlist (listfile, imglist, listsize)
	char           *listfile;
	IMAGE_LIST_DATA *imglist;
	int            *listsize;
{
	FILE           *fp;
	char            line[MAXLINE];
	char            scanset1_id[MAXLINE];
	char            string1[MAXLINE];
	char            string2[MAXLINE];
	char            string3[MAXLINE];
	char            string4[MAXLINE];
	char            subject_id[MAXLINE];
	char            mapid[MAXLINE];
	int             i;

	fp = fopen (listfile, "r");

	i = 0;
	while (fgets (line, MAXLINE, fp) != NULL) {
		if (sscanf (line, "%s %s", subject_id, scanset1_id) != 2 ||
		    strncmp (subject_id, "#", 1) == 0)
			continue;

/* Setting the default values if image list does not contain them */

		strcpy (imglist[i].scanset1_id, "");
		imglist[i].mean1 = 0.0;
		strcpy (imglist[i].scanset2_id, "");
		imglist[i].mean2 = 0.0;
		imglist[i].weight = 1.0;
		strcpy (imglist[i].sxrid, "");

/* <subject_id><scanset1_id><mean1><scanset2_id><mean2><weight><sxrid> */

		if (sscanf (line, "%s %s %s %s %s %s %s", subject_id, scanset1_id,
			    string1, string2, string3, string4, mapid) == 7) {
			if (DetermineType (string1) == DATA_TYPE_STRING ||
			    DetermineType (string3) == DATA_TYPE_STRING ||
			    DetermineType (string4) == DATA_TYPE_STRING ||
			    strstr (mapid, MAP_EXT) == NULL)
				continue;
			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
			imglist[i].mean1 = atof (string1);
			strcpy (imglist[i].scanset2_id, string2);
			imglist[i].mean2 = atof (string3);
			imglist[i].weight = atof (string4);
			strcpy (imglist[i].sxrid, mapid);
			i++;
			continue;
		}

		if (sscanf (line, "%s %s %s %s %s %s", subject_id, scanset1_id,
			    string1, string2, string3, string4) == 6) {
			if (DetermineType (string1) == DATA_TYPE_STRING ||
			    DetermineType (string3) == DATA_TYPE_STRING)
				continue;
			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
			imglist[i].mean1 = atof (string1);
			strcpy (imglist[i].scanset2_id, string2);
			imglist[i].mean2 = atof (string3);

/* <subject_id><scanset1_id><mean1><scanset2_id><mean2><sxrid> */

			if (DetermineType (string4) == DATA_TYPE_STRING &&
			    strstr (string4, MAP_EXT) != NULL) {
				strcpy (imglist[i].sxrid, string4);

/* <subject_id><scanset1_id><mean1><scanset2_id><mean2><weight> */

			} else if (DetermineType (string4) == DATA_TYPE_REAL ||
				   DetermineType (string4) == DATA_TYPE_INTEGER) {
				imglist[i].weight = atof (string4);
			}
			i++;
			continue;
		}
		if (sscanf (line, "%s %s %s %s %s", subject_id, scanset1_id,
			    string1, string2, string3) == 5) {

/* <subject_id><scanset1_id><mean1><scanset2_id><mean2> */

			if (strstr (string3, MAP_EXT) == NULL) {
				if (DetermineType (string1) == DATA_TYPE_STRING ||
				    DetermineType (string3) == DATA_TYPE_STRING)
					continue;
				imglist[i].mean1 = atof (string1);
				strcpy (imglist[i].scanset2_id, string2);
				imglist[i].mean2 = atof (string3);
			} else {

/* <subject_id><scanset1_id><mean1><scanset2_id><sxrid> */

				if (DetermineType (string1) == DATA_TYPE_REAL) {
					if (DetermineType (string1) == DATA_TYPE_STRING)
						continue;
					imglist[i].mean1 = atof (string1);
					strcpy (imglist[i].scanset2_id, string2);
					strcpy (imglist[i].sxrid, string3);

/* <subject_id><scanset1_id><scanset2_id><mean2><sxrid> */

				} else {
					if (DetermineType (string2) == DATA_TYPE_STRING)
						continue;
					strcpy (imglist[i].scanset2_id, string1);
					imglist[i].mean2 = atof (string2);
					strcpy (imglist[i].sxrid, string3);
				}
			}
			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
			i++;
			continue;
		}
		if (sscanf (line, "%s %s %s %s", subject_id, scanset1_id, string1, string2) == 4) {
			if (strstr (string2, MAP_EXT) != NULL) {

/* <subject_id><scanset1_id><scanset2_id><sxrid> */

				if (DetermineType (string1) != DATA_TYPE_REAL) {
					strcpy (imglist[i].scanset2_id, string1);
					strcpy (imglist[i].sxrid, string2);

/* <subject_id><scanset1_id><mean1><sxrid> */

				} else {
					imglist[i].mean1 = atof (string1);
					strcpy (imglist[i].sxrid, string2);
				}
			} else {
				if (DetermineType (string1) != DATA_TYPE_REAL) {

/* <subject_id><scanset1_id><scanset2_id><mean2> */

					strcpy (imglist[i].scanset2_id, string1);
					imglist[i].mean2 = atof (string2);
				} else {

/* <subject_id><scanset1_id><mean1><scanset2_id> */

					imglist[i].mean1 = atof (string1);
					strcpy (imglist[i].scanset2_id, string2);
				}
			}

			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
			i++;
			continue;
		}
		if (sscanf (line, "%s %s %s", subject_id, scanset1_id, string1) == 3) {
			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);

			if (strstr (string1, MAP_EXT) != NULL)

/* <subject_id><scanset1_id><mapid> */

				strcpy (imglist[i].sxrid, string1);
			else if (DetermineType (string1) != DATA_TYPE_REAL)
/* <subject_id><scanset1_id><scanset2_id> */
				strcpy (imglist[i].scanset2_id, string1);
			else
/* <subject_id><scanset1_id><mean1> */
				imglist[i].mean1 = atof (string1);
			i++;
			continue;
		}
		if (sscanf (line, "%s %s", subject_id, scanset1_id) == 2) {

/* <subject_id><scanset1_id> */
			strcpy (imglist[i].subject_id, subject_id);
			strcpy (imglist[i].scanset1_id, scanset1_id);
			i++;
		}
	}

	fclose (fp);
	*listsize = i;
	if (*listsize == 0) {
		fprintf (stderr, "Error: File %s contains no image lists.\n", listfile);
		return FAIL;
	}
	return SUCCEED;
}
@
