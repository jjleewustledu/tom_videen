head	1.1;
access;
symbols;
locks
	tom:1.1; strict;
comment	@ * @;


1.1
date	95.10.12.21.19.02;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Id$
	$Log$ */
/*	========================================================================
 *	Module:			image_template.c
 *	Date:			12-Oct-95
 *	Author:			Tom Videen
 *	Description:	Create a template of image using mskpct.
 *	
 *	Inputs:
 *		image3d -   input image array
 *		mskpct  -   threshold (%) for creating the mask
 *		width   -   x dimension
 *		height  -   y dimension
 *		nslices -   number of slices to template
 *		
 *	Output:
 *		mask3d  -   mask image array (pixels either 0 or 1)
 *		npixels -   number of non-zero pixels in the mask
 *		
 *	Algorithm:
 *	1)  Find maximum pixel value of image3d in the range of nslices.
 *	2)  Compute an absolute threshold from global maximum * mskpct * .01
 *	3)  Created a template by thresholding from the outside towards the center:
 *	a)  Assign INSIDE to all points >= threshold.
 *	b)  Assign 0 to all points < threshold,
 *	c)  Assign OUTSIDE to all points along the boundaries of the 2d mask
 *		array which are nor INSIDE the template.
 *	d)  Now, starting with the boundaries of the array, expand the area excluded from
 *	    the template by assigning OUTSIDE to all points directly adjacent to a point
 *	    whose value is OUTSIDE and which are currently zero (neither INSIDE nor OUTSIDE).
 *	e)  Repeat until no more points added outside of the region.
 *	f)  All points that are < OUTSIDE are assigned INSIDE.
 *	g)  All points that are >= OUTSIDE are assigned 0.
 *	
 *	History:
 *		12-Oct-95	Taken from t88mean
 *	========================================================================
 */
#include <petutil/imglist.h>
#include <petutil/matrix.h>

#define INSIDE		1
#define OUTSIDE		2

static char     rcsid[] = "$Header$";

void 
image_template (image3d, mask3d, mskpct, width, height, nslices, npixels)
	float          *image3d;/* pointer to first slice of image3d to template */
	short          *mask3d;	/* pointer to mask to return */
	float           mskpct;	/* threshold as percent */
	int             width;	/* nx */
	int             height;	/* ny */
	int             nslices;/* number of slices to mask */
	long           *npixels;/* number of pixels in created mask */

{
	float          *image2d;
	short          *mask2d;
	float           threshold;
	float           globalmax;
	int             i, j, k;
	int             slice_index;
	int             dimension;
	BOOLEAN         more;

	*npixels = 0;
	dimension = width * height;

/*
 *	Compute threshold from global maximum
 */

	globalmax = 0.;
	for (i = 0; i < (nslices * dimension); i++) {
		if (image3d[i] > globalmax)
			globalmax = image3d[i];
	}
	threshold = (globalmax * mskpct) / 100;

/*
 *	Create a template with mskpct% of the whole brain maximum.
 */

	for (k = 0; k < nslices; k++) {
		slice_index = k * dimension;
		mask2d = mask3d + slice_index;
		image2d = image3d + slice_index;

/*
 *	Assign INSIDE to all points >= threshold.
 *	Assign 0 to all points < threshold,
 */

		for (i = 0; i < dimension; i++) {
			if (image2d[i] >= threshold)
				mask2d[i] = INSIDE;
			else
				mask2d[i] = 0;
		}

/*
 *	Assign OUTSIDE to all points along the boundaries of the 2d mask
 *	array which are nor INSIDE the template.
 */
		for (i = 0; i < width; i++) {
			if (mask2d[i] != INSIDE)	/* Top */
				mask2d[i] = OUTSIDE;
			if (mask2d[(height - 1) * width + i] != INSIDE)	/* Bottom */
				mask2d[(height - 1) * width + i] = OUTSIDE;
		}
		for (j = 0; j < height; j++) {
			if (mask2d[j * width] != INSIDE)	/* Left */
				mask2d[j * width] = OUTSIDE;
			if (mask2d[j * width + width - 1] != INSIDE)	/* Right */
				mask2d[j * width + width - 1] = OUTSIDE;
		}

/*
 *	Now, starting with the boundaries of the array, expand the area excluded from
 *	the template by assigning OUTSIDE to all points directly adjacent to a point
 *	whose value is OUTSIDE and which are currently zero (neither INSIDE nor OUTSIDE).
 */

		more = FALSE;
		for (i = 1; i < width - 1; i++) {	/* Outside rows */
			if (mask2d[i] == OUTSIDE &&
			    mask2d[width + i] < INSIDE) {	/* Top */
				mask2d[width + i] = OUTSIDE;
				more = TRUE;
			}
			if (mask2d[(height - 1) * width + i] == OUTSIDE &&	/* Bottom */
			    mask2d[(height - 2) * width + i] < INSIDE) {
				mask2d[(height - 2) * width + i] = OUTSIDE;
				more = TRUE;
			}
		}

		for (j = 1; j < height - 1; j++) {	/* Outside columns */
			if (mask2d[j * width] == OUTSIDE &&
			    mask2d[j * width + 1] < INSIDE) {	/* Left */
				mask2d[j * width + 1] = OUTSIDE;
				more = TRUE;
			}
			if (mask2d[j * width + width - 1] == INSIDE &&
			    mask2d[j * width + width - 2 < INSIDE]) {	/* Right */
				mask2d[j * width + width - 2] = OUTSIDE;
				more = TRUE;
			}
		}

/*
 *	Repeated until no more points added outside of the region.
 */

		while (more) {
			more = FALSE;
			for (j = 1; j < height - 1; j++) {
				for (i = 1; i < width - 1; i++) {
					if (mask2d[j * width + i] == OUTSIDE) {
						if (mask2d[j * width + i - 1] < INSIDE) {
							mask2d[j * width + i - 1] = OUTSIDE;
							more = TRUE;
						}
						if (mask2d[j * width + i + 1] < INSIDE) {
							mask2d[j * width + i + 1] = OUTSIDE;
							more = TRUE;
						}
						if (mask2d[(j - 1) * width + i] < INSIDE) {
							mask2d[(j - 1) * width + i] = OUTSIDE;
							more = TRUE;
						}
						if (mask2d[(j + 1) * width + i] < INSIDE) {
							mask2d[(j + 1) * width + i] = OUTSIDE;
							more = TRUE;
						}
					}
				}
			}
		}

/*
 *	All points that are < OUTSIDE are assigned INSIDE.
 *	All points that are >= OUTSIDE are assigned 0.
 */

		for (i = 0; i < dimension; i++) {
			if (mask2d[i] < OUTSIDE) {
				mask2d[i] = INSIDE;
				(*npixels)++;
			} else
				mask2d[i] = 0;
		}
	}
}
@
