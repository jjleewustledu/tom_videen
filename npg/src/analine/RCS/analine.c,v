head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2005.05.04.13.29.05;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.27.14.32.02;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.26.20.07.41;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.22.19.14.46;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@generalize for any array
@
text
@/*	$Log: analine.c,v $
 * Revision 1.3  2005/04/27  14:32:02  tom
 * *** empty log message ***
 *
 * Revision 1.2  2005/04/26  20:07:41  tom
 * *** empty log message ***
 *
 * Revision 1.1  2005/04/22  19:14:46  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:		analine.c
 *	Date:		Apr 2005
 *	Author:		Tom Videen
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/analine/RCS/analine.c,v 1.3 2005/04/27 14:32:02 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <nrutil.h>
#include <matrixlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			analine
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            i, j, k;
	int             ntype;

	short        ***simg;			 /* image array and frequency spectrum */
	short          *row;			 /* single row of input image */

	if (argc != 5) {
		fprintf (stdout, "Usage: analine img1 hdr1 img2 hdr2\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [analine]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analine]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [analine]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	ntype = hdr.dime.datatype;
	if (ntype != 4) {
		fprintf (stderr, "ERROR [analine]: reading %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", ntype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [analine]: reading %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

	row = (short *) calloc (dim1, sizeof (short));
	if (row == NULL) {
		fprintf (stderr, "ERROR [analine]: calloc row\n");
		return (ERROR);
	}
	simg = s3tensor (1, dim3, 1, dim2, 1, dim1);
	if (simg == NULL) {
		fprintf (stderr, "ERROR [analine]: malloc simg\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [analine]: opening %s\n", img1);
		return (ERROR);
	}
	for (i = 1; i <= dim3; i++) {
		for (j = 1; j <= dim2; j++) {
			if ((fread (row, sizeof (short), dim1, fd_img)) != dim1) {
				fprintf (stderr, "ERROR [analine]: reading %s\n", img1);
				return (ERROR);
			}
			simg[i][j][dim1/2] = 500;	 	/* center */
			simg[i][j][dim1/2 + 1] = 500;	 /* center */
		}
	}

/*
	for (j = 63; j <= 66; j++) {
		for (k = 52; k <= 55; k++)
			simg[37][j][k] = 500;
		for (k = 74; k <= 77; k++)
			simg[37][j][k] = 500;
	}
*/
/*	right,left,bottom,top	*/
/*
	for (j = 1; j <= 128; j++) {
		simg[37][j][1] = 500;
		simg[37][j][128] = 500;
	}
	for (k = 1; k <= 128; k++) {
		simg[37][1][k] = 500;
		simg[37][128][k] = 500;
	}
*/

	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [analine]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analine]: writing %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [analine]: opening %s\n", img2);
		return (ERROR);
	}
	for (i = 1; i <= dim3; i++) {
		for (j = 1; j <= dim2; j++) {
			for (k = 1; k <= dim1; k++)
				row[k - 1] = simg[i][j][k];
			if (fwrite (row, sizeof (short), dim1, fd_img) != dim1) {
				fprintf (stderr, "ERROR [analine]: writing %s\n", img2);
				return (ERROR);
			}
		}
	}

	(void) fclose (fd_img);
	free_s3tensor (simg, 1, dim3, 1, dim2, 1, dim1);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analine/RCS/analine.c,v 1.2 2005/04/26 20:07:41 tom Exp $";
d109 2
a110 2
			simg[i][j][64] = 500;	 /* center */
			simg[i][j][65] = 500;	 /* center */
d114 1
d121 3
a123 1

d125 2
a126 2
		simg[37][j][1] = 500;		 /* right	 */
		simg[37][j][128] = 500;		 /* left 	 */
d129 2
a130 2
		simg[37][1][k] = 500;		 /* bottom	 */
		simg[37][128][k] = 500;		 /* top 	 */
d132 1
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analine/RCS/analine.c,v 1.1 2005/04/22 19:14:46 tom Exp tom $";
d106 2
a107 1
			simg[i][j][65] = 500;
d110 17
d145 1
a145 1
				row[k] = simg[i][j][k];
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analine/RCS/analine.c,v 2.0 2004/02/13 17:57:47 tom Exp $";
d103 1
a103 1
			simg[i][j][64] = 500;
@
