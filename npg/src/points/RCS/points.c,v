head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2010.07.14.14.46.06;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.27.20.30.14;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.28.21.36.45;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.28.17.16.22;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.28.17.01.24;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.27.20.39.02;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.17.10.05;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.06.19.42.28;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.24.14.46.02;	author tom;	state Exp;
branches;
next	;


desc
@@


1.9
log
@*** empty log message ***
@
text
@/*	$Log: points.c,v $
 * Revision 1.8  2004/02/27  20:30:14  tom
 * 2x2 line
 *
 * Revision 1.5  2004/01/28  17:01:24  tom
 * simulated line source
 *
 * Revision 1.4  2004/01/27  20:39:02  tom
 * 7 small spherical hotspots
 *
 * Revision 1.3  2002/11/27  17:10:05  tom
 * *** empty log message ***
 *
 * Revision 1.2  2000/09/06  19:42:28  tom
 * strcpy filename
 *
 * Revision 1.1  2000/05/24  14:46:02  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			points.c
 *	Date:			Jan 2004
 *	Author:			Tom Videen
 *	Description:	Create simulated points in image file.
 * ===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/points/RCS/points.c,v 1.8 2004/02/27 20:30:14 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <math.h>
#include <libnrimg.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>

int main (argc, argv)
	int             argc;
	char           *argv[];
{
	ImageFile      *file1;
	Index           indx;
	float        ***img;
	char           *infile;
	char           *outfile;
	int             pdim[3];
	int             i, j, k, m;
	float           xs, ys, zs;
	int             x = 64;
	int             y = 64;
/*
	int             x[7] = {38, 64, 90, 64, 38, 64, 90};
	int             y[7] = {49, 34, 49, 64, 79, 94, 79};
*/
	int             z = 24;

	infile = argv[1];
	outfile = argv[2];

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file1 = make_imgfile (infile);
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [points]: Could not open %s\n", infile);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [points]: Could not get MainHeader from %s\n", infile);
		return (ERROR);
	}
	if (existimgfrm (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [points]: cannot find %s frame %d\n", infile, indx.frm);
		return (ERROR);
	}
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [points]: Could not read file subheader in %s\n", infile);
		return (ERROR);
	}
	pdim[0] = file1->sh->dim1;
	pdim[1] = file1->sh->dim2;
	pdim[2] = file1->sh->dim3;

	fprintf (stdout, "Reading %s, frame %d\n", file1->name, indx.frm);
	if ((img = rdtensor (file1, &indx, pdim)) == NULL) {
		fprintf (stderr, "ERROR [points]: Cannot read %s\n", infile);
		return (ERROR);
	}
	close_imgfile (file1);

	for (i = 1; i <= pdim[2]; i++)
		for (j = 1; j <= pdim[1]; j++)
			for (k = 1; k <= pdim[0]; k++)
				img[i][j][k] = 0;
	for (i = 1; i <= pdim[2]; i++) {
		img[i][64][64] = 1000;
/*
		img[i][64][65] = 1000;
		img[i][65][64] = 1000;
		img[i][65][65] = 1000;
*/
	}

/*	Spheres 	for (m = 0; m < 7; m++) { 
	for (i = 1; i <= pdim[2]; i++) { */

/*	Cylinder 7 pixels *0.1 cm long
	6.5 pixels * 0.05 cm outer diameter
	1.5 pixels * 0.05 cm outer diameter
	for (i = 21; i <= 27; i++) {
		for (j = 1; j <= pdim[1]; j++) {
			ys = pow ((double) (j - y), 2.);
			for (k = 1; k <= pdim[0]; k++) {
				xs = pow ((double) (k - x), 2.);
				if (sqrt (xs + ys) <= 1)
					img[i][j][k] = 0;
				else if (sqrt (xs + ys) < 2)
					img[i][j][k] = 1000 * (sqrt (xs + ys) - 1.);
				else if (sqrt (xs + ys) <= 6)
					img[i][j][k] = 1000;
				else if (sqrt (xs + ys) < 7)
					img[i][j][k] = 1000 * (7. - sqrt (xs + ys));
			}
		}
	}
 */

/*	Write image */

	file1->sh->sample_size_1 = 0.05;
	file1->sh->sample_size_2 = 0.05;
	file1->sh->sample_size_3 = 0.1;
	file1->mh->slicesep = 0.1;

	fprintf (stdout, "Writing %s\n", outfile);
	file1->name = outfile;
	(void) strcpy (file1->mode, "w");
	indx.frm = 1;
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [points]: Could not open %s\n", outfile);
		return (ERROR);
	}
	file1->mh->nframe = indx.frm;
	file1->mh->orientation = 0;
	if (put_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [points] writing %s\n", outfile);
		return (ERROR);
	}
	fprintf (stdout, "%d %d\n", indx.frm, indx.pln);
	if (writetensor (file1, &indx, img) == ERROR) {
		fprintf (stderr, "ERROR [points] writing %s\n", outfile);
		return (ERROR);
	}
	close_imgfile (file1);
	free_f3tensor (img, 1, pdim[2], 1, pdim[1], 1, pdim[0]);
	free_imgfile (file1);
	return (OK);
}
@


1.8
log
@2x2 line
@
text
@d2 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/points/RCS/points.c,v 1.5 2004/01/28 17:01:24 tom Exp $";
d39 1
a39 1
main (argc, argv)
d101 1
d105 1
@


1.7
log
@periaqueductal grey simulation
@
text
@a1 3
 * Revision 1.6  2004/01/28  17:16:22  tom
 * large PAG simulation (short cylinder)
 *
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/points/RCS/points.c,v 1.6 2004/01/28 17:16:22 tom Exp tom $";
d48 2
a49 2
	int             x = 65;
	int             y = 65+19;
a85 1
	fprintf (stdout, "%d %d %d\n", pdim[0],pdim[1],pdim[2]);
d96 6
d103 19
a121 4
	for (i = 45; i <= 47; i++) {
		for (j = -1; j <= 1; j++) {
			for (k = -1; k <= 1; k++) {
				img[i][y+j][x+k] = 600;
a123 1
		img[i][y][x] = 0;
d125 1
d129 5
@


1.6
log
@large PAG simulation (short cylinder)
@
text
@d2 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/points/RCS/points.c,v 1.5 2004/01/28 17:01:24 tom Exp tom $";
d51 2
a52 2
	int             x = 64;
	int             y = 64;
d89 1
d101 4
a104 21
/*	Spheres 	for (m = 0; m < 7; m++) { 
	for (i = 1; i <= pdim[2]; i++) { */

/*	Cylinder 7 pixels *0.1 cm long	
	6.5 pixels * 0.05 cm outer radius
	1.5 pixels * 0.05 cm outer radius
*/

	for (i = 21; i <= 27; i++) {
		for (j = 1; j <= pdim[1]; j++) {
			ys = pow ((double) (j - y), 2.);
			for (k = 1; k <= pdim[0]; k++) {
				xs = pow ((double) (k - x), 2.);
				if (sqrt (xs + ys) <= 1)
					img[i][j][k] = 0;
				else if (sqrt (xs + ys) < 2)
					img[i][j][k] = 1000 * (sqrt (xs + ys) - 1.);
				else if (sqrt (xs + ys) <= 6)
					img[i][j][k] = 1000;
				else if (sqrt (xs + ys) < 7)
					img[i][j][k] = 1000 * (7. - sqrt (xs + ys));
d107 1
a111 5
	file1->sh->sample_size_1 = 0.05;
	file1->sh->sample_size_2 = 0.05;
	file1->sh->sample_size_3 = 0.1;
	file1->mh->slicesep = 0.1;

@


1.5
log
@simulated line source
@
text
@d2 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/points/RCS/points.c,v 1.4 2004/01/27 20:39:02 tom Exp tom $";
a95 2
	for (i = 1; i <= pdim[2]; i++)
		img[i][64][64] = 30000;
d100 5
a104 3
/*	Cylinder 7 pixels *0.1 cm long
	6.5 pixels * 0.05 cm outer diameter
	1.5 pixels * 0.05 cm outer diameter
a120 1
 */
@


1.4
log
@7 small spherical hotspots
@
text
@d2 3
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/points/RCS/points.c,v 1.3 2002/11/27 17:10:05 tom Exp tom $";
d45 3
d50 1
d93 2
a94 1
	/* img[i][j][k] = 0; */
d96 2
a97 1
/*	Spheres */
d99 16
a114 19
	for (m = 0; m < 7; m++) {
		for (i = 1; i <= pdim[2]; i++) {
			zs = pow ((double) (i - z), 2.);
			for (j = 1; j <= pdim[1]; j++) {
				ys = pow ((double) (j - y[m]), 2.);
				for (k = 1; k <= pdim[0]; k++) {
					xs = pow ((double) (k - x[m]), 2.);

					/*
					 * if (sqrt (xs + ys + zs) <= 4) img[i][j][k] = 0; else if
					 * (sqrt (xs + ys + zs) < 5) img[i][j][k] = 1000 * (sqrt
					 * (xs + ys + zs) - 4.);
					 */

					if (sqrt (xs + ys + zs) <= 4)
						img[i][j][k] = 1000;
					else if (sqrt (xs + ys + zs) < 5)
						img[i][j][k] = 1000 * (5. - sqrt (xs + ys + zs));
				}
d118 1
d122 2
a123 2
	file1->sh->sample_size_1 = 0.1;
	file1->sh->sample_size_2 = 0.1;
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d13 1
a13 1
 *	Date:			May 2000
d18 2
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/points/RCS/points.c,v 1.2 2000/09/06 19:42:28 tom Exp tom $";
d25 1
a27 1
#include <libnrimg.h>
d34 1
a34 1
	ImageFile      *file;
d36 5
a40 8
	MainHeader     *mh;
	SubHeader      *sh;
	float        ***img;			 /* image array and frequency spectrum */
	char           *fname1;			 /* file to process */
	char           *fname2;			 /* file to write */
	int             frm;			 /* frame number to process */
	unsigned long   dim1, dim2, dim3;	 /* array dimensions */
	long            i, j, k, m;
d42 3
a44 3
	long			x[7] = {38,64,90,64,38,64,90};
	long			y[7] = {49,34,49,64,79,94,79};
	long            z = 24;
d46 2
a47 2
	fname1 = argv[1];
	fname2 = argv[2];
d49 1
a49 2
	frm = 1;
	indx.frm = frm;
d54 3
a56 3
	file = make_imgfile (fname1);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [points]: Could not open %s\n", fname1);
d59 2
a60 2
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [points]: Could not get MainHeader from %s\n", fname1);
d63 2
a64 2
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [points]: cannot find %s frame %d\n", fname1, frm);
d67 2
a68 2
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [points]: Could not read file subheader in %s\n", fname1);
d71 3
a73 2
	mh = file->mh;
	sh = file->sh;
d75 3
a77 8
	dim1 = (unsigned long) sh->dim1;
	dim2 = (unsigned long) sh->dim2;
	dim3 = (unsigned long) sh->dim3;

/*	Read image */

	fprintf (stdout, "Reading %s, frame %d\n", fname1, indx.frm);
	if ((img = readtensor (file, &indx)) == NULL)
d79 2
d82 5
a86 5
	for (i = 1; i <= dim3; i++)
		for (j = 1; j <= dim2; j++)
			for (k = 1; k <= dim1; k++)
				img[i][j][k] = 1000;
				/* img[i][j][k] = 0; */
d91 14
a104 11
		for (i = 1; i <= dim3; i++) {
			zs = pow((double)(i-z),2.);
			for (j = 1; j <= dim2; j++) {
				ys = pow((double)(j-y[m]),2.);
				for (k = 1; k <= dim1; k++) {
					xs = pow((double)(k-x[m]),2.);
					if (sqrt(xs + ys + zs) <= 4)
						img[i][j][k] = 0;
					else if (sqrt(xs + ys + zs) < 5)
						img[i][j][k] = 1000 * (sqrt(xs + ys + zs)-4.);
					/* if (sqrt(xs + ys + zs) <= 4)
d106 2
a107 2
					else if (sqrt(xs + ys + zs) < 5)
						img[i][j][k] = 1000 * (5. - sqrt(xs + ys + zs)); */
d115 4
a118 4
	sh->sample_size_1 = 0.1;
	sh->sample_size_2 = 0.1;
	sh->sample_size_3 = 0.1;
	mh->slicesep = 0.1;
d120 3
d124 2
a125 6
	fprintf (stdout, "Writing %s\n", fname2);
	close_imgfile (file);
	(void) strcpy (file->name, fname2);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [points]: Could not open %s\n", fname2);
d128 4
a131 2
	mh->nframe = indx.frm;
	if (put_mh (file) == ERROR)
d133 4
a136 1
	if (writetensor (file, &indx, img) == ERROR)
d138 4
a141 2
	free_f3tensor (img, 1, dim3, 1, dim2, 1, dim1);
	free_imgfile (file);
@


1.2
log
@strcpy filename
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/points/RCS/points.c,v 1.1 2000/05/24 14:46:02 tom Exp tom $";
d24 1
d94 1
a94 1
			zs = pow((i-z),2.);
d96 1
a96 1
				ys = pow((j-y[m]),2.);
d98 1
a98 1
					xs = pow((k-x[m]),2.);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/points/RCS/points.c,v 1.3 1998/09/01 18:37:05 tom Exp $";
d118 1
a118 2
	free (file->name);
	file->name = fname2;
@
