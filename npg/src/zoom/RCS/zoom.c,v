head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.09.16.15.52.54;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.13.15.14.03;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/* ===============================================================================
 *	Module:			zoom.c
 *	Date:			Sep 2004
 *	Author:			Tom Videen
 *	Description:	Zoom by pixel replication
 * ===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/zoom/RCS/zoom.c,v 1.1 2004/09/13 15:14:03 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <pettable.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	float        ***img1;
	float        ***img2;
	char           *fname1;
	char           *fname2;
	int             frm;
	unsigned long   nx, ny, nz;
	long            i, j, k;
	long            m, n;
	long            xoff = 54;
	long            yoff = 54;
	long            mag;

	fname1 = argv[1];
	fname2 = argv[2];
	mag = atoi(argv[3]);

	frm = 1;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file = make_imgfile (fname1);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [zoom]: Could not open %s\n", fname1);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [zoom]: Could not get MainHeader from %s\n", fname1);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		if (frm == 1) {
			indx.frm = 2;
			if (existimgfrm (file, &indx) == ERROR) {
				indx.frm = 3;
				if (existimgfrm (file, &indx) == ERROR) {
					fprintf (stderr, "ERROR [zoom]: cannot find %s frame 1, 2 or 3\n", fname1);
					return (ERROR);
				}
			}
		} else {
			fprintf (stderr, "ERROR [zoom]: cannot find %s frame %d\n", fname1, frm);
			return (ERROR);
		}
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [zoom]: Could not read file subheader in %s\n", fname1);
		return (ERROR);
	}
	mh = file->mh;
	sh = file->sh;

	nx = (unsigned long) sh->dim1;
	ny = (unsigned long) sh->dim2;
	nz = (unsigned long) sh->dim3;

/*	Read image */

	if ((img1 = readtensor (file, &indx)) == NULL)
		return (ERROR);

	if ((img2 = f3tensor (1, 1, 1, mag*ny, 1, mag*nx)) == NULL) {
		fprintf (stderr, "ERROR [zoom]: malloc img2\n");
		return (ERROR);
	}
	for (i = 1; i <= 1; i++) {
		for (j = 1; j <= ny; j++) {
			for (k = 1; k <= nx; k++) {
				for (m = 0; m < mag; m++) {
					for (n = 0; n < mag; n++) {
						img2[i][(mag*j)-n][(mag*k)-m] = img1[i][j][k];
					}
				}
			}
		}
	}

	indx.frm = 1;
	close_imgfile (file);
	(void) strcpy (file->name, fname2);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [zoom]: Could not open %s\n", fname2);
		return (ERROR);
	}
	mh->nframe = indx.frm;
	mh->pr_filter = 7;
    file->sh->dim1 = mag*nx;
    file->sh->dim2 = mag*ny;
    file->sh->dim3 = 1;
	printf ("dim = %ld %ld %ld\n", file->sh->dim1, file->sh->dim2, file->sh->dim3);
	if (put_mh (file) == ERROR)
		return (ERROR);
	if (writetensor (file, &indx, img2) == ERROR)
		return (ERROR);
	free_f3tensor (img1, 1, nz, 1, ny, 1, nx);
	free_f3tensor (img2, 1, 1, 1, mag*ny, 1, mag*nx);
	free_imgfile (file);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/zoom/RCS/zoom.c,v 3.0 2004/02/16 15:25:45 tom Exp $";
d36 3
a38 3
	long            xoff = 50;
	long            yoff = 40;
	long            mag = 4;
d42 1
d90 1
a90 1
	if ((img2 = f3tensor (1, nz, 1, ny, 1, nx)) == NULL) {
d94 1
a94 1
	for (i = 1; i <= nz; i++) {
a95 1
			m = (j / mag) + yoff;
d97 5
a101 2
				n = (k / mag) + xoff;
				img2[i][j][k] = img1[i][m][n];
d116 4
d125 1
a125 1
	free_f3tensor (img2, 1, nz, 1, ny, 1, nx);
@
