head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2004.02.12.22.10.59;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.12.14.15.40.00;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.12.13.17.19.45;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.06.10.08.56.58;	author jane;	state Exp;
branches;
next	;


desc
@Initial revisioin
@


1.6
log
@Feb 2004
@
text
@/*$Id: dec2sun_float.c,v 1.3 1999/12/14 15:40:00 tom Exp tom $*/
/*$Log: dec2sun_float.c,v $
 * Revision 1.3  1999/12/14  15:40:00  tom
 * lint clean
 *
 * Revision 1.2  1999/12/13  17:19:45  tom
 * tov revision
 *
 * Revision 1.1  1996/06/10  08:56:58  jane
 * Initial revision
 **/
/* =========================================
 * File: dec2sun_float.c
 * Author: dec2sun_float() by John Ollinger
 *         file created by Jane Dunford-Shore for inclusion in libsspct
 * Date: 28april96
 * Functions: dec2sun_float
 * =========================================
 */

#include <math.h>

/*
 * FUNCTION: dec2sun_float(unsigned char b[4])
 * SOURCE:   John Ollinger, Mar96; slightly modified by Jane Dunford-Shore, Mar96
 * PURPOSE:  Convert floating point number in DEC/VAX format to floating point in
 *           native format (Sun, for us).
 * ARGUMENT: array of 4 unsigned characters, each of which represents one byte
 *           of a 4-byte floating point number
 * RETURNS:  converted floating point value
 * COMMENT:
 *     To check a conversion by hand:
 *     1. Switch bytes 1 and 2, and bytes 3 and 4 (DEC-VAX uses Little Endian
 *        format for each of the two 16-bit halves of floating point 32-bit value).
 *     2. Determine sign, fraction, and exponent as diagrammed below:
 *
 *        byte 2            byte 1            byte 4            byte 3
 *        - - - - - - - - / - - - - - - - - / - - - - - - - - / - - - - - - - -
 *        | |                ||________________________________________________|
 *        | |________________|                       |
 *        |         |                                (bits 10-32) fraction
 *        |         |
 *        |         (bits 2-9) exponent
 *        |                    (will subtract 128 to get actual exponent value)
 *        |
 *        (bit 1) sign bit: 1 = -1, 0 = +1
 *
 *     3. Calculate number: (sign)*(.5 + fraction/16777216)*pow(2,exponent - 128)
 */

float           dec2sun_float (unsigned char b[4])
{

	int             sign, exp, fraction;
	float           x;
	double          two = 2.0e0;
	const float     TWOTO23 = (float) 16777216;	 /* 2 raised to the 23rd power */

	/* If leftmost bit of byte 2 is 1, sign is -1; if 0, sign is +1 */
	sign = 1 - 2 * ((b[1] & 0x80) >> 7);

	exp = (int) (((b[1] << 1) & 0xfe) | ((b[0] >> 7) & 1));
	fraction = ((b[0] & 0x7f) << 16) | (b[3] << 8) | b[2];

	x = (float) sign *(.5 + (((float) fraction) / TWOTO23)) * (float) pow (two, (double) (exp - 128));
	return (x);
}
@


1.3
log
@lint clean
@
text
@d1 1
a1 1
/*$Id: dec2sun_float.c,v 1.2 1999/12/13 17:19:45 tom Exp tom $*/
d3 3
@


1.2
log
@tov revision
@
text
@d1 1
a1 1
/*$Id: dec2sun_float.c,v 1.1 1996/06/10 08:56:58 jane Exp tom $*/
d3 3
a47 2
const float     TWOTO23 = (float) 16777216;	 /* 2 raised to the 23rd power */

d54 1
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*$Id$*/
/*$Log$*/
a14 1
#include <stdio.h>
a15 1
#include "sspct.h"
d31 1
a31 1
 *        byte 2            byte 1            byte 4            byte 3 
d34 1
a34 1
 *        | |________________|                       |        
d45 1
a45 1
const float TWOTO23 = (float) 16777216;  /* 2 raised to the 23rd power */
d47 2
a48 8
float   dec2sun_float(unsigned char b[4]) {
 
    int     sign,exp,fraction;
    float   x;
    double  two = 2.0e0;
 
    /* If leftmost bit of byte 2 is 1, sign is -1; if 0, sign is +1 */
    sign = 1 - 2*((b[1] & 0x80) >> 7);
d50 3
a52 2
    exp = (int)( ((b[1] << 1)&0xfe) |((b[0] >> 7) & 1));
    fraction = ((b[0] & 0x7f) << 16) | (b[3] << 8) | b[2];
d54 8
a61 2
    x  = (float)sign*(.5 + (((float)fraction)/TWOTO23))*(float)pow(two,(double)(exp-128)); 
    return(x); 
@
