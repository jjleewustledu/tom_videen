head	1.1;
access;
symbols;
locks
	tom:1.1; strict;
comment	@ * @;


1.1
date	94.10.03.16.07.58;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*  ================================================================================
 *  File Name:      makemask.c
 *  Date:           21-Sep-94
 *  Author:         Tom Videen
 *  Description:    This function creates a mask image (mask3d).
 *		The mask is created from the file mask_filename either by thresholding
 *		by mskpct percent of the whole brain peak or by mskpct of the peak in peakslice
 *		(if peakslice > 0).  The mask is created for the slices in the range first_slice	
 *		to last_slice.  The total pixels in the defined mask are returned (pixels_in_mask).
 *
 *  History:
 *		July 93		threshold.c by Tom Yang
 *		29-Sep-94	revised as makemask.c (TOV)
 *	
 *	Function:
 *			PUBLIC int threshold (char *mask_filename, int scanner, int mskpct,
 *			short width, short height, short num_slices, int first_slice,
 *			int last_slice, short *mask3d, long *pixels_in_mask)
 *	
 *	Arguments:
 *		mask_filename:	masking image filename
 *		scanner:		scanner type
 *		mskpct:			mask percentage
 *		width:			width of pet image slice
 *		height:			height of pet image slice
 *		num_slices:		number of slices
 *		first_slice:	first slice to mask
 *		last_slice:		last slice to mask
 *		mask3d:			3d array for masked image
 *		pixels_in_mask:	total pixels in mask
 *	
 *	Return:	SUCCEED = 0, FAIL = -1
 *	
 *  ============================================================================= */

#include <petutil/imglist.h>
#include <petutil/matrix.h>
#include <values.h>

#define INSIDE		1
#define OUTSIDE		2

static char     rcsid[] = "$Header$";

PUBLIC int 
makemask (mask_filename, scanner, mskpct, width, height, num_slices,
	   first_slice, last_slice, mask3d, pixels_in_mask, peakslice)
	char           *mask_filename;
	int             scanner;
	int             mskpct;
	short           width;
	short           height;
	short           num_slices;
	int             first_slice;
	int             last_slice;
	short          *mask3d;
	long           *pixels_in_mask;
	int				peakslice;
{
	Image_subheader **subheader_list;
	BOOLEAN         more;
	Main_header    *main_header;
	float          *mask_image2d;
	float          *mask_image3d;
	float           threshold;
	float           peak;
	int             i, j, k;
	int             slice_index;
	int				first, last;
	long            image_dimension;
	long            slice_dimension;
	short          *mask2d;
	struct Matval   matval;

/*
 *	Initialization of matval
 */
	matval.frame = 1;
	matval.plane = 1;
	matval.gate = 1;
	matval.data = 0;
	matval.bed = 0;

/*
 * Read the mask_filename into mask_image3d
 */
	main_header = (Main_header *) calloc (1, sizeof (Main_header));
	subheader_list = (Image_subheader **) pkg_malloc (num_slices * sizeof (caddr_t),
		  "maskmask", "subheader_list");
	slice_dimension = ((long) width) * height;
	image_dimension = slice_dimension * num_slices;
	mask_image3d = (float *) pkg_malloc (image_dimension * sizeof (float), 
	     "maskmask", "mask_image3d");
	if (main_header == (Main_header *) NULL) {
		fprintf (stderr, "Memory allocation error for main_header in maskmask.c.\n");
		return FAIL;
	}
	if (getrealimg (mask_filename, scanner, matval, width, height, num_slices, mask_image3d,
			main_header, subheader_list) == FAIL) {
		fprintf (stderr, "Error in getrealimg ().\n");
		free (mask_image3d);
		return FAIL;
	}

/*
 * Find whole brain maximum and compute the absolute threshold
 */
	peak = -MAXFLOAT;
	if (peakslice > 0) {
		first = (peakslice - 1) * slice_dimension;
		last = first + slice_dimension - 1;
		fprintf (stdout, "Peak from slice: %d\n", peakslice);
	} else {
		first = (first_slice - 1) * slice_dimension;
		last = (last_slice * slice_dimension) - 1;
		fprintf (stdout, "Peak from slices: %d - %d\n", first_slice, last_slice);
	}
	for (i = first; i < last; i++) {
		if (mask_image3d[i] > peak)
			peak = mask_image3d[i];
	}
	threshold = peak * mskpct * 0.01;
	fprintf (stdout, "Peak = %9.3f  Threshold = %9.3f\n", peak, threshold);

/*
 * Create a template with mskpct% of the whole brain maximum.
 */
	*pixels_in_mask = 0;
	for (k = first_slice - 1; k < last_slice; k++) {
		slice_index = k * slice_dimension;
		mask2d = mask3d + slice_index;
		mask_image2d = mask_image3d + slice_index;

/*
 * Assign INSIDE to all points >= threshold. Assign 0 to all points < threshold,
 */
		for (i = 0; i < slice_dimension; i++) {
			if (mask_image2d[i] >= threshold)
				mask2d[i] = INSIDE;
			else
				mask2d[i] = 0;
		}

/*
 * Assign OUTSIDE to all points along the boundaries of the 2d mask array which are
 * nor INSIDE the template.
 */
		for (i = 0; i < width; i++) {
			if (mask2d[i] != INSIDE)							/* top row */
				mask2d[i] = OUTSIDE;
			if (mask2d[(height - 1) * width + i] != INSIDE)		/* bottom row */
				mask2d[(height - 1) * width + i] = OUTSIDE;
		}

		for (j = 0; j < height; j++) {
			if (mask2d[j * width] != INSIDE)					/* left column */
				mask2d[j * width] = OUTSIDE;
			if (mask2d[j * width + width - 1] != INSIDE)		/* right column */
				mask2d[j * width + width - 1] = OUTSIDE;
		}

/*
 * Now, starting with the boundaries of the array, expand the area excluded from
 * the template by assigning OUTSIDE to all points directly adjacent to a point
 * whose value is OUTSIDE and which are currently zero (neither INSIDE nor
 * OUTSIDE).
 */
		more = FALSE;
		for (i = 1; i < width - 1; i++) {	/* Outside rows */
			if (mask2d[i] == OUTSIDE && mask2d[width + i] < INSIDE) {	/* row below top row */
				mask2d[width + i] = OUTSIDE;
				more = TRUE;
			}
			if (mask2d[(height - 1) * width + i] == OUTSIDE &&			/* row above bottom row */
			    mask2d[(height - 2) * width + i] < INSIDE) {
				mask2d[(height - 2) * width + i] = OUTSIDE;
				more = TRUE;
			}
		}

		for (j = 1; j < height - 1; j++) {								/* Outside columns */
			if (mask2d[j * width] == OUTSIDE && mask2d[j * width + 1] < INSIDE) {	/* next to left */
				mask2d[j * width + 1] = OUTSIDE;									
				more = TRUE;
			}
			if (mask2d[j * width + width - 1] == INSIDE &&		/* column next to rightmost column */
			    mask2d[j * width + width - 2 < INSIDE]) {
				mask2d[j * width + width - 2] = OUTSIDE;
				more = TRUE;
			}
		}

/*
 * The following loop is repeated until it cycles with no more points added to the
 * outside of the region.
 */
		while (more) {
			more = FALSE;
			for (j = 1; j < height - 1; j++) {
				for (i = 1; i < width - 1; i++) {
					if (mask2d[j * width + i] == OUTSIDE) {
						if (mask2d[j * width + i - 1] < INSIDE) {
							mask2d[j * width + i - 1] = OUTSIDE;
							more = TRUE;
						}
						if (mask2d[j * width + i + 1] < INSIDE) {
							mask2d[j * width + i + 1] = OUTSIDE;
							more = TRUE;
						}
						if (mask2d[(j - 1) * width + i] < INSIDE) {
							mask2d[(j - 1) * width + i] = OUTSIDE;
							more = TRUE;
						}
						if (mask2d[(j + 1) * width + i] < INSIDE) {
							mask2d[(j + 1) * width + i] = OUTSIDE;
							more = TRUE;
						}
					}
				}
			}
		}

/*
 * All points that are < OUTSIDE are assigned INSIDE. All points that are >=
 * OUTSIDE are assigned 0.
 */
		for (i = 0; i < slice_dimension; i++) {
			if (mask2d[i] < OUTSIDE) {
				mask2d[i] = INSIDE;
				(*pixels_in_mask)++;
			} else
				mask2d[i] = 0;
		}
	}

	for (i = 0; i < num_slices; i++)
		free (subheader_list[i]);
	free (subheader_list);
	free (main_header);
	free (mask_image3d);

	return SUCCEED;
}
@
