head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2011.02.17.16.25.16;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Log$ */
/*	===============================================================================
 *	Module:		matbat_deformations.c
 *	Intent:		Modify an SPM deformations.mat
 *	Author:		Tom Videen
 *	Date:		Feb 2011
 *	===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Id: matbat_deformations.c,v 1.8 2004/02/16 20:08:32 tom Exp $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "matbat.h"

int             main (argc, argv)
	int             argc;
	char           *argv[];
{

	FILE           *fp;
	DEFORMATIONS_MAT *defmat;
	char           *in;
	char           *out;
	char           *bakflow;
	char           *forflow;
	char           *ident;
	char           *saveas;
	char           *app1;
	char           *app2;
	int             i,j,k;

	if (argc != 9) {
		fprintf (stderr, "Usage: matbat_deformations old new bakflow forflow ident app1 app2\n");
		return (1);
	}
/*
 *	Read deformations.mat file
 */
	in = argv[1];
	out = argv[2];
	bakflow = argv[3];
	forflow = argv[4];
	ident = argv[5];
	saveas = argv[6];
	app1 = argv[7];
	app2 = argv[8];
	fp = fopen (in, "r");
	if (fp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [matbat_deformations]: opening %s\n", in);
		return (1);
	}
	defmat = (DEFORMATIONS_MAT *) malloc (sizeof (DEFORMATIONS_MAT));
	if (defmat == NULL)
		return (1);
	if (fread (defmat, sizeof (DEFORMATIONS_MAT), 1, fp) != 0) {
		fprintf (stderr, "ERROR [matbat_deformations]: reading %s\n", in);
		return (1);
	}
	(void) fclose (fp);

/*
 *	Replace select fields
 */
	if (strlen(bakflow) != 62)
		fprintf (stdout, "bakflow %i %s\n", strlen(bakflow), bakflow);
	for (i = 0; i < 63; i++) {
		j = 2*i-1;
		defmat->back_flow_field[j] = bakflow[i];
	}
	if (strlen(forflow) != 59)
		fprintf (stdout, "forflow %i %s\n", strlen(forflow), forflow);
	for (i = 0; i < 59; i++) {
		j = 2*i-1;
		defmat->forward_flow_field[j] = forflow[i];
	}
	if (strlen(ident) != 45)
		fprintf (stdout, "ident %i %s\n", strlen(ident), ident);
	for (i = 0; i < 45; i++) {
		j = 2*i-1;
		defmat->identity[j] = ident[i];
	}
	if (strlen(saveas) != 11)
		fprintf (stdout, "saveas %i %s\n", strlen(saveas), saveas);
	for (i = 0; i < 11; i++) {
		j = 2*i-1;
		defmat->saveas[j] = saveas[i];
	}
	if (strlen(app1) != 48)
		fprintf (stdout, "app1 %i %s\n", strlen(app1), app1);
	for (i = 0; i < 48; i++) {
		j = 2*i-1;
		defmat->apply_to_1[j] = app1[i];
	}
	if (strlen(app2) != 48)
		fprintf (stdout, "app2 %i %s\n", strlen(app2), app2);
	for (i = 0; i < 48; i++) {
		j = 2*i-1;
		defmat->apply_to_2[j] = app2[i];
	}

/*
 *	Write to new file
 */

	fp = fopen (out, "w");
	if (fp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [matbat_deformations]: opening %s\n", out);
		return (1);
	}
	if (fwrite (defmat, sizeof (DEFORMATIONS_MAT), 1, fp) != 0) {
		fprintf (stderr, "ERROR [matbat_deformations]: writing %s\n", out);
		return (1);
	}
	free (defmat);
	(void) fclose (fp);
	return (0);
}
@
