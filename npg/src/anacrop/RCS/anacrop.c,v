head	2.1;
access;
symbols;
locks; strict;
comment	@ * @;


2.1
date	2009.09.11.19.59.40;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.17.10.24;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.03.14.21.02;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.09.17.16.31.12;	author tom;	state Exp;
branches;
next	;


desc
@@


2.1
log
@*** empty log message ***
@
text
@/*	$Log: anacrop.c,v $
 * Revision 2.0  2004/02/13  17:10:24  tom
 * Feb 2004
 *
 * Revision 1.2  2002/07/03  14:21:02  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/09/17  16:31:12  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anacrop.c
 *	Date:			Aug 1999
 *	Author:			Tom Videen
 *	Description:	Crop a 3D Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anacrop/RCS/anacrop.c,v 2.0 2004/02/13 17:10:24 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <nrutil.h>
#include <myvalues.h>
#include <ANALYZE.h>

int main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* output file */
	int             x0, y0, z0;
	int             xlen, ylen, zlen;
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            i, j, k, n;
	long            len;
	short          *img;
	float        ***image;

	if (argc != 11) {
		fprintf (stderr,"Usage: anacrop inhdr inimg outhdr outimg x0 y0 z0 xlen ylen zlen\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	x0 = atoi (argv[5]);
	y0 = atoi (argv[6]);
	z0 = atoi (argv[7]);
	xlen = atoi (argv[8]);
	ylen = atoi (argv[9]);
	zlen = atoi (argv[10]);

/*	Read image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anacrop]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anacrop]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	len = dim1 * dim2 * dim3;
	img = (short *) calloc (len, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [anacrop]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anacrop]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), len, fd_img)) != len) {
		fprintf (stderr, "ERROR [anacrop]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((image = f3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [anasumlaterl]: Cannot malloc image\n");
		return (NULL);
	}
	n = 0;
	for (i = 1; i <= dim3; i++) {
		for (j = 1; j <= dim2; j++) {
			for (k = 1; k <= dim1; k++) {
				image[i][j][k] = img[n];
				n++;
			}
		}
	}
	free (img);

	len = xlen * ylen * zlen;
	img = (short *) calloc (len, sizeof (short));
	if (img == NULL)
		return (ERROR);
	n = 0;
	x0 = dim1 - x0 - xlen/2 + 1;
	y0 = dim2 - y0 - ylen/2 + 1;
	z0 = dim3 - z0 - zlen/2 + 1;
	for (i = z0; i < z0 + zlen; i++) {
		for (j = y0; j < y0 + ylen; j++) {
			for (k = x0; k < x0 + xlen; k++) {
				img[n] = image[i][j][k];
				n++;
			}
		}
	}
	free_f3tensor (image, 1, dim3, 1, dim2, 1, dim1);

	hdr.dime.dim[1] = xlen;
	hdr.dime.dim[2] = ylen;
	hdr.dime.dim[3] = zlen;
	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [anacrop]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anacrop]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [anacrop]: Unable to open %s\n", img2);
		return (ERROR);
	}
	if ((fwrite (img, sizeof (short), len, fd_img)) != len) {
		fprintf (stderr, "ERROR [anacrop]: Error writing to: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	free (img);
	return (OK);
}
@


2.0
log
@Feb 2004
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anacrop/RCS/anacrop.c,v 1.2 2002/07/03 14:21:02 tom Exp tom $";
d29 1
a29 1
main (argc, argv)
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d10 1
a10 1
 *	Date:			Aug-99
d15 1
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anacrop/RCS/anacrop.c,v 1.1 1999/09/17 16:31:12 tom Exp tom $";
d68 1
a68 1
	fclose (fd_hdr);
d86 1
a86 1
	fclose (fd_img);
d105 2
d132 1
a132 1
	fclose (fd_hdr);
d142 1
a142 1
	fclose (fd_img);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anacrop/RCS/anacrop.c,v 1.1 1999/08/11 16:56:57 tom Exp $";
d18 1
a19 1
#include <nrutil.h>
d40 1
a40 1
		printf ("Usage: anacrop inhdr inimg outhdr outimg x0 y0 z0 xlen ylen zlen\n");
@
