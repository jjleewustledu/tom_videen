head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.17.07.19;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.09.17.27.41;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: anaabs.c,v $
 * Revision 1.1  2002/10/09  17:27:41  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anaabs.c
 *	Date:			Oct 2002
 *	Author:			Tom Videen
 *	Description:	Compute the absolute value for all pixels in an Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaabs/RCS/anaabs.c,v 1.1 2002/10/09 17:27:41 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anaabs
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	long            dim1, dim2, dim3; /* dimensions of image */
	long            num, i;
	short          *imga;	 		 /* image */

	if (argc != 5) {
		fprintf (stderr, "Usage: anaabs img1 hdr1 img2 hdr2\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];

/*	Get image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anaabs]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anaabs]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anaabs]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anaabs]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anaabs]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1*dim2*dim3;

	imga = (short*) calloc (num, sizeof (short));
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anaabs]: Cannot calloc imga\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anaabs]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (imga, sizeof(short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anaabs]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout,"Read %s\n", img1);


/*	Multiply and write image */

	for (i = 0; i < num; i++)
		imga[i] = abs(imga[i]);

	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [anaabs]: Unable to open %s\n", img2);
		return (ERROR);
	}
	if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anaabs]: Error writing to: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [anaabs]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anaabs]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	free (imga);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 1
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaabs/RCS/anaabs.c,v 1.3 2000/12/07 22:29:28 tom Exp $";
@
