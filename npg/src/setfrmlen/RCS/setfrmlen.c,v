head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2008.04.10.21.18.29;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*$Log$ */
/* ===============================================================================
 *	Module:			setfrmlen.c
 *	Date:			Apr 2008
 *	Author:			Tom Videen
 *	Description:	Change frame length in subheader of ECAT image
 * ===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/setfrmlen/RCS/setfrmlen.c,v 1.7 2004/05/25 17:04:44 tom Exp $";

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <pettable.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	char           *fname;
	float        ***img;
	int             frm;
	int           	len;			 /* frame length in sec */

	fname = argv[1];
	len = atoi (argv[2]);

	frm = 1;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	file = make_imgfile (fname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [setfrmlen]: opening %s\n", fname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [setfrmlen]: reading MainHeader from %s\n", fname);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [setfrmlen]: cannot find frame %d\n", frm);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [setfrmlen]: reading subheader from %s frame %d\n", fname, frm);
		return (ERROR);
	}
	if ((img = readtensor (file, &indx)) == NULL)
		return (ERROR);
	close_imgfile (file);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [setfrmlen]: opening file to replace %s\n", fname);
		return (ERROR);
	}
	file->sh->duration = len * 1000;
	if (put_mh (file) == ERROR)
		return (ERROR);
	if (writetensor (file, &indx, img) == ERROR)
		return (ERROR);
	free_imgfile (file);
	return (OK);
}
@
