head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2009.05.29.14.36.47;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.16.20.18.23;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.27.15.20.23;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.11.17.32.18;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.21.14.29.04;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.02.09.18.15.53;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.02.08.16.57.47;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.08.16.32.46;	author tom;	state Exp;
branches;
next	;


desc
@@


1.8
log
@accept dimensions = 3
@
text
@/* $Log: mask_and_all.c,v $
 * Revision 1.7  2004/02/16  20:18:23  tom
 * Feb 2004
 *
 * Revision 1.6  2002/11/27  15:20:23  tom
 * *** empty log message ***
 *
 * Revision 1.5  2001/07/11  17:32:18  tom
 * fprint to stdout
 *
 * Revision 1.4  2000/09/21  14:29:04  tom
 * print pixels only if > 0
 *
 * Revision 1.3  1999/02/09  18:15:53  tom
 * correct AND
 *
 * Revision 1.2  1999/02/08  16:57:47  tom
 * *** empty log message ***
 * */
/*  ================================================================================
 *  File Name:      mask_and_all.c
 *  Date:           Jan 1999
 *  Author:         Tom Videen
 *  Description:    Set to val all pixels which are >= min AND <= max.
 *					Total pixels in the mask are returned in npixels.
 *  =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and_all.c,v 1.7 2004/02/16 20:18:23 tom Exp tom $";
#endif

#include <stdio.h>

void            mask_and_all (img, val, min, max, dim1, dim2, dim3, npixels)
	short        ***img;			 /* masked image */
	short			val;			 /* set to this value */
	short           min, max;		 /* range to identify */
	long            dim1, dim2, dim3;	 /* dimensions of img */
	long           *npixels;		 /* total pixels within mask */
{
	long            npix;
	long            i, j, k;

	fprintf (stderr, "Plane   Pixels Masked\n");
	for (k = 1; k <= dim3; k++) {
		npix = 0;
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				if (img[k][j][i] >= min && img[k][j][i] <= max) {
					img[k][j][i] = val;
					npix++;
				}
			}
		}
		if (npix > 0)
			fprintf (stderr, "z =%3li %11li\n", k, npix);
		*npixels += npix;
	}
}
@


1.7
log
@Feb 2004
@
text
@d2 3
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and_all.c,v 1.6 2002/11/27 15:20:23 tom Exp tom $";
@


1.6
log
@*** empty log message ***
@
text
@d2 3
d19 1
a19 1
 *  Date:           Jan-99
d25 1
d27 1
a27 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and_all.c,v 1.5 2001/07/11 17:32:18 tom Exp tom $";
@


1.5
log
@fprint to stdout
@
text
@d2 3
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and_all.c,v 1.4 2000/09/21 14:29:04 tom Exp tom $";
d50 1
a50 1
			fprintf (stderr, "z =%3i %11i\n", k, npix);
@


1.4
log
@print pixels only if > 0
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and_all.c,v 1.3 1999/02/09 18:15:53 tom Exp tom $";
d35 1
a35 1
	printf ("Plane   Pixels Masked\n");
d47 1
a47 1
			printf ("z =%3i %11i\n", k, npix);
@


1.3
log
@correct AND
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and_all.c,v 1.2 1999/02/08 16:57:47 tom Exp tom $";
d43 2
a44 1
		printf ("z =%3i %11i\n", k, npix);
@


1.2
log
@*** empty log message ***
@
text
@d1 4
a4 1
/* $Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/mask_and_all.c,v 1.1 1999/02/01 20:13:51 tom Exp $";
d34 1
a34 1
				if (img[k][j][i] >= min || img[k][j][i] <= max) {
@


1.1
log
@Initial revision
@
text
@d1 1
d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskull/RCS/mask_and_all.c,v 1.1 1999/01/12 15:44:41 tom Exp tom $";
a14 1
#include <myvalues.h>
d16 1
a16 1
int            mask_and_all (img, val, min, max, dim1, dim2, dim3, npixels)
d18 1
a18 1
	short           val;			 /* set to this value */
d20 1
a20 1
	long            dim1, dim2, dim3; /* dimensions of img and set */
d23 1
a24 1
	long            npix;
a25 1
	*npixels = 0;
d31 1
a31 1
				if (img[k][j][i] >= min && img[k][j][i] <= max) {
d36 1
a36 1
		}	
a39 1
	return(OK);
@
