head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2009.05.29.14.36.47;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.16.20.18.23;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.27.15.20.23;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.11.17.32.18;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.02.08.17.32.59;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.02.08.16.57.47;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.08.16.32.46;	author tom;	state Exp;
branches;
next	;


desc
@@


1.8
log
@accept dimensions = 3
@
text
@/* $Log: mask_and.c,v $
 * Revision 1.7  2004/02/16  20:18:23  tom
 * Feb 2004
 *
 * Revision 1.5  2002/11/27  15:20:23  tom
 * *** empty log message ***
 *
 * Revision 1.4  2001/07/11  17:32:18  tom
 * fprint to stdout
 *
 * Revision 1.3  1999/02/08  17:32:59  tom
 * first release
 *
 * Revision 1.2  1999/02/08  16:57:47  tom
 * *** empty log message ***
 * */
/*  ================================================================================
 *  File Name:      mask_and.c
 *  Date:           Jan 1999
 *  Author:         Tom Videen
 *  Description:    Set to val all pixels which are >= min AND <= max.
 *					which are connected to a seed (identified in set).
 *					Total pixels in the mask are returned in npixels.
 *  =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and.c,v 1.7 2004/02/16 20:18:23 tom Exp tom $";
#endif

#include <stdio.h>

void            mask_and (img, set, val, min, max, dim1, dim2, dim3, pln, xmin, xmax, ymin, ymax, npixels)
	short        ***img;			 /* masked image */
	short        ***set;			 /* pixels masked */
	short           val;			 /* set to this value */
	short           min, max;		 /* range to identify */
	long            dim1, dim2, dim3;	 /* dimensions of img and set */
	long            pln;
	long           *xmin, *xmax;		 /* range to search */
	long           *ymin, *ymax;		 /* range to search */
	long           *npixels;		 /* total pixels within mask */
{
	long            lastpln;
	long            xmin0 = 0;		 /* range to search in loop */
	long            xmax0 = 0;
	long            ymin0 = 0;
	long            ymax0 = 0;
	long            i, j, k;
	long            npix;
	int             inc, more;

	more = 1;
	inc = 1;
	fprintf (stderr, "Plane   Pixels Masked\n");
	while (more) {
		more = 1;
		while (more) {
			more = 0;
			xmin0 = *xmin;
			xmax0 = *xmax;
			ymin0 = *ymin;
			ymax0 = *ymax;
			for (j = ymin0; j <= ymax0; j++) {
				for (i = xmin0; i <= xmax0; i++) {
					if (set[pln][j][i]) {
						if (j > 1) {
							k = j - 1;
							if (set[pln][k][i] == 0) {
								if (img[pln][k][i] >= min && img[pln][k][i] <= max) {
									set[pln][k][i] = 1;
									more = 1;
									if (k < *ymin)
										*ymin = k;
								}
							}
						}
						if (j < dim2) {
							k = j + 1;
							if (set[pln][k][i] == 0) {
								if (img[pln][k][i] >= min && img[pln][k][i] <= max) {
									set[pln][k][i] = 1;
									more = 1;
									if (k > *ymax)
										*ymax = k;
								}
							}
						}
						if (i > 1) {
							k = i - 1;
							if (set[pln][j][k] == 0) {
								if (img[pln][j][k] >= min && img[pln][j][k] <= max) {
									set[pln][j][k] = 1;
									more = 1;
									if (k < *xmin)
										*xmin = k;
								}
							}
						}
						if (i < dim1) {
							k = i + 1;
							if (set[pln][j][k] == 0) {
								if (img[pln][j][k] >= min && img[pln][j][k] <= max) {
									set[pln][j][k] = 1;
									more = 1;
									if (k > *xmax)
										*xmax = k;
								}
							}
						}
					}
				}
			}
		}				 /* end more loop for current pln */
		if (xmin0 < *xmin)
			*xmin = xmin0;
		if (xmax0 > *xmax)
			*xmax = xmax0;
		if (ymin0 < *ymin)
			*ymin = ymin0;
		if (ymax0 > *ymax)
			*ymax = ymax0;

		lastpln = pln;
		more = 1;
		if (inc > 0) {
			if (pln < dim3)
				pln++;
			else {
				pln--;
				inc = -1;
				*npixels = 0;
			}
		} else {
			if (pln > 1)
				pln--;
			else
				more = 0;
		}
		npix = 0;
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++)
				if (set[lastpln][j][i] == 1) {
					img[lastpln][j][i] = val;
					npix++;
				}
		}

		if (more) {
			for (j = *ymin; j <= *ymax; j++) {
				for (i = *xmin; i <= *xmax; i++)
					if (set[lastpln][j][i]) {
						if (set[pln][j][i] == 0) {
							if (img[pln][j][i] >= min && img[pln][j][i] <= max) {
								set[pln][j][i] = 1;
								img[pln][j][i] = val;
							}
						}
					}
			}
		}
		fprintf (stderr, "z =%3li %11li\n", lastpln, npix);
		*npixels += npix;
	}
}
@


1.7
log
@Feb 2004
@
text
@d2 3
d28 1
a28 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and.c,v 1.5 2002/11/27 15:20:23 tom Exp tom $";
@


1.5
log
@*** empty log message ***
@
text
@d2 3
d16 1
a16 1
 *  Date:           Jan-99
d23 1
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and.c,v 1.4 2001/07/11 17:32:18 tom Exp tom $";
@


1.4
log
@fprint to stdout
@
text
@d2 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and.c,v 1.3 1999/02/08 17:32:59 tom Exp tom $";
d38 4
a41 2
	long            xmin0, xmax0;		 /* range to search in loop */
	long            ymin0, ymax0;		 /* range to search in loop */
d155 1
a155 1
		fprintf (stderr, "z =%3i %11i\n", lastpln, npix);
@


1.3
log
@first release
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskand/RCS/mask_and.c,v 1.2 1999/02/08 16:57:47 tom Exp tom $";
d43 1
a43 1
	printf ("Plane   Pixels Masked\n");
d150 1
a150 1
		printf ("z =%3i %11i\n", lastpln, npix);
@


1.2
log
@*** empty log message ***
@
text
@d1 4
a4 1
/* $Log$ */
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/mask_and.c,v 1.1 1999/02/01 20:13:51 tom Exp $";
d23 1
a23 1
	short			val;			 /* set to this value */
d27 2
a28 2
	long           *xmin, *xmax;	 /* range to search */
	long           *ymin, *ymax;	 /* range to search */
d32 2
a33 2
	long            xmin0, xmax0;	 /* range to search in loop */
	long            ymin0, ymax0;	 /* range to search in loop */
d35 2
a36 2
	long			npix;
	int             more;
d38 2
d41 1
a41 2
	while (pln <= dim3) {
		npix = 0;
a56 2
									img[pln][k][i] = val;
									npix++;
a67 2
									img[pln][k][i] = val;
									npix++;
a78 2
									img[pln][j][k] = val;
									npix++;
a89 2
									img[pln][j][k] = val;
									npix++;
d99 10
a108 1
		}		/* end more loop for current pln */
d110 27
a136 4
		pln++;
		if (pln <= dim3) {		/* set any adjacent pixels in next pln */
			for (j = ymin0; j <= ymax0; j++) {
				for (i = xmin0; i <= xmax0; i++) {
a141 1
								npix++;
a144 1
				}
@


1.1
log
@Initial revision
@
text
@d1 1
d6 2
a7 1
 *  Description:    Set to val all pixels connected to [x,y,z] which are >= min AND <= max.
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskull/RCS/mask_and.c,v 1.1 1999/01/12 15:44:41 tom Exp tom $";
a15 1
#include <myvalues.h>
d17 1
a17 1
int             mask_and (img, set, val, flag, min, max, dim1, dim2, dim3, pln, xmin, xmax, ymin, ymax, npixels)
d20 1
a20 3
	short           val;			 /* set to this value */
	int             flag;			 /* 0  -> same seed [x,y,z] used in all planes */
									 /* 1  -> continue mask to next plane */
d22 1
a22 1
	long            dim1, dim2, dim3; /* dimensions of img and set */
d24 2
a25 2
	long           *xmin, *xmax;	 /* composite range over all planes */
	long           *ymin, *ymax;	 /* composite range over all planes */
d28 1
a28 1
	long            x0, y0, z0;		 /* initial seed */
a30 1
	long            lastpln;
d32 1
a32 1
	long            npix;
a34 9
	if (flag < 0 || flag > 1) {
		fprintf (stderr, "ERROR [mask_and]: illegal value for flag: %i\n", flag);
		return (ERROR);
	}
	x0 = *xmin;
	y0 = *ymin;
	z0 = pln;
	npix = 0;

d37 1
d39 2
a40 6
		if (flag == 0) {
			xmin0 = x0;
			xmax0 = x0;
			ymin0 = y0;
			ymax0 = y0;
		} else {
a44 3
		}
		while (more) {
			more = 0;
d56 2
a57 2
									if (k < ymin0)
										ymin0 = k;
d69 2
a70 2
									if (k > ymax0)
										ymax0 = k;
d82 2
a83 2
									if (k < xmin0)
										xmin0 = k;
d95 2
a96 2
									if (k > xmax0)
										xmax0 = k;
d103 1
a103 12
		}				 /* end more loop for current pln */
		printf ("z =%3i %11i\n", pln, npix);
		*npixels += npix;
		npix = 0;
		if (xmin0 < *xmin)
			*xmin = xmin0;
		if (xmax0 > *xmax)
			*xmax = xmax0;
		if (ymin0 < *ymin)
			*ymin = ymin0;
		if (ymax0 > *ymax)
			*ymax = ymax0;
d106 3
a108 7
		if (flag == 0) {
			set[z0][y0][x0] = 1;
			img[z0][y0][x0] = val;
			npix++;
		} else if (pln <= dim3) {	 /* set any adjacent pixels in next pln */
			for (j = *ymin; j <= *ymax; j++) {
				for (i = *xmin; i <= *xmax; i++) {
d121 2
a123 1
	return (OK);
@
