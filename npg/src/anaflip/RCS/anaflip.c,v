head	2.5;
access;
symbols;
locks; strict;
comment	@ * @;


2.5
date	2011.04.14.18.27.29;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2010.05.17.20.49.55;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2008.08.07.20.03.33;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2008.07.01.15.10.39;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2007.01.02.20.24.43;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.17.25.01;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.03.15.38.20;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.12.30.17.13.51;	author tom;	state Exp;
branches;
next	;


desc
@@


2.5
log
@read both 3 and 4 dimensional image hdrs
@
text
@/*	$Log: anaflip.c,v $
 * Revision 2.4  2010/05/17  20:49:55  tom
 * *** empty log message ***
 *
 * Revision 2.3  2008/08/07  20:03:33  tom
 * flip 8-bit image
 *
 * Revision 2.2  2008/07/01  15:10:39  tom
 * added types char and float to short
 *
 * Revision 2.1  2007/01/02  20:24:43  tom
 * fix bug
 *
 * Revision 2.0  2004/02/13  17:25:01  tom
 * Feb 2004
 *
 * Revision 1.2  2002/07/03  15:38:20  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/12/30  17:13:51  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anaflip.c
 *	Date:			Jul 2008
 *	Author:			Tom Videen
 *	Description:	Reorient Analyze images.
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaflip/RCS/anaflip.c,v 2.4 2010/05/17 20:49:55 tom Exp $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <myvalues.h>
#include <nrutil.h>
#include <matrixlib.h>
#include <dbh.h>

#define TRANSVERSE '\000'
#define CORONAL    '\001'
#define SAGITTAL   '\002'

/*	----------------------------
 *	Function:			anaflip
 *	----------------------------
 */
int main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;
	FILE           *fd_hdr;			 /* file for hdr */
	FILE           *fd_img;			 /* file for image */
	char           *in_hdr;			 /* input header filename  */
	char           *in_img;			 /* input image filename */
	char           *out_hdr;		 /* input header filename  */
	char           *out_img;		 /* input image filename */
	char           *orient;

	char           *ptr;
	char            version[5];
	char            program_date[12];
	int             global_max;
	int             global_min;

	float           temp1, temp2, temp3;
	int             i, j, k;

	int             dtype;			 /* data type */
	long            idim1, idim2, idim3;	 /* dimensions of simg */
	long            odim1, odim2, odim3;	 /* dimensions of somg */

	char         ***cimg;			 /* char input image */
	char         ***comg;			 /* char output image */
	char           *crow;			 /* char row of input image */
	short        ***simg;			 /* short input image */
	short        ***somg;			 /* short output image */
	short          *srow;			 /* short row of input image */
	float        ***fimg;			 /* float input image */
	float        ***fomg;			 /* float output image */
	float          *frow;			 /* float row of input image */

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 6) {
		fprintf (stderr, "Usage: anaflip in_img in_hdr out_img out_hdr orientation\n");
		return (ERROR);
	}
	in_img = argv[1];
	in_hdr = argv[2];
	out_img = argv[3];
	out_hdr = argv[4];
	orient = argv[5];

	ptr = strstr (rcsid, "v ");
	ptr += 2;
	(void) strcpy (version, "    ");
	if (ptr != NULL)
		(void) strncpy (version, ptr, 4);
	if (ptr != NULL)
		ptr = strstr (ptr, " ");
	ptr++;
	(void) strcpy (program_date, "           ");
	if (ptr != NULL)
		(void) strncpy (program_date, ptr, 10);
	ptr = strchr (program_date, '/');
	*ptr = ':';
	ptr = strchr (program_date, '/');
	*ptr = ':';

/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (in_hdr, "r")) == 0) {
		fprintf (stderr, "ERROR [anaflip]: opening %s\n", in_hdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anaflip]: reading %s\n", in_hdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3  || hdr.dime.dim[0] > 4) {
		fprintf (stderr, "ERROR [anaflip]: reading %s\n", in_hdr);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dtype = hdr.dime.datatype;
	switch (dtype) {
	case 2:
		if (hdr.dime.bitpix != 8) {
			fprintf (stderr, "ERROR [anaflip]: reading %s\n", in_hdr);
			fprintf (stderr, "Datatype = %d and Bits/pixel = %d\n", dtype, hdr.dime.bitpix);
			return (ERROR);
		}
		break;
	case 4:
		if (hdr.dime.bitpix != 16) {
			fprintf (stderr, "ERROR [anaflip]: reading %s\n", in_hdr);
			fprintf (stderr, "Datatype = %d and Bits/pixel = %d\n", dtype, hdr.dime.bitpix);
			return (ERROR);
		}
		break;
	case 8:
		fprintf (stderr, "ERROR [anaflip]: currently does not handle type 32-bit integer\n");
		return (ERROR);
	case 16:
		if (hdr.dime.bitpix != 32) {
			fprintf (stderr, "ERROR [anaflip]: reading %s\n", in_hdr);
			fprintf (stderr, "Datatype = %d and Bits/pixel = %d\n", dtype, hdr.dime.bitpix);
			return (ERROR);
		}
		break;
	default:
		fprintf (stderr, "ERROR [anaflip]: reading %s\n", in_hdr);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	idim1 = hdr.dime.dim[1];
	idim2 = hdr.dime.dim[2];
	idim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

	if (strcmp (orient, "t") == 0) {
		odim1 = idim1;
		odim2 = idim2;
		odim3 = idim3;
	} else if (strcmp (orient, "c") == 0) {
		odim1 = idim1;
		odim2 = idim3;
		odim3 = idim2;
	} else if (strcmp (orient, "s") == 0) {
		odim1 = idim2;
		odim2 = idim3;
		odim3 = idim1;
	} else {
		fprintf (stderr, "ERROR [anaflip]: Orientation should be 't', 'c' or 's'\n");
		return (ERROR);
	}
	fprintf (stdout, "Dimensions: %d %d %d\n", (int) odim1, (int) odim2, (int) odim3);

/*
 *	Read the simg and flip X, Y & Z from Analyze convention
 */

	if ((fd_img = fopen (in_img, "r")) == 0) {
		fprintf (stderr, "ERROR [anaflip]: opening %s\n", in_img);
		return (ERROR);
	}
	switch (dtype) {
	case 2:
		cimg = c3tensor (1, idim3, 1, idim2, 1, idim1);
		if (cimg == NULL) {
			fprintf (stderr, "ERROR [anaflip]: malloc cimg\n");
			return (ERROR);
		}
		fprintf (stdout, "Reading %s\n", in_img);
		for (i = 1; i <= idim3; i++) {
			for (j = 1; j <= idim2; j++) {
				if ((fread (&cimg[i][j][1], sizeof (char), idim1, fd_hdr)) != idim1) {
					fprintf (stderr, "ERROR [anaflip]: reading %s\n", in_img);
					return (ERROR);
				}
			}
		}
		(void) fclose (fd_img);
		comg = c3tensor (1, odim3, 1, odim2, 1, odim1);
		if (comg == NULL) {
			fprintf (stderr, "ERROR [anaflip]: malloc comg\n");
			return (ERROR);
		}
		global_max = 0;
		global_min = 32000;
		if (strcmp (orient, "t") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++) {
						comg[i][j][k] = cimg[i][j][k];
						if (comg[i][j][k] > global_max)
							global_max = comg[i][j][k];
						if (comg[i][j][k] < global_min)
							global_min = comg[i][j][k];
					}
				}
			}
		} else if (strcmp (orient, "c") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++) {
						comg[i][j][k] = cimg[j][i][k];
						if (comg[i][j][k] > global_max)
							global_max = comg[i][j][k];
						if (comg[i][j][k] < global_min)
							global_min = comg[i][j][k];
					}
				}
			}
		} else if (strcmp (orient, "s") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++) {
						comg[i][j][k] = cimg[k][i][j];
					}
				}
			}
		}
		break;

	case 4:
		simg = s3tensor (1, idim3, 1, idim2, 1, idim1);
		if (simg == NULL) {
			fprintf (stderr, "ERROR [anaflip]: malloc simg\n");
			return (ERROR);
		}
		fprintf (stdout, "Reading %s\n", in_img);
		for (i = 1; i <= idim3; i++) {
			for (j = 1; j <= idim2; j++) {
				if ((fread (&simg[i][j][1], sizeof (short), idim1, fd_hdr)) != idim1) {
					fprintf (stderr, "ERROR [anaflip]: Reading: %s\n", in_img);
					return (ERROR);
				}
			}
		}
		(void) fclose (fd_img);
		somg = s3tensor (1, odim3, 1, odim2, 1, odim1);
		if (somg == NULL) {
			fprintf (stderr, "ERROR [anaflip]: malloc somg\n");
			return (ERROR);
		}
		global_max = 0;
		global_min = 32000;
		if (strcmp (orient, "t") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++) {
						somg[i][j][k] = simg[i][j][k];
						if (somg[i][j][k] > global_max)
							global_max = somg[i][j][k];
						if (somg[i][j][k] < global_min)
							global_min = somg[i][j][k];
					}
				}
			}
		} else if (strcmp (orient, "c") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++) {
						somg[i][j][k] = simg[j][i][k];
						if (somg[i][j][k] > global_max)
							global_max = somg[i][j][k];
						if (somg[i][j][k] < global_min)
							global_min = somg[i][j][k];
					}
				}
			}
		} else if (strcmp (orient, "s") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++) {
						somg[i][j][k] = simg[k][i][j];
					}
				}
			}
		}
		break;

	case 16:
		fimg = f3tensor (1, idim3, 1, idim2, 1, idim1);
		if (fimg == NULL) {
			fprintf (stderr, "ERROR [anaflip]: malloc fimg\n");
			return (ERROR);
		}
		fprintf (stdout, "Reading %s\n", in_img);
		for (i = 1; i <= idim3; i++) {
			for (j = 1; j <= idim2; j++) {
				if ((fread (&fimg[i][j][1], sizeof (float), idim1, fd_hdr)) != idim1) {
					fprintf (stderr, "ERROR [anaflip]: Reading: %s\n", in_img);
					return (ERROR);
				}
			}
		}
		(void) fclose (fd_img);
		fomg = f3tensor (1, odim3, 1, odim2, 1, odim1);
		if (fomg == NULL) {
			fprintf (stderr, "ERROR [anaflip]: malloc fomg\n");
			return (ERROR);
		}
		global_max = 0;
		global_min = 32000;
		if (strcmp (orient, "t") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++) {
						fomg[i][j][k] = fimg[i][j][k];
						if (fomg[i][j][k] > global_max)
							global_max = fomg[i][j][k];
						if (fomg[i][j][k] < global_min)
							global_min = fomg[i][j][k];
					}
				}
			}
		} else if (strcmp (orient, "c") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++) {
						fomg[i][j][k] = fimg[j][i][k];
						if (fomg[i][j][k] > global_max)
							global_max = fomg[i][j][k];
						if (fomg[i][j][k] < global_min)
							global_min = fomg[i][j][k];
					}
				}
			}
		} else if (strcmp (orient, "s") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++) {
						fomg[i][j][k] = fimg[k][i][j];
					}
				}
			}
		}
		break;
	}


	fprintf (stdout, "Min,Max = %d, %d\n", global_min, global_max);

	if ((fd_img = fopen (out_img, "w")) == 0) {
		fprintf (stderr, "Unable to create ANALYZE image %s\n", out_img);
		return (ERROR);
	}
	fprintf (stdout, "Writing %s\n", out_img);

	switch (dtype) {
	case 2:
		crow = (char *) calloc (odim1, sizeof (char));
		if (crow == NULL) {
			fprintf (stderr, "ERROR [anaflip]: malloc char\n");
			return (ERROR);
		}
		if (strcmp (orient, "t") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++)
						crow[odim1 - k] = comg[i][j][k];
					if ((fwrite (crow, sizeof (char), odim1, fd_img)) != odim1) {
						fprintf (stderr, "ERROR [anaflip]: writing %s\n", out_img);
						return (ERROR);
					}
				}
			}
		} else if (strcmp (orient, "c") == 0) {
			for (j = 1; j <= odim2; j++)
				for (i = 1; i <= odim3; i++) {
					for (k = 1; k <= odim1; k++) {
						crow[k - 1] = comg[i][j][k];
						if ((fwrite (crow, sizeof (char), odim1, fd_img)) != odim1) {
							fprintf (stderr, "ERROR [anaflip]: writing %s\n", out_img);
							return (ERROR);
						}
					}
				}
		} else if (strcmp (orient, "s") == 0) {
			for (k = 1; k <= odim1; k++) {
				for (i = 1; i <= odim3; i++) {
					for (j = 1; j <= odim2; j++)
						crow[j - 1] = comg[i][j][k];
					if ((fwrite (crow, sizeof (char), odim2, fd_img)) != odim2) {
						fprintf (stderr, "ERROR [anaflip]: writing %s\n", out_img);
						return (ERROR);
					}
				}
			}
		}
		break;

	case 4:
		srow = (short *) calloc (odim1, sizeof (short));
		if (srow == NULL) {
			fprintf (stderr, "ERROR [anaflip]: malloc srow\n");
			return (ERROR);
		}
		if (strcmp (orient, "t") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++)
						srow[odim1 - k] = somg[i][j][k];
					if ((fwrite (srow, sizeof (short), odim1, fd_img)) != odim1) {
						fprintf (stderr, "ERROR [anaflip]: writing %s\n", out_img);
						return (ERROR);
					}
				}
			}
		} else if (strcmp (orient, "c") == 0) {
			for (j = 1; j <= odim2; j++)
				for (i = 1; i <= odim3; i++) {
					for (k = 1; k <= odim1; k++) {
						srow[k - 1] = somg[i][j][k];
						if ((fwrite (srow, sizeof (short), odim1, fd_img)) != odim1) {
							fprintf (stderr, "ERROR [anaflip]: writing %s\n", out_img);
							return (ERROR);
						}
					}
				}
		} else if (strcmp (orient, "s") == 0) {
			for (k = 1; k <= odim1; k++) {
				for (i = 1; i <= odim3; i++) {
					for (j = 1; j <= odim2; j++)
						srow[j - 1] = somg[i][j][k];
					if ((fwrite (srow, sizeof (short), odim2, fd_img)) != odim2) {
						fprintf (stderr, "ERROR [anaflip]: writing %s\n", out_img);
						return (ERROR);
					}
				}
			}
		}
		break;

	case 16:
		frow = (float *) calloc (odim1, sizeof (float));
		if (frow == NULL) {
			fprintf (stderr, "ERROR [anaflip]: malloc frow\n");
			return (ERROR);
		}
		if (strcmp (orient, "t") == 0) {
			for (i = 1; i <= odim3; i++) {
				for (j = 1; j <= odim2; j++) {
					for (k = 1; k <= odim1; k++)
						frow[odim1 - k] = fomg[i][j][k];
					if ((fwrite (frow, sizeof (float), odim1, fd_img)) != odim1) {
						fprintf (stderr, "ERROR [anaflip]: writing %s\n", out_img);
						return (ERROR);
					}
				}
			}
		} else if (strcmp (orient, "c") == 0) {
			for (j = 1; j <= odim2; j++)
				for (i = 1; i <= odim3; i++) {
					for (k = 1; k <= odim1; k++) {
						frow[k - 1] = fomg[i][j][k];
						if ((fwrite (frow, sizeof (float), odim1, fd_img)) != odim1) {
							fprintf (stderr, "ERROR [anaflip]: writing %s\n", out_img);
							return (ERROR);
						}
					}
				}
		} else if (strcmp (orient, "s") == 0) {
			for (k = 1; k <= odim1; k++) {
				for (i = 1; i <= odim3; i++) {
					for (j = 1; j <= odim2; j++)
						frow[j - 1] = fomg[i][j][k];
					if ((fwrite (frow, sizeof (float), odim2, fd_img)) != odim2) {
						fprintf (stderr, "ERROR [anaflip]: writing %s\n", out_img);
						return (ERROR);
					}
				}
			}
		}
		break;
	}

/*
 * Modify Analyze hdr file
 */

	if ((fd_hdr = fopen (out_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [anaflip]: creating ANALYZE header %s\n", out_hdr);
		return (ERROR);
	}
	hdr.dime.dim[1] = odim1;
	hdr.dime.dim[2] = odim2;
	hdr.dime.dim[3] = odim3;
	if (strcmp (orient, "c") == 0) {
		temp2 = hdr.dime.pixdim[2];
		temp3 = hdr.dime.pixdim[3];
		hdr.dime.pixdim[2] = temp3;
		hdr.dime.pixdim[3] = temp2;
		hdr.hist.orient = CORONAL;
	} else if (strcmp (orient, "s") == 0) {
		temp1 = hdr.dime.pixdim[1];
		temp2 = hdr.dime.pixdim[2];
		temp3 = hdr.dime.pixdim[3];
		hdr.dime.pixdim[1] = temp2;
		hdr.dime.pixdim[2] = temp3;
		hdr.dime.pixdim[3] = temp1;
		hdr.hist.orient = SAGITTAL;
	}
	if (dtype == 2) {
		hdr.dime.glmax = 0;
		hdr.dime.glmin = 255;
	} else {
		hdr.dime.glmax = global_max;
		hdr.dime.glmin = global_min;
	}

	(void) strcpy (hdr.hist.originator, "anaflip");
	(void) strncpy (hdr.hist.patient_id, version, 4);
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anaflip]: writing %s\n", out_hdr);
		return (ERROR);
	}
	fprintf (stdout, "Successful conversion to %s\n", out_img);
	switch (dtype) {
	case 2:
		free_c3tensor (cimg, 1, idim3, 1, idim2, 1, idim1);
		free_c3tensor (comg, 1, odim3, 1, odim2, 1, odim1);
		free (crow);
		break;
	case 4:
		free_s3tensor (simg, 1, idim3, 1, idim2, 1, idim1);
		free_s3tensor (somg, 1, odim3, 1, odim2, 1, odim1);
		free (srow);
		break;
	case 16:
		free_f3tensor (fimg, 1, idim3, 1, idim2, 1, idim1);
		free_f3tensor (fomg, 1, odim3, 1, odim2, 1, odim1);
		free (frow);
		break;
	}
	(void) fclose (fd_hdr);
	(void) fclose (fd_img);
	return (OK);
}
@


2.4
log
@*** empty log message ***
@
text
@d2 3
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaflip/RCS/anaflip.c,v 2.3 2008/08/07 20:03:33 tom Exp tom $";
d127 1
a127 1
	if (hdr.dime.dim[0] != 4) {
@


2.3
log
@flip 8-bit image
@
text
@d2 3
d27 1
a27 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaflip/RCS/anaflip.c,v 2.2 2008/07/01 15:10:39 tom Exp tom $";
d35 1
a35 1
#include <ANALYZE.h>				 /* dsr */
d45 1
a45 1
main (argc, argv)
d50 7
a56 7
	struct dsr      hdr;			 /* old ANALYZE header */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *in_hdr;			 /* input Analyze header filename  */
	char           *in_img;			 /* input Analyze image filename */
	char           *out_hdr;		 /* input Analyze header filename  */
	char           *out_img;		 /* input Analyze image filename */
d62 2
a63 2
	int             global_max;		 /* global maximum */
	int             global_min;		 /* global minimum */
d146 3
d308 1
a308 1
	case 8:
d461 1
a461 1
	case 8:
d556 1
a556 1
	case 8:
@


2.2
log
@added types char and float to short
@
text
@d2 3
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaflip/RCS/anaflip.c,v 2.1 2007/01/02 20:24:43 tom Exp tom $";
d524 7
a530 2
	hdr.dime.glmax = global_max;
	hdr.dime.glmin = global_min;
@


2.1
log
@fix bug
@
text
@d2 3
d16 1
a16 1
 *	Date:			Jul-97
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaflip/RCS/anaflip.c,v 2.0 2004/02/13 17:25:01 tom Exp tom $";
a58 2
	long            odim1, odim2, odim3;	 /* dimensions of oimg */
	long            ndim1, ndim2, ndim3;	 /* dimensions of nimg */
d62 3
a64 3
	short        ***oimg;			 /* intermediate image */
	short        ***nimg;			 /* output image */
	short          *row;			 /* single row of input image */
d66 10
d81 1
a81 1
		fprintf (stderr,"Usage: anaflip in_img in_hdr out_img out_hdr orientation\n");
d111 1
a111 1
		fprintf (stderr, "ERROR [anaflip]: Cannot open: %s\n", in_hdr);
d115 1
a115 1
		fprintf (stderr, "ERROR [anaflip]: Reading: %s\n", in_hdr);
d119 1
a119 1
		fprintf (stderr, "ERROR [anaflip]: Reading: %s\n", in_hdr);
d123 25
a147 2
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anaflip]: Reading: %s\n", in_hdr);
d151 3
a153 8
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anaflip]: Reading: %s\n", in_hdr);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	odim1 = hdr.dime.dim[1];
	odim2 = hdr.dime.dim[2];
	odim3 = hdr.dime.dim[3];
a155 26
/*
 *	Read the oimg and flip X, Y & Z from Analyze convention
 */

	if ((fd_img = fopen (in_img, "r")) == 0) {
		fprintf (stderr, "ERROR [anaflip]: Cannot open: %s\n", in_img);
		return (ERROR);
	}
	oimg = s3tensor (1, odim3, 1, odim2, 1, odim1);
	if (oimg == NULL) {
		fprintf (stderr, "ERROR [anaflip]: Cannot malloc img\n");
		return (ERROR);
	}
	fprintf (stdout, "Reading %s\n", in_img);

	for (i = 1; i <= odim3; i++) {
		for (j = 1; j <= odim2; j++) {
			if ((fread (&oimg[i][j][1], sizeof (short), odim1, fd_hdr)) != odim1) {
				fprintf (stderr, "ERROR [anaflip]: Reading: %s\n", in_img);
				return (ERROR);
			}
		}
	}
	(void) fclose (fd_img);


d157 3
a159 3
		ndim1 = odim1;
		ndim2 = odim2;
		ndim3 = odim3;
d161 3
a163 3
		ndim1 = odim1;
		ndim2 = odim3;
		ndim3 = odim2;
d165 3
a167 3
		ndim1 = odim2;
		ndim2 = odim3;
		ndim3 = odim1;
d172 1
a172 1
	fprintf (stdout, "Dimensions: %d %d %d\n", (int)ndim1, (int)ndim2, (int)ndim3);
d174 6
a179 3
	nimg = s3tensor (1, ndim3, 1, ndim2, 1, ndim1);
	if (nimg == NULL) {
		fprintf (stderr, "ERROR [anaflip]: Cannot malloc nimg\n");
d182 13
a194 11
	global_max = 0;
	global_min = 32000;
	if (strcmp (orient, "t") == 0) {
		for (i = 1; i <= ndim3; i++) {
			for (j = 1; j <= ndim2; j++) {
				for (k = 1; k <= ndim1; k++) {
					nimg[i][j][k] = oimg[i][j][k];
					if (nimg[i][j][k] > global_max)
						global_max = nimg[i][j][k];
					if (nimg[i][j][k] < global_min)
						global_min = nimg[i][j][k];
d198 18
a215 9
	} else if (strcmp (orient, "c") == 0) {
		for (i = 1; i <= ndim3; i++) {
			for (j = 1; j <= ndim2; j++) {
				for (k = 1; k <= ndim1; k++) {
					nimg[i][j][k] = oimg[j][i][k];
					if (nimg[i][j][k] > global_max)
						global_max = nimg[i][j][k];
					if (nimg[i][j][k] < global_min)
						global_min = nimg[i][j][k];
d218 20
d239 14
a252 5
	} else if (strcmp (orient, "s") == 0) {
		for (i = 1; i <= ndim3; i++) {
			for (j = 1; j <= ndim2; j++) {
				for (k = 1; k <= ndim1; k++) {
					nimg[i][j][k] = oimg[k][i][j];
d256 100
d357 2
a364 5
	row = (short *) calloc (ndim1, sizeof (short));
	if (row == NULL) {
		fprintf (stderr, "ERROR [anaflip]: Cannot malloc memory for row\n");
		return (ERROR);
	}
d366 17
a382 8
	if (strcmp (orient, "t") == 0) {
		for (i = 1; i <= ndim3; i++) {
			for (j = 1; j <= ndim2; j++) {
				for (k = 1; k <= ndim1; k++)
					row[ndim1 - k] = nimg[i][j][k];
				if ((fwrite (row, sizeof (short), ndim1, fd_img)) != ndim1) {
					fprintf (stderr, "Error writing to: %s\n", out_img);
					return (ERROR);
d385 22
d408 17
a424 8
	} else if (strcmp (orient, "c") == 0) {
		for (j = 1; j <= ndim2; j++) 
			for (i = 1; i <= ndim3; i++) {
				for (k = 1; k <= ndim1; k++) {
					row[k - 1] = nimg[i][j][k];
				if ((fwrite (row, sizeof (short), ndim1, fd_img)) != ndim1) {
					fprintf (stderr, "Error writing to: %s\n", out_img);
					return (ERROR);
d427 22
d450 17
a466 8
	} else if (strcmp (orient, "s") == 0) {
		for (k = 1; k <= ndim1; k++) {
			for (i = 1; i <= ndim3; i++) {
				for (j = 1; j <= ndim2; j++) 
					row[j - 1] = nimg[i][j][k];
				if ((fwrite (row, sizeof (short), ndim2, fd_img)) != ndim2) {
					fprintf (stderr, "Error writing to: %s\n", out_img);
					return (ERROR);
d469 22
d492 1
d500 1
a500 1
		fprintf (stderr, "Unable to create ANALYZE header %s\n", out_hdr);
d503 3
a505 3
	hdr.dime.dim[1] = ndim1;
	hdr.dime.dim[2] = ndim2;
	hdr.dime.dim[3] = ndim3;
d527 1
a527 1
		fprintf (stderr, "Error writing to: %s\n", out_hdr);
d531 17
a547 3
	free_s3tensor (oimg, 1, odim3, 1, odim2, 1, odim1);
	free_s3tensor (nimg, 1, ndim3, 1, ndim2, 1, ndim1);
	free (row);
@


2.0
log
@Feb 2004
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaflip/RCS/anaflip.c,v 1.2 2002/07/03 15:38:20 tom Exp $";
d217 1
a217 1
	row = (short *) calloc (ndim3, sizeof (short));
d226 1
a226 1
				for (k = 1; k <= ndim1; k++) 
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaflip/RCS/anaflip.c,v 1.1 1999/12/30 17:13:51 tom Exp tom $";
d79 4
a82 2
	(void) strncpy (version, ptr, 4);
	ptr = strstr (ptr, " ");
d85 2
a86 1
	(void) strncpy (program_date, ptr, 10);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaflip/RCS/anaflip.c,v 2.6 1997/05/20 14:41:49 tom Exp $";
d157 1
a157 1
		fprintf (stderr, "ERROR [anaflip]: Orientation should be 'c' or 's'\n");
d160 1
d214 9
a222 7
	for (i = 1; i <= ndim1; i++) {
		for (j = 1; j <= ndim2; j++) {
			for (k = 1; k <= ndim3; k++)
				row[k - 1] = nimg[i][j][k];
			if ((fwrite (row, sizeof (short), ndim3, fd_img)) != ndim3) {
				fprintf (stderr, "Error writing to: %s\n", out_img);
				return (ERROR);
d225 22
@
