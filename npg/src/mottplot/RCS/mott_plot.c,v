head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.02.17.14.22.45;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.27.16.46.12;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.01.27.17.33.50;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Feb 2004
@
text
@/*  ================================================================================
 *  File Name:      polar_image.c
 *  Date:           Jan 1999
 *  Author:         Tom Videen
 *  Description:    Create proportional polar image
 *					(a la Mott et al, 1985, Br J Radiol 58:876)
 *  =============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/mottplot/RCS/mott_plot.c,v 1.2 2002/11/27 16:46:12 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <matrixlib.h>
#include <myvalues.h>

int             polar_image (img, pol, min, max, dim1, dim2, dim3, pdim1, pdim2)
	short        ***img;			 /* original image */
	short        ***pol;			 /* polar image */
	short           min, max;		 /* range to identify */
	long            dim1, dim2, dim3;	 /* dimensions of img */
	long            pdim1, pdim2;		 /* dimensions of pol */
{
	short         **set;			 /* pixels included */
	float          *rim;			 /* boundary distance */
	short           more;
	long            i, j, pln;
	short           ang, r;			 /* 0 deg is left; increases CW */
	long            npix;
	long            xloc, yloc;
	long            xcm, ycm;		 /* geometric center of slice */
	float           x, y, d;
	float           rad_per_deg = 3.14159 / 180;

	if ((set = smatrix (1, dim2, 1, dim1)) == NULL) {
		fprintf (stderr, "ERROR [polar_image]: Cannot malloc set\n");
		return (ERROR);
	}
	if (NULL == (rim = (float *) calloc (pdim2 + 1, sizeof (float)))) {
		fprintf (stderr, "ERROR [polar_image]: Cannot calloc rim\n");
		return (ERROR);
	}
	for (pln = 1; pln <= dim3; pln++) {
		for (ang = 1; ang <= pdim1; ang++) {
			for (r = 1; r <= pdim2; r++)
				pol[pln][r][ang] = 0;
		}

/* Identify pixels inside the skull */

		npix = 0;
		xloc = 0;
		yloc = 0;
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				if (img[pln][j][i] >= min && img[pln][j][i] <= max) {
					set[j][i] = 1;
					npix++;
					xloc += i;
					yloc += j;
				} else
					set[j][i] = 0;
			}
		}

		if (npix > 0) {

/*	Geometric center of this slice */

			x = (float) xloc / (float) npix;
			y = (float) yloc / (float) npix;
			xcm = (long) (x + 0.5);
			ycm = (long) (y + 0.5);

/*	Find skull boundary (rim) at each angle */

			for (ang = 1; ang <= pdim1; ang++) {
				rim[ang] = 0;
				i = 0;
				more = 1;
				while (more) {
					i++;
					x = (float) -i * cos (rad_per_deg * ang);
					y = (float) -i * sin (rad_per_deg * ang);
					xloc = (short) (x + xcm);
					yloc = (short) (y + ycm);
					if (xloc < 1 || xloc > dim1 || yloc < 1 || yloc > dim2)
						more = 0;
					else if (set[yloc][xloc])
						rim[ang] = sqrt (pow (x, 2.) + pow (y, 2.));
				}
			}

/*	Compute S/Rs (Mott et al, 1985, Br J Radiol 58:876) */

			for (ang = 1; ang <= pdim1; ang++) {
				for (r = 1; r <= pdim2; r++) {
					d = rim[ang] * (float) r / 100;
					x = xcm - d * cos (rad_per_deg * ang);
					y = ycm - d * sin (rad_per_deg * ang);
					xloc = (short) (x + 0.5);
					yloc = (short) (y + 0.5);
					if (xloc > dim1)
						xloc = dim1;
					if (yloc > dim2)
						yloc = dim2;
					if (set[yloc][xloc] == 1)
						pol[pln][r][ang] = img[pln][yloc][xloc];
				}
			}

		}
	}
	free_smatrix (set, 1, dim2, 1, dim1);
	free (rim);
	return (OK);
}
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
 *  Date:           Jan-99
d9 1
d11 1
a11 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/mottplot/RCS/mott_plot.c,v 1.1 1999/01/27 17:33:50 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
/*					(a la Mott et al, 1985, Br J Radiol 58:876)
d10 1
a10 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/maskor/RCS/polar_image.c,v 1.1 1999/01/15 14:53:27 tom Exp tom $";
d14 1
d92 1
a92 1
						rim[ang] = sqrt (pow (x, 2) + pow (y, 2));
d117 1
a117 1
	free_smatrix (rim, 0, pdim2, 1, 2);
@
