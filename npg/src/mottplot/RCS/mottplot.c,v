head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.02.17.14.22.45;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.27.16.46.12;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.01.27.17.33.50;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Feb 2004
@
text
@/* $Log: mottplot.c,v $
 * Revision 1.2  2002/11/27  16:46:12  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/01/27  17:33:50  tom
 * Initial revision
 */
/*	===============================================================================
 *	Module:			polarimg.c
 *	Date:			Jan 1999
 *	Author:			Tom Videen
 *	Description:	Create polar image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/mottplot/RCS/mottplot.c,v 1.2 2002/11/27 16:46:12 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <image.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <matrixlib.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			polarimg
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	int             polar_image ();
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	FILE           *datfile;		 /* file for data points */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2, *fname; /* output files */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            pdim1, pdim2, pdim3; /* dimensions of polar */
	long			num, sum, mean;
	long            i, j, k;
	short           tmp;
	short           min, max;		 /* include all <= or >= these pixel values */
	short        ***img;			 /* image */
	short        ***pol;			 /* polar image */
	short         **dat;			 /* data */
	short          *row;			 /* single row of input image */

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 8) {
		printf ("Usage: polarimg img1 hdr1 img2 hdr2 out min max\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	fname = argv[5];
	min = atoi (argv[6]);
	max = atoi (argv[7]);

/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [polarimg]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [polarimg]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [polarimg]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [polarimg]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [polarimg]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

/*
 *	Read img
 */

	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [polarimg]: Cannot open: %s\n", img1);
		return (ERROR);
	}
    if ((img = s3tensor (1, dim3, 1, dim2, 1, dim1)) == NULL) {
        fprintf (stderr, "ERROR [polarimg]: Cannot calloc img\n");
        return (ERROR);
    }
	if (NULL == (row = (short *) calloc (dim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [polarimg]: Cannot calloc memory for row\n");
		return (ERROR);
	}
	for (i = dim3; i > 0; i--) {
		for (j = dim2; j > 0; j--) {
			(void) fread (row, dim1 * 2, 1, fd_img);
			for (k = 1; k <= dim1; k++)
				img[i][j][dim1 - (k - 1)] = row[k - 1];
		}
	}
	(void) fclose (fd_img);
	free (row);

	pdim1 = 360+20;
	pdim2 = 100;
	pdim3 = dim3;
	if ((pol = s3tensor (1, pdim3, 1, pdim2, 1, pdim1)) == NULL) {
		fprintf (stderr, "ERROR [polarimg]: Cannot calloc pol\n");
		return (ERROR);
	}
	if ((polar_image (img, pol, min, max, dim1, dim2, dim3, pdim1-20, pdim2)) == ERROR) {
		fprintf (stderr, "ERROR [polarimg]: in polar_image\n");
		return (ERROR);
	}

/*
 * Write to output file
 */

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [polarimg]: Unable to create ANALYZE header %s\n", hdr2);
		return (ERROR);
	}
	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [polarimg]: Unable to create ANALYZE image %s\n", img2);
		return (ERROR);
	}
	if (NULL == (row = (short *) calloc (pdim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [polarimg]: Cannot calloc memory for row\n");
		return (ERROR);
	}
	if ((datfile = fopen (fname, "w")) == 0) {
		fprintf (stderr, "ERROR [polarimg]: Unable to create %s\n", fname);
		return (ERROR);
	}
    if ((dat = smatrix (1, pdim3, 1, pdim2)) == NULL) {
        fprintf (stderr, "ERROR [polarimg]: Cannot malloc dat\n");
        return (ERROR);
    }

	for (i = pdim3; i > 0; i--) {
		for (j = pdim2; j > 0; j--) {
			sum = 0;
			num = 0;
			for (k = 1; k <= pdim1-20; k++) {
				tmp = pol[i][j][k];
				row[k-1] = tmp;
				if (tmp > 0) {
					sum += tmp;
					num++;
				}
			}
			if (num > 0)
				mean = sum / num;
			else
				mean = 0;
			for (k = pdim1-10; k <= pdim1; k++)
				row[k-1] = mean;
			(void) fwrite (row, pdim1 * 2, 1, fd_img);
			dat[i][j] = mean;
		}
	}
	free (row);

	hdr.dime.dim[1] = pdim1;
	hdr.dime.dim[2] = pdim2;
	hdr.dime.dim[3] = pdim3;
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [polarimg]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}

	for (j = 1; j <= pdim2; j++) {
		for (i = 1; i <= pdim3; i++)
			fprintf (datfile, "%4i", dat[i][j]);
		fprintf (datfile, "\n");
	}
	(void) fclose (fd_hdr);
	(void) fclose (fd_img);
	(void) fclose (datfile);
/*
 *	Free & Exit
 */

	printf ("Converted: %s to %s\n", img1, img2);
	free_s3tensor (img, 1, dim3, 1, dim2, 1, dim1);
	free_s3tensor (pol, 1, pdim3, 1, pdim2, 1, pdim1);
	free_smatrix (dat, 1, pdim3, 1, pdim2);
	return (OK);
}
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d10 1
a10 1
 *	Date:			Jan-99
d15 1
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/mottplot/RCS/mottplot.c,v 1.1 1999/01/27 17:33:50 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/polarimg/RCS/polarimg.c,v 1.1 1999/01/15 14:53:27 tom Exp tom $";
d17 1
a17 1
#include <string.h>
a19 1
#include <libimage.h>
d98 1
a98 1
	fclose (fd_hdr);
d118 1
a118 1
			fread (row, dim1 * 2, 1, fd_img);
d123 1
a123 1
	fclose (fd_img);
d181 1
a181 1
			fwrite (row, pdim1 * 2, 1, fd_img);
d200 3
a202 3
	fclose (fd_hdr);
	fclose (fd_img);
	fclose (datfile);
@
