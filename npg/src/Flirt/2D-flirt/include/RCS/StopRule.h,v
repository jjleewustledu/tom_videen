head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2008.05.06.18.34.02;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#ifndef _CLASS_STOPRULE_H_
#define _CLASS_STOPRULE_H_

#include <stdio.h>

#include "DistanceMeasure.h"
#include "Smoother.h"
#include "Array.h"
#include "Displacement.h"
#include "iostream.h"

namespace flirt {

/** \brief Check for terminition,  */
class StopRule {
  DistanceMeasure& D;
  Smoother&        S;
  int              maxIter;

 public:

  /** \brief Constructor */
  StopRule(DistanceMeasure& DM,
       Smoother&        SM,
           int MaxIter)
    : D(DM), S(SM), maxIter(MaxIter) {
      //printf("StopRule (%p) :: Constructor\n",this);
    }

  virtual void setMaxIter(int mi){
      maxIter = mi;
  }


  virtual ~StopRule() {
      //printf("StopRule (%p) :: Destructor\n",this);
  }

  /** \brief stop iteration if maximum number of steps is reached */
  virtual bool stopIteration(Displacement& u, int iter)
  {
      if (iter >= maxIter){
          cout << "maximum number of iteration steps reached" << endl;
          return 1; 
      } else{
          return 0;
      }
  }


};


}

#endif
@
