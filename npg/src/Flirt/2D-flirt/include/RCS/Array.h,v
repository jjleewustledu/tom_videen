head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2008.05.06.18.34.02;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#ifndef _CLASS_ARRAY_H_
#define _CLASS_ARRAY_H_

#include <stdio.h>
#include "flirt.h"
namespace flirt {
/** \file Array.h
\brief Definition of Array Class
\author Stefan Heldmann, Nils Papenberg
\date 28/04/2005
*/
class Array;
bool haveSameSize(const Array& A1, const Array& A2);

/**
 * Basic Datatype
 */
class Array {
public:
    /**
     * Defaultconstructor
     */

    Array()
      : dims(NULL),
        ndims(0),
        nelem(0),
        data(NULL) {
      //printf("Constructor Array\n\n");
    };

     Array(int, int);

     /**
     * brief init method for allocating memory
     */
     //MeVis.MK: added init methods
     void init(int, int);
     void init(int, int, int);
     void init(const int*, int);

     Array(int, int, int);

     Array(int, int, int, int);

     Array(const int*, int);

    /**
     * Copyconstructor
     */
    Array(const Array&);

    /**
     * Destructor
     */
    virtual ~Array() {
      //printf("Destructor Array\n\n");
      if(dims != NULL) {
    delete[] dims;

    dims = NULL;

    delete[] data;
      }
    };



    /**
     * \brief get data[i]
     * \date 28/04/2005
     */
    inline double& operator()(int i) { return data[i]; };
    /**
     * \brief get const data[i]
     */
    inline double operator()(int i) const { return data[i]; };
    /**
     * \brief get data[i]
     * \date 28/04/2005
     */
    inline double& operator[](int i) { return data[i]; };

    /**
     * \brief get const data[i]
     */
    inline double operator[](int i) const { return data[i]; };

    /**
     * \brief returns Number of Dims: ndims
     */
    inline int getNumberOfDimensions() const { return ndims; };

    /**
     * \brief returns const Pointer of Dimensions
     */
    inline const int* getDimensions() const { return dims; }

    /**
     * \brief returns pointer of data as an array
     */
    inline double* getData() { return data; };

    /**
     * \brief returns pointer of data as double*
     */
    inline const double* getData() const { return data; };

    /**
     * \brief returns Number of Elements
     */
    inline int getNumberOfElements() const {
        return nelem;
    };

    virtual void printToFile(FILE* file) const;
    virtual void print() const;
    virtual void printDimensions() const;


protected:

    /**
     * \brief Pointer of Dimensions
     */
    int* dims;

    /**
     * \brief Number of Dimensions
     */
    int  ndims;

    /**
     * \brief Number of Elements
     */
    int nelem;

    /**
     * \brief Pointer of ArrayData
     */
    double* data;

};

/**
 * \brief Class for two dimensional scalar data or one dimensional vector data
 * \author Nils Papenberg
 * \data 28/04/2005
 */
class Array2D : public virtual Array {

public:
    /**
     * \brief Constructor
     * constructs Array2D of size m1 x m2
     */
    Array2D();

    Array2D( int, int);

    Array2D( const int*);

    /**
     * \brief Copyconstructor
     */
    Array2D( const Array2D&);

    /**
     * \brief Destructor
     */
    virtual ~Array2D() {
      //printf("Destructor Array2D\n\n");
      if (A != NULL) {
    deleteTreeStructure2D(A);
    A = NULL;

      }
    };

    /**
     * brief init method for allocating memory
     */
    void init(int, int);

    /**
     * \brief overloading []-Operator
     * allows: A[i][j] returns Element at (i,j)
     */
    inline virtual array1D operator[](int i) { return A[i]; };

    /**
     * \brief overloading []-Operator for const Array2D
     * allows: A[i][j] returns Element at (i,j)
     */
    inline virtual const array1D operator[](int i) const {return A[i]; };

    /**
     * \brief returns const Pointer of Array A
     */
    inline virtual const array2D getArray() const {return A;};

    /**
     * \brief returns Pointer of Array A
     */
    inline virtual array2D getArray()  {return A;};

    /**
     * \brief prints Array2D to a given File
     */
    virtual void printToFile(FILE* file) const;


protected:
    /**
     * \brief twodimensional Array Data
     */
    array2D A;
};

/**
 * \brief Class for three dimensional scalar data or two dimensional vector data
 * \author Nils Papenberg
 * \data 28/04/2005
 */
class Array3D : public virtual Array {

public:
    /**
     * \brief Constructor
     * constructs Array3D of size m1 x m2 x m3
     */

    Array3D():A(NULL) {
      //printf("Constructor Array3D()\n\n");
    };

    Array3D(int, int, int);

    /**
     * \brief Copyconstruktor
     */
    Array3D(const Array3D&);

    /**
     * \brief Destructor
     */
    virtual ~Array3D() {
      //printf("Destructor Array3D()\n\n");
        if (A != NULL){
          deleteTreeStructure3D(A);
          A = NULL;
        }
    };

    //MeVis.MK: added init
    void init(int m1, int m2, int m3);

    /**
     * \brief overloading []-Operator
     * allows: A[i][j][k] returns Element at (i,j,k)
     */
    inline virtual array2D operator[](int i) { return A[i]; };

    /**
     * \brief overloading []-Operator for const Array3D
     * allows: A[i][j][k] returns Element at (i,j,k)
     */
    inline virtual const array2D operator[](int i) const {return A[i]; };

    /**
     * \brief returns const Pointer of Array A
     */
    inline virtual const array3D getArray() const {return A;};

    /**
     * \brief returns  Pointer of Array A
     */
    inline virtual  array3D getArray()  {return A;};


    /**
     * \brief prints Array3D to a given File
     */
    void printToFile(FILE* file) const;

protected:
    /**
     * \brief threedimensional Array Data
     */
        array3D A;
};

/**
 * \brief Class for four dimensional scalar data or three dimensional vector data
 * \author Nils Papenberg
 * \data 06/12/2005
 */
class Array4D : public virtual Array {

public:
    /**
     * \brief Constructor
     * constructs Array3D of size m1 x m2 x m3
     */

    Array4D():A(NULL) {
      //printf("Constructor Array3D()\n\n");
    };

    Array4D(int, int, int, int);

    /**
     * \brief Copyconstruktor
     */
    Array4D(const Array4D&);

    /**
     * \brief Destructor
     */
    virtual ~Array4D() {
      //printf("Destructor Array4D()\n\n");
        if (A != NULL){
          deleteArray4D(A);
          A = NULL;
        }
    };


    /**
     * \brief overloading []-Operator
     * allows: A[i][j][k][l] returns Element at (i,j,k,l)
     */
    inline virtual array3D operator[](int i) { return A[i]; };

    /**
     * \brief overloading []-Operator for const Array4D
     * allows: A[i][j][k][l] returns Element at (i,j,k,l)
     */
    inline virtual const array3D operator[](int i) const {return A[i]; };

    /**
     * \brief returns const Pointer of Array A
     */
    inline virtual const array4D getArray() const {return A;};

    /**
     * \brief returns  Pointer of Array A
     */
    inline virtual  array4D getArray()  {return A;};


    /**
     * \brief prints Array3D to a given File
     */
    void printToFile(FILE* file) const;

protected:
    /**
     * \brief threedimensional Array Data
     */
        array4D A;
};

} // namespace
#endif
@
