head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2008.05.06.18.34.02;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#ifndef _CURVATURE_H_
#define _CURVATURE_H_

#include "fftw3.h"
#include "defs.h" /* required for boundary_t */

/** \file curvature.h 
    \brief Low-level routiones for curvature registration based on FFTW 
*/


/** \brief General plan for curvature solver. 
    Holds worspace and variables for 2 and 3 dimensional transforms
    \author Stefan Heldman
    \date 19/04/2005
*/ 
typedef struct {
  fftw_plan forward;     /**< FFTW-PLAN for forward transformation (DCT2 for Neumann-BC, DST2 for Dirichlet-Null BC) */
  fftw_plan backward;    /**< FFTW-PLAN for backward transformation (DCT3 for Neumann-BC, DST3 for Dirichlet-Null BC) */
  double fftw_normfac;   /**< normaiziation constant = 2^d * length (fftw compute un.normaized transformations */
  double* in;            /**< aligned input array for fftw */
  double* out;           /**< aligned output array for fftw */
  int dim;               /**< number of dimensions (2 or 3)  */
  int m1;                /**< number of elements in the 1st dimension */
  int m2;                /**< number of elements in the 2nd dimension */
  int m3;                /**< number of elements in the 3rd dimension  */
  int m;                 /**< number of elements, m=m1*m2*m3  */
  double h1;             /**< voxel/pixel size in the 1st dimension  */
  double h2;             /**< voxel/pixel size in the 2nd dimension  */
  double h3;             /**< voxel/pixel size in the 3rd dimension  */
  double* lambda1;       /**< eigenvalues of the laplace operator  */
  double* lambda2;       /**< eigenvalues of the laplace operator  */
  double* lambda3;       /**< eigenvalues of the laplace operator  */
  boundary_t bc;         /**< boundary condition */
  gridsymmetry_t gs;     /**< grid symmetry */
} deltaPlan_t;

/** General plan for comutations with the laplace operator. 
    Holds worspace and variables for 2 and 3 dimensional transforms
    \author Stefan Heldman
    \date 19/04/2005
*/ 
typedef deltaPlan_t* deltaPlan;

/** prints a deltaPlan to on stdout 
    \author Stefan Heldman
    \date 19/04/2005
 */
void printDeltaPlan(deltaPlan p);

/** creates and initializes the delta for 2 dimensonal transforms
    \author Stefan Heldman
    \date 19/04/2005
    @@param m1 First dimensions of an 2d linear array stored in 
    \b colum-major-order. 
    @@param m2 second dimensions of an 2d linear array stored in 
    \b colum-major-order. 
    @@param tau timestep parameter for solving. 
    @@param alpha regularizaion  parameter 
    
    \note Column-major order means the elements of a m1-by-m2 array A with 
    \p m1 columns and 
    \p m2 rows are accesed by A(i,j) = A[i+m1*j]
*/
deltaPlan createDeltaPlan2D(int m1, 
			    int m2,
			    double h1,
			    double h2,
			    boundary_t bc,
			    gridsymmetry_t gs);

/** creates and initializes the delta for 3 dimensonal transforms
    \author Stefan Heldman
    \date 19/04/2005

    @@param m1 First dimensions of an 3d linear array stored in \b colum-major-order. 
    @@param m2 second dimensions of an 2d linear array stored in \b colum-major-order. 
    @@param m3 second dimensions of an 2d linear array stored in \b colum-major-order. 
    @@param tau timestep parameter for solving. 
    @@param alpha regularizaion  parameter 
    
    \note Column-major order means the elements of a m1-by-m2-by-m3 array A with \p m1 columns and 
    \p m2 rows and \p m3 slices are accesed by A(i,j,k) = A[i+m1*(j+m2*k)]
*/
deltaPlan createDeltaPlan3D(int m1, 
			    int m2,
			    int m3,
			    double h1,
			    double h2,
			    double h3,
			    boundary_t bc,
			    gridsymmetry_t gs);

/** frees all the memory allocated by the deltaPlan
    \author Stefan Heldman
    \date 19/04/2005
 */ 
void deleteDeltaPlan(deltaPlan plan);
 


/** Solve the LS (a+b*Delta)*out = in for out
    \author Stefan Heldman
    \date 19/04/2005
 */ 
void solveDelta(deltaPlan plan, 
		double a,
		double b,
		double* in, 
		double* out); 

/** compute (a+b*Delta)*in = out for out
    \author Stefan Heldman
    \date 19/04/2005
 */ 
void evalDelta(deltaPlan plan, 
	       double a,
	       double b,
	       double* u, 
	       double* Au); 


/** Solve the LS (a+b*Delta^2)*out = in for out
    \author Stefan Heldman
    \date 19/04/2005
 */ 
void solveCurvature(deltaPlan plan, 
		double a,
		double b,
		double* in, 
		double* out); 

/** compute (a+b*Delta^2)*in = out for out
    \author Stefan Heldman
    \date 19/04/2005
 */ 
void evalCurvature(deltaPlan plan, 
	       double a,
	       double b,
	       double* u, 
	       double* Au); 

#endif
@
