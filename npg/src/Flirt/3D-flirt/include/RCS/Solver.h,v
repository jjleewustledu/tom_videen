head	1.2;
access;
symbols;
locks
	tom:1.2; strict;
comment	@ * @;


1.2
date	2008.05.13.13.54.33;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.07.14.32.33;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#ifndef _CLASS_SOLVER_H_
#define _CLASS_SOLVER_H_

#include <stdio.h>
#include <flirt.h>
#include <Displacement.h>

namespace       flirt {

	//--------------------------------------------------------------
	// Abstract class.Must be inherited by any solver.
	// Author Stefan Heldmann, Nils Papenberg
	//--------------------------------------------------------------
	class Solver {
		public:
		virtual void    solve () = 0;
		virtual         Array & getAns () = 0;
		virtual         Array & getRhs () = 0;
	};

	//--------------------------------------------------------------
	// Abstract class for fix point type schemes.
	// Must be inherited by any solver.
	// Solves the LS \ f$ \ alpha A u = f \ f$
	// Author Stefan Heldmann, Nils Papenberg
	//--------------------------------------------------------------
	class FPSolver:public Solver {
		public:
		FPSolver ()
			:alpha (-1.0) {
			};
		~FPSolver () {
		};
		virtual void    setAlpha (double a) {
			alpha = a;
		};
		double          getAlpha () const {
			return alpha;
		};

		protected:
		double          alpha;
	};

	//--------------------------------------------------------------
	//FPSolverElasticFFT3D
	//--------------------------------------------------------------
	//Solves the equation
	// \f$ \ alpha A u = f \ f$ with
	// \f$ A = -(\mu\Delta+(\lambda+\mu)\nabla\mathrm{div}) \f$
	// Author Konstantin Ens
	// Date 24 - 04 - 2006
	//--------------------------------------------------------------
	class FPSolverElasticFFT3D:public FPSolver {
		public:
		FPSolverElasticFFT3D ();
		FPSolverElasticFFT3D (const Displacement3D &, double, double, double);
		//~FPSolverElasticFFT3D ();

		virtual void    setMu (double m) {
			mu = m;
		};
		double          getMu () const {
			return mu;
		};

		virtual void    setLambda (double l) {
			lambda = l;
		};
		double          getLambda () const {
			return lambda;
		};

		virtual void    setParameter (double _alpha, double _mu, double _lambda) {
			alpha = _alpha;
			mu = _mu;
			lambda = _lambda;
		};

		virtual void    solve ();
		virtual         Array & getAns ();
		virtual         Array & getRhs ();

		protected:
		double          mu;
		double          lambda;
		Displacement3D  ans;
		Displacement3D  rhs;
		elasticPlan3D   plan;
		boundary_t      bc;

	};
}
#endif
@


1.1
log
@Initial revision
@
text
@d5 2
a6 2
#include "flirt.h"
#include "Displacement.h"
d8 1
a8 1
namespace flirt {
d10 10
a19 10
/**   
 * Abstract class. Must be inherited by any solver.
 * \author Stefan Heldmann, Nils Papenberg
 */
class Solver {
public:
	virtual void   solve()  = 0;
	virtual Array& getAns() = 0;
	virtual Array& getRhs() = 0;	
};
d21 19
a39 10
// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------
d41 3
d45 14
a58 20
/**   
 * Abstract class for fix point type schemes.
 * Must be inherited by any solver.
 * Solves the LS \f$ \alpha A u = f \f$ 
 * \author Stefan Heldmann, Nils Papenberg
 */
class FPSolver : public Solver {
public:
	FPSolver() : alpha(-1.0) {};
	~FPSolver() {};
	virtual void setAlpha(double a) { alpha = a; };
	double       getAlpha() const { return alpha; };
	
protected:
        double alpha;
};
//============================
// FPSolverElasticFFT3D
//============================
// --------------------------------------------------------------------
d60 6
a65 26
/**   
 * Solves the equation
 * \f$ \alpha A u = f \f$ with 
 * \f$ A = -(\mu\Delta+(\lambda+\mu)\nabla\mathrm{div}) \f$ 
 * \author Konstantin Ens
 * \date 24-04-2006
 */
class FPSolverElasticFFT3D : public FPSolver {
public:
	FPSolverElasticFFT3D();
	FPSolverElasticFFT3D( const Displacement3D&, double, double, double);
	~FPSolverElasticFFT3D();
	
	
	virtual void setMu(double m) { mu = m; };
	double       getMu() const { return mu; };
	
	virtual void setLambda(double l) { lambda = l; };
	double       getLambda() const { return lambda; };
	
	
	virtual void setParameter(double _alpha, double _mu, double _lambda) {
		alpha  = _alpha;
		mu     = _mu;
		lambda = _lambda;
	};
d67 6
a72 3
	virtual void solve();
	virtual Array& getAns();
	virtual Array& getRhs();
d74 5
a78 9
protected:
	double mu;
	double lambda;
	Displacement3D ans;
	Displacement3D rhs;
	elasticPlan3D plan;
	boundary_t bc;
	
};
d80 3
a82 5
// --------------------------------------------------------------------
//============================
// Ende des FPSolverElasticFFT3D
//============================
// --------------------------------------------------------------------
d84 9
a93 1

@
