head	1.2;
access;
symbols;
locks
	tom:1.2; strict;
comment	@ * @;


1.2
date	2008.05.13.13.54.33;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.07.14.32.33;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#ifndef _CLASS_DISPLACEMENT_H_
#define _CLASS_DISPLACEMENT_H_

/*	Authors:	Stefan Heldmann, Nils Papenberg
 *	Date:		28/04/2005
 */

#include "Array.h"

namespace       flirt {

	class           Displacement;
	void            swapDisplacements (Displacement & U1, Displacement & U2);

/* Abstract Class for Displacements u = (u1, u2, ..., ud)
 * Author Nils Papenberg, Stefan Heldmann
 */
	class           Displacement:public virtual Array {
		public:
		Displacement ();
		Displacement (const double *);
		Displacement (const Displacement &);
		virtual ~ Displacement ();

		/* returns Voxelsize  */
		virtual const double *getVoxelSize () const;

		/* friend method to swap displacement U1 with displacement U2 */
		friend void     swapDisplacements (Displacement & U1, Displacement & U2);

		protected:
		double         *h;
	};

/* Class for twodimensional Displacements U = (U1, U2)
 */
	class           Displacement2D:public Displacement, public Array3D {

		public:

		/* Constructor  */

		Displacement2D ();
		Displacement2D (int, int, double, double);
		Displacement2D (const int *_dims, double h1, double h2);
		Displacement2D (const int *, const double *);

		/* Copyconstructor  */

		Displacement2D (const Displacement2D &);

		/* Destructor */

		~Displacement2D ();

	};

/* Class for threedimensional Displacements U = (U1, U2)	*/

	class           Displacement3D:public Displacement, public Array4D {

		public:

		/* Constructor */

		Displacement3D ();
		Displacement3D (int, int, int, double, double, double);
		Displacement3D (const int *_dims, double h1, double h2, double h3);
		Displacement3D (const int *, const double *);

		/* Copyconstructor */

		Displacement3D (const Displacement3D &);

		/* Destructor */

		~Displacement3D ();

	};

}

#endif
@


1.1
log
@Initial revision
@
text
@d4 3
a7 4
/** \file Displacement.h
\date 28/04/2005
\author Stefan Heldmann, Nils Papenberg
*/
d10 1
a10 1
namespace flirt {
d12 2
a13 1
class Displacement;
d15 9
a23 1
void swapDisplacements( Displacement &U1, Displacement &U2);
d25 11
a35 3
/** 
 * \brief Abstract Class for Displacements u = (u1, u2, ..., ud)
 * \author Nils Papenberg, Stefan Heldmann
d37 1
a37 3
class Displacement : public virtual Array  {
public:
    Displacement();
d39 1
a39 1
    Displacement( const double*);
d41 1
a41 1
    Displacement( const Displacement&);
d43 4
a46 6
    virtual ~Displacement();
  
  /** 
   * \brief returns Voxelsize 
   */
  virtual const double* getVoxelSize() const;
d48 1
a48 8
  /** 
   * \brief friend method to swap displacement U1 with displacement U2 
   */
  friend void swapDisplacements(Displacement &U1, Displacement &U2);
  
 protected:
  double *h;
};
d50 1
a50 10
/** 
 * \brief Class for twodimensional Displacements U = (U1, U2)
 */
class Displacement2D : public Displacement, public Array3D {
	
public:
    /** 
     * \brief Constructor 
     */
    Displacement2D();
d52 1
a52 1
    Displacement2D( int, int, double, double);
d54 1
a54 1
    Displacement2D(const int* _dims, double h1, double h2);
d56 1
a56 1
    Displacement2D(const int*, const double*);
d58 1
a58 4
    /** 
     * \brief Copyconstructor 
     */
    Displacement2D( const Displacement2D&);    
d60 1
a60 6
    /** 
     * \brief Destructor 
     */
    ~Displacement2D();
	
};
d62 1
a62 10
/** 
 * \brief Class for threedimensional Displacements U = (U1, U2)
 */
class Displacement3D : public Displacement, public Array4D {
	
public:
    /** 
     * \brief Constructor 
     */
    Displacement3D();
d64 1
a64 1
    Displacement3D( int, int, int, double, double, double);
d66 4
a69 1
    Displacement3D(const int* _dims, double h1, double h2, double h3);
d71 1
a71 1
    Displacement3D(const int*, const double*);
d73 1
a73 4
    /** 
     * \brief Copyconstructor 
     */
    Displacement3D( const Displacement3D&);    
d75 1
a75 6
    /** 
     * \brief Destructor 
     */
    ~Displacement3D();
	
};
d77 4
@
