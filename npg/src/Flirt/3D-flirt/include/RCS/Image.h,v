head	1.2;
access;
symbols;
locks
	tom:1.2; strict;
comment	@ * @;


1.2
date	2008.05.13.13.54.33;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.07.14.32.33;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#ifndef _CLASS_IMAGE_H_
#define _CLASS_IMAGE_H_

#include <stdio.h>
#include <Array.h>
#include <Displacement.h>

namespace flirt {

// Authors:	Nils Papenberg, Stefan Heldmann, Konstantin Ens
// 			Silke Bommersheim, Bernd Fischer 

class Image : public virtual Array {
public:	
    Image()
    : h(NULL) {
      //printf("Constructor Image()\n\n");
    };

    /* Copyconstructor */
    Image(const Image& );

    virtual ~Image() {
        /* printf("Destructor Image()\n\n"); */
        delete[] h;
    };

    /* get Voxelsize  */
    virtual const double* getVoxelSize() const;

protected:
    double *h;
};

class TransformableImage : public virtual Image {
public:
    /* compute transformed image T(x + u(x))  */
    virtual void transformImage(const Displacement& u) = 0;

    /* compute (grad T)(x + u(x))  */
    virtual void transformGradient(const Displacement& u) = 0;

    /* compute T(x + u(x)) and (grad T)(x + u(x))  */
    virtual void transform(const Displacement &u) = 0;

    /* get the transformed image  T(x + u(x))  */
    virtual const Array& getTransformedImage() const = 0;

    /* get (grad T)(x + u(x))  */
    virtual const Array& getTransformedGradient() const = 0;
};

class Image3D : public virtual Image, public Array3D {
public:
    Image3D():Array3D() {
      /* printf("Constructor Image3D()\n\n"); */
    };

    Image3D( int, int, int, double, double, double);
 
    Image3D( int*, double*); 

    Image3D ( char *, double, double, double);

    /* Copyconstructor  */
    Image3D( const Image3D&);

    /* Destructor */
    virtual ~Image3D() {
      /* printf("Destructor Image3D()\n\n"); */
    }

    /* Imagedata and also Imagedimensions are read file have to be implemented */
    void init(char *name, double h1, double h2, double h3);
    
    /* Write Image3D as a File named name */
    void writeToFile(char *name) const;

    /* Read Image3D from a File named name */
    void readFromFile(char *name);
    
    void writeToConsole() const;
};

class TransformableImage3D   : public  Image3D, public TransformableImage {
public:
    /* Constructor  */
    TransformableImage3D();

    TransformableImage3D( int, int, int, double, double, double);

   /*  make TransformableImage3D from a Tiff file */
    TransformableImage3D( char *, double, double, double);

   /*  Copyconstructor  */
    TransformableImage3D( const TransformableImage3D&);

    ~TransformableImage3D() {
      /* printf("Destructor TransformableImage3D()\n\n"); */
    };

#if 0
    /* Imagedata and also Imagedimensions are given */
    void init(int m1, int m2, int m3, double h1, double h2, double h3);
    void init(int* _dims, double* _h);

    /* Imagedata and also Imagedimensions are read from an Tiff file */
    void init(char *name, double* h);
#endif

    /* Imagedata and also Imagedimensions are read from an Tiff file */
    void init(char *name, double h1, double h2, double h3);

    /* compute transformed image T(x + u(x)) */
    virtual void transformImage(const Displacement& u);

    /* compute (grad T)(x + u(x)) */
    virtual void transformGradient(const Displacement& u);

    /* compute T(x + u(x)) and (grad T)(x + u(x)) */
    virtual void transform(const Displacement& u);
    
    /* get the transformed image  T(x + u(x))  */
    virtual const Array& getTransformedImage() const;

    /* get (grad T)(x + u(x))  */
    virtual const Array& getTransformedGradient() const;

    /* write transformed Image to file  */
    virtual void writeTransformedImageToFile(char* name);

    void writeTransformedImageToConsole() const;
    
private:
    Array3D transformedImage;
    Array4D transformedGradient;

};

} /* namespace */

#endif
@


1.1
log
@Initial revision
@
text
@d10 3
a12 3
/* An image
 * author Nils Papenberg, Stefan Heldmann
 */
a34 4
/* TransformableImage
 * author Stefan Heldmann, Nils Papenberg
 */

a52 7
/* Image2D
 * author Nils Papenberg, Stefan Heldmann
 */

/* Image3D
 * author Nils Papenberg
 */
a62 2
    /* make Image3D from a file
     * author N. Papenberg, K. Ens */
d73 1
a73 2
    /* init-Method 	author Konstantin Ens
     * Imagedata and also Imagedimensions are read file have to be implemented */
d76 1
a76 2
    /* Write Image3D as a File named name
     * author Konstantin Ens, Nils Papenberg */
d79 1
a79 2
    /* Read Image3D from a File named name
     * author Konstantin Ens, Nils Papenberg */
d92 1
a92 2
   /*  make TransformableImage3D from a Tiff file
    *  author Silke Bommersheim */
d103 1
a103 3
    /** 
    /* init-Method author Bernd Fischer 
     * Imagedata and also Imagedimensions are given */
d107 1
a107 2
    /* init-Method author Nils Papenberg
     * Imagedata and also Imagedimensions are read from an Tiff file */
d111 1
a111 2
    /* init-Method	author Nils Papenberg
     * Imagedata and also Imagedimensions are read from an Tiff file */
@
