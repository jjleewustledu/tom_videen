head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2008.05.22.14.56.51;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.16.52.28;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.13.53.57;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.07.14.41.45;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include <flirt++.h>

namespace flirt
{

	double DistanceMeasure :: getValue () const
	{
		return value;
	};

	SumOfSquaredDifferences :: SumOfSquaredDifferences (Image & refR, TransformableImage & refT)
		: R (refR), T (refT), grad (3, refT.getDimensions ()[0], refT.getDimensions ()[1], refT.getDimensions ()[2]) {
		value = 0.0;
	};

	void SumOfSquaredDifferences :: eval () {
		value = dist2 (T.getTransformedImage ().getData (), R.getData (), T.getNumberOfElements ());
		value = value * R.getVoxelSize ()[0] * R.getVoxelSize ()[1] * R.getVoxelSize ()[2];
	};

	void SumOfSquaredDifferences :: evalGradient () {
		// Copy
		sub (T.getTransformedImage ().getData (), R.getData (), grad[0][0][0], T.getNumberOfElements ());
		sub (T.getTransformedImage ().getData (), R.getData (), grad[1][0][0], T.getNumberOfElements ());
		sub (T.getTransformedImage ().getData (), R.getData (), grad[2][0][0], T.getNumberOfElements ());

		dot (grad.getData (), T.getTransformedGradient ().getData (), grad.getData (), grad.getNumberOfElements ());

		double maxX, maxY, maxZ;
		maxX = 0.0;
		maxY = 0.0;
		maxZ = 0.0;

		for (int k1 = 0; k1 < R.getDimensions ()[0]; k1++) {
			for (int k2 = 0; k2 < R.getDimensions ()[1]; k2++) {
				for (int k3 = 0; k3 < R.getDimensions ()[2]; k3++) {
					if (maxX < fabs (grad[0][k1][k2][k3]))
						maxX = fabs (grad[0][k1][k2][k3]);
				};
			};
		};
		for (int k1 = 0; k1 < R.getDimensions ()[0]; k1++) {
			for (int k2 = 0; k2 < R.getDimensions ()[1]; k2++) {
				for (int k3 = 0; k3 < R.getDimensions ()[2]; k3++) {
					if (maxY < fabs (grad[1][k1][k2][k3]))
						maxY = fabs (grad[1][k1][k2][k3]);
				};
			};
		};
		for (int k1 = 0; k1 < R.getDimensions ()[0]; k1++) {
			for (int k2 = 0; k2 < R.getDimensions ()[1]; k2++) {
				for (int k3 = 0; k3 < R.getDimensions ()[2]; k3++) {
					if (maxZ < fabs (grad[2][k1][k2][k3]))
						maxZ = fabs (grad[2][k1][k2][k3]);
				};
			};
		};

		// printf ("\tgrad:  maxX = %8.2f  maxY = %8.2f  maxZ = %8.2f\n", maxX, maxY, maxZ);
	};

	const Array & SumOfSquaredDifferences :: getGradient () const
	{
		return grad;
	};

}
@


1.3
log
@May 20 version
@
text
@d59 1
a59 1
		printf ("evalGradient:\tmaxX = %8.6f maxY = %8.6f maxZ = %8.6f\n", maxX, maxY, maxZ);
@


1.2
log
@*** empty log message ***
@
text
@d3 2
a4 1
namespace       flirt {
d6 2
a7 1
	double          DistanceMeasure::getValue () const {
d9 1
a9 1
	}
d11 1
a11 2

	SumOfSquaredDifferences::SumOfSquaredDifferences (Image & refR, TransformableImage & refT)
a12 1
		/* printf("Constructor SumOfSquaredDifferneces( Image&, TransformableImage&)\n\n");  */
d14 1
a14 2
		/* grad.init(2,refT.getDimensions()[0],refT.getDimensions()[1]);	*/
	}
d16 1
a16 3

	void            SumOfSquaredDifferences::eval () {
		/* value = dist2(T.getData(),R.getData(),T.getNumberOfElements()); */
d19 1
a19 1
	}
d21 2
a22 3

	void            SumOfSquaredDifferences::evalGradient () {
		/* copy */
d29 1
a29 2
		double          maxX, maxY, maxZ;

d39 3
a41 3
				}
			}
		}
d47 3
a49 3
				}
			}
		}
d55 3
a57 3
				}
			}
		}
d59 2
a60 3
		printf ("evalGradient: maxX = %8.6f maxY = %8.6f maxZ = %8.6f\n", maxX, maxY, maxZ);
		/* grad.writeToConsole(); */
	}
d62 2
a63 2

	const           Array & SumOfSquaredDifferences::getGradient () const {
d65 1
a65 1
	}
@


1.1
log
@Initial revision
@
text
@a4 1
/* ------------------------------------------------------------------------- */
d9 1
a9 1
/* ------------------------------------------------------------------------- */
d11 1
a11 1
	: R (refR), T (refT), grad (3, refT.getDimensions ()[0], refT.getDimensions ()[1], refT.getDimensions ()[2]) {
a13 1

d17 1
a17 1
/* ------------------------------------------------------------------------- */
d24 1
a24 1
/* ------------------------------------------------------------------------- */
d35 3
a37 3
		                maxX = 0.0;
		                maxY = 0.0;
		                maxZ = 0.0;
d39 1
a39 1
		for             (int k1 = 0; k1 < R.getDimensions ()[0]; k1++) {
d42 1
a42 1
					if (maxX < fabs (grad[0][k1][k2][k3])) {
a43 1
					}
d47 1
a47 1
		for             (int k1 = 0; k1 < R.getDimensions ()[0]; k1++) {
d50 1
a50 1
					if (maxY < fabs (grad[1][k1][k2][k3])) {
a51 1
					}
d58 1
a58 1
					if (maxZ < fabs (grad[2][k1][k2][k3])) {
a59 1
					}
d68 1
a68 1
/* ------------------------------------------------------------------------- */
@
