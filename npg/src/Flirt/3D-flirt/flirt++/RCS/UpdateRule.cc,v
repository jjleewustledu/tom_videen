head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2008.05.22.14.56.51;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.16.52.28;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.13.53.57;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.07.14.41.45;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include "Array.h"
#include "DistanceMeasure.h"
#include "Smoother.h"
#include "Image.h"
#include "Displacement.h"
#include "Optimizer.h"
#include "UpdateRule.h"
#include <stdlib.h>

namespace  flirt
{

	UpdateRule :: UpdateRule (DistanceMeasure& _dist,
		Smoother& _smoother,
		Optimizer& _opti)
		:dist (_dist), smoother (_smoother), opti (_opti) {
	};

	void UpdateRule :: updateDisplacement (Displacement& u) {
		Array& du = opti.getUpdate ();
		if (haveSameSize (du, u)) {
			for (int i = 0; i < u.getNumberOfElements (); ++i)
				u.getData ()[i] = du.getData ()[i];
		} else {
			fprintf (stderr, "%s %d (Build %s %s) -- ", __FILE__, __LINE__, __DATE__, __TIME__);
			fprintf (stderr, "ERROR [UpdateRule::updateDisplacement]: "
				"Dimensions of u do not match dimensions of update\n"
				"du=opti.getUpdate()\n");
			fprintf (stderr, "Dimensions u:\n");
			u.printDimensions ();
			fprintf (stderr, "Dimensions du:\n");
			u.printDimensions ();
			exit (1);
		};
	};


	LineSearch :: LineSearch (DistanceMeasure& dist,
		Smoother& smoother,
		Optimizer& opti,
		TransformableImage& TI,
		const Displacement& u)
		: UpdateRule (dist, smoother, opti), T (TI), isFirstUpdate (1), uold (u.getDimensions (), u.getNumberOfDimensions ()) {
	};

	void LineSearch :: updateDisplacement (Displacement& u) {

		Array& du = opti.getUpdate ();

		if (!haveSameSize (du, u)) {
			fprintf (stderr, "%s %d (build %s %s) -- update and u have different dimensions\n",
				__FILE__, __LINE__, __DATE__, __LINE__);
		};

		if (isFirstUpdate)
			isFirstUpdate = 0;

		double          fold = dist.getValue ();
		// +smoother.getValue ();
		for (int i = 0; i < u.getNumberOfElements (); ++i)
			uold.getData ()[i] = u.getData ()[i];

		double          minNormDx = 1e-15;
		double          lambda = 1;
		double          fnew;
		double          normdu = normInf (du.getData (), du.getNumberOfElements ());
		int             failure = 0;

		do {
			for (int i = 0; i < u.getNumberOfElements (); ++i)
				u.getData ()[i] = uold.getData ()[i] + lambda * du.getData ()[i];

			T.transform (u);
			dist.eval ();
			smoother.eval (u);

			fnew = dist.getValue ();
			// +smoother.getValue ();
			// fprintf (stdout, "fold = %g, fnew = %g (lambda=%g)\n", fold, fnew, lambda);

			if (fabs (lambda) * normdu < minNormDx)
				failure = 1;
			lambda *= 0.5;

		} while ((fnew > fold) && (!failure));

		if (failure) {
			for (int i = 0; i < u.getNumberOfElements (); ++i)
				u.getData ()[i] = uold.getData ()[i];
			fprintf (stderr, "%s %d (Build %s %s) -- ", __FILE__, __LINE__, __DATE__, __TIME__);
			fprintf (stderr, "updateDisplacement(u) : Linesearch failed! Omitting update\n");
		};
	};

}
@


1.3
log
@May 20 version
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d10 2
a11 1
namespace       flirt {
d13 4
a16 6
	/* ------------------------------------------------------------------------- */
	UpdateRule::UpdateRule (DistanceMeasure & _dist,
				Smoother & _smoother,
				Optimizer & _opti)
	:dist (_dist), smoother (_smoother), opti (_opti) {
		//printf ("UpdateRule (%p) :: Constructor\n", this);
d19 2
a20 2
	void            UpdateRule::updateDisplacement (Displacement & u) {
		Array & du = opti.getUpdate ();
d25 5
a29 5
			printf ("%s %d (Build %s %s) -- ", __FILE__, __LINE__, __DATE__, __TIME__);
			printf (" UpdateRule :: updateDisplacement(u) : "
				"Dimensions of u  does not match dimensions of the update\n"
				"du=opti.getUpdate()!\n");
			printf ("Dimensions u:\n");
d31 1
a31 1
			printf ("Dimensions du:\n");
a32 1
			printf ("Exiting on error\n.");
d37 7
a43 9
	/* ------------------------------------------------------------------------- */
	LineSearch::LineSearch (DistanceMeasure & dist,
		    Smoother & smoother,
		    Optimizer & opti,
		    TransformableImage & TI,
		    const Displacement & u)
	:		UpdateRule (dist, smoother, opti), T (TI), isFirstUpdate (1), uold (u.getDimensions (), u.getNumberOfDimensions ()) {
		//printf ("Constructor LineSearch(DistanceMeasure, Smoother, Optimizer,"
		// " TransformableImage2D, Displacement2D\n\n");
d46 1
a46 1
	void            LineSearch::updateDisplacement (Displacement & u) {
d48 1
a48 1
		Array & du = opti.getUpdate ();
d51 1
a51 2
			printf ("%s %d (bulid %s %s) -- "
				"update and u have different dimensions!\n",
d79 1
a79 1
			// printf ("fold = %g, fnew = %g (lambda=%g)\n", fold, fnew, lambda);
d90 4
a93 5
			printf ("%s %d (Build %s %s) -- ", __FILE__, __LINE__, __DATE__, __TIME__);
			printf ("updateDisplacement(u) : "
				"Linesearch failed! Omitting update.\n");
		}
	}
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
namespace flirt {
d12 7
a18 5
// ---------------------------------------------------------------------
//
// UpdateRule
//
// ---------------------------------------------------------------------
d20 18
a37 26
UpdateRule ::  UpdateRule(DistanceMeasure& _dist, 
	                  Smoother&        _smoother,
	                  Optimizer&       _opti) 
  : dist(_dist), smoother(_smoother), opti(_opti) {
  //printf("UpdateRule (%p) :: Constructor\n", this);
};
   
void UpdateRule :: updateDisplacement(Displacement& u) {
  Array& du = opti.getUpdate();
  if (haveSameSize(du,u)) {
    for (int i=0; i<u.getNumberOfElements(); ++i)
      u.getData()[i] = du.getData()[i];
  } else {
    printf("%s %d (Build %s %s) -- ",__FILE__,__LINE__,__DATE__,__TIME__);
    printf(" UpdateRule :: updateDisplacement(u) : "
	   "Dimensions of u  does not match dimensions of the update\n"
	   "du=opti.getUpdate()!\n"); 
    printf("Dimensions u:\n");
    u.printDimensions();
    printf("Dimensions du:\n");
    u.printDimensions();
    
    printf("Exiting on error\n.");
    exit(-1);
  };
}; 
d39 10
a48 5
// ---------------------------------------------------------------------
//
// LineSearch
//
// ---------------------------------------------------------------------
d50 1
a50 9
LineSearch ::  LineSearch( DistanceMeasure& dist, 
			   Smoother&        smoother,
			   Optimizer&       opti,
			   TransformableImage& TI,
			   const Displacement& u) 
  : UpdateRule(dist,smoother,opti), T(TI), isFirstUpdate(1), uold( u.getDimensions(), u.getNumberOfDimensions()) {
  //printf("Constructor LineSearch(DistanceMeasure, Smoother, Optimizer,"
  //	 " TransformableImage2D, Displacement2D\n\n");
};
d52 1
a52 1
void LineSearch :: updateDisplacement(Displacement& u) {
d54 5
a58 11
  Array& du = opti.getUpdate();
 
  if (!haveSameSize(du,u)) {
    printf("%s %d (bulid %s %s) -- "
	   "update and u have different dimensions!\n",
	   __FILE__,__LINE__,__DATE__,__LINE__);
  };  
 
  if (isFirstUpdate) {
    isFirstUpdate = 0;
  };
d60 2
d63 4
a66 4
  double fold    = dist.getValue();// + smoother.getValue();  
  for (int i=0; i<u.getNumberOfElements(); ++i) {
    uold.getData()[i] = u.getData()[i];
  }
d68 5
a72 1
  double minNormDx = 1e-15;
d74 3
a76 4
  double lambda = 1;
  double fnew;
  double normdu = normInf(du.getData(),du.getNumberOfElements());
  int failure = 0;
d78 3
a80 20
  do {
    for (int i=0; i<u.getNumberOfElements(); ++i) {
      u.getData()[i] = uold.getData()[i] + lambda * du.getData()[i];
    }
    
    T.transform(u);
    dist.eval();
    smoother.eval(u);
    
    fnew = dist.getValue();// + smoother.getValue();  
    
    //printf("fold = %g, fnew = %g (lambda=%g)\n",fold,fnew,lambda);
    
    if (fabs(lambda)*normdu < minNormDx) {
      failure = 1;
    }      
    
    lambda *= 0.5;
    
  } while ((fnew > fold) && (!failure));
d82 3
a84 8
  if (failure) {
    for (int i=0; i<u.getNumberOfElements(); ++i) {
      u.getData()[i] = uold.getData()[i];
    }
    printf("%s %d (Build %s %s) -- ",__FILE__,__LINE__,__DATE__,__TIME__);
    printf("updateDisplacement(u) : "
	   "Linesearch failed! Omitting update.\n"); 
  }
d86 3
a88 1
}
d90 11
@
