head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2008.05.22.14.56.51;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.16.52.28;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.13.53.57;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.07.14.41.45;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include <Image.h>
#include <Array.h>
#include <io3d.h>
#include <stdio.h>

namespace flirt
{

	Image :: Image(const Image& I)
		: Array(I) {
		h = new double[2];
		h[0] = I.h[0];
		h[1] = I.h[1];
	};

	const double* Image :: getVoxelSize() const
	{
		return h;
	};

	// ----------------------------------------------------------------------------
	Image3D :: Image3D(int m1, int m2, int m3, double h1, double h2, double h3)
		: Array(m1, m2, m3),  Array3D(m1, m2, m3) {
		h = new double[3];
		h[0] = h1;
		h[1] = h2;
		h[2] = h3;
	};

	Image3D :: Image3D( int* _dims, double* _h)
		: Array3D(_dims[0], _dims[1], _dims[2]) {
		h = new double[3];
		h[0] = _h[0];
		h[1] = _h[1];
		h[2] = _h[2];
	};

	Image3D :: Image3D( char *name, double h1, double h2, double h3) {
		int m1, m2,m3;
		ndims = 3;
		dims = new int[3];
		dims[0] = m1;
		dims[1] = m2;
		dims[2] = m3;
		nelem = m1*m2*m3;
		data = new double[nelem];
		A = createTreeStructure3D( m1, m2, m3, data);
		h = new double[3];
		h[0] = h1;
		h[1] = h2;
		h[2] = h3;
	};

	Image3D :: Image3D(const Image3D& I2)
		: Array(I2) {
		A = createTreeStructure3D(dims[0], dims[1], dims[2], data);
		h = new double[3];
		h[0] = I2.h[0];
		h[1] = I2.h[1];
		h[2] = I2.h[2];
	};

	void Image3D :: writeToFile( char *name) const
	{
		write3D(name,data,dims[0],dims[1],dims[2]);
	};

	void Image3D :: readFromFile( char *name) {
		read3D(name,data,dims[0],dims[1],dims[2]);
	};

	void Image3D :: writeToConsole() const
	{
		int k1,k2,k3;
		int m1, m2, m3;

		m1 = dims[0];
		m2 = dims[1];
		m3 = dims[2];

		for (k3 = 0; k3 < m3; k3++) {
			for (k2 = 0; k2 < m2; k2++) {
				for (k1 = 0; k1 < m1; k1++) {
					fprintf(stdout, " %8.6f ",A[k1][k2][k3]);
				};
				fprintf(stdout, "\n");
			};
			fprintf(stdout, "--- \n");
		};
	};

	// ----------------------------------------------------------------------------
	TransformableImage3D :: TransformableImage3D()
		: Image3D(), transformedImage(), transformedGradient() {};

	TransformableImage3D :: TransformableImage3D( int m1, int m2, int m3,  double h1, double h2, double h3)
		: Array( m1, m2, m3), Image3D( m1, m2, m3,  h1, h2, h3), transformedImage( m1, m2, m3), transformedGradient( 3,m1,m2,m3) {};

	TransformableImage3D :: TransformableImage3D( char *name, double h1, double h2,double h3)
		: Image3D( name, h1, h2, h3), transformedImage( dims[0], dims[1], dims[2]), transformedGradient( 3, dims[0], dims[1],dims[2]) {};

	TransformableImage3D :: TransformableImage3D( const TransformableImage3D& T2)
		: Array( T2), Image3D( T2), transformedGradient( 3, T2.getDimensions()[0], T2.getDimensions()[1], T2.getDimensions()[2]) {};

	void TransformableImage3D :: transformImage(const Displacement& u) {
		Displacement3D& u3D = (Displacement3D&) u;
		evalDisplacementLinear3D(A, dims[0], dims[1], dims[2], u3D[0], u3D[1], u3D[2], transformedImage.getArray());
	};

	void TransformableImage3D :: transformGradient(const Displacement& u) {
		transformImage(u);
		computeFDGrad3D(transformedImage.getArray(),dims[0],dims[1],dims[2],h[0],h[1],h[2],PERIODIC,transformedGradient.getArray());
	};

	void TransformableImage3D :: transform(const Displacement& u) {
		transformImage(u);
		computeFDGrad3D(transformedImage.getArray(),dims[0],dims[1],dims[2],h[0],h[1],h[2],PERIODIC,transformedGradient.getArray());
	};

	const Array& TransformableImage3D :: getTransformedImage() const
	{
		return transformedImage;
	};

	const Array& TransformableImage3D :: getTransformedGradient() const
	{
		return transformedGradient;
	};

	void TransformableImage3D :: writeTransformedImageToFile(char* name) {
		write3D (name, transformedImage.getData(), dims[0], dims[1], dims[2]);
	};

	void TransformableImage3D :: writeTransformedImageToConsole() const
	{
		int k1,k2,k3;
		int m1, m2, m3;

		m1 = dims[0];
		m2 = dims[1];
		m3 = dims[2];

		for (k3 = 0; k3 < m3; k3++) {
			for (k2 = 0; k2 < m2; k2++) {
				for (k1 = 0; k1 < m1; k1++) {
					fprintf(stdout, " %8.6f ",transformedImage.getArray()[k1][k2][k3]);
				};
				fprintf(stdout, "\n");
			};
			fprintf(stdout, "\n --- \n");
		};
	};
}	  // namespace
@


1.3
log
@May 20 version
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d4 1
d6 2
a7 1
namespace flirt {
d9 6
a14 8
/* ---------------------------------------------------------------------------- */
Image :: Image(const Image& I)
  : Array(I) {
  /* printf("Constructor Image(const Image&)\n"); */
  h = new double[2];
  h[0] = I.h[0];
  h[1] = I.h[1];
}
d16 4
a19 4
/* ---------------------------------------------------------------------------- */
const double* Image :: getVoxelSize() const {
    return h;
}
d21 8
a28 9
/* ---------------------------------------------------------------------------- */
Image3D :: Image3D(int m1, int m2, int m3, double h1, double h2, double h3)
  : Array(m1, m2, m3),  Array3D(m1, m2, m3) {
  /* printf("Constructor Image3D( int, int, int, double, double, double)\n\n"); */
  h = new double[3];
  h[0] = h1;
  h[1] = h2;
  h[2] = h3;
}
d30 7
a36 9
/* ---------------------------------------------------------------------------- */
Image3D :: Image3D( int* _dims, double* _h) 
  : Array3D(_dims[0], _dims[1], _dims[2]) {
  /* printf("Constructor Image3D(int*, double*)\n\n"); */
  h = new double[3];
  h[0] = _h[0];
  h[1] = _h[1];
  h[2] = _h[2];
}
d38 15
a52 20
/* ---------------------------------------------------------------------------- */
Image3D :: Image3D( char *name, double h1, double h2, double h3) { 
  /* printf("Image3D :: Image3D( char*, double, double, double)\n\n"); */
  int m1, m2,m3;
  
  ndims = 3;
  dims = new int[3];
  dims[0] = m1;
  dims[1] = m2;
  dims[2] = m3;
  nelem = m1*m2*m3;
  data = new double[nelem];
  A = createTreeStructure3D( m1, m2, m3, data);
  h = new double[3];
  h[0] = h1;
  h[1] = h2;
  h[2] = h3;
  
  /* read3D(name,m1,m2,m3); */
}
d54 8
a61 10
/* ---------------------------------------------------------------------------- */
Image3D :: Image3D(const Image3D& I2)
  : Array(I2) {
  /* printf("Constructor: Image2D( const Image2D&)\n\n"); */
  A = createTreeStructure3D(dims[0], dims[1], dims[2], data);
  h = new double[3];
  h[0] = I2.h[0];
  h[1] = I2.h[1];
  h[2] = I2.h[2];
}
d63 4
a66 5
/* ---------------------------------------------------------------------------- */
void Image3D :: writeToFile( char *name) const {
  /* printf("Image3D::wirteToFile(char *name) not implemented\n"); */
  write3D(name,data,dims[0],dims[1],dims[2]);
}
d68 3
a70 4
/* ---------------------------------------------------------------------------- */
void Image3D :: readFromFile( char *name)  {
  read3D(name,data,dims[0],dims[1],dims[2]);
}
d72 4
a75 2
/* ---------------------------------------------------------------------------- */
void Image3D :: writeToConsole() const {
d77 3
a79 2
  int k1,k2,k3;
  int m1, m2, m3;
d81 10
a90 3
  m1 = dims[0];
  m2 = dims[1];
  m3 = dims[2];
d92 3
a94 1
  printf("\nm = %d %d %d\n",m1,m2,m3);
d96 2
a97 10
  for (k3 = 0; k3 < m3; k3++) {
    for (k2 = 0; k2 < m2; k2++) {
      for (k1 = 0; k1 < m1; k1++) {
	printf(" %8.6f ",A[k1][k2][k3]);
      }
      printf("\n");
    }
    printf("--- \n");
  }
}
d99 2
a100 5
/* ---------------------------------------------------------------------------- */
TransformableImage3D :: TransformableImage3D()
  :Image3D(), transformedImage(), transformedGradient() {
  /* printf("Constructor TransformableImage2D()\n\n"); */
}
d102 2
a103 3
TransformableImage3D :: TransformableImage3D( int m1, int m2, int m3,  double h1, double h2, double h3)
  :Array( m1, m2, m3), Image3D( m1, m2, m3,  h1, h2, h3), transformedImage( m1, m2, m3), transformedGradient( 3,m1,m2,m3) {
  /* printf("Constructor TransformableImage2D( int, int, double, double)\n\n");  */
d105 4
a108 1
}
d110 4
a113 5
/* ---------------------------------------------------------------------------- */
  TransformableImage3D :: TransformableImage3D( char *name, double h1, double h2,double h3) 
    : Image3D( name, h1, h2, h3), transformedImage( dims[0], dims[1], dims[2]), transformedGradient( 3, dims[0], dims[1],dims[2]) {
    /* printf("Constructor TransformableImage2D( char*, double, double)\n\n"); */
}
d115 4
a118 5
/* ---------------------------------------------------------------------------- */
  TransformableImage3D :: TransformableImage3D( const TransformableImage3D& T2)
    : Array( T2), Image3D( T2), transformedGradient( 3, T2.getDimensions()[0], T2.getDimensions()[1], T2.getDimensions()[2]) {
    /* printf("Constructor TransformableImage3D( const TransformalbeImage3D&)\n\n");  */
}
d120 4
a123 6
/* ---------------------------------------------------------------------------- */
void TransformableImage3D :: transformImage(const Displacement& u) {
    /* test auf u == Displacement */
    Displacement3D& u3D = (Displacement3D&) u;
    evalDisplacementLinear3D(A,dims[0],dims[1],dims[2],u3D[0],u3D[1],u3D[2],transformedImage.getArray());
}
d125 4
a128 5
/* ---------------------------------------------------------------------------- */
void TransformableImage3D :: transformGradient(const Displacement& u) {
    transformImage(u);
    computeFDGrad3D(transformedImage.getArray(),dims[0],dims[1],dims[2],h[0],h[1],h[2],PERIODIC,transformedGradient.getArray());
}
d130 3
a132 5
/* ---------------------------------------------------------------------------- */
void TransformableImage3D :: transform(const Displacement& u) {
    transformImage(u);
    computeFDGrad3D(transformedImage.getArray(),dims[0],dims[1],dims[2],h[0],h[1],h[2],PERIODIC,transformedGradient.getArray());
}
d134 4
a137 4
/* ---------------------------------------------------------------------------- */
const Array& TransformableImage3D :: getTransformedImage() const{
    return transformedImage;
}
d139 3
a141 4
/* ---------------------------------------------------------------------------- */
const Array& TransformableImage3D :: getTransformedGradient() const {
    return transformedGradient;
}
d143 11
a153 29
/* ---------------------------------------------------------------------------- */
void TransformableImage3D::writeTransformedImageToFile(char* name)
{
  write3D(name,transformedImage.getData(),dims[0],dims[1],dims[2]);
}

/* ---------------------------------------------------------------------------- */
void TransformableImage3D :: writeTransformedImageToConsole() const {

  int k1,k2,k3;
  int m1, m2, m3;

  m1 = dims[0];
  m2 = dims[1];
  m3 = dims[2];

  for (k3 = 0; k3 < m3; k3++) {
    for (k2 = 0; k2 < m2; k2++) {
      for (k1 = 0; k1 < m1; k1++) {
	printf(" %8.6f ",transformedImage.getArray()[k1][k2][k3]);
      }
      printf("\n");
    }
    printf("\n --- \n");
  }
}
} /* namespace */


@


1.1
log
@Initial revision
@
text
@@
