head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2008.05.22.14.56.51;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.16.52.28;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.13.53.57;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.07.14.41.45;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include <Solver.h>
#include <stdio.h>

namespace  flirt
{

	FPSolverElasticFFT3D :: FPSolverElasticFFT3D (const Displacement3D& u, double _alpha, double _mu, double _lambda)
		: ans (u.getDimensions ()[1], u.getDimensions ()[2], u.getDimensions ()[3],
			u.getVoxelSize ()[0], u.getVoxelSize ()[1], u.getVoxelSize ()[2]),
			rhs (&u.getDimensions ()[1], u.getVoxelSize ()) {

		bc = PERIODIC;
		alpha = _alpha;
		mu = _mu;
		lambda = _lambda;

		initElasticPlan3D (u.getDimensions ()[1],
							u.getDimensions ()[2],
							u.getDimensions ()[3],
							alpha,
							mu,
							lambda,
							u.getVoxelSize ()[0],
							u.getVoxelSize ()[1],
							u.getVoxelSize ()[2],
							bc,
							&plan);

	};

	FPSolverElasticFFT3D :: ~FPSolverElasticFFT3D () {
		if (plan != NULL)
			deleteElasticPlan3D (plan);
	};

	void FPSolverElasticFFT3D :: solve () {
		solveElastic3D (plan, rhs.getArray (), ans.getArray ());
	};

	Array& FPSolverElasticFFT3D :: getAns () {
		return ans;
	};

	Array& FPSolverElasticFFT3D :: getRhs () {
		return rhs;
	};
}
@


1.3
log
@May 20 version
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d2 1
d4 2
a5 1
namespace       flirt {
d7 4
a10 4
	FPSolverElasticFFT3D::FPSolverElasticFFT3D (const Displacement3D & u, double _alpha, double _mu, double _lambda)
	:ans (u.getDimensions ()[1], u.getDimensions ()[2], u.getDimensions ()[3],
	      u.getVoxelSize ()[0], u.getVoxelSize ()[1], u.getVoxelSize ()[2]),
	rhs (&u.getDimensions ()[1], u.getVoxelSize ()) {
d18 10
a27 10
				   u.getDimensions ()[2],
				   u.getDimensions ()[3],
				   alpha,
				   mu,
				   lambda,
				   u.getVoxelSize ()[0],
				   u.getVoxelSize ()[1],
				   u.getVoxelSize ()[2],
				   bc,
				   &plan);
d29 1
a29 1
	}
d31 1
a31 1
	FPSolverElasticFFT3D::FPSolverElasticFFT3D () {
d34 1
a34 1
	}
d36 1
a36 2
	void            FPSolverElasticFFT3D::solve () {
		rhs.print ();
d38 1
a38 1
	}
d40 1
a40 1
	Array & FPSolverElasticFFT3D::getAns () {
d42 1
a42 1
	}
d44 1
a44 1
	Array & FPSolverElasticFFT3D::getRhs () {
d46 1
a46 1
	}
@


1.1
log
@Initial revision
@
text
@d4 1
a28 1
/* ---------------------------------------------------------------------*/
a33 1
/* ---------------------------------------------------------------------*/
a34 1
		//printf ("f:\n");
a38 1
/* ---------------------------------------------------------------------*/
a42 1
/* ---------------------------------------------------------------------*/
@
