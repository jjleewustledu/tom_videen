head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2008.05.22.14.56.51;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.16.52.28;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.13.53.57;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.07.14.41.45;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include "Optimizer.h"
#include "Array.h"
#include "Solver.h"
#include "DistanceMeasure.h"
#include "Displacement.h"
#include <stdio.h>

namespace flirt
{

/* ====================================== DELETED CODE =======================================
	TMOptimizer :: TMOptimizer(DistanceMeasure& _distance, Smoother& _smoother, TMSolver& _solv)
			 : solver(_solv),
			distance(_distance),
			smoother(_smoother),
			alpha(-1.0),
			tau(-1.0)
	{};

	TMOptimizer :: TMOptimizer(DistanceMeasure& _distance, Smoother& _smoother, TMSolver& _solv, double _alpha, double _tau)
			: solver(_solv),
			distance(_distance),
			smoother(_smoother),
			alpha(_alpha),
			tau(_tau)
	{};

	void TMOptimizer :: setParameter(double _alpha, double _tau) {
	alpha = _alpha;
	tau = _tau;
};

	Array& TMOptimizer :: getUpdate() {
		return solver.getAns();
	};

	void TMOptimizer :: computeDisplacementUpdate(Displacement& u) {
		Array& rhs       = solver.getRhs();

		const Array& f = distance.getGradient();
		int endloop = rhs.getNumberOfElements();

		for (int k = 0; k < endloop; k++)
			rhs.getData()[k] = u.getData()[k] - tau * f.getData()[k];
		solver.solve();

	};
 * ====================================== DELETED CODE ======================================= */

	FPOptimizer ::  FPOptimizer(DistanceMeasure& _distance, Smoother& _smoother, FPSolver& _solv)
		: solver(_solv),
		distance(_distance),
		smoother(_smoother),
		alpha(-1.0)
	{};

	FPOptimizer ::  FPOptimizer(DistanceMeasure& _distance, Smoother& _smoother, FPSolver& _solv, double _alpha)
		: solver(_solv),
		distance(_distance),
		smoother(_smoother),
		alpha(_alpha)
	{};

	void FPOptimizer :: setAlpha(double _alpha) {
		alpha = _alpha;
	};

	Array& FPOptimizer :: getUpdate() {
		return solver.getAns();
	};

	void FPOptimizer :: computeDisplacementUpdate(Displacement& u) {
		Array& rhs     = solver.getRhs();
		const Array& f = distance.getGradient();
		int endloop    = rhs.getNumberOfElements();

		for (int k = 0; k < endloop; k++)
			rhs.getData()[k] = - f.getData()[k];
		solver.solve();
	};

}
@


1.3
log
@May 20 version
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d6 1
d8 2
a9 1
namespace flirt {
d11 1
a11 1
/* ----------------------------------------------------------------------
d13 6
a18 6
		 : solver(_solv),
		distance(_distance),
		smoother(_smoother),
		alpha(-1.0),
		tau(-1.0)
  	{};
d21 6
a26 6
	    : solver(_solv),
		distance(_distance),
		smoother(_smoother),
		alpha(_alpha),
		tau(_tau)
  	{};
d29 3
a31 4
  		alpha = _alpha;
  		tau = _tau;
	};
 */
a32 1
/* ----------------------------------------------------------------------
d34 1
a34 1
  		return solver.getAns();
a35 1
 */
d37 2
a38 6
/* ----------------------------------------------------------------------
/*	void TMOptimizer :: computeDisplacementUpdate(Displacement& u) {
  	Array& rhs       = solver.getRhs();
  
  	const Array& f = distance.getGradient();
  	int endloop = rhs.getNumberOfElements();
d40 7
a46 4
  	for (int k = 0; k < endloop; k++)
    	rhs.getData()[k] = u.getData()[k] - tau * f.getData()[k];
	solver.solve();
  
d48 1
a48 1
 */
d51 2
a52 2
	  : solver(_solv),
	    distance(_distance),
d54 2
a55 1
		alpha(-1.0) {
a56 3
		// printf("Constructor FPOptimizer(DistanceMeasure&, Smoother&, FPSolver&)\n\n");
	};
  
a63 1

a67 1

a71 1

d73 1
a73 1
		Array& rhs       = solver.getRhs();
d75 1
a75 1
		int endloop = rhs.getNumberOfElements();
a78 1

a82 1

@


1.1
log
@Initial revision
@
text
@a7 13
// ---------------------------------------------------------------------
//
// TMOptimizer
//
// ---------------------------------------------------------------------
/*
TMOptimizer :: TMOptimizer(DistanceMeasure& _distance, Smoother& _smoother, TMSolver& _solv)
    : solver(_solv),
	distance(_distance),
	smoother(_smoother),
	alpha(-1.0),
	tau(-1.0)
  {};
d9 8
a16 7
TMOptimizer :: TMOptimizer(DistanceMeasure& _distance, Smoother& _smoother, TMSolver& _solv, double _alpha, double _tau)
    : solver(_solv),
	distance(_distance),
	smoother(_smoother),
	alpha(_alpha),
	tau(_tau)
  {};
d18 7
a24 16
void TMOptimizer :: setParameter(double _alpha, double _tau) {
  alpha = _alpha;
  tau = _tau;
};
*/
// ---------------------------------------------------------------------
/*Array& TMOptimizer :: getUpdate() {
  return solver.getAns();
};
*/
// ---------------------------------------------------------------------
/*void TMOptimizer :: computeDisplacementUpdate(Displacement& u) {
  Array& rhs       = solver.getRhs();
  
  const Array& f = distance.getGradient();
  int endloop = rhs.getNumberOfElements();
d26 5
a30 3
  for (int k = 0; k < endloop; k++) {
    rhs.getData()[k] = u.getData()[k] - tau * f.getData()[k];
  }
d32 9
a40 1
  solver.solve();
d42 2
a43 1
};
d45 6
a50 6
*/
// ---------------------------------------------------------------------
//
// FPOptimizer
//
// ---------------------------------------------------------------------
d52 8
a59 7
FPOptimizer ::  FPOptimizer(DistanceMeasure& _distance, Smoother& _smoother, FPSolver& _solv)
  : solver(_solv),
    distance(_distance),
    smoother(_smoother),
    alpha(-1.0){
  //printf("Constructor FPOptimizer(DistanceMeasure&, Smoother&, FPSolver&)\n\n");
};
d61 6
a67 6
FPOptimizer ::  FPOptimizer(DistanceMeasure& _distance, Smoother& _smoother, FPSolver& _solv, double _alpha)
  : solver(_solv),
    distance(_distance),
    smoother(_smoother),
    alpha(_alpha)
{};
d69 3
a71 1
// ---------------------------------------------------------------------
a72 12
void FPOptimizer :: setAlpha(double _alpha) {
  alpha = _alpha;
};
// ---------------------------------------------------------------------
Array& FPOptimizer :: getUpdate() {
  return solver.getAns();
};
// ---------------------------------------------------------------------
void FPOptimizer :: computeDisplacementUpdate(Displacement& u) {
  Array& rhs       = solver.getRhs();
  const Array& f = distance.getGradient();
  int endloop = rhs.getNumberOfElements();
d74 3
a76 3
  for (int k = 0; k < endloop; k++) {
    rhs.getData()[k] = - f.getData()[k];
  }
a77 1
  solver.solve();
d79 4
a82 1
};
d84 6
a90 1
// ---------------------------------------------------------------------
@
