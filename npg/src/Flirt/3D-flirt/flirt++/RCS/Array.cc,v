head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2008.05.22.14.56.51;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.16.52.28;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.13.53.57;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.07.14.41.45;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include <Array.h>
#include <stdio.h>

namespace flirt
{

	// 	----------------------------------------
	// 	Array
	// 	----------------------------------------
	Array :: Array (int m1, int m2) {
		ndims = 2;
		dims = new int [2];
		dims[0] = m1;
		dims[1] = m2;
		nelem = m1 * m2;
		data = new double[nelem];
		memset (data, 0, sizeof (double) * nelem);
	};

	Array :: Array (int m1, int m2, int m3) {
		ndims = 3;
		dims = new int [3];
		dims[0] = m1;
		dims[1] = m2;
		dims[2] = m3;
		nelem = m1 * m2 * m3;
		data = new double[nelem];
		memset (data, 0, sizeof (double) * nelem);
	};

	Array :: Array (int m1, int m2, int m3, int m4) {
		ndims = 4;
		dims = new int [4];
		dims[0] = m1;
		dims[1] = m2;
		dims[2] = m3;
		dims[3] = m4;
		nelem = m1 * m2 * m3 * m4;
		data = new double[nelem];
		memset (data, 0, sizeof (double) * nelem);
	};

	Array :: Array (const int *_dims, int _ndims) {
		ndims = _ndims;
		dims = new int [_ndims];
		nelem = 1;
		for (int i = 0; i < ndims; ++i) {
			dims[i] = _dims[i];
			nelem *= dims[i];
		};
		data = new double[nelem];
		memset (data, 0, sizeof (double) * nelem);
	};

	Array :: Array (const Array& A) {
		ndims = A.ndims;
		dims = new int [ndims];
		for (int i = 0; i < ndims; ++i)
			dims[i] = A.dims[i];
		nelem = A.nelem;
		data = new double[nelem];
		for (int i = 0; i < nelem; ++i)
			data[i] = A.data[i];
	};

	// ----------------------------------------------------
	bool haveSameSize (const Array& A1, const Array& A2) {
		if (A1.getNumberOfDimensions () != A2.getNumberOfDimensions ())
			return 0;

		for (int i = 0; i < A1.getNumberOfDimensions (); i++) {
			if (A1.getDimensions ()[i] != A2.getDimensions ()[i])
				return 0;
		};
		return 1;
	};

	// ----------------------------------------------------
	void Array :: printToFile (FILE* file) const {};

	void Array :: print () const {printToFile (stdout);};

	void Array :: printDimensions () const
	{
		fprintf (stdout, "printDimensions of Array at %p - ", this);
		fprintf (stdout, "%d Dimensions: ", ndims);
		for (int i = 0; i < ndims; ++i)
			fprintf (stdout, "%d ", dims[i]);
		fprintf (stdout, " (%d elements)\n", nelem);
	};

	// 	----------------------------------------
	// 	2D Array
	// 	----------------------------------------
	Array2D :: Array2D () : A (NULL) {};

	Array2D :: Array2D (int m1, int m2) : Array (m1, m2) {
		A = createTreeStructure2D (m1, m2, data);
	};

	Array2D :: Array2D (const int *_dims) : Array (_dims[0], _dims[1]) {
		A = createTreeStructure2D (_dims[0], _dims[1], data);
	};

	Array2D :: Array2D (const Array2D& A2) : Array (A2) {
		A = createTreeStructure2D (dims[0], dims[1], data);
	};

	void Array2D :: printToFile (FILE* file) const
	{
        fprintf(stdout, "%s (%d %d)\n","Array2D::printToFile", dims[0], dims[1]);
		fprintf (file, "%d %d\n", dims[0], dims[1]);
		printToFileArray2D (A, dims[0], dims[1], file);
	};

	// 	----------------------------------------
	// 	3D Array
	// 	----------------------------------------
	Array3D :: Array3D (int m1, int m2, int m3) : Array (m1, m2, m3) {
		A = createTreeStructure3D (m1, m2, m3, data);
	};

	Array3D :: Array3D (const Array3D& A3) : Array (A3) {
		A = createTreeStructure3D (dims[0], dims[1], dims[2], data);
	};

	void Array3D :: printToFile (FILE* file) const
	{
        fprintf(stdout, "%s (%d %d %d)\n","Array3D::printToFile", dims[0], dims[1], dims[2]);
        fprintf(file,"%d %d %d\n",dims[0], dims[1], dims[2]);
        for (int k1 = 0; k1 < dims[0]; k1++) {
            fprintf(file,"A[%d][][] = \n",k1);
            printToFileArray2D(A[k1],dims[1],dims[2],file);
        };
	};

	// 	----------------------------------------
	// 	4D Array
	// 	----------------------------------------
	Array4D :: Array4D (int m1, int m2, int m3, int m4) : Array (m1, m2, m3, m4) {
		A = createTreeStructure4D (m1, m2, m3, m4, data);
	};

	Array4D :: Array4D (const Array4D& A4) : Array (A4) {
		A = createTreeStructure4D (dims[0], dims[1], dims[2], dims[3], data);
	};

	void Array4D :: printToFile (FILE* file) const
	{
        fprintf(stdout, "%s (%d %d %d %d)\n","Array4D::printToFile", dims[0], dims[1], dims[2], dims[3]);
        printToFileArray4D (A, dims[0], dims[1], dims[2], dims[3], file);
	};

	void Array4D :: writeTransform (FILE* file) const
	{
        fprintf(stdout, "%s (%d %d %d %d)\n","\twriteTransform", dims[0], dims[1], dims[2], dims[3]);
        writeTransform4D (A, dims[0], dims[1], dims[2], dims[3], file);
	};

	void Array4D :: readTransform (FILE* file) const
	{
		int		m1, m2, m3, m4;
        fprintf(stdout, "%s (%d %d %d %d)\n","\treadTransform", dims[0], dims[1], dims[2], dims[3]);
        readTransform4D (A, dims[0], dims[1], dims[2], dims[3], file);
	};

	void Array4D :: writeToConsole () const
	{
		int k1, k2, k3, k4;
		fprintf (stdout, "dims = %d %d %d %d\n", dims[0], dims[1], dims[2], dims[3]);

		for (k1 = 0; k1 < dims[0]; k1++) {
			fprintf (stdout, "k1 = %d\n", k1);
			for (k4 = 0; k4 < dims[3]; k4++) {
				for (k3 = 0; k3 < dims[2]; k3++) {
					for (k2 = 0; k2 < dims[1]; k2++)
						fprintf (stdout, "%8.6f ", A[k1][k2][k3][k4]);
					fprintf (stdout, "\n");
				};
				fprintf (stdout, "--\n");
			};
		};
	};

}	// namespace
@


1.3
log
@May 20 version
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d2 1
d4 2
a5 1
namespace       flirt {
d7 4
a10 3
/* --------------------------------------------------------------- */
	Array::Array (int m1, int m2) {
		/* printf("Constructor Array(int, int)\n\n");	*/
d12 1
a12 1
		dims = new int  [2];
d18 1
a18 1
	}
d20 1
a20 3
/* --------------------------------------------------------------- */
	Array::Array (int m1, int m2, int m3) {
		/* printf("Constructor Array(int, int, int)\n\n"); */
d22 1
a22 1
		dims = new int  [3];
d29 1
a29 1
	}
d31 1
a31 3
/* --------------------------------------------------------------- */
	Array::Array (int m1, int m2, int m3, int m4) {
		/* printf("Constructor Array(int, int, int, int)\n\n"); */
d33 1
a33 1
		dims = new int  [4];
d41 1
a41 1
	}
d43 1
a43 3
/* --------------------------------------------------------------- */
	Array::Array (const int *_dims, int _ndims) {
		/* printf("Constructor Array(const int*, int)\n\n"); */
d45 1
a45 1
		dims = new int  [_ndims];
d50 1
a50 1
		}
d53 1
a53 1
	}
d55 1
a55 3
/* --------------------------------------------------------------- */
	Array::Array (const Array & A) {
		/* printf("Consctructor: Array( const Array&)\n\n"); */
d57 1
a57 1
		dims = new int  [ndims];
d64 1
a64 1
	}
d66 2
a67 2
/* --------------------------------------------------------------- */
	bool            haveSameSize (const Array & A1, const Array & A2) {
d74 1
a74 1
		}
d76 1
a76 1
	}
d78 2
a79 3
/* --------------------------------------------------------------- */
	void            Array::printToFile (FILE * file) const {
	}
d81 1
a81 4
/* --------------------------------------------------------------- */
	void            Array::print () const {
		printToFile (stdout);
	}
d83 4
a86 4
/* --------------------------------------------------------------- */
	void            Array::printDimensions () const {
		printf ("printDimensions of Array at %p - ", this);
		printf ("%d Dimensions:", ndims);
d88 3
a90 3
			printf ("%d ", dims[i]);
		printf ("(=%d elements)\n", nelem);
	}
d92 4
a95 5
/* --------------------------------------------------------------- */
	Array2D::Array2D ()
	: A (NULL) {
		/* printf("Constructor Array2D\n\n"); */
	}
d97 1
a97 3
	Array2D::Array2D (int m1, int m2)
	: Array (m1, m2) {
		/* printf("Constructor Array2D(int, int)\n\n"); */
d99 1
a99 1
	}
d101 1
a101 4
/* --------------------------------------------------------------- */
	Array2D::Array2D (const int *_dims)
	: Array (_dims[0], _dims[1]) {
		/* printf(Constructor Array2D( const int*)\n\n"); */
d103 1
a103 1
	}
d105 1
a105 4
/* --------------------------------------------------------------- */
	Array2D::Array2D (const Array2D & A2)
	: Array (A2) {
		/* printf("Constructor: Array2D( const Array2D&)\n"); */
d107 1
a107 1
	}
d109 3
a111 7
/*  Printing the content of an Array2D A into a given file.
 *  date 28/04/2005 author Stefan Heldmann */
/* --------------------------------------------------------------- */
	void            Array2D::printToFile (FILE * file) const {
		/* printf("Array2D :: printToFile\n"); */
		/* printf("%d %d\n",dims[0], dims[1]); */

a112 2

		/* printf("Array2D :: printToFile\n"); */
d114 1
a114 1
	}
d116 4
a119 4
/* --------------------------------------------------------------- */
	Array3D::Array3D (int m1, int m2, int m3)
	: Array (m1, m2, m3) {
		/* printf("Constructor Array3D( int, int, int)\n\n"); */
d121 1
a121 1
	}
d123 1
a123 4
/* --------------------------------------------------------------- */
	Array3D::Array3D (const Array3D & A3)
	: Array (A3) {
		/* printf("Constructor Array3D( const Array3D&)\n\n"); */
d125 1
a125 1
	}
d127 9
a135 4
/* Printing the content of an Array3D A into a given file.
 * date 28/04/2005 author Nils Papenberg */
/* --------------------------------------------------------------- */
	void            Array3D::printToFile (FILE * file) const {
d137 4
a140 11
		fprintf (file, "%d %d %d\n", dims[0], dims[1], dims[2]);
		for (int k1 = 0; k1 < dims[0]; k1++) {
			fprintf (file, "A[%d][][] = \n", k1);
			printToFileArray2D (A[k1], dims[1], dims[2], file);
		}
	}

/* --------------------------------------------------------------- */
	Array4D::Array4D (int m1, int m2, int m3, int m4)
	: Array (m1, m2, m3, m4) {
		/* printf("Constructor Array3D( int, int, int)\n\n"); */
d142 1
a142 1
	}
d144 1
a144 3
	Array4D::Array4D (const Array4D & A4)
	: Array (A4) {
		/* printf("Constructor Array3D( const Array3D&)\n\n"); */
d146 1
a146 1
	}
d148 5
a152 5
/* ------------------------------------------------------- */
/*  Printing the content of an Array4D A into a given file */
	void            Array4D::writeToConsole () const {
		int             k1, k2, k3, k4;
		printf ("dims = %d %d %d %d \n", dims[0], dims[1], dims[2], dims[3]);
d154 18
d173 1
a173 1
			printf ("k1 = %d\n", k1);
d176 8
a183 8
					for (k2 = 0; k2 < dims[1]; k2++) 
						printf ("%8.6f ", A[k1][k2][k3][k4]);
					printf ("\n");
				}
				printf ("--\n");
			}
		}
	}
d185 1
a185 1
}	/* namespace */
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
		/* printf("Constructor Array(int, int)\n\n"); */
a126 1

a153 1
/* --------------------------------------------------------------- */
d185 1
a185 1
		for             (k1 = 0; k1 < dims[0]; k1++) {
@
