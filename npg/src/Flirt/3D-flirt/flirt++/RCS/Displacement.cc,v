head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2008.05.22.14.56.51;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.16.52.28;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.13.53.57;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.07.14.41.45;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include "Displacement.h"
#include "Array.h"

namespace flirt
{

	Displacement :: Displacement():h(NULL) {};

	Displacement :: Displacement(const double* _h) {
		h = new double[ndims];
		for (int k1 = 0; k1 < ndims; k1++) {
			h[k1] = _h[k1];
		}
	};

	Displacement :: ~Displacement() {
		if (h != NULL) delete[] h;
	};

	const double* Displacement :: getVoxelSize() const
	{
		return h;
	};

	// ----------------
	// Displacement 2D
	// ----------------
	Displacement2D :: Displacement2D() {};

	Displacement2D :: Displacement2D( int m1, int m2, double h1, double h2)
		: Array(2, m1, m2), Array3D( 2, m1, m2) {
		h = new double[2];
		h[0] = h1;
		h[1] = h2;
	};

	Displacement2D :: Displacement2D( const int* _dims, double h1, double h2)
		: Array(2, _dims[0], _dims[1]), Array3D( 2, _dims[0], _dims[1]) {
		h = new double[2];
		h[0] = h1;
		h[1] = h2;
	};

	Displacement2D :: Displacement2D(const int* _dims, const double* h)
		: Array(2, _dims[0], _dims[1]), Array3D( 2, _dims[0], _dims[1]), Displacement( h) {
	};

	Displacement2D :: Displacement2D( const Displacement2D& u)
		: Array( u), Array3D(u) {
		h = new double[2];
		h[0] = u.h[0];
		h[1] = u.h[1];
	};

	Displacement2D :: ~Displacement2D() {};

	// ----------------
	// Displacement 3D
	// ---------------
	Displacement3D :: Displacement3D() {};

	Displacement3D :: Displacement3D( int m1, int m2, int m3, double h1, double h2, double h3)
		: Array(3, m1, m2, m3), Array4D(3, m1, m2, m3) {
		h = new double[3];
		h[0] = h1;
		h[1] = h2;
		h[2] = h3;
	};

	Displacement3D :: Displacement3D( const int* _dims, double h1, double h2, double h3)
		: Array(3, _dims[0], _dims[1], _dims[2]), Array4D(3, _dims[0], _dims[1], _dims[2]) {
		h = new double[3];
		h[0] = h1;
		h[1] = h2;
		h[2] = h3;
	};

	Displacement3D :: Displacement3D(const int* _dims, const double* h)
		: Array(3, _dims[0], _dims[1], _dims[2]), Array4D(3, _dims[0], _dims[1], _dims[2]), Displacement( h) {};

	Displacement3D :: Displacement3D( const Displacement3D& u)
		: Array( u), Array4D(u) {
		h = new double[3];
		h[0] = u.h[0];
		h[1] = u.h[1];
		h[2] = u.h[2];
	};

	Displacement3D :: ~Displacement3D() {};

}	//namespace flirt


// Swap Displacement U1 with U2.
// Just the data pointers are swapped. The rest of the attributes are unchanged.
//---------------------------------------------------------------------------
void flirt :: swapDisplacements(Displacement &U1, Displacement &U2)
{
	double* tmp = U1.data;
	U1.data = U2.data;
	U2.data = tmp;
};
@


1.3
log
@May 20 version
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d4 2
a5 2
namespace flirt {
// ------------------------------------------------------------------------------
d7 1
a7 3
Displacement::Displacement():h(NULL){
  //printf("Constructor Displacement\n\n");
};
d9 6
a14 1
// ------------------------------------------------------------------------------
d16 3
a18 7
Displacement :: Displacement(const double* _h) {
  //printf("Constructor Displacement( double*)\n\n");
  h = new double[ndims];
  for (int k1 = 0; k1 < ndims; k1++) {
    h[k1] = _h[k1];
  }
};
d20 4
a23 1
// ------------------------------------------------------------------------------
d25 4
a28 4
Displacement :: ~Displacement() {
  //printf("Destructor Displacement\n\n");
  if (h != NULL) delete[] h;
};
d30 6
a35 1
// ------------------------------------------------------------------------------
d37 6
a42 3
const double* Displacement::getVoxelSize() const {
  return h;
};
d44 3
a46 3
// ------------------------------------------------------------------------------
// Displacement 2D
// ------------------------------------------------------------------------------
d48 6
a53 3
Displacement2D :: Displacement2D() {
  //printf("Constructor Displacement2D \n\n");
};
d55 1
a55 1
// ------------------------------------------------------------------------------
d57 4
a60 7
  Displacement2D :: Displacement2D( int m1, int m2, double h1, double h2) 
    : Array(2, m1, m2), Array3D( 2, m1, m2) {
    //printf("Constructor Displacement2D( int, int, double, double)\n\n");
    h = new double[2];
    h[0] = h1;
    h[1] = h2;
  };
d62 7
a68 8
// ------------------------------------------------------------------------------
  Displacement2D :: Displacement2D( const int* _dims, double h1, double h2) 
    : Array(2, _dims[0], _dims[1]), Array3D( 2, _dims[0], _dims[1]) {
    //printf("Constructor Displacement2D( int*, double, double)\n\n");
    h = new double[2];
    h[0] = h1;
    h[1] = h2;
  }
d70 7
a76 5
// ------------------------------------------------------------------------------
  Displacement2D :: Displacement2D(const int* _dims, const double* h)
    : Array(2, _dims[0], _dims[1]), Array3D( 2, _dims[0], _dims[1]), Displacement( h){
    //printf("Constructor Displacement2D( int*, double*)\n\n");
  };
d78 2
a79 1
// ------------------------------------------------------------------------------
d81 7
a87 7
  Displacement2D :: Displacement2D( const Displacement2D& u)
    : Array( u), Array3D(u) {
    //printf("Constructor Displacement2D( const Displacement2D &)\n\n");
    h = new double[2];
    h[0] = u.h[0];
    h[1] = u.h[1];
  };
d89 1
a89 1
// ------------------------------------------------------------------------------
d91 1
a91 3
Displacement2D :: ~Displacement2D() {
  //printf("Destructor Displacement2D\n\n");
};
d94 2
a95 58


// ------------------------------------------------------------------------------
// Displacement 3D
// ------------------------------------------------------------------------------

 Displacement3D :: Displacement3D() {
  //printf("Constructor Displacement3D \n\n");
};

// ------------------------------------------------------------------------------

  Displacement3D :: Displacement3D( int m1, int m2, int m3, double h1, double h2, double h3) 
    : Array(3, m1, m2, m3), Array4D(3, m1, m2, m3) {
    //printf("Constructor Displacement3D( int, int, int, double, double, double)\n\n");
    h = new double[3];
    h[0] = h1;
    h[1] = h2;
    h[2] = h3;
  };

// ------------------------------------------------------------------------------
  Displacement3D :: Displacement3D( const int* _dims, double h1, double h2, double h3) 
    : Array(3, _dims[0], _dims[1], _dims[2]), Array4D(3, _dims[0], _dims[1], _dims[2]) {
    //printf("Constructor Displacement3D( int*, double, double)\n\n");
    h = new double[3];
    h[0] = h1;
    h[1] = h2;
    h[2] = h3;
  }

// ------------------------------------------------------------------------------
  Displacement3D :: Displacement3D(const int* _dims, const double* h)
    : Array(3, _dims[0], _dims[1], _dims[2]), Array4D(3, _dims[0], _dims[1], _dims[2]), Displacement( h){
    //printf("Constructor Displacement3D( int*, double*)\n\n");
  };

// ------------------------------------------------------------------------------

  Displacement3D :: Displacement3D( const Displacement3D& u)
    : Array( u), Array4D(u) {
    //printf("Constructor Displacement3D( const Displacement2D &)\n\n");
    h = new double[3];
    h[0] = u.h[0];
    h[1] = u.h[1];
    h[2] = u.h[2];
  };

// ------------------------------------------------------------------------------

Displacement3D :: ~Displacement3D() {
  //printf("Destructor Displacement3D\n\n");
};


} //namespace flirt


d97 5
a101 12
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------


/** Swap Displacement U1 with U2.
    Just the data pointers are swap. The rest of the attributes are unchanged.
*/
void flirt::swapDisplacements(Displacement &U1, Displacement &U2) {
  double* tmp = U1.data;
  U1.data = U2.data;
  U2.data = tmp;
	
@


1.1
log
@Initial revision
@
text
@@
