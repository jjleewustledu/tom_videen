head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2008.05.22.14.56.14;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.16.49.51;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.13.53.19;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.06.21.18.40;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include <stdlib.h>
#include <math.h>
#include <tools.h>

//	C[i] = A[i] + B[i]
void            add (const double *A, const double *B, double *C, size_t len)
{
	int             i;
	for (i = 0; i < len; ++i)
		C[i] = A[i] + B[i];
}


//	C[i] = A[i] - B[i]
void            sub (const double *A, const double *B, double *C, size_t len)
{
	int             i;
	for (i = 0; i < len; ++i)
		C[i] = A[i] - B[i];
}


//	C[i] = alpha * B[i]
void            mult (const double alpha, const double *B, double *C, size_t len)
{
	int             i;
	for (i = 0; i < len; ++i)
		C[i] = alpha * B[i];
}


//	C[i] = A[i] * B[i]
void            dot (const double *A, const double *B, double *C, size_t len)
{
	int             i;
	for (i = 0; i < len; ++i)
		C[i] = A[i] * B[i];
}


//	iprod(A,B) = sum_i A[i] * B[i]
double          iprod (const double *A, const double *B, size_t len)
{
	int             i;
	double          p = 0;
	for (i = 0; i < len; ++i)
		p += A[i] * B[i];
	return p;
}


//	A[i] = val
double          setValue (double *A, size_t len, double val)
{
	int             i;
	for (i = 0; i < len; ++i)
		A[i] = val;
	return *A;
}


//	norm2 = sqrt(iprod(A,A))
double          norm2 (const double *A, size_t len)
{
	return sqrt (iprod (A, A, len));
}


//	normInf = max_i abs(A[i]
double          normInf (const double *A, size_t len)
{
	int             i;
	double          norm = 0.0;
	for (i = 0; i < len; ++i)
		norm = max (fabs (A[i]), norm);
	return norm;
}


//	dist2 = sum_i (A[i] - B[i])^2
double          dist2 (const double *A, const double *B, size_t len)
{
	int             i;
	double          tmp;
	double          dist = 0.0;
	for (i = 0; i < len; i++) {
		tmp = A[i] - B[i];
		dist += tmp * tmp;
	}
	return dist;
}


//	distInf = max_i (abs(A[i] - B[i])
double          distInf (const double *A, const double *B, size_t len)
{
	int             i;
	double          dist = 0.0;
	for (i = 0; i < len; i++)
		dist = min (fabs (A[i] - B[i]), dist);
	return dist;
}
@


1.3
log
@May 20 version
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d5 1
a5 1
/* C[i] = A[i] + B[i]  */
d13 2
a14 1
/* C[i] = A[i] - B[i]  */
d22 2
a23 1
/* C[i] = alpha * B[i]  */
d31 2
a32 1
/* C[i] = A[i] * B[i]  */
d40 2
a41 1
/* iprod(A,B) = sum_i A[i] * B[i]  */
d51 2
a52 1
/* brief A[i] = val */
d61 2
a62 1
/* norm2 = sqrt(iprod(A,A)) */
d69 1
a69 1
/* normInf = max_i abs(A[i] */
d79 2
a80 1
/* brief dist2 = sum_i (A[i] - B[i])^2*/
d93 2
a94 1
/* brief distInf = max_i (abs(A[i] - B[i]) */
@


1.1
log
@Initial revision
@
text
@a10 1

a18 1

a20 1

a28 1

a36 1

a55 1

@
