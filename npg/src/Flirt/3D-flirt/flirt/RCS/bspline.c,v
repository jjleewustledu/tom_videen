head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2008.05.22.14.56.14;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.16.49.51;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.13.53.19;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.06.21.18.40;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include <bspline.h>
#include <defs.h>
#include <fftw3.h>
#include <stdlib.h>
#include <math.h>

void            computeBSplineCoeff1D (double I[], int N, double C[])
{
	double          *inv_l;
	double          *u;
	int             i;

	inv_l = (double *) calloc (N, sizeof(double));
	u = (double *) calloc (N-1, sizeof(double));

	// Compute LU factorization

	inv_l[0] = 6.0 / 4.0;
	u[0] = 1.0 / 4.0;
	for (i = 1; i < N - 1; ++i) {
		inv_l[i] = 1.0 / ((1.0 / 6.0) * (4.0 - u[i - 1]));
		u[i] = (1.0 / 6.0) * inv_l[i];
	}
	inv_l[N - 1] = 1.0 / ((1.0 / 6.0) * (4.0 - u[N - 2]));

	C[0] = I[0] * inv_l[0];

	for (i = 1; i < N; ++i)						  // Forward substitution
		C[i] = (I[i] - (1.0 / 6.0) * C[i - 1]) * inv_l[i];

	for (i = N - 2; i >= 0; --i)				  // Backward substitution
		C[i] -= u[i] * C[i + 1];
}


void            computeBSplineCoeff2D (double I[], int m, int n, double C[])
{
	int             N = (m > n) ? m : n;
	double          *inv_l;
	double          *u;
	int             i, j, ij;

	inv_l = (double *) calloc (N, sizeof(double));
	u = (double *) calloc (N-1, sizeof(double));

	// Compute LU factorization

	inv_l[0] = 6.0 / 4.0;
	u[0] = 1.0 / 4.0;
	for (i = 1; i < N - 1; ++i) {
		inv_l[i] = 1.0 / ((1.0 / 6.0) * (4.0 - u[i - 1]));
		u[i] = (1.0 / 6.0) * inv_l[i];
	}
	inv_l[N - 1] = 1.0 / ((1.0 / 6.0) * (4.0 - u[N - 2]));

	for (i = 0; i < m; ++i) {					  // For all rows
		ij = i;									  // Forward substitution
		C[ij] = I[ij] * inv_l[0];
		for (j = 1; j < n; ++j) {
			ij += m;
			C[ij] = (I[ij] - (1.0 / 6.0) * C[ij - m]) * inv_l[j];
		}
		ij = i + m * (n - 1);					  // Backward substitution
		for (j = n - 2; j >= 0; --j) {
			ij -= m;
			C[ij] -= u[j] * C[ij + m];
		}
	}

	for (j = 0; j < n; ++j) {					  // For all cols
		ij = m * j;								  // Forward substitution
		C[ij] *= inv_l[0];
		for (i = 1; i < m; ++i) {
			ij++;
			C[ij] = (C[ij] - (1.0 / 6.0) * C[ij - 1]) * inv_l[i];
		}
		ij = (m - 1) + m * j;					  // Backward substitution
		for (i = m - 2; i >= 0; --i) {
			ij--;
			C[ij] -= u[i] * C[ij + 1];
		}
	}
}


void            computeBSplineCoeff3D (double I[], int m, int n, int p, double C[])
{
	int             N = (((m > n) ? m : n) > p) ? ((m > n) ? m : n) : p;
	double          *inv_l;
	double          *u;
	int             i, j, k, ijk, mn;

	inv_l = (double *) calloc (N, sizeof(double));
	u = (double *) calloc (N-1, sizeof(double));

	// Compute LU factorization

	inv_l[0] = 6.0 / 4.0;
	u[0] = 1.0 / 4.0;
	for (i = 1; i < N - 1; ++i) {
		inv_l[i] = 1.0 / ((1.0 / 6.0) * (4.0 - u[i - 1]));
		u[i] = (1.0 / 6.0) * inv_l[i];
	}
	inv_l[N - 1] = 1.0 / ((1.0 / 6.0) * (4.0 - u[N - 2]));

	mn = m * n;

	for (i = 0; i < m; ++i) {					  // For the 3rd dimensions do
		for (j = 0; j < n; ++j) {
			ijk = i + m * j;					  // Forward substitution
			C[ijk] = I[ijk] * inv_l[0];
			for (k = 1; k < p; ++k) {
				ijk += mn;
				C[ijk] = (I[ijk] - (1.0 / 6.0) * C[ijk - mn]) * inv_l[k];
			}
			ijk = i + m * j + mn * (p - 1);		  // Backward substitution
			for (k = p - 2; k >= 0; --k) {
				ijk -= mn;
				C[ijk] -= u[k] * C[ijk + mn];
			}
		}
	}

	for (i = 0; i < m; ++i) {					  // For the 2nd dimensions do
		for (k = 0; k < p; ++k) {
			ijk = i + mn * k;					  // Forward substitution
			C[ijk] = C[ijk] * inv_l[0];
			for (j = 1; j < n; ++j) {
				ijk += m;
				C[ijk] = (C[ijk] - (1.0 / 6.0) * C[ijk - m]) * inv_l[j];
			}
			ijk = i + m * (n - 1) + mn * k;		  // Backward substitution
			for (j = n - 2; j >= 0; --j) {
				ijk -= m;
				C[ijk] -= u[j] * C[ijk + m];
			}
		}
	}

	for (j = 0; j < n; ++j) {					  // For the 1st dimensions do
		for (k = 0; k < p; ++k) {
			ijk = m * j + mn * k;				  // Forward substitution
			C[ijk] = C[ijk] * inv_l[0];
			for (i = 1; i < m; ++i) {
				ijk++;
				C[ijk] = (C[ijk] - (1.0 / 6.0) * C[ijk - 1]) * inv_l[i];
			}
			ijk = (m - 1) + m * j + mn * k;		  // Backward substitution
			for (i = m - 2; i >= 0; --i) {
				ijk--;
				C[ijk] -= u[i] * C[ijk + 1];
			}
		}
	}
}


void            evalBSpline1D (double C[], int m, double x[], int N, double S[])
{
	int             i, cnt, index;
	int             I[4];
	double          w[4];
	double          tau;

	for (cnt = 0; cnt < N; ++cnt) {
		// Compute interpolation weights for the 1st dimension
		tau = x[cnt] - floor (x[cnt]);
		w[0] = 1.0 / 6.0 * tau * tau * tau;
		w[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w[0];
		w[1] = tau - 2.0 * w[0] + w[3];
		w[2] = 1.0 - w[0] - w[1] - w[3];

		// Check range for the 1st dimension
		index = ((int) floor (x[cnt])) + 2;
		for (i = 0; i < 4; ++i) {
			if ((index < 0) || (index >= m)) {
				I[i] = 0;
				w[i] = 0.0;
			}
			else {
				I[i] = index;
			}
			index--;
		}

		// Perform interpolation
		S[cnt] = C[I[0]] * w[0] + C[I[1]] * w[1] + C[I[2]] * w[2] + C[I[3]] * w[3];
	}
}


void            evalBSplineAndGrad1D (double C[], int m, double x[], int N, double S[], double d_S[])
{
	int             i, cnt, index;
	int             I[4];
	double          w[4];
	double          d_w[4];
	double          tau;

	for (cnt = 0; cnt < N; ++cnt) {
		// Compute interpolation weights for the 1st dimension
		tau = x[cnt] - floor (x[cnt]);
		w[0] = 1.0 / 6.0 * tau * tau * tau;
		w[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w[0];
		w[1] = tau - 2.0 * w[0] + w[3];
		w[2] = 1.0 - w[0] - w[1] - w[3];

		d_w[0] = 0.5 * tau * tau;
		d_w[3] = -0.5 + tau - d_w[0];
		d_w[1] = 1 - 2 * d_w[0] + d_w[3];
		d_w[2] = -d_w[0] - d_w[1] - d_w[3];

		// Check range for the 1st dimension
		index = ((int) floor (x[cnt])) + 2;
		for (i = 0; i < 4; ++i) {
			if ((index < 0) || (index >= m)) {
				I[i] = 0;
				w[i] = 0.0;
				d_w[i] = 0.0;
			}
			else {
				I[i] = index;
			}
			index--;
		}

		// Perform interpolation
		S[cnt] = C[I[0]] * w[0] + C[I[1]] * w[1] + C[I[2]] * w[2] + C[I[3]] * w[3];
		d_S[cnt] =
			C[I[0]] * d_w[0] +
			C[I[1]] * d_w[1] +
			C[I[2]] * d_w[2] +
			C[I[3]] * d_w[3];
	}
}


void            evalBSpline2D (double C[], int m, int n, double x[], double y[], int N, double S[])
{
	int             i, j, cnt, index;
	int             I[4];
	int             J[4];
	double          w1[4];
	double          w2[4];
	double          tau;

	for (cnt = 0; cnt < N; ++cnt) {
		// Compute interpolation weights for the 1st dimension
		tau = x[cnt] - floor (x[cnt]);
		w1[0] = 1.0 / 6.0 * tau * tau * tau;
		w1[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w1[0];
		w1[1] = tau - 2.0 * w1[0] + w1[3];
		w1[2] = 1.0 - w1[0] - w1[1] - w1[3];

		// Compute interpolation weights for the 2nd dimension
		tau = y[cnt] - floor (y[cnt]);
		w2[0] = 1.0 / 6.0 * tau * tau * tau;
		w2[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w2[0];
		w2[1] = tau - 2.0 * w2[0] + w2[3];
		w2[2] = 1.0 - w2[0] - w2[1] - w2[3];

		// Check range for the 1st dimension
		index = ((int) floor (x[cnt])) + 2;
		for (i = 0; i < 4; ++i) {
			if ((index < 0) || (index >= m)) {
				I[i] = 0;
				w1[i] = 0.0;
			}
			else {
				I[i] = index;
			}
			index--;
		}

		// Check range for the 2nd dimension
		index = ((int) floor (y[cnt])) + 2;
		for (j = 0; j < 4; ++j) {
			if ((index < 0) || (index >= n)) {
				J[j] = 0;
				w2[j] = 0.0;
			}
			else {
				J[j] = m * index;
			}
			index--;
		}

		// Perform interpolation
		S[cnt] = 0.0;
		for (i = 0; i < 4; ++i) {
			S[cnt] += w1[i] * (C[I[i] + J[0]] * w2[0] +
				C[I[i] + J[1]] * w2[1] +
				C[I[i] + J[2]] * w2[2] +
				C[I[i] + J[3]] * w2[3]);
		}
	}
}


void            evalBSplineAndGrad2D (double C[], int m, int n, double x[], double y[], int N,
									double S[], double d1_S[], double d2_S[])
{
	int             i, j, cnt, index;
	int             I[4];
	int             J[4];
	double          w1[4];
	double          d_w1[4];
	double          w2[4];
	double          d_w2[4];
	double          sum_j;
	double          tau;

	for (cnt = 0; cnt < N; ++cnt) {
		// Compute interpolation weights for the 1st dimension
		tau = x[cnt] - floor (x[cnt]);
		w1[0] = 1.0 / 6.0 * tau * tau * tau;
		w1[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w1[0];
		w1[1] = tau - 2.0 * w1[0] + w1[3];
		w1[2] = 1.0 - w1[0] - w1[1] - w1[3];

		d_w1[0] = 0.5 * tau * tau;
		d_w1[3] = -0.5 + tau - d_w1[0];
		d_w1[1] = 1 - 2 * d_w1[0] + d_w1[3];
		d_w1[2] = -d_w1[0] - d_w1[1] - d_w1[3];

		// Compute interpolation weights for the 2nd dimension
		tau = y[cnt] - floor (y[cnt]);
		w2[0] = 1.0 / 6.0 * tau * tau * tau;
		w2[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w2[0];
		w2[1] = tau - 2.0 * w2[0] + w2[3];
		w2[2] = 1.0 - w2[0] - w2[1] - w2[3];

		d_w2[0] = 0.5 * tau * tau;
		d_w2[3] = -0.5 + tau - d_w2[0];
		d_w2[1] = 1 - 2 * d_w2[0] + d_w2[3];
		d_w2[2] = -d_w2[0] - d_w2[1] - d_w2[3];

		// Check range for the 1st dimension
		index = ((int) floor (x[cnt])) + 2;
		for (i = 0; i < 4; ++i) {
			if ((index < 0) || (index >= m)) {
				I[i] = 0;
				w1[i] = 0.0;
				d_w1[i] = 0.0;
			}
			else {
				I[i] = index;
			}
			index--;
		}

		// Check range for the 2nd dimension
		index = ((int) floor (y[cnt])) + 2;
		for (j = 0; j < 4; ++j) {
			if ((index < 0) || (index >= n)) {
				J[j] = 0;
				w2[j] = 0.0;
				d_w2[j] = 0.0;
			}
			else {
				J[j] = m * index;
			}
			index--;
		}

		// Perform interpolation
		S[cnt] = 0.0;
		d1_S[cnt] = 0.0;
		d2_S[cnt] = 0.0;
		for (i = 0; i < 4; ++i) {
			sum_j = (C[I[i] + J[0]] * w2[0] +
				C[I[i] + J[1]] * w2[1] +
				C[I[i] + J[2]] * w2[2] +
				C[I[i] + J[3]] * w2[3]);

			S[cnt] += w1[i] * sum_j;
			d1_S[cnt] += d_w1[i] * sum_j;
			d2_S[cnt] += w1[i] * (C[I[i] + J[0]] * d_w2[0] +
				C[I[i] + J[1]] * d_w2[1] +
				C[I[i] + J[2]] * d_w2[2] +
				C[I[i] + J[3]] * d_w2[3]);
		}
	}
}


void            evalBSpline3D (double C[], int m, int n, int p, double x[], double y[], double z[], int N, double S[])
{
	int             i, j, k, ij, cnt, index, mn;
	int             I[4];
	int             J[4];
	int             K[4];
	double          w1[4];
	double          w2[4];
	double          w3[4];
	double          tau, sum_jk, sum_k;

	mn = m * n;

	for (cnt = 0; cnt < N; ++cnt) {
		// Compute interpolation weights for the 1st dimension
		tau = x[cnt] - floor (x[cnt]);
		w1[0] = 1.0 / 6.0 * tau * tau * tau;
		w1[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w1[0];
		w1[1] = tau - 2.0 * w1[0] + w1[3];
		w1[2] = 1.0 - w1[0] - w1[1] - w1[3];

		// Compute interpolation weights for the 2nd dimension
		tau = y[cnt] - floor (y[cnt]);
		w2[0] = 1.0 / 6.0 * tau * tau * tau;
		w2[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w2[0];
		w2[1] = tau - 2.0 * w2[0] + w2[3];
		w2[2] = 1.0 - w2[0] - w2[1] - w2[3];

		// Compute interpolation weights for the 3rd dimension
		tau = z[cnt] - floor (z[cnt]);
		w3[0] = 1.0 / 6.0 * tau * tau * tau;
		w3[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w3[0];
		w3[1] = tau - 2.0 * w3[0] + w3[3];
		w3[2] = 1.0 - w3[0] - w3[1] - w3[3];

		// Check range for the 1st dimension
		index = ((int) floor (x[cnt])) + 2;
		for (i = 0; i < 4; ++i) {
			if ((index < 0) || (index >= m)) {
				I[i] = 0;
				w1[i] = 0.0;
			}
			else {
				I[i] = index;
			}
			index--;
		}

		// Check range for the 2nd dimension
		index = ((int) floor (y[cnt])) + 2;
		for (j = 0; j < 4; ++j) {
			if ((index < 0) || (index >= n)) {
				J[j] = 0;
				w2[j] = 0.0;
			}
			else {
				J[j] = m * index;
			}
			index--;
		}

		// Check range for the 3rd dimension
		index = ((int) floor (z[cnt])) + 2;
		for (k = 0; k < 4; ++k) {
			if ((index < 0) || (index >= p)) {
				K[k] = 0;
				w3[k] = 0.0;
			}
			else {
				K[k] = mn * index;
			}
			index--;
		}

		// Perform interpolation
		S[cnt] = 0.0;
		for (i = 0; i < 4; ++i) {
			sum_jk = 0.0;
			for (j = 0; j < 4; ++j) {
				sum_k = 0.0;
				ij = I[i] + J[j];
				for (k = 0; k < 4; ++k) {
					sum_k += w3[k] * C[ij + K[k]];
				}
				sum_jk += w2[j] * sum_k;
			}
			S[cnt] += w1[i] * sum_jk;
		}
	}
}


void            evalBSplineAndGrad3D (double C[], int m, int n,  int p, double x[], double y[], double z[], int N,
								double S[], double d1_S[], double d2_S[], double d3_S[])
{
	int             i, j, k, ij, cnt, index, mn;
	int             I[4];
	int             J[4];
	int             K[4];
	double          w1[4];
	double          w2[4];
	double          w3[4];
	double          d_w1[4];
	double          d_w2[4];
	double          d_w3[4];
	double          tau, sum_jk, sum_k, d3_sum_k, d2_sum_jk, d3_sum_jk;

	mn = m * n;

	for (cnt = 0; cnt < N; ++cnt) {
		// Compute interpolation weights for the 1st dimension
		tau = x[cnt] - floor (x[cnt]);
		w1[0] = 1.0 / 6.0 * tau * tau * tau;
		w1[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w1[0];
		w1[1] = tau - 2.0 * w1[0] + w1[3];
		w1[2] = 1.0 - w1[0] - w1[1] - w1[3];

		d_w1[0] = 0.5 * tau * tau;
		d_w1[3] = -0.5 + tau - d_w1[0];
		d_w1[1] = 1 - 2 * d_w1[0] + d_w1[3];
		d_w1[2] = -d_w1[0] - d_w1[1] - d_w1[3];

		// Compute interpolation weights for the 2nd dimension
		tau = y[cnt] - floor (y[cnt]);
		w2[0] = 1.0 / 6.0 * tau * tau * tau;
		w2[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w2[0];
		w2[1] = tau - 2.0 * w2[0] + w2[3];
		w2[2] = 1.0 - w2[0] - w2[1] - w2[3];

		d_w2[0] = 0.5 * tau * tau;
		d_w2[3] = -0.5 + tau - d_w2[0];
		d_w2[1] = 1 - 2 * d_w2[0] + d_w2[3];
		d_w2[2] = -d_w2[0] - d_w2[1] - d_w2[3];

		// Compute interpolation weights for the 3rd dimension
		tau = z[cnt] - floor (z[cnt]);
		w3[0] = 1.0 / 6.0 * tau * tau * tau;
		w3[3] = 1.0 / 6.0 + 0.5 * tau * (tau - 1.0) - w3[0];
		w3[1] = tau - 2.0 * w3[0] + w3[3];
		w3[2] = 1.0 - w3[0] - w3[1] - w3[3];

		d_w3[0] = 0.5 * tau * tau;
		d_w3[3] = -0.5 + tau - d_w3[0];
		d_w3[1] = 1 - 2 * d_w3[0] + d_w3[3];
		d_w3[2] = -d_w3[0] - d_w3[1] - d_w3[3];

		// Check range for the 1st dimension
		index = ((int) floor (x[cnt])) + 2;
		for (i = 0; i < 4; ++i) {
			if ((index < 0) || (index >= m)) {
				I[i] = 0;
				w1[i] = 0.0;
				d_w1[i] = 0.0;
			}
			else {
				I[i] = index;
			}
			index--;
		}

		// Check range for the 2nd dimension
		index = ((int) floor (y[cnt])) + 2;
		for (j = 0; j < 4; ++j) {
			if ((index < 0) || (index >= n)) {
				J[j] = 0;
				w2[j] = 0.0;
				d_w2[j] = 0.0;
			}
			else {
				J[j] = m * index;
			}
			index--;
		}

		// Check range for the 3rd dimension
		index = ((int) floor (z[cnt])) + 2;
		for (k = 0; k < 4; ++k) {
			if ((index < 0) || (index >= p)) {
				K[k] = 0;
				w3[k] = 0.0;
				d_w3[k] = 0.0;
			}
			else {
				K[k] = mn * index;
			}
			index--;
		}

		// Perform interpolation
		S[cnt] = 0.0;
		d1_S[cnt] = 0.0;
		d2_S[cnt] = 0.0;
		d3_S[cnt] = 0.0;
		for (i = 0; i < 4; ++i) {
			sum_jk = 0.0;
			d2_sum_jk = 0.0;
			d3_sum_jk = 0.0;
			for (j = 0; j < 4; ++j) {
				sum_k = 0.0;
				d3_sum_k = 0.0;
				ij = I[i] + J[j];
				for (k = 0; k < 4; ++k) {
					sum_k += w3[k] * C[ij + K[k]];
					d3_sum_k += d_w3[k] * C[ij + K[k]];
				}
				sum_jk += w2[j] * sum_k;
				d2_sum_jk += d_w2[j] * sum_k;
				d3_sum_jk += w2[j] * d3_sum_k;
			}
			S[cnt] += w1[i] * sum_jk;
			d1_S[cnt] += d_w1[i] * sum_jk;
			d2_S[cnt] += w1[i] * d2_sum_jk;
			d3_S[cnt] += w1[i] * d3_sum_jk;
		}
	}
}


void            convertToBSplineCoeff2D (double *C, int m1, int m2)
{
	computeBSplineCoeff2D (C, m1, m2, C);
}


void            computeApproxBSplineCoeff2D (double *I, int m1, int m2, double tau, boundary_t bc, double *C)
{
	int             j1, j2, k;
	double         *lambda1 = (double *) fftw_malloc (sizeof (double) * m1);
	double         *lambda2 = (double *) fftw_malloc (sizeof (double) * m2);
	double         *tmp = (double *) fftw_malloc (sizeof (double) * m1 * m2);
	double          fftw_normfac = 1.0 / ((double) (2 * m1 * 2 * m2));

	fftw_plan       forward;
	fftw_plan       backward;

	switch (bc) {
		case DIRICHLET:
			forward = fftw_plan_r2r_2d (m2, m1, I, tmp, FFTW_RODFT10, FFTW_RODFT10, FFTW_ESTIMATE | FFTW_PRESERVE_INPUT);
			backward = fftw_plan_r2r_2d (m2, m1, tmp, C, FFTW_RODFT01, FFTW_RODFT01, FFTW_ESTIMATE);
			// Precompute eigenvalues
			for (k = 0; k < m1; ++k)
				lambda1[k] = (2.0 - 2.0 * cos (((double) (k + 1)) * PI / ((double) m1)));
			for (k = 0; k < m2; ++k)
				lambda2[k] = (2.0 - 2.0 * cos (((double) (k + 1)) * PI / ((double) m2)));
			break;

		case NEUMANN:
			forward = fftw_plan_r2r_2d (m2, m1, I, tmp, FFTW_REDFT10, FFTW_REDFT10, FFTW_ESTIMATE | FFTW_PRESERVE_INPUT);
			backward = fftw_plan_r2r_2d (m2, m1, tmp, C, FFTW_REDFT01, FFTW_REDFT01, FFTW_ESTIMATE);
			// Precompute eigenvalues
			for (k = 0; k < m1; ++k)
				lambda1[k] = (2.0 - 2.0 * cos (((double) k) * PI / ((double) m1)));
			for (k = 0; k < m2; ++k)
				lambda2[k] = (2.0 - 2.0 * cos (((double) k) * PI / ((double) m2)));

	}

	fftw_execute (forward);

	for (j2 = 0; j2 < m2; ++j2)
		for (j1 = 0; j1 < m1; ++j1)
			tmp[j1 + m1 * j2] *= 1.0 / (1.0 + tau * (lambda1[j1] + lambda2[j2]) * (lambda1[j1] + lambda2[j2]));

	fftw_execute (backward);

	convertToBSplineCoeff2D (C, m1, m2);

	fftw_destroy_plan (forward);
	fftw_destroy_plan (backward);
	fftw_free (lambda1);
	fftw_free (lambda2);
	fftw_free (tmp);
}


void            convertToBSplineCoeff3D (double *C, int m1, int m2, int m3)
{
	computeBSplineCoeff3D (C, m1, m2, m3, C);
}


void            computeApproxBSplineCoeff3D (double *I, int m1, int m2, int m3, double tau, boundary_t bc, double *C)
{
	int             j1, j2, j3, k;
	double         *lambda1 = (double *) fftw_malloc (sizeof (double) * m1);
	double         *lambda2 = (double *) fftw_malloc (sizeof (double) * m2);
	double         *lambda3 = (double *) fftw_malloc (sizeof (double) * m3);
	double         *tmp = (double *) fftw_malloc (sizeof (double) * m1 * m2 * m3);

	double          fftw_normfac = 1.0 / ((double) (2 * m1 * 2 * m2 * 2 * m3));

	fftw_plan       forward;
	fftw_plan       backward;

	switch (bc) {
		case DIRICHLET:
			forward = fftw_plan_r2r_3d (m3, m2, m1, I, tmp,
				FFTW_RODFT10, FFTW_RODFT10, FFTW_RODFT10,
				FFTW_ESTIMATE | FFTW_PRESERVE_INPUT);
			backward = fftw_plan_r2r_3d (m3, m2, m1, tmp, C,
				FFTW_RODFT01, FFTW_RODFT01, FFTW_RODFT01,
				FFTW_ESTIMATE);
			// Precompute eigenvalues
			for (k = 0; k < m1; ++k)
				lambda1[k] = (2.0 - 2.0 * cos (((double) (k + 1)) * PI / ((double) m1)));
			for (k = 0; k < m2; ++k)
				lambda2[k] = (2.0 - 2.0 * cos (((double) (k + 1)) * PI / ((double) m2)));
			for (k = 0; k < m3; ++k)
				lambda3[k] = (2.0 - 2.0 * cos (((double) (k + 1)) * PI / ((double) m3)));
			break;

		case NEUMANN:
			forward = fftw_plan_r2r_3d (m3, m2, m1, I, tmp,
				FFTW_REDFT10, FFTW_REDFT10, FFTW_REDFT10,
				FFTW_ESTIMATE | FFTW_PRESERVE_INPUT);
			backward = fftw_plan_r2r_3d (m3, m2, m1, tmp, C,
				FFTW_REDFT01, FFTW_REDFT01, FFTW_REDFT01,
				FFTW_ESTIMATE);
			// Precompute eigenvalues
			for (k = 0; k < m1; ++k)
				lambda1[k] = (2.0 - 2.0 * cos (((double) k) * PI / ((double) m1)));
			for (k = 0; k < m2; ++k)
				lambda2[k] = (2.0 - 2.0 * cos (((double) k) * PI / ((double) m2)));
			for (k = 0; k < m3; ++k)
				lambda3[k] = (2.0 - 2.0 * cos (((double) k) * PI / ((double) m3)));
	}

	fftw_execute (forward);

	for (j3 = 0; j3 < m3; ++j3)
		for (j2 = 0; j2 < m2; ++j2)
			for (j1 = 0; j1 < m1; ++j1)
				tmp[j1 + m1 * (j2 + m2 * j3)] *=
					1.0 / (1.0 + tau * (lambda1[j1] + lambda2[j2] + lambda3[j3]) * (lambda1[j1] + lambda2[j2] + lambda3[j3]));

	fftw_execute (backward);

	convertToBSplineCoeff3D (C, m1, m2, m3);

	fftw_destroy_plan (forward);
	fftw_destroy_plan (backward);
	fftw_free (lambda1);
	fftw_free (lambda2);
	fftw_free (lambda3);
	fftw_free (tmp);
}
@


1.3
log
@May 20 version
@
text
@@


1.2
log
@*** empty log message ***
@
text
@a6 1
/* -------------------------------------------------------------------------- */
d16 2
a17 1
	/* Compute LU factorization */
d28 1
a28 2
	/* Forward substitution */
	for (i = 1; i < N; ++i) 
d31 1
a31 2
	/* Backward substitution */
	for (i = N - 2; i >= 0; --i)
d35 1
a35 1
/* -------------------------------------------------------------------------- */
d46 1
a46 1
	/* compute LU factorization */
d56 2
a57 5
	/* for all rows do */

	for (i = 0; i < m; ++i) {
		/* Forward substitution */
		ij = i;
d63 1
a63 3

		/* Backward substitution */
		ij = i + m * (n - 1);
d70 2
a71 6
	/* for all cols do */

	for (j = 0; j < n; ++j) {

		/* Forward substitution */
		ij = m * j;
a72 1

d77 1
a77 4

		/* Backward substitution */

		ij = (m - 1) + m * j;
d85 1
a85 1
/* -------------------------------------------------------------------------- */
d88 1
a88 1
	int             N = (((m > n) ? m : n) > p) ? ((m > n) ? m : n) : p;	/* N = max{m,n,p} */
d96 1
a96 1
	/* Compute LU factorization */
d108 1
a108 3
	/* For the 3rd dimensions do */

	for (i = 0; i < m; ++i) {
d110 1
a110 4

			/* Forward substitution */

			ijk = i + m * j;
d116 1
a116 4

			/* Backward substitution */

			ijk = i + m * j + mn * (p - 1);
d124 1
a124 3
	/* for the 2nd dimensions do */

	for (i = 0; i < m; ++i) {
d126 1
a126 4

			/* Forward substitution */

			ijk = i + mn * k;
d132 1
a132 4

			/* Backward substitution */

			ijk = i + m * (n - 1) + mn * k;
d140 1
a140 3
	/* for the 1st dimensions do */

	for (j = 0; j < n; ++j) {
d142 1
a142 4

			/* Forward substitution */

			ijk = m * j + mn * k;
d148 1
a148 4

			/* Backward substitution */

			ijk = (m - 1) + m * j + mn * k;
d157 2
a158 6
/* -------------------------------------------------------------------------- */
void            evalBSpline1D (double C[],
			                       int m,
			                       double x[],
			                       int N,
			                       double S[])
d166 1
a166 1
		/* Compute interpolation weights for the 1st dimension */
d173 1
a173 1
		/* Check range for the 1st dimension */
d179 2
a180 1
			} else {
d186 1
a186 1
		/* Perform interpolation */
d191 2
a192 7
/* -------------------------------------------------------------------------- */
void            evalBSplineAndGrad1D (double C[],
				                      int m,
				                      double x[],
				                      int N,
				                      double S[],
				                      double d_S[])
d201 1
a201 1
		/* Compute interpolation weights for the 1st dimension */
d213 1
a213 1
		/* Check range for the 1st dimension */
d220 2
a221 1
			} else {
d227 1
a227 1
		/* Perform interpolation */
d237 2
a238 8
/* -------------------------------------------------------------------------- */
void            evalBSpline2D (double C[],
			                       int m,
			                       int n,
			                       double x[],
			                       double y[],
			                       int N,
			                       double S[])
d248 1
a248 1
		/* Compute interpolation weights for the 1st dimension */
d255 1
a255 1
		/* Compute interpolation weights for the 2nd dimension */
d262 1
a262 1
		/* Check range for the 1st dimension */
d268 2
a269 1
			} else {
d275 1
a275 1
		/* Check range for the 2nd dimension */
d281 2
a282 1
			} else {
d288 1
a288 1
		/* Perform interpolation */
d292 3
a294 3
					   C[I[i] + J[1]] * w2[1] +
					   C[I[i] + J[2]] * w2[2] +
					   C[I[i] + J[3]] * w2[3]);
d299 3
a301 10
/* -------------------------------------------------------------------------- */
void            evalBSplineAndGrad2D (double C[],
				                      int m,
				                      int n,
				                      double x[],
				                      double y[],
				                      int N,
				                      double S[],
				                      double d1_S[],
				                      double d2_S[])
d314 1
a314 1
		/* Compute interpolation weights for the 1st dimension */
d326 1
a326 1
		/* Compute interpolation weights for the 2nd dimension */
d338 1
a338 1
		/* check range for the 1st dimension */
d345 2
a346 1
			} else {
d352 1
a352 1
		/* check range for the 2nd dimension */
d359 2
a360 1
			} else {
d366 1
a366 1
		/* perform interpolation */
d372 3
a374 3
				 C[I[i] + J[1]] * w2[1] +
				 C[I[i] + J[2]] * w2[2] +
				 C[I[i] + J[3]] * w2[3]);
d379 3
a381 3
					      C[I[i] + J[1]] * d_w2[1] +
					      C[I[i] + J[2]] * d_w2[2] +
					      C[I[i] + J[3]] * d_w2[3]);
d386 2
a387 10
/* -------------------------------------------------------------------------- */
void            evalBSpline3D (double C[],
			                       int m,
			                       int n,
			                       int p,
			                       double x[],
			                       double y[],
			                       double z[],
			                       int N,
			                       double S[])
a388 1

d401 1
a401 1
		/* Compute interpolation weights for the 1st dimension */
d408 1
a408 1
		/* Compute interpolation weights for the 2nd dimension */
d415 1
a415 1
		/* Compute interpolation weights for the 3rd dimension */
d422 1
a422 1
		/* check range for the 1st dimension */
d428 2
a429 1
			} else {
d435 1
a435 1
		/* check range for the 2nd dimension */
d441 2
a442 1
			} else {
d448 1
a448 1
		/* check range for the 3rd dimension */
d454 2
a455 1
			} else {
d461 1
a461 1
		/* perform interpolation */
d478 3
a480 13
/* -------------------------------------------------------------------------- */
void            evalBSplineAndGrad3D (double C[],
				                      int m,
				                      int n,
				                      int p,
				                      double x[],
				                      double y[],
				                      double z[],
				                      int N,
				                      double S[],
				                      double d1_S[],
				                      double d2_S[],
				                      double d3_S[])
d497 1
a497 1
		/* Compute interpolation weights for the 1st dimension */
d509 1
a509 1
		/* Compute interpolation weights for the 2nd dimension */
d521 1
a521 1
		/* Compute interpolation weights for the 3rd dimension */
d533 1
a533 2

		/* check range for the 1st dimension */
d540 2
a541 1
			} else {
d547 1
a547 1
		/* check range for the 2nd dimension */
d554 2
a555 1
			} else {
d561 1
a561 1
		/* check range for the 3rd dimension */
d568 2
a569 1
			} else {
d575 1
a575 1
		/* perform interpolation */
d604 1
a604 1
/* -------------------------------------------------------------------------- */
d610 2
a611 7
/* -------------------------------------------------------------------------- */
void            computeApproxBSplineCoeff2D (double *I,
					                     int m1,
					                     int m2,
					                     double tau,
					                     boundary_t bc,
					                     double *C)
a616 1

d623 9
a631 9
	case DIRICHLET:
		forward = fftw_plan_r2r_2d (m2, m1, I, tmp, FFTW_RODFT10, FFTW_RODFT10, FFTW_ESTIMATE | FFTW_PRESERVE_INPUT);
		backward = fftw_plan_r2r_2d (m2, m1, tmp, C, FFTW_RODFT01, FFTW_RODFT01, FFTW_ESTIMATE);
		/* Precompute eigenvalues */
		for (k = 0; k < m1; ++k)
			lambda1[k] = (2.0 - 2.0 * cos (((double) (k + 1)) * PI / ((double) m1)));
		for (k = 0; k < m2; ++k)
			lambda2[k] = (2.0 - 2.0 * cos (((double) (k + 1)) * PI / ((double) m2)));
		break;
d633 8
a640 8
	case NEUMANN:
		forward = fftw_plan_r2r_2d (m2, m1, I, tmp, FFTW_REDFT10, FFTW_REDFT10, FFTW_ESTIMATE | FFTW_PRESERVE_INPUT);
		backward = fftw_plan_r2r_2d (m2, m1, tmp, C, FFTW_REDFT01, FFTW_REDFT01, FFTW_ESTIMATE);
		/* Precompute eigenvalues */
		for (k = 0; k < m1; ++k)
			lambda1[k] = (2.0 - 2.0 * cos (((double) k) * PI / ((double) m1)));
		for (k = 0; k < m2; ++k)
			lambda2[k] = (2.0 - 2.0 * cos (((double) k) * PI / ((double) m2)));
d661 1
a661 1
/* -------------------------------------------------------------------------- */
d667 2
a668 8
/* -------------------------------------------------------------------------- */
void            computeApproxBSplineCoeff3D (double *I,
					                     int m1,
					                     int m2,
					                     int m3,
					                     double tau,
					                     boundary_t bc,
					                     double *C)
d682 15
a696 15
	case DIRICHLET:
		forward = fftw_plan_r2r_3d (m3, m2, m1, I, tmp,
					    FFTW_RODFT10, FFTW_RODFT10, FFTW_RODFT10,
					    FFTW_ESTIMATE | FFTW_PRESERVE_INPUT);
		backward = fftw_plan_r2r_3d (m3, m2, m1, tmp, C,
					     FFTW_RODFT01, FFTW_RODFT01, FFTW_RODFT01,
					     FFTW_ESTIMATE);
		/* Precompute eigenvalues */
		for (k = 0; k < m1; ++k)
			lambda1[k] = (2.0 - 2.0 * cos (((double) (k + 1)) * PI / ((double) m1)));
		for (k = 0; k < m2; ++k)
			lambda2[k] = (2.0 - 2.0 * cos (((double) (k + 1)) * PI / ((double) m2)));
		for (k = 0; k < m3; ++k)
			lambda3[k] = (2.0 - 2.0 * cos (((double) (k + 1)) * PI / ((double) m3)));
		break;
d698 14
a711 14
	case NEUMANN:
		forward = fftw_plan_r2r_3d (m3, m2, m1, I, tmp,
					    FFTW_REDFT10, FFTW_REDFT10, FFTW_REDFT10,
					    FFTW_ESTIMATE | FFTW_PRESERVE_INPUT);
		backward = fftw_plan_r2r_3d (m3, m2, m1, tmp, C,
					     FFTW_REDFT01, FFTW_REDFT01, FFTW_REDFT01,
					     FFTW_ESTIMATE);
		/* Precompute eigenvalues */
		for (k = 0; k < m1; ++k)
			lambda1[k] = (2.0 - 2.0 * cos (((double) k) * PI / ((double) m1)));
		for (k = 0; k < m2; ++k)
			lambda2[k] = (2.0 - 2.0 * cos (((double) k) * PI / ((double) m2)));
		for (k = 0; k < m3; ++k)
			lambda3[k] = (2.0 - 2.0 * cos (((double) k) * PI / ((double) m3)));
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
	/* compute LU factorization */
d27 3
a29 2
	for (i = 1; i < N; ++i) {
		/* forward substitution */
a30 1
	}
d32 2
a33 2
	/* backward substitution */
	for (i = N - 2; i >= 0; --i) {
a34 1
	}
d61 1
a61 1
		/* forward substitution */
d69 1
a69 1
		/* backward substitution */
d81 1
a81 1
		/* forward substitution */
d90 1
a90 1
		/* backward substitution */
d111 1
a111 1
	/* compute LU factorization */
d123 1
a123 1
	/* for the 3rd dimensions do */
d128 1
a128 1
			/* forward substitution */
d137 1
a137 1
			/* backward substitution */
d152 1
a152 1
			/* forward substitution */
d161 1
a161 1
			/* backward substitution */
d176 1
a176 1
			/* forward substitution */
d185 1
a185 1
			/* backward substitution */
a202 1

d209 1
a209 1
		/* compute interpolation weights for the 1st dimension */
d216 1
a216 1
		/* check range for the 1st dimension */
d228 1
a228 1
		/* perform interpolation */
a240 1

d248 1
a248 1
		/* compute interpolation weights for the 1st dimension */
d260 1
a260 1
		/* check range for the 1st dimension */
d273 1
a273 2
		/* perform interpolation */

a291 1

d300 1
a300 1
		/* compute interpolation weights for the 1st dimension */
d307 1
a307 1
		/* compute interpolation weights for the 2nd dimension */
d314 1
a314 1
		/* check range for the 1st dimension */
d326 1
a326 1
		/* check range for the 2nd dimension */
d338 1
a338 1
		/* perform interpolation */
d371 1
a371 1
		/* compute interpolation weights for the 1st dimension */
d383 1
a383 1
		/* compute interpolation weights for the 2nd dimension */
d465 1
a465 1
		/* compute interpolation weights for the 1st dimension */
d472 1
a472 1
		/* compute interpolation weights for the 2nd dimension */
d479 1
a479 1
		/* compute interpolation weights for the 3rd dimension */
d568 1
a568 1
		/* compute interpolation weights for the 1st dimension */
d580 1
a580 1
		/* compute interpolation weights for the 2nd dimension */
d592 1
a592 1
		/* compute interpolation weights for the 3rd dimension */
d701 1
a701 1
		/* precompute eigenvalues */
d711 1
a711 1
		/* precompute eigenvalues */
d742 1
d770 1
a770 1
		/* precompute eigenvalues */
d786 1
a786 1
		/* precompute eigenvalues */
@
