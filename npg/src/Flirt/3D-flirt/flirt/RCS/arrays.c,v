head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2008.05.22.14.56.14;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.20.16.49.51;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.13.13.53.19;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.06.21.18.40;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include <arrays.h>
#include <stdio.h>

array2D         createTreeStructure2D (size_t m1, size_t m2, double *data)
{
	int             j1;
	array2D         A = (array2D) malloc (sizeof (array1D) * m1);
	A[0] = data;
	for (j1 = 1; j1 < m1; ++j1)
		A[j1] = A[j1 - 1] + m2;
	return A;
}

array3D         createTreeStructure3D (size_t m1, size_t m2, size_t m3, double *data)
{
	int             j1, j2;
	array3D         A = (array3D) malloc (sizeof (array2D) * m1);
	A[0] = createTreeStructure2D (m1 * m2, m3, data);
	for (j1 = 1; j1 < m1; ++j1)
		A[j1] = A[j1 - 1] + m2;
	return A;
}

array4D         createTreeStructure4D (size_t m1, size_t m2, size_t m3, size_t m4, double *data)
{
	int             j1, j2;
	array4D         A = (array4D) malloc (sizeof (array3D) * m1);
	A[0] = createTreeStructure3D (m1 * m2, m3, m4, data);
	for (j1 = 1; j1 < m1; ++j1)
		A[j1] = A[j1 - 1] + m2;
	return A;
}

void            deleteTreeStructure2D (array2D A)
{
	if (A != NULL)
		free (A);
}

void            deleteTreeStructure3D (array3D A)
{
	deleteTreeStructure2D (A[0]);
	if (A != NULL)
		free (A);
}

void            deleteTreeStructure4D (array4D A)
{
	deleteTreeStructure3D (A[0]);
	if (A != NULL)
		free (A);
}

array1D         createArray1D (size_t m1)
{
#ifndef INIT_ARRAYS_WITH_ZERO
	array1D         A = (array1D) malloc (sizeof (array_t) * m1);
#else
	array1D         A = (array1D) calloc (m1, sizeof (array_t));
#endif
	return A;
}

array2D         createArray2D (size_t m1, size_t m2)
{
	int             j1;
	array2D         A = (array2D) malloc (sizeof (array1D) * m1);
	A[0] = createArray1D (m1 * m2);
	for (j1 = 1; j1 < m1; ++j1)
		A[j1] = A[j1 - 1] + m2;
	return A;
}

array3D         createArray3D (size_t m1, size_t m2, size_t m3)
{
	int             j1, j2;
	array3D         A = (array3D) malloc (sizeof (array2D) * m1);
	A[0] = createArray2D (m1 * m2, m3);
	for (j1 = 1; j1 < m1; ++j1)
		A[j1] = A[j1 - 1] + m2;
	return A;
}

array4D         createArray4D (size_t m1, size_t m2, size_t m3, size_t m4)
{
	int             j1, j2;
	array4D         A = (array4D) malloc (sizeof (array3D) * m1);
	A[0] = createArray3D (m1 * m2, m3, m4);
	A[0] = createArray3D (m1 * m2, m3, m4);
	for (j1 = 1; j1 < m1; ++j1)
		A[j1] = A[j1 - 1] + m2;
	return A;
}

void            deleteArray1D (array1D A)
{
	if (A != NULL)
		free (A);
}

void            deleteArray2D (array2D A)
{
	deleteArray1D (A[0]);
	if (A != NULL)
		free (A);
}

void            deleteArray3D (array3D A)
{
	deleteArray2D (A[0]);
	if (A != NULL)
		free (A);
}

void            deleteArray4D (array4D A)
{
	deleteArray3D (A[0]);
	if (A != NULL)
		free (A);
}

void            printToFileArray2D (array2D A, int m1, int m2, FILE *file)
{
	int             k1, k2;

	for (k2 = m2 - 1; k2 > -1; k2--) {
		for (k1 = 0; k1 < m1; k1++)
			fprintf (file, "%10.8f ", A[k1][k2]);
		fprintf (file, "\n");
	}
}

void            printToFileArray4D (array4D A, int m1, int m2, int m3, int m4, FILE *file)
{
	int				stat;
	long			nbytes;

    nbytes = m1 * m2 * m3 * m4 * sizeof(double);
    if ((stat = fwrite (A, sizeof (char), nbytes, file)) != nbytes)
        fprintf (stderr, "ERROR [printToFileArray4D]: writing to %s  status = %d \n", file, stat);
	fclose(file);
}

void            writeTransform4D (array4D A, int m1, int m2, int m3, int m4, FILE *file)
{
	int				stat;
	long			num, i;
	int				k1, k2, k3, k4;			
	double			*D;
	
    num = m1 * m2 * m3 * m4;
	D = (double*) malloc (sizeof (double) * num);
    if (D == NULL) {
        fprintf (stderr, "ERROR [writeTransform4D]: malloc\n");
		return;
	};
	i = 0;
	for (k4 = 0; k4 < m4; k4++) {
		for (k3 = 0; k3 < m3; k3++) {
			for (k2 = 0; k2 < m2; k2++) {
				for (k1 = 0; k1 < m1; k1++) {
					D[i] = A[k1][k2][k3][k4];
					i++;
				};
			};
		};
	};
    if ((stat = fwrite (D, sizeof (double), num, file)) != num)
        fprintf (stderr, "ERROR [writeTransform4D]: writing to %s  status = %d\n", file, stat);
	free (D);
	fclose(file);
}

void            readTransform4D (array4D A, int m1, int m2, int m3, int m4, FILE *file)
{
	int				stat;
	long			num, i;
	int				k1, k2, k3, k4;			
	double			*D;
	
    num = m1 * m2 * m3 * m4;
	D = (double*) malloc (sizeof (double) * num);
    if (D == NULL) {
        fprintf (stderr, "ERROR [readTransform4D]: malloc\n");
		return;
	};

   	if ((stat = fread (D, sizeof (double), num, file)) != num)
   		fprintf (stderr, "ERROR [readTransform4D]: reading from %s  status = %d n", file, stat);
	i = 0;
	for (k4 = 0; k4 < m4; k4++) {
		for (k3 = 0; k3 < m3; k3++) {
			for (k2 = 0; k2 < m2; k2++) {
				for (k1 = 0; k1 < m1; k1++) {
					A[k1][k2][k3][k4] = D[i];
					i++;
				};
			};
		};
	};
	free (D);
	fclose(file);
}

@


1.3
log
@May 20 version
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d2 1
d122 1
a122 1
void            printToFileArray2D (array2D A, int m1, int m2, FILE * file)
d132 73
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
	for (j1 = 1; j1 < m1; ++j1) {
a9 2
	}

a12 1

d18 1
a18 1
	for (j1 = 1; j1 < m1; ++j1) {
a19 1
	}
d28 1
a28 1
	for (j1 = 1; j1 < m1; ++j1) {
a29 1
	}
d35 1
a35 1
	if (A != NULL) {
a36 1
	}
d42 1
a42 1
	if (A != NULL) {
a43 1
	}
d49 1
a49 1
	if (A != NULL) {
a50 1
	}
a52 2


a62 1

d68 1
a68 1
	for (j1 = 1; j1 < m1; ++j1) {
a69 2
	}

a72 1

d78 1
a78 1
	for (j1 = 1; j1 < m1; ++j1) {
a79 1
	}
d89 1
a89 1
	for (j1 = 1; j1 < m1; ++j1) {
a90 1
	}
d96 1
a96 1
	if (A != NULL) {
a97 1
	}
d103 1
a103 1
	if (A != NULL) {
a104 1
	}
d110 1
a110 1
	if (A != NULL) {
a111 1
	}
d117 1
a117 1
	if (A != NULL) {
a118 1
	}
d126 1
a126 1
		for (k1 = 0; k1 < m1; k1++) {
a127 1
		}
@
