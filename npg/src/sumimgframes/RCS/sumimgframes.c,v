head	2.6;
access;
symbols;
locks; strict;
comment	@ * @;


2.6
date	2008.10.15.13.58.58;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	2008.08.22.13.38.13;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2008.08.07.19.27.33;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2008.07.29.21.25.11;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2008.05.19.15.12.01;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2008.05.15.15.26.15;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.20.14.56.37;	author tom;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.30.22.01.22;	author tom;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.15.18.40.15;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.01.19.20.16;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	2002.11.27.18.05.06;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.07.16.44.06;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.07.16.39.21;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.06.14.14.05;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.06.16.49.24;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	98.10.14.16.19.30;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	96.10.16.17.13.07;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	96.05.24.18.15.07;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	96.05.14.21.31.19;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.05.08.16.41.28;	author tom;	state Exp;
branches;
next	;


desc
@@


2.6
log
@correct handling of non-decayed sums restored
was broken if version 2.4 (Aug 2008)
@
text
@/*  $Id: sumimgframes.c,v 2.5 2008/08/22 13:38:13 tom Exp tom $
    $Log: sumimgframes.c,v $
 * Revision 2.5  2008/08/22  13:38:13  tom
 * sum without decay (no isotope)
 *
 * Revision 2.4  2008/08/07  19:27:33  tom
 * correct handling of decay-correction
 *
 * Revision 2.3  2008/07/29  21:25:11  tom
 * fixed major bug
 * sh->decay_corr = 1.0
 *
 * Revision 2.2  2008/05/19  15:12:01  tom
 * give warning if dynamic image has no frame 2
 *
 * Revision 2.1  2008/05/15  15:26:15  tom
 * *** empty log message ***
 *
 * Revision 2.0  2004/02/20  14:56:37  tom
 * Feb 2004
 *
 * Revision 1.16  2004/01/30  22:01:22  tom
 * *** empty log message ***
 *
 * Revision 1.15  2003/08/15  18:40:15  tom
 * skip missing frames
 *
 * Revision 1.14  2003/07/01  19:20:16  tom
 * *** empty log message ***
 *
 * Revision 1.13  2002/11/27  18:05:06  tom
 * *** empty log message ***
 *
 * Revision 1.12  2001/09/07  16:44:06  tom
 * clean lint
 *
 * Revision 1.11  2001/09/07  16:39:21  tom
 * add ... to indicate progress of summation
 *
 * Revision 1.10  2001/09/06  14:14:05  tom
 * eliminate "Reading" message for each frame
 *
 * Revision 1.9  2000/09/06  16:49:24  tom
 * *** empty log message ***
 *
 * Revision 1.8  1998/10/14  16:19:30  tom
 * permit selective planes
 *
 * Revision 1.7  1996/10/16  17:13:07  tom
 * sync with Version
 * new libimage
 *
 * Revision 1.3  1996/05/24  18:15:07  tom
 * new libimage, libnrimg
 *
 * Revision 1.2  1996/05/14  21:31:19  tom
 * new libimage.a with revised fill_sh6
 *
 * Revision 1.1  1996/05/08  16:41:28  tom
 * Initial revision
 *
 */
/* =============================================================================
 *  Module:         sumimgframes.c
 *  Date:           Aug 2008
 *  Author:         Tom Videen
 *  Description:    Sum multiple frames of a single image (ECAT, PETT VI, Interfile)
 * =============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 2.5 2008/08/22 13:38:13 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <imgutil.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <math.h>

int             main (argc, argv)
	int             argc;
	char           *argv[];

{

	ImageFile      *file1;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	FILE           *recfp;			 /* rec file pointer */
	char           *recfile;		 /* rec filename */
	float        ***sum;			 /* tensor in which to accumulate total */
	float        ***img;			 /* input tensor */
	float           lambda;
	float           factor;			 /* decay correction from starttime */
	char           *infile;			 /* file to read */
	char           *outfile;		 /* file to write */
	char            runstamp[40];	 /* version, date and userid info */
	float           delay;			 /* decay-correct back from firstfrm by this (sec)	 */
	float           start0 = 0;		 /* time of first image frame (1-3) or else firstfrm */
	float           start1;			 /* time of current frame (sec) */
	float           frmtime;		 /* start1 - start0	 */
	float           decaytime;		 /* time to decay correct (delay + frametime)	 */
	int             duration;
	int             firstfrm, lastfrm;
	int             frm;
	int             nx, ny, nz;		 /* array dimensions */
	int             i, j, k;

/*
 * Get command line arguments.
 */
	if (argc < 14) {
		fprintf (stderr, "Usage: sumimgframes in out rec firstfrm lastfrm delay\n");
		return (ERROR);
	}
	infile = argv[1];
	outfile = argv[2];
	recfile = argv[3];
	firstfrm = atoi (argv[4]);
	lastfrm = atoi (argv[5]);
	if (lastfrm < firstfrm) {
		fprintf (stderr, "Last frame (%d) must be >= first frame (%d)\n", lastfrm, firstfrm);
		return (ERROR);
	}
	delay = atof (argv[6]);
	i = 6;
	(void) snprintf (runstamp, 39, "%s %s %s %s %s %s", argv[i + 1], argv[i + 2], argv[i + 3],
			 argv[i + 4], argv[i + 6], argv[i + 7]);

/*	Open rec file */

	recfp = fopen (recfile, "a");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [sumimgframes]: opening %s\n", recfile);
		return (ERROR);
	}
/*
 *	Get main header and subheader of first image.
 *	Store RCS version in mh->sw_revision.
 */

	frm = firstfrm;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	file1 = make_imgfile (infile);
	(void) strcpy (file1->mode, "r");
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [sumimgframes]: opening %s\n", infile);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [sumimgframes]: reading MainHeader from %s\n", infile);
		return (ERROR);
	}
	if (existimgfrm (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [sumimgframes]: reading %s frame %d\n", infile, frm);
		return (ERROR);
	}
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [sumimgframes]: reading subheader in %s\n", infile);
		return (ERROR);
	}
	mh = file1->mh;
	sh = file1->sh;
	nx = sh->dim1;
	ny = sh->dim2;
	nz = sh->dim3;
	if ((sum = f3tensor (1, nz, 1, ny, 1, nx)) == NULL) {
		fprintf (stderr, "ERROR [sumimgframes]: malloc sum\n");
		return (ERROR);
	}

/*
 *  1) delay < 0:  there will be no decay correction; input data will be divided by any existing decay_cor
 *	2) delay >= 0: decay correct to "delay" seconds prior to either firstimgfrm (1-3) or named firstfrm;
 *		decay_cor is removed and then recalculated
 */

	lambda = 0.0;
	if (delay >= 0) {
		indx.frm = firstimgfrm (file1);
		if (indx.frm <= 0)
			indx.frm = firstfrm;
		if (get_sh (file1, &indx) == ERROR) {
			if (get_sh (file1, &indx) == ERROR) {
				fprintf (stderr, "ERROR [sumimgframes]: reading frame %d in %s\n", indx.frm, infile);
				return (ERROR);
			}
		}
		start0 = (sh->start_time) * 0.001;
		fprintf (stdout, "Output decay-corrected to start of frame %d\n", firstfrm);
	} else {
		fprintf (stdout, "Output will not be decay-corrected\n");
	}

	indx.frm = firstfrm;
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "WARNING [sumimgframes]: reading frame %d in %s\n", indx.frm, infile);
		return (ERROR);
	}
	if (delay >= 0) {
		start1 = (sh->start_time) * 0.001;
		frmtime = start1 - start0;
		if (strncmp (mh->isotope, "F-18", 4) == 0)
			lambda = 0.00010529;
		else if (strncmp (mh->isotope, "C-11", 4) == 0)
			lambda = 0.0005668;
		else if (strncmp (mh->isotope, "O-15", 4) == 0)
			lambda = 0.005668;
		else {
			fprintf (stderr, "WARNING [sumimgframes]: No halflife for isotope =  %s\n", mh->isotope);
			fprintf (stderr, "                        Output image will not be decay-corrected\n");
			lambda = 0.0;
		}
		fprintf (stdout, "Isotope = %s    Decay constant = %.8f\n", mh->isotope, lambda);
		fprintf (stdout, "Delay = %.1f sec   Start time = %.1f sec\n", delay, frmtime);
	}

/*	First frame	*/

	start1 = (sh->start_time) * 0.001;
	frmtime = start1 - start0;
	decaytime = delay + frmtime;
	factor = exp (lambda * decaytime);
	if ((img = readtensor (file1, &indx)) == NULL) {
		fprintf (stderr, "ERROR [sumimgframes]: reading image data from %s\n", infile);
		return (ERROR);
	}
	for (i = 1; i <= nz; i++) {
		for (j = 1; j <= ny; j++) {
			for (k = 1; k <= nx; k++) {
				sum[i][j][k] = factor * img[i][j][k];
			}
		}
	}
	recout (recfp, infile);
	duration = sh->duration;
	free_f3tensor (img, 1, nz, 1, ny, 1, nx);

/*
 *	Loop over all frames
 */
	if (firstfrm < lastfrm) {
		fprintf (stdout, "Reading %s, frames %d - %d\n", infile, firstfrm, lastfrm);
		for (frm = firstfrm + 1; frm <= lastfrm; frm++) {
			fprintf (stdout, ".");
			(void) fflush (stdout);
			indx.frm = frm;
			if (get_mh (file1) == ERROR)
				return (ERROR);
			if (get_sh (file1, &indx) != ERROR) {
				start1 = (sh->start_time) * 0.001;
				frmtime = start1 - start0;
				decaytime = delay + frmtime;
				factor = exp (lambda * decaytime);
				if ((img = readtensor (file1, &indx)) == NULL)
					return (ERROR);
				for (i = 1; i <= nz; i++) {
					for (j = 1; j <= ny; j++) {
						for (k = 1; k <= nx; k++) {
							sum[i][j][k] += factor * img[i][j][k];
						}
					}
				}
				duration += sh->duration;
				free_f3tensor (img, 1, nz, 1, ny, 1, nx);
			}
		}
	}
	fprintf (stdout, "\n");

/*
 *	Write image (frame number set to 1)
 */
	close_imgfile (file1);
	file1->name = outfile;
	(void) strcpy (file1->mode, "w");
	indx.frm = 1;
	fprintf (stdout, "Writing composite image %s, frame %d\n", outfile, indx.frm);
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [sumimgframes]: opening %s\n", outfile);
		return (ERROR);
	}
	(void) save_rcs (file1, rcsid, runstamp);
	mh->nframe = indx.frm;
	mh->nplane = nz;
	sh->dim3 = nz;
	if (delay > 0)
		sh->start_time = (int) (delay * 1000);
	else
		sh->start_time = 0;
	sh->duration = duration;
	sh->decay_corr = 1.0;
	if (put_mh (file1) == ERROR)
		return (ERROR);
	if (writetensor (file1, &indx, sum) == ERROR)
		return (ERROR);
	free_f3tensor (sum, 1, nz, 1, ny, 1, nx);
	(void) fclose (recfp);
	close_imgfile (file1);
	free_imgfile (file1);
	free (file1);
	free_f3tensor (sum, 1, nz, 1, ny, 1, nx);
	return (OK);
}
@


2.5
log
@sum without decay (no isotope)
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 2.4 2008/08/07 19:27:33 tom Exp tom $
d3 3
d70 1
a70 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 2.4 2008/08/07 19:27:33 tom Exp tom $";
d82 1
a82 1
int main (argc, argv)
d97 1
a97 1
	float           factor;			 /* decay correction from starttime to 0 */
d101 5
a105 3
	float           delay;			 /* decaycorrect back by this (sec)	 */
	float           starttime;		 /* sec	 */
	float           start0 = 0;		 /* sec	 */
d110 1
a110 1
	int             i, j, k, m;
d131 1
a131 1
			argv[i + 4], argv[i + 6], argv[i + 7]);
a178 17
	if ((img = readtensor (file1, &indx)) == NULL) {
		fprintf (stderr, "ERROR [sumimgframes]: reading image data from %s\n", infile);
		return (ERROR);
	}
	m = 1;
	for (i = 1; i <= nz; i++) {
		for (j = 1; j <= ny; j++) {
			for (k = 1; k <= nx; k++) {
				sum[m][j][k] = img[i][j][k];
			}
		}
		m += 1;
	}
	recout (recfp, infile);
	(void) save_rcs (file1, rcsid, runstamp);
	duration = sh->duration;
	free_f3tensor (img, 1, nz, 1, ny, 1, nx);
d180 4
a183 4
/*  1) no delay entered (delay < 0)
 *		a) frm 2 exists -> decay correct to beginning of frm2
 *		b) frm 2 does not exist -> decay correct only to beginning of firstfrm
 *	2) decay correct to delay sec prior to firstfrm
d186 5
a190 2
	if (delay < 0) {
		indx.frm = 2;
a191 1
			indx.frm = firstfrm;
d193 1
a193 1
				fprintf (stderr, "WARNING [sumimgframes]: reading frame %d in %s\n", indx.frm, infile);
a194 3
			} else {
				start0 = (sh->start_time) * 0.001;
				fprintf (stdout, "Output decay-corrected to start of frame %d\n", firstfrm);
a195 3
		} else {
			start0 = (sh->start_time) * 0.001;
			fprintf (stdout, "Output decay-corrected to start of frame 2\n");
d197 4
d202 1
a206 5
	} else if (delay < 0) {
		starttime = (sh->start_time) * 0.001 - start0;
		delay = starttime;
	} else {
		starttime = delay - (sh->start_time) * 0.001;
d208 17
d226 9
a234 10
	if (strncmp (mh->isotope, "F-18", 4) == 0)
		lambda = 0.00010529;
	else if (strncmp (mh->isotope, "C-11", 4) == 0)
		lambda = 0.0005668;
	else if (strncmp (mh->isotope, "O-15", 4) == 0)
		lambda = 0.005668;
	else {
		fprintf (stderr, "WARNING [sumimgframes]: No stored halflife for isotope =  %s\n", mh->isotope);
		fprintf (stderr, "WARNING [sumimgframes]: Summed image will not be decay-corrected\n");
		lambda = 0.0;
d236 10
a245 4
	factor = exp (lambda * starttime);
	fprintf (stdout, "Isotope = %s    Decay constant = %.8f\n", mh->isotope, lambda);
	fprintf (stdout, "Delay = %.1f sec   Start time = %.1f sec\n", delay, starttime);
	fprintf (stdout, "Additional decay correction = %f\n", factor);
d259 4
a264 1
				m = 1;
d268 1
a268 1
							sum[m][j][k] += factor * img[i][j][k];
a270 1
					m += 1;
d291 1
d295 4
a298 1
	sh->start_time = (int) (delay * 1000);
@


2.4
log
@correct handling of decay-correction
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 2.3 2008/07/29 21:25:11 tom Exp tom $
d3 3
d67 1
a67 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.1 2008/08/04 14:28:21 tom Exp $";
d79 1
a79 1
main (argc, argv)
d100 1
a100 1
	float           start0;			 /* sec	 */
d112 1
a112 1
		return (1);
d121 1
a121 1
		return (1);
d125 1
a125 1
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[i + 1], argv[i + 2], argv[i + 3],
d232 3
a234 2
		fprintf (stdout, "No stored halflife for isotope =  %s\n", mh->isotope);
		return (ERROR);
@


2.3
log
@fixed major bug
sh->decay_corr = 1.0
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 2.2 2008/05/19 15:12:01 tom Exp $
d3 4
d59 1
a59 1
 *  Date:           May 1996
d64 1
a64 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 2.2 2008/05/19 15:12:01 tom Exp $";
d74 1
d90 2
d95 3
a97 1
	int             starttime, start0;
a99 1
	int             firstpln, lastpln;
d101 1
a101 1
	int             nx, ny, nz, newz;	 /* array dimensions */
d107 2
a108 2
	if (argc < 15) {
		fprintf (stderr, "Usage: sumimgframes in out rec firstfrm lastfrm firstpln lastpln\n");
d120 2
a121 7
	firstpln = atoi (argv[6]);
	lastpln = atoi (argv[7]);
	if (lastpln < firstpln) {
		fprintf (stderr, "Last plane (%d) must be >= first plane (%d)\n", lastpln, firstpln);
		return (1);
	}
	i = 7;
d167 1
a167 7
	if (firstpln == 0) {
		firstpln = 1;
		lastpln = nz;
		newz = nz;
	} else
		newz = lastpln - firstpln + 1;
	if ((sum = f3tensor (1, newz, 1, ny, 1, nx)) == NULL) {
d176 1
a176 1
	for (i = firstpln; i <= lastpln; i++) {
d189 4
a192 2
/*
 * 	Get start time of first summed frame; NOTE: assumes injection at frame 2
d195 17
a211 1
	indx.frm = 2;
d213 5
a217 3
		fprintf (stderr, "WARNING [sumimgframes]: start time of summed image will be set to 0.\n");
		fprintf (stderr, "   There is no frame %d in %s\n", indx.frm, infile);
		starttime = 0;
d219 1
a219 7
		start0 = sh->start_time;
		indx.frm = firstfrm;
		if (get_sh (file1, &indx) == ERROR) {
			fprintf (stderr, "ERROR [sumimgframes]: reading subheader for frame %d in %s\n", indx.frm, infile);
			return (ERROR);
		} else
			starttime = sh->start_time - start0;
d222 15
d252 1
a252 1
				for (i = firstpln; i <= lastpln; i++) {
d255 1
a255 1
							sum[m][j][k] += img[i][j][k];
d280 3
a282 3
	mh->nplane = newz;
	sh->dim3 = newz;
	sh->start_time = starttime;
d289 1
a289 1
	free_f3tensor (sum, 1, newz, 1, ny, 1, nx);
d294 1
a294 1
	free_f3tensor (sum, 1, newz, 1, ny, 1, nx);
@


2.2
log
@give warning if dynamic image has no frame 2
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 2.1 2008/05/15 15:26:15 tom Exp tom $
d3 3
d60 1
a60 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 2.1 2008/05/15 15:26:15 tom Exp tom $";
d258 1
@


2.1
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 2.0 2004/02/20 14:56:37 tom Exp tom $
d3 3
d57 1
a57 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 2.0 2004/02/20 14:56:37 tom Exp tom $";
d85 1
a85 1
	int             starttime, start0, start1;
d195 4
a198 3
		fprintf (stderr, "ERROR [sumimgframes]: reading subheader for frame %d in %s\n", indx.frm, infile);
		return (ERROR);
	} else
d200 7
a207 8
	indx.frm = firstfrm;
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [sumimgframes]: reading subheader for frame %d in %s\n", indx.frm, infile);
		return (ERROR);
	} else
		start1 = sh->start_time;
	starttime = start1 - start0;

@


2.0
log
@Feb 2004
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.16 2004/01/30 22:01:22 tom Exp tom $
d3 3
d49 1
a49 1
 *  Date:           May-96
d54 1
a54 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.16 2004/01/30 22:01:22 tom Exp tom $";
d81 3
a83 2
	char            runstamp[40];		 /* version, date and userid info */
	int             starttime, duration;
d120 1
a120 1
		fprintf (stderr, "ERROR [sumimgframes]: Cannot open %s\n", recfile);
d138 1
a138 1
		fprintf (stderr, "ERROR [sumimgframes]: Cannot open %s\n", infile);
d142 1
a142 1
		fprintf (stderr, "ERROR [sumimgframes]: Cannot get MainHeader from %s\n", infile);
d146 1
a146 1
		fprintf (stderr, "ERROR [sumimgframes]: cannot find %s frame %d\n", infile, frm);
d150 1
a150 1
		fprintf (stderr, "ERROR [sumimgframes]: Cannot read file subheader in %s\n", infile);
d165 1
a165 1
		fprintf (stderr, "ERROR [sumimgframes]: Cannot malloc sum\n");
a182 1
	starttime = sh->start_time;
d187 19
d244 1
a244 1
		fprintf (stderr, "ERROR [sumimgframes]: Cannot open %s\n", outfile);
@


1.16
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.15 2003/08/15 18:40:15 tom Exp tom $
d3 3
d51 1
a51 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.15 2003/08/15 18:40:15 tom Exp tom $";
@


1.15
log
@skip missing frames
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.14 2003/07/01 19:20:16 tom Exp tom $
d3 3
d48 1
a48 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.14 2003/07/01 19:20:16 tom Exp tom $";
d88 1
a88 1
		exit (1);
d97 1
a97 1
		exit (1);
d103 1
a103 1
		exit (1);
d175 1
a175 1
	save_rcs (file1, rcsid, runstamp);
d233 4
@


1.14
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.13 2002/11/27 18:05:06 tom Exp tom $
d3 3
d45 1
a45 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.13 2002/11/27 18:05:06 tom Exp tom $";
d72 2
a73 2
	char            runstamp[40];	 /* version, date and userid info */
	int				starttime, duration;
d77 1
a77 1
	int             nx, ny, nz, newz; /* array dimensions */
d104 2
a105 2
		 argv[i + 4], argv[i + 6], argv[i + 7]);
	
d154 4
a157 5
    if ((sum = f3tensor (1, newz, 1, ny, 1, nx)) == NULL) {
        fprintf (stderr, "ERROR [sumimgframes]: Cannot malloc sum\n");
        return (ERROR);
    }

d188 9
a196 9
			if (get_sh (file1, &indx) == ERROR)
				return (ERROR);
			if ((img = readtensor (file1, &indx)) == NULL)
				return (ERROR);
			m = 1;
			for (i = firstpln; i <= lastpln; i++) {
				for (j = 1; j <= ny; j++) {
					for (k = 1; k <= nx; k++) {
						sum[m][j][k] += img[i][j][k];
d198 1
d200 2
a201 1
				m += 1;
a202 2
			duration += sh->duration;
			free_f3tensor (img, 1, nz, 1, ny, 1, nx);
d205 1
a205 1
	fprintf (stdout,"\n");
@


1.13
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.12 2001/09/07 16:44:06 tom Exp tom $
d3 3
d42 1
a42 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.12 2001/09/07 16:44:06 tom Exp tom $";
d173 1
@


1.12
log
@clean lint
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.11 2001/09/07 16:39:21 tom Exp tom $
d3 3
d39 1
a39 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.11 2001/09/07 16:39:21 tom Exp tom $";
a99 6
	indx.frm = firstfrm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

d114 5
@


1.11
log
@add ... to indicate progress of summation
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.10 2001/09/06 14:14:05 tom Exp tom $
d3 3
d36 1
a36 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.10 2001/09/06 14:14:05 tom Exp tom $";
a40 1
#include <math.h>
d42 1
a44 1
#include <nr.h>
d53 1
a53 1
	ImageFile      *file1, *file2;
d94 1
a94 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[i + 1], argv[i + 2], argv[i + 3],
d118 1
a118 1
	strcpy (file1->mode, "r");
d176 1
a176 1
			fflush (stdout);
d204 1
a204 1
	strcpy (file1->mode, "w");
d221 1
a221 1
	fclose (recfp);
@


1.10
log
@eliminate "Reading" message for each frame
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.9 2000/09/06 16:49:24 tom Exp tom $
d3 3
d33 1
a33 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.9 2000/09/06 16:49:24 tom Exp tom $";
d73 1
a73 1
		printf ("Usage: sumimgframes in out rec firstfrm lastfrm firstpln lastpln\n");
d82 1
a82 1
		printf ("Last frame (%d) must be >= first frame (%d)\n", lastfrm, firstfrm);
d88 1
a88 1
		printf ("Last plane (%d) must be >= first plane (%d)\n", lastpln, firstpln);
d171 1
a171 1
		printf ("Reading %s, frames %d - %d\n", infile, firstfrm, lastfrm);
d173 2
d195 1
d204 1
a204 1
	printf ("Writing composite image %s, frame %d\n", outfile, indx.frm);
@


1.9
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.8 1998/10/14 16:19:30 tom Exp tom $
d3 3
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.8 1998/10/14 16:19:30 tom Exp tom $";
a145 1
	printf ("Reading %s, frame %d\n", infile, frm);
d168 1
a170 1
			printf ("Reading %s, frame %d\n", infile, frm);
@


1.8
log
@permit selective planes
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.7 1996/10/16 17:13:07 tom Exp tom $
d3 3
d27 1
a27 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.7 1996/10/16 17:13:07 tom Exp tom $";
a210 1
	free_imgfile (file1);
@


1.7
log
@sync with Version
new libimage
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.3 1996/05/24 18:15:07 tom Exp tom $
d3 4
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.3 1996/05/24 18:15:07 tom Exp tom $";
d54 2
a55 1
	int             firstframe, lastframe;
d57 2
a58 2
	int             nx, ny, nz;		 /* array dimensions */
	int             i, j, k;
d63 2
a64 2
	if (argc < 6) {
		printf ("Usage: sumimgframes infile outfile recfile firstframe lastframe\n");
d70 4
a73 5
	firstframe = atoi (argv[4]);
	lastframe = atoi (argv[5]);
	if (lastframe - firstframe < 0) {
		printf ("Last frame (%d) must be >= first frame (%d)\n", lastframe,
			firstframe);
d76 7
a82 1
	i = 5;
d86 1
a86 1
	indx.frm = firstframe;
d96 1
a96 1
		fprintf (stderr, "ERROR [sumimg]: Cannot open %s\n", recfile);
d104 1
a104 1
	frm = firstframe;
d109 1
a109 1
		fprintf (stderr, "ERROR [sumimg]: Cannot open %s\n", infile);
d113 1
a113 1
		fprintf (stderr, "ERROR [sumimg]: Cannot get MainHeader from %s\n", infile);
d117 1
a117 1
		fprintf (stderr, "ERROR [sumimg]: cannot find %s frame %d\n", infile, frm);
d121 1
a121 1
		fprintf (stderr, "ERROR [sumimg]: Cannot read file subheader in %s\n", infile);
d129 11
d141 2
a142 2
	if ((sum = readtensor (file1, &indx)) == NULL) {
		fprintf (stderr, "ERROR [sumimg]: reading image data from %s\n", infile);
d145 9
d162 2
a163 2
	if (firstframe < lastframe) {
		for (frm = firstframe + 1; frm <= lastframe; frm++) {
d172 2
a173 1
			for (i = 1; i <= nz; i++) {
d176 1
a176 1
						sum[i][j][k] += img[i][j][k];
d179 1
d195 1
a195 1
		fprintf (stderr, "ERROR [sumimg]: Cannot open %s\n", outfile);
d199 2
d207 1
a207 1
	free_f3tensor (sum, 1, nz, 1, ny, 1, nx);
@


1.3
log
@new libimage, libnrimg
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.2 1996/05/14 21:31:19 tom Exp tom $
d3 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.2 1996/05/14 21:31:19 tom Exp tom $";
@


1.2
log
@new libimage.a with revised fill_sh6
@
text
@d1 1
a1 1
/*  $Id: sumimgframes.c,v 1.1 1996/05/08 16:41:28 tom Exp tom $
d3 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/sumimgframes/RCS/sumimgframes.c,v 1.1 1996/05/08 16:41:28 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*  $Id$
    $Log$
d14 1
a14 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/sumimg/RCS/sumimg.c,v 2.0 1996/04/30 20:23:52 tom Exp $";
@
