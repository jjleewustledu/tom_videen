head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2007.05.24.16.56.56;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Log$ */
/*	===============================================================================
 *	Module:			img2spm5.c
 *	Date:			May 2007
 *	Author:			Tom Videen
 *	Description:	Transform PETT VI or ECAT images into Analyze format.
 *		Input images may be any format recognizable by getrealimg.
 *		Output images will be displayed by Analyze with left brain on the LEFT
 *		and with the lower slices first.  This fits the expectations of SPM5,
 *		which is the opposite of SPM99.
 *		Output hdr has "SPM5 orientation" written to aux_file field.
 *		Revision of img2spm.c ver 1.6
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/img2spm5/RCS/img2spm5.c,v 1.6 2004/02/20 17:30:04 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <imgutil.h>				 /* ROUND */
#include <ANALYZE.h>				 /* dsr */

#define MAXSTR 256
#define TRANSVERSE '\000'
#define CORONAL    '\001'
#define SAGITTAL   '\002'

/*	----------------------------
 *	Function:			img2spm5
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	ImageFile      *file;
	Index           indx;
	struct dsr      hdr;			 /* header for SPM */
	FILE           *fd_hdr;			 /* file for SPM hdr */
	FILE           *fd_img;			 /* output SPM image  */

	char           *PET_img;		 /* input PET image filename */
	char           *SPM_hdr;		 /* output Analyze header filename  */
	char           *SPM_img;		 /* output Analyze image filename */
	char           *xorg, *yorg, *zorg;	 /* atlas origin */
	long            dim[3];			 /* dimensions of tensors */
	int             global_max;		 /* global maximum */
	int             global_min;		 /* global minimum */
	int             z0;
	int             i, j, k;

	float        ***image;			 /* input PET image */
	short        ***img;			 /* output Analyze image */
	short          *row;			 /* single row of output image */

/*
 *  Initializations
 */

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;
	xorg = hdr.hist.originator + 1;
	yorg = hdr.hist.originator + 3;
	zorg = hdr.hist.originator + 5;

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 4) {
		fprintf (stderr, "Usage: img2spm5 PET_img SPM_img SPM_hdr\n");
		return (ERROR);
	}
	PET_img = argv[1];
	SPM_img = argv[2];
	SPM_hdr = argv[3];

	if ((fd_hdr = fopen (SPM_hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [img2spm5]: Unable to create SPM header %s\n", SPM_hdr);
		return (ERROR);
	}
	if ((fd_img = fopen (SPM_img, "w")) == 0) {
		fprintf (stderr, "ERROR [img2spm5]: Unable to create SPM image %s\n", SPM_img);
		return (ERROR);
	}
/*
 *	Read the image.
 */

	file = make_imgfile (PET_img);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [img2spm5]: opening %s\n", PET_img);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [img2spm5]: reading MainHeader from %s\n", PET_img);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		if (indx.frm == 1) {
			indx.frm = 2;
			if (existimgfrm (file, &indx) == ERROR) {
				indx.frm = 3;
				if (existimgfrm (file, &indx) == ERROR) {
					fprintf (stderr, "ERROR [img2spm5]: cannot find %s frame 1, 2 or 3\n", PET_img);
					return (ERROR);
				}
			}
		} else {
			fprintf (stderr, "ERROR [img2spm5]: cannot find %s frame %d\n",
				 PET_img, indx.frm);
			return (ERROR);
		}
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [img2spm5]: reading file subheader in %s\n", PET_img);
		return (ERROR);
	}
	dim[0] = (long) file->sh->dim1;
	dim[1] = (long) file->sh->dim2;
	dim[2] = (long) file->sh->dim3;
	z0 = file->mh->zorigin;
	if ((image = readtensor (file, &indx)) == NULL)
		return (ERROR);
	if ((img = s3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
		fprintf (stderr, "ERROR [img2spm5]: malloc img\n");
		return (ERROR);
	}
	if (NULL == (row = (short *) calloc (dim[0], sizeof (short)))) {
		fprintf (stderr, "ERROR [img2spm5]: malloc memory for row\n");
		return (ERROR);
	}
/*
 * Convert from float to short, find min and max for hdr
 */

	global_max = 0;
	global_min = 32767;
	for (i = 1; i <= dim[2]; i++) {
		for (j = 1; j <= dim[1]; j++) {
			for (k = 1; k <= dim[0]; k++) {
				img[i][j][k] = ROUND (image[i][j][k]);
				if (img[i][j][k] > global_max)
					global_max = img[i][j][k];
				if (img[i][j][k] < global_min)
					global_min = img[i][j][k];
			}
		}
	}

/*
 * Flip X, Y, Z and write to output file
 */

	for (i = dim[2]; i > 0; i--) {
		for (j = dim[1]; j > 0; j--) {
			for (k = 0; k < dim[0]; k++)
				row[k] = img[i][j][dim[0] - k];
			if ((fwrite ((char *) row, sizeof (short), dim[0], fd_img)) != dim[0]) {
				fprintf (stderr, "ERROR [img2spm5]: writing to: %s\n", SPM_img);
				return (ERROR);
			}
		}
	}

/*
 * Create Analyze hdr file
 */

	hdr.hk.sizeof_hdr = sizeof (struct dsr); /* required by developers */
	strncpy (hdr.hk.data_type, "dsr", 9);
	strncpy (hdr.hk.db_name, SPM_hdr, 17);
	hdr.hk.extents = 0;
	hdr.hk.session_error = 0;
	hdr.hk.regular = 'r';			 /* required by developers */
	hdr.hk.hkey_un0 = '0';			 /* required by developers */
	hdr.dime.dim[0] = 4;			 /* typically only 4 dimensions  */
	hdr.dime.dim[1] = dim[0];		 /* x dimension of atlas   */
	hdr.dime.dim[2] = dim[1];		 /* y dimension of atlas   */
	hdr.dime.dim[3] = dim[2];		 /* number of slices in volume */
	hdr.dime.dim[4] = 1;			 /* only one volume typically  */
	hdr.dime.dim[5] = 0;			 /* only one volume typically  */
	hdr.dime.dim[6] = 0;			 /* only one volume typically  */
	hdr.dime.dim[7] = 0;			 /* only one volume typically  */
	hdr.dime.unused8 = 0;			 /* despite the label, some of this is used */
	hdr.dime.unused9 = 0;
	hdr.dime.unused10 = 0;
	hdr.dime.unused11 = 0;
	hdr.dime.unused12 = 0;
	hdr.dime.unused13 = 0;
	hdr.dime.unused14 = 0;
	hdr.dime.datatype = 4;			 /* 16 bit signed integer  */
	hdr.dime.bitpix = 16;			 /* number of bits/pixel */
	hdr.dime.dim_un0 = 0;
	hdr.dime.pixdim[0] = 0;
	hdr.dime.pixdim[1] = 10 * file->sh->sample_size_1;	/* in mm */
	hdr.dime.pixdim[2] = 10 * file->sh->sample_size_2;	/* in mm */
	hdr.dime.pixdim[3] = 10 * file->sh->sample_size_3;	/* in mm */
	hdr.dime.pixdim[4] = 0;
	hdr.dime.pixdim[5] = 0;
	hdr.dime.pixdim[6] = 0;
	hdr.dime.pixdim[7] = 0;
	hdr.dime.funused8 = 0;
	hdr.dime.funused9 = 1.0;		 /* SPM sets this to 1 */
	hdr.dime.funused10 = 0;
	hdr.dime.funused11 = 0;
	hdr.dime.funused12 = 0;
	hdr.dime.funused13 = 0;
	hdr.dime.compressed = 0;
	hdr.dime.verified = 0;
	hdr.dime.glmax = global_max;
	hdr.dime.glmin = global_min;
	strncpy (hdr.hist.descrip, PET_img, 79);
	strncpy (hdr.hist.aux_file, "SPM5 orientation", 23);
	hdr.hist.orient = TRANSVERSE;
	strncpy (hdr.hist.originator, "", 9);
	strncpy (hdr.hist.generated, "", 9);
	strncpy (hdr.hist.scannum, "", 9);
	strncpy (hdr.hist.patient_id, "", 9);
	strncpy (hdr.hist.exp_date, "", 9);
	strncpy (hdr.hist.exp_time, "", 9);
	strncpy (hdr.hist.hist_un0, "", 2);

	if (dim[0] == 128)
		*xorg = 64;
	if (dim[1] == 128)
		*yorg = 65;
	if (z0 > 0)
		*zorg = dim[2] + 1 - z0;

	hdr.hist.views = 0;
	hdr.hist.vols_added = 0;
	hdr.hist.start_field = 0;
	hdr.hist.field_skip = 0;
	hdr.hist.omax = 0;
	hdr.hist.omin = 0;
	hdr.hist.smax = 0;
	hdr.hist.smin = 0;

	if ((fwrite ((char *) &hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [img2spm5]: writing to: %s\n", SPM_hdr);
		return (ERROR);
	}
	fprintf (stdout, "Converted: %s to %s\n", PET_img, SPM_img);
	free (image);
	free (row);
	free_s3tensor (img, 1, dim[2], 1, dim[1], 1, dim[0]);
	(void) fclose (fd_hdr);
	(void) fclose (fd_img);
	return (OK);
}
@
