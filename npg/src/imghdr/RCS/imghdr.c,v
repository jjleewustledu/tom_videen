head	3.7;
access;
symbols;
locks; strict;
comment	@ * @;


3.7
date	2010.04.30.16.52.19;	author tom;	state Exp;
branches;
next	3.6;

3.6
date	2010.04.23.20.19.58;	author tom;	state Exp;
branches;
next	3.5;

3.5
date	2006.07.03.13.33.08;	author tom;	state Exp;
branches;
next	3.4;

3.4
date	2006.04.10.16.32.27;	author tom;	state Exp;
branches;
next	3.3;

3.3
date	2005.03.25.20.13.15;	author tom;	state Exp;
branches;
next	3.2;

3.2
date	2004.09.07.19.27.08;	author tom;	state Exp;
branches;
next	3.1;

3.1
date	2004.08.31.15.04.55;	author tom;	state Exp;
branches;
next	3.0;

3.0
date	2004.02.16.17.31.17;	author tom;	state Exp;
branches;
next	2.21;

2.21
date	2003.09.16.16.51.28;	author tom;	state Exp;
branches;
next	2.20;

2.20
date	2003.09.12.16.03.32;	author tom;	state Exp;
branches;
next	2.19;

2.19
date	2003.01.23.15.19.06;	author tom;	state Exp;
branches;
next	2.18;

2.18
date	2002.12.26.20.33.24;	author tom;	state Exp;
branches;
next	2.17;

2.17
date	2002.07.16.15.28.34;	author tom;	state Exp;
branches;
next	2.16;

2.16
date	2002.05.30.14.00.38;	author tom;	state Exp;
branches;
next	2.15;

2.15
date	2002.03.27.15.11.22;	author tom;	state Exp;
branches;
next	2.14;

2.14
date	2001.08.30.14.21.19;	author tom;	state Exp;
branches;
next	2.13;

2.13
date	2000.07.18.17.12.12;	author tom;	state Exp;
branches;
next	2.12;

2.12
date	99.12.15.21.10.38;	author tom;	state Exp;
branches;
next	2.11;

2.11
date	99.10.05.13.08.03;	author tom;	state Exp;
branches;
next	2.10;

2.10
date	97.05.13.16.33.11;	author tom;	state Exp;
branches;
next	2.9;

2.9
date	97.03.10.16.48.48;	author tom;	state Exp;
branches;
next	2.8;

2.8
date	97.03.10.15.24.22;	author tom;	state Exp;
branches;
next	2.7;

2.7
date	96.10.16.15.56.09;	author tom;	state Exp;
branches;
next	2.6;

2.6
date	96.09.10.16.01.45;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	96.08.15.18.40.09;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	96.08.13.17.53.51;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	96.05.24.18.10.49;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.05.22.20.45.54;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.05.22.20.35.37;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.04.30.20.56.03;	author tom;	state Exp;
branches;
next	1.17;

1.17
date	96.04.30.20.55.35;	author tom;	state Exp;
branches;
next	1.16;

1.16
date	96.03.12.23.05.53;	author tom;	state Exp;
branches;
next	1.15;

1.15
date	96.02.19.22.50.34;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	96.02.19.22.25.53;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	96.01.03.19.58.32;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	96.01.03.19.57.48;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	96.01.03.18.06.18;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	95.12.20.16.07.28;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	95.12.19.15.10.30;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	95.12.19.14.00.00;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	95.12.18.17.17.32;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	95.12.18.15.00.22;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	95.12.13.22.00.20;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	95.12.12.18.51.46;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	95.11.30.22.00.01;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	95.11.28.21.25.16;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.11.28.21.18.26;	author tom;	state Exp;
branches;
next	;


desc
@@


3.7
log
@ignore default dose for PETCT
@
text
@/*	$Id: imghdr.c,v 3.6 2010/04/23 20:19:58 tom Exp tom $
	$Log: imghdr.c,v $
 * Revision 3.6  2010/04/23  20:19:58  tom
 * *** empty log message ***
 *
 * Revision 3.5  2006/07/03  13:33:08  tom
 * add plane dimensions
 *
 * Revision 3.4  2006/04/10  16:32:27  tom
 * fix max scaling for ECAT 6
 *
 * Revision 3.3  2005/03/25  20:13:15  tom
 * add recon zoom and x- y-offsets for matrix 7 files
 *
 * Revision 3.2  2004/09/07  19:27:08  tom
 * *** empty log message ***
 *
 * Revision 3.1  2004/08/31  15:04:55  tom
 * *** empty log message ***
 *
 * Revision 3.0  2004/02/16  17:31:17  tom
 * Feb 2004
 *
 * Revision 2.21  2003/09/16  16:51:28  tom
 * omit scatter for 9110
 *
 * Revision 2.20  2003/09/12  16:03:32  tom
 * *** empty log message ***
 *
 * Revision 2.19  2003/01/23  15:19:06  tom
 * add processing_code check
 *
 * Revision 2.18  2002/12/26  20:33:24  tom
 * add O-15
 *
	Revision 2.17  2002/07/16 15:28:34  tom
	add Compound to output

 * Revision 2.16  2002/05/30  14:00:38  tom
 * use REV7NSCALE for all non-calibrated matrix7 images
 *
 * Revision 2.15  2002/03/27  15:11:22  tom
 * add facility name
 *
 * Revision 2.14  2001/08/30  14:21:19  tom
 * add original filename for Matrix 7
 *
 * Revision 2.13  2000/07/18  17:12:12  tom
 * *** empty log message ***
 *
 * Revision 2.12  1999/12/15  21:10:38  tom
 * lint clean and y2k fix
 *
 * Revision 2.11  1999/10/05  13:08:03  tom
 * remove check for old norm
 *
 * Revision 2.10  1997/05/13  16:33:11  tom
 * fractional start time and duration
 *
 * Revision 2.9  1997/03/10  16:48:48  tom
 * use firstimgfrm
 *
 * Revision 2.8  1997/03/10  15:24:22  tom
 * look for frame 3
 *
 * Revision 2.7  1996/10/16  15:56:09  tom
 * new libimage
 *
 * Revision 2.6  1996/09/10  16:01:45  tom
 * change mm to cm
 *
 * Revision 2.5  1996/08/15  18:40:09  tom
 * corrected Max/Min for Matrix 7
 *
 * Revision 2.4  1996/08/13  17:53:51  tom
 * add File format and Z-origin
 *
 * Revision 2.3  1996/05/24  18:10:49  tom
 * use ATNSCALER instead of 10000
 *
 * Revision 2.2  1996/05/22  20:45:54  tom
 * fix s1 for attenuation images
 *
 * Revision 2.1  1996/05/22  20:35:37  tom
 * add decay correction factor
 *
 * Revision 2.0  1996/04/30  20:56:03  tom
 * new libimage.a
 *
 * Revision 1.17  1996/04/30  20:55:35  tom
 * *** empty log message ***
 *
 * Revision 1.16  1996/03/12  23:05:53  tom
 * *** empty log message ***
 *
 * Revision 1.15  1996/02/19  22:50:34  tom
 * change default scaler for scanlen=0 to 10000.
 *
 * Revision 1.14  1996/02/19  22:25:53  tom
 * set s1 to 1 for transmission images (where scan duration = 0)
 *
 * Revision 1.13  1996/01/03  19:58:32  tom
 * set version to 1.16
 * ,
 *
 * Revision 1.12  1996/01/03  19:57:48  tom
 * link with new libimg.a
 *
 * Revision 1.11  1996/01/03  18:06:18  tom
 * add archive type
 *
 * Revision 1.10  1995/12/20  16:07:28  tom
 * new libimg.a
 *
 * Revision 1.9  1995/12/19  15:10:30  tom
 * add frame start time
 *
 * Revision 1.8  1995/12/19  14:00:00  tom
 * add Max, Min, Frame length
 *
 * Revision 1.7  1995/12/18  17:17:32  tom
 * add printout of max in min values in frame
 *
 * Revision 1.6  1995/12/18  15:00:22  tom
 * elim unused variables
 *
 * Revision 1.5  1995/12/13  22:00:20  tom
 * add Image scaled by
 *
 * Revision 1.4  1995/12/12  18:51:46  tom
 * check frame 2 if no frame 1
 *
 * Revision 1.3  1995/11/30  22:00:01  tom
 * *** empty log message ***
 *
 * Revision 1.2  1995/11/28  21:25:16  tom
 * add Ver for 961
 *
 * Revision 1.1  1995/11/28  21:18:26  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			imghdr.c
 *	Date:			Dec 1995
 *	Author:			Tom Videen
 *	Description:	Read headers from ECAT, PETT VI or Interfiles
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: imghdr.c,v 3.6 2010/04/23 20:19:58 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <pettable.h>

int main (argc, argv)
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	int             index;
	int             index2;
	int             filtercode;

	int             frm;
	int             pc;
	char           *fname;
	char           *isotope;
	char           *radiopharmaceutical;
	char            fileformat[5][12];
	char            pcode[80];
	SubHeader      *sh;
	MainHeader     *mh;
	float           minval, maxval;
	float           mintmp, maxtmp;
	float           calib, decay, sfrac, sslop, dur, tval;
	float           dose;
	float           subscaler;
	float           ccir_default_dose = 1480000000;
	int             pln;

/*
 *	Get command line arguments.
 */

	if (argc < 2 || argc > 3) {
		fprintf (stderr, "Usage: imghdr filename [frame]\n");
		return (ERROR);
	}
	fname = argv[1];
	if (argc == 3)
		frm = atoi (argv[2]);
	else
		frm = 0;
	indx.frm = frm;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	calib = 1;
	dur = 0;

	(void) strcpy (fileformat[0], "Unknown");/* see image.h defines */
	(void) strcpy (fileformat[1], "Matrix 6");	/* see image.h defines */
	(void) strcpy (fileformat[2], "Matrix 7");
	(void) strcpy (fileformat[3], "Interfile");
	(void) strcpy (fileformat[4], "PETT VI");

	file = make_imgfile (fname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [imghdr]: Could not open %s\n", fname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [imghdr]: Could not get MainHeader from %s\n", fname);
		return (ERROR);
	}
	if (indx.frm == 0) {
		indx.frm = firstimgfrm (file);
		if (indx.frm <= 0) {
			fprintf (stderr, "ERROR [imghdr]: cannot find %s frame 1-%d\n", fname, -indx.frm);
			return (ERROR);
		}
	}
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [imghdr]: cannot find %s frame %d\n", file->name, frm);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [imghdr]: Could not read file subheader in %s\n", file->name);
		return (ERROR);
	}
	mh = file->mh;
	sh = file->sh;
	printf ("------------------------------------------------\n");
	if (strncmp(mh->date_time,"12/31/1969",10) == 0)
		printf ("%s     (no date)\n", file->name);
	else
		printf ("%s     %s\n", file->name, mh->date_time);
	printf ("File format = %s\n", fileformat[mh->file_format]);
	if (mh->file_format == 2)
		printf ("Original file name = %s\n", file->m7->mh->original_file_name);

	if (mh->pett6_flag == 1 || mh->scanner_type == 6)
		printf ("PETT VI\n");
	else if (mh->file_format != INTERFILE) {
		sfrac = sh->filter_scatter_fraction;
		sslop = sh->filter_scatter_slope;
		if (mh->scanner_type == 9110)
			printf ("ECAT %d  (GE Advance)\n", mh->scanner_type);
		else if (mh->scanner_type == 220)
			printf ("Focus %d\n", mh->scanner_type);
		else if (mh->scanner_type == 1094)
			printf ("Biograph PET/CT Model %d\n", mh->scanner_type);
		else
			printf ("ECAT %d\n", mh->scanner_type);
		if (mh->wobble_speed > 0)
			printf ("Wobbled acquisition\n");
		else
			printf ("Stationary acquisition\n");

		(void) strcpy (pcode, "");
		pc = sh->processing_code;
		if (pc > 0) {
			if (pc & 1)
				(void) strcat (pcode, "Norm");
			if (pc & 2)
				(void) strcat (pcode, "+AttenMeas");
			if (pc & 4)
				(void) strcat (pcode, "+AttenCalc");
			if (pc & 8)
				(void) strcat (pcode, "+XSmooth");
			if (pc & 16)
				(void) strcat (pcode, "+YSmooth");
			if (pc & 32)
				(void) strcat (pcode, "+ZSmooth");
			if (pc & 64)
				(void) strcat (pcode, "+ScatCor2d");
			if (pc & 128)
				(void) strcat (pcode, "+ScatCor3d");
			if (pc & 256)
				(void) strcat (pcode, "+ArcCor");
			if (pc & 512)
				(void) strcat (pcode, "+DecayCor");
		}
		if (mh->scanner_type == 1094)
			printf ("Scatter-corrected\n");
		else if ((sfrac > 0 && sslop > 0) || (pc & 64) || (pc & 128))
			printf ("Scatter-corrected  (%s)\n", pcode);
		else if (mh->scanner_type != 9110)
			printf ("No correction for scatter\n");

	}
	if (mh->file_format == 1)
		printf ("Software (Ver %d)  Facility = %s\n", mh->sw_version, file->m6->mh->facility_name);
	else if (mh->file_format == 2)
		printf ("Software (Ver %d)  Facility = %s\n", mh->sw_version, file->m7->mh->facility_name);
	else
		printf ("Software (Ver %d)\n", mh->sw_version);

	index2 = 0;
	if (mh->file_format != INTERFILE) {
		filtercode = sh->filter_code;
		if (abs (filtercode - GAUSSIAN_FILTER_CODE) <= 6) {
			index = abs (filtercode - GAUSSIAN_FILTER_CODE);
			index2 = GAUSS_INDEX;
		} else if (abs (filtercode - BUTTERWORTH_FILTER_CODE) <= 6) {
			index = abs (filtercode - BUTTERWORTH_FILTER_CODE);
			index2 = BUTTERWORTH_INDEX;
		} else
			index = abs (filtercode);

		if (mh->pett6_flag != 1)
			printf ("Filter = %s  Reconstruction Cutoff = %f\n", filterTable[index],
				sh->filter_cutoff_frequency);

		if (index2 == BUTTERWORTH_INDEX)
			printf ("3-D Butterworth:  Cutoff = %.2f  Order = %.0f\n",
				sh->filter_ramp_slope, sh->filter_order);
		else if (index2 == GAUSS_INDEX)
			printf ("3-D Gaussian:  Cutoff = %.2f\n", sh->filter_ramp_slope);

		calib = mh->calibration_factor;
		if (mh->pett6_flag != 1)
			printf ("ECAT calibration factor = %f\n", calib);
		if (mh->file_format == MATRIX_REV7) {
			printf ("Decay correction factor = %f\n", file->m7->sh->decay_corr_fctr);
			printf ("Recon Zoom = %.3f\n",file->m7->sh->recon_zoom);
			printf ("xoffset = %.1f  yoffset = %.1f cm\n",file->m7->sh->y_offset, file->m7->sh->z_offset);
			/* mysterious offset in file subheader */
		}
	}
	printf ("Pixel size = %f cm\n", sh->sample_size_1);
	printf ("Plane_separation = %f cm\n", mh->slicesep);
	isotope = mh->isotope;
	radiopharmaceutical = mh->radiopharmaceutical;
	printf ("Isotope =  %s   Compound = %s\n", isotope, radiopharmaceutical);

	if (calib < 1.0001 && calib > 0.9999) {
		if (strstr (isotope, "F-18") != 0 &&
		    strstr (isotope, "C-11") != 0 &&
		    strstr (isotope, "O-15") != 0 &&
		    strstr (isotope, "Ge-68") != 0 &&
		    strstr (isotope, "Ga-68") != 0 &&
		    strstr (isotope, "Co-57") != 0) {
			printf ("UNKNOWN isotope: %s\n", isotope);
			printf ("Unable to correct pie factor!\n");
		}
	}
	if (mh->scanner_type != 6)
		printf ("%d slices   %d frames   %dx%d   Bed Position: %.2f cm\n", mh->nplane,
			mh->nframe, sh->dim1, sh->dim2, mh->init_bed_pos);
	else
		printf ("%d slices   %d frames\n", mh->nplane, mh->nframe);

	if (mh->zorigin != 0)
		printf ("Z-origin = %d\n", mh->zorigin);

	if (mh->orientation == 0)
		printf ("Right-on-Right\n");
	else if (mh->orientation == 1)
		printf ("Right-on-Left\n");
	else if (mh->orientation == 2)
		printf ("Right-on-Left; Flipped Anterior/Posterior\n");
	else
		printf ("Non-standard Orientation\n");
	if (mh->scale_flag != 0)
		printf ("Image scaled by %f\n", mh->pr_scaler);

	if (mh->file_format == MATRIX_REV6 || mh->file_format == MATRIX_REV7) {
		printf ("Created with: %s\n", mh->sw_revision);
		printf ("Date: %s\n", mh->filetime);
	}
	if (mh->file_format == MATRIX_REV6) {
		calib = mh->calibration_factor;
		dur = sh->duration;
		if (dur == 0)
			tval = ATNSCALER;
		else
			tval = dur;
		if (sh->scale_factor > 0.)
			subscaler = tval * sh->scale_factor;
		else
			subscaler = tval;
		if (sh->calibration_factor > 0.)
			subscaler *= sh->calibration_factor;

		maxval = calib * subscaler * sh->max;
		minval = calib * subscaler * sh->min;
		for (pln = 2; pln <= mh->nplane; pln++) {
			indx.pln = pln;
			if (get_sh (file, &indx) != ERROR) {
				if (sh->scale_factor > 0.)
					subscaler = tval * sh->scale_factor;
				else
					subscaler = tval;
				if (sh->calibration_factor > 0.)
					subscaler *= sh->calibration_factor;
				maxtmp = calib * subscaler * sh->max;
				mintmp = calib * subscaler * sh->min;
				if (maxtmp > maxval)
					maxval = maxtmp;
				if (mintmp < minval)
					minval = mintmp;
			}
		}
		printf ("Max = %f   Min = %f\n", maxval, minval);

	} else if (mh->file_format == MATRIX_REV7) {
		calib = mh->calibration_factor;
		decay = file->m7->sh->decay_corr_fctr;
		sfrac = sh->filter_scatter_fraction;
		sslop = sh->filter_scatter_slope;
		dur = sh->duration;
		pc = sh->processing_code;

		dose = file->m7->mh->dosage;
		if ((dose > 0) && (dose != ccir_default_dose))
			printf ("Dose = %.1f  (%.2f mCi)\n", dose, dose/37037037);
	
		if (mh->scanner_type == 220)
			tval = 1;
		else if (dur == 0 || strncmp (file->m7->mh->data_units, "1/cm", 4) == 0)	/* transmission */
			tval = ATNSCALER;
		else if (calib > 1 && (sfrac > 0 || pc & 64 || pc & 128))	/* quantitative	*/
			tval = REV7SCALER * dur/ decay;			/* 0.000001	*/
		else		/* non-quantitative */
			tval = REV7NSCALE * dur/ decay;			/* 20.0	*/

		if (sh->scale_factor > 0.)
			subscaler = tval * sh->scale_factor;
		else
			subscaler = tval;
		if (sh->calibration_factor > 0.)
			subscaler *= sh->calibration_factor;
		maxval = calib * subscaler * sh->max;
		minval = calib * subscaler * sh->min;
		printf ("Max = %f   Min = %f\n", maxval, minval);
	}
	printf ("Frame length = %.3f sec\n", (float) dur / 1000.);
	printf ("Start time = %.3f sec\n", (float) sh->start_time / 1000.);
	if (mh->file_format != INTERFILE)
		printf ("Archive Type: %s %s %s %s\n", mh->scanner, mh->acquisition, mh->reconstruction, mh->filtername);
	free (file->name);
	free_imgfile (file);
	return (OK);
}
@


3.6
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 3.5 2006/07/03 13:33:08 tom Exp $
d3 3
d151 1
a151 1
static char     rcsid[] = "$Id: imghdr.c,v 3.5 2006/07/03 13:33:08 tom Exp $";
d183 1
d185 1
d207 3
d293 2
a294 1
		if (mh->scanner_type == 1094);
d424 4
@


3.5
log
@add plane dimensions
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 3.4 2006/04/10 16:32:27 tom Exp tom $
d3 3
d148 1
a148 1
static char     rcsid[] = "$Id: imghdr.c,v 3.4 2006/04/10 16:32:27 tom Exp tom $";
d158 1
a158 1
main (argc, argv)
d252 2
d285 2
a286 1
		if ((sfrac > 0 && sslop > 0) || (pc & 64) || (pc & 128))
@


3.4
log
@fix max scaling for ECAT 6
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 3.3 2005/03/25 20:13:15 tom Exp tom $
d3 3
d145 1
a145 1
static char     rcsid[] = "$Id: imghdr.c,v 3.3 2005/03/25 20:13:15 tom Exp tom $";
d343 2
a344 2
		printf ("%d slices   %d frames   Bed Position: %.2f cm\n", mh->nplane,
			mh->nframe, mh->init_bed_pos);
@


3.3
log
@add recon zoom and x- y-offsets for matrix 7 files
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 3.2 2004/09/07 19:27:08 tom Exp tom $
d3 3
d142 1
a142 1
static char     rcsid[] = "$Id: imghdr.c,v 3.2 2004/09/07 19:27:08 tom Exp tom $";
d369 1
a369 1
			tval = 1;
@


3.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 3.1 2004/08/31 15:04:55 tom Exp $
d3 3
d139 1
a139 1
static char     rcsid[] = "$Id: imghdr.c,v 3.1 2004/08/31 15:04:55 tom Exp $";
d312 1
a312 1
		if (mh->file_format == MATRIX_REV7)
d314 4
d337 1
a337 1
		printf ("%d slices   %d frames   Bed Position: %f cm\n", mh->nplane,
@


3.1
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 3.0 2004/02/16 17:31:17 tom Exp $
d3 3
d136 1
a136 1
static char     rcsid[] = "$Id: imghdr.c,v 3.0 2004/02/16 17:31:17 tom Exp $";
d319 6
a324 6
		if (strcmp (isotope, "F-18") != 0 &&
		    strcmp (isotope, "C-11") != 0 &&
		    strcmp (isotope, "O-15") != 0 &&
		    strcmp (isotope, "Ge-68") != 0 &&
		    strcmp (isotope, "Ga-68") != 0 &&
		    strcmp (isotope, "Co-57") != 0) {
@


3.0
log
@Feb 2004
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.21 2003/09/16 16:51:28 tom Exp tom $
d3 3
d133 1
a133 1
static char     rcsid[] = "$Id: imghdr.c,v 2.21 2003/09/16 16:51:28 tom Exp tom $";
d235 2
d320 2
a321 1
		    strcmp (isotope, "Ga-68") != 0) {
d393 3
a395 1
		if (dur == 0 || strncmp (file->m7->mh->data_units, "1/cm", 4) == 0)	/* transmission */
@


2.21
log
@omit scatter for 9110
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.20 2003/09/12 16:03:32 tom Exp tom $
d3 3
d123 1
a123 1
 *	Date:			Dec-95
d128 1
d130 1
a130 1
static char     rcsid[] = "$Id: imghdr.c,v 2.20 2003/09/12 16:03:32 tom Exp tom $";
a148 1
	float           factor = 0;
d161 2
a162 2
	float           scaler, s1;
	float           subscaler = 1;
d228 2
d263 1
a263 2
		if ((sh->filter_scatter_fraction > 0) && (sh->filter_scatter_slope > 0)
			|| (pc & 64) || (pc & 128))
d298 1
a298 1
		factor = mh->calibration_factor;
d300 1
a300 1
			printf ("ECAT calibration factor = %f\n", factor);
d310 1
a310 1
	if (factor < 1.0001 && factor > 0.9999) {
d345 6
a350 4
		scaler = mh->calibration_factor;
		s1 = (float) sh->duration;
		if (sh->duration == 0)
			s1 = ATNSCALER;
d352 3
a354 1
			subscaler = s1 * sh->scale_factor;
d357 3
a359 2
		maxval = scaler * subscaler * sh->max;
		minval = scaler * subscaler * sh->min;
d364 3
a366 1
					subscaler = s1 * sh->scale_factor;
d369 2
a370 2
				maxtmp = scaler * subscaler * sh->max;
				mintmp = scaler * subscaler * sh->min;
d380 14
a393 13
		scaler = mh->calibration_factor;
		s1 = (float) sh->duration;
		if (mh->file_format == MATRIX_REV7) {
			if (strncmp (file->m7->mh->data_units, "1/cm", 4) == 0)
				s1 = ATNSCALER;
			if (file->m7->mh->calibration_factor == 1 || file->m7->sh->filter_scatter_fraction == 0
			    || file->m7->sh->filter_scatter_slope == 0)
				s1 = s1 * REV7NSCALE / file->m7->sh->decay_corr_fctr;
			else
				s1 = s1 * REV7SCALER / file->m7->sh->decay_corr_fctr;
		}
		if (sh->duration == 0)
			s1 = ATNSCALER;
d395 3
a397 1
			subscaler = s1 * sh->scale_factor;
d400 2
a401 2
		maxval = scaler * subscaler * sh->max;
		minval = scaler * subscaler * sh->min;
d404 1
a404 1
	printf ("Frame length = %.3f sec\n", (float) sh->duration / 1000.);
@


2.20
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.19 2003/01/23 15:19:06 tom Exp tom $
d3 3
d126 1
a126 1
static char     rcsid[] = "$Id: imghdr.c,v 2.19 2003/01/23 15:19:06 tom Exp tom $";
d261 1
a261 1
		else
@


2.19
log
@add processing_code check
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.18 2002/12/26 20:33:24 tom Exp tom $
d3 3
d123 1
a123 1
static char     rcsid[] = "$Id: imghdr.c,v 2.18 2002/12/26 20:33:24 tom Exp tom $";
d211 4
a214 1
	printf ("%s     %s\n", file->name, mh->date_time);
d222 4
a225 1
		printf ("ECAT %d\n", mh->scanner_type);
@


2.18
log
@add O-15
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.17 2002/07/16 15:28:34 tom Exp tom $
d3 3
d120 1
a120 1
static char     rcsid[] = "$Id: imghdr.c,v 2.17 2002/07/16 15:28:34 tom Exp tom $";
d142 1
d147 1
d175 2
a176 2
	(void) strcpy (fileformat[0], "Unknown");	 /* see image.h defines */
	(void) strcpy (fileformat[1], "Matrix 6");	 /* see image.h defines */
d210 1
a210 1
	if (mh->file_format == 2) 
d222 27
a248 3
		if (sh->filter_scatter_fraction > 0 &&
		    sh->filter_scatter_slope > 0)
			printf ("Scatter-corrected\n");
d251 1
d253 1
a253 1
	if (mh->file_format == 1) 
d255 1
a255 1
	else if (mh->file_format == 2) 
@


2.17
log
@add Compound to output
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.16 2002/05/30 14:00:38 tom Exp tom $
d3 3
d117 1
a117 1
static char     rcsid[] = "$Id: imghdr.c,v 2.16 2002/05/30 14:00:38 tom Exp tom $";
d170 5
a174 5
	strcpy (fileformat[0], "Unknown");	 /* see image.h defines */
	strcpy (fileformat[1], "Matrix 6");	 /* see image.h defines */
	strcpy (fileformat[2], "Matrix 7");
	strcpy (fileformat[3], "Interfile");
	strcpy (fileformat[4], "PETT VI");
d265 5
a269 4
		if (strcmp (isotope, "F-18") == NULL &&
		    strcmp (isotope, "C-11") == NULL &&
		    strcmp (isotope, "Ge-68") == NULL &&
		    strcmp (isotope, "Ga-68") == NULL) {
@


2.16
log
@use REV7NSCALE for all non-calibrated matrix7 images
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.15 2002/03/27 15:11:22 tom Exp tom $
d3 3
d114 1
a114 1
static char     rcsid[] = "$Id: imghdr.c,v 2.15 2002/03/27 15:11:22 tom Exp tom $";
d138 1
d258 2
a259 1
	printf ("Isotope =  %s\n", isotope);
@


2.15
log
@add facility name
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.14 2001/08/30 14:21:19 tom Exp tom $
d3 3
d111 1
a111 1
static char     rcsid[] = "$Id: imghdr.c,v 2.14 2001/08/30 14:21:19 tom Exp tom $";
d323 2
a324 2
			if (file->m7->mh->calibration_factor == 1 && file->m7->sh->filter_scatter_fraction == 0
			    && file->m7->sh->filter_scatter_slope == 0)
@


2.14
log
@add original filename for Matrix 7
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.13 2000/07/18 17:12:12 tom Exp tom $
d3 3
d108 1
a108 1
static char     rcsid[] = "$Id: imghdr.c,v 2.13 2000/07/18 17:12:12 tom Exp tom $";
a114 1
#include <image.h>
d127 1
a127 1
	float           factor;
d213 6
a218 1
	printf ("Software (Ver %d)\n", mh->sw_version);
a219 1
	index = 0;
@


2.13
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.12 1999/12/15 21:10:38 tom Exp $
d3 3
d105 1
a105 1
static char     rcsid[] = "$Id: imghdr.c,v 2.12 1999/12/15 21:10:38 tom Exp $";
d193 2
@


2.12
log
@lint clean and y2k fix
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.11 1999/10/05 13:08:03 tom Exp tom $
d3 3
d102 1
a102 1
static char     rcsid[] = "$Id: imghdr.c,v 2.11 1999/10/05 13:08:03 tom Exp tom $";
d141 1
a141 1
		printf ("Usage: imghdr filename [frame]\n");
d193 1
a193 1
	else {
a205 1

d210 10
a219 9
	filtercode = sh->filter_code;
	if (abs (filtercode - GAUSSIAN_FILTER_CODE) <= 6) {
		index = abs (filtercode - GAUSSIAN_FILTER_CODE);
		index2 = GAUSS_INDEX;
	} else if (abs (filtercode - BUTTERWORTH_FILTER_CODE) <= 6) {
		index = abs (filtercode - BUTTERWORTH_FILTER_CODE);
		index2 = BUTTERWORTH_INDEX;
	} else
		index = abs (filtercode);
d221 3
a223 3
	if (mh->pett6_flag != 1)
		printf ("Filter = %s  Reconstruction Cutoff = %f\n", filterTable[index],
			sh->filter_cutoff_frequency);
d225 5
a229 5
	if (index2 == BUTTERWORTH_INDEX)
		printf ("3-D Butterworth:  Cutoff = %.2f  Order = %.0f\n",
			sh->filter_ramp_slope, sh->filter_order);
	else if (index2 == GAUSS_INDEX)
		printf ("3-D Gaussian:  Cutoff = %.2f\n", sh->filter_ramp_slope);
d231 6
a236 6
	factor = mh->calibration_factor;
	if (mh->pett6_flag != 1)
		printf ("ECAT calibration factor = %f\n", factor);
	if (mh->file_format == MATRIX_REV7)
		printf ("Decay correction factor = %f\n", file->m7->sh->decay_corr_fctr);

d262 4
d267 1
a267 1
		printf ("Right-on-Left\n");
d271 1
a271 1
	if (mh->scanner_type != 6) {
d327 2
a328 1
	printf ("Archive Type: %s %s %s %s\n", mh->scanner, mh->acquisition, mh->reconstruction, mh->filtername);
@


2.11
log
@remove check for old norm
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.10 1997/05/13 16:33:11 tom Exp tom $
d3 3
d99 1
a99 1
static char     rcsid[] = "$Id: imghdr.c,v 2.10 1997/05/13 16:33:11 tom Exp tom $";
d175 1
a175 1
		fprintf (stderr, "ERROR [imghdr]: cannot find %s frame %d\n", file, frm);
d179 1
a179 1
		fprintf (stderr, "ERROR [imghdr]: Could not read file subheader in %s\n", file);
@


2.10
log
@fractional start time and duration
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.9 1997/03/10 16:48:48 tom Exp tom $
d3 3
d96 1
a96 1
static char     rcsid[] = "$Id: imghdr.c,v 2.9 1997/03/10 16:48:48 tom Exp tom $";
a101 1
#include <math.h>
a112 3
	int             year;
	int             month;
	int             day;
a119 1
	char           *str;
d126 2
a127 1
	float           scaler, s1, subscaler;
d201 1
a201 15
	month = atoi (mh->date_time);
	str = strchr (mh->date_time, '/') + 1;
	day = atoi (str);
	str = strchr (str, '/') + 1;
	year = atoi (str);
	if (mh->file_format == MATRIX_REV6) {
		if (year == 0 || month == 0 || day == 0)
			printf ("Cannot determine scan date from header!\n");
		else if (year < 1993 ||
			 (year == 1993 && (month < 4 || (month == 4 && day < 12))))
			printf ("Software (Ver %d) reconstructed with old nrm (before 4/12/1993)\n", mh->sw_version);
		else
			printf ("Software (Ver %d) reconstructed with 6.4C or newer nrm\n", mh->sw_version);
	} else if (mh->file_format == MATRIX_REV7)
		printf ("Software (Ver %d)\n", mh->sw_version);
@


2.9
log
@use firstimgfrm
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.8 1997/03/10 15:24:22 tom Exp tom $
d3 3
d93 1
a93 1
static char     rcsid[] = "$Id: imghdr.c,v 2.8 1997/03/10 15:24:22 tom Exp tom $";
d330 2
a331 2
	printf ("Frame length = %d sec\n", sh->duration / 1000);
	printf ("Start time = %d sec\n", sh->start_time / 1000);
@


2.8
log
@look for frame 3
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.7 1996/10/16 15:56:09 tom Exp $
d3 3
d90 1
a90 1
static char     rcsid[] = "$Id: imghdr.c,v 2.7 1996/10/16 15:56:09 tom Exp $";
d107 1
a107 1
	Index      	    indx;
d117 1
a117 1
	char		   *fname;
d120 1
a120 1
	char		    fileformat[5][12];
d140 1
a140 1
		frm = 1;
d147 2
a148 2
	strcpy (fileformat[0], "Unknown");		/* see image.h defines */
	strcpy (fileformat[1], "Matrix 6");		/* see image.h defines */
d158 1
a158 1
	if (get_mh(file) == ERROR) {
d162 4
a165 13
	if (existimgfrm (file, &indx) == ERROR) {
		if (frm == 1) {
			indx.frm = 2;
			if (existimgfrm (file, &indx) == ERROR) {
				indx.frm = 3;
				if (existimgfrm (file, &indx) == ERROR) {
					fprintf (stderr, "ERROR [imghdr]: cannot find %s frame 1 or 2\n", file);
					return (ERROR);
				}
			}
		} else {
			fprintf (stderr, "ERROR [imghdr]: cannot find %s frame %d\n",
				 file, frm);
d169 4
d263 1
a263 1
	if (mh->zorigin != 0) 
a276 1

d309 2
a310 2
        	if (strncmp (file->m7->mh->data_units, "1/cm", 4) == 0)
            	s1 = ATNSCALER;
d312 1
a312 1
				&& file->m7->sh->filter_scatter_slope == 0)
a326 1

@


2.7
log
@new libimage
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.6 1996/09/10 16:01:45 tom Exp tom $
d3 3
d87 1
a87 1
static char     rcsid[] = "$Id: imghdr.c,v 2.6 1996/09/10 16:01:45 tom Exp tom $";
d163 5
a167 2
				fprintf (stderr, "ERROR [imghdr]: cannot find %s frame 1 or 2\n", file);
				return (ERROR);
@


2.6
log
@change mm to cm
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.5 1996/08/15 18:40:09 tom Exp tom $
d3 3
d84 1
a84 1
static char     rcsid[] = "$Id: imghdr.c,v 2.5 1996/08/15 18:40:09 tom Exp tom $";
@


2.5
log
@corrected Max/Min for Matrix 7
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.4 1996/08/13 17:53:51 tom Exp tom $
d3 3
d81 1
a81 1
static char     rcsid[] = "$Id: imghdr.c,v 2.4 1996/08/13 17:53:51 tom Exp tom $";
d251 1
a251 1
		printf ("%d slices   %d frames   Bed Position: %f mm\n", mh->nplane,
@


2.4
log
@add File format and Z-origin
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.3 1996/05/24 18:10:49 tom Exp tom $
d3 3
d78 1
a78 1
static char     rcsid[] = "$Id: imghdr.c,v 2.3 1996/05/24 18:10:49 tom Exp tom $";
d267 2
a268 1
	if (mh->file_format == MATRIX_REV6 || mh->file_format == MATRIX_REV7) {
d271 28
d302 3
a315 17
		if (mh->file_format == MATRIX_REV6) {
			for (pln = 2; pln <= mh->nplane; pln++) {
				indx.pln = pln;
				if (get_sh (file, &indx) != ERROR) {
					if (sh->scale_factor > 0.)
						subscaler = s1 * sh->scale_factor;
					if (sh->calibration_factor > 0.)
						subscaler *= sh->calibration_factor;
					maxtmp = scaler * subscaler * sh->max;
					mintmp = scaler * subscaler * sh->min;
					if (maxtmp > maxval)
						maxval = maxtmp;
					if (mintmp < minval)
						minval = mintmp;
				}
			}
		}
d318 1
@


2.3
log
@use ATNSCALER instead of 10000
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.2 1996/05/22 20:45:54 tom Exp tom $
d3 3
d75 1
a75 1
static char     rcsid[] = "$Id: imghdr.c,v 2.2 1996/05/22 20:45:54 tom Exp tom $";
d105 1
d132 6
d168 1
d249 3
@


2.2
log
@fix s1 for attenuation images
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.1 1996/05/22 20:35:37 tom Exp tom $
d3 3
d72 1
a72 1
static char     rcsid[] = "$Id: imghdr.c,v 2.1 1996/05/22 20:35:37 tom Exp tom $";
d255 1
a255 1
            	s1 = 10000.;
d260 1
a260 1
			s1 = 10000.;
@


2.1
log
@add decay correction factor
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 2.0 1996/04/30 20:56:03 tom Exp tom $
d3 3
d69 1
a69 1
static char     rcsid[] = "$Id: imghdr.c,v 2.0 1996/04/30 20:56:03 tom Exp tom $";
d252 1
a252 1
            	scaler = 10000.;
@


2.0
log
@new libimage.a
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.17 1996/04/30 20:55:35 tom Exp tom $
d3 3
d66 1
a66 1
static char     rcsid[] = "$Id: imghdr.c,v 1.17 1996/04/30 20:55:35 tom Exp tom $";
d210 2
d247 6
a252 2
		if (mh->file_format == MATRIX_REV7)
			s1 = s1 * REV7SCALER;
@


1.17
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.16 1996/03/12 23:05:53 tom Exp tom $
d3 3
d63 1
a63 1
static char     rcsid[] = "$Id: imghdr.c,v 1.16 1996/03/12 23:05:53 tom Exp tom $";
@


1.16
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.15 1996/02/19 22:50:34 tom Exp tom $
d3 3
d59 4
d67 3
a69 1
#include <libimg.h>
a71 2
static char     rcsid[] = "$Id: imghdr.c,v 1.15 1996/02/19 22:50:34 tom Exp tom $";

d76 2
a83 1
	int             plane = 1, gate = 1, data = 0, bed = 0;
d85 3
a89 3
	char           *filter_name;
	char          **files;			 /* list of files to sum */
	int            *frm;			 /* frame numbers corresponding to list of files */
d103 1
a103 1
		exit (ERROR);
d105 1
a105 3
	files = (char **) malloc (argc * sizeof (char *));
	frm = (int *) malloc (argc * sizeof (int));
	files[0] = argv[1];
d107 1
a107 1
		frm[0] = atoi (argv[2]);
d109 6
a114 1
		frm[0] = 1;
d116 4
a119 3
	if ((mh = getmhdr (files[0])) == NULL) {
		fprintf (stderr, "Could not open %s\n", files[0]);
		exit (ERROR);
d121 10
a130 6
	if (existimgfrm (mh, files[0], plane, frm[0], gate, data, bed) == ERROR) {
		if (frm[0] == 1) {
			frm[0] = 2;
			if (existimgfrm (mh, files[0], plane, frm[0], gate, data, bed) == ERROR) {
				fprintf (stderr, "ERROR [imghdr]: cannot find %s frame 1 or 2\n", files[0]);
				exit (ERROR);
d134 2
a135 2
				 files[0], frm[0]);
			exit (ERROR);
d138 3
a140 3
	if ((sh = getsbhdr (mh, files[0], plane, frm[0], gate, data, bed)) == NULL) {
		fprintf (stderr, "Could not read file subheader in %s\n", files[0]);
		exit (ERROR);
d142 2
d145 1
a145 1
	printf ("%s     %s\n", files[0], mh->date_time);
d147 1
a147 1
	if (mh->pett6_flag == 1)
d168 1
a168 1
	if (mh->scanner_type == 953) {
d173 1
a173 1
			printf ("Software (Ver %d) reconstructed with old nrm (before 4/12/1993)\n", mh->version);
d175 3
a177 3
			printf ("Software (Ver %d) reconstructed with 6.4C or newer nrm\n", mh->version);
	} else if (mh->scanner_type == 961)
		printf ("Software (Ver %d)\n", mh->version);
d180 1
a189 1
	filter_name = filterTable[index];
d192 1
a192 1
		printf ("Filter = %s  Reconstruction Cutoff = %f\n", filter_name,
d206 1
a206 1
	printf ("Plane_separation = %f cm\n", mh->slcthk);
d236 1
a236 1
	if (mh->scanner_type == 953 || mh->scanner_type == 961) {
d239 1
a239 1
		if (mh->version == 7 || mh->version >= 70)
a242 1

d249 15
a263 12
		for (pln = 2; pln <= mh->nplane; pln++) {
			if ((sh = getsbhdr (mh, files[0], pln, frm[0], gate, data, bed)) != NULL) {
				if (sh->scale_factor > 0.)
					subscaler = s1 * sh->scale_factor;
				if (sh->calibration_factor > 0.)
					subscaler *= sh->calibration_factor;
				maxtmp = scaler * subscaler * sh->max;
				mintmp = scaler * subscaler * sh->min;
				if (maxtmp > maxval)
					maxval = maxtmp;
				if (mintmp < minval)
					minval = mintmp;
d271 3
a273 1
	free_mh (mh);
@


1.15
log
@change default scaler for scanlen=0 to 10000.
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.14 1996/02/19 22:25:53 tom Exp tom $
d3 3
d63 1
a63 1
static char     rcsid[] = "$Id: imghdr.c,v 1.14 1996/02/19 22:25:53 tom Exp tom $";
d131 1
a131 1
	else
d133 4
a136 4
	if (mh->wobble_speed > 0)
		printf ("Wobbled acquisition\n");
	else
		printf ("Stationary acquisition\n");
d138 6
a143 5
	if (sh->filter_scatter_fraction > 0 &&
	    sh->filter_scatter_slope > 0)
		printf ("Scatter-corrected\n");
	else
		printf ("No correction for scatter\n");
d155 1
a155 2
			printf ("Reconstructed with old nrm (before 4/12/1993)   (Ver %d)\n",
				mh->version);
d157 1
a157 2
			printf ("Reconstructed with 6.4C or newer software  (Ver %d)\n",
				mh->version);
d159 1
a159 1
		printf ("Reconstructed with software  (Ver %d)\n", mh->version);
a217 1

@


1.14
log
@set s1 to 1 for transmission images (where scan duration = 0)
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.13 1996/01/03 19:58:32 tom Exp tom $
d3 3
d60 1
a60 1
static char     rcsid[] = "$Id: imghdr.c,v 1.13 1996/01/03 19:58:32 tom Exp tom $";
d223 1
a223 1
			s1 = 1.;
@


1.13
log
@set version to 1.16
,
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.12 1996/01/03 19:57:48 tom Exp tom $
d3 4
d57 1
a57 1
static char     rcsid[] = "$Id: imghdr.c,v 1.12 1996/01/03 19:57:48 tom Exp tom $";
d216 5
a220 4
		if (mh->version == 6 || mh->version == 64 || mh->version == 65)
			s1 = (float) sh->duration;
		else if (mh->version == 7 || mh->version >= 70)
			s1 = ((float) sh->duration) * REV7SCALER;
@


1.12
log
@link with new libimg.a
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.11 1996/01/03 18:06:18 tom Exp tom $
d3 3
d53 1
a53 1
static char     rcsid[] = "$Id: imghdr.c,v 1.11 1996/01/03 18:06:18 tom Exp tom $";
@


1.11
log
@add archive type
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.10 1995/12/20 16:07:28 tom Exp tom $
d3 3
d50 1
a50 1
static char     rcsid[] = "$Id: imghdr.c,v 1.10 1995/12/20 16:07:28 tom Exp tom $";
@


1.10
log
@new libimg.a
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.9 1995/12/19 15:10:30 tom Exp tom $
d3 3
d43 1
d47 1
a47 1
static char     rcsid[] = "$Id: imghdr.c,v 1.9 1995/12/19 15:10:30 tom Exp tom $";
d57 1
d148 8
a155 8
	if (filtercode >= 99 && filtercode <= 101)
		index = GAUSS_INDEX;
	else if (filtercode >= 199 && filtercode <= 201)
		index = BUTTERWORTH_INDEX;
	else if (filtercode == -1 || filtercode == 1)
		index = RAMP_INDEX;
	else if (filtercode >= 0 && filtercode < GAUSS_INDEX)
		index = filtercode;
d162 1
a162 1
	if (index == BUTTERWORTH_INDEX)
d165 1
a165 1
	else if (index == GAUSS_INDEX)
d235 1
@


1.9
log
@add frame start time
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.8 1995/12/19 14:00:00 tom Exp tom $
d3 3
d43 1
a43 1
static char     rcsid[] = "$Id: imghdr.c,v 1.8 1995/12/19 14:00:00 tom Exp tom $";
@


1.8
log
@add Max, Min, Frame length
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.7 1995/12/18 17:17:32 tom Exp tom $
d3 3
d40 1
a40 1
static char     rcsid[] = "$Id: imghdr.c,v 1.7 1995/12/18 17:17:32 tom Exp tom $";
d226 1
@


1.7
log
@add printout of max in min values in frame
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.6 1995/12/18 15:00:22 tom Exp tom $
d3 3
d37 1
a37 1
static char     rcsid[] = "$Id: imghdr.c,v 1.6 1995/12/18 15:00:22 tom Exp tom $";
d59 1
a59 1
	float           scaler, subscaler;
d175 5
a179 2
	printf ("%d slices   %d frames   Bed Position: %f mm\n", mh->nplane,
		mh->nframe, mh->init_bed_pos);
d188 4
a191 2
	printf ("Created with: %s\n", mh->sw_revision);
	printf ("Date: %s\n", mh->filetime);
d195 23
a217 22
		if (mh->version == 6 || mh->version == 64 || mh->version == 65) {
			subscaler = (float) sh->duration;
			if (sh->scale_factor > 0.)
				subscaler *= sh->scale_factor;
			if (sh->calibration_factor > 0.)
				subscaler *= sh->calibration_factor;
			maxval = scaler * subscaler * sh->max;
			minval = scaler * subscaler * sh->min;
			for (pln = 2; pln <= mh->nplane; pln++) {
				if ((sh = getsbhdr (mh, files[0], pln, frm[0], gate, data, bed)) != NULL) {
					subscaler = (float) sh->duration;
					if (sh->scale_factor > 0.)
						subscaler *= sh->scale_factor;
					if (sh->calibration_factor > 0.)
						subscaler *= sh->calibration_factor;
					maxtmp = scaler * subscaler * sh->max;
					mintmp = scaler * subscaler * sh->min;
					if (maxtmp > maxval)
						maxval = maxtmp;
					if (mintmp < minval)
						minval = mintmp;
				}
d219 1
a219 10
		} else if (mh->version == 7 || mh->version >= 70) {
			subscaler = ((float) sh->duration) * REV7SCALER;
			if (sh->scale_factor > 0.)
				subscaler *= sh->scale_factor;
			if (sh->calibration_factor > 0.)
				subscaler *= sh->calibration_factor;
			maxval = scaler * subscaler * sh->max;
			minval = scaler * subscaler * sh->min;
		} else
			exit;
d222 1
@


1.6
log
@elim unused variables
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.5 1995/12/13 22:00:20 tom Exp tom $
d3 3
d34 1
a34 1
static char     rcsid[] = "$Id: imghdr.c,v 1.5 1995/12/13 22:00:20 tom Exp tom $";
d54 4
d185 37
@


1.5
log
@add Image scaled by
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.4 1995/12/12 18:51:46 tom Exp tom $
d3 3
d31 1
a31 1
static char     rcsid[] = "$Id: imghdr.c,v 1.4 1995/12/12 18:51:46 tom Exp tom $";
d42 1
a42 1
	int             plane = 1, frame1 = 1, gate = 1, data = 0, bed = 0;
@


1.4
log
@check frame 2 if no frame 1
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.3 1995/11/30 22:00:01 tom Exp tom $
d3 3
d28 1
a28 1
static char     rcsid[] = "$Id: imghdr.c,v 1.3 1995/11/30 22:00:01 tom Exp tom $";
a163 3
/*
	printf ("Comment: %s\n", mh->study_description);
*/
d169 2
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.2 1995/11/28 21:25:16 tom Exp tom $
d3 3
d14 1
a14 1
 *	Date:			Nov-95
d25 1
a25 1
static char     rcsid[] = "$Id: imghdr.c,v 1.2 1995/11/28 21:25:16 tom Exp tom $";
d38 1
a38 1
	char		   *str;
d58 1
a58 1
		frm[0] = atoi(argv[2]);
d66 13
d102 1
a102 1
	str = strchr (mh->date_time,'/') + 1;
d104 1
a104 1
	str = strchr (str,'/') + 1;
d110 1
a110 1
		 	(year == 1993 && (month < 4 || (month == 4 && day < 12))))
@


1.2
log
@add Ver for 961
@
text
@d1 1
a1 1
/*	$Id: imghdr.c,v 1.1 1995/11/28 21:18:26 tom Exp tom $
d3 3
d22 1
a22 1
static char     rcsid[] = "$Id: imghdr.c,v 1.1 1995/11/28 21:18:26 tom Exp tom $";
d63 1
a63 1
	if ((sh = getsbhdr (files[0], plane, frm[0], gate, data, bed)) == NULL) {
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*	$Id$
	$Log$ */
d19 1
a19 1
static char     rcsid[] = "$Id$";
d97 2
a98 1
	}
@
