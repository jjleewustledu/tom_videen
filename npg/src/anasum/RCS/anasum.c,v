head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	2008.11.07.14.00.35;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2005.04.21.19.28.42;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.18.12.43;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.12.16.18.00.47;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.12.14.19.32.44;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.11.17.36.28;	author tom;	state Exp;
branches;
next	;


desc
@@


2.2
log
@permit dim=3
@
text
@/*	$Log: anasum.c,v $
 * Revision 2.1  2005/04/21  19:28:42  tom
 * read floats as well as short ints
 *
 * Revision 2.0  2004/02/13  18:12:43  tom
 * Feb 2004
 *
 * Revision 1.3  1999/12/16  18:00:47  tom
 * new libs, sync version
 *
 * Revision 1.2  1999/12/14  19:32:44  tom
 * lint cleaning
 *
 * Revision 1.1  1999/02/11  17:36:28  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anasum.c
 *	Date:			Feb 1999
 *	Author:			Tom Videen
 *	Description:	Add 2 Analyze images
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasum/RCS/anasum.c,v 2.1 2005/04/21 19:28:42 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anasum
 *	----------------------------
 */
int main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* input file */
	char           *img3, *hdr3;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	short          *imga, *imgb;		 /* image */
	float          *fimga, *fimgb;		 /* float image */
	int             itype1 = 0;		 /* 0 = int, 1 = float	 */
	int             itype2 = 0;		 /* 0 = int, 1 = float	 */

	if (argc != 7) {
		printf ("Usage: anasum img1 hdr1 img2 hdr2 img3 hdr3\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	hdr3 = argv[5];
	img3 = argv[6];

/*	Get first image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anasum]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anasum]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anasum]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);

	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype1 = 0;
		imga = (short *) calloc (num, sizeof (short));
		if (imga == NULL) {
			fprintf (stderr, "ERROR [anasum]: calloc imga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anasum]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype1 = 1;
		fimga = (float *) calloc (num, sizeof (float));
		if (fimga == NULL) {
			fprintf (stderr, "ERROR [anasum]: calloc fimga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anasum]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else {
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

/*	Get second image */

	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anasum]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anasum]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anasum]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);
	if (num != dim1 * dim2 * dim3) {
		fprintf (stderr, "ERROR [anasum]: images are not same size\n");
		return (ERROR);
	}
	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype2 = 0;
		imgb = (short *) calloc (num, sizeof (short));
		if (imgb == NULL) {
			fprintf (stderr, "ERROR [anasum]: calloc imgb\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anasum]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (imgb, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: reading: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype2 = 1;
		fimgb = (float *) calloc (num, sizeof (float));
		if (fimgb == NULL) {
			fprintf (stderr, "ERROR [anasum]: calloc fimgb\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anasum]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (fimgb, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: reading: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
	} else {
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}


/*	Add and write summed image */

	if ((fd_img = fopen (img3, "w")) == 0) {
		fprintf (stderr, "ERROR [anasum]: opening %s\n", img3);
		return (ERROR);
	}
	if (itype1 == 0 && itype2 == 0) {
		for (i = 0; i < num; i++)
			imga[i] += imgb[i];
		if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as integer\n", img3);
		free (imga);
		free (imgb);
	} else if (itype1 == 0 && itype2 == 1) {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			fimgb[i] += imga[i];
		if ((fwrite (fimgb, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (imga);
		free (fimgb);
	} else if (itype1 == 1 && itype2 == 0) {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			fimga[i] += imgb[i];
		if ((fwrite (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (fimga);
		free (imgb);
	} else {
		hdr.dime.datatype = 16;
		hdr.dime.bitpix = 32;
		for (i = 0; i < num; i++)
			fimga[i] += fimgb[i];
		if ((fwrite (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anasum]: writing %s\n", img3);
			return (ERROR);
		}
		fprintf (stderr, "Wrote %s as float\n", img3);
		free (fimga);
		free (fimgb);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr3, "w")) == 0) {
		fprintf (stderr, "ERROR [anasum]: openng %s\n", hdr3);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anasum]: writing %s\n", hdr3);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	return (OK);
}
@


2.1
log
@read floats as well as short ints
@
text
@d2 3
d26 1
a26 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasum/RCS/anasum.c,v 2.0 2004/02/13 18:12:43 tom Exp tom $";
d38 1
a38 1
main (argc, argv)
d77 1
a77 1
	if (hdr.dime.dim[0] != 4) {
d139 1
a139 1
	if (hdr.dime.dim[0] != 4) {
@


2.0
log
@Feb 2004
@
text
@d2 3
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasum/RCS/anasum.c,v 1.3 1999/12/16 18:00:47 tom Exp tom $";
d43 3
a45 3
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* input file */
	char           *img3, *hdr3;	 /* output file */
d48 4
a51 1
	short          *imga, *imgb;	 /* image */
d67 1
a67 1
		fprintf (stderr, "ERROR [anasum]: Cannot open: %s\n", hdr1);
d71 1
a71 1
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr1);
d75 1
a75 1
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr1);
a78 10
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
d82 1
a83 1
	num = dim1*dim2*dim3;
d85 38
a122 3
	imga = (short*) calloc (num, sizeof (short));
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anasum]: Cannot calloc imga\n");
a124 10
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anasum]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (imga, sizeof(short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout,"Read %s\n", img1);
d129 1
a129 1
		fprintf (stderr, "ERROR [anasum]: Cannot open: %s\n", hdr2);
d133 1
a133 1
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr2);
d137 1
a137 1
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr2);
a140 10
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", hdr2);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
d144 1
d146 2
a147 3
	
	if (num != dim1*dim2*dim3) {
		fprintf (stderr, "ERROR [anasum]: Images are not same size\n");
d150 38
a187 4

	imgb = (short*) calloc (num, sizeof (short));
	if (imgb == NULL) {
		fprintf (stderr, "ERROR [anasum]: Cannot calloc imgb\n");
a189 10
	if ((fd_img = fopen (img2, "r")) == 0) {
		fprintf (stderr, "ERROR [anasum]: Cannot open: %s\n", img2);
		return (ERROR);
	}
	if ((fread (imgb, sizeof(short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anasum]: Reading: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout,"Read %s\n", img2);
d191 1
a193 3
	for (i = 0; i < num; i++)
		imga[i] += imgb[i];

d195 1
a195 1
		fprintf (stderr, "ERROR [anasum]: Unable to open %s\n", img3);
d198 46
a243 3
	if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anasum]: Error writing to: %s\n", img3);
		return (ERROR);
d248 1
a248 1
		fprintf (stderr, "ERROR [anasum]: Unable to open %s\n", hdr3);
d252 1
a252 1
		fprintf (stderr, "ERROR [anasum]: Error writing to: %s\n", hdr3);
a255 3

	free (imga);
	free (imgb);
@


1.3
log
@new libs, sync version
@
text
@d2 3
d13 1
a13 1
 *	Date:			Feb-99
d18 1
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasum/RCS/anasum.c,v 1.2 1999/12/14 19:32:44 tom Exp tom $";
d86 1
a86 1
	fclose (fd_hdr);
d102 1
a102 1
	fclose (fd_img);
d133 1
a133 1
	fclose (fd_hdr);
d153 1
a153 1
	fclose (fd_img);
d169 1
a169 1
	fclose (fd_img);
d179 1
a179 1
	fclose (fd_hdr);
@


1.2
log
@lint cleaning
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasum/RCS/anasum.c,v 1.1 1999/02/11 17:36:28 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anasum/RCS/anasum.c,v 1.1 1999/02/09 17:55:40 tom Exp $";
d17 1
a17 1
#include <string.h>
@
