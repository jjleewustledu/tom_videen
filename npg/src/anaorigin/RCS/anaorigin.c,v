head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2010.12.30.20.54.58;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.11.19.31.23;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/*	$Log: anaorigin.c,v $
 * Revision 1.1  2009/05/11  19:31:23  tom
 * Initial revision
 *
 * Revision 1.1  2009/05/11  19:28:23  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anaorigin.c
 *	Date:			Nov 2008
 *	Author:			Tom Videen
 *	Description:	Set SPM5 origin in  Analyze header
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaorigin/RCS/anaorigin.c,v 1.1 2009/05/11 19:31:23 tom Exp tom $";
#endif

#include <stdio.h>
#include <string.h>
#include <myvalues.h>
#include <dbh.h>

/*	----------------------------
 *	Function:			anaorigin
 *	----------------------------
 */
int             main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;
	FILE           *fd_hdr;			 /* file for hdr */
	char           *hdr1;			 /* input file */

/*
#include <stdlib.h>
	float           xv, yv, zv;		  origin in vidi coordinates 
	float           xs, ys, zs;		  origin in SPM5 coordinates
	float           xdim, ydim, zdim;	  image size 
	float           xpix, ypix, zpix;	  pixel size
	long            num, i;
    short           sptr[5];
    float           forg[4];

	xv = atof (argv[2]);
	yv = atof (argv[3]);
	zv = atof (argv[4]);
	fprintf (stderr, "%f %f %f\n", xv, yv, zv);
*/

	if (argc != 2) {
		fprintf (stderr, "Usage: anaorigin hdr\n");
		return (ERROR);
	}
	hdr1 = argv[1];

/*	Get image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anaorigin]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anaorigin]: reading %s\n", hdr1);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	(void) memset (&hdr.hk.data_type, 0, 9);
	hdr.hk.extents = 0;
	hdr.hk.session_error = 0;
	(void) memset (&hdr.hk.hkey_un0, 0, 1);

	hdr.dime.dim[0] = 3;
	hdr.dime.dim[5] = 0;
	hdr.dime.dim[6] = 0;
	hdr.dime.dim[7] = 0;
	hdr.dime.pixdim[0] = 0.0;
	hdr.dime.pixdim[4] = 0.0;
	hdr.dime.pixdim[5] = 0.0;
	hdr.dime.pixdim[6] = 0.0;
	hdr.dime.compressed = 0;
	hdr.dime.verified = 0;

	(void) memset (&hdr.hist.aux_file, 0, 120);
	(void) memset (&hdr.hist.originator, 0, 11);

/*	Values for Analyze header appropriate for SPM5 	*/
/*
	fprintf (stderr, "%d\n", argc);
	if (argc > 2) {
		xdim = hdr.dime.dim[1];
		ydim = hdr.dime.dim[2];
		zdim = hdr.dime.dim[3];
		xpix = hdr.dime.pixdim[1];
		ypix = hdr.dime.pixdim[2];
		zpix = hdr.dime.pixdim[3];
		xs = 2*xdim - xv;
		ys = 2*ydim - yv;
		zs = 2*zdim - yv;
		fprintf (stderr, "%f %f %f\n", xs, ys, zs);

		sptr[0] = 512;
		sptr[1] = 512;
		sptr[2] = 0;
		sptr[3] = 63;
		sptr[4] = 32768;

		forg[0] = 0;
		forg[1] = xs;
		forg[2] = -ys;
		forg[3] = -zs;

	    memcpy (&(hdr.hist.originator),sptr, 10);
	    memcpy (&(hdr.hist.generated[1]),forg, 16);

	}
*/

	if ((fd_hdr = fopen (hdr1, "w")) == 0) {
		fprintf (stderr, "ERROR [anaorigin]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anaorigin]: writing %s\n", hdr1);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anaorigin/anaorigin.c,v 1.1 2009/05/11 19:28:23 tom Exp tom $";
d37 1
d39 1
d41 1
a41 1
	float           xs, ys, zs;		  origin in SPM5 coordinates 
d43 1
a43 1
	float           xpix, ypix, zpix;	  pixel size 
d46 6
a51 1
    float           forg[16];
d72 5
a76 1
	(void) memset (&hdr.hist.aux_file, 0, 120);
d78 9
d88 2
a89 2
/*	Values for Analyze header appropriate for SPM5 
	STRUCTURE INDETERMINATE
d91 4
a94 5
	hdr.dime.dim[0] = 3;
	xv = atof (argv[2]);
	yv = atof (argv[3]);
	zv = atof (argv[4]);
	if (xv > 0 && yv > 0 && zv > 0) {
d101 4
a104 3
		xs = (xv - 1) * xdim;
		ys = (1 - yv) * ydim;
		zs = (zv - zdim - 1) * zdim;
d113 3
a115 9
		forg[1] = 127;
		forg[2] = -127;
		forg[3] = -54;
		forg[4] = -2;
		forg[7] = 127;
		forg[9] = 2;
		forg[11] = -127;
		forg[14] = 2;
		forg[15] = -54;
d118 1
a118 1
	    memcpy (&(hdr.hist.generated[1]),forg, 64);
@
