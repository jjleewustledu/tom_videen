head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.02.23.15.35.05;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Log$ */
/*	===============================================================================
 *	Module:			analocalmean.c
 *	Date:			Feb 2006
 *	Author:			Tom Videen
 *	Description:	Compute mean of 2 or more Analyze images
 *					based on local number of non-zero voxels
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/analocalmean/RCS/analocalmean.c,v 2.0 2004/02/13 18:04:01 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			analocalmean
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* output file names */
	char           *img2, *hdr2;		 /* input file names */
	char           *name;
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	int             n, nimg;
	long           *limg;			 /* long image */
	short          *simg;			 /* short image */
	short          *cimg;			 /* short image */

	if (argc < 5) {
		fprintf (stderr,"Usage: analocalmean num img1 img2 img3 ...\n");
		return (ERROR);
	}
	hdr1 = (char *) calloc (256, sizeof (char));
	img1 = (char *) calloc (256, sizeof (char));
	hdr2 = (char *) calloc (256, sizeof (char));
	img2 = (char *) calloc (256, sizeof (char));
	if (hdr1 == NULL)
		return (ERROR);
	if (img1 == NULL)
		return (ERROR);
	if (hdr2 == NULL)
		return (ERROR);
	if (img2 == NULL)
		return (ERROR);

	nimg = atoi (argv[1]);
	name = argv[2];
	(void) strcpy (hdr1, name);
	(void) strcpy (img1, name);
	(void) strcat (hdr1, ".hdr");
	(void) strcat (img1, ".img");

/*	Get first image */

	name = argv[3];
	(void) strcpy (hdr2, name);
	(void) strcpy (img2, name);
	(void) strcat (hdr2, ".hdr");
	(void) strcat (img2, ".img");
	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [analocalmean]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analocalmean]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [analocalmean]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [analocalmean]: reading %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [analocalmean]: reading %s\n", hdr2);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1 * dim2 * dim3;

	cimg = (short *) calloc (num, sizeof (short));
	if (cimg == NULL) {
		fprintf (stderr, "ERROR [analocalmean]: calloc cimg\n");
		return (ERROR);
	}
	simg = (short *) calloc (num, sizeof (short));
	if (simg == NULL) {
		fprintf (stderr, "ERROR [analocalmean]: calloc simg\n");
		return (ERROR);
	}
	limg = (long *) calloc (num, sizeof (long));
	if (limg == NULL) {
		fprintf (stderr, "ERROR [analocalmean]: calloc limg\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img2, "r")) == 0) {
		fprintf (stderr, "ERROR [analocalmean]: opening %s\n", img2);
		return (ERROR);
	}
	if ((fread (simg, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [analocalmean]: reading %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img2);
	for (i = 0; i < num; i++) {
		limg[i] = (long) simg[i];
		if (simg[i] > 0)
			cimg[i] = 1;
		else
			cimg[i] = 0;
	}

/*	Get other images */

	for (n = 3; n <= nimg; n++) {
		name = argv[n + 1];
		(void) strcpy (hdr2, name);
		(void) strcpy (img2, name);
		(void) strcat (hdr2, ".hdr");
		(void) strcat (img2, ".img");
		if ((fd_hdr = fopen (hdr2, "r")) == 0) {
			fprintf (stderr, "ERROR [analocalmean]: opening %s\n", hdr2);
			return (ERROR);
		}
		if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
			fprintf (stderr, "ERROR [analocalmean]: reading %s\n", hdr2);
			return (ERROR);
		}
		if (hdr.dime.dim[0] != 4) {
			fprintf (stderr, "ERROR [analocalmean]: reading %s\n", hdr2);
			fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
			return (ERROR);
		}
		if (hdr.dime.datatype != 4) {
			fprintf (stderr, "ERROR [analocalmean]: reading %s\n", hdr2);
			fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
			return (ERROR);
		}
		if (hdr.dime.bitpix != 16) {
			fprintf (stderr, "ERROR [analocalmean]: reading %s\n", hdr2);
			fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
			return (ERROR);
		}
		dim1 = hdr.dime.dim[1];
		dim2 = hdr.dime.dim[2];
		dim3 = hdr.dime.dim[3];
		(void) fclose (fd_hdr);

		if (num != dim1 * dim2 * dim3) {
			fprintf (stderr, "ERROR [analocalmean]: Images are not same size\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [analocalmean]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fread (simg, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [analocalmean]: reading %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);

/*	Add images */

		for (i = 0; i < num; i++) {
			limg[i] += (long) simg[i];
			if (simg[i] > 0)
				cimg[i] = cimg[i]  + 1;
		}

	}

/*	Write mean image */

	for (i = 0; i < num; i++)
		simg[i] += (short) ((float) limg[i] / (float) cimg[i]);
	if ((fd_img = fopen (img1, "w")) == 0) {
		fprintf (stderr, "ERROR [analocalmean]: opening %s\n", img1);
		return (ERROR);
	}
	fprintf (stdout, "Writing %s\n", img1);
	if ((fwrite (simg, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [analocalmean]: writing %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr1, "w")) == 0) {
		fprintf (stderr, "ERROR [analocalmean]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analocalmean]: writing %s\n", hdr1);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	free (simg);
	free (limg);
	free (cimg);
	return (OK);
}
@
