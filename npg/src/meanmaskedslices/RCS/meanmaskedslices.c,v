head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.16.21.38.07;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.16.16.13;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.19.19.05.25;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.29.18.33.24;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/* $Log: meanmaskedslices.c,v $
 * Revision 1.3  2002/11/27  16:16:13  tom
 * *** empty log message ***
 *
 * Revision 1.2  2001/09/19  19:05:25  tom
 * *** empty log message ***
 *
 * Revision 1.1  2000/06/29  18:33:24  tom
 * Initial revision
 * */
/*	=========================================================================
 *	Module:			meanmaskedslices.c
 *	Author:			Tom Videen
#	Description:	Compute mean counts in an image for all slices with the mask
 *	=================================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Id: meanmaskedslices.c,v 1.3 2002/11/27 16:16:13 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>
#include <libnrimg.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	char           *imgname;		 /* input image filename */
	char           *mskname;		 /* mask image filename */
	float           sum;
	float           mean;
	long            npix = 0;			 /* total pixels */
	long            dim1, dim2, dim3;	 /* dimensions of tensors */
	long            first, last;		 /* first and last planes */
	long            i, j, pln;
	float        ***image = NULL;		 /* input image tensor */
	float        ***mask = NULL;		 /* mask image tensor */

/*
 *	Get command line arguments.
 */
	imgname = argv[1];
	mskname = argv[2];
	first = atoi(argv[3]);
	last = atoi(argv[4]);

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*
 *	Read mask
 */
	file = make_imgfile (mskname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot open %s\n", mskname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot get MainHeader from %s\n", mskname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot find %s frame 1-%d\n", mskname, -indx.frm);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot find %s frame %d\n", mskname, indx.frm);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot read file subheader in %s\n", mskname);
		return (ERROR);
	}
	dim1 = (long) file->sh->dim1;
	dim2 = (long) file->sh->dim2;
	dim3 = (long) file->sh->dim3;
	if (dim3 < last) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Range exceeds image dimensions\n");
		return (ERROR);
	}
	if ((mask = readtensor (file, &indx)) == NULL) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot read %s\n", mskname);
		return (ERROR);
	}
	close_imgfile (file);

/*
 *	Read image to mask
 */
	file = make_imgfile (imgname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot open %s\n", imgname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot get MainHeader from %s\n", imgname);
		return (ERROR);
	}
	indx.frm = firstimgfrm (file);
	indx.pln = 1;
	if (indx.frm <= 0) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot find %s frame 1-%d\n", imgname, -indx.frm);
		return (ERROR);
	}
	if (existimgfrm (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot find %s frame %d\n", imgname, indx.frm);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot read file subheader in %s\n", imgname);
		return (ERROR);
	}
	if (dim1 != (long) file->sh->dim1) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Image and mask have different dimensions\n");
		return (ERROR);
	}
	if (dim2 != (long) file->sh->dim2) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Image and mask have different dimensions\n");
		return (ERROR);
	}
	if (dim3 != (long) file->sh->dim3) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Image and mask have different dimensions\n");
		return (ERROR);
	}
	if ((image = readtensor (file, &indx)) == NULL) {
		fprintf (stderr, "ERROR [meanmaskedslices]: Cannot read %s\n", imgname);
		return (ERROR);
	}

/*	Compute slice means at set output image values */

	sum = 0;
	npix = 0;
	for (pln = first; pln <= last; pln++) {
		for (j = 1; j <= dim2; j++) {
			for (i = 1; i <= dim1; i++) {
				if (mask[pln][j][i] > 0) {
					sum = sum + image[pln][j][i];
					npix++;
				}
			}
		}
	}
	if (npix > 0) 
		mean = sum / npix;
	else
		mean = 0.;
	printf ("%12s %12s\n", "Pixels", "Mean");
	printf ("%12ld %12.3f\n", npix, mean);
	close_imgfile (file);
	free_imgfile (file);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d17 1
d19 1
a19 1
static char     rcsid[] = "$Id: meanmaskedslices.c,v 1.2 2001/09/19 19:05:25 tom Exp tom $";
d30 1
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Id: meanmaskedslices.c,v 1.1 2000/06/29 18:33:24 tom Exp tom $";
a19 2
#include <string.h>
#include <floatingpoint.h>
a21 1
#include <nr.h>
a23 1
#include <imgutil.h>
d156 1
a156 1
	printf ("%12d %12.3f\n", npix, mean);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d12 1
a12 1
static char     rcsid[] = "$Id: meanmaskedslices.c,v 1.2 1997/10/24 17:29:34 tom Exp $";
d156 2
a157 1
	printf ("Mean = %.2f   Pixels = %d\n", mean, npix);
@
