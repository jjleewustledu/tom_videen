head	1.33;
access;
symbols;
locks; strict;
comment	@# @;


1.33
date	2010.07.16.22.06.12;	author tom;	state Exp;
branches;
next	1.32;

1.32
date	2010.03.18.15.17.39;	author tom;	state Exp;
branches;
next	1.31;

1.31
date	2009.04.08.14.29.06;	author tom;	state Exp;
branches;
next	1.30;

1.30
date	2008.10.30.15.46.41;	author tom;	state Exp;
branches;
next	1.29;

1.29
date	2008.10.30.15.30.07;	author tom;	state Exp;
branches;
next	1.27;

1.27
date	2007.07.02.17.04.29;	author tom;	state Exp;
branches;
next	1.26;

1.26
date	2006.06.26.16.52.05;	author tom;	state Exp;
branches;
next	1.25;

1.25
date	2006.06.26.15.51.53;	author tom;	state Exp;
branches;
next	1.24;

1.24
date	2006.06.06.19.23.55;	author tom;	state Exp;
branches;
next	1.23;

1.23
date	2006.06.06.18.59.02;	author tom;	state Exp;
branches;
next	1.22;

1.22
date	2006.01.10.18.31.50;	author tom;	state Exp;
branches;
next	1.21;

1.21
date	2005.05.18.20.04.52;	author tom;	state Exp;
branches;
next	1.20;

1.20
date	2005.05.18.16.48.05;	author tom;	state Exp;
branches;
next	1.19;

1.19
date	2005.05.03.20.58.58;	author tom;	state Exp;
branches;
next	1.18;

1.18
date	2005.04.19.18.54.29;	author tom;	state Exp;
branches;
next	1.17;

1.17
date	2005.04.19.16.23.41;	author tom;	state Exp;
branches;
next	1.16;

1.16
date	2005.04.14.17.41.10;	author tom;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.14.15.39.10;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	2005.04.14.14.22.58;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	2005.04.14.14.15.57;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.12.15.29.34;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.13.21.48.38;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.12.16.03.03;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.25.14.38.12;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.13.16.04.47;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.18.21.27.54;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.17.15.51.30;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.17.15.53.15;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.17.14.59.19;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.14.19.23.24;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.14.19.21.35;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.14.18.19.42;	author tom;	state Exp;
branches;
next	;


desc
@@


1.33
log
@change max array from 512 to 1024
@
text
@#!/bin/csh
#	Name:	dcm2analyze
#	Date:	Apr 2009
#	Author:	Tom Videen
#	Use:	Convert DICOM MR/CT files to 3D ANALYZE/Interfile image

if ($#argv < 3 || $#argv > 4) then
	echo "Usage:  dcm2analyze first last output_root [m/s/t]"
	echo " e.g.,  dcm2analyze 4 131 p5000_mprage"
	echo "   or,  dcm2analyze 4 72 stretch_mprage m"
	echo "   or,  dcm2analyze 4 131 p5000_fl3d s"
	echo "        (use the 'm' flag to indicate monkey scans)"
	echo "        (use the 's' flag to indicate skip slice reordering)"
	echo "        (use the 't' flag to indicate monkey in Trio)"
	exit 1
endif

if (! $?NPG) setenv NPG /usr/local/npg
set first = $1
set last = $2
set out = $3
set flag = 0
set skip = 0
if ($#argv == 4) then
	if ($4 == 'm') then
		set flag = 1
	else if ($4 == 't') then
		set flag = 2
	else if ($4 == 's') then
		set skip = 1
	else
		echo "ERROR [dcm2analyze]: flag must be 'm', 's' or 't'"
		exit 1
	endif
endif

set hdr = dcm2analyze$$.hdr
set tmp = dcm2analyze$$.tmp

if ($first > $last) then
	echo "first file number is greater than last"
	exit 1
endif

# Check that all scan files exist
# -------------------------------
set i = $first
while ($i <= $last)
	if ($i < 10) then
		set n = "0000$i"
	else if ($i < 100) then
		set n = "000$i"
	else if ($i < 1000) then
		set n = "00$i"
	else if ($i < 10000) then
		set n = "0$i"
	else
		set n = $i
	endif
	if (! -e $n.dcm) then
		echo "Cannot find $n.dcm"
		exit 1
	endif
	@@ i++
end

# Get name of first and last scan files and check DICOM format
# -----------------------------------------------------
if ($first < 10) then
	set name = "0000$first.dcm"
else if ($first < 100) then
	set name = "000$first.dcm"
else if ($first < 1000) then
	set name = "00$first.dcm"
else if ($first < 10000) then
	set name = "0$first.dcm"
else
	set name = $first.dcm
endif

if ($last < 10) then
	set name2 = "0000$last.dcm"
else if ($last < 100) then
	set name2 = "000$last.dcm"
else if ($last < 1000) then
	set name2 = "00$last.dcm"
else if ($last < 10000) then
	set name2 = "0$last.dcm"
else
	set name2 = $last.dcm
endif

${NPG}/bin/dcm_dump_element -t 0008 0033 $name $tmp >& /dev/null
if ($status == 0) then
	set type = "-t"
else
	${NPG}/bin/dcm_dump_element 0008 0033 $name $tmp >& /dev/null
	if ($status == 0) then
		set type = ""
	else
		echo "$name is not DICOM format"
		exit 1
	endif
endif
unalias rm
rm $tmp

# Sort the files by slice position
# -----------------------------------------------------
if ($skip == 0) ${NPG}/bin/dcm_slice_reorder $first $last

# Get slice location of first and last files.
# Get the header of the first file, and convert
# -----------------------------------------------------
${NPG}/bin/dcm_dump_element $type 0020 1041 $name $tmp
set s1 = `cat $tmp`
rm $tmp
${NPG}/bin/dcm_dump_element $type 0020 1041 $name2 $tmp
set s2 = `cat $tmp`
rm $tmp
${NPG}/bin/dcm_dump_file $type $name >! $hdr
${NPG}/bin/dcm2analyze.bin $first $last $hdr $out $flag $s1 $s2
rm $hdr

# Subtract 1020 to convert to HU for CT
# -----------------------------------------------------
${NPG}/bin/dcm_dump_element $type 0008 0060 $name $tmp >& /dev/null
set modality = `cat $tmp`
rm $tmp
if ($modality == 'CT') anasub $out 1020

@


1.32
log
@add orientation
@
text
@@


1.31
log
@get slice separation from locations of first and last slices
@
text
@@


1.30
log
@omit use of originator key as SPM5 uses it for the origin
@
text
@d3 1
a3 1
#	Date:	May 2006
d67 1
a67 1
# Get name of first scan file and check DICOM format
d81 12
d112 1
d115 6
d122 1
a122 1
${NPG}/bin/dcm2analyze.bin $first $last $hdr $out $flag
@


1.29
log
@update to use dbh.h
@
text
@@


1.27
log
@added 't' flag and yzm orientation to deal with a Trio scan on Al
@
text
@@


1.26
log
@flip left/right in monkey coronal
@
text
@d8 1
a8 1
	echo "Usage:  dcm2analyze first last output_root [flag]"
d14 1
d27 2
d32 1
a32 1
		echo "ERROR [dcm2analyze]: flag must be 'm' or 's'"
@


1.25
log
@reorient monkey transverse to coronal reversed
@
text
@@


1.24
log
@add 's' flag
@
text
@@


1.23
log
@add flags to use first instance of some header fields
@
text
@d3 1
a3 1
#	Date:	May 2005
d11 1
d13 1
d22 1
d26 2
d29 1
a29 1
		echo "ERROR [dcm2analyze]: flag must be 'm' to reorient a monkey scan"
d78 1
a78 1
${NPG}/bin/dcm_dump_element -t 0008 0032 $name $tmp >& /dev/null
d82 1
a82 1
	${NPG}/bin/dcm_dump_element 0008 0032 $name $tmp >& /dev/null
d95 1
a95 1
${NPG}/bin/dcm_slice_reorder $first $last
@


1.22
log
@correct Sagittal [yz] (0,1,0/0,0,-1)
for monkey
@
text
@@


1.21
log
@put back kludge for CT orientation
@
text
@@


1.20
log
@since dcm_slice_reorder is now run routinely,
fix transverse orientation for MR
@
text
@@


1.19
log
@fix order for transverse CT images
@
text
@@


1.18
log
@reverse coronal orientation
@
text
@d3 1
a3 1
#	Date:	Apr 2005
d85 2
a86 1
/usr/bin/rm $tmp
a88 1
# CT slice order is opposite of MR
d90 1
a90 8
${NPG}/bin/dcm_dump_element $type 0008 0060 $name $tmp >& /dev/null
set modality = `cat $tmp`
if ($modality == 'CT') then
	${NPG}/bin/dcm_reverse_reorder $first $last
else
	${NPG}/bin/dcm_slice_reorder $first $last
endif
/usr/bin/rm $tmp
d96 7
a102 1
/usr/bin/rm $hdr
@


1.17
log
@yet another fix for the xy/xyr orientations
@
text
@@


1.16
log
@revised CT keys
@
text
@@


1.15
log
@add CT keys to ifh file
@
text
@@


1.14
log
@subtract 1020 for CT images
@
text
@@


1.13
log
@sort slices before conversion
@
text
@d104 2
@


1.12
log
@read coronal images
@
text
@d3 1
a3 1
#	Date:	Jan 2002
d5 1
a5 1
#	Use:	Convert multiple DICOM MRI images to a 3D ANALYZE image
d94 2
a95 2
#else
#	${NPG}/bin/dcm_slice_reorder $first $last
@


1.11
log
@Feb 2004
@
text
@@


1.10
log
@NPG
@
text
@@


1.9
log
@*** empty log message ***
@
text
@a6 2
set BINPATH = /usr/local/npg/bin

d15 1
d73 1
a73 1
${BINPATH}/dcm_dump_element -t 0008 0032 $name $tmp >& /dev/null
d77 1
a77 1
	${BINPATH}/dcm_dump_element 0008 0032 $name $tmp >& /dev/null
d90 1
a90 1
${BINPATH}/dcm_dump_element $type 0008 0060 $name $tmp >& /dev/null
d93 1
a93 1
	${BINPATH}/dcm_reverse_reorder $first $last
d95 1
a95 1
#	${BINPATH}/dcm_slice_reorder $first $last
d101 2
a102 2
${BINPATH}/dcm_dump_file $type $name >! $hdr
${BINPATH}/dcm2analyze.bin $first $last $hdr $out $flag
@


1.8
log
@run dcm_slice_reorder before converting
@
text
@d49 1
a49 1
		set n = "000$i"
d69 1
a69 1
	set name = "000$first.dcm"
d86 1
d88 12
a99 1
# Sort the files by slice position,
a101 1
${BINPATH}/dcm_slice_reorder $first $last
a103 1

a104 1
/usr/bin/rm $tmp
@


1.7
log
@*** empty log message ***
@
text
@d39 1
d60 2
a61 1
# Get name of first scan file
a73 1
# Check DICOM format
d87 4
a90 1

@


1.6
log
@read 00001.dcm filenames
@
text
@d13 1
a13 1
	echo "       (use the 'm' flag to indicate monkey scans)"
d31 1
d38 1
d59 1
d72 16
a87 1
${BINPATH}/dcm_dump_file -t $name >! $hdr
d91 1
@


1.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
#	Date:	Sept 2001
d9 6
a14 5
if ($#argv < 2 || $#argv > 3) then
	echo "Usage:  dcm2analyze input_root output_root [flag]"
	echo " e.g.,  dcm2analyze .MR..3. p5000_mprage"
	echo "   or,  dcm2analyze .MR..3. stretch_mprage m"
	exit
d17 3
a19 2
set in = $1
set out = $2
d21 2
a22 2
if ($#argv == 3) then
	if ($3 == 'm') then
d26 1
a26 1
		exit
a29 1
set lst = dcm2analyze$$.lst
d32 33
a64 3
set prefix = `echo $in | cut -c1`
if ($prefix == '.') then
	ls -1 $in* | sort -n -k 5 -t. >! $lst
d66 1
a66 1
	ls -1 $in* | sort -n -k 4 -t. >! $lst
a67 6
set num = `cat $lst | wc -l`
if ($num == 0) then
	echo "No files match input_root: $in"
	exit
endif
set first = `head -1 $lst`
d69 2
a70 1
${BINPATH}/dcm_dump_file -t $first >! $hdr
a71 3
${BINPATH}/dcm2analyze.bin $lst $hdr $num $out $flag

/usr/bin/rm $lst
@


1.4
log
@*** empty log message ***
@
text
@d12 1
a12 1
	echo "   or,  dcm2analyze .MR..3. stretch_mprage monkey"
d18 1
a18 2
set lst = dcm2analyze$$.lst
set hdr = dcm2analyze$$.hdr
d20 6
a25 3
	set flag = 1
else
	set flag = 0
d28 3
@


1.3
log
@*** empty log message ***
@
text
@d5 1
a5 1
#	Use:	Convert multiple DICOM MRI images to a single ANALYZE image
d9 4
a12 3
if ($#argv != 2) then
	echo "Usage:  dcm2analyze <input_root> <output_root>"
	echo " e.g.,  dcm2analyze .MR..3. stretch_mprage"
d20 5
d41 1
a41 1
${BINPATH}/dcm2analyze.bin $lst $hdr $num $out
@


1.2
log
@*** empty log message ***
@
text
@d37 2
a38 2
#/usr/bin/rm $lst
#/usr/bin/rm $hdr
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
	echo " e.g.,  dcm2analyze .MR..3. stretch_mpr"
d20 6
a25 1
ls -1 $in* | sort -n -k 5 -t. >! $lst
d37 2
a38 2
/usr/bin/rm $lst
/usr/bin/rm $hdr
@
