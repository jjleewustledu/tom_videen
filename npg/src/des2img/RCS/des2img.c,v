head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.13.22.14.08;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.14.54.20;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.07.22.20.03;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.22.01.11;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/*	$Log: des2img.c,v $
 * Revision 1.3  2002/11/27  14:54:20  tom
 * *** empty log message ***
 *
 * Revision 1.2  2000/12/07  22:20:03  tom
 * correct pixel size
 *
 * Revision 1.1  2000/12/07  22:01:11  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			des2img.c
 *	Date:			Dec 2000
 *	Author:			Tom Videen
 *	Description:	Convert images in Descriptor format (RIC UT, San Antonio) into ECAT 7 format
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/des2img/RCS/des2img.c,v 1.3 2002/11/27 14:54:20 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{

	FILE           *f_des;			 /* file for Descriptor header */
	FILE           *f_ima;			 /* file for Descriptor image */
	ImageFile      *file;
	Index           indx;
	char           *nam_des;		 /* input Descriptor header filename  */
	char           *nam_ima;		 /* input Descriptor image filename */
	char           *outname;		 /* output PET image filename */
	char           *prefix;
	char           *suffix;
	char           *ptr;
	char           *ch;
	char            frame[5];
	char            version[5];
	char            runstamp[40];		 /* version, date and userid info */
	char            program_date[12];
	char            orient[10];
	char            str[256];
	char           *imgname;

	float        ***image;			 /* output image */
	short          *srow;			 /* single row of input image */

	float           tmp1, tmp2;
	float           scale = 1;
	float           size[3];
	long            dim[4];
	int             f, ff, lf;
	int             i, j, k, n;
	int             nbits = 0;
	int             nvol = 0;
	int             offset = 0;
	int             ndim = 0;

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 6) {
		(void) printf ("Usage: des2img prefix suffix outname ff lf\n");
		return (ERROR);
	}
	prefix = argv[1];
	suffix = argv[2];
	outname = argv[3];
	ff = atoi (argv[4]);
	lf = atoi (argv[5]);
	dim[3] = lf - ff + 1;
	if (dim[3] > 1)
		ndim = 4;
	nam_ima = (char *) calloc (256, sizeof (char));
	nam_des = (char *) calloc (256, sizeof (char));
	imgname = (char *) calloc (256, sizeof (char));
	if (nam_ima == NULL) return (ERROR);
	if (nam_des == NULL) return (ERROR);
	if (imgname == NULL) return (ERROR);

	ptr = strstr (rcsid, "v ");
	ptr += 2;
	(void) strcpy (version, "    ");
	if (ptr != NULL)
		(void) strncpy (version, ptr, 4);
	if (ptr != NULL)
		ptr = strstr (ptr, " ");
	ptr++;
	(void) strcpy (program_date, "           ");
	if (ptr != NULL)
		(void) strncpy (program_date, ptr, 10);
	ptr = strchr (program_date, '/');
	*ptr = ':';
	ptr = strchr (program_date, '/');
	*ptr = ':';

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	for (f = ff; f <= lf; f++) {
		(void) sprintf (frame, "%04d", f);
		(void) strcpy (nam_des, prefix);
		(void) strcat (nam_des, frame);
		(void) strcat (nam_des, suffix);
		(void) strcpy (nam_ima, nam_des);
		(void) strcat (nam_des, ".des");
		(void) strcat (nam_ima, ".ima");

/*
 * Read Descriptor file
 */

		if ((f_des = fopen (nam_des, "r")) == 0) {
			(void) printf ("Unable to open Descriptor header %s\n", nam_des);
			return (ERROR);
		}
		if (fgets (str, sizeof (str), f_des) == NULL) {
			(void) printf ("ERROR [des2img]: reading %s\n", nam_des);
			return (ERROR);
		}
		if (strstr (str, "NEMA01") == NULL) {
			(void) printf ("ERROR [des2img]: %s is not in Descriptor format\n", nam_des);
			return (ERROR);
		}
		if (strstr (str, "TOTAL_VOLUMES") != NULL) {
			(void) sscanf (ptr, "%d", &nvol);
			if (nvol != 1) {
				(void) printf ("ERROR [des2img]: non-standard total volumes = %d\n", nvol);
				return (ERROR);
			}
		}
		while (fgets (str, sizeof (str), f_des) != NULL) {
			ptr = strstr (str, "=");
			if (ptr != NULL) {
				ptr++;
				if (strstr (str, "PIXEL_REPRESENTATION") != NULL) {
					if (strstr (ptr, "SIGNED") == NULL) {
						(void) printf ("ERROR [des2img]: non-standard number type = %s\n", ptr);
						return (ERROR);
					}
					continue;
				}
				if (strstr (str, "BITS_ALLOCATED") != NULL) {
					(void) sscanf (ptr, "%d", &nbits);
					if (nbits != 16) {
						(void) printf ("ERROR [des2img]: non-standard nbits = %d\n", nbits);
						return (ERROR);
					}
					continue;
				}
				if (strstr (str, "ROWS") != NULL) {
					(void) sscanf (ptr, "%ld", &dim[0]);
					continue;
				}
				if (strstr (str, "COLUMNS") != NULL) {
					(void) sscanf (ptr, "%ld", &dim[1]);
					continue;
				}
				if (strstr (str, "TOTAL_SCANS") != NULL) {
					(void) sscanf (ptr, "%ld", &dim[2]);
					continue;
				}
				if (strstr (str, "ROWVEC") != NULL) {
					(void) sscanf (ptr, "%f,%f,%f", &size[0], &tmp1, &tmp2);
					continue;
				}
				if (strstr (str, "COLVEC") != NULL) {
					(void) sscanf (ptr, "%f,%f,%f", &tmp1, &size[1], &tmp2);
					continue;
				}
				if (strstr (str, "SLICEVEC") != NULL) {
					(void) sscanf (ptr, "%f,%f,%f", &tmp1, &tmp2, &size[2]);
					continue;
				}
				if (strstr (str, "ORIENTATION") != NULL) {
					(void) strcpy (orient, ptr);
					continue;
				}
				if (strstr (str, "DATA_SCALE") != NULL) {
					(void) sscanf (ptr, "%f", &scale);
					continue;
				}
				if (strstr (str, "DATA") != NULL) {
					(void) sscanf (ptr, "%s %d", imgname, &offset);
					ch = strchr (imgname, ',');
					*ch = '\0';
					if (strcmp (imgname, nam_ima) != 0) {
						(void) printf ("ERROR [des2img]: change in filename = %s\n", imgname);
						return (ERROR);
					}
					break;
				}
			}
		}
		if ((f_ima = fopen (nam_ima, "r")) == 0) {
			(void) printf ("ERROR [des2img]: Unable to open Descriptor image %s\n", nam_ima);
			return (ERROR);
		}
/*
 *	Read image data
 */

		if (f == ff) {
			if ((image = f3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
				fprintf (stderr, "ERROR [des2img]: Cannot malloc image\n");
				return (ERROR);
			}
			if (NULL == (srow = (short *) calloc (dim[0], sizeof (short)))) {
				fprintf (stderr, "ERROR [des2img]: Cannot malloc memory for row\n");
				return (ERROR);
			}
			file = make_imgfile (outname);
			if (make_mh (file) == ERROR) {
				fprintf (stderr, "ERROR [des2img]: Cannot make mh for %s\n", outname);
				return (ERROR);
			}
			if (make_sh (file) == ERROR) {
				fprintf (stderr, "ERROR [des2img]: Cannot make sh for %s\n", outname);
				return (ERROR);
			}
			file->mh->file_format = MATRIX_REV7;
			file->mh->filetype = PetVolume;
			file->mh->scanner_type = 0;
			file->mh->start_time = 0;
			for (i = 0; i < 8; i++)
				file->mh->isotope[i] = ' ';
			for (i = 0; i < 32; i++)
				file->mh->radiopharmaceutical[i] = ' ';
			file->mh->bed_elevation = 0;
			file->mh->wobble_speed = 0;
			file->mh->calibration_factor = 1;
			file->mh->sw_revision = (char *) calloc (32, sizeof (char));
			file->mh->filetime = (char *) calloc (32, sizeof (char));
			file->mh->nplane = dim[2];
			file->mh->nframe = dim[3];
			file->mh->ngate = 1;
			file->mh->nbed = 1;
			file->mh->init_bed_pos = 0;
			for (i = 0; i < 16; i++)
				file->mh->bed_off[i] = 0;
			file->mh->slicesep = 0.1 * size[2];
			file->mh->orientation = 0;

			file->sh->number_format = SHORT_DATA;
			file->sh->ndim = ndim;
			file->sh->dim1 = dim[0];
			file->sh->dim2 = dim[1];
			file->sh->dim3 = dim[2];
			file->sh->sample_size_1 = 0.1 * size[0];
			file->sh->sample_size_2 = 0.1 * size[1];
			file->sh->sample_size_3 = 0.1 * size[2];
			file->sh->start_time = 0;
			file->sh->duration = 1;
			file->sh->decay_corr = 1.0;
			file->sh->dim3 = dim[2];

			if (make_mh7 (file) == ERROR) {
				fprintf (stderr, "ERROR [des2img]: Cannot make mh7 for %s\n", outname);
				return (ERROR);
			}
			(void) fill_mh7 (file);

			if (make_sh7 (file) == ERROR) {
				fprintf (stderr, "ERROR [des2img]: Cannot make sh7 for %s\n", outname);
				return (ERROR);
			}
			file->m7->sh->decay_corr_fctr = 1.0;

			(void) save_rcs (file, rcsid, runstamp);
			(void) strcpy (file->mode, "w");
			(void) strcpy (file->name, outname);
			if (open_imgfile (file) == ERROR) {
				fprintf (stderr, "ERROR [des2img]: Cannot open %s\n", outname);
				return (ERROR);
			}
			if (put_mh (file) == ERROR) {
				fprintf (stderr, "ERROR [des2img]: Cannot write %s\n", outname);
				return (ERROR);
			}
		}
		for (i = dim[2]; i > 0; i--) {
			if (fseek (f_ima, offset, SEEK_SET) != 0) {
				(void) printf ("ERROR [des2img]: fseek %d in %s\n", offset, nam_ima);
				return (ERROR);
			}
			for (j = 1; j <= dim[1]; j++) {
				if ((fread (srow, sizeof (short), dim[0], f_ima)) != dim[0]) {
					fprintf (stderr, "ERROR [des2img]: Reading: %s\n", nam_ima);
					return (ERROR);
				}
				for (k = 1; k <= dim[0]; k++) {
					if (srow[k - 1] == -32768)
						image[i][j][dim[0] - (k - 1)] = 0;
					else
						image[i][j][dim[0] - (k - 1)] = scale * (float) srow[k - 1];
				}
			}

			scale = 1;
			while (fgets (str, sizeof (str), f_des) != NULL) {
				ptr = strstr (str, "=");
				if (ptr != NULL) {
					ptr++;
					if (strstr (str, "$SLICE") != NULL) {
						(void) sscanf (ptr, "%d", &n);
						continue;
					}
					if (strstr (str, "DATA_SCALE") != NULL) {
						(void) sscanf (ptr, "%f", &scale);
						continue;
					}
					if (strstr (str, "DATA") != NULL) {
						(void) sscanf (ptr, "%s %d", imgname, &offset);
						break;
					}
				}
			}
		}
		(void) fclose (f_ima);
		(void) fclose (f_des);

		/* Write ECAT image file	 */

		file->sh->start_time = (f - ff) * 2000;
		file->sh->duration = 2000;
		indx.frm = f;
		indx.pln = 1;
		if (writetensor (file, &indx, image) == ERROR) {
			fprintf (stderr, "ERROR [des2img]: Cannot write %s\n", outname);
			return (ERROR);
		}
	}

/*	Free & Exit	*/

	fprintf (stdout, "Converted: %s to %s\n", nam_des, outname);
	free_imgfile (file);
	free (srow);
	free_f3tensor (image, 1, dim[2], 1, dim[1], 1, dim[0]);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/des2img/RCS/des2img.c,v 1.2 2000/12/07 22:20:03 tom Exp tom $";
d51 1
a51 1
	char            imgname[256];
d85 4
d92 5
a96 3
	strcpy (version, "    ");
	strncpy (version, ptr, 4);
	ptr = strstr (ptr, " ");
d98 3
a100 2
	strcpy (program_date, "           ");
	strncpy (program_date, ptr, 10);
d113 7
a119 7
		sprintf (frame, "%04d", f);
		strcpy (nam_des, prefix);
		strcat (nam_des, frame);
		strcat (nam_des, suffix);
		strcpy (nam_ima, nam_des);
		strcat (nam_des, ".des");
		strcat (nam_ima, ".ima");
d196 1
a196 1
					(void) sscanf (ptr, "%s %d", &imgname, &offset);
d273 1
a273 1
			fill_mh7 (file);
d281 3
a283 3
			save_rcs (file, rcsid, runstamp);
			strcpy (file->mode, "w");
			strcpy (file->name, outname);
d325 1
a325 1
						(void) sscanf (ptr, "%s %d", &imgname, &offset);
@


1.2
log
@correct pixel size
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/des2img/RCS/des2img.c,v 1.1 2000/12/07 22:01:11 tom Exp tom $";
d154 1
a154 1
					(void) sscanf (ptr, "%d", &dim[0]);
d158 1
a158 1
					(void) sscanf (ptr, "%d", &dim[1]);
d162 1
a162 1
					(void) sscanf (ptr, "%d", &dim[2]);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/des2img/RCS/des2img.c,v 1.1 2000/12/06 21:09:54 tom Exp tom $";
d240 1
a240 1
			file->mh->slicesep = size[2];
d248 3
a250 3
			file->sh->sample_size_1 = size[0];
			file->sh->sample_size_2 = size[1];
			file->sh->sample_size_3 = size[2];
@
