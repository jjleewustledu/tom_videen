head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.17.37.02;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.14.33.09;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.26.20.13.34;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.12.30.16.15.10;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: analyze2bvox.c,v $
 * Revision 1.3  2002/11/27  14:33:09  tom
 * *** empty log message ***
 *
 * Revision 1.2  2002/11/26  20:13:34  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/12/30  16:15:10  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			analyze2bvox.c
 *	Date:			Jul 1997
 *	Author:			Tom Videen
 *	Description:	Transform Analyze image into BrainVox format.
 *	===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2bvox/RCS/analyze2bvox.c,v 1.3 2002/11/27 14:33:09 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <image.h>
#include <ANALYZE.h>				 /* dsr */

#define MAXSTR 256

/*	----------------------------
 *	Function:			analyze2bvox
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* header for ANALYZE */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	int             fd_img;			 /* file for ANALYZE image */
	int             fd_out;			 /* file for output image */
	char           *outroot;		 /* output image root name */
	char           *outfile;		 /* output image filename */
	char           *ext;			 /* output image filename */
	char           *ANALYZE_hdr;		 /* input Analyze header filename  */
	char           *ANALYZE_img;		 /* input Analyze image filename */
	long            dim1, dim2, dim3;	 /* dimensions of img */
	long            dim;			 /* dimensions of plane */
	int             i, j, k;
	short          *plane;			 /* single plane of input image */
	unsigned char  *bplane;			 /* single plane of output image */

	if (argc != 4) {
		printf ("Usage: analyze2bvox ANALYZE_img ANALYZE_hdr outroot\n");
		return (ERROR);
	}

	ANALYZE_img = argv[1];
	ANALYZE_hdr = argv[2];
	outroot = argv[3];

	outfile = (char *) calloc (MAXSTR, sizeof (char));
	if (outfile == NULL)
		return (ERROR);
	ext = (char *) calloc (10, sizeof (char));
	if (ext == NULL)
		return (ERROR);
	if ((fd_hdr = fopen (ANALYZE_hdr, "r")) == 0) {
		fprintf (stderr, "ERROR [analyze2bvox]: Cannot open: %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analyze2bvox]: Reading: %s\n", ANALYZE_hdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [analyze2bvox]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [analyze2bvox]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [analyze2bvox]: Reading: %s\n", ANALYZE_hdr);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	dim = dim1 * dim2;
	(void) fclose (fd_hdr);

	if ((fd_img = open (ANALYZE_img, O_RDONLY, 0444)) < 0) {
		fprintf (stderr, "ERROR [analyze2bvox]: Cannot open: %s\n", ANALYZE_img);
		return (ERROR);
	}
	if (NULL == (plane = (short *) malloc ((short) (dim * sizeof (short))))) {
		fprintf (stderr, "ERROR [analyze2bvox]: Cannot malloc memory for plane\n");
		return (ERROR);
	}
	if (NULL == (bplane = (unsigned char *) malloc ((unsigned char) (dim * sizeof (unsigned char))))) {
		fprintf (stderr, "ERROR [analyze2bvox]: Cannot malloc memory for bplane\n");
		return (ERROR);
	}
	printf ("Converting %s\n", ANALYZE_img);

	for (i = 0; i < dim3; i++) {
		for (j = 0; j < dim2; j++) {
			(void) read (fd_img, plane, dim * 2);
			for (k = 0; k < dim; k++)
				bplane[k] = (unsigned char) plane[k];
		}
		sprintf (ext, "%03d", i+1);
		strcpy (outfile, outroot);
		strcat (outfile, ext);
		strcat (outfile, ".ima");
		if ((fd_out = open (outfile, O_WRONLY, 0666)) < 0) {
			fprintf (stderr, "ERROR [analyze2bvox]: Cannot open: %s\n", outfile);
			return (ERROR);
		}
		(void) write (fd_out, bplane, dim);
		(void) close (fd_out);
	}
	(void) close (fd_img);

	printf ("Successful conversion of %s\n", ANALYZE_img);
	free (plane);
	free (bplane);
	return (OK);
}
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d13 1
a13 1
 *	Date:			Jul-97
d18 2
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2bvox/RCS/analyze2bvox.c,v 1.2 2002/11/26 20:13:34 tom Exp tom $";
d46 1
a46 1
	char           *ext;		 /* output image filename */
d64 6
a69 2
	outfile = (char *) malloc (MAXSTR * sizeof (char));
	ext = (char *) malloc (10 * sizeof (char));
d97 1
a97 1
	fclose (fd_hdr);
d115 1
a115 1
			read (fd_img, plane, dim * 2);
a118 1
		strcpy (ext, NULL);
d127 2
a128 2
		write (fd_out, bplane, dim);
		close (fd_out);
d130 1
a130 1
	close (fd_img);
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2bvox/RCS/analyze2bvox.c,v 1.1 1999/12/30 16:15:10 tom Exp tom $";
d19 1
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/analyze2bvox/RCS/analyze2img.c,v 2.6 1997/05/20 14:41:49 tom Exp $";
d15 1
a33 1
	FILE           *fopen ();		 /* the fopen stuff  */
d91 1
a91 1
	if (NULL == (plane = (short *) calloc ((short) (dim * sizeof (short))))) {
d95 1
a95 1
	if (NULL == (bplane = (unsigned char *) calloc ((unsigned char) (dim * sizeof (unsigned char))))) {
@
