head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2008.08.07.19.54.36;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.01.17.56.08;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.25.20.58.29;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.16.21.47.12;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.27.16.21.23;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.10.22.18.35.21;	author tom;	state Exp;
branches;
next	;


desc
@@


1.7
log
@correct handling of decay-correction
@
text
@/*  $Log: merge_dynframes.c,v $
 * Revision 1.6  2008/07/01  17:56:08  tom
 * number of frames = lastfrm
 *
 * Revision 1.5  2005/01/25  20:58:29  tom
 * *** empty log message ***
 *
 * Revision 1.4  2004/02/16  21:47:12  tom
 * Feb 2004
 *
 * Revision 1.2  2002/11/27  16:21:23  tom
 * *** empty log message ***
 *
 * Revision 1.1  1998/10/22  18:35:21  tom
 * Initial revision
 * */
/* =============================================================================
 *  Module:         merge_dynframes.c
 *  Date:           Oct 1998
 *  Author:         Tom Videen
 *  Description:    Merge multiple frames into a single image (ECAT, PETT VI, Interfile)
 * =============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/merge_dynframes/RCS/merge_dynframes.c,v 1.6 2008/07/01 17:56:08 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <imgutil.h>
#include <nrutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];

{
	ImageFile      *file1, *file2;
	Index           indx;
	MainHeader     *mh;
	SubHeader      *sh;
	FILE           *recfp;			 /* rec file pointer */
	char           *recfile;		 /* rec filename */
	float        ***img;			 /* input tensor */
	char           *root;			 /* root of file to read */
	char            infile[256];	 /* file to read */
	char            frame[10];		 /* frame to read */
	char           *ext;			 /* extension of file to read */
	char           *outfile;		 /* file to write */
	char            runstamp[40];	 /* version, date and userid info */
	int             firstfrm, lastfrm;
	int             infrm, frm, nframes;
	int             nx, ny, nz;		 /* array dimensions */
	int             fformat;
	int             i;

/*
 * Get command line arguments.
 */
	if (argc < 14) {
		printf ("Usage: merge_dynframes in firstfrm lastfrm ext out rec\n");
		return (1);
	}
	root = argv[1];
	firstfrm = atoi (argv[2]);
	lastfrm = atoi (argv[3]);
	ext = argv[4];
	outfile = argv[5];
	recfile = argv[6];
	if (lastfrm < firstfrm) {
		printf ("Last frame (%d) must be >= first frame (%d)\n", lastfrm, firstfrm);
		return (1);
	}
	nframes = lastfrm;
	i = 6;
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[i + 1], argv[i + 2], argv[i + 3],
		 argv[i + 4], argv[i + 6], argv[i + 7]);

	infrm = 1;
	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*	Open rec file */

	recfp = fopen (recfile, "a");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [merge_dynframes]: Cannot open %s\n", recfile);
		return (ERROR);
	}
/*
 *	Get main header and subheader of first image.
 *	Store RCS version in mh->sw_revision.
 */

	(void) strcpy (infile, root);
	(void) sprintf (frame, "%d", firstfrm);
	(void) strcat (infile, frame);
	(void) strcat (infile, ext);
	file1 = make_imgfile (infile);
	(void) strcpy (file1->mode, "r");
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [merge_dynframes]: Cannot open %s\n", infile);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [merge_dynframes]: Reading mainheader of %s\n", infile);
		return (ERROR);
	}
	if (existimgfrm (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [merge_dynframes]: Cannot find %s frame %d\n", infile, infrm);
		return (ERROR);
	}
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [merge_dynframes]: Reading subheader of %s\n", infile);
		return (ERROR);
	}
	mh = file1->mh;
	sh = file1->sh;
	nx = sh->dim1;
	ny = sh->dim2;
	nz = sh->dim3;
	if ((img = f3tensor (1, nz, 1, ny, 1, nx)) == NULL) {
		fprintf (stderr, "ERROR [merge_dynframes]: Cannot malloc img\n");
		return (ERROR);
	}
	printf ("Reading %s\n", infile);
	if ((img = readtensor (file1, &indx)) == NULL) {
		fprintf (stderr, "ERROR [merge_dynframes]: Reading data from %s\n", infile);
		return (ERROR);
	}
	recout (recfp, infile);
	(void) save_rcs (file1, rcsid, runstamp);
	close_imgfile (file1);

/*
 *	Write image (set frame number)
 */
	file2 = make_imgfile (outfile);
	file2->mh = mh;
	file2->sh = sh;
	file2->mh->nframe = nframes;
	fformat = file1->mh->file_format;
	if (fformat == MATRIX_REV7) {
		(void) make_mh7(file2);
		(void) make_sh7(file2);
		file2->m7->mh = file1->m7->mh;
		file2->m7->sh = file1->m7->sh;
	} else if (fformat == MATRIX_REV6) {
		(void) make_mh6(file2);
		(void) make_sh6(file2);
		file2->m6->mh = file1->m6->mh;
		file2->m6->sh = file1->m6->sh;
	} else if (fformat == PETT6) {
		(void) make_hp6(file2);
		file2->p6 = file1->p6;
	} else {
		fprintf (stderr, "ERROR [merge_dynframes]: file format %d from %s\n", fformat, infile);
		return (ERROR);
	}
		
	(void) strcpy (file2->mode, "w");
	indx.frm = firstfrm;
	indx.pln = 1;
	printf ("Writing %s, frame %d\n", outfile, firstfrm);
	if (open_imgfile (file2) == ERROR) {
		fprintf (stderr, "ERROR [merge_dynframes]: Cannot open %s\n", outfile);
		return (ERROR);
	}
	if (put_mh (file2) == ERROR) {
		fprintf (stderr, "ERROR [merge_dynframes]: Writing mainheader of %s\n", outfile);
		return (ERROR);
	}
	if (writetensor (file2, &indx, img) == ERROR) {
		fprintf (stderr, "ERROR [merge_dynframes]: Writing data to %s\n", outfile);
		return (ERROR);
	}
/*
 *	Loop over all frames
 */
	if (nframes > 1) {
		for (frm = firstfrm + 1; frm <= lastfrm; frm++) {
			(void) strcpy (infile, root);
			(void) sprintf (frame, "%d", frm);
			(void) strcat (infile, frame);
			(void) strcat (infile, ext);
			printf ("Reading %s\n", infile);
			indx.frm = infrm;
			indx.pln = 1;
			file1->name = infile;
			if (open_imgfile (file1) == ERROR) {
				fprintf (stderr, "ERROR [merge_dynframes]: Cannot open %s\n", infile);
				return (ERROR);
			}
			if (get_mh (file1) == ERROR) {
				fprintf (stderr, "ERROR [merge_dynframes]: Reading mainheader of %s\n", infile);
				return (ERROR);
			}
			if (get_sh (file1, &indx) == ERROR) {
				fprintf (stderr, "ERROR [merge_dynframes]: Reading subheader of %s\n", infile);
				return (ERROR);
			}
			if ((img = readtensor (file1, &indx)) == NULL) {
				fprintf (stderr, "ERROR [merge_dynframes]: Reading data from %s\n", infile);
				return (ERROR);
			}
			recout (recfp, infile);
			(void) save_rcs (file1, rcsid, runstamp);
			close_imgfile (file1);
			printf ("Writing %s, frame %d\n", outfile, frm);
			indx.frm = frm;
			indx.pln = 1;
			if (writetensor (file2, &indx, img) == ERROR) {
				fprintf (stderr, "ERROR [merge_dynframes]: Writing data to %s\n", outfile);
				return (ERROR);
			}
		}
	}
	close_imgfile (file2);
	free_f3tensor (img, 1, nz, 1, ny, 1, nx);
	free_imgfile (file1);
	free_imgfile (file2);
	(void) fclose (recfp);
	return (OK);
}
@


1.6
log
@number of frames = lastfrm
@
text
@d2 3
d24 1
a24 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/merge_dynframes/RCS/merge_dynframes.c,v 1.5 2005/01/25 20:58:29 tom Exp tom $";
@


1.5
log
@*** empty log message ***
@
text
@d2 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/merge_dynframes/RCS/merge_dynframes.c,v 1.4 2004/02/16 21:47:12 tom Exp tom $";
d73 1
a73 1
	nframes = lastfrm - firstfrm + 1;
@


1.4
log
@Feb 2004
@
text
@d2 3
d12 1
a12 1
 *  Module:         merge_frames.c
d18 1
a18 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/merge_dynframes/RCS/merge_dynframes.c,v 1.2 2002/11/27 16:21:23 tom Exp tom $";
d57 1
a57 1
		printf ("Usage: merge_frames in firstfrm lastfrm ext out rec\n");
d86 1
a86 1
		fprintf (stderr, "ERROR [merge_frames]: Cannot open %s\n", recfile);
d101 1
a101 1
		fprintf (stderr, "ERROR [merge_frames]: Cannot open %s\n", infile);
d105 1
a105 1
		fprintf (stderr, "ERROR [merge_frames]: Reading mainheader of %s\n", infile);
d109 1
a109 1
		fprintf (stderr, "ERROR [merge_frames]: Cannot find %s frame %d\n", infile, infrm);
d113 1
a113 1
		fprintf (stderr, "ERROR [merge_frames]: Reading subheader of %s\n", infile);
d122 1
a122 1
		fprintf (stderr, "ERROR [merge_frames]: Cannot malloc img\n");
d127 1
a127 1
		fprintf (stderr, "ERROR [merge_frames]: Reading data from %s\n", infile);
d156 1
a156 1
		fprintf (stderr, "ERROR [merge_frames]: file format %d from %s\n", fformat, infile);
d165 1
a165 1
		fprintf (stderr, "ERROR [merge_frames]: Cannot open %s\n", outfile);
d169 1
a169 1
		fprintf (stderr, "ERROR [merge_frames]: Writing mainheader of %s\n", outfile);
d173 1
a173 1
		fprintf (stderr, "ERROR [merge_frames]: Writing data to %s\n", outfile);
d190 1
a190 1
				fprintf (stderr, "ERROR [merge_frames]: Cannot open %s\n", infile);
d194 1
a194 1
				fprintf (stderr, "ERROR [merge_frames]: Reading mainheader of %s\n", infile);
d198 1
a198 1
				fprintf (stderr, "ERROR [merge_frames]: Reading subheader of %s\n", infile);
d202 1
a202 1
				fprintf (stderr, "ERROR [merge_frames]: Reading data from %s\n", infile);
d212 1
a212 1
				fprintf (stderr, "ERROR [merge_frames]: Writing data to %s\n", outfile);
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d10 1
a10 1
 *  Date:           Oct-98
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/merge_dynframes/RCS/merge_dynframes.c,v 1.1 1998/10/22 18:35:21 tom Exp tom $";
d55 1
a55 1
		exit (1);
d65 1
a65 1
		exit (1);
d128 1
a128 1
	save_rcs (file1, rcsid, runstamp);
d140 2
a141 2
		make_mh7(file2);
		make_sh7(file2);
d145 2
a146 2
		make_mh6(file2);
		make_sh6(file2);
d150 1
a150 1
		make_hp6(file2);
d203 1
a203 1
			save_rcs (file1, rcsid, runstamp);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*  $Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/merge_frames/RCS/merge_frames.c,v 1.8 1998/10/14 16:19:30 tom Exp $";
a16 1
#include <math.h>
d20 1
a20 1
#include <nr.h>
d66 1
a66 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[i + 1], argv[i + 2], argv[i + 3],
d88 4
a91 4
	strcpy (infile, root);
	sprintf (frame, "%d", firstfrm);
	strcat (infile, frame);
	strcat (infile, ext);
d93 1
a93 1
	strcpy (file1->mode, "r");
d154 1
a154 1
	strcpy (file2->mode, "w");
d175 4
a178 4
			strcpy (infile, root);
			sprintf (frame, "%d", frm);
			strcat (infile, frame);
			strcat (infile, ext);
d215 1
a215 1
	fclose (recfp);
@
