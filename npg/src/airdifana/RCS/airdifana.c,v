head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.13.15.59.00;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.31.15.34.45;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Feb 2004
@
text
@/*  $Log: airdifana.c,v $
 * Revision 1.1  2000/05/31  15:34:45  tom
 * Initial revision
 * */
/* ===============================================================================
 *  Module:         airdifana.c
 *  Date:           Apr 2000
 *  Author:         Tom Videen
 *	Description:	Write difference between 2 air file matrices.
 * ===============================================================================
 */
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/airdifana/RCS/airdifana.c,v 1.1 2000/05/31 15:34:45 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <image.h>
#include <nrutil.h>
#include <matrixlib.h>
#include <ANALYZE.h>
#include <air.h>				 /* struct air */

#define RADTODEG 180./M_PI

/* Function to update distance and indices to a point */
#define newdist(new,old,indx,i,j,k)	{old=new; indx[1]=k; indx[2]=j; indx[3]=i;}

int             read_air ();
float           ptdist ();
float          *rscale;				 /* reslice (PET) image mm/pixel */

main (argc, argv)
	int             argc;
	char          **argv;
{
	struct dsr      hdr;			 /* header for ANALYZE */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */

	struct air2     air;
	char           *airfile1, *airfile2;
	char           *maskhdr;
	char           *maskimg;
	float         **mat1, **mat2, **dmat;
	int             i, j, k;
	int             bytes;

	float           dist, sumdist;
	float           maxdist, mindist;
	float          *dif;
	float           xsum, ysum, zsum;
	float          *pt0, *pt1, *pt2, *pt3;

	long            nx, ny, nz;		 /* dimensions of img */
	int             sumpts;
	int             sumx, sumy, sumz;
	int            *maxid, *minid;		 /* points in mask with max & min dist */
	float        ***img;
	short          *srow;			 /* single row of input image */
	char           *crow;			 /* single row of input image */
	double          dx, dz;
	double          dxmm, dymm, dzmm;
	float           dxang, dyang, dzang;

/* Initializations */

	if (argc != 5) {
		(void) fprintf (stderr, "Usage: airdifana a.air b.air mask.hdr mask.img\n");
		return (1);
	}
	airfile1 = argv[1];
	airfile2 = argv[2];
	maskhdr = argv[3];
	maskimg = argv[4];

	mat1 = matrix (1, 4, 1, 4);
	mat2 = matrix (1, 4, 1, 4);
	dmat = matrix (1, 4, 1, 4);

/* Read AIR matrices (transform pixels-to-pixels)*/

	if (read_air (airfile1, &air, mat1) != 0) {
		(void) fprintf (stderr, "ERROR [airdifana]: cannot read %s\n", airfile1);
		return (1);
	}
	if (read_air (airfile2, &air, mat2) != 0) {
		(void) fprintf (stderr, "ERROR [airdifana]: cannot read %s\n", airfile2);
		return (1);
	}
	matrix_sub (mat1, mat2, dmat, 4, 4, 4);
	dmat[4][4] = 1;

/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (maskhdr, "r")) == NULL) {
		(void) fprintf (stderr, "ERROR [analyze2img]: Cannot open: %s\n", maskhdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		(void) fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", maskhdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		(void) fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", maskhdr);
		(void) fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.bitpix == 8)
		bytes = 1;
	else if (hdr.dime.bitpix == 16)
		bytes = 2;
	else {
		(void) fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", maskhdr);
		(void) fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	nx = hdr.dime.dim[1];
	ny = hdr.dime.dim[2];
	nz = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

/*
 *  Read the img and flip X, Y & Z from Analyze convention
 */

	if ((fd_img = fopen (maskimg, "r")) == NULL) {
		(void) fprintf (stderr, "ERROR [analyze2img]: Cannot open: %s\n", maskimg);
		return (ERROR);
	}
	if ((img = f3tensor (1, nz, 1, ny, 1, nx)) == NULL) {
		(void) fprintf (stderr, "ERROR [analyze2img]: Cannot malloc img\n");
		return (ERROR);
	}
	if (bytes == 1) {
		if (NULL == (crow = (char *) calloc (nx, sizeof (char)))) {
			(void) fprintf (stderr, "ERROR [analyze2img]: Cannot malloc memory for row\n");
			return (ERROR);
		}
		for (i = nz; i > 0; i--) {
			for (j = ny; j > 0; j--) {
				if ((fread (crow, sizeof (char), nx, fd_img)) != nx) {
					(void) fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", maskimg);
					return (ERROR);
				}
				for (k = 1; k <= nx; k++)
					img[i][j][nx - (k - 1)] = (float) crow[k - 1];
			}
		}

	} else {
		if (NULL == (srow = (short *) calloc (nx, sizeof (short)))) {
			(void) fprintf (stderr, "ERROR [analyze2img]: Cannot malloc memory for row\n");
			return (ERROR);
		}
		for (i = nz; i > 0; i--) {
			for (j = ny; j > 0; j--) {
				if ((fread (srow, sizeof (short), nx, fd_img)) != nx) {
					(void) fprintf (stderr, "ERROR [analyze2img]: Reading: %s\n", maskimg);
					return (ERROR);
				}
				for (k = 1; k <= nx; k++) {
					if (srow[k - 1] == -32768)
						img[i][j][nx - (k - 1)] = 0.;
					else
						img[i][j][nx - (k - 1)] = (float) srow[k - 1];
				}
			}
		}
	}
	(void) fclose (fd_img);

/*
 *	Compute mean distance between points-in-the-mask after
 *	misaligned by transformation with the difference matrix.
 *	Determine points of mininim and maximum distances
 */

	rscale = vector (1, 3);
	rscale[1] = air.res.xsize;
	rscale[2] = air.res.ysize;
	rscale[3] = air.res.zsize;

	maxid = ivector (1, 3);
	minid = ivector (1, 3);
	pt0 = vector (1, 4);
	pt1 = vector (1, 4);
	pt2 = vector (1, 4);
	pt3 = vector (1, 4);
	dif = vector (1, 3);
	for (i = 1; i < 4; i++)
		pt0[i] = 0.0;
	pt0[4] = 1.0;
	pt1[4] = 1.0;

	/* Our standard format has origin at left, anterior, superior */

	sumpts = 0;
	sumx = 0;
	sumy = 0;
	sumz = 0;
	sumdist = 0.0;
	maxdist = 0.0;
	mindist = 1000.0;
	xsum = 0.0;
	ysum = 0.0;
	zsum = 0.0;

	for (i = 1; i <= nz; i++) {
		for (j = 1; j <= ny; j++) {
			for (k = 1; k <= nx; k++) {
				if (img[i][j][k] > 0) {
					sumpts++;
					sumx += k;
					sumy += j;
					sumz += i;
					pt0[1] = (float) k;
					pt0[2] = (float) j;
					pt0[3] = (float) i;
					vector_mult (mat1, pt0, pt1, 4, 4, 1);
					vector_mult (mat2, pt0, pt2, 4, 4, 1);
					dist = ptdist (pt1, pt2, dif);
					sumdist += dist;
					xsum += dif[1];
					ysum += dif[2];
					zsum += dif[3];
					if (dist > maxdist)
						newdist (dist, maxdist, maxid, i, j, k);
					if (dist < mindist)
						newdist (dist, mindist, minid, i, j, k);
				}
			}
		}
	}

/*
 *	Calculate total error in each parameter.
 *		pt1 is center-of-volume of mask
 */

	pt0[1] = (float) sumx / (float) sumpts;
	pt0[2] = (float) sumy / (float) sumpts;
	pt0[3] = (float) sumz / (float) sumpts;
	pt0[4] = 1.0;
	vector_mult (mat1, pt0, pt1, 4, 4, 1);
	vector_mult (mat2, pt0, pt2, 4, 4, 1);
	dist = ptdist (pt1, pt2, dif);
	dxmm = (pt2[1] - pt1[1]) * rscale[1];
	dymm = (pt2[2] - pt1[2]) * rscale[2];
	dzmm = (pt2[3] - pt1[3]) * rscale[3];

/*	Angle estimated by comparing location of a point 20 mm away */

	vector_mult (dmat, pt0, pt1, 4, 4, 1);
	pt2[1] = pt0[1];
	pt2[2] = pt0[2] + 20.;
	pt2[3] = pt0[3];
	pt2[4] = 1.;
	vector_mult (dmat, pt2, pt3, 4, 4, 1);
	dz = (pt3[3] - pt1[3]) * rscale[3];
	if (dz != 0)
		dxang = RADTODEG * atan (dz / 20.);
	else
		dxang = 0.;

	pt2[1] = pt0[1] + 20.;
	pt2[2] = pt0[2];
	pt2[3] = pt0[3];
	vector_mult (dmat, pt2, pt3, 4, 4, 1);
	dz = (pt3[3] - pt1[3]) * rscale[3];
	if (dz != 0.)
		dyang = RADTODEG * atan (dz / 20.);
	else
		dyang = 0.;

	pt2[1] = pt0[1] + 20.;
	pt2[2] = pt0[2];
	pt2[3] = pt0[3];
	vector_mult (dmat, pt2, pt3, 4, 4, 1);
	dx = (pt3[1] - pt1[1]) * rscale[3];
	if (dx != 0.)
		dzang = RADTODEG * atan (dx / 20.);
	else
		dzang = 0.;

	(void) fprintf (stdout, "%s %5.1f %5.1f %5.1f %5.1f %5.1f %5.1f %5.1f \n",
			airfile1, dist, dxmm, dymm, dzmm, dxang, dyang, dzang);

	free_vector (pt0, 1, 4);
	free_vector (pt1, 1, 4);
	free_vector (pt2, 1, 4);
	free_vector (pt3, 1, 4);
	free_vector (rscale, 1, 3);
	free_ivector (maxid, 1, 3);
	free_ivector (minid, 1, 3);
	free_f3tensor (img, 1, nz, 1, ny, 1, nx);
	free_matrix (mat1, 1, 4, 1, 4);
	free_matrix (mat2, 1, 4, 1, 4);
	free_matrix (dmat, 1, 4, 1, 4);
	return (0);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*  $Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/airdifana/RCS/airdifana.c,v 1.4 1999/12/16 17:36:01 tom Exp $";
@
