head	3.0;
access;
symbols;
locks; strict;
comment	@ * @;


3.0
date	2004.02.19.22.12.27;	author tom;	state Exp;
branches;
next	2.8;

2.8
date	2004.01.30.22.05.06;	author tom;	state Exp;
branches;
next	2.7;

2.7
date	2002.11.27.17.31.39;	author tom;	state Exp;
branches;
next	2.6;

2.6
date	97.05.19.18.14.32;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	97.05.19.18.08.03;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	96.10.16.16.59.16;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	96.05.08.17.30.08;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	96.04.30.19.50.18;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	96.04.30.18.45.41;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	95.12.18.15.23.19;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	95.12.15.21.43.48;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	95.11.10.17.32.37;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	95.11.03.21.20.21;	author ty7777;	state Exp;
branches;
next	1.11;

1.11
date	95.11.03.21.04.00;	author ty7777;	state Exp;
branches;
next	1.10;

1.10
date	95.09.26.20.43.05;	author ty7777;	state Exp;
branches;
next	1.9;

1.9
date	94.11.04.15.48.55;	author ty7777;	state Exp;
branches;
next	1.8;

1.8
date	93.11.08.21.15.21;	author ty7777;	state Exp;
branches;
next	1.7;

1.7
date	93.11.08.21.01.16;	author ty7777;	state Exp;
branches;
next	1.6;

1.6
date	93.11.08.20.45.01;	author ty7777;	state Exp;
branches;
next	1.5;

1.5
date	93.10.06.19.20.03;	author ty7777;	state Exp;
branches;
next	1.4;

1.4
date	93.09.09.15.15.04;	author ty7777;	state Exp;
branches;
next	1.3;

1.3
date	93.09.09.14.46.53;	author ty7777;	state Exp;
branches;
next	1.2;

1.2
date	93.05.14.15.53.47;	author ty7777;	state Exp;
branches;
next	1.1;

1.1
date	93.05.14.15.50.30;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in.
@


3.0
log
@Feb 2004
@
text
@/*	$Id: scaleimage.c,v 2.8 2004/01/30 22:05:06 tom Exp tom $
	$Log: scaleimage.c,v $
 * Revision 2.8  2004/01/30  22:05:06  tom
 * *** empty log message ***
 *
 * Revision 2.7  2002/11/27  17:31:39  tom
 * *** empty log message ***
 *
 * Revision 2.6  1997/05/19  18:14:32  tom
 * incorporating recfile in csh
 *
 * Revision 2.5  1997/05/19  18:08:03  tom
 * add recfile
 *
 * Revision 2.4  1996/10/16  16:59:16  tom
 * new libimage
 *
 * Revision 2.3  1996/05/08  17:30:08  tom
 * omit rec file
 *
 * Revision 2.2  1996/04/30  19:50:18  tom
 * *** empty log message ***
 *
 * Revision 2.1  1996/04/30  18:45:41  tom
 * *** empty log message ***
 *
 * Revision 2.0  1995/12/18  15:23:19  tom
 * initial TOV version
 *
 * Revision 1.14  1995/12/15  21:43:48  tom
 * TOV working
 * */
/* ===============================================================================
 *	Module:			scaleimage.c
 *	Date:			Dec 1995
 *	Author:			Tom Videen
 *	Description:	Scale an image file by a factor.
 *					Alters the subheader scale_factor and notes the change in the
 *					main header comment field.
 * ===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/scaleimage/RCS/scaleimage.c,v 2.8 2004/01/30 22:05:06 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <libimage.h>

main (argc, argv)
/*@@unused@@*/
	int             argc;
	char           *argv[];
{
	ImageFile      *file;
	Index           indx;
	char           *fname;			 /* file to process */
	float           factor;			 /* scaling factor */
	char            runstamp[40];	 /* version, date and userid info */
	int             i;

/*
 *  Get command line arguments
 */
	fname = argv[1];
	factor = atof (argv[2]);
	i = 3;
	(void) sprintf (runstamp, "%s %s %s %s %s %s", argv[i], argv[i + 1], argv[i + 2],
		 argv[i + 4], argv[i + 5], argv[i + 6]);
	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

/*
 *  Get main header
 *  Store RCS version in mh->sw_revision.
 */
	file = make_imgfile (fname);
	(void) strcpy (file->mode, "r+");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [scaleimage]: Could not open %s\n", fname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [scaleimage]: Could not get MainHeader from %s\n", fname);
		return (ERROR);
	}
	(void) save_rcs (file, rcsid, runstamp);

	if (file->mh->scale_flag == 1)
		file->mh->pr_scaler *= factor;
	else {
		file->mh->scale_flag = 1;
		file->mh->pr_scaler = factor;
	}
	if ((put_mh (file)) == ERROR) {
		fprintf (stderr, "ERROR [scaleimage]: Cannot write MainHeader to %s\n", fname);
		return (ERROR);
	}
/*
 *	Get subheaders and change scale factors until no more frames
 *	Always try frame 1
 *	existimgfrm avoids the error messages which getsbhdr generates
 */

	if (existimgfrm (file, &indx) == OK) {
		printf ("Scaling %s, frame %d\n", file->name, indx.frm);
		if (scale_sh (file, &indx, factor) == ERROR) {
			fprintf (stderr, "ERROR [scaleimage]: Scaling frame %d\n", indx.frm);
			return (ERROR);
		}
	}
/*	then frame 2 and additional frames until no more are found */

	++(indx.frm);
	while (existimgfrm (file, &indx) == OK) {
		printf ("Scaling %s, frame %d\n", file->name, indx.frm);
		if (scale_sh (file, &indx, factor) == ERROR) {
			fprintf (stderr, "ERROR [scaleimage]: Scaling frame %d\n", indx.frm);
			return (ERROR);
		}
		++(indx.frm);
	}
	close_imgfile (file);
	free_imgfile (file);
	return (OK);
}
@


2.8
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: scaleimage.c,v 2.7 2002/11/27 17:31:39 tom Exp tom $
d3 3
d42 1
a42 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/scaleimage/RCS/scaleimage.c,v 2.7 2002/11/27 17:31:39 tom Exp tom $";
d68 1
a68 1
	sprintf (runstamp, "%s %s %s %s %s %s", argv[i], argv[i + 1], argv[i + 2],
d81 1
a81 1
	strcpy (file->mode, "r+");
@


2.7
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: scaleimage.c,v 2.6 1997/05/19 18:14:32 tom Exp tom $
d3 3
d32 1
a32 1
 *	Date:			Dec-95
d39 1
a39 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/scaleimage/RCS/scaleimage.c,v 2.6 1997/05/19 18:14:32 tom Exp tom $";
d48 1
a50 1

d87 1
a87 1
	save_rcs (file, rcsid, runstamp);
d89 1
a89 1
	if (file->mh->scale_flag = 1)
@


2.6
log
@incorporating recfile in csh
@
text
@d1 1
a1 1
/*	$Id: scaleimage.c,v 2.5 1997/05/19 18:08:03 tom Exp tom $
d3 3
d36 1
a36 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/scaleimage/RCS/scaleimage.c,v 2.5 1997/05/19 18:08:03 tom Exp tom $";
d40 1
d78 1
a78 1
		exit (ERROR);
d82 1
a82 1
		exit (ERROR);
d94 1
a94 1
		exit (ERROR);
d106 1
a106 1
			exit (ERROR);
d116 1
a116 1
			exit (ERROR);
d122 1
a122 1
	exit (OK);
@


2.5
log
@add recfile
@
text
@d1 1
a1 1
/*	$Id: scaleimage.c,v 2.4 1996/10/16 16:59:16 tom Exp tom $
d3 3
d33 1
a33 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/scaleimage/RCS/scaleimage.c,v 2.4 1996/10/16 16:59:16 tom Exp tom $";
a46 2
	FILE           *recfp;			 /* rec file pointer */
	char           *recfile;		 /* rec filename */
d57 1
a57 2
	recfile = argv[3];
	i = 4;
a65 2
/*  Open rec file */

a66 10
	recfp = fopen (recfile, "a");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [scaleimage]: Cannot open %s\n", recfile);
		exit (ERROR);
	}
	recout (recfp, fname);
	fclose (recfp);
*/

/*
@


2.4
log
@new libimage
@
text
@d1 1
a1 1
/*	$Id: scaleimage.c,v 2.3 1996/05/08 17:30:08 tom Exp tom $
d3 3
d30 1
a30 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/scaleimage/RCS/scaleimage.c,v 2.3 1996/05/08 17:30:08 tom Exp tom $";
d42 8
a49 6
    ImageFile      *file;
    Index           indx;
    char           *fname;         /* file to process */
	float           factor;		   /* scaling factor */
    char            runstamp[40];  /* version, date and userid info */
	int				i;
d54 1
a54 1
    fname = argv[1];
d56 9
a64 8
	i = 3;
    sprintf (runstamp, "%s %s %s %s %s %s", argv[i], argv[i+1], argv[i+2],
         argv[i+4], argv[i+5], argv[i+6]);
    indx.frm = 1;
    indx.pln = 1;
    indx.gate = 1;
    indx.data = 0;
    indx.bed = 0;
d66 2
d69 11
a79 1
 *  Get main header 
d82 1
a82 1
    file = make_imgfile (fname);
d84 3
a86 7
    if (open_imgfile (file) == ERROR) {
        fprintf (stderr, "ERROR [scaleimage]: Could not open %s\n", fname);
        exit (ERROR);
    }
    if (get_mh(file) == ERROR) {
        fprintf (stderr, "ERROR [scaleimage]: Could not get MainHeader from %s\n", fname);
        exit (ERROR);
d88 5
a92 1
    save_rcs (file, rcsid, runstamp);
a103 1

d110 1
a110 1
    if (existimgfrm (file, &indx) == OK) {
a116 1

d128 2
a129 2
    close_imgfile (file);
    free_imgfile (file);
@


2.3
log
@omit rec file
@
text
@d1 1
a1 1
/*	$Id: scaleimage.c,v 2.2 1996/04/30 19:50:18 tom Exp tom $
d3 3
d27 1
a27 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/scaleimage/RCS/scaleimage.c,v 2.2 1996/04/30 19:50:18 tom Exp tom $";
@


2.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: scaleimage.c,v 2.1 1996/04/30 18:45:41 tom Exp tom $
d3 3
d24 1
a24 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/scaleimage/RCS/scaleimage.c,v 2.1 1996/04/30 18:45:41 tom Exp tom $";
a37 2
    FILE           *recfp;         /* rec file pointer */
    char           *recfile;       /* rec filename */
d41 1
d48 3
a50 3
	recfile = argv[3];
    sprintf (runstamp, "%s %s %s %s %s %s", argv[4], argv[5], argv[6],
         argv[8], argv[9], argv[10]);
a56 10
/*	Open rec file */

	recfp = fopen (recfile, "a");
	if (recfp == (FILE *) NULL) {
		fprintf (stderr, "ERROR [scaleimage]: Cannot open %s\n", recfile);
		exit (ERROR);
	}
	recout (recfp, fname);
	fclose (recfp);

a110 1
    fclose (recfp);
@


2.1
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: scaleimage.c,v 2.0 1995/12/18 15:23:19 tom Exp tom $
d3 3
d21 1
a21 1
static char     rcsid[] = "$Header: /home/petsun19/tom/src/scaleimage/RCS/scaleimage.c,v 2.0 1995/12/18 15:23:19 tom Exp tom $";
a117 1
	free (file->name);
@


2.0
log
@initial TOV version
@
text
@d1 1
a1 1
/*	$Id: scaleimage.c,v 1.14 1995/12/15 21:43:48 tom Exp tom $
d3 3
d18 1
a18 3
#ifndef lint
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/scaleimage/RCS/scaleimage.c,v 1.14 1995/12/15 21:43:48 tom Exp tom $";
#endif
d22 2
a23 1
#include <libimg.h>
d30 7
a36 9
	MainHeader     *mh;
	void            recout ();
	FILE           *recfp;			 /* rec file pointer */
	char           *recfile;		 /* rec filename */
	char          **files;			 /* file to process */
	int            *frm;			 /* frame number(s) to process */
	char           *outfile;		 /* output file name */
	float           factor;			 /* scaling factor */
	int             pln1 = 1, gate = 1, data = 0, bed = 0;
d39 1
a39 1
 *	Get list of files and frames to sum from command arguments
d41 1
a41 5

	files = (char **) malloc (argc * sizeof (char *));
	frm = (int *) malloc (argc * sizeof (int));
	frm[0] = 1;
	files[0] = argv[1];
d43 8
a50 2
	outfile = argv[3];
	recfile = argv[4];
d59 1
a59 1
	recout (recfp, files[0]);
d62 15
a76 1
/*	Get main header and flag the scale factor change */
d78 2
a79 6
	if ((mh = getmhdr (files[0])) == NULL) {
		fprintf (stderr, "ERROR [scaleimage]: Cannot read mainheader from %s\n", files[0]);
		exit (ERROR);
	}
	if (mh->scale_flag = 1)
		mh->pr_scaler *= factor;
d81 2
a82 2
		mh->scale_flag = 1;
		mh->pr_scaler = factor;
d84 2
a85 2
	if ((putmhdr (outfile, mh)) == ERROR) {
		fprintf (stderr, "ERROR [scaleimage]: Cannot write mainheader to %s\n", outfile);
d88 1
d95 4
a98 4
	if (existimgfrm (mh, files[0], pln1, frm[0], gate, data, bed) != ERROR) {
		printf ("Scaling %s, frame %d\n", files[0], frm[0]);
		if (scale_ish (mh, outfile, frm[0], gate, data, bed, factor) != OK) {
			fprintf (stderr, "ERROR [scaleimage]: Scaling frame %d\n", frm[0]);
d102 1
d105 5
a109 5
	++frm[0];
	while (existimgfrm (mh, files[0], pln1, frm[0], gate, data, bed) != ERROR) {
		printf ("Scaling %s, frame %d\n", files[0], frm[0]);
		if (scale_ish (mh, outfile, frm[0], gate, data, bed, factor) != OK) {
			fprintf (stderr, "ERROR [scaleimage]: Scaling frame %d\n", frm[0]);
d112 1
a112 1
		++frm[0];
d114 4
a117 3
	free_mh (mh);
	free (files);
	free (frm);
@


1.14
log
@TOV working
@
text
@d1 5
a5 2
/*	$Id$
	$Log$ */
d16 1
a16 1
static char     rcsid[] = "$Header$";
@


1.13
log
@remove petutil parent directory from include statements
@
text
@d1 14
a14 38
/*$Id: scaleimage.c,v 1.12 1995/11/03 21:20:21 ty7777 Exp tom $*/
/*$Log: scaleimage.c,v $
 * Revision 1.12  1995/11/03  21:20:21  ty7777
 * Same as the last version.
 *
 * Revision 1.11  1995/11/03  21:04:00  ty7777
 * Use matrix7.h
 *
 * Revision 1.10  1995/09/26  20:43:05  ty7777
 * Updated for 961 data.
 *
 * Revision 1.9  1994/11/04  15:48:55  ty7777
 * Make z0 work.
 *
 * Revision 1.8  1993/11/08  21:15:21  ty7777
 * Added scaling factor output.
 *
 * Revision 1.7  1993/11/08  21:01:16  ty7777
 * Added version for header file.
 *
 * Revision 1.6  1993/11/08  20:45:01  ty7777
 * Added recfile.
 *
 * Revision 1.5  1993/10/06  19:20:03  ty7777
 * Use comment_info ().
 *
 * Revision 1.4  1993/09/09  15:15:04  ty7777
 * Use linked list.
 *
 * Revision 1.3  1993/09/09  14:46:53  ty7777
 * Before changing to linked list.
 *
 * Revision 1.2  1993/05/14  15:53:47  ty7777
 * Formal checking in.
 *
 * Revision 1.1  1993/05/14  15:50:30  ty7777
 *
 **/
d16 3
a18 3
/*_________________________________________________________________
  Description:	This program reads an ECAT image and scale all the planes
		by a scaling factor.
d20 3
a22 1
  Author:	Tom Yang, May 11, 1993.
a23 11
  History:	Created by Tom Yang on 05/11/93. 
_________________________________________________________________*/

#include <imglist.h>
#include <matrix7.h>

static char rcsid [] = "$Id: scaleimage.c,v 1.12 1995/11/03 21:20:21 ty7777 Exp tom $";

main (argc, argv)
	int	argc;
	char	**argv;
d25 9
a33 4
	MatrixFile	*matrix_create ();
	MatrixFile	*matrix_open ();
	MatrixData	*matrix_read ();
	int		matrix_write ();
d35 3
a37 21
	COMMENT_INFO	comment_info_data;
	FILE		*recfp;
	Image_subheader	*image_subheader;
	Main_header	*main_header;
	MatDirNode	*node;
	MatrixData	*slice;
	MatrixData	*volume;
	MatrixFile	*mptr;
	MatrixFile	*mptr_out;
	char		*data_ptr;
	char		date [MAXLINE];
	char		*ecat_image_file;
	char		image_recfile [MAXPATH];
	char		*out_ecat_image_file;
	char		recfile [MAXPATH];
	char		*uid;
	float		scaling_factor;
	int		diff;  /* number of differences between spec and actual */
	int		i;
	int		matnum;
	struct Matval	matval;
d39 7
a45 8
	/*______________________________________________________
	 * Get command line arguments.
	 *______________________________________________________*/
	ecat_image_file		= argv [1];
	scaling_factor		= atof (argv [2]);
	out_ecat_image_file	= argv [3];
	sprintf (date, "%s %s %s %s %s %s", argv[4], argv[5], argv[6], argv[7], argv[8], argv[9]);
	uid			= argv [10];
d47 1
a47 11
	mptr		= matrix_open (ecat_image_file, MAT_READ_ONLY, MAT_UNKNOWN_FTYPE);
	main_header	= mptr->mhptr;
	if (mptr == NULL || (main_header->file_type != PetImage 
	&& main_header->file_type != PetVolume && main_header->file_type != ByteImage 
	&& main_header->file_type != ByteVolume && main_header->file_type != InterfileImage))
	{
		if (mptr == NULL)
			printf ("NULL MatrixFile pointer\n");
		else
			printf ("Incompatible file_type: %d.\n", mptr->mhptr->file_type);
		fprintf (stderr, "matrix_open error in %s\n", ecat_image_file);
d49 4
a52 1
		exit (FAIL);
d54 2
d57 1
a57 11
	comment_info (mptr->mhptr->study_description, &comment_info_data);
	if (comment_info_data.scale_flag)
		comment_info_data.scale		*= scaling_factor;
	else
	{
		comment_info_data.scale		= scaling_factor;
		comment_info_data.scale_flag	= TRUE;
	}
	info2comment (comment_info_data, mptr->mhptr->study_description);
	strncpy (mptr->mhptr->physician_name, rcsid + 5, sizeof (mptr->mhptr->physician_name) - 1);
	strncpy (mptr->mhptr->operator_name, date, sizeof (mptr->mhptr->operator_name) - 1);
d59 3
a61 6
	mptr_out	= matrix_create (out_ecat_image_file, MAT_CREATE, mptr->mhptr);
	if (mptr_out == NULL) 
	{
		fprintf (stderr, "Error: matrix_create () in scaleimage\n");
		matrix_close (mptr);
		exit (FAIL);
d63 5
a67 12

	/*
	 * Generate the recfile.
	 */
	strcpy (recfile, out_ecat_image_file);
	strcat (recfile, REC_EXT);

	recfp	= fopen (recfile, "w");
	if (recfp == (FILE *) NULL)
	{
		fprintf (stderr, "Error in opening rec file %s\n", recfile);
		exit (FAIL);
d69 9
a77 4
	fprintf (recfp, "rec %s %s %s\n", ecat_image_file, date, uid);
	fprintf (recfp, "%s %s %f\n", argv [0], ecat_image_file, scaling_factor);
	fprintf (recfp, "   %s\n\n", rcsid);
	fprintf (recfp, "scaling factor = %f\n\n", comment_info_data.scale);
d79 5
a83 35
	/*
 	 * Copy the image rec files if there are any.
 	 */
	strcpy (image_recfile, ecat_image_file);
	strcat (image_recfile, REC_EXT);
	copyrec (recfp, image_recfile);
	fprintf (recfp, "endrec\n");
	fclose (recfp);

	/*
	 * Get the fields filled for the MatrixData structure.
	 */
	node	= mptr->dirlist->first;
	while (node) 
	{
		if (main_header->file_type != PetVolume)
		{
			volume	= matrix_read (mptr, node->matnum, UnknownMatDataType);
			if (volume == NULL)
			{
				fprintf (stderr, "matrix_read error in scaleimage.\n");
				exit (FAIL);
			}

			image_subheader			= (Image_subheader *) volume->shptr;
			image_subheader->scale_factor	*= scaling_factor;

			if (matrix_write (mptr_out, node->matnum, volume) == ERROR)
			{
				fprintf (stderr, "Error: matrix_write () in scaleimage.\n"); 
       				free_matrix_data (volume);
				matrix_close (mptr_out);
				matrix_close (mptr);
				exit (FAIL);
			}
d85 2
a86 6
		else
		{
			volume		= matrix_read (mptr, node->matnum, MAT_SUB_HEADER);
       			image_subheader	= (Image_subheader *) volume->shptr;
			image_subheader->scale_factor	*= scaling_factor;
			mat_numdoc (node->matnum, &matval);
d88 6
a93 23
			for (i = 0; i < volume->zdim; i++) 
			{
				slice	= matrix_read_slice (mptr, volume, i, 0);
				matnum	= mat_numcod (matval.frame, matval.plane + i, matval.gate, 
						matval.data, matval.bed);

       				image_subheader	= (Image_subheader *) slice->shptr;
				image_subheader->num_dimensions	= 2;

				if (matrix_write (mptr_out, matnum, slice) == ERROR)
				{
					fprintf (stderr, "Error: matrix_write () in scaleimage.\n"); 
       					free_matrix_data (slice);
       					free_matrix_data (volume);
					matrix_close (mptr_out);
					matrix_close (mptr);
					exit (FAIL);
				}

				free_matrix_data (slice);
			}

			free_matrix_data (volume);
d95 1
a95 1
		node		= node->next;
d97 4
a100 3

	matrix_close (mptr);
	matrix_close (mptr_out);
@


1.12
log
@Same as the last version.
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.11 1995/11/03 21:04:00 ty7777 Exp ty7777 $*/
d3 3
d49 2
a50 2
#include <petutil/imglist.h>
#include <petutil/matrix7.h>
d52 1
a52 1
static char rcsid [] = "$Id: scaleimage.c,v 1.11 1995/11/03 21:04:00 ty7777 Exp ty7777 $";
@


1.11
log
@Use matrix7.h
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.10 1995/09/26 20:43:05 ty7777 Exp ty7777 $*/
d3 3
d49 1
a49 1
static char rcsid [] = "$Id: scaleimage.c,v 1.10 1995/09/26 20:43:05 ty7777 Exp ty7777 $";
@


1.10
log
@Updated for 961 data.
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.9 1994/11/04 15:48:55 ty7777 Exp ty7777 $*/
d3 3
d44 1
a44 1
#include <petutil/matrix.h>
d46 1
a46 1
static char rcsid [] = "$Id: scaleimage.c,v 1.9 1994/11/04 15:48:55 ty7777 Exp ty7777 $";
@


1.9
log
@Make z0 work.
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.8 1993/11/08 21:15:21 ty7777 Exp ty7777 $*/
d3 3
d43 1
a43 1
static char rcsid [] = "$Id$";
d57 7
a63 4
	MatrixData	*matrixx_data;
	MatrixFile	*fptr;
	MatrixFile	*fptr_out;
	Mlist		*mlist;
d73 2
d85 5
a89 2
	fptr	= matrix_open (ecat_image_file, "r");
	if (fptr == NULL || fptr->mhptr->data_type != IMAGE_DATA)
d91 1
a91 1
		if (fptr == NULL)
d94 2
a95 3
			printf ("Incompatible data_type: %d. Correct data type should be: %d\n", 
				fptr->mhptr->data_type, IMAGE_DATA);
		fprintf (stderr, "matrix_open error in filtercode %s\n", ecat_image_file);
d100 1
a100 13
	/*
 	 * The number of mats in a list always gives the correct number of
 	 * slices.
 	 */
	mlist	= make_list (ecat_image_file, (char *) NULL, "*;*;*;*", &diff);
	if (!mlist) 
	{
		fprintf (stderr, "make_list error in filtercode ().\n");
		matrix_close (fptr);
		exit (FAIL);
	}

	comment_info (fptr->mhptr->study_description, &comment_info_data);
d108 3
a110 3
	info2comment (comment_info_data, fptr->mhptr->study_description);
	strncpy (fptr->mhptr->physician_name, rcsid + 5, sizeof (fptr->mhptr->physician_name) - 1);
	strncpy (fptr->mhptr->operator_name, date, sizeof (fptr->mhptr->operator_name) - 1);
d112 2
a113 2
	fptr_out	= matrix_create (out_ecat_image_file, fptr->mhptr);
	if (fptr_out == NULL) 
d115 2
a116 3
		fprintf (stderr, "Error: matrix_create () in filtercode\n");
		free_Mlist (mlist);
		matrix_close (fptr);
d149 2
a150 1
	for (i = 0; i < mlist->nmats; i++)
d152 1
a152 2
		matrixx_data	= matrix_read (fptr, mlist->list [i]);
		if (matrixx_data == NULL)
d154 18
a171 5
			fprintf (stderr, "matrix_read () error in scaleimage.\n");
			free_Mlist (mlist);
			matrix_close (fptr_out);
			matrix_close (fptr);
			exit (FAIL);
d173 6
a178 2
		image_subheader			= (Image_subheader *) matrixx_data->shptr;
		image_subheader->quant_scale	*= scaling_factor;
d180 23
a202 8
		if (matrix_write (fptr_out, mlist->list [i], matrixx_data) == ERROR)
		{
			fprintf (stderr, "Error: matrix_write () in scaleimage.\n"); 
       			free_matrix_data (matrixx_data);
			free_Mlist (mlist);
			matrix_close (fptr_out);
			matrix_close (fptr);
			exit (FAIL);
d204 1
a204 1
		free_matrix_data (matrixx_data);
d207 2
a208 3
	free_Mlist (mlist);
	matrix_close (fptr);
	matrix_close (fptr_out);
@


1.8
log
@Added scaling factor output.
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.7 1993/11/08 21:01:16 ty7777 Exp ty7777 $*/
d3 3
d32 2
d40 1
a40 1
static char rcsid [] = "$Id: scaleimage.c,v 1.7 1993/11/08 21:01:16 ty7777 Exp ty7777 $";
@


1.7
log
@Added version for header file.
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.6 1993/11/08 20:45:01 ty7777 Exp ty7777 $*/
d3 3
d35 1
a35 1
static char rcsid [] = "$Id: scaleimage.c,v 1.6 1993/11/08 20:45:01 ty7777 Exp ty7777 $";
d133 1
@


1.6
log
@Added recfile.
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.5 1993/10/06 19:20:03 ty7777 Exp ty7777 $*/
d3 3
d32 1
a32 1
static char rcsid [] = "$Id$";
d118 1
a118 1
	strcpy (recfile, ecat_image_file);
d137 1
a137 1
	fprintf (recfp, "endrec");
@


1.5
log
@Use comment_info ().
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.4 1993/09/09 15:15:04 ty7777 Exp ty7777 $*/
d3 3
d26 1
a26 1
#include <petutil/petutil.h>
d29 2
d41 1
d47 1
d49 1
d51 2
d63 2
d100 2
d111 25
@


1.4
log
@Use linked list.
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.3 1993/09/09 14:46:53 ty7777 Exp ty7777 $*/
d3 3
a25 2
#define DEFAULT_SCALE	1.0

d35 1
a35 1
	BOOLEAN		factor_in_comment;
a42 6
	char		label [MAXLINE];
	char		label1 [MAXLINE];
	char		label2 [MAXLINE];
	char		comments [MAXLINE];
	char		old_comments [MAXLINE];
	float		old_scaling_factor;
d79 3
a81 16
	if (fptr->mhptr->study_description != NULL && strlen (fptr->mhptr->study_description) > 0)
	{
		i	= sscanf (fptr->mhptr->study_description, "%s %f %s %s", label, 
				&old_scaling_factor, label1, label2);
		if (i >= 2 && strcmp (label, SCALE_LABEL) == 0)
		{
			factor_in_comment	= TRUE;
			strcpy (old_comments, label1);
			strcat (old_comments, " ");
			strcat (old_comments, label2);
		}
		else
		{
			factor_in_comment	= FALSE;
		}
	}
d84 2
a85 1
		factor_in_comment	= FALSE;
d87 1
a88 10
	if (!factor_in_comment)
	{
		old_scaling_factor	= DEFAULT_SCALE;
		strcpy (old_comments, fptr->mhptr->study_description);
	}

	sprintf (comments, "%s %f ", SCALE_LABEL, scaling_factor * old_scaling_factor);
	strcat (comments, old_comments); 
	strncpy (fptr->mhptr->study_description, comments, sizeof (fptr->mhptr->study_description));

d93 2
d107 3
a113 1
		strcpy (image_subheader->annotation, comments);
d119 1
@


1.3
log
@Before changing to linked list.
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.2 1993/05/14 15:53:47 ty7777 Exp ty7777 $*/
d3 3
a49 1
	int		frames;
a50 4
	int		j;
	int		planes;
	int		matnum;
	struct Matval	matval;
a83 4
	matval.gate	= mlist->gates;
	matval.data	= 0;
	matval.bed	= 0;

d125 1
a125 3
	frames	= fptr->mhptr->num_frames;
	planes	= fptr->mhptr->num_planes;
	for (i = 1; i <= frames; i++)
d127 2
a128 2
		matval.frame	= i;
		for (j = 1; j <= planes; j++)
d130 6
a135 12
			matval.plane	= j;
			matnum	= mat_numcod (matval.frame, matval.plane, matval.gate, 
					matval.data, matval.bed);
			matrixx_data	= matrix_read (fptr, matnum);
			if (matrixx_data == NULL)
			{
				fprintf (stderr, "matrix_read () error in scaleimage.\n");
				exit (FAIL);
			}
			image_subheader			= (Image_subheader *) matrixx_data->shptr;
			image_subheader->quant_scale	*= scaling_factor;
			strcpy (image_subheader->annotation, comments);
d137 7
a143 9
			if (matrix_write (fptr_out, matnum, matrixx_data) == ERROR)
			{
				fprintf (stderr, "Error: matrix_write () in filtercode.\n"); 
        			free_matrix_data (matrixx_data);
				matrix_close (fptr_out);
				matrix_close (fptr);
				exit (FAIL);
			}
			free_matrix_data (matrixx_data);
d145 1
@


1.2
log
@Formal checking in.
@
text
@d1 1
a1 1
/*$Id: scaleimage.c,v 1.1 1993/05/14 15:50:30 ty7777 Exp ty7777 $*/
d3 3
d47 1
d50 1
d131 3
a133 1
	for (i = 1; i <= mlist->frames; i++)
d136 1
a136 1
		for (j = 1; j <= mlist->planes; j++)
d144 2
a145 2
				fprintf (stderr, "matrix_read error in filtercode.\n");
				return FAIL;
@


1.1
log
@Initial revision
@
text
@d1 3
a3 4
/*$Id: filtercode.c,v 1.2 1993/05/03 21:29:24 ty7777 Exp ty7777 $*/
/*$Log: filtercode.c,v $
 * Revision 1.2  1993/05/03  21:29:24  ty7777
 * filtercode.c initial checking in.
a4 2
 * Revision 1.1  1993/05/03  20:37:07  ty7777
 * Initial revision
d8 2
a9 2
  Description:	This program reads an ECAT image and change the filter code
		to the correct one.
d11 1
a11 1
  History:	Created by Tom Yang on 05/03/93. 
@
