head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.02.19.22.24.38;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.27.17.37.21;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.08.11.17.38.30;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Feb 2004
@
text
@/*	$Log: separate_slices.c,v $
 * Revision 1.2  2002/11/27  17:37:21  tom
 * *** empty log message ***
 *
 * Revision 1.1  1999/08/11  17:38:30  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			separate_slices.c
 *	Date:			Aug 1999
 *	Author:			Tom Videen
 *	Description:	Separate slices of an Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/separate_slices/RCS/separate_slices.c,v 1.2 2002/11/27 17:37:21 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <myvalues.h>
#include <ANALYZE.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *out;			 /* output root */
	char            img2[256], hdr2[256];	 /* output file */
	char            str[5];
	long            dim1, dim2, dim3; /* dimensions of image */
	long            num, pln;
	long            z, z0;
	short          *img;

	if (argc != 4) {
		printf ("Usage: separate_slices img1 hdr1 out\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	out  = argv[3];

/*	Read image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [separate_slices]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [separate_slices]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [separate_slices]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [separate_slices]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [separate_slices]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	pln = dim1 * dim2;
	num = pln * dim3;

	img = (short *) calloc (num, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [separate_slices]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [separate_slices]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [separate_slices]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img1);

/*	Write single-slice images */

	hdr.dime.dim[3] = 1;
	for (z = 1; z <= dim3; z++) {
		(void) strcpy (str, "");
		(void) sprintf(str,"%ld",z);
		(void) strcpy (img2, out);
		(void) strcat (img2, str);
		(void) strcpy (hdr2, img2);
		(void) strcat (img2, ".img");
		(void) strcat (hdr2, ".hdr");
		z0 = (dim3 - z) * pln;
		if ((fd_img = fopen (img2, "w")) == 0) {
			fprintf (stderr, "ERROR [separate_slices]: Unable to open %s\n", img2);
			return (ERROR);
		}
		if ((fwrite (img+z0, sizeof (short), pln, fd_img)) != pln) {
			fprintf (stderr, "ERROR [separate_slices]: Error writing to: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		if ((fd_hdr = fopen (hdr2, "w")) == 0) {
			fprintf (stderr, "ERROR [separate_slices]: Unable to open %s\n", hdr2);
			return (ERROR);
		}
		if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
			fprintf (stderr, "ERROR [separate_slices]: Error writing to: %s\n", hdr2);
			return (ERROR);
		}
		(void) fclose (fd_hdr);
	}
	free (img);
	return (OK);
}
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d10 1
a10 1
 *	Date:			Aug-99
d15 1
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/separate_slices/RCS/separate_slices.c,v 1.1 1999/08/11 17:38:30 tom Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/separate_slices/RCS/separate_slices.c,v 1.1 1999/08/10 17:35:40 tom Exp $";
d74 1
a74 1
	fclose (fd_hdr);
d91 1
a91 1
	fclose (fd_img);
d98 7
a104 7
		strcpy (str, "");
		sprintf(str,"%d",z);
		strcpy (img2, out);
		strcat (img2, str);
		strcpy (hdr2, img2);
		strcat (img2, ".img");
		strcat (hdr2, ".hdr");
d114 1
a114 1
		fclose (fd_img);
d123 1
a123 1
		fclose (fd_hdr);
@
