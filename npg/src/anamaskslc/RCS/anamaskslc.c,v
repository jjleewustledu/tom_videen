head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	2008.12.26.22.11.36;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2008.12.26.21.31.57;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.18.01.42;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.12.16.17.57.52;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.08.10.17.35.40;	author tom;	state Exp;
branches;
next	;


desc
@@


2.2
log
@mask 8-bit images
@
text
@/*	$Log: anamaskslc.c,v $
 * Revision 2.1  2008/12/26  21:31:57  tom
 * permit dimensions=3
 *
 * Revision 2.0  2004/02/13  18:01:42  tom
 * Feb 2004
 *
 * Revision 1.3  1999/12/16  17:57:52  tom
 * new libs, sync version
 *
 * Revision 1.1  1999/08/10  17:35:40  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anamaskslc.c
 *	Date:			Aug 1999
 *	Author:			Tom Videen
 *	Description:	Mask slices of an Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamaskslc/RCS/anamaskslc.c,v 2.1 2008/12/26 21:31:57 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

int main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	char           *range;			 /* slice range to zero */
	int             firstpln, lastpln;	 /* first and last planes to zero */
	long            first, last;	 /* planes converted to indices */
	long            dim1, dim2, dim3; /* dimensions of image */
	long            num, pln;
	long            z, z0, i;
	short          *img;
	char           *cimg;

	if (argc != 6) {
		printf ("Usage: anamaskslc img1 hdr1 img2 hdr2 planes\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	range = argv[5];
	if (sscanf (range, "%dto%d", &firstpln, &lastpln) != 2) {
		fprintf (stderr, "ERROR [anamaskslc]: Format error in %s\n", range);
		return (ERROR);
	}

/*	Read image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anamaskslc]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamaskslc]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anamaskslc]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 2 && hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anamaskslc]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 8 && hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anamaskslc]: Reading: %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	pln = dim1 * dim2;
	num = pln * dim3;
	first = dim3 - lastpln;
	last = dim3 - firstpln + 1;

	if (hdr.dime.bitpix == 8) {
		cimg = (char *) calloc (num, sizeof (char));
		if (cimg == NULL) {
			fprintf (stderr, "ERROR [anamaskslc]: Cannot calloc cimg\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anamaskslc]: Cannot open: %s\n", img1);
			return (ERROR);
		}
		if ((fread (cimg, sizeof (char), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamaskslc]: Reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);

		/*	Zero Slices (All pixel ordering is reversed) */

		for (z = first; z < last; z++) {
			z0 = z * pln;
			for (i = 0; i < pln; i++)
				cimg[z0 + i] = 0;
		}

		/*	Write masked image */

		if ((fd_img = fopen (img2, "w")) == 0) {
			fprintf (stderr, "ERROR [anamaskslc]: Unable to open %s\n", img2);
			return (ERROR);
		}
		if ((fwrite (cimg, sizeof (char), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamaskslc]: Error writing to: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		free (cimg);

	} else {
		img = (short *) calloc (num, sizeof (short));
		if (img == NULL) {
			fprintf (stderr, "ERROR [anamaskslc]: Cannot calloc img\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anamaskslc]: Cannot open: %s\n", img1);
			return (ERROR);
		}
		if ((fread (img, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamaskslc]: Reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);

		/*	Zero Slices (All pixel ordering is reversed) */

		for (z = first; z < last; z++) {
			z0 = z * pln;
			for (i = 0; i < pln; i++)
				img[z0 + i] = 0;
		}

		/*	Write masked image */

		if ((fd_img = fopen (img2, "w")) == 0) {
			fprintf (stderr, "ERROR [anamaskslc]: Unable to open %s\n", img2);
			return (ERROR);
		}
		if ((fwrite (img, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamaskslc]: Error writing to: %s\n", img2);
			return (ERROR);
		}
		(void) fclose (fd_img);
		free (img);
	}

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [anamaskslc]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamaskslc]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	return (OK);
}
@


2.1
log
@permit dimensions=3
@
text
@d2 3
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamaskslc/RCS/anamaskslc.c,v 2.0 2004/02/13 18:01:42 tom Exp tom $";
d47 1
d78 1
a78 1
	if (hdr.dime.datatype != 4) {
d83 1
a83 1
	if (hdr.dime.bitpix != 16) {
d97 16
a112 15
	img = (short *) calloc (num, sizeof (short));
	if (img == NULL) {
		fprintf (stderr, "ERROR [anamaskslc]: Cannot calloc img\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anamaskslc]: Cannot open: %s\n", img1);
		return (ERROR);
	}
	if ((fread (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamaskslc]: Reading: %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img1);
d114 1
a114 1
/*	Zero Slices (All pixel ordering is reversed) */
d116 5
a120 5
	for (z = first; z < last; z++) {
		z0 = z * pln;
		for (i = 0; i < pln; i++)
			img[z0 + i] = 0;
	}
d122 1
a122 1
/*	Write masked image */
d124 48
a171 3
	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [anamaskslc]: Unable to open %s\n", img2);
		return (ERROR);
a172 5
	if ((fwrite (img, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamaskslc]: Error writing to: %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
a182 1
	free (img);
@


2.0
log
@Feb 2004
@
text
@d2 3
d20 1
a20 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamaskslc/RCS/anamaskslc.c,v 1.3 1999/12/16 17:57:52 tom Exp tom $";
d28 1
a28 1
main (argc, argv)
d69 1
a69 1
	if (hdr.dime.dim[0] != 4) {
@


1.3
log
@new libs, sync version
@
text
@d2 3
d10 1
a10 1
 *	Date:			Aug-99
d15 1
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamaskslc/RCS/anamaskslc.c,v 1.1 1999/08/10 17:35:40 tom Exp tom $";
d84 1
a84 1
	fclose (fd_hdr);
d103 1
a103 1
	fclose (fd_img);
d124 1
a124 1
	fclose (fd_img);
d134 1
a134 1
	fclose (fd_hdr);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamaskslc/RCS/anamaskslc.c,v 1.4 1999/08/09 20:53:18 tom Exp tom $";
@
