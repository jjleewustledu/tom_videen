head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2008.01.29.16.55.06;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.06.15.40.29;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@similar to imgfill
@
text
@/*	$Log: anafill.c,v $
 * Revision 1.1  2006/04/06  15:40:29  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anafill.c
 *	Date:			Jan 2008
 *	Author:			Tom Videen
 *	Description:	out=img1 if img1>0; else out=img2
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anafill/RCS/anafill.c,v 1.1 2006/04/06 15:40:29 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <myvalues.h>
#include <libnrimg.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anafill
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* file 1 */
	char           *img2, *hdr2;		 /* file 2 */
	char           *out, *hdr3;		 /* output */
	char           *range;
	int             firstpln;
	int             lastpln;
	long            dim1, dim2, dim3;
	long            num, i, j, k;
	short          *row;			 /* single row of input image */
	short        ***imga, ***imgb;

	if (argc != 8) {
		fprintf (stderr, "Usage: anafill hdr1 img1 hdr2 img2 hdr3 out range\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	hdr3 = argv[5];
	out = argv[6];
	range = argv[7];

/*	Get first image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anafill]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anafill]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anafill]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);

	row = (short *) calloc (dim1, sizeof (short));
	if (row == NULL) {
		fprintf (stderr, "ERROR [anafill]: calloc row\n");
		return (ERROR);
	}
	imga = s3tensor (1, dim3, 1, dim2, 1, dim1);
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anafill]: malloc imga\n");
		return (NULL);
	}
	imgb = s3tensor (1, dim3, 1, dim2, 1, dim1);
	if (imgb == NULL) {
		fprintf (stderr, "ERROR [anafill]: malloc imgb\n");
		return (NULL);
	}
	if (hdr.dime.datatype == 4) {
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anafill]: opening %s\n", img1);
			return (ERROR);
		}
		for (i = 1; i <= dim3; i++) {
			for (j = 1; j <= dim2; j++) {
				if ((fread (row, sizeof (short), dim1, fd_img)) != dim1) {
					fprintf (stderr, "ERROR [anafill]: Reading: %s\n", img1);
					return (ERROR);
				}
				for (k = 1; k <= dim1; k++) {
					if (row[k] == -32768)
						imga[i][j][k] = 0;
					else
						imga[i][j][k] = row[k];
				}
			}
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else {
		fprintf (stderr, "ERROR [anafill]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

/*	Get second image */

	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anafill]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anafill]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anafill]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);
	if (num != dim1 * dim2 * dim3) {
		fprintf (stderr, "ERROR [anafill]: images are not same size\n");
		return (ERROR);
	}
	if (hdr.dime.datatype == 4) {
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anafill]: opening %s\n", img2);
			return (ERROR);
		}
		for (i = 1; i <= dim3; i++) {
			for (j = 1; j <= dim2; j++) {
				if ((fread (row, sizeof (short), dim1, fd_img)) != dim1) {
					fprintf (stderr, "ERROR [anafill]: Reading: %s\n", img2);
					return (ERROR);
				}
				for (k = 1; k <= dim1; k++) {
					if (row[k] == -32768)
						imgb[i][j][k] = 0;
					else
						imgb[i][j][k] = row[k];
				}
			}
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img2);
	} else {
		fprintf (stderr, "ERROR [anafill]: Reading: %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

	if (strncmp (range, "all", 3) == 0) {
		firstpln = 1;
		lastpln = dim3;
	} else if (sscanf (range, "%dto%d", &firstpln, &lastpln) != 2) {
		fprintf (stderr, "ERROR [anafill]: Format error in %s\n", range);
		return (ERROR);
	}

/*	Combine images and write */

	for (i = firstpln; i <= lastpln; i++)
		for (j = 1; j <= dim2; j++)
			for (k = 1; k <= dim1; k++)
				if (imga[i][j][k] == 0)
					imga[i][j][k] = imgb[i][j][k];

	if ((fd_img = fopen (out, "w")) == 0) {
		fprintf (stderr, "ERROR [anafill]: opening %s\n", out);
		return (ERROR);
	}
	for (i = 1; i <= dim3; i++) {
		for (j = 1; j <= dim2; j++) {
			for (k = 1; k <= dim1; k++)
				row[k] = imga[i][j][k];
			if (fwrite (row, sizeof (short), dim1, fd_img) != dim1) {
				fprintf (stderr, "ERROR [anafill]: writing to: %s\n", out);
				return (ERROR);
			}
		}
	}

	(void) fclose (fd_img);
	free (imga);
	free (imgb);

	if ((fd_hdr = fopen (hdr3, "w")) == 0) {
		fprintf (stderr, "ERROR [anafill]: opening %s\n", hdr3);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anafill]: writing %s\n", hdr3);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d7 1
a7 1
 *	Date:			Apr 2006
d9 1
a9 1
 *	Description:	Create an image containing maximum value from all input images
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anafill/RCS/anafill.c,v 2.1 2005/04/21 19:28:42 tom Exp $";
d19 1
d21 1
d37 5
a41 1
	char           *img2, *hdr2;		 /* file 2 and output */
d43 3
a45 2
	long            num, sum, i;
	short          *imga, *imgb;
d47 2
a48 2
	if (argc != 5) {
		printf ("Usage: anafill hdr1 img1 hdr2 img2\n");
d55 3
d80 15
a95 5
		imga = (short *) calloc (num, sizeof (short));
		if (imga == NULL) {
			fprintf (stderr, "ERROR [anafill]: calloc imga\n");
			return (ERROR);
		}
d100 13
a112 3
		if ((fread (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anafill]: reading: %s\n", img1);
			return (ERROR);
a147 5
		imgb = (short *) calloc (num, sizeof (short));
		if (imgb == NULL) {
			fprintf (stderr, "ERROR [anafill]: calloc imgb\n");
			return (ERROR);
		}
d152 13
a164 3
		if ((fread (imgb, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anafill]: reading: %s\n", img2);
			return (ERROR);
d175 8
d185 8
a192 8
	sum = 0;
	for (i = 0; i < num; i++)
		if (imga[i] > imgb[i]) {
			imgb[i] = imga[i];
			sum = sum + 1;
		}
	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [anafill]: opening %s\n", img2);
d195 9
a203 3
	if ((fwrite (imgb, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anafill]: writing %s\n", img2);
		return (ERROR);
d205 2
a206 1
	fprintf (stderr, "Wrote %s with %ld filled pixels\n", img2, sum);
a208 1
	(void) fclose (fd_img);
d210 2
a211 2
	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [anafill]: openng %s\n", hdr2);
d215 1
a215 1
		fprintf (stderr, "ERROR [anafill]: writing %s\n", hdr2);
@
