head	2.0;
access;
symbols;
locks; strict;
comment	@ * @;


2.0
date	2004.02.13.18.06.13;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.27.18.15.20;	author tom;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Feb 2004
@
text
@/*	$Log: anapdimg.c,v $
 * Revision 1.1  2000/04/27  18:15:20  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anapdimg.c
 *	Date:			Apr 2000
 *	Author:			Tom Videen
 *	Description:	Compute percent difference image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anapdimg/RCS/anapdimg.c,v 1.1 2000/04/27 18:15:20 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anapdimg
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* mask file */
	char           *img3, *hdr3;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	long            sum, n;
	float           mean;
	int             flag;
	short          *imga, *imgb;		 /* image */

	if (argc != 8) {
		fprintf (stdout, "Usage: anapdimg img1 hdr1 img2 hdr2 img3 hdr3 flag\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	hdr3 = argv[5];
	img3 = argv[6];
	flag = atoi (argv[7]);

/*	Get first image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anapdimg]: Opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anapdimg]: Reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anapdimg]: Reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anapdimg]: Reading %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anapdimg]: Reading %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1 * dim2 * dim3;

	imga = (short *) calloc (num, sizeof (short));
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anapdimg]: Cannot calloc imga\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anapdimg]: Opening %s\n", img1);
		return (ERROR);
	}
	if ((fread (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anapdimg]: Reading %s\n", img1);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img1);

/*	Get second image */

	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anapdimg]: Opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anapdimg]: Reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anapdimg]: Reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4) {
		fprintf (stderr, "ERROR [anapdimg]: Reading %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anapdimg]: Reading %s\n", hdr2);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

	if (num != dim1 * dim2 * dim3) {
		fprintf (stderr, "ERROR [anapdimg]: Images are not same size\n");
		return (ERROR);
	}
	imgb = (short *) calloc (num, sizeof (short));
	if (imgb == NULL) {
		fprintf (stderr, "ERROR [anapdimg]: Cannot calloc imgb\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img2, "r")) == 0) {
		fprintf (stderr, "ERROR [anapdimg]: Opening %s\n", img2);
		return (ERROR);
	}
	if ((fread (imgb, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anapdimg]: Reading %s\n", img2);
		return (ERROR);
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s\n", img2);

/*	Compute percent difference and save */

	if (flag == 0) {
		for (i = 0; i < num; i++)
			if (imgb[i] > 0)
				imga[i] = 100 * (imga[i] - imgb[i]) / imgb[i];
	} else {
		sum = 0;
		n = 0;
		for (i = 0; i < num; i++) {
			if (imgb[i] > 0) {
				sum += imgb[i];
				n++;
			}
		}
		mean = sum / n;
		fprintf (stdout, "Mean %f\n", mean);
		for (i = 0; i < num; i++) {
			if (imgb[i] > 0)
				imga[i] = 100 * ((float) (imga[i] - imgb[i]) / mean);
		}
	}

	free (imgb);

	if ((fd_img = fopen (img3, "w")) == 0) {
		fprintf (stderr, "ERROR [anapdimg]: Opening %s\n", img3);
		return (ERROR);
	}
	if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anapdimg]: Writing %s\n", img3);
		return (ERROR);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr3, "w")) == 0) {
		fprintf (stderr, "ERROR [anapdimg]: Opening %s\n", hdr3);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anapdimg]: Writing %s\n", hdr3);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	free (imga);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d12 1
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anapdimg/RCS/anapdimg.c,v 1.8 1999/12/16 17:55:43 tom Exp $";
d84 1
a84 1
	fclose (fd_hdr);
d100 1
a100 1
	fclose (fd_img);
d131 1
a131 1
	fclose (fd_hdr);
d150 1
a150 1
	fclose (fd_img);
d186 1
a186 1
	fclose (fd_img);
d196 1
a196 1
	fclose (fd_hdr);
@
