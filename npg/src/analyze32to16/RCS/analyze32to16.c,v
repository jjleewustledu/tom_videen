head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2010.12.30.20.56.16;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.03.17.43.31;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/* $Log: analyze32to16.c,v $
 * Revision 1.1  2010/11/03  17:43:31  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			analyze32to16.c
 *	Date:			Nov 2010
 *	Author:			Tom Videen
 *	Description:	Convert 32-bit to 16-bit Analyze image
 *	===============================================================================
 */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <image.h>
#include <nrutil.h>
#include <ANALYZE.h>				 /* dsr */

/*	----------------------------
 *	Function:			analyze32to16
 *	----------------------------
 */
int             main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;
	FILE           *fd_hdr;
	FILE           *fd_in;
	FILE           *fd_out;
	char           *inhdr, *outhdr;
	char           *inimg, *outimg;
	long            dim1, dim2, dim3;
	int             i, j, k;
	short          *srow;
	long 		   *lrow;

/*
 *	Get command line arguments and initialize filenames:
 */

	if (argc != 5) {
		fprintf (stdout, "Usage: analyze32to16 inimg inhdr outimg outhdr\n");
		return (ERROR);
	}
	inimg = argv[1];
	inhdr = argv[2];
	outimg = argv[3];
	outhdr = argv[4];

/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (inhdr, "r")) == NULL) {
		fprintf (stderr, "ERROR [analyze32to16]: opening: %s\n", inhdr);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analyze32to16]: reading: %s\n", inhdr);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [analyze32to16]: reading: %s\n", inhdr);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 32) {
		fprintf (stderr, "ERROR [analyze32to16]: reading: %s\n", inhdr);
		fprintf (stderr, "Bits/pixel = %d differs from 32\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

/*
 *	Read, convert, and write image row by row
 */

	if ((fd_in = fopen (inimg, "r")) == NULL) {
		fprintf (stderr, "ERROR [analyze32to16]: opening: %s\n", inimg);
		return (ERROR);
	}
	if ((fd_out = fopen (outimg, "w")) == NULL) {
		fprintf (stderr, "ERROR [analyze32to16]: opening: %s\n", outimg);
		return (ERROR);
	}
	if (NULL == (lrow = (long *) calloc (dim1, sizeof (long)))) {
		fprintf (stderr, "ERROR [analyze32to16]: malloc lrow\n");
		return (ERROR);
	}
	if (NULL == (srow = (short *) calloc (dim1, sizeof (short)))) {
		fprintf (stderr, "ERROR [analyze32to16]: malloc srow\n");
		return (ERROR);
	}
	for (i = 0; i < dim3; i++) {
		for (j = 0; j < dim2; j++) {
			if ((fread (lrow, sizeof (long), dim1, fd_in)) != dim1) {
				fprintf (stderr, "ERROR [analyze32to16]: reading: %s\n", inimg);
				return (ERROR);
			}
			for (k = 0; k < dim1; k++)
				srow[k] = (short) lrow[k];
			if ((fwrite (srow, sizeof (short), dim1, fd_out)) != dim1) {
				fprintf (stderr, "ERROR [analyze32to16]: writing: %s\n", outimg);
				return (ERROR);
			}
		}
	}

	(void) fclose (fd_in);
	(void) fclose (fd_out);

/*
 *	Write updated header
 */

	if ((fd_hdr = fopen (outhdr, "w")) == NULL) {
		fprintf (stderr, "ERROR [analyze32to16]: opening: %s\n", outhdr);
		return (ERROR);
	}
	hdr.dime.datatype = 4;
	hdr.dime.bitpix = 16;
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [analyze32to16]: writing: %s\n", outhdr);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	free (lrow);
	free (srow);
	fprintf (stdout, "Converted: %s to %s\n", inimg, outimg);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d106 1
a106 1
				srow[k] = lrow[k];
@
