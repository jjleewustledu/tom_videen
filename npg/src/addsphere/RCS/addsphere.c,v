head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2009.02.12.17.33.34;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Log$ */
/*	===============================================================================
 *	Module:			addsphere.c
 *	Date:			Feb 2009
 *	Author:			Tom Videen
 *	Description:	Fill in a spherical regions in Mai Atlas overlay image
 *	===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/addsphere/RCS/addsphere.c,v 1.1 2006/05/22 17:55:24 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <libnrimg.h>
#include <image.h>
#include <imgutil.h>
#include <nrutil.h>
#include <libnrimg.h>
#include <ANALYZE.h>

int             main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;
	FILE           *fd_hdr;
	FILE           *fd_img;
	char           *hdrfile;
	char           *imgfile;
	int             dim[3];
	int             val;					/* color value to set for contact */
	int             xpix, ypix, zpix;		/* pixel dimensions of box containing sphere */
	float           radius;			 		/* radius of sphere for contact (mm) */
	float           radsqr;					/* square of radius */
	float           xsize, ysize, zsize;	/* pixel dimensions (mm) */
	float           xsqr, ysqr, zsqr;		/* square of pixel dimensions (mm) */
	float           xps, yps, zps;			/* square of distance from pixel center to contact (mm) */
	float           sumsqr;					/* sum of squared distance from pixel to contact */
	float           x1, y1, z1;				/* pixel center of contact (real) */
	int             x0, y0, z0;				/* rounded pixel center of contact */
	int             xp, yp, zp;				/* coordinates of pixel under consideration */
	int             i, j, k, m, n;
	short        ***img;
	short          *row;

	if (argc != 8) {
		fprintf (stderr, "Usage:  addsphere hdr image x1 y1 z1 radius value\n");
		return (ERROR);
	}
	hdrfile = argv[1];
	imgfile = argv[2];
	x1 = atof (argv[3]);
	y1 = atof (argv[4]);
	z1 = atof (argv[5]);
	radius = atof (argv[6]);
	val = atoi (argv[7]);

/*
 * Read Analyze hdr file
 */

	if ((fd_hdr = fopen (hdrfile, "r")) == 0) {
		fprintf (stderr, "ERROR [addsphere]: opening %s\n", hdrfile);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [addsphere]: reading: %s\n", hdrfile);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [addsphere]: reading %s\n", hdrfile);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4 && hdr.dime.datatype != 16) {
		fprintf (stderr, "ERROR [addsphere]: reading %s\n", hdrfile);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [addsphere]: reading %s\n", hdrfile);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim[0] = hdr.dime.dim[1];
	dim[1] = hdr.dime.dim[2];
	dim[2] = hdr.dime.dim[3];
	xsize = hdr.dime.pixdim[1];
	ysize = hdr.dime.pixdim[2];
	zsize = hdr.dime.pixdim[3];
	(void) fclose (fd_hdr);

/*
 *	Read the img and flip X, Y & Z from Analyze convention
 */

	if ((fd_img = fopen (imgfile, "r")) == 0) {
		fprintf (stderr, "ERROR [addsphere]: opening %s\n", imgfile);
		return (ERROR);
	}
	if ((img = s3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
		fprintf (stderr, "ERROR [addsphere]: malloc img\n");
		return (ERROR);
	}
	if ((row = (short *) calloc (dim[0], sizeof (short))) == NULL) {
		fprintf (stderr, "ERROR [addsphere]: malloc row\n");
		return (ERROR);
	}
	for (k = dim[2]; k > 0; k--) {
		for (j = dim[1]; j > 0; j--) {
			(void) fread (row, sizeof (short), dim[0], fd_img);
			for (i = 1; i <= dim[0]; i++) {
				n = dim[0] - i;
				img[k][j][i] = row[n];
			}
		}
	}
	(void) fclose (fd_img);

/* Coordinates of center of contact (pixels) */
	x0 = ROUND (x1);
	y0 = ROUND (y1);
	z0 = ROUND (z1);

/* Size of box containing sphere (pixels) */
	xpix = (radius / xsize) + 1;
	ypix = (radius / ysize) + 1;
	zpix = (radius / zsize) + 1;

/* Squared dimensions of a voxel (mm) */
	xsqr = xsize * xsize;
	ysqr = ysize * ysize;
	zsqr = zsize * zsize;

/* Squared radius of sphere (mm) */
	radsqr = radius * radius;

	for (m = -zpix; m <= zpix; m++) {
		zp = z0 + m;
		zps = (zp - z1) * (zp - z1) * zsqr;
		for (k = -ypix; k <= ypix; k++) {
			yp = y0 + k;
			yps = (yp - y1) * (yp - y1) * ysqr;
			for (j = -xpix; j <= xpix; j++) {
				xp = x0 + j;
				xps = (xp - x1) * (xp - x1) * xsqr;
				sumsqr = zps + yps + xps;
				if (radsqr >= sumsqr)
					img[zp][yp][xp] = val;
			}
		}
	}

	if ((fd_img = fopen (imgfile, "w")) == 0) {
		fprintf (stderr, "ERROR [addsphere]: opening %s\n", imgfile);
		return (ERROR);
	}
	for (k = dim[2]; k > 0; k--) {
		for (j = dim[1]; j > 0; j--) {
			for (i = 1; i <= dim[0]; i++) {
				n = dim[0] - i;
				row[n] = img[k][j][i];
			}
			(void) fwrite (row, sizeof (short), dim[0], fd_img);
		}
	}

	(void) fclose (fd_img);
	free (row);
	free_s3tensor (img, 1, dim[2], 1, dim[1], 1, dim[0]);
	return (0);
}
@
