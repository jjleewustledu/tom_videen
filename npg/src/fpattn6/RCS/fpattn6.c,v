head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.02.16.15.20.30;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.01.20.30.37;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.27.20.50.07;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.26.22.15.55;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.26.18.11.26;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Feb 2004
@
text
@/*	$Log: fpattn6.c,v $
 * Revision 1.4  2002/03/01  20:30:37  tom
 * pixscaler passed from shell
 *
 * Revision 1.3  2002/02/27  20:50:07  tom
 * adjust pixel size read from transmission image
 *
 * Revision 1.2  2002/02/26  22:15:55  tom
 * *** empty log message ***
 *
 * Revision 1.1  2002/02/26  18:11:26  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			fpattn6.c
 *	Date:			Feb 2002
 *	Author:			Tom Videen
 *	Description:	Read ECAT6 image and attn hdr and create new attn.
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/fpattn6/RCS/fpattn6.c,v 1.4 2002/03/01 20:30:37 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <math.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{
	int             reprojection ();
	ImageFile      *file;
	Index           indx;
	char           *imgname;		 /* image filename */
	char           *attname;		 /* orig attenuation filename */
	char           *outname;		 /* forward-projected sinogram filename */
	float        ***img;			 /* image */
	float        ***attn;			 /* attenuation */
	float          *fmatrix;		 /* for output */
	DataSetType     dtype;
	int             fformat;
	int             xdim;
	int             numray, numang, numpln;
	float           pixscaler;
	float           pixsize, binsize;
	float           pixsize_image;		  /* pixel size in image */
	double          tmpa;
	int             stat;
	long            i, j, k, p;

	if (argc < 4) {
		fprintf (stderr, "Usage: fpattn6 image attn output\n");
		return (ERROR);
	}
	imgname = argv[1];
	attname = argv[2];
	outname = argv[3];
	pixscaler = atof(argv[4]);

/*	Read Image */

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	file = make_imgfile (imgname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [fpattn6]: Cannot open %s\n", imgname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [fpattn6]: Cannot read MainHeader from %s\n", imgname);
		return (ERROR);
	}
	if (get_sh (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [fpattn6]: Cannot read subheader from %s\n", imgname);
		return (ERROR);
	}
	xdim = file->sh->dim1;
	pixsize_image = file->sh->sample_size_1;
	pixsize = pixscaler * pixsize_image;
	if ((img = readtensor (file, &indx)) == NULL)
		return (ERROR);
	close_imgfile (file);

/*	Read Input Attenuation header */

	(void) strcpy (file->name, attname);
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [fpattn6]: Opening %s\n", attname);
		return (ERROR);
	}
	if (get_mh (file) == ERROR) {
		fprintf (stderr, "ERROR [fpattn6]: Reading MainHeader from %s\n", attname);
		return (ERROR);
	}
	fformat = file->mh->file_format;
	dtype = (DataSetType) file->mh->filetype;
	if (fformat != MATRIX_REV6) {
		fprintf (stderr, "ERROR [fpattn6]: Unsupported file format %d\n", fformat);
		return (ERROR);
	}
	if (dtype != AttenCor) {
		fprintf (stderr, "ERROR [fpattn6]: Not an attenuation file %s\n", attname);
		return (ERROR);
	}
	if (get_sa (file, &indx) == ERROR) {
		fprintf (stderr, "ERROR [fpattn6]: Reading attenuation subheader in %s\n", attname);
		return (ERROR);
	}
	binsize = file->sh->sample_size_1;
	numray = (long) file->sh->dim1;
	numang = (long) file->sh->dim2;
	numpln = (long) file->sh->dim3;
	close_imgfile (file);

/*	Create Output attenuation	*/

	(void) strcpy (file->name, outname);
	(void) strcpy (file->mode, "w");
	if (open_imgfile (file) == ERROR) {
		fprintf (stderr, "ERROR [fpattn6]: Cannot open %s\n", outname);
		return (ERROR);
	}
	if (put_mh6 (file) == ERROR) {
		fprintf (stderr, "ERROR [fpattn6]: Cannot write MainHeader to %s\n", outname);
		return (ERROR);
	}
	if ((attn = f3tensor (0, numpln - 1, 0, numang - 1, 0, numray - 1)) == NULL) {
		fprintf (stderr, "ERROR [fpattn6]: Cannot malloc attn\n");
		return (ERROR);
	}
	if ((fmatrix = (float *) calloc (numang * numray, sizeof (float))) == NULL) {
		fprintf (stderr, "ERROR [fpattn6]: Cannot calloc fmatrix\n");
		return (ERROR);
	}
/*	Forward-projection	*/

	fprintf (stdout, "Converting\n");
	for (p = 1; p <= numpln; p++) {
		for (j = 1; j <= xdim; j++) {
			for (i = 1; i <= xdim; i++)
				img[p][j][i] /= ATNSCALER;
		}
	}
	fprintf (stdout, "Using pixsize %f binsize %f  (pixsize in image %f, scaler = %6.4f)\n",
		pixsize, binsize, pixsize_image, pixscaler);
	if (binsize >= 0.312)
		fprintf (stdout, "Reprojecting %d rays and %d angles __________|\n", numray, numang);
	else {
		fprintf (stdout, "ERROR: Forward-project the stationary attenuation file.\n");
		fprintf (stdout, "       Then run makeWobbleAttn\n");
		return (ERROR);
/*
		fprintf (stdout, "Reprojecting %d rays and %d angles __________", numray, numang);
		fprintf (stdout, "____________________________________________|\n");
*/
	}
	stat = reprojection (img, xdim, pixsize, attn, numang, numray, numpln, binsize);
	if (stat == ERROR) {
		fprintf (stderr, "ERROR [fpattn6]: reprojection\n");
		return (ERROR);
	}
	free (img);

/*	Write attn	*/

	for (p = 0; p < numpln; p++) {
		k = 0;
		indx.pln = p + 1;
		for (j = numang - 1; j >= 0; j--) {
			for (i = 0; i < numray; i++) {
				tmpa = attn[p][j][i];
				if (tmpa > 0)
					fmatrix[k] = exp (tmpa);
				else
					fmatrix[k] = 1;
				k++;
			}
		}
		if (p == 0) {
			if (put_ss6 (file, &indx) == ERROR) {
				fprintf (stderr, "ERROR [fpattn6]: Cannot write file subheader to %s\n", outname);
				return (ERROR);
			}
		}
		if (wrattn6 (file, indx, fmatrix) == ERROR) {
			fprintf (stderr, "ERROR [fpattn6]: Cannot write plane %d of %s\n",
				 (int) p + 1, outname);
			return (ERROR);
		}
	}
	free (attn);
	free (fmatrix);
	close_imgfile (file);
	free_imgfile (file);
	return (OK);
}
@


1.4
log
@pixscaler passed from shell
@
text
@d2 3
d21 1
d23 1
a23 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fpattn6/RCS/fpattn6.c,v 1.3 2002/02/27 20:50:07 tom Exp tom $";
@


1.3
log
@adjust pixel size read from transmission image
@
text
@d2 3
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fpattn6/RCS/fpattn6.c,v 1.2 2002/02/26 22:15:55 tom Exp tom $";
d48 1
d62 1
d87 1
a87 1
	pixsize = 1.014 * pixsize_image;
d152 2
a153 1
	fprintf (stdout, "Using pixsize %f binsize %f  (pixsize in image %f)\n", pixsize, binsize, pixsize_image);
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d16 1
a16 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fpattn6/RCS/fpattn6.c,v 1.1 2002/02/26 18:11:26 tom Exp $";
d46 1
d81 2
a82 1
	pixsize = file->sh->sample_size_1;
d147 1
a147 1
	fprintf (stdout, "pixsize %f binsize %f\n", pixsize, binsize);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d13 1
a13 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fpattn6/RCS/fpattn6.c,v 1.3 2001/11/27 16:52:56 tom Exp $";
d143 11
a153 1
	fprintf (stdout, "Reprojecting %d rays and %d angles ____________|\n", numray, numang);
@
