head	1.3;
access;
symbols;
locks; strict;
comment	@c @;


1.3
date	92.10.19.15.56.10;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	92.10.16.22.32.51;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	92.05.12.21.33.47;	author tom;	state Exp;
branches;
next	;


desc
@Initial Unix version using libpetutil and libpe.
@


1.3
log
@modified RCSHEADER length
@
text
@c $Log: savepie.f,v $
c Revision 1.2  1992/10/16  22:32:51  tom
c added RCSHEADER
c
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  Subroutine:   SAVEPIE.FTN
C
C  Author:       Tom O. Videen
C  Date:         14-May-87
C  Written For:  METPROC
C  History:
C     Based on PIEFILE.FTN by Joel Perlmutter (REV1) 7/03/84
C     Modified 07-Oct-88 by TOV to prompt for PIE file type 3 or 5.
C     Modified 06-Dec-88 by TOV to add IMGTYPE to passed parameters
C        and to include a prompt for proper TYPE for pie file.
C
C			Modified for UNIX 12-May-92 TOV
C				LNBLNK, RINDEX used for string manipulation & to attach PIE extension
C				PIENAME changed to character*256
C
C  Intent:
C     This subroutine creates a .PIE file on disk.
C     The user enters pie slopes and bank pairs.
C     The subroutine will compute mean bank pairs from the
C     starting bank pair and length of the scan.
C
C  Variables Passed:
C     NPIES  - number of PIE values;
C     PSLOPES - PIE slope (ratio of well counter counts to PET counts);
C
C         well counts * min * pixel
C         -------------------------
C         sec * ml * PETT number
C
C     BNKPAIRS - average bank pair (coincidences);
C         in 1000's; decay corrected to start of scan;
C     DISK - logical unit to which the pie file is written;
C     PIENAME - name of PIE file;
C
C  Variables:
C     MEANPAIR: true--> Bank Pairs are entered as weighted averages
C        reflecting the counting rate throughout the scan period;
C        false--> Bank Pairs are entered as the initial bank pair
C        for each scan period along with the length of the scan
C        period (and the program computes a weighted average);
C
C  Common Block Variables:
C     TAUC11 - time constant for 11-C
C
C  Uses Subroutines:
C
C  TERMINAL.LIB
C     GETCHAR
C     GETINT
C     GTSTRING
C     YESNO
C
C  Called by:  PIEFILE
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE SAVEPIE(NPIES,PSLOPES,BNKPAIRS,DISK,PIENAME,IMGTYPE)
C
      INTEGER*4 USERIN,USEROUT
      INTEGER*4    NPIES,DISK,L,TYPE,IMGTYPE
      REAL         PSLOPES(10),BNKPAIRS(10),BANK1,ATIME
      CHARACTER*256 PIENAME
      CHARACTER*80 Q,STR,PHEADER
      LOGICAL*1    A,MEANPAIR
			CHARACTER*256 RCSHEADER
C
C **CONSTANT
C
      REAL*4 TAUO15,TAUC11,TAUGA68,TAUF18,HOLAMBDA,BULAMBDA,
     2       BRAINDEN,BLOODDEN,SLVRATIO,RBCFACTOR,TAUO1501,
     3       TAUO1502,OLDO15,TAUO1500
C
      COMMON /CONSTANT/ TAUO15,TAUC11,TAUGA68,TAUF18,HOLAMBDA,
     2        BULAMBDA,BRAINDEN,BLOODDEN,SLVRATIO,RBCFACTOR,
     3        TAUO1501,TAUO1502,OLDO15,TAUO1500
C
      COMMON /USRIO/ USERIN,USEROUT
C
			RCSHEADER = "$Header$"
C
      PIENAME = ' '
      MEANPAIR = .TRUE.
C
100   Q = 'Pie File Name'
      STR = PIENAME( : LNBLNK(PIENAME))
      CALL GTSTRING(Q,STR)
      PIENAME = STR
      IF (LNBLNK(PIENAME).LE.0) RETURN
C
C  All pie files should have extension .PIE
C
			L = LNBLNK(PIENAME)
			IF (PIENAME(L-2:L).NE.'PIE') THEN
				PIENAME = PIENAME( : LNBLNK(PIENAME))//'.PIE'
			END IF
C
C  Open the file
C
      OPEN(DISK,FILE=PIENAME,STATUS='NEW',ERR=120)
      GOTO 140
C
120   OPEN(DISK,FILE=PIENAME,STATUS='OLD',ERR=100)
      A = .FALSE.
      Q = 'FILE ALREADY EXISTS. Do you want to rewrite it'
      CALL YESNO(Q,A)
      IF (.NOT.A) THEN
        GO TO 100
      ELSE
        CLOSE(DISK,STATUS='DELETE',ERR=130)
        OPEN(DISK,FILE=PIENAME,STATUS='NEW',ERR=100)
        GOTO 140
130     WRITE(USEROUT,*)'*** ERROR: Unable to delete PIE file ',
     &		PIENAME( : LNBLNK(PIENAME)),BELL
        GOTO 100
      END IF
C
140   IF (IMGTYPE.EQ.1000) THEN
        TYPE = 3
      ELSE IF (IMGTYPE.EQ.1020) THEN
        TYPE = 5
      END IF
      WRITE(USEROUT,*)'PIE File Type depends on the reconstruction ',
     2                'stream used on the pie phantoms.'
      WRITE(USEROUT,*)'It can be determined by running HEADER6 on ',
     2                'a reconstructed image of a phantom.'
      WRITE(USEROUT,*)
      WRITE(USEROUT,*)'Image Type    Reconstruction    Pie File Type'
      WRITE(USEROUT,*)'----------   -----------------  -------------'
      WRITE(USEROUT,*)'   1000      Old Stream (1981)        3'
      WRITE(USEROUT,*)'   1020      New Stream (1988)        5'
      WRITE(USEROUT,*)
      Q = 'Pie File Type'
      CALL GETINT(Q,TYPE,3,5)
      IF (TYPE.NE.3 .AND. TYPE.NE.5) GO TO 140
      WRITE(DISK,*) TYPE,'  (TYPE)'
C
      Q = 'File Header'
      CALL GTSTRING(Q,PHEADER)
      WRITE(DISK,*) PHEADER
C
      Q = 'Number of pie-slope values'
      CALL GETINT(Q,NPIES,1,10)
      WRITE(DISK,*) NPIES
C
      WRITE(USEROUT,*) 'Bank Pairs may be entered as WEIGHTED ',
     2             'AVERAGES or INITIAL (peak) BANK PAIR'
      Q = 'Enter Bank Pairs as Weighted Averages'
      CALL YESNO(Q,MEANPAIR)
C
      WRITE(USEROUT,*)
      WRITE(USEROUT,*)'Enter PIE slopes from lowest to largest slopes'
      WRITE(USEROUT,*)'----------------------------------------------'
      DO 200 I=1,NPIES
        PSLOPES(I) = 1.0
        BANK1 = 1.0
        ATIME = 0.0
        IF (I.LT.10) THEN
          Q = 'PIE slope #'//CHAR(I+48)
        ELSE
          Q = 'PIE slope #10'
        END IF
        CALL GETREAL(Q,PSLOPES(I),0.001,100.0)
        IF (MEANPAIR) THEN
          Q = 'Weighted Bank Pair'
          CALL GETREAL(Q,BANK1,0.001,1000.0)
          BNKPAIRS(I) = BANK1
        ELSE
          Q = 'Starting Bank Pair'
          CALL GETREAL(Q,BANK1,0.0,1000.0)
          Q = 'Scan Time (seconds)'
          CALL GETREAL(Q,ATIME,0.1,3600.0)
C
C  Note that the bank pairs is a decay-corrected WEIGHTED average
C
          BNKPAIRS(I) = (BANK1/2.)* 
     &     ((1.-EXP(-2.*TAUC11*ATIME))/(1.-EXP(-TAUC11*ATIME)))
        END IF
        WRITE(DISK,*) PSLOPES(I),BNKPAIRS(I)
200   CONTINUE
C
      WRITE(USEROUT,*)'Pie data stored on disk file ',
     &	PIENAME( : LNBLNK(PIENAME))
      CLOSE(DISK)
C
      RETURN
      END
 
@


1.2
log
@added RCSHEADER
@
text
@d1 4
a4 1
c $Log$
d71 1
a71 1
			CHARACTER*100 RCSHEADER
d85 1
a85 1
			RCSHEADER = "$Header"
@


1.1
log
@Initial revision
@
text
@d1 1
d68 1
d81 2
@
