head	2.1;
access;
symbols;
locks; strict;
comment	@ * @;


2.1
date	2006.07.06.20.40.20;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.16.51.03;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.25.22.26.44;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.09.10.20.39.21;	author jane;	state Exp;
branches;
next	;


desc
@get parameter file values specific to alignimg
@


2.1
log
@no changes
@
text
@/* $Id: getprms_alignimg.c,v 2.0 2004/02/13 16:51:03 tom Exp tom $ */
/* $Log: getprms_alignimg.c,v $
 * Revision 2.0  2004/02/13  16:51:03  tom
 * Feb 2004
 *
 * Revision 1.2  2000/01/25  22:26:44  tom
 * add mask option
 *
 * Revision 1.1  1996/09/10  20:39:21  jane
 * Initial revision
 * */
/* ===============================================================================
 * Module:	getprms_alignimg.c
 * Date:	7-Sep-96
 * Author:	Jane Dunford-Shore
 * Description:	Read program-specific parameters from the parameter file.
 * Input:
 *		prmfile	- name of parameter file
 *		t1      - threshold standard image (image being aligned to)
 *      t2      - threshold for reslice image (image being aligned)
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/alignimg/RCS/getprms_alignimg.c,v 2.0 2004/02/13 16:51:03 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <myvalues.h>
#include <imgutil.h>

int             getprms_alignimg (prmfile, t1, t2)
	char           *prmfile;
	float          *t1;
	float          *t2;

{
	FILE           *fp;					 /* pointer to paramater file */
	char            line[MAXLINE];		 /* line of parameter file */
	char            label[MAXLINE];		 /* parameter key ("species:", "tracer:", etc.) */
	char            parameter[MAXLINE];	 /* parameter value ("p", "ho", etc.) */
	float           t1def = 400.0;		 /* default for threshold 1 */
	float           t2def = 400.0;		 /* default for threshold 2 */

/*
 *  Open parameter file
 */
	fp = fopen (prmfile, "r");
	if (fp == NULL) {
		fprintf (stderr, "Error opening parameter file %s\n", prmfile);
		return (ERROR);
	}

/*
 * Set threshold defaults
 * Read each line of parameter file.
 * If the line has 2 strings, compare the label with the list of eligible keys:
 * and if the key is found, set the appropriate parameter.
 */

	while (fgets (line, MAXLINE, fp) != NULL) {
		if (sscanf (line, "%s %s", label, parameter) == 2) {
			if (strcmp (label, "t1:") == 0) {
				if ((stringtype (parameter) == TYPE_REAL) || (stringtype (parameter) == TYPE_INTEGER))
					*t1 = atof (parameter);
				else 
					fprintf (stderr, "ERROR [getprms_alignimg]: t1 is not integer or float\n");
			} else if (strcmp (label, "t2:") == 0) {
				if ((stringtype (parameter) == TYPE_REAL) || (stringtype (parameter) == TYPE_INTEGER))
					*t2 = atof (parameter);
				else
					fprintf (stderr, "ERROR [getprms_alignimg]: t2 is not integer or float\n");
			}
		}	
	}	

/*
 *  Check that all required parameters have been assigned new values before exiting.
 */

	if (*t1 == -1.0) {
		printf ("Default value of %.1f will be used for threshold1\n", t1def);
		*t1 = t1def;
	}
	if (*t2 == -1.0) {
		printf ("Default value of %.1f will be used for threshold2\n", t2def);
		*t2 = t2def;
	}
	return (OK);
}
@


2.0
log
@Feb 2004
@
text
@d1 1
a1 1
/* $Id: getprms_alignimg.c,v 1.2 2000/01/25 22:26:44 tom Exp tom $ */
d3 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/alignimg/RCS/getprms_alignimg.c,v 1.2 2000/01/25 22:26:44 tom Exp tom $";
@


1.2
log
@add mask option
@
text
@d1 1
a1 1
/* $Id: getprms_alignimg.c,v 1.1 1996/09/10 20:39:21 jane Exp tom $ */
d3 3
d20 1
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/alignimg/RCS/getprms_alignimg.c,v 1.1 1996/09/10 20:39:21 jane Exp tom $";
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/* $Id$ */
/* $Log$ */
d14 1
a14 1
 *              t2      - threshold for reslice image (image being aligned)
d17 3
d27 4
a30 1
static char rcsid[] = "$Header$";
a31 5
int getprms_alignimg (prmfile, t1, t2)
    char   *prmfile;
    float  *t1;
    float  *t2;

d33 6
a38 6
    FILE  *fp = NULL;		  /* pointer to paramater file */
    char   line[MAXLINE];         /* line of parameter file */
    char   label[MAXLINE];	  /* parameter key ("species:", "tracer:", etc.) */
    char   parameter[MAXLINE];	  /* parameter value ("p", "ho", etc.) */
    float  t1def = 400.0;	  /* default for threshold 1 */
    float  t2def = 400.0;	  /* default for threshold 2 */
d43 5
a47 5
    fp = fopen(prmfile, "r");
    if (fp == NULL) {
	fprintf(stderr, "Error opening parameter file %s\n", prmfile);
	return(ERROR);
    }
a50 3
 */

/*
d56 15
a70 20
    while (fgets(line, MAXLINE, fp) != NULL) {
       	if (sscanf(line, "%s %s", label, parameter) == 2) {
	    if (strcmp (label, "t1:") == 0) { 
	        if (stringtype(parameter) == (TYPE_REAL || TYPE_INTEGER)) {
                    *t1 = atof(parameter); 
                }
                else {
                    fprintf(stderr, "ERROR [getprms_alignimg]: Value specified for t1 is not integer or float.\n");
                }           
	    }
	    else if (strcmp (label, "t2:") == 0) {
                if (stringtype(parameter) == (TYPE_REAL || TYPE_INTEGER)) {
                    *t2 = atof(parameter); 
                }
                else {
                    fprintf(stderr, "ERROR [getprms_alignimg]: Value specified for t2 is not integer or float.\n");
                }    
	    }
        }   /* end if (sscanf()) */
    }   /* end while loop */
d76 9
a84 8
    if (*t1 == -1.0) {
	printf ("Default value of %.1f will be used for threshold1\n", t1def);
	*t1 = t1def;
    }
    if (*t2 == -1.0) {
	printf ("Default value of %.1f will be used for threshold2\n", t2def);
	*t2 = t2def;
    }
@
