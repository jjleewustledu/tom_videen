head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2007.12.18.19.09.59;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.17.14.41.43;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.21.13.50.27;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.15.16.43.38;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	99.10.22.17.16.41;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	99.07.28.20.02.21;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	99.06.08.19.08.38;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.06.08.18.22.45;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.06.08.17.41.52;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.06.08.17.21.17;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.05.28.22.01.37;	author tom;	state Exp;
branches;
next	;


desc
@@


1.11
log
@modify to use cost_function 3 (least squares with intensity rescaling)
@
text
@#!/bin/csh
#   Module: align_ho
#   Author: Tom Videen
#   Date:   Dec 2007
#   Use:    Align 2 HO images using predefined mask
#	Modified:	Dec 2007 to use least squares with intensity rescaling (-x 3)

if ($#argv != 4) then
    echo "Usage:  align_ho pid std res mask"
	echo " e.g.,  align_ho p5000 1 2 p5000mask.v"
    exit 1
endif

set VER = 12/18/2007
set PID = $1
set STD = ho$2
set RES = ho$3
set MASK = $4

set THR = 50
set RID = r$PID
set FIL = _g3
set HO1 = r$PID$STD$FIL
set H2  = $PID$RES
set HO2 = $PID$RES$FIL
set AIR = $PID${RES}_to_$STD
set AMASK = a$MASK:r

# Check existence of files:

set EFILES = "$HO1.v $HO2.v $H2.v $MASK"
set STATUS = 0
foreach i ($EFILES)
    if (! -e $i) then
        echo "ERROR [align_ho]: $i does not exist."
        set STATUS = 1
    endif
end
if ( $STATUS != 0) exit 1

# Check the pixel size in PET headers:
 
set STATUS = 0
set ORGSIZE = 0
foreach i ($EFILES)
    set PIXSIZE = `imghdr $i | grep 'Pixel size' | cut -f4 -d' '`
    if ($PIXSIZE == 0.208634) echo "Note: pixel size of $i is $PIXSIZE"
    if ($ORGSIZE == 0) then
        set ORGSIZE = $PIXSIZE
        set ORGFILE = $i
    else if ($PIXSIZE != $ORGSIZE) then
        echo "ERROR [align_oxy]: different pixel sizes:"
        echo "  $ORGFILE = $ORGSIZE"
        echo "  $i = $PIXSIZE"
        set STATUS = 1
    endif
end
if ($STATUS != 0) exit 1

# Setup log file:

set LOGFILE = ${RID}_align.log
if (-e $LOGFILE) then
	echo "" >> $LOGFILE
else
	touch $LOGFILE
endif
echo "$H2 alignment:  " `whoami` `date` >> $LOGFILE
echo "Version: " $VER             >> $LOGFILE
echo ""                           >> $LOGFILE

# Convert images to Analyze format:

img2analyze $MASK $AMASK
img2analyze $HO1.v a$HO1
img2analyze $HO2.v a$HO2
setanamin $AMASK 0
setanamin a$HO1 0
setanamin a$HO2 0

# Align HO2 to HO1, then reslice:
 
echo "Aligning:  $HO2 to $HO1"
set PRM = "-m 6 -p1 1 -t1 $THR -p2 1 -t2 $THR -e1 $AMASK -e2 $AMASK -x 3 -v"
echo ">> alignlinear $PID$HO2 to $HO1" >> $LOGFILE
echo $PRM >> $LOGFILE
 
alignlinear a$HO1 a$HO2 ${AIR}.air $PRM >! log
tail -6 log | head -3 >> $LOGFILE
tail -1 log >> $LOGFILE
set ERROR = `grep HESSIAN log`
set CHK = `echo $ERROR | wc -w`
if ($CHK > 0) then
	echo $ERROR
	echo "Alignment may require an initialization file"
	echo $ERROR >> $LOGFILE
endif
set ERROR = `grep hessian log`
set CHK = `echo $ERROR | wc -w`
if ($CHK > 0) then
	echo $ERROR
	echo "Alignment may require an initialization file"
	echo $ERROR >> $LOGFILE
endif

if (! -e null.air) alignlinear a$HO1 a$HO1 null.air -m 6 -p1 1 -t1 100 -p2 0 -x 2
airdif1 ${AIR}.air null.air $MASK >> $LOGFILE
imgreslice a$HO2 $AIR
analyze2img ra$HO2 r${HO2}.v

if (-e $HO2.hdr) /usr/bin/cp $HO2.hdr r${HO2}.hdr

img2analyze $H2.v a$H2
imgreslice  a$H2  $AIR
analyze2img ra$H2 r$H2.v
if (-e $HO2.hdr) /usr/bin/cp $HO2.hdr r$H2.hdr

if ($CHK > 0) then
	echo "Check alignment and enter RETURN to continue or CTRL-C to quit"
	set data=`line`
endif

echo "Complete [align_ho] =========================="

@


1.10
log
@*** empty log message ***
@
text
@d4 1
a4 1
#   Date:   Oct 1999
d6 1
d14 1
a61 2
set BINFILE = `which align_ho`
set VER = `grep rcsid $BINFILE | cut -f2- -d: | cut -f1 -dE | head -1`
d84 1
a84 1
set PRM = "-m 6 -p1 256 -t1 $THR -p2 256 -t2 $THR -e1 $AMASK -e2 $AMASK -x 1 -v"
d94 7
@


1.9
log
@*** empty log message ***
@
text
@d4 1
a4 1
#   Date:   Oct-99
a5 1
#	rcsid = $Id: align_ho,v 1.7 1999/10/22 17:16:41 tom Exp $
d8 2
a9 2
    echo "Usage: align_ho pid std res mask"
	echo " i.e., align_ho p5000 1 2 p5000mask.v"
a96 1
	exit 1
d111 5
@


1.8
log
@*** empty log message ***
@
text
@d11 1
a11 1
    exit (1)
d38 1
a38 1
if ( $STATUS != 0) exit (1)
d56 2
a57 2
endif
if ($STATUS != 0) exit (1)
d98 1
a98 1
	exit (1)
@


1.7
log
@revised for new Procedures
@
text
@d6 1
a6 1
#	rcsid = $Id: align_ho,v 1.6 1999/07/28 20:02:21 tom Exp $
d104 1
a104 1
analyze2img ra$HO2 ${RID}${HO2}.v
d106 1
a106 1
if (-e $HO2.hdr) /usr/bin/cp $HO2.hdr ${RID}${HO2}.hdr
@


1.6
log
@*** empty log message ***
@
text
@d4 3
a6 3
#   Date:   Jul-99
#   Use:    Align 2 HO images 
#	rcsid = $Id: align_ho,v 1.5 1999/06/08 19:08:38 tom Exp $
d22 4
a25 4
set HO1 = ${STD}${FIL}
set H2  = ${RES}
set HO2 = ${RES}${FIL}
set AIR = ${PID}${RES}_to_${STD}
d30 1
a30 1
set EFILES = "${PID}${HO1}.v ${PID}${HO2}.v ${PID}${H2}.v $MASK"
d69 1
a69 1
echo "$PID $H2 alignment:  " `whoami` `date` >> $LOGFILE
d76 2
a77 2
img2analyze ${PID}${HO1}.v a${PID}${HO1}
img2analyze ${PID}${HO2}.v a${PID}${HO2}
d79 2
a80 2
setanamin a${PID}${HO1} 0
setanamin a${PID}${HO2} 0
d84 1
a84 1
echo "Aligning:  ${PID}${HO2} to ${PID}${HO1}"
d86 1
a86 1
echo ">> alignlinear $PID$HO2 to $PID$HO1" >> $LOGFILE
d89 1
a89 1
alignlinear a${PID}${HO1} a${PID}${HO2} ${AIR}.air $PRM >! log
d101 1
a101 1
if (! -e null.air) alignlinear a${PID}${HO1} a${PID}${HO1} null.air -m 6 -p1 1 -t1 100 -p2 0 -x 2
d103 2
a104 2
imgreslice a${PID}${HO2} $AIR
analyze2img ra${PID}${HO2} ${RID}${HO2}.v
d106 1
a106 1
if (-e ${PID}${HO2}.hdr) /usr/bin/cp ${PID}${HO2}.hdr ${RID}${HO2}.hdr
d108 4
a111 4
img2analyze ${PID}${H2}.v a${PID}${H2}
imgreslice  a${PID}${H2}  $AIR
analyze2img ra${PID}${H2} ${RID}${H2}.v
if (-e ${PID}${HO2}.hdr) /usr/bin/cp ${PID}${HO2}.hdr ${RID}${H2}.hdr
@


1.5
log
@*** empty log message ***
@
text
@d4 1
a4 1
#   Date:   Jun-99
d6 1
a6 1
#	rcsid = $Id: align_ho,v 1.4 1999/06/08 18:22:45 tom Exp tom $
d11 1
a11 1
    exit (-1)
d38 1
a38 1
if ( $STATUS != 0) exit (-1)
d57 1
a57 1
if ($STATUS != 0) exit (-1)
d79 2
a80 2
setanamin a${HO1} 0
setanamin a${HO2} 0
d92 8
@


1.4
log
@*** empty log message ***
@
text
@d6 1
a6 1
#	rcsid = $Id: align_ho,v 1.3 1999/06/08 17:41:52 tom Exp tom $
d105 1
a105 1
echo "Complete [align_ho] ======================="
@


1.3
log
@single log file
@
text
@d6 1
a6 1
#	rcsid = $Id: align_ho,v 1.2 1999/06/08 17:21:17 tom Exp tom $
d22 3
a24 3
set HO1 = ${PID}${STD}${FIL}
set H2  = ${PID}${RES}
set HO2 = ${PID}${RES}${FIL}
d105 1
a105 1
echo "Complete [align_ho]:  ${RID}${H2}.v"
@


1.2
log
@revised mask, parameters
@
text
@d6 1
a6 1
#	rcsid = $Id: align_ho,v 1.1 1999/05/28 22:01:37 tom Exp $
d63 7
a69 3

set LOGFILE = ${PID}${H2}_to_${STD}_align.log
echo "${PID}${H2} alignment:  " `whoami` `date` >! $LOGFILE
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
#   Date:   May-99
d6 1
a6 1
#	rcsid = $Id$
d8 3
a10 3
if ($#argv != 3) then
    echo "Usage: align_ho pid std res"
	echo " i.e., align_ho p5000 1 2"
d17 4
d26 1
d30 1
a30 1
set EFILES = "${HO1}.v ${HO2}.v ${H2}.v mask.v"
d64 2
a65 2
set LOGFILE = ${H2}_to_${STD}_align.log
echo "${H2} alignment:  " `whoami` `date` >! $LOGFILE
d71 6
a76 2
img2analyze ${HO1}.v a${HO1}
img2analyze ${HO2}.v a${HO2}
d79 7
a85 15

echo "Aligning:  ${HO2} to ${HO1}"
maskslc ${HO1}.v temp.v 25to47
set a = `imghdr temp.v | grep Max | cut -f3 -d' '`
set thrs = `echo $a / 3 | bc`
maskslc ${HO2}.v temp.v 25to47
set b = `imghdr temp.v | grep Max | cut -f3 -d' '`
set thrr = `echo $b / 3 | bc`
if (! -e amask.img) img2analyze mask.v amask
set PRM = "-m 6 -p1 256 -t1 $thrs -p2 256 -t2 $thrr -e1 amask -e2 amask -x 1 -v"
setanamin amask 0
setanamin a${HO1} 0
setanamin a${HO2} 0
alignlinear a${HO1} a${HO2} ${AIR}.air $PRM >! log
echo ">> alignlinear $HO2 to $HO1" >> $LOGFILE
a87 2
imgreslice a${HO2} $AIR
analyze2img ra${HO2} r${HO2}.v
d89 4
a92 1
# Check amount of movement: 
d94 1
a94 5
if (! -e null.air) then
	alignlinear a${HO1} a${HO1} null.air -m 6 -p1 1 -t1 100 -p2 0 -x 2
endif
airdif1 ${AIR}.air null.air mask.v >> $LOGFILE
echo " " >> $LOGFILE
d96 4
a99 1
if (-e ${HO2}.hdr) /usr/bin/cp ${HO2}.hdr r${HO2}.hdr
d101 1
a101 6
img2analyze ${H2}.v a${H2}
imgreslice a${H2} $AIR
analyze2img ra${H2} r${H2}.v
if (-e ${HO2}.hdr) /usr/bin/cp ${HO2}.hdr r${H2}.hdr

echo "Complete [align_ho]:  r${H2}.v"
@
