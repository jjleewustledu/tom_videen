head	1.1;
access;
symbols;
locks; strict;
comment	@c @;


1.1
date	97.09.19.22.13.12;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  Subroutine:   BINPROF.FTN
C
C  Author:       Tom O. Videen
C  Date:         03-Jun-88
C  Written For:  PETT VI Reconstruction
C
C  History/Revisions:
C     Original BINAL.FTN written for PETT VI 4/16/81 by Joanne Markham.
C     The current version was completely rewritten by Tom Videen
C        03-Jun-88 using the same basic algorithm.
C        The output file of profiles is now REALs.
C        Data type changed to 120 in header.
C
C  Intent:
C     Convert raw data to profile bins.
C     The binning creates 72 profiles with 108 points/profile.
C     This conversion uses a table generated by the program TABGEN6
C        whose file structure is described in TAB6ANEW.TXT.
C     The input raw data file is created by SLICESEP.FTN.
C
C     The program changes the following value in the file header:
C       (38) file type changed to 120;
C
C     Input File:  see PETT6SLC.FIL
C     Output File: see PETT6SRT.FIL
C
C  Logical Units:
C     1 = raw data separated by slice (INFILE)
C     2 = data binned into profiles (OUTFILE)
C     3 = lookup table (TABLE)
C     5 = user output (USEROUT)
C
C  Uses:
C     SYSIO
C
C  Instructions for Compiling/Linking:  LINK7 BINPROF
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      PROGRAM BINPROF
C
      INTEGER*2  HEADER(128)    ! header record
      INTEGER*2  RAWCNTS(64,16) ! raw data (unbinned) (DETPAIR,WOBBLE)
      INTEGER*2  BIN(16,64)     ! profile bin number (1-110) (WOBBLE,DETPAIR)
C
      INTEGER*4  INFILE    ! log. unit assigned input file (raw data)
      INTEGER*4  OUTFILE   ! log. unit assigned output file (binned profiles)
      INTEGER*4  TABLE     ! log. unit assigned to lookup table
      INTEGER*4  USEROUT   ! log. unit assigned for user output
      INTEGER*4  PB(6)     ! parameter block used in SYSIO
      INTEGER*4  IOREAD    ! SYSIO read sequential binary wait
      INTEGER*4  IOWRITE   ! SYSIO write sequential binary wait
      INTEGER*4  SLICE     ! slice number being processed
      INTEGER*4  BANKPAIR  ! bank pair number
      INTEGER*4  DETPAIR   ! detector pair (1-64)
      INTEGER*4  WOBBLE    ! wobble position (number) (1-16)
      INTEGER*4  ANG       ! local variable for ANGNUM(i)
      INTEGER*4  BN        ! local variable for BIN(i)
      INTEGER*4  ANGNUM(64)! angle number of profile (1-72) (DETPAIR)
      INTEGER*4  ANGBYTES  ! no. of bytes to write for ANGNUM
      INTEGER*4  BINBYTES  ! no. of bytes to write for BIN
      INTEGER*4  FACBYTES  ! no. of bytes to write for FACTOR
      INTEGER*4  WTBYTES   ! no. of bytes to write for WEIGHT
      INTEGER*4  RAWBYTES  ! no. of bytes to read for RAWCNTS
      INTEGER*4  OUTBYTES  ! bytes per slice in output file
      INTEGER*4  N         ! index to OUTARRAY
C
      REAL*4     OUTARRAY(7808) ! binned array to write to output file
      REAL*4     FACTOR(110,72) ! normalization factors (BIN,ANGNUM)
      REAL*4     PROF(110,72)   ! binned profile array (BIN,ANGNUM)
      REAL*4     WEIGHT(16,64)  ! weighting factor (WOBBLE,DETPAIR)
      REAL*4     WT             ! local variable for WEIGHT(i,j)
      REAL*4     COUNTS         ! local variable for RAWCNTS(i,j)
C
      CHARACTER*1 BELL          ! used to ring terminal bell
      CHARACTER*20 SLICESNAME,SORTSNAME ! command line arguments, file names
      CHARACTER*80 TAB6ANAME            ! command line arguments, file names
C
      DATA  INFILE,OUTFILE,TABLE,USEROUT  /1,2,3,6/
      DATA  IOWRITE,IOREAD    /56,88/
      DATA  RAWBYTES /2048/   ! 16 wobbles * 64 det-det pairs * 2 bytes
      DATA  ANGBYTES /256/    ! 64 det-det pairs * 4 bytes
      DATA  BINBYTES /2048/   ! 16 wobbles * 64 det-det pairs * 2 bytes
      DATA  WTBYTES  /4096/   ! 16 wobbles * 64 det-det pairs * 4 bytes
      DATA  FACBYTES /31680/  ! 72 angles * 110 bins * 4 bytes
      DATA  OUTBYTES /31232/  ! 72 angles * 108 bins * 4 bytes
C                               rounded up to full record
      BELL = CHAR(7)
C
      WRITE(USEROUT,*) '*** BINPROF  Sep-97  {bin profiles}'
      CALL GETARG (1, SLICESNAME)
      CALL GETARG (2, SORTSNAME)
      CALL GETARG (3, TAB6ANAME)
C
C  Zero output array
C
      DO 50 I=1,7808
        OUTARRAY(I) = 0.0
50    CONTINUE
C
C  Loop for seven slices
C
C  Added the following open statements when porting to HP 4-29-91 KMG
C      
      OPEN(TABLE,FILE=TAB6ANAME)
      OPEN(INFILE,FILE=SLICESNAME)
      OPEN(OUTFILE,FILE=SORTSNAME)
C      
      DO 1000 SLICE=1,7
        REWIND TABLE
        DO 200 ANG=1,72
          DO 100 BN=1,110
            PROF(BN,ANG) = 0.0
100       CONTINUE
200     CONTINUE
C
C  Read and write information record
C  Change data type flag to 120 (2.5mm binned data)
C
        CALL SYSIO(PB,IOREAD,INFILE,HEADER,256,0)
        IF (HEADER(38).NE.20) THEN
          WRITE(USEROUT,*) '*******************************************'
          WRITE(USEROUT,*) '*  Input file is of wrong type.'
          WRITE(USEROUT,*) '*  It must be a file processed by SLICESEP.'
          WRITE(USEROUT,*) '*******************************************'
          STOP
        END IF
        HEADER(38) = 120
        CALL SYSIO(PB,IOWRITE,OUTFILE,HEADER,256,0)
C
C  Read raw data & binning table for one bank pair and
C  Assign raw counts to profile bins.
C
        DO 500 BANKPAIR=1,18
          CALL SYSIO(PB,IOREAD,INFILE,RAWCNTS,RAWBYTES,0)
          CALL SYSIO(PB,IOREAD,TABLE,ANGNUM,ANGBYTES,0)
          CALL SYSIO(PB,IOREAD,TABLE,BIN,BINBYTES,0)
          CALL SYSIO(PB,IOREAD,TABLE,WEIGHT,WTBYTES,0)
          DO 400 WOBBLE=1,16
            DO 300 DETPAIR=1,64
              ANG = ANGNUM(DETPAIR)
              BN  = BIN(WOBBLE,DETPAIR)
              WT  = WEIGHT(WOBBLE,DETPAIR)
              COUNTS = FLOAT(RAWCNTS(DETPAIR,WOBBLE))
              PROF(BN,ANG) = PROF(BN,ANG) + COUNTS*WT
              PROF(BN+1,ANG) = PROF(BN+1,ANG) + COUNTS*(1.0-WT)
300         CONTINUE
400       CONTINUE
500     CONTINUE
C
C  Read table of normalizing factors into FACTOR array
C
        CALL SYSIO(PB,IOREAD,TABLE,FACTOR,FACBYTES,0)
C
C  Normalize profiles
C
        DO 800 ANG=1,72
          DO 700 BN=1,110
            PROF(BN,ANG) = PROF(BN,ANG)*FACTOR(BN,ANG)
700       CONTINUE
800     CONTINUE
C
C  Omit end points (bins 1 & 110)
C
        N = 0
        DO 910 ANG=1,72
          DO 900 BN=2,109
            N = N+1
            OUTARRAY(N) = PROF(BN,ANG)
C
C  The following code was used by Joanne Markham to avoid zero bins.
C  It is thought to be unnecessary.
C
C           IF (OUTARRAY(N).LT.0.0) THEN
C             OUTARRAY(N)=(PROF(BN-1,ANG)+PROF(BN+1,ANG))/2.
C             IF (OUTARRAY(N).EQ.0.0) THEN
C               TYPE*,'   ZERO FOR 2 BINS  ',ANG,BN
C               IF (BN.NE.109) THEN
C                 OUTARRAY(N)=(PROF(BN-1,ANG)+PROF(BN+2,ANG))/3.
C               ELSE
C                 OUTARRAY(N)=(PROF(BN-2,ANG)+PROF(BN+1,ANG))/3.
C               END IF
C               IF (OUTARRAY(N).EQ.0.0) THEN
C                 TYPE*,'   ZERO FOR 3 BINS !!!! ',ANG,BN
C               END IF
C             END IF
C           END IF
C
900       CONTINUE
910     CONTINUE
C
C  Write profiles to disk
C
        CALL SYSIO(PB,IOWRITE,OUTFILE,OUTARRAY,OUTBYTES,0)
C
1000  CONTINUE
C
      CLOSE(INFILE)
      CLOSE(OUTFILE)
      CLOSE(TABLE)
      STOP
      END
@
