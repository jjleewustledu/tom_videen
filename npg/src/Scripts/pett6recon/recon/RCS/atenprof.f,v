head	1.1;
access;
symbols;
locks; strict;
comment	@c @;


1.1
date	97.09.19.22.13.12;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  Program:      ATENPROF.FTN
C
C  Author:       Tom O. Videen
C  Date:         22-Sep-88
C  Written For:  PETT VI Reconstruction
C
C  History/Revisions:
C     Based on IMPROF.FTN written 12/04/86 by John Gorman.
C     Revised 17-Oct-88 by TOV to use different SCALER factor for
C        images reconstructed with FILTERG.REL and FILTERF.REL.
C
C  Intent:
C     Creates profiles from an attenuation image.
C     Reads an NDIM x NDIM image and creates profiles analagous
C     to those of the input profiles for the attenuation image.
C     These profiles created from the image are less noisy and
C     make for better emission image restruction, as proposed by
C     Dave Ficke.
C
C     Reads table of indices (INDX) from the file PROFTABL
C     generated by the program PROFTABL.FTN.
C
C     Input Files: see PETT6IMG.FIL and PETT6PRO.FIL
C     Output File: see PETT6SRT.FIL
C
C  Logical Units:
C     1 = Attenuation image file (INFILE)
C     2 = File of attenuation profiles (OUTFILE)
C     3 = Normalization profiles (input) (NSORTS)
C     5 = User output (USEROUT)
C
C  Uses Subroutines:
C     SYSIO
C
C  TERMINAL.LIB
C     GETREAL
C
C  Instructions for Compiling/Linking:  LINK7T ATENPROF
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      PROGRAM ATENPROF
C
      PARAMETER (NDIM=100)          ! array dimension
      PARAMETER (NPBINS=108)        ! no. of bins per profile
      PARAMETER (NANGLE=72)         ! no. of angles per profile
      PARAMETER (NINTRP=24)         ! no. of interpolated values
      PARAMETER (NXBINS=2569)       ! no. of bins in interpolated profiles
      PARAMETER (PIX=0.27)          ! pixel size in image (cm)
      PARAMETER (SCALERG=4.27)      ! image scaler using FILTERG.REL
      PARAMETER (SCALERF=4.23)      ! image scaler using FILTERF.REL
C         (2.0 from scaler in BACKPROJ.FTN and 2.135 from other sources,
C         probably mainly the filter; SCALER was estimated from large
C         regions on uniform phantoms reconstructed with FILTERG.REL by
C         comparing regional values of original and smoothed images and
C         from regions on original attenuation images and an image
C         reconstructed using CORATTEN and BACKPROJ on the output file
C         from this program.)
C
C         Scalers for filters G and F were determined empirically by
C         TOV Sept. 1988
C
      REAL*4     ARRAY(NDIM,NDIM)   ! real image array
      REAL*4     PROFILE(NPBINS)    ! profiles
      REAL*4     XPROFILE(NXBINS)   ! interpolated profiles
      REAL*4     NORM(NPBINS,NANGLE)! normal profile data
      REAL*4     OUTPROF(NPBINS,NANGLE)! final output profile
      REAL*4     PIXAREA            ! pixel area (cm**2)
      REAL*4     FRACT              ! fraction used in interpolation
      REAL*4     CONST              ! factor used recreating profiles
      REAL*4     SCALER             ! image scaler
      REAL*4     SCALFRAC
C
      INTEGER*4  PB(6)              ! parameter block for SYSIO
      INTEGER*4  IOREAD             ! read binary, wait
      INTEGER*4  IOWRITE            ! write binary, wait
      INTEGER*4  NBYTES             ! no. of bytes to read or write
      INTEGER*4  INFILE             ! log unit for image file
      INTEGER*4  OUTFILE            ! log unit for profile file
      INTEGER*4  NSORTS             ! log. unit for binned normal profiles
      INTEGER*4  PROFTABL           ! log. unit for file of indices (INDX)
      INTEGER*4  USEROUT            ! log unit for user output
      INTEGER*4  ANG                ! DO loop index (angle no.)
      INTEGER*4  SLICE              ! DO loop index (slice no.)
      INTEGER*4  BIN                ! bin number
      INTEGER*4  I,J,K              ! local integers
C
      INTEGER*2  IMAGE(NDIM,NDIM)   ! image
      INTEGER*2  INDX(NDIM,NDIM)    ! indices to XPROFILE for updates with ARRAY
      INTEGER*2  HEADER(128)        ! header record for image & output profiles
      INTEGER*2  HEADER1(128)       ! header record for normal profiles
      INTEGER*2  NORMTIME           ! scan time for normal scan
      INTEGER*2  TRANTIME           ! scan time for attenuation scan
      INTEGER*2  JUNK(112)
C
      CHARACTER*1  BELL             ! ring terminal bell
      CHARACTER*12 FILTER           ! filter name used to generate atten image
      CHARACTER*20 IMAGENAME,TSORTSNAME,NSORTSNAME
      CHARACTER*80 PROFTABLNAME
C
      EQUIVALENCE (HEADER(41),FILTER)
      DATA INFILE,OUTFILE,NSORTS,PROFTABL,USEROUT /1,2,3,4,6/
      DATA IOREAD,IOWRITE /88,56/
      DATA NSLICE /7/
C
      WRITE(USEROUT,*) '*** ATENPROF  Sep-97  {create profiles from attenuation image}'
      CALL GETARG (1, IMAGENAME)
      CALL GETARG (2, TSORTSNAME)
      CALL GETARG (3, NSORTSNAME)
      CALL GETARG (4, PROFTABLNAME)

      OPEN(INFILE,FILE=IMAGENAME)
      OPEN(OUTFILE,FILE=TSORTSNAME)
      OPEN(NSORTS,FILE=NSORTSNAME)
      OPEN(PROFTABL,FILE=PROFTABLNAME)
      
      PB(6) = 0
      PIXAREA  = PIX*PIX
      SCALFRAC = 1.0/FLOAT(NINTRP*NINTRP)
      CONST    = 0.               ! avoid compiler warning
      SCALER   = 0.               ! avoid compiler warning
      BELL     = CHAR(7)
C
      DO 1000 SLICE=1,NSLICE
C
C  Read in 1 slice of image
C
        NBYTES = NDIM*NDIM*2
        CALL SYSIO(PB,IOREAD,INFILE,HEADER,256,0)
        CALL SYSIO(PB,IOREAD,INFILE,IMAGE,NBYTES,0)
C
        IF (SLICE.EQ.1) THEN
C
C  Check that file type is reconstructed attenuation image
C
          IF (HEADER(38).NE.1010) THEN
            WRITE(USEROUT,*) '*****************************************'
            WRITE(USEROUT,*) '* Input file is of wrong type.'
            WRITE(USEROUT,*) '* It must be an attenuation image (1010).'
            WRITE(USEROUT,*) '*****************************************'
            STOP
          END IF
C
C  Assign value for SCALER based on filter used in attenuation image
C
          IF (FILTER.EQ.'filterf.rel ') THEN
            SCALER = SCALERF
          ELSE
            SCALER = SCALERG
          ENDIF

C         IF (FILTER.EQ.'FILTERG.REL ') THEN
C           SCALER = SCALERG
C         ELSE IF (FILTER.EQ.'FILTERF.REL ') THEN
C           SCALER = SCALERF
C         ELSE
C           WRITE(USEROUT,*) '*****************************************'
C           WRITE(USEROUT,*) '* A scaling factor has been determined '
C           WRITE(USEROUT,*) '* for FILTERG.REL and FILTERF.REL, but'
C           WRITE(USEROUT,*) '* the current attenuation image was '
C           WRITE(USEROUT,*) '* reconstructed with filter ',FILTER
C           WRITE(USEROUT,*) '* To continue, enter a scaler.'
C           WRITE(USEROUT,*) '*****************************************'
C           WRITE(USEROUT,*) BELL
C           SCALER = SCALERG
C           Q = 'Scaler'
C           CALL GETREAL(Q,SCALER,0.1,10.0)
C         END IF
C
C  Assign value for CONST
C
          TRANTIME = HEADER(8)
          NORMTIME = HEADER(70)
          CONST = FLOAT(TRANTIME)/FLOAT(NORMTIME)
        END IF
C
C  Read normal data for 1 slice
C
        CALL SYSIO(PB,IOREAD,NSORTS,HEADER1,256,0) ! skip header
        IF (SLICE.EQ.1 .AND. HEADER1(38).NE.120) THEN
          WRITE(USEROUT,*) '*******************************************'
          WRITE(USEROUT,*) '*  NORM file is of wrong type.'
          WRITE(USEROUT,*) '*  It must be a file processed by BINPROF.'
          WRITE(USEROUT,*) '*******************************************'
          STOP
        END IF
        NBYTES = NPBINS*NANGLE*4
        CALL SYSIO(PB,IOREAD,NSORTS,NORM,NBYTES,0)
        CALL SYSIO(PB,IOREAD,NSORTS,JUNK,128,0)
C
C  Reset file type to binned profiles
C
        HEADER(38) = 120
        CALL SYSIO(PB,IOWRITE,OUTFILE,HEADER,256,0)
C
C  Convert input image to real array.
C  Scale using same factor used in BACKPROJ.FTN
C
        DO 120 J=1,NDIM
          DO 100 I=1,NDIM
            ARRAY(I,J) = (FLOAT(IMAGE(I,J)))*SCALER
100       CONTINUE
120     CONTINUE
C
C  Transform image points to profiles
C
        REWIND PROFTABL
        DO 900 ANG=1,NANGLE
C
C  Read table of indices (INDX) for 1 profile (generated by PROFTABL.FTN)
C
          NBYTES = NDIM*NDIM*2
          CALL SYSIO(PB,IOREAD,PROFTABL,INDX,NBYTES,0)
C
C  Update profile array for current angle
C
          DO 200 J=1,NXBINS
            XPROFILE(J) = 0.0
200       CONTINUE
C
C  Remember that the image array is rotated & reversed:
C    i.e.,    ARRAY(I,J) --> ARRAY(NDIM+1-J,I)   in BACKPROJ.FTN
C    hence, the indices are reversed here.
C
          DO 400 I=1,NDIM
            K = NDIM+1-I
            DO 300 J=1,NDIM
              BIN = INDX(J,K)
              IF (BIN.NE.0) THEN
                XPROFILE(BIN) = XPROFILE(BIN) + ARRAY(I,J)*PIXAREA
              END IF
300         CONTINUE
400       CONTINUE
C
C  Reduce interpolated XPROFILE() to PROFILE()
C
          DO 500 I=1,NPBINS
            PROFILE(I) = 0.0
500       CONTINUE
C
          DO 700 I=1,NPBINS
            K = (I-1)*NINTRP
            DO 600 J=-NINTRP+1,NINTRP-1
              BIN = K + J
              IF (BIN.GE.0 .AND. BIN.LT.NXBINS) THEN
                FRACT = SCALFRAC * FLOAT(NINTRP-IABS(J))
                PROFILE(I) = PROFILE(I) + FRACT*XPROFILE(BIN+1)
              END IF
600         CONTINUE
700       CONTINUE
C
C  Perform inverse operation to CORATTEN.FTN
C
          DO 800 I=1,NPBINS
            OUTPROF(I,ANG) = CONST*NORM(I,ANG)*EXP(-PROFILE(I)*0.001)
800       CONTINUE
C
900     CONTINUE
C
C  Write profiles for 1 slice
C
        CALL SYSIO(PB,IOWRITE,OUTFILE,OUTPROF,31232,0)
C
1000  CONTINUE
      STOP
      END
@
