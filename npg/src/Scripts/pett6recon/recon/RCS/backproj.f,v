head	1.1;
access;
symbols;
locks; strict;
comment	@c @;


1.1
date	97.09.19.22.13.12;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  Program:      BACKPROJ.FTN
C
C  Author:       Joanne Markham (original RECOAL.FTN)
C  Last Date of Original Version:    31-Oct-82
C
C  Rewritten:    Tom O. Videen
C  Date:         12-Sep-88
C  Written For:  PETT VI Reconstruction Program
C
C  History:
C     Original RECOAL by Joanne Markham, July 2,1980
C     Modified for variable no of profiles and no of points/profile
C       Joanne Markham Sept 4 1979
C     Modified 10 Dec 1980 to rotate picture correctly;
C     Modified to use integer table for convolved profile
C        PGM. Assumes 100x100 recon. array and 24 interpolation
C        during filtered convolution;
C     Modified for seven slices per run  3/23/81 by Mark Mintun;
C     Modified to insert data type 1000 in header  8 Apr 81 GRH;
C     Modified for I*4 array 11 May 81 by GRH, per specs by JM;
C
C     31-Oct-82 was date of last version before rewriting by Tom Videen.
C     Rewritten 11-Mar-88 by TOV:
C        Incorporate specific rounding and type changes.
C        Remove all inline assembly.
C        Declare all variables.
C        Get filter file name and insert in output image file header.
C        This version was compared to original RECOAL.FTN
C        and found to be very similar.  The differences are slight
C        and random and appear to be due to differences in explicit
C        rounding versus truncation (which was used frequently in the
C        original version).  A significant difference is that this
C        version allows negative values in the final image.  These
C        normally should only appear outside of the subject or phantom.
C     Subroutines FCONVOLV and INTERPRF substituted for original CONVL
C        by TOV 20-Apr-88.
C     Modified 30-Apr-88 by TOV to read input file of REALs.
C        Interpolation of profile bins increased from 16 to 24.
C        The first record of the filter file contains a string
C        identifying it as a filter of REAL numbers.  If this string
C        is not found, the program will pause.
C     Modified 03-Jun-88 by TOV to read table of indices (INDX) from
C        a file PROFTABL generated by the program PROFTABL.FTN.
C        After this modification, the CPU time used by the program
C        was divided roughly as:
C              FCONVOLV     61 sec
C              INTERPRF     13 sec
C              Array Update 50 sec
C              Other         2 sec
C     Modified 12-Sep-88 by TOV to add to an error message.
C     Modified 25-Oct-88 by TOV to add a straight slice/cross slice
C        scaler based on the mean factor of several phantoms
C        reconstructed 25-Oct-88 with the new reconstruction stream.
C        This factor adjusts for net difference in the solid angles seen by
C        the straight and cross slices in reconstructed emission images only.
C        (Emission images are identified by filetype 520 in INFILE)
C
C  Intent:
C     Reconstruct a PETT VI image using filtered backprojection.
C     Output - 100 x 100 array of 2 byte integers.
C
C     Input File:  see PETT6SRT.FIL
C     Output File: see PETT6IMG.FIL
C
C  Logical Units:
C     1 = Input file of corrected profiles (INFILE)
C     2 = Output image file (OUTFILE)
C     3 = Reconstruction filter file (FILTFILE)
C     4 = Table of indices for updating image ARRAY (PROFTABL)
C     5 = User output (USEROUT)
C
C  Uses Subroutines:
C     FCONVOLV - convolve array with filter;
C     INTERPRF - interpolate 24 values for each value in input array;
C                (24 must equal NINTERP in PROFTABL.FTN)
C
C  Instructions for Compiling/Linking:
C     LINK7 BACKPROJ,FCONVOLV,INTERPRF
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      PROGRAM BACKPROJ
C
      INTEGER*4  IOREAD    ! SYSIO read sequential binary wait
      INTEGER*4  IOWRITE   ! SYSIO write sequential binary wait
      INTEGER*4  INFILE    ! log. unit for input file of corrected profiles
      INTEGER*4  OUTFILE   ! log. unit for output file of reconstructed image
      INTEGER*4  FILTFILE  ! log. unit for filter file
      INTEGER*4  PROFTABL  ! log. unit for input file of indices (INDX)
      INTEGER*4  USEROUT   ! log. unit for user output
      INTEGER*4  NBYTES    ! number of bytes per slice
      INTEGER*4  PB(6)     ! parameter block used in SYSIO
      INTEGER*4  DIM       ! x- and y- dimensions in reconstructed array
      INTEGER*4  SLICE     ! slice number
      INTEGER*4  NPROFPNTS ! no. of points/profile
      INTEGER*4  NPROFILES ! no. of profiles (no. of angles)
      INTEGER*4  NOUT      ! no. of points in SPROFILE
      INTEGER*4  NP        ! local index to profile number in DO loop
      INTEGER*4  INDXBUF   ! index to first profile point in INBUF
      INTEGER*4  I,J,K     ! local integers
      INTEGER*4  L,L2      ! length of a string
C
      INTEGER*2  INDX(100,100)  ! indices to SPROFILE for updating ARRAY
      INTEGER*2  IMAGE(100,100) ! image array in 2-byte integers for output
      INTEGER*2  HEADER(128)    ! file header record
      INTEGER*2  IMAGETYPE      ! 1010 = attenuation, 1020 = emission
      INTEGER*2  MAXVALUE       ! max value in reconstructed slice array
      INTEGER*2  MAXINT2        ! maximum allowed value for INTEGER*2
C
      REAL*4     ARRAY(100,100) ! image array for 1 slice
      REAL*4     INBUF(7776)    ! input buffer for profile data
      REAL*4     FILTPROF(108)  ! filtered profile (output of FCONVOLV)
      REAL*4     SPROFILE(2569) ! interpolated FILTPROF (output of INTERPRF)
      REAL*4     FILTER(128)    ! reconstruction filter values
      REAL*4     SCALER         ! scaler for all output pixels
      REAL*4     XSCALER        ! additional scaler for cross slices 2,4,6
C                               !   of emission images
      REAL*4     FACTOR         ! net scaler
C
      CHARACTER*1  BELL         ! used to ring terminal bell
      CHARACTER*80 FNAME        ! file name
      CHARACTER*80 FILTNAME     ! name of filter file
C     CHARACTER*80 FSTRING      ! string read from filter file
      CHARACTER*80 STR          ! character string for user input
      CHARACTER*20 ASORTSNAME, IMAGNAME   ! command line arguments
      CHARACTER*80 PROFNAME
      CHARACTER*12 FILTERNM
C
      EQUIVALENCE (HEADER(41), FILTERNM)
C
C  Constants
C
      DATA  INFILE,OUTFILE,FILTFILE,PROFTABL,USEROUT /1,2,3,4,6/
      DATA  IOREAD,IOWRITE /88,56/
      DATA  MAXINT2  /32767/
      DATA  SCALER /0.5/    ! to produce values comparable to orig. RECOAL
      DATA  XSCALER /1.012/ ! straight/cross slice factor for
C        emission images only (multiplied times cross slice values).
C
C  THE FOLLOWING CONSTANTS MUST BE THE SAME AS THOSE USED in PROFTABL.FTN
C
      DATA  DIM       /100/   ! dimension of image array
      DATA  NPROFILES /72/    ! no. of profiles
      DATA  NPROFPNTS /108/   ! no. of points/profile
      DATA  NOUT      /2569/  ! elements in SPROFILE array
C                               (should correspond with INTERPRF.FTN)
C
C  Initialize other parameters
C
      CALL GETARG (1, ASORTSNAME)
      CALL GETARG (2, IMAGNAME)
      CALL GETARG (3, FILTNAME)
      CALL GETARG (4, PROFNAME)

      BELL = CHAR(7)
      FACTOR = 0.       ! to avoid compiler warning
C
      WRITE(USEROUT,*) '*** BACKPROJ  Sep-97  {filtered backprojection}'
C
C  Read filter values from filter file
C
8000  FORMAT (A80)
C  Added the following open statement when porting to HP 4-29-91 KMG
      OPEN(FILTFILE,FILE=FILTNAME)
C     READ (FILTFILE,8000) FSTRING
C      IF (FSTRING.NE.'REAL FILTER') THEN
C        WRITE(USEROUT,*) '*******************************************'
C        WRITE(USEROUT,*) '*  Filter file is of wrong type.'
C        WRITE(USEROUT,*) '*  It must be a filter of REAL numbers'
C        WRITE(USEROUT,*) '*     created by FILTER6.'
C        WRITE(USEROUT,*) '*  Do NOT proceed with reconstruction.'
C        WRITE(USEROUT,*) '*  $CLEAR and CANCEL this task.'
C        WRITE(USEROUT,*) '*******************************************'
C        WRITE(USEROUT,*) BELL
C        PAUSE
C        STOP
C      END IF
      NBYTES = 512
      CALL SYSIO(PB,IOREAD,FILTFILE,FILTER,NBYTES,0)
C
C  Get filter file name and insert in header
C
      INQUIRE (FILTFILE,NAME=STR)
      L = IANYL(STR,':') + 1
C      L2= IANYL(STR,'/') - 1
      L2= IANYL(STR,' ') - 1
      IF (L2.LE.0) L2=L+11
      FNAME = STR(L:L2)
C      FNAME = 'FILTERG.REL'
      CLOSE(FILTFILE)
C
C  Reconstruct 7 slices
C
C  Added the following open statements when porting to HP 4-29-91 KMG
C
      OPEN (INFILE,FILE=ASORTSNAME)
      OPEN (OUTFILE,FILE=IMAGNAME)
      OPEN (PROFTABL,FILE=PROFNAME)
C      
      DO 1000 SLICE=1,7
C
C  Read and Write slice header altering:
C     Information record (add 'rotated to normal' bit)
C     Data type to 1010 or 1020 (image with new reconstruction)
C
        NBYTES = 256
        CALL SYSIO(PB,IOREAD,INFILE,HEADER,NBYTES,0)
        IF (SLICE.EQ.1) THEN
          IF (HEADER(38).NE.420 .AND. HEADER(38).NE.520) THEN
            WRITE(USEROUT,*) '*****************************************'
            WRITE(USEROUT,*) '* Input file is of wrong type.'
            WRITE(USEROUT,*) '* It must be a file processed by CORSCAN'
            WRITE(USEROUT,*) '* or by CORATTEN.'
            WRITE(USEROUT,*) '* Do NOT proceed with reconstruction.'
            WRITE(USEROUT,*) '* $CLEAR and CANCEL this task.'
            WRITE(USEROUT,*) '*****************************************'
            WRITE(USEROUT,*) BELL
            PAUSE
            STOP
          END IF
        END IF
        HEADER(21) = 1
        IF (HEADER(38).EQ.420) THEN
          IMAGETYPE = 1010          ! attenuation image
        ELSE
          IMAGETYPE = 1020          ! emission image
        END IF
        HEADER(38) = IMAGETYPE
        FILTNAME  = ' '
        if (FNAME .eq. '/usr/local/npg/pett6/filterg.rel') then
           FILTERNM = 'filterg'
        else if (FNAME .eq. '/usr/local/npg/pett6/filterf.rel') then
           FILTERNM = 'filterf'
        endif
        CALL SYSIO(PB,IOWRITE,OUTFILE,HEADER,NBYTES,0)
C
        DO 300 J=1,DIM
          DO 200 I=1,DIM
            ARRAY(I,J) = 0.0
200       CONTINUE
300     CONTINUE
C
C  Read corrected profiles for 1 slice
C
        NBYTES = 7776*4
        CALL SYSIO(PB,IOREAD,INFILE,INBUF,NBYTES,0)
        INDXBUF = 1
C
        REWIND PROFTABL
        DO 700 NP=1,NPROFILES
C
C  Convolve input profile with the FILTER and
C  Interpolate 23 additional values between each profile point.
C
          CALL FCONVOLV (INBUF(INDXBUF),108,FILTER,128,FILTPROF)
          CALL INTERPRF (FILTPROF,SPROFILE)
C
C  Read table of indices (INDX) for 1 profile (generated by PROFTABL.FTN)
C
          NBYTES = 100*100*2
          CALL SYSIO(PB,IOREAD,PROFTABL,INDX,NBYTES,0)
C
C  Array update for current profile
C
          MAXVALUE = 0
          DO 600 J=1,DIM
            DO 500 I=1,DIM
              K = INDX(I,J)
              IF (K.NE.0) THEN
                ARRAY(I,J) = ARRAY(I,J) + SPROFILE(K)
            	IF (ARRAY(I,J).GT.MAXVALUE) MAXVALUE=ARRAY(I,J)
              END IF
500         CONTINUE
600       CONTINUE
C       WRITE(USEROUT,*) 'NP= ',np,'  Max = ',MAXVALUE
C
C  Increment pointer to INBUF to point to next profile
C
          INDXBUF = INDXBUF + NPROFPNTS
C
700     CONTINUE
C
C  Convert REAL values (ARRAY) to I*2 values (IMAGE).
C  Rotate and reverse the array.
C  This version allows negative numbers in IMAGE.
C  SCALER = 0.5 gives values comparable to original RECOAL.
C  (SCALER = 0.2 will prevent the INTEGER*2 OVERFLOW error
C   and was used in a test version BACKPROJ.02)
C
C  XSCALER = 1.012 is used for cross slices (2,4,6) of emission
C  images to correct for the net difference in solid angles.
C
        IF (IMAGETYPE.EQ.1020 .AND. MOD(SLICE,2).EQ.0) THEN
          FACTOR = SCALER*XSCALER
        ELSE
          FACTOR = SCALER
        END IF
        MAXVALUE = 0
C
        DO 900 J=1,DIM
          K = DIM-J+1
          DO 800 I=1,DIM
            IMAGE(K,I) = NINT(ARRAY(I,J)*FACTOR)
            IF (IMAGE(K,I).GT.MAXVALUE) MAXVALUE=IMAGE(K,I)
            IF (IMAGE(K,I).GT.MAXINT2) THEN
              WRITE(USEROUT,*) 'INTEGER*2 OVERFLOW with ',
     2           ININT(ARRAY(I,J)*FACTOR)
            END IF
800       CONTINUE
900     CONTINUE
        WRITE(USEROUT,*) 'Slice = ',SLICE,'  Max = ',MAXVALUE
C
C  Write results to image file
C
        NBYTES = 100*100*2
        CALL SYSIO(PB,IOWRITE,OUTFILE,IMAGE,NBYTES,0)
C
1000  CONTINUE
C
      CLOSE(INFILE)
      CLOSE(OUTFILE)
      CLOSE(PROFTABL)
      STOP
      END
@
