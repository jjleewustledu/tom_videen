head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	2003.12.17.15.08.25;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.06.19.04.50;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.05.17.52.51;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.05.16.33.29;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.05.15.42.32;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.05.15.39.35;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.16.19.48.12;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.19.17.50.44;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.09.03.13.10.02;	author tom;	state Exp;
branches;
next	;


desc
@@


1.9
log
@*** empty log message ***
@
text
@#!/bin/csh
#	Module:	align_human_fd
#   Date:	May 2001
#   Author:	Tom Videen
#	Use:	Align all frames of an FDOPA dynamic image (30 frames on 953B)

if ($#argv != 4) then
    echo "Usage: align_human_fd pid first last reference"
    echo " e.g., align_human_fd p3000 1 30 2"
    exit 1
endif

set PID   = $1
set FRM1  = $2
set FRM2  = $3
set REFRM = $4

set FRAMES = ${FRM1}to$FRM2
set DDIR   = `pwd`
set ROOT   = ${PID}fd
set TR     = $DDIR/${PID}tr1.img
set TRG    = ${PID}tr1_2dg5.img
set MASK   = ${PID}fd_mask.img
set ORG    = $DDIR/${PID}fd1.img
set RORG   = r${PID}fd1.img

# Check existence of all images
# -----------------------------------
if (! -e $ORG) then
	echo "ERROR [align_human_fd]: Missing fdopa image $ORG"
	exit 1
else if (! -e $TR) then
	echo "ERROR [align_human_fd]: Missing transmission image $TR"
	exit 1
endif

# Check for existence of first, last and reference frames
# -------------------------------------------------------
imghdr $ORG $FRM1 > & ! align.tmp
set CHK1 = `head -1 align.tmp | cut -c1-5`
imghdr $ORG $FRM2 > & ! align.tmp
set CHK2 = `head -1 align.tmp | cut -c1-5`
imghdr $ORG $REFRM > & ! align.tmp
set CHK3 = `head -1 align.tmp | cut -c1-5`
unalias rm
rm align.tmp
if ($CHK1 == ERROR) then
	echo "ERROR [align_human_fd]: No frame $FRM1 in $ORG"
	exit 1
else if ($CHK2 == ERROR) then
	echo "ERROR [align_human_fd]: No frame $FRM2 in $ORG"
	exit 1
else if ($CHK3 == ERROR) then
	echo "ERROR [align_human_fd]: No frame $REFRM in $ORG"
	exit 1
endif

# Create alignment subdirectory
# -----------------------------
if (-e Align_pet) then
	echo "Warning [align_human_fd]: Directory $DDIR/Align_pet already exists"
else
	mkdir Align_pet
	chmod 775 Align_pet
endif
cd Align_pet
if ($status != 0) exit 1

gauss2d $TR $TRG 0.5
	if ($status != 0) exit 1
maskobj $TRG $MASK 900 1100 64 64 16
	if ($status != 0) exit 1
single_frames $ORG $ROOT i $FRM1 $FRM2
	if ($status != 0) exit 1
align_dynamic $ROOT i $MASK ${REFRM}to${FRM2} 4 5 scale_953
	if ($status != 0) exit 1
reslicedyn $ROOT .i $FRAMES $REFRM $ORG
	if ($status != 0) exit 1
merge_dynframes r$ROOT $FRAMES .i $RORG
	if ($status != 0) exit 1
remove_dynfiles $ROOT .i $FRAMES
remove_dynfiles r$ROOT .i $FRAMES
fitlog2plt ${ROOT}_t4_p1_x3.log $REFRM

# Create composite images of early and late frames
# ------------------------------------------------
set N1 = `echo $FRM1 + 7 | bc`
set N2 = `echo $FRM2 - 5 | bc`
sumimgframes $ORG orig_f${FRM1}to${N1}.img $FRM1 $N1
sumimgframes $ORG orig_f${N2}to${FRM2}.img $N2 $FRM2
sumimgframes $RORG align_f${FRM1}to${N1}.img $FRM1 $N1
sumimgframes $RORG align_f${N2}to${FRM2}.img $N2 $FRM2

echo "-----------------------------------------------------"
echo "1) Check alignment with plot_aligndyn"
echo "      ${ROOT}_t4_p1_x3.log"
echo 
echo "2) Compare early and late frames of original and aligned (vidi)"
echo "      orig_f${FRM1}to${N1}.img"
echo "      orig_f${N2}to${FRM2}.img"
echo "      align_f${FRM1}to${N1}.img"
echo "      align_f${N2}to${FRM2}.img"
echo    
echo "3) View all frames one plane (vidi)"
echo
echo "4) Move the aligned dynamic to the parent directory"
echo "      mv $RORG* .."
echo "-----------------------------------------------------"

@


1.8
log
@*** empty log message ***
@
text
@d9 1
a9 1
    echo " i.e., align_human_fd p3000 1 30 2"
d45 2
a46 1
/usr/bin/rm align.tmp
@


1.7
log
@*** empty log message ***
@
text
@d3 1
a3 1
#   Date:	July 2001
d21 3
a23 1
set BRAIN  = ${PID}fd_mask.img
a25 3
set SUM    = ${ROOT}1_sum20.img
set SUMG   = ${ROOT}1_sum20_g3.img
set BLUR   = 5
d27 2
a28 2
# Check for existence of first, last and reference frames
# -------------------------------------------------------
d32 3
d36 3
d68 1
a68 3
# Create alignment mask of brain
# -----------------------------
sumimgframes ../${ROOT}1.img $SUM 1 20
d70 1
a70 1
gauss $SUM $SUMG 0.3
a71 24
maskpct $SUMG tmp.img 30
	if ($status != 0) exit 1
maskimg $SUMG tmp.img $BRAIN 1
	if ($status != 0) exit 1
rm ${SUM}*
rm ${SUMG}*
rm tmp.img
echo "-----------------------------------------------------"
echo "View $BRAIN with vidi and remove the nose and any other"
echo "structures or slices which might skew the alignment."
echo
echo "Save the edited image and then press return to continue."
set data = `line`

# Handle format conversion if mask was edited
if (-e $BRAIN:r.ifh) then
	if2analyze $BRAIN:r
	if ($status != 0) exit 1
	analyze2img $BRAIN:r $BRAIN:r.img
	if ($status != 0) exit 1
	rm $BRAIN:r.ifh
	rm $BRAIN:r.hdr
endif

d74 1
a74 1
align_dynamic $ROOT i $BRAIN ${REFRM}to${FRM2} $BLUR scale_953
d82 1
a82 1
#fitlog2plt ${ROOT}_m20_b${BLUR}_p1_x3.log $REFRM
a93 1
echo "cd `pwd` and then:"
d95 1
a95 1
echo "      ${ROOT}_alignmsk_b${BLUR}_p1_x3.log"
@


1.6
log
@*** empty log message ***
@
text
@a20 2
set TR     = $DDIR/${PID}tr1.img
set TRG    = ${PID}tr1_2dg5.img
d28 2
a29 2
# Check existence of all images
# -----------------------------------
a32 3
else if (! -e $TR) then
	echo "ERROR [align_human_fd]: Missing transmission image $TR"
	exit 1
a33 3

# Check for existence of first, last and reference frames
# -------------------------------------------------------
d117 1
a117 1
echo "      ${ROOT}_alignmsk_b${BLUR}_p1_x3.log
@


1.5
log
@Revised Jul 5, 2001 to use new align_dynamic
@
text
@a27 1
set CUTOFF = 0.3
d71 2
d75 1
a75 1
gauss $SUM $SUMG $CUTOFF
d91 10
d103 1
a103 4
foreach i ($ROOT*.i)
	gauss $i $CUTOFF
	end
align_dynamic $ROOT i $BRAIN ${REFRM}to${FRM2} $CUTOFF $BLUR scale_953
d125 1
a125 1
echo "      ${ROOT}_m20_b${BLUR}_p1_x3.log
@


1.4
log
@Revised and tested Jul 5, 2001
@
text
@d2 4
a5 16
# Program:	align_dynamic
# Author:	Tom Videen
# Date:		Jul 2001
# Usage:	Align all frames in a dynamic image.
# 	Requires:
# 		1) dynamic image separated into single-frame images (Analyze format)
# 		2) a reference image (masked, filtered image defining brain)
# 		3) a rescaling AIR file and its inverse 
#	Creates:
#		1) combined air files aligning each image to the first
# 		2) a null AIR file (for computing net movement)
#		3) log file showing net movement between each scan and first (using pixels in reference image)
#		4) log file showing final fit of cost function
#	Removes temporary files:
#		1) resampled images
#		2) pair-wise air files
d7 4
a10 7
set BINPATH = /usr/local/npg/bin
set NPGPATH = /usr/local/npg/air
 
if ($#argv != 7) then
	echo "Usage: align_dynamic root ext ref frms cutoff blur resample_air"
	echo " i.e., align_dynamic p3000fd img p3000fd_mask.img 3to44 0.3 5 scale_953"
	exit 1
d13 4
a16 8
set ROOT   = $1
set EXT   = .$2
set BRAIN  = $3
set FIRST  = `echo $4 | nawk '{FS="to";print $1}'`
set LAST   = `echo $4 | nawk '{FS="to";print $2}'`
set CUTOFF = $5
set BLUR   = "$6 $6 $6"
set A_AIR  = $7.air
d18 12
a29 3
set MSKPCT = 20
set filterid = `echo "scale=0;${CUTOFF} * 10" | bc | awk -F. '{print $1}'`
set GF = _g${filterid}
d31 9
a39 16
set B_AIR  = i$A_AIR
set ANAM   = a${ROOT}
set XNAM   = x${ROOT}
set SECOND = `echo "$FIRST + 1; quit" | bc`
set TMP    = ${ROOT}temp.img
set TLOG   = ${ROOT}.temp
set MASK   = alignmsk
set XMASK  = xalignmsk
set ALOG   = ${ROOT}_m${MSKPCT}_b${6}_p1_x3.log
set CLOG   = ${ROOT}_m${MSKPCT}_b${6}_p1_x3.fit
echo `date` >! $ALOG
echo `date` >! $CLOG
echo $BRAIN >> $CLOG
set t1 = `${BINPATH}/t`
unalias rm
unalias cp
d41 18
a58 9
# Check existence of AIR files
# ----------------------------
if (! -e $A_AIR) then
	if (! -e ${NPGPATH}/$A_AIR) then
		echo "ERROR [align_dynamic]: Missing resampling AIR file: $A_AIR"
		exit 1
	else
		cp ${NPGPATH}/$A_AIR $A_AIR
	endif
d60 8
a67 7
if (! -e $B_AIR) then
	if (! -e ${NPGPATH}/$B_AIR) then
		echo "ERROR [align_dynamic]: Missing inverted AIR file: $B_AIR"
		exit 1
	else
		cp ${NPGPATH}/$B_AIR $B_AIR
	endif
d69 2
a70 13
 
# Check existence of all single-frame files used for alignment
# ------------------------------------------------------------
set i = $FIRST
while ($i <= $LAST)
	set AIMG = $ANAM$i
	if (! -e $AIMG.img) then
		echo "ERROR [align_dynamic]: Missing image $AIMG.img"
		echo "      Use single_frames to create single-frame images for alignment."
		exit 1
	endif
	@@ i++
end
d72 17
a88 10
# Create null air file by aligning first frame to itself
# ------------------------------------------------------
img2analyze $BRAIN $MASK
set i = $FIRST
set IMG  = $ROOT$i$EXT
set AIMG = $ANAM$i
set NULLAIR  = ${ROOT}_null.air
${BINPATH}/setanamin $AIMG 0
echo "-- alignlinear $AIMG $AIMG $NULLAIR -m 6 -t1 50 -p1 1 -p2 0 -e1 $MASK"
${BINPATH}/alignlinear $AIMG $AIMG $NULLAIR -m 6 -t1 50 -p1 1 -p2 0 -e1 $MASK
d90 14
a103 18
# Adjust pixel size in standard air files (if necessary)
# ------------------------------------------------------
set NVOX = `scanheader $AIMG | grep x_size | cut -f2 -d= | cut -f1 -de`
set SVOX = `scanair $A_AIR | grep voxel | head -1 | cut -f3 -d' ' | cut -f1 -de`
set AVOX = `scanair $A_AIR | grep voxel | tail -1 | cut -f3 -d' ' | cut -f1 -de`
set BVOX = `scanair $B_AIR | grep voxel | head -1 | cut -f3 -d' ' | cut -f1 -de`
if ($NVOX != $AVOX) then
	set DELTA = `echo "1000 * $NVOX / $AVOX" | bc`
	if ($DELTA <= 1001 && $DELTA >= 999) then
		${BINPATH}/newairpix $A_AIR:r $SVOX $NVOX 
		${BINPATH}/newairpix $B_AIR:r $NVOX $SVOX
	else
		echo "ERROR [align_dynamic]: Different pixel sizes in $AIMG and $A_AIR"
		echo "   $NVOX != $AVOX"
		echo "   Use or create different air files for $A_AIR and $B_AIR"
		exit 1
	endif
endif
d105 8
a112 23
# Align all adjacent pairs 
# ------------------------
set i = $FIRST
while ($i < $LAST)
	set j = `echo "$i + 1" | bc`
	set IMG  = $ROOT$i$EXT
	set JMG  = $ROOT$j$EXT
	set AIMG = $ANAM$i
	set AJMG = $ANAM$j
	set XIMG = $XNAM$i
	if (! -e $XIMG.img) then
		${BINPATH}/setanamin $AIMG -1
		${BINPATH}/reslice $A_AIR $XIMG -a $AIMG -n 1 -k -o
	endif
	set XJMG = $XNAM$j
	if (! -e $XJMG.img) then
		${BINPATH}/setanamin $AJMG -1
		${BINPATH}/reslice $A_AIR $XJMG -a $AJMG -n 1 -k -o
	endif
	set AIR  = ${ROOT}_${i}vs${j}.air
	set NETAIR = ${ROOT}_${FIRST}vs${j}.air
	${BINPATH}/setanamin $XIMG 0 
	${BINPATH}/setanamin $XJMG 0
d114 16
a129 7
# Mask is based on sum of each pair of adjacent, filtered images; resampled
# -------------------------------------------------------------------------
	${BINPATH}/imgsum $ROOT$i$GF$EXT $ROOT$j$GF$EXT $TMP
	${BINPATH}/maskpct $TMP $TMP $MSKPCT
	${BINPATH}/img2analyze $TMP $MASK
	${BINPATH}/setanamin $MASK -1
	${BINPATH}/reslice $A_AIR $XMASK -a $MASK -n 1 -k -o
a130 30
	set PRM = "-m 6 -t1 50 -p1 1 -t2 50 -p2 1 -e1 $XMASK -e2 $XMASK -b1 $BLUR -b2 $BLUR -x 3 -v"
	echo "-- alignlinear $XIMG $XJMG $AIR $PRM"
	${BINPATH}/alignlinear $XIMG $XJMG $AIR $PRM >! $TLOG
	tail -1 $TLOG >> $CLOG
	rm $TLOG
	if ($i > $FIRST) then
		echo -- combine_air $NETAIR y $AIR1 $B_AIR $AIR $A_AIR
		${BINPATH}/combine_air $NETAIR y $AIR1 $B_AIR $AIR $A_AIR
	else
		echo -- combine_air $NETAIR y $B_AIR $AIR $A_AIR
		${BINPATH}/combine_air $NETAIR y $B_AIR $AIR $A_AIR
	endif
	if ($i > $SECOND) then
		rm $AIR2
	endif
	set AIR2 = $AIR
	set AIR1 = $NETAIR
	${BINPATH}/airdif $NETAIR $NULLAIR $BRAIN | grep Mean >> $ALOG
	rm $XIMG.img
	rm $XIMG.hdr
	@@ i++
end
rm $XJMG.img
rm $XJMG.hdr
rm $AIR2
if (-e $TMP) rm $TMP
set t2 = `${BINPATH}/t`
echo "[align_dynamic] Complete at" `date` "   Elapsed time: " `echo "$t2 - $t1" | bc` " sec"

more $ALOG
@


1.3
log
@add parameters for first, last and reference frame numbers
check that these frames exist
created summed frames of the original and aligned images
for the first 8 frames and the last 6 frames and prompt user to compare these
used subdirectory Align_pet
@
text
@d2 16
a17 4
#	Module:	align_human_fd
#   Date:	May 2001
#   Author:	Tom Videen
#	Use:	Align all frames of an FDOPA dynamic image (30 frames on 953B)
d19 7
a25 4
if ($#argv != 4) then
    echo "Usage: align_human_fd pid first last reference"
    echo " i.e., align_human_fd p3000 1 30 2"
    exit 1
d28 8
a35 4
set PID   = $1
set FRM1  = $2
set FRM2  = $3
set REFRM = $4
d37 3
a39 8
set FRAMES = ${FRM1}to$FRM2
set DDIR   = `pwd`
set ROOT   = ${PID}fd
set TR     = $DDIR/${PID}tr1.img
set TRG    = ${PID}tr1_2dg5.img
set MASK   = ${PID}fd_mask.img
set ORG    = $DDIR/${PID}fd1.img
set RORG   = r${PID}fd1.img
d41 16
a56 9
# Check existence of all images
# -----------------------------------
if (! -e $ORG) then
	echo "ERROR [align_human_fd]: Missing fdopa image $ORG"
	exit 1
else if (! -e $TR) then
	echo "ERROR [align_human_fd]: Missing transmission image $TR"
	exit 1
endif
d58 9
a66 18
# Check for existence of first, last and reference frames
# -------------------------------------------------------
imghdr $ORG $FRM1 > & ! align.tmp
set CHK1 = `head -1 align.tmp | cut -c1-5`
imghdr $ORG $FRM2 > & ! align.tmp
set CHK2 = `head -1 align.tmp | cut -c1-5`
imghdr $ORG $REFRM > & ! align.tmp
set CHK3 = `head -1 align.tmp | cut -c1-5`
/usr/bin/rm align.tmp
if ($CHK1 == ERROR) then
	echo "ERROR [align_human_fd]: No frame $FRM1 in $ORG"
	exit 1
else if ($CHK2 == ERROR) then
	echo "ERROR [align_human_fd]: No frame $FRM2 in $ORG"
	exit 1
else if ($CHK3 == ERROR) then
	echo "ERROR [align_human_fd]: No frame $REFRM in $ORG"
	exit 1
d68 21
d90 28
a117 7
# Create alignment subdirectory
# -----------------------------
if (-e Align_pet) then
	echo "Warning [align_human_fd]: Directory $DDIR/Align_pet already exists"
else
	mkdir Align_pet
	chmod 775 Align_pet
a118 2
cd Align_pet
if ($status != 0) exit 1
d120 23
a142 15
gauss2d $TR $TRG 0.5
	if ($status != 0) exit 1
maskobj $TRG $MASK 900 1100 64 64 16
	if ($status != 0) exit 1
single_frames $ORG $ROOT i $FRM1 $FRM2
	if ($status != 0) exit 1
align_dynamic $ROOT i $MASK ${REFRM}to${FRM2} 4 5 scale_953
	if ($status != 0) exit 1
reslicedyn $ROOT .i $FRAMES $REFRM $ORG
	if ($status != 0) exit 1
merge_dynframes r$ROOT $FRAMES .i $RORG
	if ($status != 0) exit 1
remove_dynfiles $ROOT .i $FRAMES
remove_dynfiles r$ROOT .i $FRAMES
fitlog2plt ${ROOT}_t4_p1_x3.log $REFRM
d144 7
a150 8
# Create composite images of early and late frames
# ------------------------------------------------
set N1 = `echo $FRM1 + 7 | bc`
set N2 = `echo $FRM2 - 5 | bc`
sumimgframes $ORG orig_f${FRM1}to${N1}.img $FRM1 $N1
sumimgframes $ORG orig_f${N2}to${FRM2}.img $N2 $FRM2
sumimgframes $RORG align_f${FRM1}to${N1}.img $FRM1 $N1
sumimgframes $RORG align_f${N2}to${FRM2}.img $N2 $FRM2
d152 28
a179 15
echo "-----------------------------------------------------"
echo "1) Check alignment with plot_aligndyn"
echo "      ${ROOT}_t4_p1_x3.log"
echo 
echo "2) Compare early and late frames of original and aligned (vidi)"
echo "      orig_f${FRM1}to${N1}.img"
echo "      orig_f${N2}to${FRM2}.img"
echo "      align_f${FRM1}to${N1}.img"
echo "      align_f${N2}to${FRM2}.img"
echo    
echo "3) View all frames one plane (vidi)"
echo
echo "4) Move the aligned dynamic to the parent directory"
echo "      mv $RORG* .."
echo "-----------------------------------------------------"
d181 1
@


1.2
log
@switch to align_dynamic
@
text
@d3 1
a3 1
#   Date:	Jun 2000
d7 4
a10 7
if ($#argv < 1 || $#argv > 3) then
    echo "Usage: align_human_fd pid [first_frm] [nframes]"
    echo " i.e., align_human_fd p3000"
    echo "  or   align_human_fd p3000 2"
    echo "  or   align_human_fd p3000 2 25"
    echo "  (default frames are 1 30)"
    exit(1)
d13 6
a18 1
set PID    = $1
d20 2
a21 1
set FD     = ${PID}fd
d24 2
a25 9
set FIRSTFRM = 1
set REFRM  = 2
set NFRMS  = 30
set SLICES = 1to31
set THRESH = "900 1100"
set PT     = "64 64 16"
set FDI    = ${DDIR}/${PID}fd1.img
set RFDI   = r${PID}fd1.img
set TR     = ${DDIR}/${PID}tr1.img
d27 9
a35 3
if ($#argv >= 2) set FIRSTFRM = $2
if ($#argv == 3) set NFRMS = $3
set FRAMES = ${FIRSTFRM}to$NFRMS
d37 18
a54 3
if (! -e $FDI) then
	echo "ERROR [align_human_fd]: Missing fdopa image $FDI"
	exit(1)
d56 5
a60 6
if (! -e $TR) then
	echo "ERROR [align_human_fd]: Missing transmission image $TR"
	exit(1)
endif
if (-e Align) then
	echo "Warning [align_human_fd]: Directory $DDIR/Align already exists"
d62 2
a63 2
	mkdir Align
	chmod 775 Align
d65 2
a66 1
cd Align
d69 14
a82 7
maskobj $TRG $MASK $THRESH $PT
single_frames $FDI $FD i $FIRSTFRM $NFRMS
align_dynamic $FD i $MASK ${REFRM}to${NFRMS} 4 5 scale_953
reslicedyn $FD .i $FRAMES $REFRM $FDI
merge_dynframes r$FD $FRAMES .i $RFDI
remove_dynfiles $FD .i $FRAMES
fitlog2plt ${FD}_t4_p1_x3.log $REFRM
d84 9
d94 13
a106 6
echo "View all frames one plane with vidi."
echo "Check alignment with:"
echo "     plot_aligndyn"
echo "using:"
echo "     Alignment log filename: ${FD}_t4_p1_x3.log"
echo "     First (reference) frame: $REFRM"
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
#   Date:	May-99
d12 1
d21 1
d31 1
d33 1
a33 2
set FRAMES = 1to$NFRMS
if ($#argv >= 2) set FRAMES = ${2}to$NFRMS
d53 2
a54 2
singlefrm_gauss $FDI $FRAMES $SLICES 0.3 fd i
aligndyn $FD i $MASK ${REFRM}to${NFRMS} 0.3 3 scale_953 iscale_953
d57 2
a58 2
remove_dynfiles $FD _g3.i $FRAMES
fitlog2plt ${FD}_th3_g3.log $REFRM
d65 1
a65 1
echo "     Alignment log filename: ${FD}_th3_g3.log"
@
