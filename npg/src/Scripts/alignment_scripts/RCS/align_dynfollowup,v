head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2001.07.11.19.57.36;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/bin/csh
#	Module:	align_dynfollowup
#   Date:	July 2001
#   Author:	Tom Videen
#	Use:	Align a followup dynamic PET image (fdopa, nmb)

set USAGE = "Usage: align_dynfollowup pid origid tracer firstfrm lastfrm reffrm -b 6 -t 50"

if ($#argv < 7) then
	echo "Usage: align_dynfollowup pid origid tracer firstfrm lastfrm reffrm sumfrm [-b 6] [-t 50]"
	echo " i.e., align_dynfollowup p3000 p2900 fd 1 30 2 11"
	echo "   or, align_dynfollowup p3000 p2900 fd 1 30 2 11 -b 8 -t 100"
	exit 1
endif

set PID    = $1
set OID    = $2
set CMPD   = $3
set FRM1   = $4
set FRM2   = $5
set REFRM  = $6
set SUMFRM = $7

set BLUR	= 6
set THR	    = 50

set FRAMES	= ${FRM1}to$FRM2
set SFRAMES = f${FRM1}to$SUMFRM
set AIR     = r${PID}fd1_to_r${OID}fd1
set LOGFILE = $AIR.log

set PET1 = r${OID}${CMPD}sum_$SFRAMES
set PET2 = r${PID}${CMPD}sum_$SFRAMES

if (! -e $PET1.img) then
	echo "ERROR [align_dynfollowup]: Missing image $PET1.img"
	exit 1
else if (! -e $PET2.img) then
	echo "ERROR [align_dynfollowup]: Missing image $PET2.img"
	exit 1
endif

set i = 1
while ($i <= 7)
	shift argv
	@@ i++
end
top:
	if ($#argv > 0) then
		switch ("$argv[1]")
		case -b:
			shift argv
			if ($#argv > 0) then
				set BLUR = $argv[1]
				shift argv
			else
				echo "ERROR [align_dynfollowup]: missing number following -b"
				exit 1
			endif
			goto top
		case -t:
			shift argv
			if ($#argv > 0) then
				set THR = $argv[1]
				shift argv
			else
				echo "ERROR [align_dynfollowup]:
				echo $USAGE
				exit 1
			endif
			goto top
		case -?*:
			echo "ERROR [align_dynfollowup]: illegal parameter $argv[1]"
			echo $USAGE
			exit 1
		default:
			echo "ERROR [align_dynfollowup]: extra parameter $argv[1]"
			echo $USAGE
			exit 1
		endsw
	endif
endif

echo $BLUR $THR
set BLUR3D = "$BLUR $BLUR $BLUR"

img2analyze $PET1.img a$PET1
img2analyze $PET2.img a$PET2
setanamin   a$PET1 0
setanamin   a$PET2 0
set PRM = "-m 6 -p1 1 -p2 1 -t1 $THR -t2 $THR -b1 $BLUR3D -b2 $BLUR3D -x 3 -v"
echo alignlinear a$PET1 a$PET2 $AIR.air $PRM >! $LOGFILE
alignlinear a$PET1 a$PET2 $AIR.air $PRM >! log
tail -8 log 
tail -8 log >> $LOGFILE
imgreslice a$PET2 $AIR

echo "-----------------------------------------------------"
echo "Compare with vidi:"
echo "	  $PET1.img"
echo "	  ra$PET2.img"
echo "-----------------------------------------------------"

@
