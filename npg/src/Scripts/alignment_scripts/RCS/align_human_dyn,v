head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2001.07.06.18.58.04;	author tom;	state Exp;
branches;
next	;


desc
@July 6 tested version
@


1.1
log
@Initial revision
@
text
@#!/bin/csh
#	Module:	align_human_dyn
#   Date:	July 2001
#   Author:	Tom Videen
#	Use:	Align all frames of a dynamic image (fdopa, nmb)

set USAGE = "Usage: align_human_dyn pid tracer firstfrm lastfrm reffrm -b 8 -t 40"

if ($#argv < 5) then
	echo "Usage: align_human_dyn pid tracer firstfrm lastfrm reffrm [-b 8] [-t 40]"
	echo " i.e., align_human_dyn p3000 fd 1 30 2"
	echo "   or, align_human_dyn p3000 fd 1 30 2 -b 5 -t 100"
	exit 1
endif

set PID   = $1
set CMPD  = $2
set FRM1  = $3
set FRM2  = $4
set REFRM = $5

set FRAMES	= ${FRM1}to$FRM2
set DDIR	= `pwd`
set ROOT	= $PID$CMPD
set BRAIN	= ${ROOT}_mask.img
set ORG		= $DDIR/${ROOT}1.img
set RORG	= r${ROOT}1.img
set SUM		= ${ROOT}1_sum20.img
set SUMG	= ${ROOT}1_sum20_g3.img
set THRESH	= 40
set BLUR	= 8
shift argv
shift argv
shift argv
shift argv
shift argv
top:
	if ($#argv > 0) then
		switch ("$argv[1]")
		case -b:
			shift argv
			if ($#argv > 0) then
				set BLUR = $argv[1]
				shift argv
			else
				echo "ERROR [align_human_dyn]: missing number following -b"
				exit 1
			endif
			goto top
		case -t:
			shift argv
			if ($#argv > 0) then
				set THRESH = $argv[1]
				shift argv
			else
				echo "ERROR [align_human_dyn]:
				echo $USAGE
				exit 1
			endif
			goto top
		case -?*:
			echo "ERROR [align_human_dyn]: illegal parameter $argv[1]"
			echo $USAGE
			exit 1
		default:
			echo "ERROR [align_human_dyn]: extra parameter $argv[1]"
			echo $USAGE
			exit 1
		endsw
	endif
endif

echo $BLUR $THRESH

# Check for existence of first, last and reference frames
# -------------------------------------------------------
if (! -e $ORG) then
	echo "ERROR [align_human_dyn]: Missing image $ORG"
	exit 1
endif
imghdr $ORG $FRM1 > & ! align.tmp
set CHK1 = `head -1 align.tmp | cut -c1-5`
imghdr $ORG $FRM2 > & ! align.tmp
set CHK2 = `head -1 align.tmp | cut -c1-5`
imghdr $ORG $REFRM > & ! align.tmp
set CHK3 = `head -1 align.tmp | cut -c1-5`
/usr/bin/rm align.tmp
if ($CHK1 == ERROR) then
	echo "ERROR [align_human_dyn]: No frame $FRM1 in $ORG"
	exit 1
else if ($CHK2 == ERROR) then
	echo "ERROR [align_human_dyn]: No frame $FRM2 in $ORG"
	exit 1
else if ($CHK3 == ERROR) then
	echo "ERROR [align_human_dyn]: No frame $REFRM in $ORG"
	exit 1
endif

# Create alignment subdirectory
# -----------------------------
if (-e Align_pet) then
	echo "Warning [align_human_dyn]: Directory $DDIR/Align_pet already exists"
else
	mkdir Align_pet
	chmod 775 Align_pet
endif
cd Align_pet
if ($status != 0) exit 1

# Create alignment mask of brain
# -----------------------------
sumimgframes ../${ROOT}1.img $SUM 1 20
	if ($status != 0) exit 1
gauss $SUM $SUMG 0.3
	if ($status != 0) exit 1
maskpct $SUMG tmp.img 30
	if ($status != 0) exit 1
maskimg $SUMG tmp.img $BRAIN 1
	if ($status != 0) exit 1
maskslc $BRAIN $BRAIN 1to2
maskslc $BRAIN $BRAIN 30to31
rm ${SUM}*
rm ${SUMG}*
rm tmp.img
echo "-----------------------------------------------------"
echo "View $BRAIN with vidi and remove the nose and any other"
echo "structures or slices which might skew the alignment."
echo
echo "Save the edited image and then press return to continue."
set data = `line`

# Handle format conversion if mask was edited
if (-e $BRAIN:r.ifh) then
	if2analyze $BRAIN:r
	if ($status != 0) exit 1
	analyze2img $BRAIN:r $BRAIN:r.img
	if ($status != 0) exit 1
	rm $BRAIN:r.ifh
	rm $BRAIN:r.hdr
endif

single_frames $ORG $ROOT i $FRM1 $FRM2
	if ($status != 0) exit 1
align_dynamic $ROOT i $BRAIN ${REFRM}to${FRM2} $THRESH $BLUR scale_953
	if ($status != 0) exit 1
reslicedyn $ROOT .i $FRAMES $REFRM $ORG
	if ($status != 0) exit 1
merge_dynframes r$ROOT $FRAMES .i $RORG
	if ($status != 0) exit 1
remove_dynfiles $ROOT .i $FRAMES
remove_dynfiles r$ROOT .i $FRAMES
#fitlog2plt ${ROOT}_m20_b${BLUR}_p1_x3.log $REFRM

# Create composite images of early and late frames
# ------------------------------------------------
set N1 = `echo $FRM1 + 7 | bc`
set N2 = `echo $FRM2 - 5 | bc`
sumimgframes $ORG orig_f${FRM1}to${N1}.img $FRM1 $N1
sumimgframes $ORG orig_f${N2}to${FRM2}.img $N2 $FRM2
sumimgframes $RORG align_f${FRM1}to${N1}.img $FRM1 $N1
sumimgframes $RORG align_f${N2}to${FRM2}.img $N2 $FRM2

echo "-----------------------------------------------------"
echo "1) cd `pwd`"
echo 
echo "2) plot_aligndyn ${ROOT}_alignmsk_b${BLUR}_t${THRESH}_p1_x3.log"
echo 
echo "3) Compare early and late frames of original and aligned (vidi)"
echo "	  orig_f${FRM1}to${N1}.img"
echo "	  orig_f${N2}to${FRM2}.img"
echo "	  align_f${FRM1}to${N1}.img"
echo "	  align_f${N2}to${FRM2}.img"
echo	
echo "4) View all frames one plane (vidi)"
echo
echo "5) Move the aligned dynamic to the parent directory"
echo "	  mv $RORG* .."
echo "-----------------------------------------------------"

@
