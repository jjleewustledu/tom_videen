head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2006.08.10.19.20.13;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.10.19.09.52;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.10.19.09.31;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@#!/bin/csh
#	Module:	align_latefdg
#   Date:	Aug 2006
#   Author:	Tom Videen
#	Use:	Align all frames of a late dynamic fdg image 

set USAGE = "Usage: align_latefdg pid tracer firstfrm lastfrm reffrm -b 8 -t 40 -s"

if ($#argv < 4) then
	echo "Usage: align_latefdg pid msk firstfrm lastfrm [-b 8] [-t 40] [-s] [-m]"
	echo " i.e., align_latefdg ap6000 tr1 1 30"
	echo "   or, align_latefdg ap6000 tr1 1 30 -b 5 -t 100"
	echo "b = blur in AIR"
	echo "t = threshold in AIR"
	echo "s = skip final merge"
	echo "m = use existing mask"
	exit 1
endif

set PID   = $1
set TR    = $2
set FRM1  = $3
set FRM2  = $4

set ROOT  = ${PID}f
set FDG   = ${PID}fdg1
set MSK   = ${PID}msk
set AMSK  = a${PID}msk
set TR1   = $PID$TR.v
set TR1f  = $PID${TR}_2dg5.v
set LAT   = ${PID}lat
set FRMS  = ${FRM1}to$FRM2
set THRSH = 40
set BLUR  = 8
set MERGE = 1
set MASK  = 1
shift argv
shift argv
shift argv
shift argv
top:
	if ($#argv > 0) then
		switch ("$argv[1]")
		case -b:
			shift argv
			if ($#argv > 0) then
				set BLUR = $argv[1]
				shift argv
			else
				echo "ERROR [align_latefdg]: missing number following -b"
				exit 1
			endif
			goto top
		case -t:
			shift argv
			if ($#argv > 0) then
				set THRSH = $argv[1]
				shift argv
			else
				echo "ERROR [align_latefdg]:
				echo $USAGE
				exit 1
			endif
			goto top
		case -s:
			shift argv
			set MERGE = 0
			goto top
		case -m:
			shift argv
			set MASK = 0
			goto top
		case -?*:
			echo "ERROR [align_latefdg]: illegal parameter $argv[1]"
			echo $USAGE
			exit 1
		default:
			echo "ERROR [align_latefdg]: extra parameter $argv[1]"
			echo $USAGE
			exit 1
		endsw
	endif
endif

echo $BLUR $THRSH
set BLUR3D = "$BLUR $BLUR $BLUR"

# Check for existence of first, last and reference frames
# -------------------------------------------------------
if (! -e $FDG.v) then
	echo "ERROR [align_latefdg]: missing image $FDG.v"
	exit 1
endif
imghdr $FDG.v $FRM1 > & ! align_$PID.tmp
set CHK1 = `head -1 align_$PID.tmp | cut -c1-5`
imghdr $FDG.v $FRM2 > & ! align_$PID.tmp
set CHK2 = `head -1 align_$PID.tmp | cut -c1-5`
unalias rm
rm align_$PID.tmp
if ($CHK1 == ERROR) then
	echo "ERROR [align_latefdg]: no frame $FRM1 in $FDG.v"
	exit 1
else if ($CHK2 == ERROR) then
	echo "ERROR [align_latefdg]: no frame $FRM2 in $FDG.v"
	exit 1
endif

# Create alignment mask of brain (skip top slices in case headholder is in FOV)
# ------------------------------
if ($MASK == 0) then
	if (! -e $MSK.v) then
		echo "ERROR [align_latefdg]: missing image $MSK.v"
		exit 1
	endif
else
	gauss2d $TR1 $TR1f 0.5
	prompt1:
	echo "============================================================"
	echo "Use vidi to segment and edit the filtered transmission"
	echo "   Get Files->Image 1:   $TR1f"
	echo "   Segment->Image 1"
	echo "      Min = min; Max = 800; Inside; 2D"
	echo "      Fill using Fill Value = 0"
	echo "   Save Image->Image 1:  $MSK.img"
	echo "   Press RETURN to continue (CTRL-C to quit)"
	set data = `line`
	if (! -e $MSK.ifh) then
    	echo "ERROR: Save as $MSK.img"
    	goto prompt1
	endif
	if2img $MSK $MSK.v
endif
img2analyze $MSK.v $AMSK

set REF     = a$ROOT$FRM1
set TLOG    = $ROOT.tmp
set NULLAIR = ${ROOT}_null.air
set ALOG    = ${FDG}_align.log
set CLOG    = ${FDG}_align.fit
set PRM = "-m 6 -t1 $THRSH -p1 1 -t2 $THRSH -p2 1 -e1 $AMSK -e2 $AMSK -b1 $BLUR3D -b2 $BLUR3D -x 3 -v"

echo `date` >! $ALOG
echo `date` >! $CLOG
echo $PRM >> $CLOG

single_frames $FDG.v $ROOT i $FRM1 $FRM2
setanamin $REF 0
alignlinear $REF $REF $NULLAIR -m 6 -p1 1 -p2 0 -t1 $THRSH -e1 $AMSK 

set i = $FRM1
while ($i < $FRM2)
	@@ i++
	set IMG = a$ROOT$i
	set AIR = $ROOT${i}to$FRM1
	setanamin $IMG 0
    alignlinear $REF $IMG $AIR.air $PRM >! $TLOG
    tail -1 $TLOG >> $CLOG
    airdif $AIR.air $NULLAIR $MSK.v | grep Mean >> $ALOG
    tail -1 $TLOG
    tail -1 $ALOG
	rm $TLOG
	imgreslice $IMG $AIR
	analyze2img r$IMG r$ROOT$i.v
end
analyze2img $REF r$ROOT$FRM1.v

if (MERGE != 0) then
	merge_dynframes r$ROOT $FRMS .v r$FDG.v
	set i = $FRM1
	while ($i <= $FRM2)
		rm r${ROOT}$i.v
		@@ i++
	end
endif
rm $ROOT*.i a$ROOT* ra$ROOT* $AMSK* *.rec $LAT.???
echo "plot_aligndyn $ALOG"
echo "----------------------------------------"
@


1.2
log
@*** empty log message ***
@
text
@d27 1
a27 1
set MSK   = ${PID}msk.v
d111 2
a112 2
	if (! -e $MSK) then
		echo "ERROR [align_latefdg]: missing image $MSK"
d120 1
a120 1
	echo "   Get Files->Image 1:   $TR1f.v"
a126 1

d131 1
a131 7

	if2analyze $MSK
	analyze2img $MSK $MSK.v
	echo
	echo "Check $MSK with vidi (continue or cancel)"
	echo "-----------------------------------------------"
	set data = `line`
d133 1
a133 1
img2analyze $MSK $AMSK
d158 1
a158 1
    airdif $AIR.air $NULLAIR $MSK | grep Mean >> $ALOG
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
#   Date:	Jul 2006
a114 1
	img2analyze $MSK $AMSK
a116 8
	maskslc $TR1f $TR1f 1to2
	maskslc $TR1f $TR1f 46to47
	sumlateral $TR1f $LAT.v 700 1300
	set max = `imghdr $LAT.v | grep Max | cut -f2 -d= | cut -f1 -d.`
	maskpct $LAT.v ${PID}_tmp.v 40
	maskimg $LAT.v ${PID}_tmp.v $LAT.v 1
	rm ${PID}_tmp.v

d119 4
a122 4
	echo "Use vidi to edit the lateral projection of the mask"
	echo "   Get Files->Image 1:   $LAT.v"
	echo "   Edit->Image 1"
	echo "      Outline nose and tissue below base of cranium"
d124 1
a124 1
	echo "   Save Image->Image 1:  $LAT.img"
d128 2
a129 2
	if (! -e $LAT.ifh) then
    	echo "ERROR: Save as $LAT.img"
d133 2
a134 7
	if2analyze $LAT
	analyze2img $LAT $LAT.v
	masklateral $TR1f $LAT.v $MSK 10
	maskimg $MSK $MSK $MSK 700
	maskslc $MSK $MSK 1to2
	maskslc $MSK $MSK 46to47
	img2analyze $MSK $AMSK
d140 1
@
