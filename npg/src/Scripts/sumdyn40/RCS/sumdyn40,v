head	1.13;
access;
symbols;
locks; strict;
comment	@# @;


1.13
date	2009.04.16.13.51.18;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.25.14.57.56;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2004.05.20.13.47.54;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.03.20.29.24;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.02.15.33.43;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.08.20.42.09;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.01.19.25.42;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.05.15.49.07;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.17.14.22.25;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.16.19.46.05;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.16.19.06.35;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.16.19.06.19;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.18.20.35.27;	author tom;	state Exp;
branches;
next	;


desc
@@


1.13
log
@first frame fixed to contain non-zero counts
@
text
@#!/bin/csh
#   Name:   sumdyn40
#   Author: Tom Videen
#   Date:   Oct 2008
#   Intent: View time-activity curve and determine frames to sum for 40-sec scan
#   Creates:
#		summed 40-sec image without decay correction
#		filtered, summed 40-sec image
#		.rgt file (starttime, duration, counts)1
#		.r file (headcurve format)
#   History: Fixed 4/16/2009 to give non-zero value in first frame

if ($#argv != 6 && $#argv != 7 && $#argv != 9) then
	echo "Usage:  sumdyn40 path prefix subject tracer scan ext [reference or X Y Z]"
	echo " e.g.   sumdyn40 . p 5660 ho 1 v"
	echo "  or    sumdyn40 . p 5660 oo 1 v p5660ho1_g3.v"
	echo "  or    sumdyn40 /data/npggw/data1/COSS/p5660/Raw p 5660 oo 1 v 65 60 24"
	exit 1
endif

set DATAPATH = $1
set PREFIX   = $2
set ID       = $3
set TRACER   = $4
set NUM      = $5
set EXT      = $6
set REF      = ''
set CTR      = 0
set DIAMETER = 80
set NFRAMES  = 20

if ($#argv == 7) then
	set REF = $7
	if (! -e $REF) then
		echo "ERROR [sumdyn40] file not found: $REF"
		exit 1
	endif
endif

if ($#argv == 9) then
	set CTR = 1
	set X = $7
	set Y = $8
	set Z = $9
endif

set COB  = _center_of_brain
set FIL  = _g3
set PID  = $PREFIX$ID
set SCAN = $TRACER$NUM
set NAME = $PID$SCAN
set IN   = $DATAPATH/$NAME.$EXT
set FIN  = $NAME$FIL.$EXT
set TMP  = ${NAME}all.$EXT
set FTMP = ${NAME}all_g3.$EXT
set LST  = $NAME.lst
set PRM  = $NAME.prm
set REG  = $NAME.reg
set RGT  = $NAME.rgt
set PLT  = $NAME.cnt
set STRT = $NAME.start
set LEN  = $NAME.len
set CNTS = $NAME.cnts
set HCRV = $NAME.r

if (! -e $IN) then
	echo "ERROR [sumdyn40] file not found: $IN"
	exit 1
endif

unalias rm
imgfrms $IN | cut -c1-3 >! junk
set FIRST = `head -5 junk | tail -1`
set LAST  = `tail -1 junk`
rm junk
set NFRMS = `echo $LAST - $FIRST + 1 | bc`
set MISSING = `echo $FIRST - 1 | bc`
echo "$IN    Frames $FIRST to $LAST"
echo "================================================================="
if ($CTR == 0) then
	if ($REF == '') then
		sumimgframes $IN $TMP $FIRST $LAST -1
		gauss $TMP $REF 0.3
	endif
	echo "Using vidi"
	echo "   Image #1:  $REF"
	echo "   Locate approx center of brain in 3-D"
	echo "X center: "
	set   X = `line`
	echo "Y center: "
	set   Y = `line`
	echo "Z center: "
	set   Z = `line`
	echo "[X,Y,Z]:  $X  $Y  $Z"
	echo "Continue?"
	set data = `line`
endif

# Create lst, prm, and reg files:

echo "$ID $NUM" >! $LST

echo "datapath:   $DATAPATH"     >! $PRM
echo "species:    $PREFIX"       >> $PRM
echo "tracer:     $TRACER"       >> $PRM
echo "extension:  $EXT"          >> $PRM
echo "imgfilter:  none"          >> $PRM
echo "voi:        new_sphere $DIAMETER" >> $PRM

echo "30  voifile"                  >! $REG
echo "center of brain for $PID"     >> $REG
echo "1"                            >> $REG
echo "center_of_brain   $X  $Y  $Z" >> $REG

echo "Zero Time is the start time of the First Frame."
echo "================================================================="
voistat $PRM $LST $RGT $REG >! /tmp/voistat.tmp
set ZEROTIME = `tail -1 /tmp/voistat.tmp | cut -f2 -d=`
rm /tmp/voistat.tmp

set SIZE = `wc -l $RGT | cut -f1 -d$PREFIX`
set NN = `echo $SIZE - 2 | bc`
tail -$NN $RGT | head -$NFRMS | cut -c2-12 >! $STRT
tail -$NN $RGT | head -$NFRMS | cut -c14-24 >! $LEN
tail -$NN $RGT | head -$NFRMS | cut -c28-40 >! $CNTS
set START = `cat $STRT`
set INTERVAL = `cat $LEN`
set COUNTS = `cat $CNTS`
set FRMTIME = $ZEROTIME
set STRING = 'time    prompt  delayed p_rate  d_rate  dtime   frame   singles'
echo $STRING >! $HCRV
set i = `echo $FIRST - 1 | bc`
while ($i <= $NFRMS)
	set SEC = `echo $INTERVAL[$i] | bc -l`
	set MSEC = `echo 1000 \* $SEC | bc -l`
	set FRMTIME = `echo $FRMTIME + $MSEC | bc -l | cut -f1 -d.`
	set CNTRATE = `echo 1000 \* $COUNTS[$i] / $SEC | bc -l | cut -f1 -d.`
	if ($CNTRATE == "-") set CNTRATE = 0
	set FRM = `echo $FIRST + $i -1 | bc`
	echo $FRMTIME 0 0 $CNTRATE 0 0 $FRM 0 >> $HCRV
	@@ i++
end
tail -$NFRMS $HCRV | cut -f4 -d' ' >! $PLT

echo "================================================================="
echo "Note the first frame with counts above background"
echo "(to be used as the first frame of 40-sec integration)"
echo "================================================================="
set STRING = "$DIAMETER-mm sphere at $X,$Y,$Z"
plotcol $PLT $FIRST $LAST $NAME.$EXT $STRING

echo "$IN    Frames $FIRST to $LAST"
set STR = 'y'
prompt1:
echo "================================================================="
echo "First frame of 40-sec integration?"
set FIRST = `line`
if ($STR == 'n' || $STR == 'N') then
	echo "Last frame number?"
	set END = `line`
else 
	set END = `echo $FIRST + $NFRAMES - 1 | bc`
endif
prompt2:
while ($END > $LAST)
	imgfrms $IN
	echo "Last frame number? (max=$LAST)"
	set END = `line`
end

set IDX1 = `echo $FIRST - $MISSING | bc`
set IDX2 = `echo $END - $MISSING | bc`
set T1 = $START[$IDX1]
set T2 = $START[$IDX2]
set T3 = $INTERVAL[$IDX2]

set TOT = `echo $T2 - $T1 + $T3 | bc -l`
echo "Integration time for frames $FIRST-$END = $TOT sec"
echo "Use this range? <y/n>"
set STR = `line`
if ($STR == 'n' || $STR == 'N') goto prompt1

set OUT  = $PID${SCAN}_f${FIRST}to${END}.$EXT
echo "Summing frames $FIRST to $END --> $OUT"
sumimgframes $IN $OUT $FIRST $END -1
gauss $OUT $FIN 0.3

if (-e idl.ps) rm idl.ps
if (-e $TMP) rm $TMP
if (-e $TMP.rec) rm $TMP.rec
if (-e $FTMP) rm $FTMP
if (-e $FTMP.rec) rm $FTMP.rec
rm $LST
rm $PRM
rm $REG
rm $STRT
rm $LEN
rm $CNTS
rm $OUT.rec
rm $FIN.rec

@


1.12
log
@*** empty log message ***
@
text
@d4 1
a4 1
#   Date:   Jan 2003
d7 1
a7 1
#		summed 40-sec image
d11 1
d82 1
a82 1
		sumimgframes $IN $TMP $FIRST $LAST
a118 1
echo "zero time = "$ZEROTIME
d132 1
a132 3
set i = $FIRST
set STRING = "$FRMTIME 0 0 0 0 0 $i 0"
echo $STRING >> $HCRV
d138 1
d185 1
a185 1
sumimgframes $IN $OUT $FIRST $END
@


1.11
log
@*** empty log message ***
@
text
@d114 1
a114 1
echo "Zero Time is the start time of the first frame (typically 0)."
a195 1
rm $PLT
@


1.10
log
@get zerotime from voistat in msec
@
text
@d4 1
a4 1
#   Date:   Dec 2002
a25 12

set DATAPATH = .
set PREFIX   = p
set ID       = 6163
set TRACER   = ho
set NUM      = 1
set EXT      = v
set CTR = 1
set X = 62
set Y = 67
set Z = 14

@


1.9
log
@frametime and countrate written to PLT as integers
@
text
@d26 12
d82 1
d86 1
a86 1
/usr/bin/rm junk
d128 2
a129 2
voistat $PRM $LST $RGT $REG
set ZEROTIME = $status
d131 1
d141 1
a141 1
set FRMTIME = `echo $ZEROTIME \* 1000 | bc -l`
d144 2
a145 1
set STRING = "$FRMTIME 0 0 0 0 0 1 0"
a146 1
set i = 1
d201 14
a214 14
if (-e idl.ps) /usr/bin/rm idl.ps
if (-e $TMP) /usr/bin/rm $TMP
if (-e $TMP.rec) /usr/bin/rm $TMP.rec
if (-e $FTMP) /usr/bin/rm $FTMP
if (-e $FTMP.rec) /usr/bin/rm $FTMP.rec
/usr/bin/rm $LST
/usr/bin/rm $PRM
/usr/bin/rm $PLT
/usr/bin/rm $REG
/usr/bin/rm $STRT
/usr/bin/rm $LEN
/usr/bin/rm $CNTS
/usr/bin/rm $OUT.rec
/usr/bin/rm $FIN.rec
@


1.8
log
@checked 8/Nov/2002
@
text
@d4 1
a4 1
#   Date:   Nov 2002
d136 2
a137 2
	set FRMTIME = `echo $FRMTIME + $MSEC | bc -l`
	set CNTRATE = `echo $COUNTS[$i] / $SEC | bc -l`
d149 1
a149 1
plotcol $PLT $FIRST $LAST $PID$SCAN.$EXT $STRING
@


1.7
log
@add some additional file cleanup
@
text
@d61 1
a61 1
set DURA = $NAME.duration
d116 2
a117 2
set ZERO = $status
echo "zero time = "$ZERO
d122 1
a122 2
#tail -$NN $RGT | head -$NFRMS | cut -c14-24 | cut -f1 -d. >! $DURA
tail -$NN $RGT | head -$NFRMS | cut -c14-24 >! $DURA
d125 1
a125 1
set DURATION = `cat $DURA`
d127 1
a127 1
set TIME = `echo $ZERO \* 1000 | bc`
d130 1
a130 1
set STRING = "$TIME 0 0 0 0 0 0 0"
d134 6
a139 3
	set TIME = `echo $TIME + $DURATION[$i] \* 1000 | bc -l`
	set MEAN = `echo 1000 \* $COUNTS[$i] / $DURATION[$i] | bc -l`
	echo $TIME 0 0 $MEAN 0 0 1 0 >> $HCRV
d174 1
a174 1
set T3 = $DURATION[$IDX2]
d197 1
a197 1
/usr/bin/rm $DURA
@


1.6
log
@alter for 3D acquisitions (without 2-sec frames)
@
text
@d4 1
a4 1
#   Date:   Sep 2001
d6 5
d192 2
a193 1
/usr/bin/rm $RGT
d197 3
@


1.5
log
@gets zerotime back from voistat
computes total scan time and gives option to choose end frame
@
text
@d4 1
a4 1
#   Date:   Aug 2001
d94 1
a94 1
echo "$ID 1" >! $LST
d117 2
a118 1
tail -$NN $RGT | head -$NFRMS | cut -c14-24 | cut -f1 -d. >! $DURA
d123 1
a123 1
set TIME = $ZERO
d130 2
a131 2
	set TIME = `echo $TIME + $DURATION[$i] \* 1000 | bc`
	set MEAN = `echo 1000 \* $COUNTS[$i] / $DURATION[$i] | bc`
d138 2
a139 2
echo "Determine first frame with counts above background in plot."
echo "First frame of 40-sec integration would begin with the NEXT frame."
d148 1
a148 1
echo "First frame number for 40-sec integration?"
d152 3
a154 3
	set LAST = `line`
else
	set LAST = `echo $FIRST + $NFRAMES - 1 | bc`
d156 13
a168 3
set T1 = $START[$FIRST]
set T2 = $START[$LAST]
set T3 = $DURATION[$LAST]
d170 1
a170 1
echo "Integration time for frames $FIRST-$LAST = $TOT sec"
d175 3
a177 3
set OUT  = $PID${SCAN}_f${FIRST}to${LAST}.$EXT
echo "Summing frames $FIRST to $LAST --> $OUT"
sumimgframes $IN $OUT $FIRST $LAST
@


1.4
log
@check existence before rm files at end
@
text
@d4 2
a5 3
#   Date:   Aug 2000
#   Intent: Determine then and sum 40 sec period from a dynamic image
# -------------------------------------------------------------------------
d68 1
a77 1

a80 1

d108 1
a108 1
echo "Zero Time is first frame time (typically 0)"
d111 2
a113 3
echo "Zero Time (again)? "
set ZERO = `line`

a135 1
echo "Determine first frame with counts above background in plot"
d137 3
d143 3
d147 1
a147 2
echo "$IN    Frames $FIRST to $LAST"
echo "First frame number with counts above background?"
d149 14
a162 1
echo "First frame in data file is $FIRST"
d164 2
a165 5
set LAST  = `echo $FIRST + $NFRAMES - 1 | bc`
set OUT   = $PID${SCAN}_f${FIRST}to${LAST}.$EXT
echo "Sum frames $FIRST to $LAST --> $OUT ?"
set data = `line`

a168 1
/usr/bin/rm junk
@


1.3
log
@creates a headcurve file suitable for makedta
shows count rate per second regardless of the frame duration
@
text
@d55 1
a55 1
set PLT  = $NAME.plt
d159 5
a163 5
/usr/bin/rm idl.ps
/usr/bin/rm $TMP
/usr/bin/rm $TMP.rec
/usr/bin/rm $FTMP
/usr/bin/rm $FTMP.rec
@


1.2
log
@*** empty log message ***
@
text
@d10 2
a11 2
	echo " e.g.   sumdyn40 /data/npggw/data1/COSS/p5660/Raw p 5660 ho 1 v"
	echo "  or    sumdyn40 /data/npggw/data1/COSS/p5660/Raw p 5660 oo 1 v p5660ho1_g3.v"
d46 14
a59 9
set IN   = $DATAPATH/$PID$SCAN.$EXT
set FIN  = $PID$SCAN$FIL.$EXT
set TMP  = $PID${SCAN}all.$EXT
set FTMP = $PID${SCAN}all_g3.$EXT
set LST  = $PID$TRACER.lst
set PRM  = $PID$TRACER.prm
set REG  = $PID$TRACER.reg
set RGT  = $PID$TRACER.rgt
set PLT  = $PID$TRACER.plt
d69 1
d110 1
a110 1
echo "Use First frame time as Zero Time in voistat..."
d114 3
d119 20
a138 1
tail -$NN $RGT | cut -c28-40 >! $PLT
a156 1
rm junk
d158 12
@


1.1
log
@Initial revision
@
text
@d24 2
d97 1
a97 1
echo "voi:        new_sphere 40" >> $PRM
d104 1
a104 1
echo "Use first frame time as start time in voistat..."
d113 2
a114 1
plotcol $PLT 30 $PID$SCAN.$EXT
a115 1
echo
d117 3
a120 7
if ($MISSING != 0) then
	echo "First frame in plot was 1."
	echo "Remember to add $MISSING to the plot frame number"
endif
echo
echo "First frame with counts above background?"
set FIRST = `line`
d122 1
a122 1
set LAST  = `echo $FIRST + 19 | bc`
a129 1

@
