head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.02.13.22.24.07;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.03.12.40.16;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Feb 2004
@
text
@/* $Log: dupifh.c,v $
 * Revision 1.1  2002/07/03  12:40:16  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			dupifh.c
 *	Date:			Jul 2002
 *	Author:			Tom Videen
 *	Description:	Create Interfile header using a similar reference image
 *	===============================================================================
 */
static char     rcsid[] = "$Header: /home/npggw/tom/src/dupifh/RCS/dupifh.c,v 1.1 2002/07/03 12:40:16 tom Exp tom $";

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <image.h>

main (argc, argv)
	int             argc;
	char           *argv[];
{

	FILE           *in;
	FILE           *out;
	char           *hdr;
	char           *img;
	char           *ref;
	char           *ptr;
	char           *val;
	char            line[100];
	char            version[5];
	char            program_date[12];

/*	Get command line arguments and initialize filenames	*/

	if (argc != 4) {
		fprintf (stderr, "Usage: dupifh ref_ifh image new_ifh\n");
		return (ERROR);
	}
	ref = argv[1];
	img = argv[2];
	hdr = argv[3];

	ptr = strstr (rcsid, "v ");
	ptr += 2;
	(void) strcpy (version, "    ");
	if (ptr != NULL)
		(void) strncpy (version, ptr, 4);
	if (ptr != NULL)
		ptr = strstr (ptr, " ");
	ptr++;
	(void) strcpy (program_date, "           ");
	if (ptr != NULL)
		(void) strncpy (program_date, ptr, 10);
	ptr = strchr (program_date, '/');
	*ptr = ':';
	ptr = strchr (program_date, '/');
	*ptr = ':';

	if ((in = fopen (ref, "r")) == 0) {
		fprintf (stderr, "ERROR [dupifh]: Cannot open: %s\n", ref);
		return (ERROR);
	}

/* Create Interfile Format header file */

	if ((out = fopen (hdr, "w")) == 0) {
		fprintf (stderr, "ERROR [dupifh]: Cannot create: %s\n", hdr);
		return (ERROR);
	}
	fprintf (out, "INTERFILE :=\n");
	fprintf (out, "version of keys    := 3.3\n");
	fprintf (out, "date of keys       := 1992:01:01\n");
	fprintf (out, "conversion program := dupifh\n");
	fprintf (out, "program version    := %s\n", version);
	fprintf (out, "program date       := %s\n", program_date);
	fprintf (out, "name of data file    := %s\n", img);

	while (fgets (line, sizeof (line), in) != NULL) {
		ptr = strstr (line, ":=");
		if (ptr != NULL) {
			val = ptr + 3;
			if (strstr (line, "INTERFILE") != NULL);
			else if (strstr (line, "version of keys") != NULL);
			else if (strstr (line, "date of keys") != NULL);
			else if (strstr (line, "conversion program") != NULL);
			else if (strstr (line, "program version") != NULL);
			else if (strstr (line, "program date") != NULL);
			else if (strstr (line, "name of data file") != NULL);
			else if (strstr (line, "number of dimensions") != NULL)
				fprintf (out, "number of dimensions := 3\n");
			else if (strstr (line, "number of slices") != NULL)
				fprintf (out, "number of slices := %d\n", atoi(val));
			else if (strstr (line, "matrix size [1]") != NULL)
				fprintf (out, "matrix size [1] := %d\n", atoi(val));
			else if (strstr (line, "matrix size [2]") != NULL)
				fprintf (out, "matrix size [2] := %d\n", atoi(val));
			else if (strstr (line, "matrix size [3]") != NULL)
				fprintf (out, "matrix size [3] := %d\n", atoi(val));
			else if (strstr (line, "scaling factor (mm/pixel) [1]") != NULL)
				fprintf (out, "scaling factor (mm/pixel) [1] := %f\n", atof (val));
			else if (strstr (line, "scaling factor (mm/pixel) [2]") != NULL)
				fprintf (out, "scaling factor (mm/pixel) [2] := %f\n", atof (val));
			else if (strstr (line, "scaling factor (mm/pixel) [3]") != NULL)
				fprintf (out, "scaling factor (mm/pixel) [3] := %f\n", atof (val));
			else if (strstr (line, "number format") != NULL)
				fprintf (out, "number format   := float\n");
			else if (strstr (line, "number of bytes per pixel") != NULL)
				fprintf (out, "number of bytes per pixel  := 4\n");
			else if (strstr (line, "matrix initial element [1]") != NULL)
				fprintf (out, "matrix initial element [1] := right\n");
			else if (strstr (line, "matrix initial element [2]") != NULL)
				fprintf (out, "matrix initial element [2] := anterior\n");
			else if (strstr (line, "matrix initial element [3]") != NULL)
				fprintf (out, "matrix initial element [3] := inferior\n");
			else
				fprintf (out, line);
		}
	}

	fprintf (out, "END OF INTERFILE :=\n");
	(void) fclose (out);
	(void) fclose (in);
	return (OK);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d12 1
a12 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/dupifh/RCS/dupifh.c,v 1.1 2002/07/02 18:47:01 tom Exp $";
d48 4
a51 2
	(void) strncpy (version, ptr, 4);
	ptr = strstr (ptr, " ");
d54 2
a55 1
	(void) strncpy (program_date, ptr, 10);
@
