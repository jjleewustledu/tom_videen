head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.02.16.16.21.03;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.15.51.07;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Feb 2004
@
text
@/*$Log: if2anafix.c,v $
 * Revision 1.1  2004/01/27  15:51:07  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			if2anafix.c
 *	Date:			Jan 2004
 *	Author:			Tom Videen
 *  Description:    Create short-integer Analyze image hdr from float Interfile.
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/if2anafix/RCS/if2anafix.c,v 1.1 2004/01/27 15:51:07 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>
#include <nrutil.h>
#include <ANALYZE.h>

#define MAXSTR 256

/*	----------------------------
 *	Function:	if2anafix
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* header for ANALYZE */
	FILE           *afh;			 /* ANALYZE hdr file */
	FILE           *afi;			 /* ANALYZE img file */
	FILE           *ifh;			 /* Interfile ifh file */
	FILE           *ifi;			 /* Interfile img file */
	char           *afhname;		 /* Analyze header filename  */
	char           *afiname;		 /* Analyze image filename  */
	char           *ifhname;		 /* Interfile header filename */
	char           *ifiname;		 /* Interfile image filename */
	char            str[MAXSTR];
	char            imagename[MAXSTR] = "";
	char           *ptr;
	float           size[3];
	short          *srow;			 /* output row */
	float          *frow;			 /* input row */
	float        ***fimg;
	float           factor;
	long            dim1, dim2, dim3;
	int             dim[3];
	int             i, j, k;
	int             ndim = 0;
	int             global_max = 0;
	int             global_min = 0;

	if (argc != 6) {
		(void) printf ("Usage: if2anafix ifhname ifiname afhname afiname factor\n");
		return (ERROR);
	}
	ifhname = argv[1];
	ifiname = argv[2];
	afhname = argv[3];
	afiname = argv[4];
	factor = atof(argv[5]);

/*
 * Read Interfile header
 */

	if ((ifh = fopen (ifhname, "r")) == 0) {
		(void) fprintf (stderr, "ERROR [if2anafix]: opening Interfile header %s\n", ifhname);
		return (ERROR);
	}
	(void) fprintf (stdout, "reading %s\n", ifhname);
	if (fgets (str, sizeof (str), ifh) == NULL) {
		(void) fprintf (stderr, "ERROR [if2anafix]: reading %s\n", ifhname);
		return (ERROR);
	}
	if (strstr (str, "INTERFILE") == NULL) {
		(void) fprintf (stderr, "ERROR [if2anafix]: %s is not an Interfile header\n", ifhname);
		return (ERROR);
	}
	while (fgets (str, sizeof (str), ifh) != NULL) {
		ptr = strstr (str, ":=");
		if (ptr != NULL) {
			ptr += 2;
			if (strstr (str, "name of data file") != NULL) {
				(void) sscanf (ptr, "%s", imagename);
				continue;
			}
			if (strstr (str, "number format") != NULL) {
				while (*ptr == ' ')
					ptr++;
				if (strstr (ptr, "float") == NULL) {
					(void) fprintf (stderr, "ERROR [if2anafix]: image is not float\n");
					return (ERROR);
				}
				continue;
			}
			if (strstr (str, "number of dimensions") != NULL) {
				(void) sscanf (ptr, "%d", &ndim);
				if (ndim < 3 || ndim > 4) {
					(void) printf ("WARNING [if2anafix]: non-standard number of dimensions = %d\n",
						       ndim);
					(void) printf ("Analyze may not handle this image properly without ");
					(void) printf ("manually editing its header.\n");
				}
				continue;
			}
			if (strstr (str, "matrix size [1]") != NULL) {
				(void) sscanf (ptr, "%d", &dim[0]);
				continue;
			}
			if (strstr (str, "matrix size [2]") != NULL) {
				(void) sscanf (ptr, "%d", &dim[1]);
				continue;
			}
			if (strstr (str, "matrix size [3]") != NULL) {
				(void) sscanf (ptr, "%d", &dim[2]);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [1]") != NULL) {
				(void) sscanf (ptr, "%f", &size[0]);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [2]") != NULL) {
				(void) sscanf (ptr, "%f", &size[1]);
				continue;
			}
			if (strstr (str, "scaling factor (mm/pixel) [3]") != NULL) {
				(void) sscanf (ptr, "%f", &size[2]);
				continue;
			}
		}
	}
	(void) fclose (ifh);
	dim1 = (int) dim[0];
	dim2 = (int) dim[1];
	dim3 = (int) dim[2];

/*
 *	Read image data and compute min and max; write Analyze image
 */

	if ((ifi = fopen (ifiname, "r")) == 0) {
		(void) fprintf (stderr, "ERROR [if2anafix]: opening Interfile image %s\n", ifiname);
		return (ERROR);
	}
	(void) fprintf (stdout, "reading %s\n", ifiname);
	fimg = f3tensor (1, dim3, 1, dim2, 1, dim1);
	if (fimg == NULL) {
		(void) fprintf (stderr, "ERROR [if2anafix]: alloc fimg\n");
		return (ERROR);
	}
	frow = (float *) calloc (dim1, sizeof (float));
	if (frow == NULL) {
		(void) fprintf (stderr, "ERROR [if2anafix]: alloc frow\n");
		return (ERROR);
	}
	for (i = 0; i < dim3; i++) {
		for (j = 0; j < dim2; j++) {
			if ((fread (frow, sizeof (float), dim1, ifi)) != dim1) {
				(void) fprintf (stderr, "ERROR [if2anafix]: reading: %s\n", ifiname);
				return (ERROR);
			}
			for (k = 0; k < dim1; k++)
				fimg[dim3-i][dim2-j][dim1-k] = factor * frow[k];
				/*fimg[i+1][j+1][dim1-k] = factor * frow[k];*/
		}
	}
	(void) fclose (ifi);

	if ((afi = fopen (afiname, "w")) == 0) {
		(void) fprintf (stderr, "ERROR [if2anafix]: opening Analyze image %s\n", afiname);
		return (ERROR);
	}
	(void) fprintf (stdout, "writing %s\n", afiname);
	srow = (short *) calloc (dim1, sizeof (short));
	if (srow == NULL) {
		(void) fprintf (stderr, "ERROR [if2anafix]: alloc srow\n");
		return (ERROR);
	}
	for (i = 0; i < dim3; i++) {
		for (j = 0; j < dim2; j++) {
			for (k = 0; k < dim1; k++) {
				srow[k] = (short) fimg[i+1][j+1][k+1];
				if (srow[k] > global_max)
					global_max = srow[k];
				else if (srow[k] < global_min)
					global_min = srow[k];
			}
			if ((fwrite (srow, sizeof (short), dim1, afi)) != dim1) {
				(void) fprintf (stderr, "ERROR [if2anafix]: writing: %s\n", afiname);
				return (ERROR);
			}
		}
	}
	(void) fclose (afi);

/*
 *	Create Analyze hdr file
 */

	(void) strncpy (hdr.hk.db_name, imagename, 17);
	hdr.hk.sizeof_hdr = sizeof (struct dsr); /* required by developers */
	hdr.hk.extents = 16384;			 /* recommended by developers  */
	hdr.hk.regular = 'r';			 /* required by developers */
	hdr.dime.dim[0] = 4;			 /* typically 4 dimensions  */
	hdr.dime.dim[1] = dim[0];		 /* x dimension of atlas   */
	hdr.dime.dim[2] = dim[1];		 /* y dimension of atlas   */
	hdr.dime.dim[3] = dim[2];		 /* number of slices in volume */
	hdr.dime.dim[4] = 1;			 /* only one volume typically  */
	hdr.dime.unused8 = 0;			 /* despite the label, some of this is used */
	hdr.dime.unused9 = 0;
	hdr.dime.unused10 = 0;
	hdr.dime.unused11 = 0;
	hdr.dime.unused12 = 0;
	hdr.dime.unused13 = 0;
	hdr.dime.unused14 = 0;
	hdr.dime.datatype = 4;
	hdr.dime.bitpix = 16;
	hdr.dime.pixdim[1] = size[0];		 /* in mm */
	hdr.dime.pixdim[2] = size[1];		 /* in mm */
	hdr.dime.pixdim[3] = size[2];		 /* in mm */
	hdr.dime.funused8 = 0;
	hdr.dime.funused9 = 0;
	hdr.dime.funused10 = 0;
	hdr.dime.funused11 = 0;
	hdr.dime.funused12 = 0;
	hdr.dime.funused13 = 0;
	hdr.dime.glmax = global_max;
	hdr.dime.glmin = global_min;
	(void) strncpy (hdr.hist.descrip, imagename, 79);
	(void) strcpy (hdr.hist.originator, "if2anafix");
	if ((afh = fopen (afhname, "w")) == 0) {
		(void) fprintf (stderr, "ERROR [if2anafix]: opening ANALYZE header %s\n", afhname);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, afh)) != 1) {
		(void) fprintf (stderr, "ERROR [if2anafix]: writing to: %s\n", afhname);
		return (ERROR);
	}
	(void) fclose (afh);
	free (frow);
	free (srow);
	return (0);
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*$Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/if2anafix/RCS/if2anafix.c,v 1.9 2002/03/06 21:55:18 tom Exp $";
@
