head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.01.31.19.29.23;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Log$ */
/*	===============================================================================
 *	Module:		mai_atlas_fiducials.c
 *	Date:		Jan 2006
 *	Author:		Tom Videen
 *	Intent:		Create new image from existing Mai Atlas image with
 *				1120x26x936 0.14545 x 1.336 x 0.14545mm voxels
 *	Fiducial Points:
 *		AC  at 483, 17.0, 586
 *		PC  at 483, 38.5, 586
 *		OX  at 483, ----, 689
 *		OTL at 359
 *		OTR at 607
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/maiatlas_fiducials/RCS/mai_fiducials.c,v 1.3 2005/08/18 21:08:38 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <image.h>
#include <nrutil.h>
#include <matrixlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			mai_atlas_fiducials
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for Analyze hdr */
	FILE           *fd_img;			 /* file for Analyze image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	int             ntype;			 /* data type	 */
	long            nx, ny, nz;		 /* dimensions	 */
	long            x, y, z;		 /* indices to array	 */

	float           xac;			 /* ac = anterior commissure	 */
	float           yac;			 /* ac	*/
	float           zac;			 /* ac	*/
	float           ypc;			 /* pc = posterior commissure	 */
	float           zox;			 /* ox = optic chiasm	 */
	float           xleft;			 /* left fiducial (OT, PT or BE)	 */
	float           xright;			 /* right fiducial (OT, PT or BE)	 */

	long            x0a, x0b;		 /* pairs for fractional pixels	*/
	long            y0a, y0b;
	long            z0a, z0b;
	long            y1a, y1b;
	long            z1a, z1b;
	long            x1a, x1b;
	long            x2a, x2b;

	short        ***simg;			 /* image array */
	short          *row;			 /* single row of input image */
	short           val = 1000;

	if (argc != 5) {
		fprintf (stdout, "Usage: mai_atlas_fiducials in.img in.hdr out.img out.hdr\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];

	xac	= 483.0;
	yac	= 17.0;
	zac	= 586.0;
	ypc	= 38.5;
	zox = 689.0;
	xleft = 359.0;
	xright = 607.0;

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	ntype = hdr.dime.datatype;
	if (ntype != 4) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: reading %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", ntype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: reading %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	nx = hdr.dime.dim[1];
	ny = hdr.dime.dim[2];
	nz = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

	row = (short *) calloc (nx, sizeof (short));
	if (row == NULL) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: calloc row\n");
		return (ERROR);
	}
	simg = s3tensor (1, nz, 1, ny, 1, nx);
	if (simg == NULL) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: malloc simg\n");
		return (ERROR);
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: opening %s\n", img1);
		return (ERROR);
	}
	for (z = 1; z <= nz; z++) {
		for (y = 1; y <= ny; y++) {
			if ((fread (row, sizeof (short), nx, fd_img)) != nx) {
				fprintf (stderr, "ERROR [mai_atlas_fiducials]: reading %s\n", img1);
				return (ERROR);
			}
		}
	}
	(void) fclose (fd_img);

/*	=========================================================
 *	Image array: 256x256x128 voxels 1x1x1 mm
 *	Mai et al (2004) atlas definitions:
 *	XYZ-origin is [128.5, 128.5, 100]
 *	hence, xy midlines drawn as 2 rows with xac1 and xac2 or yac1 and yac2
 *	Note that Analyze image array is reversed
 */
	x0a = (nx+1) - (int) xac; 
	y0a = (ny+1) - (int) yac;
	z0a = (nz+1) - (int) zac;
	y1a = (ny+1) - (int) ypc;
	z1a = (nz+1) - (int) zox;
	x1a = (nx+1) - (int) xleft;
	x2a = (nx+1) - (int) xright;

	x0b = (nx+1) - (int) (xac+0.5); 
	y0b = (ny+1) - (int) (yac+0.5);
	z0b = (nz+1) - (int) (zac+0.5);
	y1b = (ny+1) - (int) (ypc+0.5);
	z1b = (nz+1) - (int) (zox+0.5);
	x1b = (nx+1) - (int) (xleft+0.5);
	x2b = (nx+1) - (int) (xright+0.5);

/*	=========================================================
 *	Origin Midline (AC-PC)	*/

	for (y = y1b; y <= y0a; y++) {
		simg[z0a][y][x0a] = val;
		simg[z0a][y][x0b] = val;
		simg[z0b][y][x0a] = val;
		simg[z0b][y][x0b] = val;
	}

/*	Left Edge	*/

	for (y = y1b; y <= y0a; y++) {
		simg[z0a][y][x1a] = val;
		simg[z0a][y][x1b] = val;
		simg[z0b][y][x1a] = val;
		simg[z0b][y][x1b] = val;
	}

/*	Right Edge	*/

	for (y = y1b; y <= y0a; y++) {
		simg[z0a][y][x2a] = val;
		simg[z0a][y][x2b] = val;
		simg[z0b][y][x2a] = val;
		simg[z0b][y][x2b] = val;
	}

/*	Midline	at Chiasm	*/

	for (y = 0; y < ny; y++) {
		simg[z1a][y][x0a] = val;
		simg[z1a][y][x0b] = val;
		simg[z1b][y][x0a] = val;
		simg[z1b][y][x0b] = val;
	}

/*	AC	*/

	for (x = x2b; x < x1a; x++) {
		simg[z0a][y0a][x] = val;
		simg[z0a][y0b][x] = val;
		simg[z0b][y0a][x] = val;
		simg[z0b][y0b][x] = val;
	}

/*	PC	*/

	for (x = x2b; x < x1a; x++) {
		simg[z0a][y1a][x] = val;
		simg[z0a][y1b][x] = val;
		simg[z0b][y1a][x] = val;
		simg[z0b][y1b][x] = val;
	}

/*	Write Atlas image	*/

	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: writing %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	if ((fd_img = fopen (img2, "w")) == 0) {
		fprintf (stderr, "ERROR [mai_atlas_fiducials]: opening %s\n", img2);
		return (ERROR);
	}
	for (z = 1; z <= nz; z++) {
		for (y = 1; y <= ny; y++) {
			for (x = 1; x <= nx; x++)
				row[x - 1] = simg[z][y][x];
			if (fwrite (row, sizeof (short), nx, fd_img) != nx) {
				fprintf (stderr, "ERROR [mai_atlas_fiducials]: writing %s\n", img2);
				return (ERROR);
			}
		}
	}
	(void) fclose (fd_img);
	free_s3tensor (simg, 1, nz, 1, ny, 1, nx);
	return (OK);
}
@
