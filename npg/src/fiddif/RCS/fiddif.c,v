head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2009.04.07.20.45.14;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.14.17.30.39;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.13.19.57.37;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.13.18.07.46;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.12.20.58.20;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.31.14.04.06;	author tom;	state Exp;
branches;
next	;


desc
@@


1.6
log
@add IPF
@
text
@/*	$Log: fiddif.c,v $
 * Revision 1.5  2009/01/14  17:30:39  tom
 * check RN
 *
 * Revision 1.4  2007/03/13  19:57:37  tom
 * *** empty log message ***
 *
 * Revision 1.3  2007/03/13  18:07:46  tom
 * *** empty log message ***
 *
 * Revision 1.2  2006/04/12  20:58:20  tom
 * *** empty log message ***
 *
 * Revision 1.1  2006/01/31  14:04:06  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:		fiddif.c
 *	Date:		Jan 2006
 *	Author:		Tom Videen
 *	Intent:		Compare 2 sets of fiducial points
 *
 *	If DET = 0 then display single fiducial errors causing > 0.5-mm error in STN
 *	 0		AC  X > 1   Y > 1   Z > 1
 *	 1		PC  X > 1   Y > 1   Z > 1
 *	 2		OX  X > 3   ----    Z > 1
 *	 3		OTL X > 1   ----    ----
 *	 4		OTR X > 1   ----    ----
 *	 5		BEL X > 3   ----    ----
 *	 6		BER X > 3   ----    ----
 *	 7		PTL X > 1   ----    ----
 *	 8		PTR X > 1   ----    ----
 *	 9		RNL X > 1   Y > 1   Z > 1
 *	10		RNR X > 1   Y > 1   Z > 1
 *	11,12	LVT-RVT             Z > 4
 *	13		IPF angle > 8 deg
 *
 *	Else if DET = 1 then display all ABS fiducial differences > 0.5-mm and Tilt > 4
 *	Else if DET = 2 then display all fiducial differences 
 *
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/fiddif/RCS/fiddif.c,v 1.5 2009/01/14 17:30:39 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <image.h>
#include <nrutil.h>
#include <myvalues.h>
#define DEBUG 0

/*	----------------------------
 *	Function:			fiddif
 *	----------------------------
 */
int main (argc, argv)
	int             argc;
	char           *argv[];
{

	FILE           *fd;
	char           *dbid;
	char           *pts1;
	char           *pts2;
	char            line[MAXLINE];
	char            name[4];

	float           fx, fy, fz;
	float           dx, dy, dz;
	float           dx1, dx2;
	float           dz1, dz2;
	float           ang1, ang2;

	struct point {
		char            name[4];
		float           x;
		float           y;
		float           z;
	};
	struct point    pt1[14];		 /* array of fiducial points	 */
	struct point    pt2[14];		 /* array of fiducial points	 */
	int             detect, npt, n;

	if (argc != 5) {
		fprintf (stdout, "Usage: fiddif dbid include file1.pts file2.pts\n");
		return (ERROR);
	}
	dbid = argv[1];
	detect = atoi(argv[2]);
	pts1 = argv[3];
	pts2 = argv[4];

/*	=========================================================
 *	Read fiducial points
 *	Note that Analyze image array is reversed and interpolated (x2)
 */
	if ((fd = fopen (pts1, "r")) == 0) {
		fprintf (stderr, "ERROR [fiddif]: opening %s\n", pts1);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd) == NULL) {
		fprintf (stderr, "ERROR [fiddif]: Reading %s\n", pts1);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd) == NULL) {
		fprintf (stderr, "ERROR [fiddif]: Reading %s\n", pts1);
		return (ERROR);
	}
	npt = 0;
	while (fgets (line, MAXLINE, fd) != NULL) {
		if (sscanf (line, "%3s %f %f %f", name, &fx, &fy, &fz) == 4) {
			(void) strcpy (pt1[npt].name, name);
			pt1[npt].x = fx;
			pt1[npt].y = fy;
			pt1[npt].z = fz;
			(npt)++;
		}
	}
	(void) fclose (fd);

	if ((fd = fopen (pts2, "r")) == 0) {
		fprintf (stderr, "ERROR [fiddif]: opening %s\n", pts2);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd) == NULL) {
		fprintf (stderr, "ERROR [fiddif]: Reading %s\n", pts2);
		return (ERROR);
	}
	if (fgets (line, MAXLINE, fd) == NULL) {
		fprintf (stderr, "ERROR [fiddif]: Reading %s\n", pts2);
		return (ERROR);
	}
	npt = 0;
	while (fgets (line, MAXLINE, fd) != NULL) {
		if (sscanf (line, "%3s %f %f %f", name, &fx, &fy, &fz) == 4) {
			(void) strcpy (pt2[npt].name, name);
			pt2[npt].x = fx;
			pt2[npt].y = fy;
			pt2[npt].z = fz;
			(npt)++;
		}
	}
	(void) fclose (fd);

/*	Compare	*/

	if (detect == 0) {
		for (n = 0; n < 11; n++) {
			dx = fabs (pt1[n].x - pt2[n].x);
			dy = fabs (pt1[n].y - pt2[n].y);
			dz = fabs (pt1[n].z - pt2[n].z);

			/* AC, PC, RNL, RNR  */

			if ((n <= 1 || n >= 9)
			    && (dx > 1 || dy > 1 || dz > 1))
				fprintf (stdout, "%5s  %-4s %4.1f %4.1f %4.1f\n", dbid, pt1[n].name, dx, dy, dz);

			/* OX  */

			else if ((n == 2) && (dx > 3 || dz > 1))
				fprintf (stdout, "%5s  %-4s %4.1f      %4.1f\n", dbid, pt1[n].name, dx, dz);

			/* OTL, OTR, PTL, PTR  */

			else if ((n == 3 || n == 4 || n == 7 || n == 8) && dx > 1)
				fprintf (stdout, "%5s  %-4s %4.1f\n", dbid, pt1[n].name, dx);

			/* BEL, BER  */

			else if ((n == 5 || n == 6) && dx > 3)
				fprintf (stdout, "%5s  %-4s %4.1f\n", dbid, pt1[n].name, dx);
		}

/*
		dz1 = pt1[11].z - pt1[12].z;
		dz2 = pt2[11].z - pt2[12].z;
		dz = fabs (dz1 - dz2);
		if (dz > 4)
			fprintf (stdout, "%5s  Tilt %4.1f\n", dbid, dz);
*/

		dx1 = pt1[13].x - pt1[0].x;
		dz1 = pt1[13].z - pt1[0].z;
		dx2 = pt2[13].x - pt2[0].x;
		dz2 = pt2[13].z - pt2[0].z;
		ang1 = (180/M_PI)*atan(dx1/dz1);
		ang2 = (180/M_PI)*atan(dx2/dz2);
		if (fabs(ang2-ang1) > 8)
			fprintf (stdout, "%5s  Tilt %4.1f\n", dbid, fabs(ang2-ang1));

	} else if (detect == 1) {
		for (n = 0; n < 3; n++) {
			dx = fabs (pt1[n].x - pt2[n].x);
			dy = fabs (pt1[n].y - pt2[n].y);
			dz = fabs (pt1[n].z - pt2[n].z);
			if (dx > 0.5 || dy > 0.5 || dz > 0.5)
				fprintf (stdout, "%5s  %-4s %4.1f %4.1f %4.1f\n", dbid, pt1[n].name, dx, dy, dz);
		}
		for (n = 9; n < 11; n++) {
			dx = fabs (pt1[n].x - pt2[n].x);
			dy = fabs (pt1[n].y - pt2[n].y);
			dz = fabs (pt1[n].z - pt2[n].z);
			if (dx > 1 || dy > 1 || dz > 1)
				fprintf (stdout, "%5s  %-4s %4.1f %4.1f %4.1f\n", dbid, pt1[n].name, dx, dy, dz);
		}

/*
		dz1 = pt1[11].z - pt1[12].z;
		dz2 = pt2[11].z - pt2[12].z;
		dz = fabs (dz1 - dz2);
		if (dz > 4)
			fprintf (stdout, "%5s  Tilt %4.1f\n", dbid, dz);
*/

		dx1 = pt1[13].x - pt1[0].x;
		dz1 = pt1[13].z - pt1[0].z;
		dx2 = pt2[13].x - pt2[0].x;
		dz2 = pt2[13].z - pt2[0].z;
		ang1 = (180/M_PI)*atan(dx1/dz1);
		ang2 = (180/M_PI)*atan(dx2/dz2);
		if (fabs(ang2-ang1) > 8)
			fprintf (stdout, "%5s  Tilt %4.1f\n", dbid, fabs(ang2-ang1));

	} else {
		for (n = 0; n <= 2; n++) {
			dx = (pt1[n].x - pt2[n].x);
			dy = (pt1[n].y - pt2[n].y);
			dz = (pt1[n].z - pt2[n].z);
			fprintf (stdout, "%5s  %-4s %4.1f %4.1f %4.1f\n", dbid, pt1[n].name, dx, dy, dz);
		}
		for (n = 9; n <= 10; n++) {
			dx = (pt1[n].x - pt2[n].x);
			dy = (pt1[n].y - pt2[n].y);
			dz = (pt1[n].z - pt2[n].z);
			fprintf (stdout, "%5s  %-4s %4.1f %4.1f %4.1f\n", dbid, pt1[n].name, dx, dy, dz);
		}
/*
		dz1 = pt1[11].z - pt1[12].z;
		dz2 = pt2[11].z - pt2[12].z;
		dz = (dz1 - dz2);
		fprintf (stdout, "%5s  Tilt %4.1f\n", dbid, dz);
*/

		dx1 = pt1[13].x - pt1[0].x;
		dz1 = pt1[13].z - pt1[0].z;
		dx2 = pt2[13].x - pt2[0].x;
		dz2 = pt2[13].z - pt2[0].z;
		ang1 = (180/M_PI)*atan(dx1/dz1);
		ang2 = (180/M_PI)*atan(dx2/dz2);
		fprintf (stdout, "%5s  Tilt %4.1f\n", dbid, fabs(ang2-ang1));
	}

	return (OK);
}
@


1.5
log
@check RN
@
text
@d2 3
d36 1
d45 1
a45 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fiddif/RCS/fiddif.c,v 1.4 2007/03/13 19:57:37 tom Exp tom $";
d75 1
d77 1
d85 2
a86 2
	struct point    pt1[13];		 /* array of fiducial points	 */
	struct point    pt2[13];		 /* array of fiducial points	 */
d180 1
d186 1
d188 9
d213 1
d219 11
d231 1
a231 1
		for (n = 0; n < 3; n++) {
d237 1
a237 1
		for (n = 9; n < 11; n++) {
d243 1
d248 9
@


1.4
log
@*** empty log message ***
@
text
@d2 3
d41 1
a41 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fiddif/RCS/fiddif.c,v 1.3 2007/03/13 18:07:46 tom Exp tom $";
d57 1
a57 1
main (argc, argv)
d154 1
a154 1
			if ((n <= 1 || n >= 10)
a184 1

d188 7
d205 6
@


1.3
log
@*** empty log message ***
@
text
@d2 3
d17 1
a17 1
 *	If ALL = 0 then display single fiducial errors causing > 0.5-mm error in STN
d31 2
a32 1
 *	If ALL = 1 then display all fiducial differences > 0.5-mm and Tilt > 4
d38 1
a38 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fiddif/RCS/fiddif.c,v 1.2 2006/04/12 20:58:20 tom Exp tom $";
d78 1
a78 1
	int             all, npt, n;
d85 1
a85 1
	all = atoi(argv[2]);
d143 1
a143 16
	if (all > 0) {
		for (n = 0; n < 3; n++) {
			dx = fabs (pt1[n].x - pt2[n].x);
			dy = fabs (pt1[n].y - pt2[n].y);
			dz = fabs (pt1[n].z - pt2[n].z);

			if (dx > 0.5 || dy > 0.5 || dz > 0.5)
				fprintf (stdout, "%5s  %-4s %4.1f %4.1f %4.1f\n", dbid, pt1[n].name, dx, dy, dz);
		}

		dz1 = pt1[11].z - pt1[12].z;
		dz2 = pt2[11].z - pt2[12].z;
		dz = fabs (dz1 - dz2);
		if (dz > 4)
			fprintf (stdout, "%5s  Tilt %4.1f\n", dbid, dz);
	} else {
d176 27
d204 1
@


1.2
log
@*** empty log message ***
@
text
@d2 3
d14 1
a14 1
 *	Single fiducial errors causing > 0.5-mm error in STN
d16 1
a16 1
 *	 1		PC  X > 1   Y > 1   Z > 1       
d27 3
a29 1
 *	
d34 1
a34 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fiddif/RCS/fiddif.c,v 1.1 2006/01/31 14:04:06 tom Exp tom $";
d74 1
a74 1
	int             npt, n;
d76 2
a77 2
	if (argc != 4) {
		fprintf (stdout, "Usage: fiddif dbid file1.pts file2.pts\n");
d81 3
a83 2
	pts1 = argv[2];
	pts2 = argv[3];
d139 5
a143 4
	for (n = 0; n < 11; n++) {
		dx = fabs (pt1[n].x - pt2[n].x);
		dy = fabs (pt1[n].y - pt2[n].y);
		dz = fabs (pt1[n].z - pt2[n].z);
d145 3
a147 1
		/*	AC, PC, RNL, RNR  */
d149 10
a158 3
		if ((n <= 1 || n >= 10)
		    && (dx > 1 || dy > 1 || dz > 1))
			fprintf (stdout, "%5s  %-4s %4.1f %4.1f %4.1f\n", dbid, pt1[n].name, dx, dy, dz);
d160 1
a160 1
		/*	OX  */
d162 3
a164 2
		else if ((n == 2) && (dx > 3 || dz > 1))
			fprintf (stdout, "%5s  %-4s %4.1f      %4.1f\n", dbid, pt1[n].name, dx, dz);
d166 1
a166 1
		/*	OTL, OTR, PTL, PTR  */
d168 2
a169 2
		else if ((n == 3 || n == 4 || n == 7 || n == 8) && dx > 1)
			fprintf (stdout, "%5s  %-4s %4.1f\n", dbid, pt1[n].name, dx);
d171 1
a171 1
		/*	BEL, BER  */
d173 14
a186 2
		else if ((n == 5 || n == 6) && dx > 3)
			fprintf (stdout, "%5s  %-4s %4.1f\n", dbid, pt1[n].name, dx);
a187 6

	dz1 = pt1[11].z - pt1[12].z;
	dz2 = pt2[11].z - pt2[12].z;
	dz = fabs (dz1 - dz2);
	if (dz > 4)
		fprintf (stdout, "%5s  Tilt %4.1f\n", dbid, dz);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d29 1
a29 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/fiddif/RCS/fiddif.c,v 1.3 2006/01/25 14:50:03 tom Exp $";
d151 1
a151 1
		else if ((n == 3 || n == 4 || n == 8 || n == 9) && dx > 1)
@
