head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2010.02.15.16.33.35;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.31.15.48.30;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.18.14.04.04;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@check scaling
@
text
@/*	$Log: anafloat2int.c,v $
 * Revision 1.2  2008/10/31  15:48:30  tom
 * use dbh.h and permit dim=3
 *
 * Revision 1.1  2005/02/18  14:04:04  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anafloat2int.c
 *	Date:			Feb 2005
 *	Author:			Tom Videen
 *	Description:	Convert Analyze image from floating pt to short integer
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anafloat2int/RCS/anafloat2int.c,v 1.2 2008/10/31 15:48:30 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <dbh.h>

/*	----------------------------
 *	Function:			anafloat2int
 *	----------------------------
 */
int main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;
	FILE           *fd_hdr;			 /* file for hdr */
	FILE           *fd_img;			 /* file for image */
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* output file */
	float			fact;			 /* scaling factor */
	long            dim1, dim2, dim3; /* dimensions of image */
	long            num, i;
	short          *simg;	 		 /* image */
	float          *fimg;	 		 /* image */
	float           max1, max2;

	if (argc != 6) {
		fprintf (stderr, "Usage: anafloat2int img1 hdr1 img2 hdr2 factor\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	fact = atof(argv[5]);

/*	Get image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anafloat2int]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anafloat2int]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anafloat2int]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1*dim2*dim3;

	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anafloat2int]: opening %s\n", img1);
		return (ERROR);
	}

	if (hdr.dime.datatype == DT_FLOAT && hdr.dime.bitpix == 32) {
		fprintf (stderr, "%d %d %ld\n", hdr.dime.datatype, hdr.dime.bitpix, num*sizeof (float));
		fimg = (float *) calloc (num, sizeof (float));
		if (fimg == NULL) {
			fprintf (stderr, "ERROR [anafloat2int]: calloc fimg\n");
			return (ERROR);
		}
		simg = (short *) calloc (num, sizeof (short));
		if (simg == NULL) {
			fprintf (stderr, "ERROR [anafloat2int]: calloc simg\n");
			return (ERROR);
		}
		if ((fread (fimg, sizeof(float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anafloat2int]: reading %s\n", img1);
			return (ERROR);
		}
		fprintf (stdout,"Read %s\n", img1);
		(void) fclose (fd_img);
		max1 = 0;
		max2 = 0;
		for (i = 0; i < num; i++) {
			simg[i] = fact * fimg[i];
			if (fimg[i] > max1) max1 = fimg[i];
			if (fact*fimg[i] > max2) max2 = fact*fimg[i];
		}
		fprintf (stdout, "Input max = %f Output max = %f\n", max1, max2);
		if ((fd_img = fopen (img2, "w")) == 0) {
			fprintf (stderr, "ERROR [anafloat2int]: opening %s\n", img2);
			return (ERROR);
		}
		if ((fwrite (simg, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anafloat2int]: writing %s\n", img2);
			return (ERROR);
		}
		free (fimg);
		free (simg);

	} else {
		fprintf (stderr, "ERROR [anafloat2int]: reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	(void) fclose (fd_img);

	hdr.dime.datatype = DT_SIGNED_SHORT;
	hdr.dime.bitpix = 16;
	if ((fd_hdr = fopen (hdr2, "w")) == 0) {
		fprintf (stderr, "ERROR [anafloat2int]: Unable to open %s\n", hdr2);
		return (ERROR);
	}
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anafloat2int]: Error writing to: %s\n", hdr2);
		return (ERROR);
	}
	(void) fclose (fd_hdr);
	return (OK);
}
@


1.2
log
@use dbh.h and permit dim=3
@
text
@d2 3
d17 1
a17 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anafloat2int/RCS/anafloat2int.c,v 1.1 2005/02/18 14:04:04 tom Exp tom $";
d44 1
d100 3
a102 1
		for (i = 0; i < num; i++)
d104 4
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d14 1
a14 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anafloat2int/RCS/anafloat2int.c,v 2.1 2004/04/05 21:28:13 tom Exp $";
d20 1
a20 1
#include <ANALYZE.h>
d26 1
a26 1
main (argc, argv)
d31 3
a33 3
	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
d62 1
a62 1
	if (hdr.dime.dim[0] != 4) {
d78 1
a78 1
	if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
d117 1
a117 1
	hdr.dime.datatype = 4;
@
