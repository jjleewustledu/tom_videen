head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2002.11.27.17.36.32;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.08.30.17.09.29;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.02.03.23.18.47;	author ty7777;	state Exp;
branches;
next	;


desc
@Initial checking in, working version.
@


1.3
log
@*** empty log message ***
@
text
@/* $Log: scantest.c,v $
 * Revision 1.2  1999/08/30  17:09:29  tom
 * updated for Solaris
 * */
/*  ===============================================================================
 *  File:           scantest.c
 *  Date:           Aug-99
 *  Author:         Tom Videen
 *  Description:    Check summed projections against gantry sums.
 *	History:
 *		Modification of scantest by Tom Yang (1995/02/03)
 *  ===============================================================================
 */
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/scantest/RCS/scantest.c,v 1.2 1999/08/30 17:09:29 tom Exp tom $";
#endif

#include <stdio.h>
#include <string.h>
#include <strings.h>
#include <matrix.h>

main (argc, argv)
	int             argc;
	char          **argv;
{
	extern          scan_test ();
	int             index, abs ();
	char            file[64], matrixSpecifier[32];

	if (argc < 2) {
		printf ("Usage: scantest sinogram_filename\n");
		return (1);
	}
	(void) strcpy (file, argv[1]);
	if ((index = abs ((int) &file[0] - (int) strpbrk (file, ","))) == abs ((int) &file[0]))
		(void) strcpy (matrixSpecifier, "*");
	else {
		(void) strcpy (matrixSpecifier, &file[index + 1]);
		file[index] = '\0';
	}
	return (scan_test (file, matrixSpecifier));
}

scan_test (file, selector)
	char           *file, *selector;
{
	Scan_subheader  scan;
	int             k, integral, validMatrices[2][5];
	short          *buffer = 0;
	char            okFlag[24];
	MatrixFile     *fp, *matrix_open ();
	MatrixData     *mData, *matrix_read ();
	struct Matval   matval;
	struct MatDir  *matdir, *get_next_dir_entry ();

	fp = matrix_open (file, "r");
	if (fp == NULL) {
		printf ("scantest:ERROR...could not open file %s for reading\n", file);
		(void) fflush (stdout);
		return (1);
	}
	decode_selector (selector, validMatrices);
	printf (" F    P   G   D  B     Prompts      Delays    Multiples       Trues  Actual Int\n");
	printf ("___  ___ ___  _ ___    _______      ______    _________       _____  __________\n");
	(void) fflush (stdout);
	while ((matdir = get_next_dir_entry (fp)) != NULL) {
		if (!matrix_selector (matdir->matnum, validMatrices))
			continue;
		mat_numdoc (matdir->matnum, &matval);
		if ((mData = matrix_read (fp, matdir->matnum)) == NULL) {
			fprintf (stderr,
				 "scantest:ERROR... couldn't read scan subheader %3d %3d %3d %1d %3d  for %s\n",
			  matval.frame, matval.plane, matval.gate, matval.data, matval.bed, file);
			continue;
		}
		bcopy (mData->shptr, &scan, sizeof (Scan_subheader));
		if (scan.data_type < BYTE_TYPE || scan.data_type > M68K_I4) {
			fprintf (stderr,
				 "scantest:ERROR...unable to process data type of %d for %3d %3d %3d %1d %3d\n",
				 scan.data_type, matval.frame, matval.plane, matval.gate,
				 matval.data, matval.bed);
			continue;
		}
		buffer = (short *) mData->data_ptr;
		for (integral = 0, k = 0; k < scan.dimension_1 * scan.dimension_2; k++)
			integral += buffer[k];
		switch (fp->mhptr->coin_samp_mode) {
		case 0:			 /* test trues only */
			switch (matval.data) {
			case 0:		 /* emission trues */
			case 4:		 /* transmission trues */
				if (integral == scan.prompts - scan.delayed)
					(void) strcpy (okFlag, " ");
				else
					(void) sprintf (okFlag, "* %d *", integral - (scan.prompts - scan.delayed));
				break;
			default:		 /* all other modes are not configurable */
				printf ("scantest:ERROR...mode %2d can not have a data type of %2d\n",
					fp->mhptr->coin_samp_mode, matval.data);
				(void) fflush (stdout);
				break;
			}
			break;
		case 1:			 /* test prompts and delayeds */
			switch (matval.data) {
			case 0:		 /* emission prompts */
			case 4:		 /* transmission prompts */
				if (integral == scan.prompts)
					(void) strcpy (okFlag, " ");
				else
					(void) sprintf (okFlag, "* %d *", integral - scan.prompts);
				break;
			case 1:		 /* emission delayeds */
			case 5:		 /* transmission delayeds */
				if (integral == scan.delayed)
					(void) strcpy (okFlag, " ");
				else
					(void) sprintf (okFlag, "* %d *", integral - scan.delayed);
				break;
			default:		 /* all other modes are not configurable */
				printf ("scantest:ERROR...mode %2d can not have a data type of %2d\n",
					fp->mhptr->coin_samp_mode, matval.data);
				(void) fflush (stdout);
				break;
			}
			break;
		case 2:			 /* test prompts, delayeds, and multiples */
			switch (matval.data) {
			case 0:		 /* emission prompts */
			case 4:		 /* transmission prompts */
				if (integral == scan.prompts)
					(void) strcpy (okFlag, " ");
				else
					(void) sprintf (okFlag, "* %d *", integral - scan.prompts);
				break;
			case 1:		 /* emission delayeds */
			case 5:		 /* transmission delayeds */
				if (integral == scan.delayed)
					(void) strcpy (okFlag, " ");
				else
					(void) sprintf (okFlag, "* %d *", integral - scan.delayed);
				break;
			case 2:		 /* emission multiples */
			case 6:		 /* transmission multiples */
				if (integral == scan.multiples)
					(void) strcpy (okFlag, " ");
				else
					(void) sprintf (okFlag, "* %d *", integral - scan.multiples);
				break;
			default:		 /* no other modes should exist */
				printf ("scantest:ERROR...mode %2d can not have a data type of %2d\n",
					fp->mhptr->coin_samp_mode, matval.data);
				(void) fflush (stdout);
				break;
			}
			break;
		}
		printf ("%3d  %3d %3d  %1d %3d%11d %11d  %11d %11d %11d  %s\n",
			matval.frame, matval.plane, matval.gate, matval.data, matval.bed,
			scan.prompts, scan.delayed, scan.multiples, scan.prompts - scan.delayed,
			integral, okFlag);
		(void) fflush (stdout);
		free_matrix_data (mData);
	}
	return (0);
}
@


1.2
log
@updated for Solaris
@
text
@d1 4
a4 1
/* $Log$ */
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/scantest/RCS/scantest.c,v 1.1 1995/02/03 23:18:47 ty7777 Exp tom $";
d20 1
d35 1
a35 1
	strcpy (file, argv[1]);
d37 1
a37 1
		strcpy (matrixSpecifier, "*");
d39 1
a39 1
		strcpy (matrixSpecifier, &file[index + 1]);
d60 1
a60 1
		fflush (stdout);
d66 1
a66 1
	fflush (stdout);
d94 1
a94 1
					strcpy (okFlag, " ");
d96 1
a96 1
					sprintf (okFlag, "* %d *", integral - (scan.prompts - scan.delayed));
d101 1
a101 1
				fflush (stdout);
d110 1
a110 1
					strcpy (okFlag, " ");
d112 1
a112 1
					sprintf (okFlag, "* %d *", integral - scan.prompts);
d117 1
a117 1
					strcpy (okFlag, " ");
d119 1
a119 1
					sprintf (okFlag, "* %d *", integral - scan.delayed);
d124 1
a124 1
				fflush (stdout);
d133 1
a133 1
					strcpy (okFlag, " ");
d135 1
a135 1
					sprintf (okFlag, "* %d *", integral - scan.prompts);
d140 1
a140 1
					strcpy (okFlag, " ");
d142 1
a142 1
					sprintf (okFlag, "* %d *", integral - scan.delayed);
d147 1
a147 1
					strcpy (okFlag, " ");
d149 1
a149 1
					sprintf (okFlag, "* %d *", integral - scan.multiples);
d154 1
a154 1
				fflush (stdout);
d163 1
a163 1
		fflush (stdout);
@


1.1
log
@Initial revision
@
text
@d1 10
a10 8
/*$Id$*/
/*$Log$*/

/*    @@(#)scantest.c	2.10    10/28/92    */
#include <stdio.h>
#include <sys/file.h>
#include <petutil/matrix.h>

d12 1
a12 1
static char sccsid[] = "@@(#)scantest.c	2.10 10/28/92  Copyright 1989-1992 CTI PET Systems, Inc.";
d15 3
a17 1
static char rcsid [] = "$Header$";
d19 3
a21 3
main(argc, argv)
int argc;
char **argv;
d23 3
a25 5
	extern scan_test();
	int index,
	    abs();
	char file[64],
	     matrixSpecifier[32];
d27 3
a29 4
	if (argc < 2)
	{
		printf("usage: scantest sinogram_file_name\n");
		exit();
d31 5
a35 6
	strcpy(file, argv[1]);
	if ((index = abs((int) &file[0] - strpbrk(file, ","))) == abs((int) &file[0]))
		strcpy(matrixSpecifier, "*");
	else
	{
		strcpy(matrixSpecifier, &file[index + 1]);
d38 1
a38 1
	exit(scan_test(file, matrixSpecifier));
d41 2
a42 3
scan_test(file, selector)
char *file,
    *selector;
d44 8
a51 15
	Scan_subheader scan;
	int k,
	    integral,
	    dataSize,
	    validMatrices[2][5];
	short int *buffer = 0;
	char okFlag[24],
	     buff[512];
	MatrixFile *fp,
	          *matrix_open();
	MatrixData *mData,
	          *matrix_read();
	struct Matval matval;
	struct MatDir *matdir,
	      *get_next_dir_entry();
d53 4
a56 5
	fp = matrix_open(file, "r");
	if (fp == NULL)
	{
		printf("scantest:ERROR...could not open file %s for reading\n", file);
		fflush(stdout);
d59 6
a64 7
	decode_selector(selector, validMatrices);
	printf(" F    P   G   D  B     Prompts      Delays    Multiples       Trues  Actual Int\n");
	printf("___  ___ ___  _ ___    _______      ______    _________       _____  __________\n");
	fflush(stdout);
	while ((matdir = get_next_dir_entry(fp)) != NULL)
	{
		if (!matrix_selector(matdir->matnum, validMatrices))
d66 5
a70 6
		mat_numdoc(matdir->matnum, &matval);
		if ((mData = matrix_read(fp, matdir->matnum)) == NULL)
		{
			fprintf(stderr, 
				"scantest:ERROR... couldn't read scan subheader %3d %3d %3d %1d %3d  for %s\n",
				matval.frame, matval.plane, matval.gate, matval.data, matval.bed, file);
d73 6
a78 7
		bcopy(mData->shptr, &scan, sizeof(Scan_subheader));
		if (scan.data_type < BYTE_TYPE || scan.data_type > M68K_I4)
		{
			fprintf(stderr,
				"scantest:ERROR...unable to process data type of %d for %3d %3d %3d %1d %3d\n",
				scan.data_type, matval.frame, matval.plane, matval.gate,
				matval.data, matval.bed);
d81 1
a81 1
		buffer = (short int *) mData->data_ptr;
d84 5
a88 7
		switch (fp->mhptr->coin_samp_mode)
		{
		    case 0:	/* test trues only */
			switch (matval.data)
			{
			    case 0:	/* emission trues */
			    case 4:	/* transmission trues */
d90 1
a90 1
					strcpy(okFlag, " ");
d92 1
a92 1
					sprintf(okFlag, "* %d *", integral - (scan.prompts - scan.delayed));
d94 2
a95 3
			    default:	/* all other modes are
					 * not configurable */
				printf("scantest:ERROR...mode %2d can not have a data type of %2d\n",
d97 1
a97 1
				fflush(stdout);
d101 4
a104 6
		    case 1:	/* test prompts and
				 * delayeds */
			switch (matval.data)
			{
			    case 0:	/* emission prompts */
			    case 4:	/* transmission prompts */
d106 1
a106 1
					strcpy(okFlag, " ");
d108 1
a108 1
					sprintf(okFlag, "* %d *", integral - scan.prompts);
d110 2
a111 2
			    case 1:	/* emission delayeds */
			    case 5:	/* transmission delayeds */
d113 1
a113 1
					strcpy(okFlag, " ");
d115 1
a115 1
					sprintf(okFlag, "* %d *", integral - scan.delayed);
d117 2
a118 3
			    default:	/* all other modes are
					 * not configurable */
				printf("scantest:ERROR...mode %2d can not have a data type of %2d\n",
d120 1
a120 1
				fflush(stdout);
d124 4
a127 7
		    case 2:	/* test prompts,
				 * delayeds, and
				 * multiples */
			switch (matval.data)
			{
			    case 0:	/* emission prompts */
			    case 4:	/* transmission prompts */
d129 1
a129 1
					strcpy(okFlag, " ");
d131 1
a131 1
					sprintf(okFlag, "* %d *", integral - scan.prompts);
d133 2
a134 2
			    case 1:	/* emission delayeds */
			    case 5:	/* transmission delayeds */
d136 1
a136 1
					strcpy(okFlag, " ");
d138 1
a138 1
					sprintf(okFlag, "* %d *", integral - scan.delayed);
d140 2
a141 3
			    case 2:	/* emission multiples */
			    case 6:	/* transmission
					 * multiples */
d143 1
a143 1
					strcpy(okFlag, " ");
d145 1
a145 1
					sprintf(okFlag, "* %d *", integral - scan.multiples);
d147 2
a148 3
			    default:	/* no other modes should
					 * exist */
				printf("scantest:ERROR...mode %2d can not have a data type of %2d\n",
d150 1
a150 1
				fflush(stdout);
d155 1
a155 1
		printf("%3d  %3d %3d  %1d %3d%11d %11d  %11d %11d %11d  %s\n",
d157 1
a157 1
			scan.prompts, scan.delayed, scan.multiples, scan.prompts - scan.delayed, 
d159 2
a160 2
		fflush(stdout);
		free_matrix_data(mData);
@
