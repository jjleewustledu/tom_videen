head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2012.09.16.16.09.39;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Log$ */
/*	===============================================================================
 *	Module:			anamaxpix.c
 *	Date:			Sep 2012
 *	Author:			Tom Videen
 *	Description:	Get the maximum pixel value in an Analyze image
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamaxpix/RCS/anamaxpix.c,v 1.4 2008/11/07 13:58:46 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <ANALYZE.h>

/*	----------------------------
 *	Function:			anamaxpix
 *	----------------------------
 */
int             main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdr;			 /* ANALYZE.h */
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file 1 */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	short          *imga, maxi;
	float          *fimga, maxf;
	int             itype = 0;		 /* 0 = int, 1 = float   */

	if (argc != 3) {
		fprintf (stderr, "Usage: anamaxpix hdr1 img1\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];

/*	Get image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anamaxpix]: Cannot open: %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamaxpix]: Reading: %s\n", hdr1);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anamaxpix]: Reading: %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	num = dim1 * dim2 * dim3;
	(void) fclose (fd_hdr);


	if (hdr.dime.datatype == 4 && hdr.dime.bitpix == 16) {
		itype = 0;
		imga = (short *) calloc (num, sizeof (short));
		if (imga == NULL) {
			fprintf (stderr, "ERROR [anamaxpix]: calloc imga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anamaxpix]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamaxpix]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else if (hdr.dime.datatype == 16 && hdr.dime.bitpix == 32) {
		itype = 1;
		fimga = (float *) calloc (num, sizeof (float));
		if (fimga == NULL) {
			fprintf (stderr, "ERROR [anamaxpix]: calloc fimga\n");
			return (ERROR);
		}
		if ((fd_img = fopen (img1, "r")) == 0) {
			fprintf (stderr, "ERROR [anamaxpix]: opening %s\n", img1);
			return (ERROR);
		}
		if ((fread (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamaxpix]: reading: %s\n", img1);
			return (ERROR);
		}
		(void) fclose (fd_img);
		fprintf (stdout, "Read %s\n", img1);
	} else {
		fprintf (stderr, "ERROR [anamaxpix]: Reading: %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}

/*	Find maximum pixel value */

	if (itype == 0) {
		maxi = 0;
		for (i = 0; i < num; i++)
			if (imga[i] > maxi)
				maxi = imga[i];
		fprintf (stdout, "Max = %d\n", maxi);
		free (imga);
	} else {
		maxf = 0;
		for (i = 0; i < num; i++)
			if (fimga[i] > maxf)
				maxf = fimga[i];
		fprintf (stdout, "Max = %f\n", maxf);
		free (fimga);
	}

	(void) fclose (fd_img);

	(void) fclose (fd_hdr);
	return (OK);
}
@
