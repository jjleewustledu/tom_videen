head	2.5;
access;
symbols;
locks; strict;
comment	@ * @;


2.5
date	2009.05.11.15.53.48;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2009.05.06.15.36.31;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2008.11.07.14.13.38;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2008.10.31.20.19.03;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2008.10.30.20.19.45;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.13.17.57.47;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.07.15.37.31;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	99.12.16.17.55.43;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	99.10.13.14.24.16;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	99.10.13.14.19.07;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	99.09.20.17.19.35;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.15.33.39;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.16.44.37;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.02.09.18.02.33;	author tom;	state Exp;
branches;
next	;


desc
@@


2.5
log
@fix bug in if-loop created last week
@
text
@/*	$Log: anamask.c,v $
 * Revision 2.4  2009/05/06  15:36:31  tom
 * permit 1-byte images
 *
 * Revision 2.3  2008/11/07  14:13:38  tom
 * permit dim=3
 *
 * Revision 2.2  2008/10/31  20:19:03  tom
 * bug fix in 2.1
 *
 * Revision 2.1  2008/10/30  20:19:45  tom
 * update to dbh.h and permit dim=3
 *
 * Revision 2.0  2004/02/13  17:57:47  tom
 * Feb 2004
 *
 * Revision 1.9  2002/03/07  15:37:31  tom
 * use real or integer image files
 *
 * Revision 1.8  1999/12/16  17:55:43  tom
 * sync version
 *
 * Revision 1.6  1999/10/13  14:24:16  tom
 * change includes
 *
 * Revision 1.5  1999/10/13  14:19:07  tom
 * changed to perform as stated in man page
 * it now retains pixels which are equal to the threshold.
 *
 * Revision 1.4  1999/09/20  17:19:35  tom
 * fix bug in sign
 *
 * Revision 1.3  1999/04/29  15:33:39  tom
 * add threshold
 *
 * Revision 1.2  1999/02/16  16:44:37  tom
 * permit masking out negative values
 *
 * Revision 1.1  1999/02/09  18:02:33  tom
 * Initial revision
 * */
/*	===============================================================================
 *	Module:			anamask.c
 *	Date:			Feb 1999
 *	Author:			Tom Videen
 *	Description:	Mask one Analyze image with another
 *	History:
 *		16-Feb-1999 (TOV) Modify to mask out pixels < 0
 *		29-Apr-1999 (TOV) Modify to specify threshold as well as sign.
 *		06-May-2009 (TOV) Read 1-byte images
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 2.4 2009/05/06 15:36:31 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <dbh.h>

/*	----------------------------
 *	Function:			anamask
 *	----------------------------
 */
int             main (argc, argv)
	int             argc;
	char           *argv[];
{

	struct dsr      hdra, hdrb;
	FILE           *fd_hdr;			 /* file for ANALYZE hdr */
	FILE           *fd_img;			 /* file for ANALYZE image */
	char           *img1, *hdr1;		 /* input file */
	char           *img2, *hdr2;		 /* mask file */
	char           *img3, *hdr3;		 /* output file */
	long            dim1, dim2, dim3;	 /* dimensions of image */
	long            num, i;
	int             thresh, sign;
	int             ntypea, ntypeb;
	char           *cimga, *cimgb;		 /* image */
	short          *imga, *imgb;		 /* image */
	float          *fimga, *fimgb;		 /* image */

	if (argc != 9) {
		fprintf (stdout, "Usage: anamask img1 hdr1 img2 hdr2 img3 hdr3 thresh sign\n");
		return (ERROR);
	}
	hdr1 = argv[1];
	img1 = argv[2];
	hdr2 = argv[3];
	img2 = argv[4];
	hdr3 = argv[5];
	img3 = argv[6];
	thresh = atoi (argv[7]);
	sign = atoi (argv[8]);

/*	Get first image */

	if ((fd_hdr = fopen (hdr1, "r")) == 0) {
		fprintf (stderr, "ERROR [anamask]: opening %s\n", hdr1);
		return (ERROR);
	}
	if ((fread (&hdra, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamask]: reading %s\n", hdr1);
		return (ERROR);
	}
	if (hdra.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anamask]: reading %s\n", hdr1);
		fprintf (stderr, "Dimensions = %d\n", hdra.dime.dim[0]);
		return (ERROR);
	}
	ntypea = hdra.dime.datatype;
	if (ntypea != DT_UNSIGNED_CHAR && ntypea != DT_SIGNED_SHORT && ntypea != DT_FLOAT) {
		fprintf (stderr, "ERROR [anamask]: reading %s\n", hdr1);
		fprintf (stderr, "Datatype = %d\n", ntypea);
		return (ERROR);
	}
	if (hdra.dime.bitpix != 8 && hdra.dime.bitpix != 16 && hdra.dime.bitpix != 32) {
		fprintf (stderr, "ERROR [anamask]: reading %s\n", hdr1);
		fprintf (stderr, "Bits/pixel = %d\n", hdra.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdra.dime.dim[1];
	dim2 = hdra.dime.dim[2];
	dim3 = hdra.dime.dim[3];
	(void) fclose (fd_hdr);
	num = dim1 * dim2 * dim3;

	if (ntypea == DT_UNSIGNED_CHAR) {
		cimga = (char *) calloc (num, sizeof (char));
		if (cimga == NULL) {
			fprintf (stderr, "ERROR [anamask]: calloc cimga\n");
			return (ERROR);
		}
	} else if (ntypea == DT_SIGNED_SHORT) {
		imga = (short *) calloc (num, sizeof (short));
		if (imga == NULL) {
			fprintf (stderr, "ERROR [anamask]: calloc imga\n");
			return (ERROR);
		}
	} else {
		fimga = (float *) calloc (num, sizeof (float));
		if (fimga == NULL) {
			fprintf (stderr, "ERROR [anamask]: calloc fimga\n");
			return (ERROR);
		}
	}
	if ((fd_img = fopen (img1, "r")) == 0) {
		fprintf (stderr, "ERROR [anamask]: opening %s\n", img1);
		return (ERROR);
	}
	if (ntypea == DT_UNSIGNED_CHAR) {
		if ((fread (cimga, sizeof (char), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamask]: reading %s\n", img1);
			return (ERROR);
		}
	} else if (ntypea == DT_SIGNED_SHORT) {
		if ((fread (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamask]: reading %s\n", img1);
			return (ERROR);
		}
	} else {
		if ((fread (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamask]: reading %s\n", img1);
			return (ERROR);
		}
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s  type %d\n", img1, ntypea);

/*	Get second (mask) image */

	if ((fd_hdr = fopen (hdr2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamask]: opening %s\n", hdr2);
		return (ERROR);
	}
	if ((fread (&hdrb, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamask]: reading %s\n", hdr2);
		return (ERROR);
	}
	if (hdrb.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anamask]: reading %s\n", hdr2);
		fprintf (stderr, "Dimensions = %d\n", hdrb.dime.dim[0]);
		return (ERROR);
	}
	ntypeb = hdrb.dime.datatype;
	if (ntypeb != DT_UNSIGNED_CHAR && ntypeb != DT_SIGNED_SHORT && ntypeb != DT_FLOAT) {
		fprintf (stderr, "ERROR [anamask]: reading %s\n", hdr2);
		fprintf (stderr, "Datatype = %d\n", ntypeb);
		return (ERROR);
	}
	if (hdrb.dime.bitpix != 8 && hdrb.dime.bitpix != 16 && hdrb.dime.bitpix != 32) {
		fprintf (stderr, "ERROR [anamask]: reading %s\n", hdr2);
		fprintf (stderr, "Bits/pixel = %d\n", hdrb.dime.bitpix);
		return (ERROR);
	}
	dim1 = hdrb.dime.dim[1];
	dim2 = hdrb.dime.dim[2];
	dim3 = hdrb.dime.dim[3];
	(void) fclose (fd_hdr);

	if (num != dim1 * dim2 * dim3) {
		fprintf (stderr, "ERROR [anamask]: Images are not same size\n");
		return (ERROR);
	}
	if (ntypeb == DT_UNSIGNED_CHAR) {
		cimgb = (char *) calloc (num, sizeof (char));
		if (cimgb == NULL) {
			fprintf (stderr, "ERROR [anamask]: calloc cimgb\n");
			return (ERROR);
		}
	} else if (ntypeb == DT_SIGNED_SHORT) {
		imgb = (short *) calloc (num, sizeof (short));
		if (imgb == NULL) {
			fprintf (stderr, "ERROR [anamask]: calloc imgb\n");
			return (ERROR);
		} else {
			fimgb = (float *) calloc (num, sizeof (float));
			if (fimgb == NULL) {
				fprintf (stderr, "ERROR [anamask]: calloc fimgb\n");
				return (ERROR);
			}
		}
		if ((fd_img = fopen (img2, "r")) == 0) {
			fprintf (stderr, "ERROR [anamask]: opening %s\n", img2);
			return (ERROR);
		}
		if (ntypeb == DT_UNSIGNED_CHAR) {
			if ((fread (cimgb, sizeof (char), num, fd_img)) != num) {
				fprintf (stderr, "ERROR [anameanpix]: reading %s\n", img2);
				return (ERROR);
			}
		} else if (ntypeb == DT_SIGNED_SHORT) {
			if ((fread (imgb, sizeof (short), num, fd_img)) != num) {
				fprintf (stderr, "ERROR [anamask]: reading %s\n", img2);
				return (ERROR);
			}
		} else {
			if ((fread (fimgb, sizeof (float), num, fd_img)) != num) {
				fprintf (stderr, "ERROR [anamask]: reading %s\n", img2);
				return (ERROR);
			}
		}
	}
	(void) fclose (fd_img);
	fprintf (stdout, "Read %s  type %d\n", img2, ntypeb);

/*	Mask and save */

	if (ntypea == DT_UNSIGNED_CHAR && ntypeb == DT_UNSIGNED_CHAR) {
		if (sign > 0) {
			for (i = 0; i < num; i++)
				if (cimgb[i] < thresh)
					cimga[i] = 0;
		} else {
			for (i = 0; i < num; i++)
				if (cimgb[i] > thresh)
					cimga[i] = 0;
		}
		free (cimgb);
	} else if (ntypea == DT_SIGNED_SHORT && ntypeb == DT_UNSIGNED_CHAR) {
		if (sign > 0) {
			for (i = 0; i < num; i++)
				if (cimgb[i] < thresh)
					imga[i] = 0;
		} else {
			for (i = 0; i < num; i++)
				if (cimgb[i] > thresh)
					imga[i] = 0;
		}
		free (cimgb);
	} else if (ntypea == DT_FLOAT && ntypeb == DT_UNSIGNED_CHAR) {
		if (sign > 0) {
			for (i = 0; i < num; i++)
				if (cimgb[i] < thresh)
					fimga[i] = 0;
		} else {
			for (i = 0; i < num; i++)
				if (cimgb[i] > thresh)
					fimga[i] = 0;
		}
		free (cimgb);
	} else if (ntypea == DT_UNSIGNED_CHAR && ntypeb == DT_SIGNED_SHORT) {
		if (sign > 0) {
			for (i = 0; i < num; i++)
				if (imgb[i] < thresh)
					cimga[i] = 0;
		} else {
			for (i = 0; i < num; i++)
				if (imgb[i] > thresh)
					cimga[i] = 0;
		}
		free (imgb);
	} else if (ntypea == DT_SIGNED_SHORT && ntypeb == DT_SIGNED_SHORT) {
		if (sign > 0) {
			for (i = 0; i < num; i++)
				if (imgb[i] < thresh)
					imga[i] = 0;
		} else {
			for (i = 0; i < num; i++)
				if (imgb[i] > thresh)
					imga[i] = 0;
		}
	} else if (ntypea == DT_FLOAT && ntypeb == DT_SIGNED_SHORT) {
		if (sign > 0) {
			for (i = 0; i < num; i++)
				if (imgb[i] < thresh)
					fimga[i] = 0;
		} else {
			for (i = 0; i < num; i++)
				if (imgb[i] > thresh)
					fimga[i] = 0;
		}
		free (imgb);
	} else if (ntypea == DT_UNSIGNED_CHAR && ntypeb == DT_FLOAT) {
		if (sign > 0) {
			for (i = 0; i < num; i++)
				if (fimgb[i] < thresh)
					cimga[i] = 0;
		} else {
			for (i = 0; i < num; i++)
				if (fimgb[i] > thresh)
					cimga[i] = 0;
		}
		free (fimgb);
	} else if (ntypea == DT_SIGNED_SHORT && ntypeb == DT_FLOAT) {
		if (sign > 0) {
			for (i = 0; i < num; i++)
				if (fimgb[i] < thresh)
					imga[i] = 0;
		} else {
			for (i = 0; i < num; i++)
				if (fimgb[i] > thresh)
					imga[i] = 0;
		}
		free (fimgb);
	} else {
		if (sign > 0) {
			for (i = 0; i < num; i++)
				if (fimgb[i] < thresh)
					fimga[i] = 0;
		} else {
			for (i = 0; i < num; i++)
				if (fimgb[i] > thresh)
					fimga[i] = 0;
		}
		free (fimgb);
	}

	if ((fd_img = fopen (img3, "w")) == 0) {
		fprintf (stderr, "ERROR [anamask]: opening %s\n", img3);
		return (ERROR);
	}
	fprintf (stdout, "Write %s  type %d\n", img3, ntypea);
	if (ntypea == DT_UNSIGNED_CHAR) {
		if ((fwrite (cimga, sizeof (char), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamask]: writing %s\n", img3);
			return (ERROR);
		}
		free (cimga);
	} else if (ntypea == DT_SIGNED_SHORT) {
		if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamask]: writing %s\n", img3);
			return (ERROR);
		}
		free (imga);
	} else {
		if ((fwrite (fimga, sizeof (float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamask]: writing %s\n", img3);
			return (ERROR);
		}
		free (fimga);
	}
	(void) fclose (fd_img);

	if ((fd_hdr = fopen (hdr3, "w")) == 0) {
		fprintf (stderr, "ERROR [anamask]: opening %s\n", hdr3);
		return (ERROR);
	}
	if ((fwrite (&hdra, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anamask]: writing %s\n", hdr3);
		return (ERROR);
	}
	(void) fclose (fd_hdr);

	return (OK);
}
@


2.4
log
@permit 1-byte images
@
text
@d2 3
d55 1
a55 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 2.3 2008/11/07 14:13:38 tom Exp tom $";
d214 5
a218 6
		if (ntypeb == DT_SIGNED_SHORT) {
			imgb = (short *) calloc (num, sizeof (short));
			if (imgb == NULL) {
				fprintf (stderr, "ERROR [anamask]: calloc imgb\n");
				return (ERROR);
			}
a305 1
		free (imgb);
@


2.3
log
@permit dim=3
@
text
@d2 3
d45 3
a47 2
 *		16-Feb-99 (TOV) Modify to mask out pixels < 0
 *		29-Apr-99 (TOV) Modify to specify threshold as well as sign.
d52 1
a52 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 2.2 2008/10/31 20:19:03 tom Exp tom $";
d64 1
a64 1
int main (argc, argv)
d72 3
a74 3
	char           *img1, *hdr1;	 /* input file */
	char           *img2, *hdr2;	 /* mask file */
	char           *img3, *hdr3;	 /* output file */
d77 5
a81 4
	int				thresh, sign;
	int				ntypea, ntypeb;
	short          *imga, *imgb;	 /* image */
	float          *fimga, *fimgb;	 /* image */
d93 2
a94 2
	thresh = atoi(argv[7]);
	sign = atoi(argv[8]);
d112 1
a112 1
	if (ntypea != DT_SIGNED_SHORT && ntypea != DT_FLOAT) {
d117 1
a117 1
	if (hdra.dime.bitpix != 16 && hdra.dime.bitpix != 32) {
d126 1
a126 1
	num = dim1*dim2*dim3;
d128 8
a135 2
	if (ntypea == DT_SIGNED_SHORT) {
		imga = (short*) calloc (num, sizeof (short));
d141 1
a141 1
		fimga = (float*) calloc (num, sizeof (float));
d151 2
a152 2
	if (ntypea == DT_SIGNED_SHORT) {
		if ((fread (imga, sizeof(short), num, fd_img)) != num) {
d156 5
d162 1
a162 1
		if ((fread (fimga, sizeof(float), num, fd_img)) != num) {
d168 1
a168 1
	fprintf (stdout,"Read %s  type %d\n", img1, ntypea);
d186 1
a186 1
	if (ntypeb != DT_SIGNED_SHORT && ntypeb != DT_FLOAT) {
d191 1
a191 1
	if (hdrb.dime.bitpix != 16 && hdrb.dime.bitpix != 32) {
d200 2
a201 2
	
	if (num != dim1*dim2*dim3) {
d205 4
a208 5

	if (ntypeb == DT_SIGNED_SHORT) {
		imgb = (short*) calloc (num, sizeof (short));
		if (imgb == NULL) {
			fprintf (stderr, "ERROR [anamask]: calloc imgb\n");
d211 12
a222 5
	} else {
		fimgb = (float*) calloc (num, sizeof (float));
		if (fimgb == NULL) {
			fprintf (stderr, "ERROR [anamask]: calloc fimgb\n");
			return (ERROR);
d224 2
a225 8
	}
	if ((fd_img = fopen (img2, "r")) == 0) {
		fprintf (stderr, "ERROR [anamask]: opening %s\n", img2);
		return (ERROR);
	}
	if (ntypeb == DT_SIGNED_SHORT) {
		if ((fread (imgb, sizeof(short), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamask]: reading %s\n", img2);
d228 15
a242 4
	} else {
		if ((fread (fimgb, sizeof(float), num, fd_img)) != num) {
			fprintf (stderr, "ERROR [anamask]: reading %s\n", img2);
			return (ERROR);
d246 1
a246 1
	fprintf (stdout,"Read %s  type %d\n", img2, ntypeb);
d250 1
a250 1
	if (ntypea == DT_SIGNED_SHORT && ntypeb == DT_SIGNED_SHORT) {
d253 2
a254 1
				if (imgb[i] < thresh) imga[i] = 0;
d257 2
a258 1
				if (imgb[i] > thresh) imga[i] = 0;
d260 33
d294 1
a294 1
	} else if (ntypea == DT_SIGNED_SHORT && ntypeb == DT_FLOAT) {
d297 2
a298 1
				if (fimgb[i] < thresh) imga[i] = 0;
d301 2
a302 1
				if (fimgb[i] > thresh) imga[i] = 0;
d304 1
a304 1
		free (fimgb);
d308 2
a309 1
				if (imgb[i] < thresh) fimga[i] = 0;
d312 2
a313 1
				if (imgb[i] > thresh) fimga[i] = 0;
d316 22
d341 2
a342 1
				if (fimgb[i] < thresh) fimga[i] = 0;
d345 2
a346 1
				if (fimgb[i] > thresh) fimga[i] = 0;
d355 8
a362 2
	fprintf (stdout,"Write %s  type %d\n", img3, ntypea);
	if (ntypea == DT_SIGNED_SHORT) {
@


2.2
log
@bug fix in 2.1
@
text
@d2 3
d48 1
a48 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 2.1 2008/10/30 20:19:45 tom Exp tom $";
d164 1
a164 1
	if (hdrb.dime.dim[0] != 4) {
@


2.1
log
@update to dbh.h and permit dim=3
@
text
@d2 3
d45 1
a45 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 2.0 2004/02/13 17:57:47 tom Exp tom $";
d220 1
a220 1
	if (ntypea == DT_SIGNED_SHORT && ntypeb == DT_FLOAT) {
@


2.0
log
@Feb 2004
@
text
@d2 3
d42 1
a42 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 1.9 2002/03/07 15:37:31 tom Exp tom $";
d48 1
a48 1
#include <ANALYZE.h>
d54 1
a54 1
main (argc, argv)
d59 1
a59 1
	struct dsr      hdra, hdrb;		 /* ANALYZE.h */
d88 1
a88 1
		fprintf (stderr, "ERROR [anamask]: Cannot open: %s\n", hdr1);
d92 1
a92 1
		fprintf (stderr, "ERROR [anamask]: Reading: %s\n", hdr1);
d95 2
a96 2
	if (hdra.dime.dim[0] != 4) {
		fprintf (stderr, "ERROR [anamask]: Reading: %s\n", hdr1);
d101 2
a102 2
	if (ntypea != 4 && ntypea != 16) {
		fprintf (stderr, "ERROR [anamask]: Reading: %s\n", hdr1);
d107 1
a107 1
		fprintf (stderr, "ERROR [anamask]: Reading: %s\n", hdr1);
d117 1
a117 1
	if (ntypea == 4) {
d120 1
a120 1
			fprintf (stderr, "ERROR [anamask]: Cannot calloc imga\n");
d126 1
a126 1
			fprintf (stderr, "ERROR [anamask]: Cannot calloc fimga\n");
d131 1
a131 1
		fprintf (stderr, "ERROR [anamask]: Cannot open: %s\n", img1);
d134 1
a134 1
	if (ntypea == 4) {
d136 1
a136 1
			fprintf (stderr, "ERROR [anamask]: Reading: %s\n", img1);
d141 1
a141 1
			fprintf (stderr, "ERROR [anamask]: Reading: %s\n", img1);
d151 1
a151 1
		fprintf (stderr, "ERROR [anamask]: Cannot open: %s\n", hdr2);
d155 1
a155 1
		fprintf (stderr, "ERROR [anamask]: Reading: %s\n", hdr2);
d159 1
a159 1
		fprintf (stderr, "ERROR [anamask]: Reading: %s\n", hdr2);
d164 2
a165 2
	if (ntypeb != 4 && ntypeb != 16) {
		fprintf (stderr, "ERROR [anamask]: Reading: %s\n", hdr2);
d170 1
a170 1
		fprintf (stderr, "ERROR [anamask]: Reading: %s\n", hdr2);
d184 1
a184 1
	if (ntypeb == 4) {
d187 1
a187 1
			fprintf (stderr, "ERROR [anamask]: Cannot calloc imgb\n");
d193 1
a193 1
			fprintf (stderr, "ERROR [anamask]: Cannot calloc fimgb\n");
d198 1
a198 1
		fprintf (stderr, "ERROR [anamask]: Cannot open: %s\n", img2);
d201 1
a201 1
	if (ntypeb == 4) {
d203 1
a203 1
			fprintf (stderr, "ERROR [anamask]: Reading: %s\n", img2);
d208 1
a208 1
			fprintf (stderr, "ERROR [anamask]: Reading: %s\n", img2);
d217 1
a217 1
	if (ntypea == 4 && ntypeb == 4) {
d226 1
a226 1
	} else if (ntypea == 4 && ntypeb == 16) {
d235 1
a235 1
	} else if (ntypea == 16 && ntypeb == 4) {
d256 1
a256 1
		fprintf (stderr, "ERROR [anamask]: Unable to open %s\n", img3);
d260 1
a260 1
	if (ntypea == 4) {
d262 1
a262 1
			fprintf (stderr, "ERROR [anamask]: Error writing to: %s\n", img3);
d268 1
a268 1
			fprintf (stderr, "ERROR [anamask]: Error writing to: %s\n", img3);
d276 1
a276 1
		fprintf (stderr, "ERROR [anamask]: Unable to open %s\n", hdr3);
d280 1
a280 1
		fprintf (stderr, "ERROR [anamask]: Error writing to: %s\n", hdr3);
@


1.9
log
@use real or integer image files
@
text
@d2 3
d29 1
a29 1
 *	Date:			Feb-99
d37 1
d39 1
a39 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 1.8 1999/12/16 17:55:43 tom Exp tom $";
@


1.8
log
@sync version
@
text
@d2 3
d35 1
a35 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 1.6 1999/10/13 14:24:16 tom Exp tom $";
d52 1
a52 1
	struct dsr      hdr;			 /* ANALYZE.h */
d61 1
d63 1
d66 1
a66 1
		printf ("Usage: anamask img1 hdr1 img2 hdr2 img3 hdr3 thresh sign\n");
d84 1
a84 1
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
d88 1
a88 1
	if (hdr.dime.dim[0] != 4) {
d90 1
a90 1
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
d93 2
a94 1
	if (hdr.dime.datatype != 4) {
d96 1
a96 1
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
d99 1
a99 1
	if (hdr.dime.bitpix != 16) {
d101 1
a101 1
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
d104 4
a107 4
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	fclose (fd_hdr);
d110 12
a121 4
	imga = (short*) calloc (num, sizeof (short));
	if (imga == NULL) {
		fprintf (stderr, "ERROR [anamask]: Cannot calloc imga\n");
		return (ERROR);
d127 10
a136 3
	if ((fread (imga, sizeof(short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamask]: Reading: %s\n", img1);
		return (ERROR);
d138 2
a139 2
	fclose (fd_img);
	fprintf (stdout,"Read %s\n", img1);
d147 1
a147 1
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
d151 1
a151 1
	if (hdr.dime.dim[0] != 4) {
d153 1
a153 1
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
d156 2
a157 1
	if (hdr.dime.datatype != 4) {
d159 1
a159 1
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
d162 1
a162 1
	if (hdr.dime.bitpix != 16) {
d164 1
a164 1
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
d167 4
a170 4
	dim1 = hdr.dime.dim[1];
	dim2 = hdr.dime.dim[2];
	dim3 = hdr.dime.dim[3];
	fclose (fd_hdr);
d177 12
a188 4
	imgb = (short*) calloc (num, sizeof (short));
	if (imgb == NULL) {
		fprintf (stderr, "ERROR [anamask]: Cannot calloc imgb\n");
		return (ERROR);
d194 10
a203 3
	if ((fread (imgb, sizeof(short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamask]: Reading: %s\n", img2);
		return (ERROR);
d205 2
a206 2
	fclose (fd_img);
	fprintf (stdout,"Read %s\n", img2);
d210 27
a236 3
	if (sign > 0) {
		for (i = 0; i < num; i++)
			if (imgb[i] < thresh) imga[i] = 0;
d238 8
a245 2
		for (i = 0; i < num; i++)
			if (imgb[i] > thresh) imga[i] = 0;
a246 1
	free (imgb);
d252 13
a264 3
	if ((fwrite (imga, sizeof (short), num, fd_img)) != num) {
		fprintf (stderr, "ERROR [anamask]: Error writing to: %s\n", img3);
		return (ERROR);
d266 1
a266 1
	fclose (fd_img);
d272 1
a272 1
	if ((fwrite (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
d276 1
a276 1
	fclose (fd_hdr);
a277 1
	free (imga);
@


1.6
log
@change includes
@
text
@d2 3
d32 1
a32 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 1.5 1999/10/13 14:19:07 tom Exp tom $";
@


1.5
log
@changed to perform as stated in man page
it now retains pixels which are equal to the threshold.
@
text
@d2 4
d29 1
a29 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 1.4 1999/09/20 17:19:35 tom Exp tom $";
d33 1
a33 1
#include <string.h>
@


1.4
log
@fix bug in sign
@
text
@d2 3
d25 1
a25 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 1.3 1999/04/29 15:33:39 tom Exp tom $";
d168 1
a168 1
			if (imgb[i] <= thresh) imga[i] = 0;
d171 1
a171 1
			if (imgb[i] >= thresh) imga[i] = 0;
@


1.3
log
@add threshold
@
text
@d2 3
d22 1
a22 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 1.2 1999/02/16 16:44:37 tom Exp tom $";
d163 1
a163 1
	if (sign < 0) {
@


1.2
log
@permit masking out negative values
@
text
@d2 3
d15 1
d19 1
a19 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 1.1 1999/02/09 18:02:33 tom Exp tom $";
d44 1
a44 1
	int				sign;
d47 2
a48 2
	if (argc != 8) {
		printf ("Usage: anamask img1 hdr1 img2 hdr2 img3 hdr3 sign\n");
d57 2
a58 1
	sign = atoi(argv[7]);
d162 1
a162 1
			if (imgb[i] < 0) imga[i] = 0;
d165 1
a165 1
			if (imgb[i] > 0) imga[i] = 0;
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Log$ */
d10 2
d15 1
a15 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/anamask/RCS/anamask.c,v 1.1 1999/02/09 17:55:40 tom Exp $";
d40 1
d43 2
a44 2
	if (argc != 7) {
		printf ("Usage: anamask img1 hdr1 img2 hdr2 img3 hdr3\n");
d53 1
d155 7
a161 2
	for (i = 0; i < num; i++)
		if (imgb[i] > 0) imga[i] = 0;
@
