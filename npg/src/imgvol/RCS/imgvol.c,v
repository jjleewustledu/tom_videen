head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.10.26.18.43.15;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$Log$ */
/*	===============================================================================
 *	Module:			imgvol.c
 *	Date:			Oct 2006
 *	Author:			Tom Videen
 *	Description:	Determine volume of an object defined by all pixels in an
 *					ECAT image which are >= min and <= max.
 *	===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/imgvol/RCS/imgvol.c,v 2.1 2005/06/20 14:21:23 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <myvalues.h>
#include <libnrimg.h>
#include <image.h>
#include <libimage.h>
#include <nrutil.h>

/*	----------------------------
 *	Function:			imgvol
 *	----------------------------
 */
main (argc, argv)
	int             argc;
	char           *argv[];
{

	ImageFile      *file1;
	Index           indx;
	char           *fname;
	int             pdim[3];
	float           siz[3];
	float           unitvol;
	float           sum;
	float           min, max;
	long            count;
	int             i, j, k;
	float        ***img1;

	if (argc != 4) {
		fprintf (stderr, "Usage: imgvol fname min max\n");
		return (ERROR);
	}
	fname = argv[1];
	min = atof (argv[2]);
	max = atof (argv[3]);

	indx.frm = 1;
	indx.pln = 1;
	indx.gate = 1;
	indx.data = 0;
	indx.bed = 0;

	file1 = make_imgfile (fname);
	if (open_imgfile (file1) == ERROR) {
		fprintf (stderr, "ERROR [imgvol]: opening %s\n", fname);
		return (ERROR);
	}
	if (get_mh (file1) == ERROR) {
		fprintf (stderr, "ERROR [imgvol]: reading MainHeader in %s\n", fname);
		return (ERROR);
	}
	if (existimgfrm (file1, &indx) == ERROR) {
		indx.frm = 2;
		if (existimgfrm (file1, &indx) == ERROR) {
			fprintf (stderr, "ERROR [imgvol]: reading %s frame %d\n", fname, indx.frm);
			return (ERROR);
		}
	}
	if (get_sh (file1, &indx) == ERROR) {
		fprintf (stderr, "ERROR [imgvol]: reading subheader in %s\n", fname);
		return (ERROR);
	}
	pdim[0] = file1->sh->dim1;
	pdim[1] = file1->sh->dim2;
	pdim[2] = file1->sh->dim3;
	siz[0] = file1->sh->sample_size_1;
	siz[1] = file1->sh->sample_size_2;
	siz[2] = file1->sh->sample_size_3;
	unitvol = siz[0] * siz[1] * siz[2];

	if ((img1 = rdtensor (file1, &indx, pdim)) == NULL) {
		fprintf (stderr, "ERROR [imgvol]: reading %s\n", fname);
		return (ERROR);
	}
	close_imgfile (file1);

	count = 0;
	sum = 0;
	for (i = 1; i <= pdim[2]; i++)
		for (j = 1; j <= pdim[1]; j++)
			for (k = 1; k <= pdim[0]; k++)
				if (img1[i][j][k] >= min && img1[i][j][k] <= max) {
					count++;
					sum = sum + img1[i][j][k];
				}
	fprintf (stdout, "Volume = %ld voxels or %.3f cc\n", count, (float) count * unitvol);
	fprintf (stdout, "Sum = %.2f\n", sum);

	free (img1);
	return (OK);
}
@
