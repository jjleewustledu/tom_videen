head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2010.07.14.14.49.58;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	===============================================================================
 *	Module:			anapeak1.c
 *	Date:			Mar 2009
 *	Author:			Tom Videen
 *	Description:	Return coordinates of maximum pixel in image and fit within radius, r.
 *	===============================================================================
 */
/*@@unused@@*/
static char     rcsid[] = "$Header: /home/npggw/tom/src/anapeak1/RCS/anapeak1.c,v 1.1 2009/03/23 21:30:18 tom Exp tom $";

#include <stdio.h>
#include <stdlib.h>
#include <libnrimg.h>
#include <image.h>
#include <nrutil.h>
#include <libnrimg.h>
#include <ANALYZE.h>				 /* dsr */

int             main (argc, argv)
	int             argc;
	char           *argv[];
{
	struct dsr      hdr;			 /* header for Analyze */
	FILE           *fd_hdr;			 /* file for Analyze hdr */
	FILE           *fd_img;			 /* file for Analyze image */
	char           *hdrfile;
	char           *imgfile;
	int             dim[3];
	int             x0, y0, z0;
	int             x, y, z;
	int             r;
	int             i, j, k, n;
	int             xmin, xmax;
	int             ymin, ymax;
	int             zmin, zmax;
	float			sum, xsum, ysum, zsum;
	float			xmean, ymean, zmean;
	short        ***img;
	short          *row;
	short           val;
	float           maxval;

	if (argc != 4) {
		fprintf (stderr, "Usage:  anapeak1 hdr image radius\n");
		return (ERROR);
	}
	hdrfile = argv[1];
	imgfile = argv[2];
	r = atoi(argv[3]);
	if (r < 1) {
		fprintf (stderr, "ERROR [anapeak1]: radius must be >= 1");
		return (ERROR);
	}

/* Read Analyze hdr file	*/

	if ((fd_hdr = fopen (hdrfile, "r")) == 0) {
		fprintf (stderr, "ERROR [anapeak1]: opening %s\n", hdrfile);
		return (ERROR);
	}
	if ((fread (&hdr, sizeof (struct dsr), 1, fd_hdr)) != 1) {
		fprintf (stderr, "ERROR [anapeak1]: reading: %s\n", hdrfile);
		return (ERROR);
	}
	if (hdr.dime.dim[0] < 3) {
		fprintf (stderr, "ERROR [anapeak1]: reading %s\n", hdrfile);
		fprintf (stderr, "Dimensions = %d\n", hdr.dime.dim[0]);
		return (ERROR);
	}
	if (hdr.dime.datatype != 4 && hdr.dime.datatype != 16) {
		fprintf (stderr, "ERROR [anapeak1]: reading %s\n", hdrfile);
		fprintf (stderr, "Datatype = %d\n", hdr.dime.datatype);
		return (ERROR);
	}
	if (hdr.dime.bitpix != 16) {
		fprintf (stderr, "ERROR [anapeak1]: reading %s\n", hdrfile);
		fprintf (stderr, "Bits/pixel = %d\n", hdr.dime.bitpix);
		return (ERROR);
	}
	dim[0] = hdr.dime.dim[1];
	dim[1] = hdr.dime.dim[2];
	dim[2] = hdr.dime.dim[3];
	(void) fclose (fd_hdr);

/*
 *	Read the img and flip X, Y & Z from Analyze convention
 */

	if ((fd_img = fopen (imgfile, "r")) == 0) {
		fprintf (stderr, "ERROR [anapeak1]: opening %s\n", imgfile);
		return (ERROR);
	}
	if ((img = s3tensor (1, dim[2], 1, dim[1], 1, dim[0])) == NULL) {
		fprintf (stderr, "ERROR [anapeak1]: malloc img\n");
		return (ERROR);
	}
	if ((row = (short *) calloc (dim[0], sizeof (short))) == NULL) {
		fprintf (stderr, "ERROR [anapeak1]: malloc row\n");
		return (ERROR);
	}
	for (k = dim[2]; k > 0; k--) {
		for (j = dim[1]; j > 0; j--) {
			(void) fread (row, sizeof (short), dim[0], fd_img);
			for (i = 1; i <= dim[0]; i++) {
				n = dim[0] - i;
				img[k][j][i] = row[n];
			}
		}
	}

	(void) fclose (fd_img);
	free (row);

/*	First locate the peak pixel	*/

	x0 = 0;
	y0 = 0;
	z0 = 0;
	maxval = 0;
	for (z = 1; z <= dim[2]; z++) {
		for (y = 1; y <= dim[1]; y++) {
			for (x = 1; x <= dim[0]; x++) {
				val = img[z][y][x];
				if (val >= maxval) {
					maxval = val;
					x0 = x;
					y0 = y;
					z0 = z;
				}
			}
		}
	}
	fprintf (stdout, "Max = %.2f  (x,y,z) = %d %d %d\n", maxval, x0, y0, z0);

/*	Then find mean peak location within radius	*/
	
	xmin = x0 - r;
	xmax = x0 + r;
	ymin = y0 - r;
	ymax = y0 + r;
	zmin = z0 - r;
	zmax = z0 + r;

	n = 0;
	sum = 0;
	xsum = 0;
	ysum = 0;
	zsum = 0;
	for (z = zmin; z <= zmax; z++) {
		for (y = ymin; y <= ymax; y++) {
			for (x = xmin; x <= xmax; x++) {
				val = img[z][y][x];
				sum += val;
				xsum += x * val;
				ysum += y * val;
				zsum += z * val;
				n++;
			}
		}
	}
	xmean = xsum / sum;
	ymean = ysum / sum;
	zmean = zsum / sum;
	fprintf (stdout, "Mean = %.2f (x,y,z) = %5.2f %5.2f %5.2f\n", sum/n, xmean, ymean, zmean);

	free_s3tensor (img, 1, dim[2], 1, dim[1], 1, dim[0]);
	return (0);
}
@
