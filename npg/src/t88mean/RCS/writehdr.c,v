head	1.4;
access;
symbols;
locks
	tom:1.4; strict;
comment	@ * @;


1.4
date	95.11.10.18.48.23;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	94.10.03.16.17.13;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	94.05.18.15.53.30;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	93.09.29.16.01.52;	author tom;	state Exp;
branches;
next	;


desc
@initial version
@


1.4
log
@remove petutil parent directory from include statements
@
text
@/* $Log: writehdr.c,v $
 * Revision 1.3  1994/10/03  16:17:13  tom
 * standard format with indent
 *
 * Revision 1.2  1994/05/18  15:53:30  tom
 * changed $Id: writehdr.c,v 1.3 1994/10/03 16:17:13 tom Exp tom $ to $Header: /export/home/npggw/tom/src/t88mean/RCS/writehdr.c,v 1.3 1994/10/03 16:17:13 tom Exp tom $
 * */
/*	========================================================================
 *	Module:			writehdr.c
 *	Date:			27-Sep-93
 *	Author:			Tom Videen
 *	Description:	Write an hdr file
 *
 *	Input:
 *		header  -   hdr structure
 *		outfile -   name of output file
 *		userid  -   user's id  
 *		today   -   date
 *		processing - type of processing
 *		nslices -   number of slces
 *	 
 *	Output:
 *		creates the file "outfile"
 *	 
 *	Algorithm:
 *	1)  Open the outfile.
 *	2)  Copy the hdr structure in "header" to a OS32-hdr structure:
 *		All real numbers must be converted from IEEE format to OS32 format.
 *	3)  Add or change the following to the header:
 *			outfile -   name of output file
 *			userid  -   user's id  
 *			today   -   date
 *			ntype   -   code number for type of processing
 *			nslices -   number of slces
 *	4)  Write the new structure to the output file and close.
 *	
 *	========================================================================
 */

#include <stdio.h>
#include <string.h>
#include <petutil.h>

static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/writehdr.c,v 1.3 1994/10/03 16:17:13 tom Exp tom $";

int 
writehdr (header, outfile, userid, today, processing, nslices)
	HEADER_DATA    *header;
	char           *outfile;
	char           *userid;
	char           *today;
	char           *processing;
	short           nslices;
{
	char            filename[255];
	char           *ext;
	float           zero = 0.;
	float           factor;
	FILE           *hdrfp;
	OS32_HEADER_DATA *os32_header;

	strcpy (filename, outfile);
	ext = strrchr (filename, '.');
	strcpy (ext, ".hdr");

	if ((hdrfp = fopen (filename, "w")) == (FILE *) NULL) {
		printf (" Error: Cannot open header file %s\n", filename);
		return (FAIL);
	}
	os32_header = (OS32_HEADER_DATA *) malloc (sizeof (HEADER_DATA));
	bcopy (header, os32_header, sizeof (OS32_HEADER_DATA));

	os32_header->slices = nslices;
	strncpy (os32_header->initials, userid, sizeof (os32_header->initials));
	strncpy (os32_header->procdate, today, sizeof (os32_header->procdate));

	os32_header->totalcnts = ieee2pe (&header->totalcnts);
	os32_header->scancnts = ieee2pe (&header->scancnts);
	os32_header->scanst = ieee2pe (&header->scanst);
	os32_header->scanlen = ieee2pe (&header->scanlen);
	os32_header->framelen = ieee2pe (&header->framelen);
	os32_header->tau = ieee2pe (&header->tau);
	os32_header->pettcnv1 = ieee2pe (&header->pettcnv1);
	os32_header->aflow1 = ieee2pe (&header->aflow1);
	os32_header->bflow1 = ieee2pe (&header->bflow1);
	os32_header->bvfactor1 = ieee2pe (&header->bvfactor1);
	os32_header->aoxygen1 = ieee2pe (&header->aoxygen1);
	os32_header->boxygen1 = ieee2pe (&header->boxygen1);
	os32_header->awater1 = ieee2pe (&header->awater1);
	os32_header->bwater1 = ieee2pe (&header->bwater1);
	os32_header->o2cnts1 = ieee2pe (&header->o2cnts1);
	os32_header->oxycont1 = ieee2pe (&header->oxycont1);
	os32_header->decay_factor1 = ieee2pe (&header->decay_factor1);
	os32_header->pettcnv2 = ieee2pe (&header->pettcnv2);
	os32_header->aflow2 = ieee2pe (&header->aflow2);
	os32_header->bflow2 = ieee2pe (&header->bflow2);
	os32_header->bvfactor2 = ieee2pe (&header->bvfactor2);
	os32_header->aoxygen2 = ieee2pe (&header->aoxygen2);
	os32_header->boxygen2 = ieee2pe (&header->boxygen2);
	os32_header->awater2 = ieee2pe (&header->awater2);
	os32_header->bwater2 = ieee2pe (&header->bwater2);
	os32_header->o2cnts2 = ieee2pe (&header->o2cnts2);
	os32_header->oxycont2 = ieee2pe (&header->oxycont2);
	os32_header->decay_factor2 = ieee2pe (&header->decay_factor2);
	os32_header->pieslope = ieee2pe (&header->pieslope);
	os32_header->efactor = ieee2pe (&header->efactor);

	if (os32_header->ntype == 1) {
		if (strcmp (processing, "oef") == 0)
			os32_header->ntype = 11;
		else if (strcmp (processing, "cmro2") == 0)
			os32_header->ntype = 12;

		factor = 0.001;
		os32_header->aoxygen1 = ieee2pe (&factor);
		os32_header->boxygen1 = ieee2pe (&zero);
		os32_header->awater1 = ieee2pe (&zero);
		os32_header->bwater1 = ieee2pe (&zero);
		os32_header->o2cnts1 = ieee2pe (&zero);
		os32_header->oxycont1 = ieee2pe (&zero);
		os32_header->pettcnv1 = ieee2pe (&header->pettcnv1);

	} else if (os32_header->ntype == 2 || os32_header->ntype == 4) {
		factor = 0.02;
		os32_header->aflow1 = ieee2pe (&zero);
		os32_header->bflow1 = ieee2pe (&factor);
		os32_header->pettcnv1 = ieee2pe (&header->pettcnv1);

	} else if (os32_header->ntype == 3) {
		factor = 0.01;
		os32_header->bvfactor1 = ieee2pe (&factor);
		os32_header->pettcnv1 = ieee2pe (&header->pettcnv1);
	}
	fwrite (os32_header, sizeof (HEADER_DATA), 1, hdrfp);

	fclose (hdrfp);
	free (os32_header);
}
@


1.3
log
@standard format with indent
@
text
@d2 3
d6 1
a6 1
 * changed $Id$ to $Header$
d42 1
a42 1
#include <petutil/petutil.h>
d44 1
a44 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/writehdr.c,v 1.2 1994/05/18 15:53:30 tom Exp tom $";
@


1.2
log
@changed $Id$ to $Header$
@
text
@d1 4
a4 1
/* $Log$ */
d6 3
a8 3
 *	Module:				writehdr.c
 *	Date:					27-Sep-93
 *	Author:				Tom Videen
d10 24
d41 1
a41 1
static char rcsid []= "$Header: writehdr.c,v 1.1 92/12/30 04:21:11 tom Exp $";
d43 8
a50 7
int writehdr (header, outfile, userid, today, processing, nslices)
	HEADER_DATA	*header;
	char	*outfile;
	char	*userid;
	char	*today;
	char	*processing;
	short	nslices;
d52 6
a57 6
	char		filename [255];
	char		*ext;
	float		zero = 0.;
	float		factor;
	FILE		*hdrfp;
	OS32_HEADER_DATA	*os32_header;
d67 1
a67 2

	os32_header	= (OS32_HEADER_DATA *) malloc (sizeof (HEADER_DATA));
d74 16
a89 16
	os32_header->totalcnts	= ieee2pe (&header->totalcnts);
	os32_header->scancnts		= ieee2pe (&header->scancnts);
	os32_header->scanst			= ieee2pe (&header->scanst);
	os32_header->scanlen		= ieee2pe (&header->scanlen);
	os32_header->framelen		= ieee2pe (&header->framelen);
	os32_header->tau				= ieee2pe (&header->tau);
	os32_header->pettcnv1		= ieee2pe (&header->pettcnv1);
	os32_header->aflow1			= ieee2pe (&header->aflow1);
	os32_header->bflow1			= ieee2pe (&header->bflow1);
	os32_header->bvfactor1	= ieee2pe (&header->bvfactor1);
	os32_header->aoxygen1		= ieee2pe (&header->aoxygen1);
	os32_header->boxygen1		= ieee2pe (&header->boxygen1);
	os32_header->awater1		= ieee2pe (&header->awater1);
	os32_header->bwater1		= ieee2pe (&header->bwater1);
	os32_header->o2cnts1		= ieee2pe (&header->o2cnts1);
	os32_header->oxycont1		= ieee2pe (&header->oxycont1);
d91 10
a100 10
	os32_header->pettcnv2		= ieee2pe (&header->pettcnv2);
	os32_header->aflow2			= ieee2pe (&header->aflow2);
	os32_header->bflow2			= ieee2pe (&header->bflow2);
	os32_header->bvfactor2	= ieee2pe (&header->bvfactor2);
	os32_header->aoxygen2		= ieee2pe (&header->aoxygen2);
	os32_header->boxygen2		= ieee2pe (&header->boxygen2);
	os32_header->awater2		= ieee2pe (&header->awater2);
	os32_header->bwater2		= ieee2pe (&header->bwater2);
	os32_header->o2cnts2		= ieee2pe (&header->o2cnts2);
	os32_header->oxycont2		= ieee2pe (&header->oxycont2);
d102 2
a103 2
	os32_header->pieslope		= ieee2pe (&header->pieslope);
	os32_header->efactor		= ieee2pe (&header->efactor);
d109 1
a109 1
      os32_header->ntype = 12;
d112 7
a118 7
		os32_header->aoxygen1	= ieee2pe (&factor);
		os32_header->boxygen1	= ieee2pe (&zero);
		os32_header->awater1	= ieee2pe (&zero);
		os32_header->bwater1	= ieee2pe (&zero);
		os32_header->o2cnts1	= ieee2pe (&zero);
		os32_header->oxycont1	= ieee2pe (&zero);
		os32_header->pettcnv1	= ieee2pe (&header->pettcnv1);
d122 3
a124 3
		os32_header->aflow1		= ieee2pe (&zero);
		os32_header->bflow1		= ieee2pe (&factor);
		os32_header->pettcnv1	= ieee2pe (&header->pettcnv1);
d129 1
a129 1
		os32_header->pettcnv1	= ieee2pe (&header->pettcnv1);
d131 1
a131 2

	fwrite (os32_header, sizeof (HEADER_DATA), 1, hdrfp); 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Log */
d13 2
@
