head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	93.08.12.22.58.02;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	93.08.06.15.16.49;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	93.08.05.22.22.58;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	93.06.24.18.57.01;	author tom;	state Exp;
branches;
next	;


desc
@Initial test version of tal88 reproduces the output of the current hd6mean
everywhere within the 100x100 inner array of pixels.
Tested by TOV 24-Jun-93 using p2000ho1 (PETT VI image)
@


1.4
log
@equivalent to hd6mean
@
text
@/* $Log: atlas_trans.c,v $
 * Revision 1.3  1993/08/06  15:16:49  tom
 * reads prm and list files
 *
 * Revision 1.2  1993/08/05  22:22:58  tom
 * revised matrix_mult and eliminated matrix_point_mult
 *
 * Revision 1.1  1993/06/24  18:57:01  tom
 * Initial revision
 *
 */
/*	========================================================================
 *	Module:				atlas_trans.c
 *	Date:					24-Jun-93
 *	Author:				Tom Videen
 *	Description:	Remap a 7 or 31-slice PET image into a 49-slice Talairach 1988 brain image
 *	History:
 *		24-Jun-93		Original version (1.1) reproduces output of hd6mean
 *		05-Aug-93		Modified to use new matrix_mult.c
 *		12-Aug-93		Added use_mask and mask.
 *	========================================================================
 */

#include <stdio.h>
#include <math.h>
#include <petutil/petutil.h>			/* SXR_OUTPUT */
#include "atlas.h"								/* BRAIN_ATLAS, MATRIX, DIM, MATDIM, POINT */

#define UNDEFINED 	0			/* atlas value when a pixel maps to a point outside the PET array */
#define TOLERANCE 0.001		/* max distance from a slice for which to use 2-D interpolation */

static char rcsid []= "$Id: atlas_trans.c,v 1.3 1993/08/06 15:16:49 tom Exp tom $";

/*	-----------------------
 *	Function atlas_trans
 *	-----------------------
 */
void atlas_trans (pet, atl, nin, sxr, atlas, use_mask, mask)
	REAL_SLICE		*pet;			/* PET image array */
	REAL_SLICE		*atl;			/* atlas image array */
	SHORT_SLICE		*nin;			/* number of images contributing to each pixel in atlas array */
	SXR_OUTPUT		sxr;			/* information from sxr file */
	BRAIN_ATLAS		atlas;		/* brain atlas definition */
	BOOLEAN				use_mask; /* if true, only include pixels in mask */
	REAL_SLICE		*mask;		/* mask for PET images */

{
	extern	matrix_mult();	/* matrix times matrix multiplication */

	float		x_trans;    /* x-translation for slice za */
	float		anglex;    	/* sxr.degx converted to radians */
 	float		f;         	/* weighting factor */

	MATRIX	t;  			  /* 1st translation matrix */
	MATRIX	r;    		  /* rotation matrix */
	MATRIX	s1;   		  /* 1st scaling matrix */
	MATRIX	s2;  			  /* 2nd scaling matrix */
	MATRIX	w;    		  /* 2nd translation matrix */
	MATRIX	map; 		 		/* combined conversion matrix ATL-->PET */
	MATRIX	ma;   			/* temporary matrix */
	MATRIX	mb;   			/* temporary matrix */
	MATRIX	mc;   			/* temporary matrix */

	MATRIX	x;    			/* transformation matrix for x */
	MATRIX	v;    			/* 2nd translation matrix for x */
	MATRIX	xmap; 			/* concatenated X*MAP */
	POINT		a;    			/* point in ATL-space; a[MATDIM] */
	POINT		p;    			/* point in PET-space; p[MATDIM] */
	POINT		q;    			/* point in PET-space; q[MATDIM] */

	float		wx;         /* weighting factor for x */
	float		wy;         /* weighting factor for y */
	float		wz;         /* weighting factor for z */
	float		val;        /* temporary value computed for ATL */
	float		x_width;    /* PET x-width for slice za */
	float		zp;         /* PET z-location for point a(x,ya,za) */
	float		temp;				/* local real no. for z1 */
	float		z_min;
	float		z_max;

	int			xa;         /* index to atlas x */
	int			ya;         /* index to atlas y */
	int			za;         /* index to atlas slice number */

	int			x1, x2;     /* indices to PET x */
	int			y1, y2;     /* indices to PET y */
	int			z1, z2;     /* indices to PET z */
	int			xmax;				/* maximum index for PET x */
	int			ymax;				/* maximum index for PET y */
	int			zmax;				/* maximum index for PET z */
	int			i, j, k;

	xmax = DIM - 1;
	ymax = DIM - 1;
	zmax = sxr.number_slices - 1;
	z_min = 0. - TOLERANCE;
	z_max = (float) zmax + TOLERANCE;

/*
 *	Initialize matrices
 */

	for (i = 0; i < MATDIM; ++i) {
		for (j = 0; j < MATDIM; ++j) {
			t[i][j]		= 0;
			r[i][j]		= 0;
			s1[i][j]	= 0;
			s2[i][j]	= 0;
			w[i][j]		= 0;
			x[i][j]		= 0;
			v[i][j]		= 0;
		}
		t[i][i]		= 1;
		r[i][i] 	= 1;
		s1[i][i]	= 1;
		s2[i][i]	= 1;
		w[i][i] 	= 1;
		x[i][i]		= 1;
		v[i][i]		= 1;
	}
	x_trans = 0;
	x_width = 0;

	adjust_markers (sxr);								/* Correct sxr.dz to specific geometry */

	anglex = -PI * sxr.degx / 180;			/* Convert angle degrees-->radians */

/*
 *	COMPUTE the transformation matrix MAP
 *	-------------------------------------
 *
 *	y- and z-translation:  (Atlas image origin x0,y0,z0 --> matrix origin 0,0,0)
 */

	t[1][3] = -atlas.y0;
	t[2][3] = -atlas.z0;

/*
 *	x-rotation: rotate about matrix origin
 */

	r[1][1] =  cos(anglex);
	r[1][2] =  sin(anglex);
	r[2][1] = -sin(anglex);
	r[2][2] =  cos(anglex);

/*
 *	y- and z-scaling:  (Atlas dim --> PET dim)
 */

	s1[1][1] = sxr.magnification_factor * sxr.apxray / atlas.ydim[atlas.z0];
	s1[2][2] = sxr.magnification_factor * sxr.zxray / atlas.zdim;

/*
 *	y- and z-scaling:  (Atlas pixels --> PET pixels)
 */

	s2[1][1] = atlas.pixel_size / sxr.pixel_size;
	s2[2][2] = atlas.slice_separation / sxr.slice_separation;

/*
 *	x-, y- and z-translation:  (matrix origin --> PET image origin)
 *
 *	Notes:
 *		x_trans, apcenter and reference_slice are entered in the sxr file 
 *		using an array which counts from 1 instead of 0.  Hence:
 *
 *	1) x-translation is mean offset of PET image center from PET matrix origin,
 *		but skip top and bottom slices as unreliable;
 *		-1 used to adjust from pixel number (counting from 0) to array index;
 *	2) y-translation uses -1 to adjust from pixel number (counting from 0) to array index;
 *	3) z-translation uses -1 to adjust slice number to array index;
 */

#if 0
	x_trans = 0;
	for (i = 1; i < zmax; ++i) {
		x_trans = x_trans + sxr.rlcenter[i];
	}
	x_trans = (x_trans / (float) (zmax - 1)) - 0;
#endif

	w[1][3] = (sxr.apcenter - 1) + (sxr.dap * sxr.magnification_factor / sxr.pixel_size);
	w[2][3] = (sxr.reference_slice - 1) - (sxr.dz / sxr.slice_separation);

/*
 *	Concatenate matrices to create map:
 */

	matrix_mult (s1, t, ma, MATDIM, MATDIM, MATDIM);
	matrix_mult (r, ma, mb, MATDIM, MATDIM, MATDIM);
	matrix_mult (s2, mb, mc, MATDIM, MATDIM, MATDIM);
	matrix_mult (w, mc, map, MATDIM, MATDIM, MATDIM);

/*
 *	Translation, Rotation, and Scaling LOOP for ALL ATLAS PIXELS
 *	-------------------------------------------------------------
 */

	a[3] = 1;

	printf ("z =   ");
	for (za = 0; za < atlas.nz; ++za) {
		printf ("%c%c%2d", 8, 8, za);
		for (ya = 0; ya < atlas.ny; ++ya) {
			a[0] = atlas.x0;
			a[1] = (float) (ya);
			a[2] = (float) (za);

/*
 *	Compute x-scaler for each atlas row:
 */
			matrix_mult (map, a, q, MATDIM, 1, MATDIM);
			zp = q[2];
			if (zp <= 0) {
				x_trans = sxr.rlcenter[0];
				x_width = sxr.rlpetdim[0];
			} else if (zp >= (float) zmax) {
				x_trans = sxr.rlcenter[zmax];
				x_width = sxr.rlpetdim[zmax];
			} else {
				for (i = 1; i <= zmax; ++i) {
					if (zp <= (float) i) {
						f = zp - (float) (i-1);
						x_trans = ((1-f) * sxr.rlcenter[i-1]) + (f * sxr.rlcenter[i]);
						x_width = ((1-f) * sxr.rlpetdim[i-1]) + (f * sxr.rlpetdim[i]);
						break;
					}
				}
			}
			x_trans = x_trans - 1;

/*
 *	x-translation:  (Atlas image origin --> matrix origin)
 */
			x[0][3] = -atlas.x0;

/*
 *	x-scaler:  (Atlas pixels --> PET pixels)
 */
			s1[0][0] = x_width * atlas.pixel_size / atlas.xdim[za];
			s1[1][1] = 1;
			s1[2][2] = 1;

/*
 *	x-translation:  (matrix origin --> PET image origin)
			v[0][3] = x_trans - 1;
 */
			v[0][3] = x_trans;

/*
 *	Concatenate matrices:
 */
	    matrix_mult (s1, x, ma, MATDIM, MATDIM, MATDIM);
  	  matrix_mult (v, ma, mb, MATDIM, MATDIM, MATDIM);
    	matrix_mult (mb, map, xmap, MATDIM, MATDIM, MATDIM);

/*
 *	LOOP for each row
 *	-----------------
 */
			for (xa = 0; xa < atlas.nx; ++xa) {
				a[0] = (float) (xa);

/*
 *	Find coordinates of point A in PET space (XMAP*A --> P)
 */
				matrix_mult (xmap, a, p, MATDIM, 1, MATDIM);
				x1 = (int) p[0];
				y1 = (int) p[1];
				z1 = (int) p[2];
				x2 = x1 + 1;
				y2 = y1 + 1;
				z2 = z1 + 1;
				temp = (float) z1;
/*
 *	If outside PET array, ATL = UNDEFINED
 */
				if (x2 > xmax || y2 > ymax || temp > z_max || x1 < 0 || y1 < 0 || temp < z_min) {
					atl[za][ya][xa] = UNDEFINED;
				}
/*
 *	If P is within tolerance of a PET slice, use 2-D interpolation
 */
				else if (fabs (p[2] - temp) <= TOLERANCE) {
					if (use_mask && (!mask[z1][y1][x1] || !mask[z1][y1][x2] || 
							!mask[z1][y2][x1] || !mask[z1][y2][x2]))
						atl[za][ya][xa] = UNDEFINED;
					else {
						wx = p[0] - (float) x1;
						wy = p[1] - (float) y1;
						val = (1 - wx) * (1 - wy) * pet[z1][y1][x1] +
									   wx    * (1 - wy) * pet[z1][y1][x2] +
									(1 - wx) *    wy    * pet[z1][y2][x1] +
									   wx    *    wy    * pet[z1][y2][x2];
						atl[za][ya][xa] = val;
						nin[za][ya][xa] += 1;
					}
				}
/*
 *  If P is not within TOLERANCE of slice 0 or zmax, 
 *	then p[2] must be greater than 0. and less than zmax
 */
        else if (z1 < 0 || z2 > zmax) {
          atl[za][ya][xa] = UNDEFINED;
				}
/*
 *	Otherwise use 3-D interpolation
 */
				else {
					if (use_mask && ( !mask[z1][y1][x1] || !mask[z1][y1][x2] || 
							!mask[z1][y2][x1] || !mask[z1][y2][x2] || !mask[z2][y1][x1] || 
							!mask[z2][y1][x2] || !mask[z2][y2][x1] || !mask[z2][y2][x2]) )
						atl[za][ya][xa] = UNDEFINED;
					else {
						wx = p[0] - (float) x1;
						wy = p[1] - (float) y1;
						wz = p[2]- (float) z1;
						val = (1 - wx) * (1 - wy) * (1 - wz) * pet[z1][y1][x1] +
									   wx    * (1 - wy) * (1 - wz) * pet[z1][y1][x2] +
									(1 - wx) *    wy    * (1 - wz) * pet[z1][y2][x1] +
									   wx    *    wy    * (1 - wz) * pet[z1][y2][x2] +
									(1 - wx) * (1 - wy) *    wz    * pet[z2][y1][x1] +
									   wx    * (1 - wy) *    wz    * pet[z2][y1][x2] +
									(1 - wx) *    wy    *    wz    * pet[z2][y2][x1] +
									   wx    *    wy    *    wz    * pet[z2][y2][x2];
						atl[za][ya][xa] = val;
						nin[za][ya][xa] += 1;
					}
				}		/* end point  */
			}			/* end row    */
		}				/* end column */
	}					/* end plane  */
	printf ("\n");
}

@


1.3
log
@reads prm and list files
@
text
@d2 3
d20 1
d29 1
a29 1
#define UNDEF 	0					/* atlas value when a pixel maps to a point outside the PET array */
d32 1
a32 1
static char rcsid []= "$Id: atlas_trans.c,v 1.2 1993/08/05 22:22:58 tom Exp tom $";
d38 9
a46 6
void atlas_trans (pet, atl, nin, sxr, atlas)
	REAL_SLICE		*pet;	/* PET image array */
	REAL_SLICE		*atl;	/* atlas image array */
	SHORT_SLICE		*nin;	/* number of images contributing to each pixel in atlas array */
	SXR_OUTPUT		sxr;	/* information from sxr file */
	BRAIN_ATLAS		atlas;/* brain atlas definition */
d48 1
a48 1
	extern	matrix_mult();				/* matrix times matrix multiplication */
d78 2
d96 2
d124 1
a124 1
	adjust_markers (sxr);								/* Correct dzi to specific geometry */
d165 3
d175 1
d180 2
a181 1
	x_trans = (x_trans / (float) (sxr.number_slices - 2)) - 1;
d202 1
d204 1
a204 1
		printf ("za = %d\n", za);
a212 1

d215 2
a216 1
			if (zp <= 0)
d218 2
a219 1
			else if (zp >= (float) zmax)
d221 1
a221 1
			else {
d225 1
d231 1
d247 1
d249 1
a249 1
			v[0][3] = x_trans - 1;
d277 1
a277 1
 *	If outside PET array, ATL = UNDEF
d279 3
a281 3
				if (x2 > xmax || y2 > ymax || z1 > zmax || x1 < 0 || y1 < 0 || z1 < 0) {
					atl[za][ya][xa] = UNDEF;
				} else
d285 15
a299 10
				if ( (p[2] >= temp  &&  p[2] - temp <= TOLERANCE) ||
					   (temp >  p[2]  &&  temp - p[2] <= TOLERANCE) ) {
					wx = p[0] - (float) x1;
					wy = p[1] - (float) y1;
					val = (1 - wx) * (1 - wy) * pet[z1][y1][x1] +
								   wx    * (1 - wy) * pet[z1][y1][x2] +
								(1 - wx) *    wy    * pet[z1][y2][x1] +
								   wx    *    wy    * pet[z1][y2][x2];
				} else

d304 3
a306 4
        if (p[2] < 0. || p[2] > (float) zmax) {
          atl[za][ya][xa] = UNDEF;
        } else

d310 25
a334 28
				{
					wx = p[0] - (float) x1;
					wy = p[1] - (float) y1;
					wz = p[2]- (float) z1;
					val = (1 - wx) * (1 - wy) * (1 - wz) * pet[z1][y1][x1] +
								   wx    * (1 - wy) * (1 - wz) * pet[z1][y1][x2] +
								(1 - wx) *    wy    * (1 - wz) * pet[z1][y2][x1] +
								   wx    *    wy    * (1 - wz) * pet[z1][y2][x2] +
								(1 - wx) * (1 - wy) *    wz    * pet[z2][y1][x1] +
								   wx    * (1 - wy) *    wz    * pet[z2][y1][x2] +
								(1 - wx) *    wy    *    wz    * pet[z2][y2][x1] +
								   wx    *    wy    *    wz    * pet[z2][y2][x2];
				}

/*
 *	Atlas value is val
 */

				atl[za][ya][xa] = val;

/*
 *	Update NIN
 */
				nin[za][ya][xa] += 1;

			}				/* end LOOP for each row    */
		}					/* end LOOP for each column */
	}						/* end LOOP for each plane  */
@


1.2
log
@revised matrix_mult and eliminated matrix_point_mult
@
text
@d2 3
d28 1
a28 1
static char rcsid []= "$Id: atlas_trans.c,v 1.1 1993/06/24 18:57:01 tom Exp $";
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$
d12 2
d25 1
a25 1
static char rcsid []= "$Id$";
a38 1
	extern 	matrix_point_mult();	/* matrix times a point */
a157 1
/*
a162 1
*/
d171 4
a174 4
	matrix_mult (s1, t, ma);
	matrix_mult (r, ma, mb);
	matrix_mult (s2, mb, mc);
	matrix_mult (w, mc, map);
d194 1
a194 1
			matrix_point_mult (map, a, q);
d196 1
a196 1
			if (zp <= 0) {
d198 1
a198 2
				x_trans = sxr.rlcenter[0];
			} else if (zp >= (float) zmax) {
d200 1
a200 2
				x_trans = sxr.rlcenter[zmax];
			} else {
a204 1
						x_trans = ((1-f) * sxr.rlcenter[i-1]) + (f * sxr.rlcenter[i]);
d230 3
a232 3
	    matrix_mult (s1, x, ma);
  	  matrix_mult (v, ma, mb);
    	matrix_mult (mb, map, xmap);
d244 1
a244 1
				matrix_point_mult (xmap, a, p);
@
