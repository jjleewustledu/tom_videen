head	3.8;
access;
symbols;
locks; strict;
comment	@ * @;


3.8
date	2004.02.20.16.15.35;	author tom;	state Exp;
branches;
next	3.7;

3.7
date	99.12.17.16.06.32;	author tom;	state Exp;
branches;
next	3.6;

3.6
date	96.05.10.22.00.07;	author tom;	state Exp;
branches;
next	3.5;

3.5
date	95.11.10.18.47.52;	author tom;	state Exp;
branches;
next	3.4;

3.4
date	95.01.19.19.17.03;	author tom;	state Exp;
branches;
next	3.3;

3.3
date	94.10.03.16.17.13;	author tom;	state Exp;
branches;
next	3.2;

3.2
date	94.09.14.14.40.24;	author tom;	state Exp;
branches;
next	3.1;

3.1
date	94.05.18.15.53.30;	author tom;	state Exp;
branches;
next	3.0;

3.0
date	94.05.11.17.16.34;	author tom;	state Exp;
branches;
next	1.15;

1.15
date	94.05.11.17.15.36;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	94.05.10.15.33.19;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	94.04.29.17.37.10;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	94.04.28.22.28.53;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	94.04.28.22.09.02;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	93.10.19.14.04.32;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	93.10.04.16.44.35;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	93.10.01.16.41.34;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	93.08.26.17.26.35;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	93.08.20.20.24.07;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	93.08.19.22.55.48;	author tom;	state Exp;
branches;
next	;


desc
@a corrected hd6mean-atlas version of t88mean
@


3.8
log
@Feb 2004
@
text
@/* $Log: atlas_transform.c,v $
 * Revision 3.7  1999/12/17  16:06:32  tom
 * lint cleaning
 *
 * Revision 3.6  1996/05/10  22:00:07  tom
 * new libimage
 * indexing from 1 on images and atlas
 *
 * Revision 3.5  1995/11/10  18:47:52  tom
 * remove petutil parent directory from include statements
 *
 * Revision 3.4  1995/01/19  19:17:03  tom
 * weights
 *
 * Revision 3.3  1994/10/03  16:17:13  tom
 * Separate functions atlas_scalers and matrix_transform;
 *
 * Revision 3.2  1994/09/14  14:40:24  tom
 * Allow > 49 slices in atlas and any z-origin
 *
 * Revision 3.1  1994/05/18  15:53:30  tom
 */
/*	========================================================================
 *	Module:			atlas_transform.c
 *	Date:			Aug 1993
 *	Author:			Tom Videen
 *	Description:	Transform a PET image into Atlas space
 *
 *  Input:
 *		pet		-	PET image;
 *		pdim	-	PET image dimensions;
 *		adim	-	atlas image dimensions;
 *		weight	-	weighting factor for this image;
 *		mask	-	masking image;
 *		map		-	conversion matrix Atlas -> PET
 *		use_mask -	1-> only include pixels in mask;
 *		compute_sd - 1-> compute sum of squares;
 *      first_slice, last_slice -   range of slices from which an x-scaler may be accepted;
 *
 *  Output:
 *		atl		-	atlas image;
 *		sd		-	sum-of-squares image;
 *		totwt	-	total weight of images contributing to each pixel in atlas image;
 *
 *	History:
 *		Aug 1993	Modified atlas_trans.c; center and angle are passed in
 *		Aug 1993	Modified to include use_pet to compute y-scaler from PET
 *		Sep 1993	Modified to compute running sum and sd;
 *					(pass additional parameters: sd, compute_sd)
 *		Oct 1993	Eliminate atl = UNDEFINED; atl is now altered only when it is defined;
 *		Oct 1993	Angles correspond with those returned from imgrot.
 *		Apr 1994	added first_slice and last_slice to limit PET slices included
 *		Apr 1994	subtract 10 cm from atlas.ydim[atlas.z0] when use_pet = TRUE
 *		May 1994	corrected order of matrix concatenation;
 *					eliminate use_pet option for y-width
 *		Sep 1994	use atlas.nz for loop through atlas array;
 *		Sep 1994	if no PET slice contains the AC-PC plane, compute an x-scaling factor
 *					based on the nearest slice to it
 *		Sep 1994	Remove as separate functions: atlas_scalers and matrix_transform
 *		Mar 1996	Convert indexing to Numerical Recipes standard (1-based).
 *	========================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/atlas_transform.c,v 3.7 1999/12/17 16:06:32 tom Exp tom $";
#endif

#include <stdio.h>
#include <math.h>
#include <nrutil.h>
#include <matrixlib.h>		 /* vector_mult */

#define TOLERANCE 0.001		 /* max distance from a slice for which to use 2-D interpolation */

/*	-----------------------
 *	Function atlas_transform
 *	-----------------------
 */
void            atlas_transform (pet, pdim, atl, adim, sd, weight, totwt, mask, map,
				                 use_mask, compute_sd, first_slice, last_slice)
	float        ***pet;		 /* PET image array */
	long           *pdim;		 /* pet image dimensions */
	float        ***atl;		 /* atlas image array */
	long           *adim;		 /* atlas image dimensions */
	float        ***sd;			 /* sum of squares */
	double          weight;
	float        ***totwt;		 /* num of images contributing to each pixel in atl array */
	float        ***mask;		 /* mask for PET images */
	float         **map;		 /* conversion matrix Atlas -> PET   */
	int				use_mask;	 /* 1 -> only include pixels in mask */
	int				compute_sd;	 /* 1 -> compute sum of squares */
	int             first_slice;
	int             last_slice;

{
	float          *a;			 /* vector in ATL-space; a[4] */
	float          *p;			 /* vector in PET-space; p[4] */
	float           wx, wy, wz;	 /* weighting factors for x, y, z */
	float           val;		 /* temporary value computed for ATL */
	float           temp;		 /* local real no. for z1 */
	float           zmin, zmax;

	long            xa, ya, za;		 /* indices to atl */
	long            x1, y1, z1;		 /* indices to PET */
	long            x2, y2, z2;		 /* indices to PET */

/*
 *	Initializations
 */
	if (last_slice < 1 || last_slice > pdim[2])
		last_slice = pdim[2];
	zmin = (float) first_slice - TOLERANCE;
	zmax = (float) last_slice + TOLERANCE;
	a = vector (1, 4);
	p = vector (1, 4);

/*
 *	LOOP for ALL ATLAS PIXELS:	Translation, Rotation, and Scaling
 *	--------------------------------------------------------------
 */

	fprintf (stdout, "z =   ");
	a[4] = 1;
	for (za = 1; za <= adim[2]; ++za) {
		fprintf (stdout, "%c%c%2d", 8, 8, (int) za);
		(void) fflush (stdout);
		a[3] = (float) (za);
		for (ya = 1; ya <= adim[1]; ++ya) {
			a[2] = (float) (ya);
			for (xa = 1; xa <= adim[0]; ++xa) {
				a[1] = (float) (xa);

/*
 *	Find coordinates of vector A in PET space (MAP*A --> P)
 */
				vector_mult (map, a, p, 4, 4);
				x1 = (long) p[1];
				y1 = (long) p[2];
				z1 = (long) p[3];
				x2 = x1 + 1;
				y2 = y1 + 1;
				z2 = z1 + 1;
				temp = (float) z1;
/*
 *	If outside PET array, ATL is not altered (empty statement follows if)
 */
				if (p[3] > zmax || p[3] < zmin || y2 > pdim[1] || y1 < 1 || x2 > pdim[0] || x1 < 1);
/*
 *	If P is within tolerance of a PET slice, use 2-D interpolation
 */
				else if (fabs (p[3] - temp) <= TOLERANCE) {
					if (use_mask == 1 && (mask[z1][y1][x1] == 0 || mask[z1][y2][x1] == 0 ||
							 mask[z1][y1][x2] == 0 || mask[z1][y2][x2] == 0));
					else {
						wx = p[1] - (float) x1;
						wy = p[2] - (float) y1;
						val = (1 - wx) * (1 - wy) * pet[z1][y1][x1] +
							wx * (1 - wy) * pet[z1][y1][x2] +
							(1 - wx) * wy * pet[z1][y2][x1] +
							wx * wy * pet[z1][y2][x2];
						atl[za][ya][xa] += val * weight;
						totwt[za][ya][xa] += weight;
						if (compute_sd == 1)
							sd[za][ya][xa] += val * val;
					}
				}
/*
 *  If P is not within TOLERANCE of slice first_slice or last_slice (zmin or zmax),
 *	then p[3] must be greater than first_slice. and less than last_slice
 */
				else if (z1 < first_slice || z2 > last_slice);
/*
 *	Otherwise use 3-D interpolation
 */
				else {
					if (use_mask == 1 && (mask[z1][y1][x1]==0 || mask[z1][y1][x2]==0 ||
							 mask[z1][y2][x1]==0 || mask[z1][y2][x2]==0 || mask[z2][y1][x1]==0 ||
							 mask[z2][y1][x2]==0 || mask[z2][y2][x1]==0 || mask[z2][y2][x2]==0));
					else {
						wx = p[1] - (float) x1;
						wy = p[2] - (float) y1;
						wz = p[3] - (float) z1;
						val = (1 - wx) * (1 - wy) * (1 - wz) * pet[z1][y1][x1] +
							wx * (1 - wy) * (1 - wz) * pet[z1][y1][x2] +
							(1 - wx) * wy * (1 - wz) * pet[z1][y2][x1] +
							wx * wy * (1 - wz) * pet[z1][y2][x2] +
							(1 - wx) * (1 - wy) * wz * pet[z2][y1][x1] +
							wx * (1 - wy) * wz * pet[z2][y1][x2] +
							(1 - wx) * wy * wz * pet[z2][y2][x1] +
							wx * wy * wz * pet[z2][y2][x2];
						atl[za][ya][xa] += val * weight;
						totwt[za][ya][xa] += weight;
						if (compute_sd == 1)
							sd[za][ya][xa] += val * val;
					}
				}		 /* end vector  */
			}			 /* end row    */
		}				 /* end column */
	}					 /* end plane  */
	fprintf (stdout, "\n");
	free_vector (a, 1, 4);
	free_vector (p, 1, 4);
}
@


3.7
log
@lint cleaning
@
text
@d2 3
d25 1
a25 1
 *	Date:			19-Aug-93
d36 2
a37 2
 *		use_mask -	if true, only include pixels in mask;
 *		compute_sd - if true, compute sum of squares;
d46 3
a48 3
 *		20-Aug-93	Modified atlas_trans.c; center and angle are passed in
 *		24-Aug-93	Modified to include use_pet to compute y-scaler from PET
 *		30-Sep-93	Modified to compute running sum and sd;
d50 5
a54 5
 *		04-Oct-93	Eliminate atl = UNDEFINED; atl is now altered only when it is defined;
 *		14-Oct-93	Angles correspond with those returned from imgrot.
 *		28-Apr-94   added first_slice and last_slice to limit PET slices included
 *		29-Apr-94   subtract 10 cm from atlas.ydim[atlas.z0] when use_pet = TRUE
 *		10-May-94   corrected order of matrix concatenation;
d56 2
a57 2
 *		13-Sep-94	use atlas.nz for loop through atlas array;
 *		20-Sep-94	if no PET slice contains the AC-PC plane, compute an x-scaling factor
d59 2
a60 2
 *		22-Sep-94	Remove as separate functions: atlas_scalers and matrix_transform
 *		05-Mar-96	Convert indexing to Numerical Recipes standard (1-based).
d63 1
d65 1
a65 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/atlas_transform.c,v 3.6 1996/05/10 22:00:07 tom Exp tom $";
a70 1
#include <myvalues.h>		 /* BOOLEAN, TRUE, FALSE */
d82 1
a82 1
	int            *pdim;		 /* pet image dimensions */
d84 1
a84 1
	int            *adim;		 /* atlas image dimensions */
d90 2
a91 2
	BOOLEAN	        use_mask;	 /* if true, only include pixels in mask */
	BOOLEAN	        compute_sd;	 /* if true, compute sum of squares */
d126 1
a126 1
		fflush (stdout);
d152 2
a153 2
					if (use_mask && (!mask[z1][y1][x1] || !mask[z1][y2][x1] ||
							 !mask[z1][y1][x2] || !mask[z1][y2][x2]));
d163 1
a163 1
						if (compute_sd)
d176 3
a178 3
					if (use_mask && (!mask[z1][y1][x1] || !mask[z1][y1][x2] ||
							 !mask[z1][y2][x1] || !mask[z1][y2][x2] || !mask[z2][y1][x1] ||
							 !mask[z2][y1][x2] || !mask[z2][y2][x1] || !mask[z2][y2][x2]));
d193 1
a193 1
						if (compute_sd)
@


3.6
log
@new libimage
indexing from 1 on images and atlas
@
text
@d2 4
d60 4
a64 1
#include <stdlib.h>
a65 1
#include <nr.h>
a71 4
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/atlas_transform.c,v 3.5 1995/11/10 18:47:52 tom Exp tom $";
#endif

d83 1
a83 1
	float           weight;
d87 2
a88 2
	BOOLEAN         use_mask;	 /* if true, only include pixels in mask */
	BOOLEAN         compute_sd;	 /* if true, compute sum of squares */
d122 1
a122 1
		fprintf (stdout, "%c%c%2d", 8, 8, za);
@


3.5
log
@remove petutil parent directory from include statements
@
text
@d2 3
d15 1
a15 2
 * changed $Id: atlas_transform.c,v 3.4 1995/01/19 19:17:03 tom Exp tom $ to $Header: /export/home/npggw/tom/src/t88mean/RCS/atlas_transform.c,v 3.4 1995/01/19 19:17:03 tom Exp tom $
 * */
d24 2
a26 2
 *      sxr     -   sxr file structure;
 *      atlas   -   brain atlas structure;
d53 1
a55 1

d57 1
d59 4
a62 3
#include <petutil.h>	/* SXR_OUTPUT */
#include <package.h>	/* BOOLEAN, TRUE, FALSE */
#include "atlas.h"		/* BRAIN_ATLAS, MATRIX, DIM, MATDIM, POINT */
d64 1
a64 1
#define TOLERANCE 0.001		/* max distance from a slice for which to use 2-D interpolation */
d66 3
a68 1
extern          matrix_mult ();	/* matrix times matrix multiplication */
a69 2
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/atlas_transform.c,v 3.4 1995/01/19 19:17:03 tom Exp tom $";

d74 13
a86 14
void 
atlas_transform (pet, atl, sd, weight, totwt, sxr, atlas, mask, map, use_mask, compute_sd,
		first_slice, last_slice)
	REAL_SLICE     *pet;	/* PET image array */
	REAL_SLICE     *atl;	/* atlas image array */
	REAL_SLICE     *sd;	/* sum of squares */
	float			weight;
	REAL_SLICE     *totwt;	/* number of images contributing to each pixel in atlas array */
	SXR_OUTPUT      sxr;	/* information from sxr file */
	BRAIN_ATLAS     atlas;	/* brain atlas definition */
	REAL_SLICE     *mask;	/* mask for PET images */
    MATRIX          map;    /* conversion matrix Atlas -> PET   */
	BOOLEAN         use_mask;	/* if true, only include pixels in mask */
	BOOLEAN         compute_sd;	/* if true, compute sum of squares */
d91 6
a96 2
	POINT           a;	/* point in ATL-space; a[MATDIM] */
	POINT           p;	/* point in PET-space; p[MATDIM] */
d98 3
a100 11
	float           x_width;/* pet width for atlas 0 */
	float           a_width;/* atlas width for pet slice zmin_xscaler or zmax_xscaler */
	float           f;	/* weighting factor */
	float           wx;	/* weighting factor for x */
	float           wy;	/* weighting factor for y */
	float           wz;	/* weighting factor for z */
	float           val;	/* temporary value computed for ATL */
	float           pz;	/* PET z-location for point a(x,ya,za) */
	float           temp;	/* local real no. for z1 */
	float           z_min;
	float           z_max;
a101 7
	int             xa, ya, za;	/* indices to atlas */
	int             x1, y1, z1;	/* indices to PET */
	int             x2, y2, z2;	/* indices to PET */
	int             xmax, ymax, zmax;	/* maximum indices for PET */
	int				zmin_xscaler, zmax_xscaler; /* range of PET slices permitted for computing x-scaler */
	int             i, j, k;

d105 6
a111 16
	xmax = DIM - 1;
	ymax = DIM - 1;
	zmax = sxr.number_slices - 1;
	if (last_slice == 0 || last_slice > zmax)
		last_slice = zmax;
	z_min = (float) first_slice - TOLERANCE;
	z_max = (float) last_slice + TOLERANCE;
	x_width = 0;
	if (sxr.number_slices >= 31) {
		zmin_xscaler = 2;
		zmax_xscaler = sxr.number_slices - 3;
	} else {
		zmin_xscaler = 0;
		zmax_xscaler = sxr.number_slices;
	}

d118 2
a119 2
	a[3] = 1;
	for (za = 0; za < atlas.nz; ++za) {
d122 5
a126 5
		a[2] = (float) (za);
		for (ya = 0; ya < atlas.ny; ++ya) {
			a[1] = (float) (ya);
			for (xa = 0; xa < atlas.nx; ++xa) {
				a[0] = (float) (xa);
d129 1
a129 1
 *	Find coordinates of point A in PET space (MAP*A --> P)
d131 4
a134 4
				matrix_mult (map, a, p, MATDIM, 1, MATDIM);
				x1 = (int) p[0];
				y1 = (int) p[1];
				z1 = (int) p[2];
d142 1
a142 1
				if (p[2] > z_max || p[2] < z_min || y2 > ymax || y1 < 0 || x2 > xmax || x1 < 0);
d146 1
a146 1
				else if (fabs (p[2] - temp) <= TOLERANCE) {
d150 2
a151 2
						wx = p[0] - (float) x1;
						wy = p[1] - (float) y1;
d163 2
a164 2
 *  If P is not within TOLERANCE of slice first_slice or last_slice (z_min or z_max),
 *	then p[2] must be greater than first_slice. and less than last_slice
d175 3
a177 3
						wx = p[0] - (float) x1;
						wy = p[1] - (float) y1;
						wz = p[2] - (float) z1;
d191 4
a194 4
				}	/* end point  */
			}	/* end row    */
		}		/* end column */
	}			/* end plane  */
d196 2
@


3.4
log
@weights
@
text
@d2 3
d12 1
a12 1
 * changed $Id: atlas_transform.c,v 3.3 1994/10/03 16:17:13 tom Exp tom $ to $Header: /home/npggw/tom/src/t88mean/RCS/atlas_transform.c,v 3.3 1994/10/03 16:17:13 tom Exp tom $
d56 2
a57 2
#include <petutil/petutil.h>	/* SXR_OUTPUT */
#include <petutil/package.h>	/* BOOLEAN, TRUE, FALSE */
d64 1
a64 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/atlas_transform.c,v 3.3 1994/10/03 16:17:13 tom Exp tom $";
@


3.3
log
@Separate functions atlas_scalers and matrix_transform;
@
text
@d2 3
d9 1
a9 1
 * changed $Id: atlas_transform.c,v 3.2 1994/09/14 14:40:24 tom Exp tom $ to $Header: /export/home/npggw/tom/src/t88mean/RCS/atlas_transform.c,v 3.2 1994/09/14 14:40:24 tom Exp tom $
d19 1
d31 1
a31 1
 *		nin		-	number of images contributing to each pixel in atlas image;
d61 1
a61 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/atlas_transform.c,v 3.2 1994/09/14 14:40:24 tom Exp tom $";
d68 1
a68 1
atlas_transform (pet, atl, sd, nin, sxr, atlas, mask, map, use_mask, compute_sd,
d73 2
a74 1
	SHORT_SLICE    *nin;	/* number of images contributing to each pixel in atlas array */
d171 2
a172 2
						atl[za][ya][xa] += val;
						nin[za][ya][xa] += 1;
d201 2
a202 2
						atl[za][ya][xa] += val;
						nin[za][ya][xa] += 1;
@


3.2
log
@Allow > 49 slices in atlas and any z-origin
@
text
@d2 3
d6 1
a6 1
 * changed $Id$ to $Header$
d12 17
a28 1
 *	Description:	Remap an image into atlas space
d41 3
a43 1
 *					change reference to xdim and ydim to ATLAS_Z0 to allow atlas.z0 to vary;
d50 1
a53 1
#define ATLAS_Z0  30		/* xdim and ydim for scaling use this slice in the structure "atlas" */
d55 1
a55 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/atlas_transform.c,v 3.1 1994/05/18 15:53:30 tom Exp tom $";
d57 2
d64 2
a65 2
atlas_transform (pet, atl, sd, nin, sxr, atlas, mask, center, angle, use_mask,
		 compute_sd, first_slice, last_slice)
d73 1
a73 2
	float           center[3];
	float           angle[3];
a79 8
	extern          matrix_mult ();	/* matrix times matrix multiplication */

	MATRIX          ta, tp;	/* translation matrices */
	MATRIX          rx, ry, rz;	/* rotation matrices */
	MATRIX          sa, sp;	/* scaling matrices */
	MATRIX          ma, mb, mc, md, me;	/* temporary matrices */
	MATRIX          map;	/* combined conversion matrix ATL-->PET */

d84 1
d99 1
d114 6
a119 18

	for (i = 0; i < MATDIM; ++i) {
		for (j = 0; j < MATDIM; ++j) {
			ta[i][j] = 0;
			tp[i][j] = 0;
			sa[i][j] = 0;
			sp[i][j] = 0;
			rx[i][j] = 0;
			ry[i][j] = 0;
			rz[i][j] = 0;
		}
		ta[i][i] = 1;
		tp[i][i] = 1;
		sa[i][i] = 1;
		sp[i][i] = 1;
		rx[i][i] = 1;
		ry[i][i] = 1;
		rz[i][i] = 1;
d123 2
a124 7
 *	COMPUTE the transformation matrix MAP
 *	-------------------------------------
 *
 *	Translation to matrix origin:  (Atlas image origin x0,y0,z0 --> matrix origin 0,0,0)
 *	The atlas image is shifted an additional 1.8 cm anteriorly as its origin is not
 *	at the center of the brain:
 *		(17.2 / 2) - 7.0 = 1.8 cm  (based on horizontal section +1 or -1 in Tal 1988)
a126 99
	ta[0][3] = -atlas.x0;
	ta[1][3] = -atlas.y0 - (1.8 / atlas.pixel_size);
	ta[2][3] = -atlas.z0;

/*
 *	Translation to PET origin:
 */

	tp[0][3] = center[0];
	tp[1][3] = center[1];
	tp[2][3] = center[2];

/*
 *	Rotation: rotate about matrix origin
 */

	rx[1][1] = cos (angle[0]);
	rx[1][2] = sin (angle[0]);
	rx[2][1] = -sin (angle[0]);
	rx[2][2] = cos (angle[0]);

	ry[0][0] = cos (angle[1]);
	ry[0][2] = -sin (angle[1]);
	ry[2][0] = sin (angle[1]);
	ry[2][2] = cos (angle[1]);

	rz[0][0] = cos (angle[2]);
	rz[0][1] = sin (angle[2]);
	rz[1][0] = -sin (angle[2]);
	rz[1][1] = cos (angle[2]);

/*
 *	Scaling:  (Atlas dim --> PET dim)
 */

	sa[1][1] = sxr.magnification_factor * sxr.apxray / atlas.ydim[ATLAS_Z0];
	sa[2][2] = sxr.magnification_factor * sxr.zxray / atlas.zdim;

/*
 *	Scaling:  (PET dim --> atlas dim)
 */

	sp[0][0] = atlas.pixel_size / sxr.pixel_size;
	sp[1][1] = atlas.pixel_size / sxr.pixel_size;
	sp[2][2] = atlas.slice_separation / sxr.slice_separation;

/*
 *	Concatenate matrices:
 */

	matrix_mult (sa, ta, ma, MATDIM, MATDIM, MATDIM);
	matrix_mult (rx, ma, mb, MATDIM, MATDIM, MATDIM);
	matrix_mult (ry, mb, mc, MATDIM, MATDIM, MATDIM);
	matrix_mult (rz, mc, md, MATDIM, MATDIM, MATDIM);
	matrix_mult (sp, md, me, MATDIM, MATDIM, MATDIM);
	matrix_mult (tp, me, map, MATDIM, MATDIM, MATDIM);

/*
 *	Compute X width and Scaling for X using the PET slice (interpolated if necessary)
 *	which intersects the ac-pc plane at y = 0
 */

	a[0] = (float) (atlas.x0);
	a[1] = (float) (atlas.y0);
	a[2] = (float) (atlas.z0);
	a[3] = 1;
	matrix_mult (map, a, p, MATDIM, 1, MATDIM);
	pz = p[2];
	if (pz <= 0)
		x_width = sxr.rlpetdim[0];
	else if (pz >= (float) zmax)
		x_width = sxr.rlpetdim[zmax];
	else {
		for (i = 1; i <= zmax; ++i) {
			if (pz <= (float) i) {
				f = pz - (float) (i - 1);
				x_width = ((1 - f) * sxr.rlpetdim[i - 1]) + (f * sxr.rlpetdim[i]);
				break;
			}
		}
	}
	sa[0][0] = x_width * sxr.pixel_size / atlas.xdim[ATLAS_Z0];

/*
 *	Concatenate with new matrices:
 */

	matrix_mult (sa, ta, ma, MATDIM, MATDIM, MATDIM);
	matrix_mult (rx, ma, mb, MATDIM, MATDIM, MATDIM);
	matrix_mult (ry, mb, mc, MATDIM, MATDIM, MATDIM);
	matrix_mult (rz, mc, md, MATDIM, MATDIM, MATDIM);
	matrix_mult (sp, md, me, MATDIM, MATDIM, MATDIM);
	matrix_mult (tp, me, map, MATDIM, MATDIM, MATDIM);

/*
 *	Translation, Rotation, and Scaling LOOP for ALL ATLAS PIXELS
 *	-------------------------------------------------------------
 */

d139 1
a139 1
 *	Find coordinates of point A in PET space (XMAP*A --> P)
@


3.1
log
@changed $Id$ to $Header$
@
text
@d1 4
a4 1
/* $Log$ */
d6 3
a8 3
 *	Module:				atlas_transform.c
 *	Date:					19-Aug-93
 *	Author:				Tom Videen
d11 12
a22 10
 *		20-Aug-93		Modified atlas_trans.c; center and angle are passed in
 *		24-Aug-93		Modified to include use_pet to compute y-scaler from PET
 *		30-Sep-93		Modified to compute running sum and sd;
 *			(pass additional parameters: sd, compute_sd)
 *		04-Oct-93		Eliminate atl = UNDEFINED; atl is now altered only when it is defined;
 *		14-Oct-93		Angles correspond with those returned from imgrot.
 *    28-Apr-94   added first_slice and last_slice to limit PET slices included
 *    29-Apr-94   subtract 10 cm from atlas.ydim[atlas.z0] when use_pet = TRUE
 *    10-May-94   corrected order of matrix concatenation;
 *								eliminate use_pet option for y-width
d28 2
a29 2
#include <petutil/petutil.h>			/* SXR_OUTPUT */
#include "atlas.h"								/* BRAIN_ATLAS, MATRIX, DIM, MATDIM, POINT */
d32 1
d34 1
a34 1
static char rcsid []= "$Header: atlas_transform.c,v 1.1 92/12/30 04:20:23 tom Exp $";
d40 16
a55 2
void atlas_transform (pet, atl, sd, nin, sxr, atlas, mask, center, angle, use_mask,
	compute_sd, first_slice, last_slice)
a56 14
	REAL_SLICE		*pet;				/* PET image array */
	REAL_SLICE		*atl;				/* atlas image array */
  REAL_SLICE  	*sd;  	  	/* sum of squares */
	SHORT_SLICE		*nin;				/* number of images contributing to each pixel in atlas array */
	SXR_OUTPUT		sxr;				/* information from sxr file */
	BRAIN_ATLAS		atlas;			/* brain atlas definition */
	REAL_SLICE		*mask;			/* mask for PET images */
	float					center[3];
	float					angle[3];
	BOOLEAN				use_mask; 	/* if true, only include pixels in mask */
	BOOLEAN				compute_sd; /* if true, compute sum of squares */
	int     			first_slice;
	int     			last_slice;

d58 1
a58 1
	extern	matrix_mult();		/* matrix times matrix multiplication */
d60 5
a64 5
	MATRIX	ta, tp;  						/* translation matrices */
	MATRIX	rx, ry, rz; 				/* rotation matrices */
	MATRIX	sa, sp;   					/* scaling matrices */
	MATRIX	ma, mb, mc, md, me; /* temporary matrices */
	MATRIX	map; 		 						/* combined conversion matrix ATL-->PET */
d66 2
a67 2
	POINT		a;    			/* point in ATL-space; a[MATDIM] */
	POINT		p;    			/* point in PET-space; p[MATDIM] */
d69 10
a78 10
	float		x_width;		/* pet width for atlas 0 */
 	float		f;         	/* weighting factor */
	float		wx;         /* weighting factor for x */
	float		wy;         /* weighting factor for y */
	float		wz;         /* weighting factor for z */
	float		val;        /* temporary value computed for ATL */
	float		pz;         /* PET z-location for point a(x,ya,za) */
	float		temp;				/* local real no. for z1 */
	float		z_min;
	float		z_max;
d80 5
a84 5
	int			xa, ya, za;				/* indices to atlas */
	int			x1, y1, z1;   		/* indices to PET */
	int			x2, y2, z2;   		/* indices to PET */
	int			xmax, ymax, zmax;	/* maximum indices for PET */
	int			i, j, k;
d101 7
a107 7
			ta[i][j]	= 0;
			tp[i][j]	= 0;
			sa[i][j]	= 0;
			sp[i][j]	= 0;
			rx[i][j]	= 0;
			ry[i][j]	= 0;
			rz[i][j]	= 0;
d109 7
a115 7
		ta[i][i]	= 1;
		tp[i][i]	= 1;
		sa[i][i]	= 1;
		sp[i][i]	= 1;
		rx[i][i] 	= 1;
		ry[i][i] 	= 1;
		rz[i][i] 	= 1;
d144 4
a147 4
	rx[1][1] =  cos(angle[0]);
	rx[1][2] =  sin(angle[0]);
	rx[2][1] = -sin(angle[0]);
	rx[2][2] =  cos(angle[0]);
d149 4
a152 4
	ry[0][0] =  cos(angle[1]);
	ry[0][2] = -sin(angle[1]);
	ry[2][0] =  sin(angle[1]);
	ry[2][2] =  cos(angle[1]);
d154 4
a157 4
	rz[0][0] =  cos(angle[2]);
	rz[0][1] =  sin(angle[2]);
	rz[1][0] = -sin(angle[2]);
	rz[1][1] =  cos(angle[2]);
d163 2
a164 2
	sa[1][1] = sxr.magnification_factor * sxr.apxray / atlas.ydim[atlas.z0];
  sa[2][2] = sxr.magnification_factor * sxr.zxray / atlas.zdim;
d178 5
a182 5
	matrix_mult (sa, ta, ma,  MATDIM, MATDIM, MATDIM);
	matrix_mult (rx, ma, mb,  MATDIM, MATDIM, MATDIM);
	matrix_mult (ry, mb, mc,  MATDIM, MATDIM, MATDIM);
	matrix_mult (rz, mc, md,  MATDIM, MATDIM, MATDIM);
	matrix_mult (sp, md, me,  MATDIM, MATDIM, MATDIM);
d186 2
a187 1
 *	Compute X width and Scaling for X
d203 2
a204 2
				f = pz - (float) (i-1);
				x_width = ((1-f) * sxr.rlpetdim[i-1]) + (f * sxr.rlpetdim[i]);
d209 1
a209 1
	sa[0][0] = x_width * sxr.pixel_size / atlas.xdim[atlas.z0];
d215 5
a219 5
	matrix_mult (sa, ta, ma,  MATDIM, MATDIM, MATDIM);
	matrix_mult (rx, ma, mb,  MATDIM, MATDIM, MATDIM);
	matrix_mult (ry, mb, mc,  MATDIM, MATDIM, MATDIM);
	matrix_mult (rz, mc, md,  MATDIM, MATDIM, MATDIM);
	matrix_mult (sp, md, me,  MATDIM, MATDIM, MATDIM);
d252 1
a252 2
				if (p[2] > z_max || p[2] < z_min || y2 > ymax || y1 < 0 || x2 > xmax || x1 < 0)
					;
d257 2
a258 3
					if (use_mask && (!mask[z1][y1][x1] || !mask[z1][y2][x1] || 
							!mask[z1][y1][x2] || !mask[z1][y2][x2]))
						;
d263 3
a265 3
									   wx    * (1 - wy) * pet[z1][y1][x2] +
									(1 - wx) *    wy    * pet[z1][y2][x1] +
									   wx    *    wy    * pet[z1][y2][x2];
d268 2
a269 1
						if (compute_sd) sd[za][ya][xa] += val * val;
d273 1
a273 1
 *  If P is not within TOLERANCE of slice first_slice or last_slice (z_min or z_max), 
d276 1
a276 2
        else if (z1 < first_slice || z2 > last_slice)
					;
d281 3
a283 4
					if (use_mask && ( !mask[z1][y1][x1] || !mask[z1][y1][x2] || 
							!mask[z1][y2][x1] || !mask[z1][y2][x2] || !mask[z2][y1][x1] || 
							!mask[z2][y1][x2] || !mask[z2][y2][x1] || !mask[z2][y2][x2]) )
						;
d287 1
a287 1
						wz = p[2]- (float) z1;
d289 7
a295 7
									   wx    * (1 - wy) * (1 - wz) * pet[z1][y1][x2] +
									(1 - wx) *    wy    * (1 - wz) * pet[z1][y2][x1] +
									   wx    *    wy    * (1 - wz) * pet[z1][y2][x2] +
									(1 - wx) * (1 - wy) *    wz    * pet[z2][y1][x1] +
									   wx    * (1 - wy) *    wz    * pet[z2][y1][x2] +
									(1 - wx) *    wy    *    wz    * pet[z2][y2][x1] +
									   wx    *    wy    *    wz    * pet[z2][y2][x2];
d298 2
a299 1
						if (compute_sd) sd[za][ya][xa] += val * val;
d301 4
a304 4
				}		/* end point  */
			}			/* end row    */
		}				/* end column */
	}					/* end plane  */
a306 1

@


3.0
log
@Corrected Version with proper matrix concatenation
@
text
@d1 1
a1 1
/* $Log */
d28 1
a28 1
static char rcsid []= "$Id: atlas_transform.c,v 1.15 1994/05/11 17:15:36 tom Exp tom $";
@


1.15
log
@Corrected Version with proper matrix concatenation
@
text
@d28 1
a28 1
static char rcsid []= "$Id: atlas_transform.c,v 1.14 1994/05/10 15:33:19 tom Exp tom $";
@


1.14
log
@fixed bug in transform
@
text
@d28 1
a28 1
static char rcsid []= "$Id: atlas_transform.c,v 1.13 1994/04/29 17:37:10 tom Exp tom $";
@


1.13
log
@correct y-scaling when use_pet = true
@
text
@d16 2
d28 1
a28 1
static char rcsid []= "$Id: atlas_transform.c,v 1.12 1994/04/28 22:28:53 tom Exp tom $";
d34 1
a34 1
void atlas_transform (pet, atl, sd, nin, sxr, atlas, mask, center, angle, use_pet, use_mask,
a45 1
	BOOLEAN				use_pet; 		/* if true, get y-scaler from PET instead of sxr */
a50 1

a63 1
	float		y_width;		/* pet ap-dimension for atlas 0 */
a91 1
	y_width = 0;
d154 15
d172 6
a177 4
	matrix_mult (rx, ta, ma,  MATDIM, MATDIM, MATDIM);
	matrix_mult (ry, ma, mb,  MATDIM, MATDIM, MATDIM);
	matrix_mult (rz, mb, mc,  MATDIM, MATDIM, MATDIM);
	matrix_mult (tp, mc, map, MATDIM, MATDIM, MATDIM);
d180 1
a180 1
 *	Compute X width
d189 1
a189 1
	if (pz <= 0) {
d191 1
a191 2
		y_width = sxr.vertical_petdim[0];
	} else if (pz >= (float) zmax) {
d193 1
a193 2
		y_width = sxr.vertical_petdim[zmax];
	} else {
a197 1
				y_width = ((1-f) * sxr.vertical_petdim[i-1]) + (f * sxr.vertical_petdim[i]);
a201 5

/*
 *	Scaling:  (Atlas dim --> PET dim)
 */

a203 10
	if (use_pet && y_width > 1.) {
		sa[1][1] = y_width * sxr.pixel_size / (atlas.ydim[atlas.z0] - 1.0);
		printf ("AP from X-ray (-1 cm) = %.4f    from PET = %.4f   Diff = %.4f cm\n", 
			(sxr.magnification_factor * sxr.apxray - 1.0), y_width * sxr.pixel_size,
			(sxr.magnification_factor * sxr.apxray - 1.0) - (y_width * sxr.pixel_size));
	} else
		sa[1][1] = sxr.magnification_factor * sxr.apxray / atlas.ydim[atlas.z0];

  sa[2][2] = sxr.magnification_factor * sxr.zxray / atlas.zdim;

d205 1
a205 1
 *	Scaling:  (PET dim --> atlas dim)
d208 4
a211 9
	sp[0][0] = atlas.pixel_size / sxr.pixel_size;
	sp[1][1] = atlas.pixel_size / sxr.pixel_size;
	sp[2][2] = atlas.slice_separation / sxr.slice_separation;

/*
 *	Concatenate the rest of the matrices:
 */

	matrix_mult (sa, mc, md,  MATDIM, MATDIM, MATDIM);
@


1.12
log
@last_slice must be <= number of slices
@
text
@d15 1
d26 1
a26 1
static char rcsid []= "$Id: atlas_transform.c,v 1.11 1994/04/28 22:09:02 tom Exp tom $";
d198 4
a201 4
		sa[1][1] = y_width * sxr.pixel_size / atlas.ydim[atlas.z0];
		printf ("AP from X-ray = %.4f    from PET = %.4f   %.4f cm   %f\n", 
			sxr.magnification_factor * sxr.apxray, y_width * sxr.pixel_size,
			(sxr.magnification_factor * sxr.apxray) - (y_width * sxr.pixel_size));
@


1.11
log
@added parameter slices:
@
text
@d25 1
a25 1
static char rcsid []= "$Id: atlas_transform.c,v 1.10 1993/10/19 14:04:32 tom Exp tom $";
d87 1
a87 1
	if (last_slice == 0)
@


1.10
log
@angles changed
@
text
@d14 1
d25 1
a25 1
static char rcsid []= "$Id: atlas_transform.c,v 1.9 1993/10/04 16:44:35 tom Exp tom $";
d32 1
a32 1
	compute_sd)
d46 2
d49 1
d87 4
a90 2
	z_min = 0. - TOLERANCE;
	z_max = (float) zmax + TOLERANCE;
d274 2
a275 2
 *  If P is not within TOLERANCE of slice 0 or zmax, 
 *	then p[2] must be greater than 0. and less than zmax
d277 1
a277 1
        else if (z1 < 0 || z2 > zmax)
@


1.9
log
@eliminated atl = undefined from atlas_transform
@
text
@d13 1
d24 1
a24 1
static char rcsid []= "$Id: atlas_transform.c,v 1.8 1993/10/01 16:41:34 tom Exp tom $";
@


1.8
log
@fixed calculation of sdimage
@
text
@d12 1
a20 1
#define UNDEFINED 	0			/* atlas value when a pixel maps to a point outside the PET array */
d23 1
a23 1
static char rcsid []= "$Id: atlas_transform.c,v 1.7 1993/08/26 17:26:35 tom Exp tom $";
d243 1
a243 1
 *	If outside PET array, ATL = UNDEFINED
d245 2
a246 3
				if (p[2] > z_max || p[2] < z_min || y2 > ymax || y1 < 0 || x2 > xmax || x1 < 0) {
					atl[za][ya][xa] = UNDEFINED;
				}
d253 1
a253 1
						atl[za][ya][xa] = UNDEFINED;
d270 2
a271 3
        else if (z1 < 0 || z2 > zmax) {
          atl[za][ya][xa] = UNDEFINED;
				}
d279 1
a279 1
						atl[za][ya][xa] = UNDEFINED;
@


1.7
log
@changed atlas y-dim to used 5 mm between brain and skull
@
text
@d10 2
d23 1
a23 1
static char rcsid []= "$Id: atlas_transform.c,v 1.6 1993/08/20 20:24:07 tom Exp tom $";
d29 2
a30 1
void atlas_transform (pet, atl, nin, sxr, atlas, use_mask, mask, center, angle, use_pet)
d32 8
a39 8
	REAL_SLICE		*pet;			/* PET image array */
	REAL_SLICE		*atl;			/* atlas image array */
	SHORT_SLICE		*nin;			/* number of images contributing to each pixel in atlas array */
	SXR_OUTPUT		sxr;			/* information from sxr file */
	BRAIN_ATLAS		atlas;		/* brain atlas definition */
	BOOLEAN				use_mask; /* if true, only include pixels in mask */
	BOOLEAN				use_pet; 	/* if true, get y-scaler from PET instead of sxr */
	REAL_SLICE		*mask;		/* mask for PET images */
d41 3
a43 1
	float					center[3];
d46 1
a46 1
	extern	matrix_mult();	/* matrix times matrix multiplication */
d262 1
a262 1
						atl[za][ya][xa] = val;
d264 1
d294 1
a294 1
						atl[za][ya][xa] = val;
d296 1
@


1.6
log
@first version with Talairach 1988 atlas
@
text
@d9 1
d21 1
a21 1
static char rcsid []= "$Id: atlas_transform.c,v 1.5 1993/08/19 22:55:48 tom Exp tom $";
d27 1
a27 1
void atlas_transform (pet, atl, nin, sxr, atlas, use_mask, mask, center, angle)
d35 1
d53 1
d80 1
d161 1
a161 1
	if (pz <= 0)
d163 2
a164 1
	else if (pz >= (float) zmax)
d166 2
a167 1
	else {
d172 1
d183 10
a192 2
	sa[1][1] = sxr.magnification_factor * sxr.apxray / atlas.ydim[atlas.z0];
	sa[2][2] = sxr.magnification_factor * sxr.zxray / atlas.zdim;
@


1.5
log
@a corrected hd6mean-atlas version of t88mean
@
text
@d8 1
a8 1
 *		19-Aug-93		Modified atlas_trans.c; center and angle are passed in
d20 1
a20 1
static char rcsid []= "$Id$";
d102 3
d108 1
a108 1
	ta[1][3] = -atlas.y0;
@
