head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	96.02.28.20.52.31;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	95.11.10.18.48.04;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	95.11.10.18.46.37;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	94.10.03.16.17.13;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	94.05.18.15.53.30;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	93.08.26.17.26.35;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	93.08.20.20.24.07;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	93.08.19.22.55.48;	author tom;	state Exp;
branches;
next	;


desc
@a corrected hd6mean-atlas version of t88mean
@


1.12
log
@*** empty log message ***
@
text
@/* $Log: image_template.c,v $
 * Revision 1.11  1995/11/10  18:48:04  tom
 * remove petutil parent directory from include statements
 *
 * Revision 1.10  1995/11/10  18:46:37  tom
 * eliminate matrix.h
 *
 * Revision 1.9  1994/10/03  16:17:13  tom
 * standard format with indent
 *
 * Revision 1.8  1994/05/18  15:53:30  tom
 * changed $Id: image_template.c,v 1.11 1995/11/10 18:48:04 tom Exp tom $ to $Header: /home/npggw/tom/src/t88mean/RCS/image_template.c,v 1.11 1995/11/10 18:48:04 tom Exp tom $
 * */
/*	========================================================================
 *	Module:			image_template.c
 *	Date:			16-Aug-93
 *	Author:			Tom Videen
 *	Description:	Create a template of image using mskpct.
 *
 *	Inputs:
 *		image3d -   input image array
 *		mskpct  -   threshold (%) for creating the mask
 *		width   -   x dimension
 *		height  -   y dimension
 *		nslices -   number of slices to template
 *
 *	Output:
 *		mask3d  -   mask image array (pixels either 0 or 1)
 *		npixels -   number of non-zero pixels in the mask
 *
 *	Algorithm:
 *	1)  Find maximum pixel value of image3d in the range of nslices.
 *	2)  Compute an absolute threshold from global maximum * mskpct * .01
 *	3)  Created a template by thresholding from the outside towards the center:
 *	a)  Assign INSIDE to all points >= threshold.
 *	b)  Assign 0 to all points < threshold,
 *	c)  Assign OUTSIDE to all points along the boundaries of the 2d mask
 *		array which are nor INSIDE the template.
 *	d)  Now, starting with the boundaries of the array, expand the area excluded from
 *	    the template by assigning OUTSIDE to all points directly adjacent to a point
 *	    whose value is OUTSIDE and which are currently zero (neither INSIDE nor OUTSIDE).
 *	e)  Repeat until no more points added outside of the region.
 *	f)  All points that are < OUTSIDE are assigned INSIDE.
 *	g)  All points that are >= OUTSIDE are assigned 0.
 *
 *	History:
 *		18-Aug-93	Modification of threshold.c in imgmean.c
 *					which is C version of d2templa.f in spideram.f
 *	========================================================================
 */
#include <imgutil.h>

#define INSIDE		1
#define OUTSIDE		2

#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/image_template.c,v 1.11 1995/11/10 18:48:04 tom Exp tom $";
#endif

void            image_template (image3d, mask3d, mskpct, width, height, nslices, npixels)
	float          *image3d;		 /* pointer to first slice of image3d to template */
	short          *mask3d;			 /* pointer to mask to return */
	float           mskpct;			 /* threshold as percent */
	int             width;			 /* nx */
	int             height;			 /* ny */
	int             nslices;		 /* number of slices to mask */
	long           *npixels;		 /* number of pixels in created mask */

{
	float          ***image2d;
	short          *mask2d;
	float           threshold;
	float           globalmax;
	int             i, j, k;
	int             slice_index;
	int             dimension;
	BOOLEAN         more;

	*npixels = 0;
	dimension = width * height;

/*
 *	Compute threshold from global maximum
 */

	globalmax = 0.;
	for (i = 0; i < (nslices * dimension); i++) {
		if (image3d[i] > globalmax)
			globalmax = image3d[i];
	}
	threshold = (globalmax * mskpct) / 100;

/*
 *	Create a template with mskpct% of the whole brain maximum.
 */

	for (k = 0; k < nslices; k++) {
		slice_index = k * dimension;
		mask2d = mask3d + slice_index;
		image2d = image3d + slice_index;

/*
 *	Assign INSIDE to all points >= threshold.
 *	Assign 0 to all points < threshold,
 */

		for (i = 0; i < dimension; i++) {
			if (image2d[i] >= threshold)
				mask2d[i] = INSIDE;
			else
				mask2d[i] = 0;
		}

/*
 *	Assign OUTSIDE to all points along the boundaries of the 2d mask
 *	array which are nor INSIDE the template.
 */
		for (i = 0; i < width; i++) {
			if (mask2d[i] != INSIDE) /* Top */
				mask2d[i] = OUTSIDE;
			if (mask2d[(height - 1) * width + i] != INSIDE)	/* Bottom */
				mask2d[(height - 1) * width + i] = OUTSIDE;
		}
		for (j = 0; j < height; j++) {
			if (mask2d[j * width] != INSIDE)	/* Left */
				mask2d[j * width] = OUTSIDE;
			if (mask2d[j * width + width - 1] != INSIDE)	/* Right */
				mask2d[j * width + width - 1] = OUTSIDE;
		}

/*
 *	Now, starting with the boundaries of the array, expand the area excluded from
 *	the template by assigning OUTSIDE to all points directly adjacent to a point
 *	whose value is OUTSIDE and which are currently zero (neither INSIDE nor OUTSIDE).
 */

		more = FALSE;
		for (i = 1; i < width - 1; i++) {/* Outside rows */
			if (mask2d[i] == OUTSIDE &&
			    mask2d[width + i] < INSIDE) {	/* Top */
				mask2d[width + i] = OUTSIDE;
				more = TRUE;
			}
			if (mask2d[(height - 1) * width + i] == OUTSIDE &&	/* Bottom */
			    mask2d[(height - 2) * width + i] < INSIDE) {
				mask2d[(height - 2) * width + i] = OUTSIDE;
				more = TRUE;
			}
		}

		for (j = 1; j < height - 1; j++) {	/* Outside columns */
			if (mask2d[j * width] == OUTSIDE &&
			    mask2d[j * width + 1] < INSIDE) {	/* Left */
				mask2d[j * width + 1] = OUTSIDE;
				more = TRUE;
			}
			if (mask2d[j * width + width - 1] == INSIDE &&
			    mask2d[j * width + width - 2 < INSIDE]) {	/* Right */
				mask2d[j * width + width - 2] = OUTSIDE;
				more = TRUE;
			}
		}

/*
 *	Repeated until no more points added outside of the region.
 */

		while (more) {
			more = FALSE;
			for (j = 1; j < height - 1; j++) {
				for (i = 1; i < width - 1; i++) {
					if (mask2d[j * width + i] == OUTSIDE) {
						if (mask2d[j * width + i - 1] < INSIDE) {
							mask2d[j * width + i - 1] = OUTSIDE;
							more = TRUE;
						}
						if (mask2d[j * width + i + 1] < INSIDE) {
							mask2d[j * width + i + 1] = OUTSIDE;
							more = TRUE;
						}
						if (mask2d[(j - 1) * width + i] < INSIDE) {
							mask2d[(j - 1) * width + i] = OUTSIDE;
							more = TRUE;
						}
						if (mask2d[(j + 1) * width + i] < INSIDE) {
							mask2d[(j + 1) * width + i] = OUTSIDE;
							more = TRUE;
						}
					}
				}
			}
		}

/*
 *	All points that are < OUTSIDE are assigned INSIDE.
 *	All points that are >= OUTSIDE are assigned 0.
 */

		for (i = 0; i < dimension; i++) {
			if (mask2d[i] < OUTSIDE) {
				mask2d[i] = INSIDE;
				(*npixels)++;
			} else
				mask2d[i] = 0;
		}
	}
}
@


1.11
log
@remove petutil parent directory from include statements
@
text
@d2 3
d12 1
a12 1
 * changed $Id: image_template.c,v 1.10 1995/11/10 18:46:37 tom Exp tom $ to $Header: /export/home/npggw/tom/src/t88mean/RCS/image_template.c,v 1.10 1995/11/10 18:46:37 tom Exp tom $
d19 1
a19 1
 *	
d26 1
a26 1
 *		
d30 1
a30 1
 *		
d45 1
a45 1
 *	
d51 1
a51 1
#include <imglist.h>
d56 3
a58 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/image_template.c,v 1.10 1995/11/10 18:46:37 tom Exp tom $";
d60 8
a67 9
void 
image_template (image3d, mask3d, mskpct, width, height, nslices, npixels)
	float          *image3d;/* pointer to first slice of image3d to template */
	short          *mask3d;	/* pointer to mask to return */
	float           mskpct;	/* threshold as percent */
	int             width;	/* nx */
	int             height;	/* ny */
	int             nslices;/* number of slices to mask */
	long           *npixels;/* number of pixels in created mask */
d70 1
a70 1
	float          *image2d;
d119 1
a119 1
			if (mask2d[i] != INSIDE)	/* Top */
d138 1
a138 1
		for (i = 1; i < width - 1; i++) {	/* Outside rows */
@


1.10
log
@eliminate matrix.h
@
text
@d2 3
d9 1
a9 1
 * changed $Id: image_template.c,v 1.9 1994/10/03 16:17:13 tom Exp tom $ to $Header: /export/home/npggw/tom/src/t88mean/RCS/image_template.c,v 1.9 1994/10/03 16:17:13 tom Exp tom $
d48 1
a48 1
#include <petutil/imglist.h>
d53 1
a53 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/image_template.c,v 1.9 1994/10/03 16:17:13 tom Exp tom $";
@


1.9
log
@standard format with indent
@
text
@d2 3
d6 1
a6 1
 * changed $Id$ to $Header$
a44 1

a45 1
#include <petutil/matrix.h>
d50 1
a50 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/image_template.c,v 1.8 1994/05/18 15:53:30 tom Exp tom $";
@


1.8
log
@changed $Id$ to $Header$
@
text
@d1 4
a4 1
/* $Log$ */
d6 3
a8 3
 *	Module:				image_template.c
 *	Date:					16-Aug-93
 *	Author:				Tom Videen
d10 27
d38 2
a39 2
 *		18-Aug-93		Modification of threshold.c in imgmean.c 
 *								which is C version of d2templa.f in spideram.f
d46 2
a47 2
#define INSIDE		1	
#define OUTSIDE		2	
d49 1
a49 1
static char rcsid []= "$Header: image_template.c,v 1.1 92/12/30 04:20:51 tom Exp $";
d51 9
a59 1
void image_template (image3d, mask3d, mskpct, width, height, nslices, npixels)
a60 8
float		*image3d;			/* pointer to first slice of image3d to template */
short		*mask3d;			/* pointer to mask to return */
float		mskpct;       /* threshold as percent */
int			width;        /* nx */
int			height;				/* ny */
int			nslices;      /* number of slices to mask */
long		*npixels;     /* number of pixels in created mask */

d62 8
a69 8
	float		*image2d;
	short		*mask2d;
	float		threshold;
	float		globalmax;
	int			i, j, k;
	int			slice_index;
	int			dimension;
	BOOLEAN	more;
d71 2
a72 2
	*npixels	= 0;
	dimension =  width * height;
d78 1
a78 1
	globalmax	= 0.;
d80 2
a81 1
		if (image3d [i] > globalmax) globalmax	= image3d [i];
d83 1
a83 1
	threshold	= (globalmax * mskpct) / 100; 
d90 2
a91 2
		slice_index	= k * dimension;
		mask2d  = mask3d + slice_index;
d94 1
a94 1
/* 	
d100 2
a101 2
			if (image2d [i] >= threshold)
				mask2d [i]	= INSIDE;
d103 1
a103 1
				mask2d [i]	= 0;
d106 1
a106 1
/* 
d111 4
a114 4
			if (mask2d [i] != INSIDE)                          /* Top */
				mask2d [i]	= OUTSIDE;
			if (mask2d [(height - 1) * width + i] != INSIDE)   /* Bottom */
				mask2d [(height - 1) * width + i]	= OUTSIDE;
d117 4
a120 4
			if (mask2d [j * width] != INSIDE)                  /* Left */
				mask2d [j * width]	= OUTSIDE;
			if (mask2d [j * width + width - 1] != INSIDE)      /* Right */
				mask2d [j * width + width - 1]	= OUTSIDE;
d123 1
a123 1
/* 
d129 6
a134 6
		more	= FALSE;
		for (i = 1; i < width - 1; i++) {                               /* Outside rows */
			if (mask2d [i] == OUTSIDE && 
					mask2d [width + i] < INSIDE) {                            /* Top */
				mask2d [width + i]	= OUTSIDE;
				more			= TRUE;
d136 4
a139 4
			if (mask2d [(height - 1) * width + i] == OUTSIDE &&           /* Bottom */
					mask2d [(height - 2) * width + i] < INSIDE) {
				mask2d [(height - 2) * width + i]	= OUTSIDE;
				more					= TRUE;
d143 5
a147 5
		for (j = 1; j < height - 1; j++) {                              /* Outside columns */
			if (mask2d [j * width] == OUTSIDE && 
					mask2d [j * width + 1] < INSIDE) {                        /* Left */
				mask2d [j * width + 1]	= OUTSIDE;
				more			= TRUE;
d149 4
a152 4
			if (mask2d [j * width + width - 1] == INSIDE &&
					mask2d [j * width + width - 2 < INSIDE]) {                /* Right */
				mask2d [j * width + width - 2]	= OUTSIDE;
				more				= TRUE;
d161 1
a161 1
			more	= FALSE;
d164 3
a166 3
					if (mask2d [j * width + i] == OUTSIDE) {
						if (mask2d [j * width + i - 1] < INSIDE) {
							mask2d [j * width + i - 1]	= OUTSIDE;
d169 2
a170 2
					  if (mask2d [j * width + i + 1] < INSIDE) {
							mask2d [j * width + i + 1]	= OUTSIDE;
d173 2
a174 2
						if (mask2d [(j - 1) * width + i] < INSIDE) {
							mask2d [(j  - 1) * width + i]	= OUTSIDE;
d177 2
a178 2
						if (mask2d [(j + 1) * width + i] < INSIDE) {
							mask2d [(j  + 1) * width + i]	= OUTSIDE;
d192 2
a193 2
			if (mask2d [i] < OUTSIDE) {
				mask2d [i]	= INSIDE;
d196 1
a196 1
				mask2d [i]	= 0;
@


1.7
log
@changed atlas y-dim to used 5 mm between brain and skull
@
text
@d1 1
a1 1
/* $Log */
d18 2
@


1.6
log
@first version with Talairach 1988 atlas
@
text
@@


1.5
log
@a corrected hd6mean-atlas version of t88mean
@
text
@@
