head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	2004.02.20.16.15.35;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	99.12.17.16.06.32;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.05.10.21.58.54;	author tom;	state Exp;
branches;
next	1.17;

1.17
date	95.11.10.18.48.02;	author tom;	state Exp;
branches;
next	1.16;

1.16
date	95.02.08.21.06.25;	author tom;	state Exp;
branches;
next	1.15;

1.15
date	95.01.19.19.17.25;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	94.10.03.16.17.13;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	94.05.24.22.31.08;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	94.05.24.17.11.54;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	94.05.18.15.53.30;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	94.04.12.22.08.47;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	93.11.08.15.40.57;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	93.10.01.16.41.34;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	93.08.26.17.26.35;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	93.08.20.20.24.07;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	93.08.19.22.55.48;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	93.08.12.22.58.02;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	93.08.06.15.16.49;	author tom;	state Exp;
branches;
next	;


desc
@initial version
@


2.2
log
@Feb 2004
@
text
@/* $Log: image_scale.c,v $
 * Revision 2.1  1999/12/17  16:06:32  tom
 * lint cleaning
 *
 * Revision 2.0  1996/05/10  21:58:54  tom
 * new libimage
 * indexing from 1 on images and atlas
 *
 * Revision 1.17  1995/11/10  18:48:02  tom
 * remove petutil parent directory from include statements
 *
 * Revision 1.16  1995/02/08  21:06:25  tom
 * fix smg_include:n=
 *
 * Revision 1.15  1995/01/19  19:17:25  tom
 * weights
 *
 * Revision 1.14  1994/10/03  16:17:13  tom
 * standard format with indent
 *
 * Revision 1.13  1994/05/24  22:31:08  tom
 * nmask fixed
 *
 * Revision 1.12  1994/05/24  17:11:54  tom
 * nmask fixed to mask
 *
 * Revision 1.11  1994/05/18  15:53:30  tom
 * changed $Id: image_scale.c,v 2.1 1999/12/17 16:06:32 tom Exp tom $ to $Header: /home/npggw/tom/src/t88mean/RCS/image_scale.c,v 2.1 1999/12/17 16:06:32 tom Exp tom $
 * */
/*	========================================================================
 *	Module:			image_scale.c
 *	Date:			Aug 1993
 *	Author:			Tom Videen
 *	Description:	Scale image by smg_divisor and mask pixels using totwt.
 *					Compute sd image.
 *
 *	Inputs:
 *		a[nz][ny][nx]   - atlas image array
 *		sd[nz][ny][nx]  - sum-of-squares image array
 *		totwt[nz][ny][nx] - array of total weights per pixel
 *		dim[3]			-	dimensions of arrays
 *		maxwt           -   total weighted number of images processed
 *		smg_divisor     -   "global" or "local" or "none"
 *		smg_included    -   "all", "sampled" or "n= "
 *		compute_sd      -   1 -> compute sd
 *
 *	Output:
 *		a[nz][ny][nx]   - atlas image array (scaled and masked)
 *		sd[nz][ny][nx]  - sd image array
 *
 *	Algorithm:
 *
 *	1)  If (compute_sd) then compute standard deviation image, sd from:
 *			sd = sqrt ( (sumsqrs - ((sum * sum) / n)) / (n - 1) )
 *
 *	    where:
 *	        sumsqrs = sd[i][j][k] (on input)
 *	        sum     = a[i][j][k]
 *	        n       = totwt[i][j][k]
 *
 *	    sd = 0 for n <= 1 and when sqrt of negative value
 *
 *	2)  If (sum_included = all) then
 *	        If (smg_divisor = global) then divide by total number of images
 *	           a = a / maxwt
 *	        else divide by total weight contributing to each pixel
 *	            a = a / totwt
 *	    Else if (smg_included = n=?) then divide by number of images contributing
 *	        to each pixel for all pixels which totwt >= the specified n
 *	            a = a / totwt  where totwt > ?; otherwise a = 0
 *	    Else divide by total number of images for fully sampled pixels
 *	            a = a / totwt where totwt = maxwt; otherwise a = 0
 *
 *	History:
 *		Aug 1993:	Compute sd image (sd) for all pixels within a mask (if a mask is specified)
 *		Sep 1993:	Correct algorithm for computing sd
 *		Apr 1994	added nmask to allow selective masking of output image to n subjects
 *		May 1994	fixed nmask  (it was not zeroing outside of the mask)
 *	========================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/image_scale.c,v 2.1 1999/12/17 16:06:32 tom Exp tom $";
#endif

#include <stdlib.h>
#include <string.h>
#include <math.h>

/*	-----------------------
 *	Function image_scale
 *	-----------------------
 */
void            image_scale (a, totwt, dim, maxwt, smg_divisor, smg_included, compute_sd, sd)
	float        ***a, ***sd;
	float        ***totwt;
	long           *dim;
	double          maxwt;
	char           *smg_divisor;
	char           *smg_included;
	int				compute_sd;

{
	long            i, j, k;
	int             nmask;	 /* optional; specifies min number of subjects for
						  	  * each non-zero pixel */
	float           f;
	float           n;
	float           sum;
	float           sumsqrs;		 /* sum of the squares */
	float           ssqr;			 /* sigma squared */
	float			xmax, xmin;

/*
 *	Compute Standard Deviation image from sum-of-squares (sd), sum (a), and n (totwt)
 */

	if (compute_sd == 1) {
		for (i = 1; i <= dim[2]; ++i) {
			for (j = 1; j <= dim[1]; ++j) {
				for (k = 1; k <= dim[0]; ++k) {
					n = totwt[i][j][k];
					sum = a[i][j][k];
					sumsqrs = sd[i][j][k];
					if (n > 1 && sumsqrs > 0) {
						ssqr = (sumsqrs - ((sum * sum) / n)) / (n - 1);
						if (ssqr > 0)
							sd[i][j][k] = sqrt (ssqr);
						else
							sd[i][j][k] = 0;
					} else
						sd[i][j][k] = 0;
				}
			}
		}
	}
/*
 *	All pixels; divide by total weighted number of images
 */

	if (strcmp (smg_included, "all") == 0) {
		if (strcmp (smg_divisor, "global") == 0) {
			f = 1. / maxwt;
			for (i = 1; i <= dim[2]; ++i) {
				for (j = 1; j <= dim[1]; ++j) {
					for (k = 1; k <= dim[0]; ++k) {
						a[i][j][k] *= f;
					}
				}
			}

/*
 *	All pixels; divide by weighted number of images contributing to each pixel
 */

		} else if (strcmp (smg_divisor, "local") == 0) {
			for (i = 1; i <= dim[2]; ++i) {
				xmin = 0;
				xmax = 0;
				for (j = 1; j <= dim[1]; ++j) {
					for (k = 1; k <= dim[0]; ++k) {
						if (totwt[i][j][k] > 0)
							a[i][j][k] /= totwt[i][j][k];
						if (a[i][j][k] > xmax)
							xmax = a[i][j][k];
						else if (a[i][j][k] < xmin)
							xmin = a[i][j][k];
					}
				}
			}
		}
/* Not that smg_included = "all" and smg_divisor = "none" drops through with no processing */

/*
 *	All pixels which had at least nmask images contributing to them;
 *	divide by number of images contributing to each pixel
 */

	} else if (strncmp (smg_included, "n=", 2) == 0) {
		nmask = atoi (smg_included + 2);
		for (i = 1; i <= dim[2]; ++i) {
			for (j = 1; j <= dim[1]; ++j) {
				for (k = 1; k <= dim[0]; ++k) {
					if (totwt[i][j][k] + .001 >= (float) nmask)
						a[i][j][k] /= totwt[i][j][k];
					else
						a[i][j][k] = 0;
				}
			}
		}

/*
 *	Only fully sampled pixels; divide by total weighted number of images
 */

	} else {
		f = 1. / maxwt;
		for (i = 1; i <= dim[2]; ++i) {
			for (j = 1; j <= dim[1]; ++j) {
				for (k = 1; k <= dim[0]; ++k) {
					if (fabs (totwt[i][j][k] - maxwt) < .001)
						a[i][j][k] *= f;
					else
						a[i][j][k] = 0;
				}
			}
		}
	}
}
@


2.1
log
@lint cleaning
@
text
@d2 3
d28 1
a28 1
 * changed $Id: image_scale.c,v 2.0 1996/05/10 21:58:54 tom Exp tom $ to $Header: /home/npggw/tom/src/t88mean/RCS/image_scale.c,v 2.0 1996/05/10 21:58:54 tom Exp tom $
d32 1
a32 1
 *	Date:			10-Aug-93
d45 1
a45 1
 *		compute_sd      -   TRUE -> compute sd
d75 4
a78 4
 *		11-Aug-93:	Compute sd image (sd) for all pixels within a mask (if a mask is specified)
 *		30-Sep-93:	Correct algorithm for computing sd
 *		12-Apr-94	added nmask to allow selective masking of output image to n subjects
 *		24-May-94	fixed nmask  (it was not zeroing outside of the mask)
d81 1
d83 1
a83 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/image_scale.c,v 2.0 1996/05/10 21:58:54 tom Exp tom $";
a88 1
#include <imgutil.h>
d101 1
a101 1
	BOOLEAN         compute_sd;
d118 1
a118 1
	if (compute_sd) {
@


2.0
log
@new libimage
indexing from 1 on images and atlas
@
text
@d2 4
d25 1
a25 1
 * changed $Id: image_scale.c,v 1.17 1995/11/10 18:48:02 tom Exp tom $ to $Header: /home/npggw/tom/src/t88mean/RCS/image_scale.c,v 1.17 1995/11/10 18:48:02 tom Exp tom $
d78 6
a83 1
#include <stdio.h>
a85 1
#include <atlas.h>
a86 4
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/image_scale.c,v 1.17 1995/11/10 18:48:02 tom Exp tom $";
#endif

d95 1
a95 1
	float           maxwt;
a109 1
	float			wmax;
a156 1
				wmax = 0;
d159 1
a159 1
						if (totwt[i][j][k] > 0) {
a160 2
							wmax = totwt[i][j][k];
						}
a166 3
/*
				printf ("Z= %d  Wt= %f  Max= %f  Min= %f\n", i, wmax, xmax, xmin);
 */
@


1.17
log
@remove petutil parent directory from include statements
@
text
@d2 3
d21 1
a21 1
 * changed $Id: image_scale.c,v 1.16 1995/02/08 21:06:25 tom Exp tom $ to $Header: /export/home/npggw/tom/src/t88mean/RCS/image_scale.c,v 1.16 1995/02/08 21:06:25 tom Exp tom $
d29 1
a29 1
 *	 
d31 4
a34 4
 *		a[nz][DIM][DIM]   - atlas image array
 *		sd[nz][DIM][DIM]  - sum-of-squares image array
 *		totwt[nz][DIM][DIM] - array of total weights per pixel
 *		nz              -   number of slices
d39 1
a39 1
 *		 
d41 3
a43 3
 *		a[nz][DIM][DIM]   - atlas image array (scaled and masked)
 *		sd[nz][DIM][DIM]  - sd image array
 *		
d45 1
a45 1
 *		 
d48 1
a48 1
 *	 
d51 1
a51 1
 *	        sum     = a[i][j][k] 
d53 1
a53 1
 *		 
d55 1
a55 1
 *		 
d66 1
a66 1
 *		
a73 1

d76 2
a77 2
#include <petutil.h>
#include "atlas.h"
d79 3
a81 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/image_scale.c,v 1.16 1995/02/08 21:06:25 tom Exp tom $";
d87 4
a90 5
void 
image_scale (a, totwt, nz, maxwt, smg_divisor, smg_included, compute_sd, sd)
	REAL_SLICE     *a, *sd;
	REAL_SLICE    *totwt;
	int             nz;
d97 3
a99 3
	int             i, j, k;
	int             nmask;	/* optional; specifies min number of subjects for each non-zero
				 * pixel */
d103 4
a106 2
	float           sumsqrs;/* sum of the squares */
	float           ssqr;	/* sigma squared */
d113 3
a115 3
		for (i = 0; i < nz; ++i) {
			for (j = 0; j < DIM; ++j) {
				for (k = 0; k < DIM; ++k) {
a130 1

d138 3
a140 3
			for (i = 0; i < nz; ++i) {
				for (j = 0; j < DIM; ++j) {
					for (k = 0; k < DIM; ++k) {
d151 7
a157 4
			for (i = 0; i < nz; ++i) {
				for (j = 0; j < DIM; ++j) {
					for (k = 0; k < DIM; ++k) {
						if (totwt[i][j][k] > 0)
d159 6
d167 3
a171 1

d181 3
a183 3
		for (i = 0; i < nz; ++i) {
			for (j = 0; j < DIM; ++j) {
				for (k = 0; k < DIM; ++k) {
d198 4
a201 4
		for (i = 0; i < nz; ++i) {
			for (j = 0; j < DIM; ++j) {
				for (k = 0; k < DIM; ++k) {
					if (fabs(totwt[i][j][k] - maxwt) < .001)
@


1.16
log
@fix smg_include:n=
@
text
@d2 3
d18 1
a18 1
 * changed $Id: image_scale.c,v 1.15 1995/01/19 19:17:25 tom Exp $ to $Header: /home/npggw/tom/src/t88mean/RCS/image_scale.c,v 1.15 1995/01/19 19:17:25 tom Exp $
d74 1
a74 1
#include <petutil/petutil.h>
d77 1
a77 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/image_scale.c,v 1.15 1995/01/19 19:17:25 tom Exp $";
@


1.15
log
@weights
@
text
@d2 3
d15 1
a15 1
 * changed $Id: image_scale.c,v 1.14 1994/10/03 16:17:13 tom Exp tom $ to $Header: /home/npggw/tom/src/t88mean/RCS/image_scale.c,v 1.14 1994/10/03 16:17:13 tom Exp tom $
d74 1
a74 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/image_scale.c,v 1.14 1994/10/03 16:17:13 tom Exp tom $";
d166 1
a166 1
					if (fabs(totwt[i][j][k] - nmask) >= .001)
@


1.14
log
@standard format with indent
@
text
@d2 3
d12 1
a12 1
 * changed $Id: image_scale.c,v 1.13 1994/05/24 22:31:08 tom Exp tom $ to $Header: /export/home/npggw/tom/src/t88mean/RCS/image_scale.c,v 1.13 1994/05/24 22:31:08 tom Exp tom $
d18 1
a18 1
 *	Description:	Scale image by smg_divisor and mask pixels using nin.
d24 1
a24 1
 *		nin[nz][DIM][DIM] - n image array
d26 2
a27 2
 *		lstsize         -   number of images processed
 *		smg_divisor     -   "global" or "local"
d43 1
a43 1
 *	        n       = nin[i][j][k]
d49 3
a51 3
 *	           a = a / lstsize
 *	        else divide by number of images contributing to each pixel
 *	            a = a / nin
d53 2
a54 2
 *	        to each pixel for all pixels which nin >= the specified n
 *	            a = a / nin  where nin > ?; otherwise a = 0
d56 1
a56 1
 *	            a = a / nin where nin = lstsize; otherwise a = 0
d71 1
a71 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/image_scale.c,v 1.13 1994/05/24 22:31:08 tom Exp tom $";
d78 1
a78 1
image_scale (a, nin, nz, lstsize, smg_divisor, smg_included, compute_sd, sd)
d80 1
a80 1
	SHORT_SLICE    *nin;
d82 1
a82 1
	int             lstsize;
d98 1
a98 1
 *	Compute Standard Deviation image from sum-of-squares (sd), sum (a), and n (nin)
d105 1
a105 1
					n = nin[i][j][k];
d120 1
d122 1
a122 1
 *	All pixels; divide by total number of images
d127 1
a127 1
			f = 1. / lstsize;
d137 1
a137 1
 *	All pixels; divide by number of images contributing to each pixel
d140 1
a140 1
		} else {
d144 2
a145 2
						if (nin[i][j][k] > 0)
							a[i][j][k] /= nin[i][j][k];
d151 2
d163 2
a164 2
					if (nin[i][j][k] >= nmask)
						a[i][j][k] /= nin[i][j][k];
d172 1
a172 1
 *	Only fully sampled pixels; divide by total number of images
d176 1
a176 1
		f = 1. / lstsize;
d180 1
a180 1
					if (nin[i][j][k] == lstsize)
@


1.13
log
@nmask fixed
@
text
@d2 3
d9 1
a9 1
 * changed $Id: image_scale.c,v 1.12 1994/05/24 17:11:54 tom Exp tom $ to $Header: /home/petsun2/tom/src/t88mean/RCS/image_scale.c,v 1.12 1994/05/24 17:11:54 tom Exp tom $
d12 43
a54 4
 *	Module:				image_scale.c
 *	Date:					10-Aug-93
 *	Author:				Tom Videen
 *	Description:	Scale image by smg_divisor and mask pixels using nin
d56 1
a56 2
 *		11-Aug-93:	Compute sd image (sd) for all pixels within a mask
 *				(if a mask is specified)
d58 2
a59 2
 *		12-Apr-94		added nmask to allow selective masking of output image to n subjects
 *		24-May-94		fixed nmask  (it was not zeroing outside of the mask)
d68 1
a68 1
static char rcsid []= "$Header: /home/petsun2/tom/src/t88mean/RCS/image_scale.c,v 1.12 1994/05/24 17:11:54 tom Exp tom $";
d74 9
a82 8
void image_scale (a, nin, nz, lstsize, smg_divisor, smg_included, paired_images, compute_sd, sd)
	REAL_SLICE	*a, *sd;
	SHORT_SLICE *nin;
	int		nz;
	int		lstsize;
	char	*smg_divisor;
	char	*smg_included;
	BOOLEAN paired_images, compute_sd;
d85 8
a92 7
	int		i, j, k;
	int		nmask;			/* optional; specifies min number of subjects for each non-zero pixel */
	float	f;
	float	n;
	float sum;
	float	sumsqrs;		/* sum of the squares */
	float ssqr;				/* sigma squared */
d100 1
a100 1
			for (j = 0 ; j < DIM; ++j) {
d108 1
a108 1
							sd[i][j][k] =  sqrt (ssqr);
d110 1
a110 1
          	  sd[i][j][k] = 0;
a116 1

d125 1
a125 1
				for (j = 0 ; j < DIM; ++j) {
d138 1
a138 1
				for (j = 0 ; j < DIM; ++j) {
d153 1
a153 1
		nmask = atoi(smg_included + 2);
d155 1
a155 1
			for (j = 0 ; j < DIM; ++j) {
d160 1
a160 1
            a[i][j][k] = 0;
d172 1
a172 1
			for (j = 0 ; j < DIM; ++j) {
@


1.12
log
@nmask fixed to mask
@
text
@d2 3
d6 1
a6 1
 * changed $Id$ to $Header$
d27 1
a27 1
static char rcsid []= "$Header: /home/petsun2/tom/src/t88mean/RCS/image_scale.c,v 1.11 1994/05/18 15:53:30 tom Exp tom $";
d115 1
a115 1
					if (nin[i][j][k] > nmask)
@


1.11
log
@changed $Id$ to $Header$
@
text
@d1 4
a4 1
/* $Log$ */
d15 1
d24 1
a24 1
static char rcsid []= "$Header: image_scale.c,v 1.1 92/12/30 04:20:48 tom Exp $";
d114 2
@


1.10
log
@added nmask option in smg_include
@
text
@d1 1
a1 1
/* $Log */
d20 1
a20 1
static char rcsid []= "$Id: image_scale.c,v 1.9 1993/11/08 15:40:57 tom Exp tom $";
@


1.9
log
@check for sqrt(0)
@
text
@d11 1
d20 1
a20 1
static char rcsid []= "$Id: image_scale.c,v 1.8 1993/10/01 16:41:34 tom Exp tom $";
d37 1
d94 16
@


1.8
log
@fixed calculation of sdimage
@
text
@d19 1
a19 1
static char rcsid []= "$Id: image_scale.c,v 1.7 1993/08/26 17:26:35 tom Exp tom $";
d55 4
a58 1
						sd[i][j][k] =  sqrt (ssqr);
@


1.7
log
@changed atlas y-dim to used 5 mm between brain and skull
@
text
@d10 1
d19 1
a19 1
static char rcsid []= "$Id: image_scale.c,v 1.6 1993/08/20 20:24:07 tom Exp tom $";
d36 5
a40 1
	float	f, n;
d50 7
a56 1
					if (nin[i][j][k] == 0)
a57 14
					else {
						if (paired_images) {
							if (sd[i][j][k] >= 0.)
								sd[i][j][k] =  sqrt (sd[i][j][k] / nin[i][j][k]);
							else
								sd[i][j][k] = 0;
						} else {
							f = sd[i][j][k] - ((a[i][j][k] * a[i][j][k]) / nin[i][j][k]);
							if (f >= 0. )
								sd[i][j][k] =  sqrt (f / nin[i][j][k]);
							else
								sd[i][j][k] = 0;
						}
					}
@


1.6
log
@first version with Talairach 1988 atlas
@
text
@d18 1
a18 1
static char rcsid []= "$Id: image_scale.c,v 1.5 1993/08/19 22:55:48 tom Exp tom $";
@


1.5
log
@a corrected hd6mean-atlas version of t88mean
@
text
@d18 1
a18 1
static char rcsid []= "$Id: image_scale.c,v 1.4 1993/08/12 22:58:02 tom Exp tom $";
@


1.4
log
@equivalent to hd6mean
@
text
@d18 1
a18 1
static char rcsid []= "$Id: image_scale.c,v 1.3 1993/08/06 15:16:49 tom Exp tom $";
@


1.3
log
@reads prm and list files
@
text
@d4 1
a4 1
 *	Date:					06-Aug-93
d6 1
a6 1
 *	Description:	Scale image by pixel_divisor and mask pixels using nin
d8 2
d14 2
d18 1
a18 1
static char rcsid []= "$Id$";
d24 2
a25 2
void image_scale (a, nin, nz, lstsize, pixel_divisor, pixels_included)
	REAL_SLICE	*a;
d29 4
a32 2
	char	pixel_divisor[10];
	char	pixels_included[10];
d35 1
a35 1
	float	f;
d38 29
d70 2
a71 2
	if (strcmp (pixels_included, "all")) {
		if (strcmp (pixel_divisor, "global")) {
d89 2
a90 1
						a[i][j][k] /= nin[i][j][k];
d108 1
a108 1
						a[i][j][k] *= 0;
@
