head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	93.08.12.22.58.02;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	93.08.06.15.16.49;	author tom;	state Exp;
branches;
next	;


desc
@initial version
@


1.4
log
@equivalent to hd6mean
@
text
@/* $Log */
/*	===============================================================================
 *	Module:				get_tal88_prms.c
 *	Date:					10-Aug-93
 *	Author:				Tom Videen
 *	Description:	Read program-specific parameters from the parameter file.
 *	===============================================================================
 */

#include <stdio.h>
#include <string.h>
#include <petutil/petutil.h>

static char rcsid []= "$Id: get_tal88_prms.c,v 1.3 1993/08/06 15:16:49 tom Exp tom $";

int get_tal88_prms (prmfile, smg_norm, smg_divisor, smg_included, processing, smg_mode, 
	smg_mask, smg_sdimage, smg_nimage)

char		*prmfile;
float		*smg_norm;
char		*smg_divisor;
char		*smg_included;
char		*processing;
char		*smg_mode;
char		*smg_mask;
char		*smg_sdimage;
char		*smg_nimage;

{
	FILE	*fp;
	char	line [MAXLINE];
	char	label [MAXLINE];
	char	parameter [MAXLINE];

	*smg_norm = 0;
	strcpy (smg_divisor, "NONE");
	strcpy (smg_included, "NONE");
	strcpy (smg_mode, "NONE");
	strcpy (processing, "NONE");
	strcpy (smg_mask, "none");
	strcpy (smg_sdimage, "none");
	strcpy (smg_nimage, "none");

	fp	= fopen (prmfile, "r");
	if (fp == (FILE *) NULL) {
		printf ("Error opening parameter file %s\n", prmfile);
		return FAIL;
	}

	while (fgets (line, MAXLINE, fp) != NULL) {
		if (sscanf (line, "%s %s", label, parameter) == 2) {

/* 
 *	Get smg_norm
 */

			if (strcmp (label, "smg_norm:") == 0) {
				if (DetermineType (parameter) == DATA_TYPE_REAL ||
						DetermineType (parameter) == DATA_TYPE_INTEGER)
					*smg_norm	= atof (parameter);
				else {
					printf ("Error reading smg_norm from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get smg_mode
 */

			} else if (strcmp (label, "smg_mode:") == 0) {
				if (strcmp (parameter, "single") == 0 ||
						strcmp (parameter, "paired") == 0 ||
						strcmp (parameter, "diff")   == 0)
					strcpy (smg_mode, parameter);
				else {
					printf ("Error reading smg_mode from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get smg_divisor
 */

			} else if (strcmp (label, "smg_divisor:") == 0) {
				if (strcmp (parameter, "global") == 0 ||
						strcmp (parameter, "local")  == 0)
					strcpy (smg_divisor, parameter);
				else {
					printf ("Error reading smg_divisor from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get smg_included
 */

			} else if (strcmp (label, "smg_included:") == 0) {
				if (strcmp (parameter, "all")     == 0 ||
						strcmp (parameter, "sampled") == 0)
					strcpy (smg_included, parameter);
				else {
					printf ("Error reading smg_included from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get processing
 */

			} else if (strcmp (label, "processing:") == 0) {
				if (strcmp (parameter, "none") == 0 ||
						strcmp (parameter, "cbf")  == 0 ||
						strcmp (parameter, "cbv")  == 0)
					strcpy (processing, parameter);
				else {
					printf ("Error reading processing from %s\n", prmfile);
					return FAIL;
				}

/*
 *	Get smg_mask
 */

			} else if (strcmp (label, "smg_mask:") == 0) {
					strcpy (smg_mask, parameter);

/*
 *	Get smg_sdimage
 */

			} else if (strcmp (label, "smg_sdimage:") == 0) {
					strcpy (smg_sdimage, parameter);

/*
 *	Get smg_nimage
 */

			} else if (strcmp (label, "smg_nimage:") == 0) {
					strcpy (smg_nimage, parameter);
			}
		}
	}

/*
 *	Check that required parameters have been assigned new values
 */

	if (*smg_norm == 0) {
		printf ("Error:  smg_norm not found in %s\n", prmfile);
		return FAIL;
	}
	if (strcmp (smg_divisor, "NONE") == 0) {
		printf ("Error:  smg_divisor not found in %s\n", prmfile);
		return FAIL;
	}
	if (strcmp (smg_included, "NONE") == 0) {
		printf ("Error:  smg_included not found in %s\n", prmfile);
		return FAIL;
	}
	if (strcmp (smg_mode, "NONE") == 0) {
		printf ("Error:  smg_mode not found in %s\n", prmfile);
		return FAIL;
	}
	if (strcmp (processing, "NONE") == 0) {
		printf ("Error:  processing not found in %s\n", prmfile);
		return FAIL;
	}
}
@


1.3
log
@reads prm and list files
@
text
@d4 1
a4 1
 *	Date:					06-Aug-93
d14 1
a14 1
static char rcsid []= "$Id$";
d16 2
a17 1
int get_tal88_prms (prmfile, normvalue, pixel_divisor, pixels_included, processing, filetype)
d20 8
a27 5
float		*normvalue;
char		pixel_divisor[10];
char		pixels_included[10];
char		processing[10];
char		filetype[10];
d35 9
d54 1
a54 1
 *	Get normvalue
d57 1
a57 1
			if (strcmp (label, "normvalue:") == 0) {
d60 1
a60 1
					*normvalue	= atof (parameter);
d62 1
a62 1
					printf ("Error reading normvalue from %s\n", prmfile);
d67 1
a67 1
 *	Get filetype
d70 1
a70 1
			} else if (strcmp (label, "filetype:") == 0) {
d74 1
a74 1
					strcpy (filetype, parameter);
d76 1
a76 1
					printf ("Error reading filetype from %s\n", prmfile);
d81 1
a81 1
 *	Get pixel_divisor
d84 1
a84 1
			} else if (strcmp (label, "pixel_divisor:") == 0) {
d87 1
a87 1
					strcpy (pixel_divisor, parameter);
d89 1
a89 1
					printf ("Error reading pixel_divisor from %s\n", prmfile);
d94 1
a94 1
 *	Get pixels_included
d97 1
a97 1
			} else if (strcmp (label, "pixels_included:") == 0) {
d100 1
a100 1
					strcpy (pixels_included, parameter);
d102 1
a102 1
					printf ("Error reading pixels_included from %s\n", prmfile);
d119 21
d142 25
@
