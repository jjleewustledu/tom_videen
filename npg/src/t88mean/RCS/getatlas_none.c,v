head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	2004.02.20.16.15.35;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	99.12.17.16.06.32;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	96.05.10.21.58.42;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	95.11.10.18.47.58;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	95.08.31.21.58.40;	author tom;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Feb 2004
@
text
@/*	$Id: getatlas_none.c,v 2.1 1999/12/17 16:06:32 tom Exp tom $
	$Log: getatlas_none.c,v $
 * Revision 2.1  1999/12/17  16:06:32  tom
 * lint cleaning
 *
 * Revision 2.0  1996/05/10  21:58:42  tom
 * new libimage
 * indexing from 1 on images and atlas
 *
 * Revision 1.2  1995/11/10  18:47:58  tom
 * remove petutil parent directory from include statements
 *
 * Revision 1.1  1995/08/31  21:58:40  tom
 * Initial revision
 * */
/* ===============================================================================
 *	Module:			getatlas_none.c
 *	Date:			Aug 1995
 *	Author:			Tom Videen
 *	Description:	Set parameters for no atlas transformation.
 *					Take most of the parameters from an input image file.
 * ===============================================================================
 */
/*@@unused@@*/
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/getatlas_none.c,v 2.1 1999/12/17 16:06:32 tom Exp tom $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <image.h>	
#include <libimage.h>
#include <atlas.h>			 /* BRAIN_ATLAS */

int           getatlas_none (atlas, scanname)
	BRAIN_ATLAS    *atlas;			 /* brain atlas definition */
	char           *scanname;

{
    ImageFile      *file;
    Index           indx;

    indx.frm = 1;
    indx.pln = 1;
    indx.gate = 1;
    indx.data = 0;
    indx.bed = 0;

	strcpy (atlas->name, "None");
    file = make_imgfile (scanname);
    if (open_imgfile (file) == ERROR) {
        fprintf (stderr, "ERROR [template]: Cannot open %s\n", scanname);
        return (ERROR);
    }
    if (get_mh (file) == ERROR) {
        fprintf (stderr, "ERROR [template]: Cannot get MainHeader from %s\n", scanname);
        return (ERROR);
    }
    if (get_sh (file, &indx) == ERROR) {
        fprintf (stderr, "ERROR [template]: Cannot read file subheader in %s\n", scanname);
		return (ERROR);
	}
	atlas->nx = file->sh->dim1;
	atlas->ny = file->sh->dim2;
	atlas->nz = file->sh->dim3;
	atlas->pixel_size = file->sh->sample_size_1;
	atlas->slice_separation = file->sh->sample_size_3;
	atlas->z0 = 0;
	free_imgfile (file);
	return (0);
}
@


2.1
log
@lint cleaning
@
text
@d1 1
a1 1
/*	$Id: getatlas_none.c,v 2.0 1996/05/10 21:58:42 tom Exp tom $
d3 3
d18 1
a18 1
 *	Date:			31-Aug-95
d24 1
d26 1
a26 1
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/getatlas_none.c,v 2.0 1996/05/10 21:58:42 tom Exp tom $";
d36 1
a36 1
void            getatlas_none (atlas, scanname)
d54 1
a54 1
        exit (ERROR);
d58 1
a58 1
        exit (ERROR);
d62 1
a62 1
		exit (ERROR);
d71 1
@


2.0
log
@new libimage
indexing from 1 on images and atlas
@
text
@d1 1
a1 1
/*	$Id: getatlas_none.c,v 1.2 1995/11/10 18:47:58 tom Exp tom $
d3 4
d21 4
a31 4
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/t88mean/RCS/getatlas_none.c,v 1.2 1995/11/10 18:47:58 tom Exp tom $";
#endif

@


1.2
log
@remove petutil parent directory from include statements
@
text
@d1 1
a1 1
/*	$Id: getatlas_none.c,v 1.1 1995/08/31 21:58:40 tom Exp tom $
d3 3
d13 2
a14 2
 *	Description:
 *		Set parameters for no atlas transformation.
d20 3
a22 4
#include <matrix.h>			 /* MatrixFile, Matval */
#include <matrixlib.h>
#include <petutil.h>			 /* O_RDONLY */
#include "atlas.h"				 /* BRAIN_ATLAS */
d24 3
a26 1
static char     rcsid[] = "$Header: /export/home/npggw/tom/src/t88mean/RCS/getatlas_none.c,v 1.1 1995/08/31 21:58:40 tom Exp tom $";
d33 2
a34 12
	int             fd;
	int             scanner;
	short           nx;
	short           ny;
	short           num_slices;
	float           pixel_size;
	float           plane_separation;
	float           default_pixel_size;
	float           default_plane_separation;
	struct Matval   matval;
	MatrixFile     *fptr;
	BOOLEAN         encoded_flag;
d36 6
d43 12
a54 4
	fd = open (scanname, O_RDONLY, 0);
	if (fd == -1) {
		fprintf (stderr, "Error opening %s\n", scanname);
		exit (FAIL);
d56 7
a62 27
	scanner = getimage_type (fd, scanname, &encoded_flag, &num_slices);
	close (fd);
	if (scanner == ERROR_SCANNER) {
		fprintf (stderr, "Error: file is not a recognized PET image\n");
		exit (FAIL);
	}
	if (scanner == ECAT_SCANNER) {
		fptr = OpenEcat (scanname, &num_slices, &nx, &ny, &pixel_size,
				 &plane_separation, matval);
		if (fptr == (MatrixFile *) NULL) {
			fprintf (stderr, "Error: cannot open %s as an ECAT image file\n", scanname);
			exit (FAIL);
		}
		matrix_close (fptr);
		atlas->nx = nx;
		atlas->ny = ny;
		atlas->nz = num_slices;
		atlas->pixel_size = pixel_size;
		atlas->slice_separation = plane_separation;
		atlas->z0 = 0;
	} else {
		atlas->nx = DIM;
		atlas->ny = DIM;
		atlas->nz = 7;
		atlas->pixel_size = 0.286;
		atlas->slice_separation = 1.44;
	}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
/*	$Id$
	$Log$ */
d17 3
a19 3
#include <petutil/matrix.h>			 /* MatrixFile, Matval */
#include <petutil/matrixlib.h>
#include <petutil/petutil.h>			 /* O_RDONLY */
d22 1
a22 1
static char     rcsid[] = "$Header$";
@
