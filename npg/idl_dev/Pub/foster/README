README   2-25-99   DSFoster 

This directory contains IDL routines that I hope will be useful
to other programmers and users in the IDL community. Please feel
free to download and distribute these files freely, and please
notify me if you have any problems with or suggestions for any 
of the routines: (dfoster@ucsd.edu) . 

These routines have been used extensively in our research lab, so
they should be quite robust. But be aware that you use these routines 
at your own risk blah blah blah. To use the widget programs you must be
using IDL version 5.0 or later; the non-widget routines will work under
earlier versions.

And one last qualifier: I apologize for the lack of "appropriate"
IDL headers for the routines -- you can find useful help information
for each routine in its associated .doc file. You can use my program
LHELP.PRO to view these .doc files, provided they are in the same
directories as the .pro files (and in IDL's !PATH).

These routines have been used under Solaris 2.X and IRIX 6.X, and
were written for use on UNIX systems. Most will be directly portable
to Windows and Mac; however, some may require slight modifications.
Some few spawn UNIX commands and are therefore specific to UNIX.
I have attempted to note when such restrictions apply. Also, the
routines that use colors were written for use with 8-bit color visuals.

Distrubution:
------------

Site: ftp://bial8.ucsd.edu

Directory: pub/software/idl/share

	This file:            README

    Entire Distribution:  idl_share.tar.gz

    Show_img Program:     ./Show_img/show_img.tar.gz

    Lhelp Program:        ./Lhelp/lhelp.tar.gz

The subdirectories Show_img and Lhelp contain routines necessary
for SHOW_IMG and LHELP widget programs, respectively. As I have
had many requests for these programs, I have made it possible to
download them separately, including their required routines. 
See the list of routines below for their descriptions.

Alternatively, you can get all files listed below, including
Show_Img and Lhelp programs, by downloading the entire distribution.

An easy way to view the routines would be to download the entire
distribution somewhere in IDL's !PATH, and run my LHELP program to view
the .doc documentation files and their .pro files.

Enjoy. I've tagged the ones I consider especially useful with "[**]".
Please let me know if you have any problems, comments, complaints...

Dave

  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       David S. Foster        Univ. of California, San Diego
       Programmer/Analyst     Brain Image Analysis Laboratory
       dfoster@.ucsd.edu      Department of Psychiatry
       (619) 622-5892         8950 Via La Jolla Drive, Suite 2240
                              La Jolla, CA  92037
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



-----------------
List of Routines:
-----------------

ADJUST_COLORS : Popup widget that lets you adjust color palette
    indices using sliders. This is an enhancement to the
    COLORS.PRO example in the IDL User's Manual.

    [BEEP, POS_WIDGET]

ADJUST_INTENSITY : Popup widget that allows you to adjust the
    intensity of an image appearing in one window to match that
    of an image in another window; this is useful for simultaneous
    display of two images that have different frequency distributions,
    using the same grayscale settings. The user adjusts a slider that
    adds or subtracts from the signal values of one image; histograms
    are displayed showing the frequency distributions of the two images.

ASK [**] : A more versatile alternative to IDL's DIALOG_MESSAGE.
	Popup widget that presents a single or multi-line message
    or question to the user, along with a series of button answers. The
    number of the button pressed is returned as (1,2,...N) (sorry, this
    is for historical reasons). Can also be used to create a popup 
    informational message widget that will be destroyed later by the 
    calling module. 

    [BEEP, POS_WIDGET]
	
BEEP : Ring the bell! Used by many of the widget programs here.

BYTE_SCALE : Scales an array into the specified range and converts
    to a byte array. More versatile than IDL's BYTSCL() function,
    in that it allows you to constrict both the top *and* the
    bottom of the range of values for the array.

CENTER_TEXT : Center a text string within a text widget. This only
    works well if you are using non-proportional fonts.

CIRCLE_IND : Return indices into an array for a circle of a given 
    size centered at a given coordinate (thanks John Votaw).

CONV_IND : Convert 1D array indices into 2D or 3D indices.
    Useful when using indices returned by WHERE() with 2D image
    or 3D volume arrays.

DEFROIS : Allows the user to designate multiple polygonal regions
    using the mouse. Calls DEFROI2.PRO, which is similar to IDL's
    DEFROI with the extension that the middle mouse button can
    optionally close the current polygon but not return, allowing
    multiple regions within one call to DEFROI2. In DEFROI2, when
    the keyword ZOOM is used, the subscripts returned correspond to
    the original array, not to the displayed image (as they are in 
    IDL's DEFROI). 

    [DEFROI2]

DEFROI2 : Modified version of IDL's DEFROI.PRO with these enhancements:
    1. When ZOOM is specified, returns subscripts corresponding
       to original image, not zoomed image.
    2. Return correct subscripts when !ORDER=1 and ZOOM ne 1.
    3. Can use middle mouse button to close current polygon; the
       button pressed is returned as argument, allowing the calling
       program to act accordingly.
    4. Can specify drawing color.
    5. Can specify vertices to prepend and append to coordinates chosen,
       to facilitate the choosing of midlines and the like.
    6. Can specify text widget id where current cursor coordinates
       are displayed as the cursor is moved.

DELETE_FILES : Delete filename(s) specified.

    (Unix only)
    [FILE_FIND]

DISPLAY_SERIES [**] : Widget program to allow the user to scroll through
    a series of 2D images. Written initially for use with medical images 
    (MRI,PET,SPECT,CT). The images can be individual files, which must be 
    compatible with READ_IMG() (see below), or they can be stored in a
    single volume file.

    [ASK, BEEP, BYTE_SCALE, FILENAME, FILE_FIND, FILE_STRARR, FILE_UTILS, 
     FIND_PROCEDURE, GET_TEXT, GRAYSCALE, LHELP, MAKE_VOL, READ_IMG,
     POS_WIDGET, STRETCH2]

EDIT_TEXT [**] : Popup widget to allow user to enter and edit text in
    a multi-line text widget. For filename entries you can require that 
    filenames exist.  

    [ASK, BEEP, POS_WIDGET].

EXTRACT_IMAGES : Program to extract multiple images that are stored in
    a single volume-file. You can skip over an initial header in this
    file by specifying either its size or a string that identifies
    the end of the header. Written originally to extract MRI and PET
    images from their respective volume files. 

    [FILENAME]

FILE_FIND : More flexible file search routine. Can search for 
	directories, and can perform search recursively down directory
    trees (this feature UNIX only).

FILE_REMOVE_LINES : Procedure to remove lines from a text file which
    contain a specified string. Can also remove lines before and/or 
    after target string, as well as first or last occurance.

FILE_STRARR [**] : Function to read lines of a text file into a string
    array, with no limit to the size of the file (memory permitting).

FILENAME : Returns the base filename of a fully specified pathname.

FIND_ELEMENTS : Returns the array subscripts for elements in one array
    that are found in another array. Can also specify a third array
    which will be used to adjust those values in the first array.
    This routine is useful for finding and possibly adjusting regions-of-
    interest in images.

    This function loops over the elements it is searching for, but in some 
    situations it can be much faster than routines like WHERE_ARRAY.PRO that
    use vector operations. Recommended when the first array is very
    large and the second is relatively small. Written originally to
    allow the adjustment of regions-of-interest in discrete-valued (large)
    images. Also, this routine returns the subscripts of the values found,
    while some routines like SETINTERSECTION() return the values themselves.
    Also note that this routine preserves the order of the indices, whereas
    routines like SETINTERSECTION() return the values in sorted order.

FIND_PROCEDURE : Find an IDL procedure, or any other file for that
	matter, that is in IDL's !PATH.

GET_COORS : Allow user to use mouse to designate multiple coordinates on 
    current graphics device, using the right mouse button to quit. Coordinates 
    may be marked on the window. You can optionally have the coordinates
    displayed on other windows as well, even if they are sized differently
    or they contain multiple images on which the coordinates must be
    displayed.

GET_SAMPLE : Returns an array of indices into a 2D array of a given size, 
    for either a square or circlular region centered at a given coordinate 
    and having a specified radius.

    [CIRCLE_IND]

GET_TEXT [**] : Popup widget which allows the user to input text into
    one or more text widgets, each with its own label. You can control
    which text widgets are editable, and you can specify initial values.

    [POS_WIDGET]

GET_TOKEN [**] : Reads tokens from a string. Maintains a string pointer
    for subsequent calls. Can read byte, int, long, float, double or
    string values. Great for parsing text! (Programmers note: the
    code is extremely ugly, but it works! Needs to be optimized for
    strings, but I haven't had time.)

GRAYSCALE [**] : Popup widget which allows the user to adjust the
    color- or gray-scale using sliders. Basically an interface to
    IDL's STRETCH procedure. Also lets you set up a "split-scale"
    color-table in which half the table is a grayscale, and the other
    half is a "color-scale" (eg. a yellow-scale) of your choosing.
    This is useful when you want to display grayscale images with
    regions of interest overlaid in a different color.

    [POS_WIDGET, STRETCH2]

LEFT_JUSTIFY : "Left-justify" an array of strings, such that each string
	will be the length of the maximum length in the original string array,
    and each string begins at position 0. Useful for display of strings
    in ASK() (otherwise each string would be centered, which can be
    quite ugly).

LHELP [**] : Widget program to display help files having extension ".doc" 
	User can easily select files to view, can use text search, and can 
    view the source files as well. Available as a separate package.

    [ASK FILE_FIND FILE_STRARR FILENAME FIND_PROCEDURE]
	
LOG_MESSAGE : Log message strings or string arrays to a file, with an 
    optional time stamp.

MAKE_VOL : Function to a read series of image files and create 3D volume 
    array.  Uses Read_Img() to read image files, so restrictions apply (see
    Read_Img below). Written for use with medical images like MRI, PET, 
    SPECT or CT.

	[FILE_FIND, READ_IMG]

POS_WIDGET [**] : Positions widget, centered either onscreen or
    within parent widget, ensuring that the entire widget is onscreen. 
    Various other positioning parameters will be added as needed (available
    options are "to-the-right", "upper-left-corner-of-screen", and "cascade").
    May be called before or after a widget has been realized. Used in 
    most of these widget routines.

RDAN : Read Analyze format volume file into 3D array.

READ_IMG [**] : Read MRI/PET/SPECT/CT binary medical image files. Assumes 
    image is square with dimensions 64, 128, 256, or 512, and 8-bit or 
    16-bit.  There can be an initial header which will be returned as
	BYTARR; it's length need not be known, but it must be shorter than 
    the image data! Image data must be in binary column- or row-major format.

RESLICE : Extract image slice from 3D volume. Similar to IDL's
    EXTRACT_SLICE.PRO, but allows for anisotropic voxels by taking into
    account the inter-slice distance. Also, EXTRACT_SLICE.PRO does *not*
    handle changes-of-axes (caused by rotations near 90 degrees) correctly.

RESOLVE_MCN : Function which uses a basic most-common-neighbor algorithm to
    resolve pixels within an image or volume having a given value.
    Uses a circular neighborhood for 2D arrays, and a square neighborhood
    for 3D arrays, to compute values for the "unresolved" pixels. You can
    specify a default neighborhood size, and this size can be increased
    when no neighbors are found, up to a specified maximum size.

    [C0NV_IND, GET_SAMPLE]

SAFE_TVRD : Function to read contents of IDL window, similar to TVRD.
    IDL's TVRD function has problems if the window is obscured or
    iconified and backing store is not provided for. We have also
    noticed problems when reading from a scrollable window, even
    when backing store is provided by IDL (this was a verified bug
    under IDL 4.0.1).

    Uses DEVICE, COPY=[] function, and is a bit slower than TVRD as it 
    must create a temporary pixmap into which the window contents are read.

    Note: I do not know whether the problems with TVRD() continue
    in IDL 5.0 or not.

SETARRAY_UTILS : Set operation functions posted to newsgroup by RSI: 
    SetIntersection(), SetUnion(), and SetDifference(). These routines return 
    the elements themselves, not their indices, and ignore duplicate elements; 
    they are quite fast. Use FIND_ELEMENTS() if you need the intersection returned 
    as indices, if you need to account for duplicate elements, or if you need to
    preserve the ordering of the elements within the array.

SHOW_IMG [**] : Widget program to display series of binary image files; 
    useful for medical images like MRI, PET, SPECT, CT. Allows viewing in
    various layouts, the saving of window contents to graphics files,
    and many more features. Available as a separate package.

    See Read_Img() for description of compatible image formats.

    [ADJUST_COLORS, ADJUST_PALETTE, ASK, BEEP, BYTE_SCALE, DELETE_FILES,
     EDIT_TEXT, FILE_FIND, FILE_STRARR, FILENAME, FIND_PROCEDURE,
     GET_TEXT, GRAYSCALE, LHELP, POS_WIDGET, READ_IMG, SAFE_TVRD, STRETCH2,
     WINDOW_TO_FILE, ZOOM2]

STRETCH2 : Version of IDL's STRETCH.PRO with /NOLOAD keyword added
    so that the color-table is stretched but not loaded. Required
    for GRAYSCALE.PRO .

STRING_CLIP : Removes (and optionally replaces) occurance(s) of a substring 
    from within a string (first, last or all). 

TRIM_ARRAY : Removes elements from one array that are found in another
    array. Both arrays must have positive unique elements. Useful when
    working with image or volume regions-of-interest.

VOLUME_NONZERO_EXTENT : For a 3D volume, returns the two points at the
    opposing corners of a subarray defined by the extents of the nonzero 
    voxels in the array (the smallest subarray that contains all nonzero
    voxels). Useful for computing the extents of an object in a 3D array 
    fairly quickly.

    [CONV_IND]

WINDOW_TO_FILE : Save the contents of an IDL window to a graphics file
    in GIF, PICT, TIFF JPEG, or BMP format. Note that currently in JPEG
    format only black-and-white images are supported. Can also print the 
    window to the current default printer (this feature under Unix only). 
    Used in the Show_img program.

WINDOW_XOR_LINE : Popup widget slider which adjusts a horizontal or vertical
     XOR line within a window, and returns the position of the line.

     [POS_WIDGET]

WRAN : Write a 3D volume to a file in Analyze format.


