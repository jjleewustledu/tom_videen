head	2.11;
access;
symbols;
locks; strict;
comment	@# @;


2.11
date	2009.08.25.16.12.27;	author tom;	state Exp;
branches;
next	2.10;

2.10
date	2008.11.03.16.16.56;	author tom;	state Exp;
branches;
next	2.9;

2.9
date	2007.05.01.16.27.19;	author tom;	state Exp;
branches;
next	2.8;

2.8
date	2007.04.06.14.18.53;	author tom;	state Exp;
branches;
next	2.7;

2.7
date	2007.03.07.14.56.00;	author tom;	state Exp;
branches;
next	2.6;

2.6
date	2006.03.15.14.33.21;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	2006.03.10.16.39.45;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2005.06.29.18.57.28;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2005.04.12.15.32.20;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2005.04.06.19.15.47;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2005.03.09.17.01.35;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.03.16.33.49;	author tom;	state Exp;
branches;
next	1.74;

1.74
date	2004.02.03.16.31.10;	author tom;	state Exp;
branches;
next	1.73;

1.73
date	2004.02.03.16.29.24;	author tom;	state Exp;
branches;
next	1.72;

1.72
date	2003.07.09.20.15.41;	author tom;	state Exp;
branches;
next	1.71;

1.71
date	2003.05.08.21.47.25;	author tom;	state Exp;
branches;
next	1.70;

1.70
date	2003.05.06.20.24.04;	author tom;	state Exp;
branches;
next	1.69;

1.69
date	2003.02.17.19.46.48;	author tom;	state Exp;
branches;
next	1.68;

1.68
date	2002.09.17.15.29.28;	author tom;	state Exp;
branches;
next	1.67;

1.67
date	2002.09.17.14.43.49;	author tom;	state Exp;
branches;
next	1.66;

1.66
date	2002.09.16.18.00.05;	author tom;	state Exp;
branches;
next	1.65;

1.65
date	2002.08.26.15.10.04;	author tom;	state Exp;
branches;
next	1.64;

1.64
date	2002.08.09.20.51.05;	author tom;	state Exp;
branches;
next	1.63;

1.63
date	2002.05.21.19.01.21;	author tom;	state Exp;
branches;
next	1.62;

1.62
date	2002.05.17.18.51.41;	author tom;	state Exp;
branches;
next	1.61;

1.61
date	2002.05.16.15.44.05;	author tom;	state Exp;
branches;
next	1.60;

1.60
date	2002.05.06.16.12.20;	author tom;	state Exp;
branches;
next	1.59;

1.59
date	2002.05.06.16.08.14;	author tom;	state Exp;
branches;
next	1.58;

1.58
date	2002.05.03.19.56.07;	author tom;	state Exp;
branches;
next	1.57;

1.57
date	2002.02.26.15.54.40;	author tom;	state Exp;
branches;
next	1.56;

1.56
date	2002.02.08.16.53.25;	author tom;	state Exp;
branches;
next	1.55;

1.55
date	2002.01.31.19.18.05;	author tom;	state Exp;
branches;
next	1.54;

1.54
date	2002.01.28.19.28.07;	author tom;	state Exp;
branches;
next	1.53;

1.53
date	2001.10.10.20.41.55;	author tom;	state Exp;
branches;
next	1.52;

1.52
date	2001.09.14.16.27.45;	author tom;	state Exp;
branches;
next	1.51;

1.51
date	2001.09.10.17.37.10;	author tom;	state Exp;
branches;
next	1.50;

1.50
date	2001.08.17.16.39.08;	author tom;	state Exp;
branches;
next	1.49;

1.49
date	2001.08.02.20.06.10;	author tom;	state Exp;
branches;
next	1.48;

1.48
date	2001.07.16.15.54.46;	author tom;	state Exp;
branches;
next	1.47;

1.47
date	2001.02.09.22.03.30;	author tom;	state Exp;
branches;
next	1.46;

1.46
date	2000.09.20.16.57.43;	author tom;	state Exp;
branches;
next	1.45;

1.45
date	2000.09.07.14.20.42;	author tom;	state Exp;
branches;
next	1.44;

1.44
date	2000.08.24.18.02.03;	author tom;	state Exp;
branches;
next	1.43;

1.43
date	2000.08.14.20.40.53;	author tom;	state Exp;
branches;
next	1.42;

1.42
date	2000.08.11.18.20.22;	author tom;	state Exp;
branches;
next	1.41;

1.41
date	2000.08.11.15.17.44;	author tom;	state Exp;
branches;
next	1.40;

1.40
date	2000.07.21.14.29.02;	author tom;	state Exp;
branches;
next	1.39;

1.39
date	2000.07.19.16.52.23;	author tom;	state Exp;
branches;
next	1.38;

1.38
date	2000.06.28.16.48.05;	author tom;	state Exp;
branches;
next	1.37;

1.37
date	2000.06.28.16.21.31;	author tom;	state Exp;
branches;
next	1.36;

1.36
date	2000.06.27.19.03.44;	author tom;	state Exp;
branches;
next	1.35;

1.35
date	2000.06.27.16.05.08;	author tom;	state Exp;
branches;
next	1.34;

1.34
date	2000.06.27.15.59.17;	author tom;	state Exp;
branches;
next	1.33;

1.33
date	2000.06.20.21.41.56;	author tom;	state Exp;
branches;
next	1.32;

1.32
date	2000.05.19.15.44.10;	author tom;	state Exp;
branches;
next	1.31;

1.31
date	2000.05.17.17.51.44;	author tom;	state Exp;
branches;
next	1.30;

1.30
date	2000.04.28.20.07.05;	author tom;	state Exp;
branches;
next	1.29;

1.29
date	2000.04.21.20.32.05;	author tom;	state Exp;
branches;
next	1.28;

1.28
date	2000.04.19.15.03.32;	author tom;	state Exp;
branches;
next	1.27;

1.27
date	2000.04.18.21.45.03;	author tom;	state Exp;
branches;
next	1.26;

1.26
date	2000.04.18.20.51.03;	author tom;	state Exp;
branches;
next	1.25;

1.25
date	2000.02.11.17.41.59;	author tom;	state Exp;
branches;
next	1.24;

1.24
date	99.10.26.14.22.58;	author tom;	state Exp;
branches;
next	1.23;

1.23
date	99.10.26.14.12.08;	author tom;	state Exp;
branches;
next	1.22;

1.22
date	99.09.16.15.29.40;	author tom;	state Exp;
branches;
next	1.21;

1.21
date	99.09.01.17.45.54;	author tom;	state Exp;
branches;
next	1.20;

1.20
date	99.08.30.18.51.58;	author tom;	state Exp;
branches;
next	1.19;

1.19
date	99.08.30.16.08.44;	author tom;	state Exp;
branches;
next	1.18;

1.18
date	99.08.27.18.36.55;	author tom;	state Exp;
branches;
next	1.17;

1.17
date	99.08.04.19.42.07;	author tom;	state Exp;
branches;
next	1.16;

1.16
date	99.08.04.16.19.38;	author tom;	state Exp;
branches;
next	1.15;

1.15
date	99.04.13.18.49.27;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	99.04.12.13.43.41;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	99.03.24.14.52.20;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	99.03.17.15.44.05;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	99.03.09.15.46.40;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	99.02.12.17.17.38;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	99.02.12.17.13.27;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	99.02.05.21.25.35;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	99.02.05.17.17.30;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	99.02.04.18.32.04;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	98.06.02.20.50.08;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	98.05.22.17.35.31;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	98.05.13.15.48.16;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.04.29.17.19.28;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.01.30.20.33.12;	author tom;	state Exp;
branches;
next	;


desc
@@


2.11
log
@*** empty log message ***
@
text
@PRO VIDIDISP1_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON VIDI
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 0
   xfact = 1.
   yfact = 1.
   zoom = dsp[i].zoom
   CASE orient OF
      0: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[1]
         ydim = uv.img[i].dim[1]
      ENDCASE
      1: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
      2: BEGIN
         xsiz = uv.img[i].pdim[1]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
   ENDCASE
   IF (ysiz GT xsiz) THEN yfact = ysiz/xsiz $
   ELSE IF (xsiz GT ysiz) THEN xfact = xsiz/ysiz
   xc = ev.x / (zoom * xfact) + 1
   yc = ydim - ((ev.y + 1) / (zoom * yfact) - 1)
   IF (atlas[0] EQ 0) THEN BEGIN
      CASE orient OF
         0: BEGIN
            x = xc
            y = yc
            z = uv.img[i].p
         ENDCASE
         1: BEGIN
            x = xc
            y = uv.img[i].p
            z = yc
         ENDCASE
         2: BEGIN
            x = uv.img[i].p
            y = xc
            z = yc
         ENDCASE
      ENDCASE
   ENDIF ELSE BEGIN
      porg = uv.img[i].org
      CASE orient OF
         0: BEGIN
            x = xc - porg[0]
            y = porg[1] - yc
            z = porg[2] - uv.img[i].p
         ENDCASE
         1: BEGIN
            x = xc - porg[0]
            y = porg[1] - uv.img[i].p
            z = porg[2] - yc
         ENDCASE
         2: BEGIN
            x = uv.img[i].p - porg[0]
            y = porg[1] - xc
            z = porg[2] - yc
         ENDCASE
      ENDCASE
      x = 2 * x
      y = 2 * y
      z = 2 * z
   ENDELSE
   str = string(x, y, z, format='("X =",I6,"  Y =",I6,"  Z =",I6)')
   widget_control, uv.wid.msg, set_value=str
END   

PRO VIDIDISP2_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON VIDI
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 1
   xfact = 1.
   yfact = 1.
   zoom = dsp[i].zoom
   CASE orient OF
      0: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[1]
         ydim = uv.img[i].dim[1]
      ENDCASE
      1: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
      2: BEGIN
         xsiz = uv.img[i].pdim[1]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
   ENDCASE
   IF (ysiz GT xsiz) THEN yfact = ysiz/xsiz $
   ELSE IF (xsiz GT ysiz) THEN xfact = xsiz/ysiz
   xc = ev.x / (zoom * xfact) + 1
   yc = ydim - ((ev.y + 1) / (zoom * yfact) - 1)
   IF (atlas[1] EQ 0) THEN BEGIN
      CASE orient OF
         0: BEGIN
            x = xc
            y = yc
            z = uv.img[i].p
         ENDCASE
         1: BEGIN
            x = xc
            y = uv.img[i].p
            z = yc
         ENDCASE
         2: BEGIN
            x = uv.img[i].p
            y = xc
            z = yc
         ENDCASE
      ENDCASE
   ENDIF ELSE BEGIN
      porg = uv.img[i].org
      CASE orient OF
         0: BEGIN
            x = xc - porg[0]
            y = porg[1] - yc
            z = porg[2] - uv.img[i].p
         ENDCASE
         1: BEGIN
            x = xc - porg[0]
            y = porg[1] - uv.img[i].p
            z = porg[2] - yc
         ENDCASE
         2: BEGIN
            x = uv.img[i].p - porg[0]
            y = porg[1] - xc
            z = porg[2] - yc
         ENDCASE
      ENDCASE
      x = 2 * x
      y = 2 * y
      z = 2 * z
   ENDELSE
   str = string(x, y, z, format='("X =",I6,"  Y =",I6,"  Z =",I6)')
   widget_control, uv.wid.msg, set_value=str
END   

PRO VIDIDISP3_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON VIDI
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 0
   xfact = 1.
   yfact = 1.
   zoom = dsp[i].zoom
   CASE orient OF
      0: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[1]
         ydim = uv.img[i].dim[1]
      ENDCASE
      1: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
      2: BEGIN
         xsiz = uv.img[i].pdim[1]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
   ENDCASE
   IF (ysiz GT xsiz) THEN yfact = ysiz/xsiz $
   ELSE IF (xsiz GT ysiz) THEN xfact = xsiz/ysiz
   xc = ev.x / (zoom * xfact) + 1
   yc = ydim - ((ev.y + 1) / (zoom * yfact) - 1)
   CASE orient OF
      0: BEGIN
         x = xc
         y = yc
         z = uv.img[i].p
      ENDCASE
      1: BEGIN
         x = xc
         y = uv.img[i].p
         z = yc
      ENDCASE
      2: BEGIN
         x = uv.img[i].p
         y = xc
         z = yc
      ENDCASE
   ENDCASE
   str = string(x, y, z, format='("X =",I6,"  Y =",I6,"  Z =",I6)')
   widget_control, uv.wid.msg, set_value=str
END   

PRO VIDI_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON VIDI
   
   catch, error_status
   device, decompose = 0
   IF (error_status NE 0) THEN BEGIN
      ok = widget_message(!err_string)
      RETURN
   END
   setuv = 0
   newrange = 0
   redisplay = 0
   xloc2 = 100
   yloc2 = 70
   widget_control, ev.top, get_uvalue=uv
   widget_control, uv.wid.msg, set_value=''
   
   nimg = 1                     ; max index for images
   nwin = 2                     ; max index for display windows
   CASE ev.id OF
      
      uv.wid.file: BEGIN
         
         IF (ev.value LT 7) THEN BEGIN
            i = 0
            rtype = ev.value-1
         ENDIF ELSE BEGIN
            i = 1
            rtype = ev.value-7
         ENDELSE
         
         CASE rtype OF

            1: BEGIN            ; First Frame, All Planes
               uv.img[i].ff = 1
               uv.img[i].lf = 1
               uv.img[i].fp = 1
               uv.img[i].lp = 1000
               fmode = 0
            ENDCASE
            
            2: BEGIN            ; One Frame, All Planes
               temp = ev.top
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='Frame: ', value=uv.img[i].ff, $
                               xsize=4, /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize, xoffset=xloc2, yoffset=yloc2
               ev = WIDGET_EVENT(planeselect)
               widget_control, planeselect, /DESTROY
               uv.img[i].ff = ev.value
               uv.img[i].lf = ev.value
               uv.img[i].fp = 1
               uv.img[i].lp = 1000
               fmode = 0
               ev.top = temp
            ENDCASE
            
            3: BEGIN            ; One Frame, Select Planes
               temp = ev.top
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='Frame: ', value=uv.img[i].ff, $
                               xsize=4, /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize, xoffset=xloc2, yoffset=yloc2
               ev = WIDGET_EVENT(planeselect)
               widget_control, planeselect, /DESTROY
               uv.img[i].ff = ev.value
               uv.img[i].lf = ev.value
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='First Plane: ', value=uv.img[i].ff, $
                               xsize=4, /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize, xoffset=xloc2, yoffset=yloc2
               ev = WIDGET_EVENT(planeselect)
               widget_control, planeselect, /DESTROY
               uv.img[i].fp = ev.value
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='Last Plane: ', value=uv.img[i].ff, $
                               xsize=4, /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize, xoffset=xloc2, yoffset=yloc2
               ev = WIDGET_EVENT(planeselect)
               widget_control, planeselect, /DESTROY
               uv.img[i].lp = ev.value
               fmode = 0
               ev.top = temp
            ENDCASE
            
            4: BEGIN            ; All Frames, One Plane
               temp = ev.top
               uv.img[i].ff = 1
               uv.img[i].lf = 256
               if (uv.img[i].fp LE 0) then uv.img[i].fp = 1
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='Plane: ', value=uv.img[i].fp, xsize=4, $
                               /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize, xoffset=xloc2, yoffset=yloc2
               ev = WIDGET_EVENT(planeselect)
               widget_control, planeselect, /DESTROY
               uv.img[i].fp = ev.value
               uv.img[i].lp = ev.value
               fmode = 1
               ev.top = temp
               orient = 0       ; transverse orientation only for multiple frames
            ENDCASE
            
            5: BEGIN            ; All Frames, All Planes
               temp = ev.top
               uv.img[i].ff = 1
               uv.img[i].lf = 256
               uv.img[i].fp = 1
               uv.img[i].lp = 1000
               fmode = 2
               ev.top = temp
               orient = 0       ; transverse orientation only for multiple frames
            ENDCASE
            
         ENDCASE
         
         fname = ''
         IF (default_path EQ 0) THEN BEGIN
            IF (strlen(uv.img[i].fname) GT 0) THEN fname = uv.img[i].fname $
            ELSE IF (strlen(uv.img[0].fname) GT 0) THEN fname = uv.img[0].fname $
            ELSE IF (strlen(uv.img[1].fname) GT 0) THEN fname = uv.img[1].fname
         ENDIF ELSE IF (default_path EQ 1) THEN BEGIN
            IF (strlen(uv.img[0].fname) GT 0) THEN fname = uv.img[0].fname 
         ENDIF ELSE IF (default_path EQ 2) THEN BEGIN
            IF (strlen(uv.img[1].fname) GT 0) THEN fname = uv.img[1].fname
         ENDIF ELSE BEGIN
            fname = local_path+'*'
         ENDELSE

         IF (strlen(fname) GT 0) THEN BEGIN 
            l1 = rstrpos(fname,'/')
            l2 = rstrpos(fname,'.')
            IF (l2 GT 0) THEN BEGIN
               str1 = string(replicate(32b,(l2-l1-2)))
               str1 = '*'+str1
               strput,fname,str1,l1+1
               fname = strcompress(fname, /remove_all)
            ENDIF ELSE fname = '*'
         ENDIF ELSE fname = '*'
         
         fname = dialog_pickfile(FILE=uv.img[i].fname, FILTER=fname, /READ)
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN 
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (getframe(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
               uv.img[i].fname = ''
               RETURN
            ENDIF
            tmp = uv.img[i].p
            uv.img[i] = image
            IF (orient EQ 0) THEN BEGIN ; keep same plane if in range
               tmp = tmp > uv.img[i].fp
               uv.img[i].p = tmp < uv.img[i].lp
            ENDIF ELSE uv.img[i].p = tmp
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            uv.img[i].proc = 0
            setuv = 1
            newrange = 1
            IF (dsp[i].set) THEN redisplay = 1
         ENDELSE 

      ENDCASE 

      ;; -------------------------------------------------------------------------------
      uv.wid.fname[0]: BEGIN	; same as last
         i = 0
         fname = ev.value
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN 
            uv.img[i].fp = 1
            uv.img[i].lp = 1000
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (getframe(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
               uv.img[i].fname = ''
               RETURN
            ENDIF
            tmp = uv.img[i].p
            uv.img[i] = image
            IF (orient EQ 0) THEN BEGIN ; keep same plane if in range
               uv.img[i].p = tmp > uv.img[i].fp
               uv.img[i].p = tmp < uv.img[i].lp
            ENDIF ELSE uv.img[i].p = tmp
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            uv.img[i].proc = 0
            setuv = 1
            newrange = 1
            IF (dsp[i].set) THEN redisplay = 1
         ENDELSE 
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      
      uv.wid.fname[1]: BEGIN	; same as last
         i = 1
         fname = ev.value
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN 
            uv.img[i].fp = 1
            uv.img[i].lp = 1000
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (getframe(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
               uv.img[i].fname = ''
               RETURN
            ENDIF
            tmp = uv.img[i].p
            uv.img[i] = image
            IF (orient EQ 0) THEN BEGIN ; keep same plane if in range
               uv.img[i].p = tmp > uv.img[i].fp
               uv.img[i].p = tmp < uv.img[i].lp
            ENDIF ELSE uv.img[i].p = tmp
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            uv.img[i].proc = 0
            setuv = 1
            newrange = 1
            IF (dsp[i].set) THEN redisplay = 1
         ENDELSE 
      ENDCASE 

      ;; -------------------------------------------------------------------------------
      uv.wid.viewer: VIDI_VIEWER, uv

      ;; -------------------------------------------------------------------------------
      uv.wid.orient: BEGIN
         CASE ev.value OF
            'Transverse': BEGIN
               orient = 0
               lp = uv.img[0].lp
            ENDCASE
            'Coronal': BEGIN 
               IF (uv.img[0].dim[2] GT 1) THEN BEGIN
               orient = 1
               lp = uv.img[0].dim[1]
            ENDIF ELSE BEGIN
               msg = 'Transverse orientation only for multiple planes'
               widget_control, uv.wid.msg, set_value=msg
            ENDELSE
         ENDCASE 
         'Sagittal': BEGIN
            IF (uv.img[0].dim[2] GT 1) THEN BEGIN
               orient = 2
               lp = uv.img[0].dim[0]
            ENDIF ELSE BEGIN
               msg = 'Transverse orientation only for multiple planes'
               widget_control, uv.wid.msg, set_value=msg
            ENDELSE
         ENDCASE 
      ENDCASE
      setuv = 1
      newrange = 1
      redisplay = 1
      slice = (fp + lp)/2
      uv.img[0].p = slice
      uv.img[1].p = slice
      widget_control, uv.wid.slider, set_slider_max=lp
      widget_control, uv.wid.slider, set_value=slice
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.zoom: BEGIN
      FOR i=0,nwin DO dsp[i].zoom = ev.value
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.color: BEGIN
      CASE ev.value OF
         1: IF (dsp[0].nc EQ 0) THEN widget_control, uv.wid.msg, set_value='NO IMAGE displayed' $
         ELSE xloadct, group=uv.wid.base, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
            file="/usr/local/npg/idl/color_tables/videen.tbl"

         2: IF (dsp[1].nc EQ 0) THEN widget_control, uv.wid.msg, set_value='NO IMAGE displayed' $
         ELSE xloadct, group=uv.wid.base, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
            file="/usr/local/npg/idl/color_tables/videen.tbl"
      ENDCASE
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.roi: BEGIN
      otemp = orient
      inum = ev.value-1
      IF (orient GT 0) THEN BEGIN
         msg = 'VOIs require TRANSVERSE slices'
         widget_control, uv.wid.msg, set_value=msg
      ENDIF ELSE BEGIN
         IF (uv.wid.win[inum] GT 0) THEN BEGIN  
            VIDI_DEFVOI, uv, inum, otemp, dsp[inum].zoom
            setuv = 1
         ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for VOI'
      ENDELSE 

;         ENDIF ELSE CASE ev.value OF
;            1: BEGIN
;               IF (uv.wid.win[0] GT 0) THEN BEGIN  
;                  tempthresh = uv.wid.vthresh
;                  VIDI_DEFVOI, uv.wid.voi, uv.img[0], uv.cbf[0], uv.cbv[0], otemp, tempthresh, $
;                     uv.wid.win[0], uv.wid.base, zoom=dsp[0].zoom
;                  uv.wid.vthresh = tempthresh
;                  setuv = 1
;               ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for VOI'
;            ENDCASE
;            2: BEGIN
;               IF (uv.wid.win[1] GT 0) THEN BEGIN  
;                  tempthresh = uv.wid.vthresh
;                  VIDI_DEFVOI, uv.wid.voi, uv.img[1], uv.cbf[1], uv.cbv[1], otemp, tempthresh, $
;                     uv.wid.win[1], uv.wid.base, zoom=dsp[1].zoom
;                  uv.wid.vthresh = tempthresh
;                  setuv = 1
;               ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for VOI'
;            ENDCASE 
;         ENDCASE
   ENDCASE
   
   ;; -------------------------------------------------------------------------------
   uv.wid.scale: BEGIN
      VIDI_SCALE, uv.wid.base
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.max[0]: BEGIN
      dsp[0].max = ev.value
      IF (dsp[0].range EQ 2) THEN dsp[0].min = -dsp[0].max
      dsp[0].type = 1
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.max[1]: BEGIN
      dsp[1].max = ev.value
      IF (dsp[1].range EQ 2) THEN dsp[1].min = -dsp[1].max
      dsp[1].type = 1
      redisplay = 1
   ENDCASE 

   ;; -------------------------------------------------------------------------------
   uv.wid.auto[0]: BEGIN
      dsp[0].type = 0
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.auto[1]: BEGIN
      dsp[1].type = 0
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.process: BEGIN
      IF (ev.value LT 9) THEN BEGIN
         i = 0
         rtype = ev.value-2
      ENDIF ELSE BEGIN
         i = 1
         rtype = ev.value-10
      ENDELSE
      image = uv.img[i]
      oldtype = image.proc
      image.proc = rtype
      IF ((oldtype EQ 3 AND image.proc EQ 4) OR (oldtype EQ 4 AND image.proc EQ 3)) THEN BEGIN
         widget_control, uv.wid.msg, set_value='Using existing metabolic factors'
         uv.img[i].proc = rtype
      ENDIF ELSE BEGIN 
         IF (gethdr(image, msg) NE 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value=msg
            uv.img[i].proc = 0
         ENDIF ELSE BEGIN 
            widget_control, uv.wid.msg, set_value='Metabolic factors read'
            uv.img[i] = image
         ENDELSE 
         
         IF (rtype EQ 3 OR rtype EQ 4 OR rtype EQ 6) THEN BEGIN ; Oxygen and MTT models require CBF image
            uv.cbf[i].ff = 1
            uv.cbf[i].lf = 1
            uv.cbf[i].fp = 1
            uv.cbf[i].lp = 1000
            uv.cbf[i].proc = 1
            fmode = 0
            fname = ''
            fname = uv.img[i].fname
            IF (strlen(fname) GT 0) THEN BEGIN 
               l1 =  rstrpos(fname,'/')
               IF (l1 GT 0) THEN strput,fname,'*',l1+1
               IF (rtype EQ 3 OR rtype EQ 4) THEN BEGIN
                  l1 = rstrpos(fname,'oo')
                  IF (l1 GT 0) THEN strput,fname,'ho',l1
               ENDIF ELSE BEGIN
                  l1 = rstrpos(fname,'oc')
                  IF (l1 GT 0) THEN strput,fname,'ho',l1
               ENDELSE
            ENDIF ELSE fname = '*ho*v'
            fname = dialog_pickfile(FILE=uv.cbf[i].fname, FILTER=fname, /READ, $
                                    TITLE='Select HO (CBF) Image')
            IF (strlen(fname) EQ 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value='NO FILE entered'
               uv.img[i].proc = 0
               rtype = 0
            ENDIF ELSE BEGIN 
               image = uv.cbf[i]
               image.fname = fname
               image.fname = fname
               msg = ''
               IF (getframe(image, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  uv.cbf[i].fname = ''
                  RETURN
               ENDIF
               uv.cbf[i] = image
               widget_control, uv.wid.msg, set_value='File '+uv.cbf[i].fname+' found'
               image = uv.cbf[i]
               IF (gethdr(image, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  uv.img[i].proc = 0
                  rtype = 0
               ENDIF ELSE  widget_control, uv.wid.msg, set_value='Metabolic factors read'
               uv.cbf[i] = image
            ENDELSE 
         ENDIF  
         
         IF (rtype EQ 3 OR rtype EQ 4) THEN BEGIN ; Oxygen models require CBV image
            uv.cbv[i].ff = 1
            uv.cbv[i].lf = 1
            uv.cbv[i].fp = 1
            uv.cbv[i].lp = 1000
            uv.cbv[i].proc = 2
            fmode = 0
            fname = ''
            fname = uv.cbf[i].fname
            IF (strlen(fname) GT 0) THEN BEGIN 
               l1 =  rstrpos(fname,'/')
               IF (l1 GT 0) THEN strput,fname,'*',l1+1
               l1 = rstrpos(fname,'ho')
               IF (l1 GT 0) THEN strput,fname,'oc',l1
            ENDIF ELSE fname = '*oc*v'
            fname = dialog_pickfile(FILE=uv.cbv[i].fname, FILTER=fname, /READ, $
                                    TITLE='Select CO (CBV) Image')
            IF (strlen(fname) EQ 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value='NO FILE entered'
               uv.img[i].proc = 0
               rtype = 0
            ENDIF ELSE BEGIN 
               image = uv.cbv[i]
               image.fname = fname
               image.fname = fname
               msg = ''
               IF (getframe(image, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  uv.cbv[i].fname = ''
                  RETURN
               ENDIF
               uv.cbv[i] = image
               widget_control, uv.wid.msg, set_value='File '+uv.cbv[i].fname+' found'
               image = uv.cbv[i]
               IF (gethdr(image, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  uv.img[i].proc = 0
                  rtype = 0
               ENDIF ELSE  widget_control, uv.wid.msg, set_value='Metabolic factors read'
               uv.cbv[i] = image
            ENDELSE 
         ENDIF  
      ENDELSE 

      setuv = 1
      IF (dsp[i].set) THEN redisplay = 1
   ENDCASE
   
   ;; -------------------------------------------------------------------------------
   uv.wid.edit: BEGIN
      i = ev.value-1
      IF (uv.wid.win[i] GT 0) THEN BEGIN  
         VIDI_EDIT, uv, i, dsp[i].zoom
         setuv = 1
      ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for Edit'
   ENDCASE
   
   ;; -------------------------------------------------------------------------------
   uv.wid.mask: BEGIN
      otemp = orient
      inum = ev.value-1
      IF (orient GT 0) THEN BEGIN
         msg = 'Masks are created using TRANSVERSE slices'
         widget_control, uv.wid.msg, set_value=msg
      ENDIF ELSE BEGIN
         i = ev.value-1
         IF (uv.wid.win[i] GT 0) THEN BEGIN  
            VIDI_MASK, uv, i
            setuv = 1
            newrange = 1
            redisplay = 1
         ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for Edit'
      ENDELSE 
   ENDCASE
   
   ;; -------------------------------------------------------------------------------
   uv.wid.segment: BEGIN
      inum = ev.value-1
      IF (uv.wid.win[inum] GT 0) THEN VIDI_SEGMENT, uv, inum $
      ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for Segmentation'
      setuv = 1
      newrange = 1
      redisplay = 1
   ENDCASE
   
   ;; -------------------------------------------------------------------------------
   uv.wid.save: BEGIN
      i = ev.value-1
      IF (uv.wid.win[i] GT 0) THEN BEGIN  
         temp = ev.top
         fname = uv.img[i].fname
         savefile = widget_base(group_leader=uv.wid.base)
         text = cw_field(savefile, title='Filename: ', value=fname, $
                         xsize=80, /STRING, /RETURN_EVENTS)
         widget_control, savefile, xoffset=0, yoffset=0, /realize
         ev = WIDGET_EVENT(savefile)
         widget_control, savefile, /DESTROY
         fname = ev.value
         ev.top = temp
         IF (strtrim(fname EQ '')) THEN BEGIN
            msg = 'NO FILENAME entered'
            result=dialog_message(msg, title='Image was NOT SAVED!', /error)
         ENDIF ELSE BEGIN 
            msg = ' '
            stat = putinterfile(uv.img[i], fname, msg)
            uv.img[i].fname = fname
            widget_control, uv.wid.msg, set_value=msg
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            setuv = 1
         ENDELSE
      ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE to save'
   ENDCASE

   ;; -------------------------------------------------------------------------------
   uv.wid.tiff: BEGIN
      i = ev.value-1
      IF (uv.wid.win[i] GT 0) THEN BEGIN  
         temp = ev.top
         fname = ''
         savefile = widget_base(group_leader=uv.wid.base)
         text = cw_field(savefile, title='TIF Filename: ', value=fname, $
                         xsize=80, /STRING, /RETURN_EVENTS)
         widget_control, savefile, xoffset=50, yoffset=0, /realize
         ev = WIDGET_EVENT(savefile)
         widget_control, savefile, /DESTROY
         fname = ev.value
         ev.top = temp
         widget_control, /hourglass
         IF (strtrim(fname EQ '')) THEN BEGIN
            msg = 'NO FILENAME entered'
            result=dialog_message(msg, title='Image was NOT SAVED!', /error)
         ENDIF ELSE BEGIN 
            k = rstrpos(fname,'.')
            IF (k GT 0) THEN fname = strmid(fname,0,k)
            fname = fname + '.tif'
            wset, dsp[i].id
            arr = tvrd()
            device, get_visual_depth=depth
            IF (depth EQ 24) THEN BEGIN
               xarr = (size(arr))[1]
               yarr = (size(arr))[2]
               rgb = lonarr(3,xarr,yarr)
               rgb[0,*,*] = tvrd(0,0,xarr,yarr,1)
               rgb[1,*,*] = tvrd(0,0,xarr,yarr,2)
               rgb[2,*,*] = tvrd(0,0,xarr,yarr,3)
               write_tiff,fname,rgb,compression=1
            ENDIF ELSE BEGIN
               tvlct,r,g,b,/get
               write_tiff,fname,arr,compression=1,red=r,green=g,blue=b
            ENDELSE
            widget_control, uv.wid.msg, set_value='Window saved in TIFF format:  '+fname
         ENDELSE
      ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE to save'
   ENDCASE

   ;; -------------------------------------------------------------------------------
   uv.wid.peaks: BEGIN
      IF (orient GT 0) THEN BEGIN
         msg = 'Peaks displayed on TRANSVERSE slices'
         widget_control, uv.wid.msg, set_value=msg
      ENDIF ELSE BEGIN
         otemp = orient
         VIDI_PEAKS, uv, otemp, dsp[0].zoom
         setuv = 1
      ENDELSE
   ENDCASE 

   ;; -------------------------------------------------------------------------------
   uv.wid.points: BEGIN
      inum = ev.value-1
      IF (uv.wid.win[inum] GT 0) THEN BEGIN  
         VIDI_POINTS, uv, inum, dsp[inum].zoom
         setuv = 1
      ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for Points'
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.exit: BEGIN
      FOR i=0, nimg DO if (uv.img[i].data NE ptr_new()) THEN ptr_free, uv.img[i].data
      IF ((loglun NE 0) AND (size(loglun))[1] NE 0) THEN BEGIN
         status = FSTAT(loglun)
         IF (status.open GT 0) THEN close, loglun
         IF (status.size EQ 0) THEN BEGIN
            command = 'rm ' + status.name
            spawn, command
         ENDIF ELSE print,'Statistics saved in ',status.name
      ENDIF
      widget_control, ev.top, /destroy
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.up: BEGIN
      CASE fmode OF
         0: BEGIN
            FOR i=0, nimg DO IF (uv.img[i].p GT uv.img[i].fp) THEN uv.img[i].p = uv.img[i].p-1
            widget_control, uv.wid.slider, set_value=uv.img[0].p
         ENDCASE
         1: BEGIN
            FOR i=0, nimg DO IF (uv.img[i].f GT uv.img[i].ff) THEN uv.img[i].f = uv.img[i].f-1
            widget_control, uv.wid.slider, set_value=uv.img[0].f
         ENDCASE
         2: BEGIN
            FOR i=0, nimg DO BEGIN
               IF (uv.img[i].p GT uv.img[i].fp) THEN BEGIN
                  uv.img[i].p = uv.img[i].p - 1 
               ENDIF ELSE IF (uv.img[i].f  GT uv.img[i].ff) THEN BEGIN
                  uv.img[i].f = uv.img[i].f - 1 
                  uv.img[i].p = uv.img[i].lp
               ENDIF
            ENDFOR
            planes = uv.img[0].lp-uv.img[0].fp+1
            slice = (uv.img[0].f-uv.img[0].ff)*planes + uv.img[0].p-uv.img[0].fp + 1
            widget_control, uv.wid.slider, set_value=slice
         ENDCASE
      ENDCASE
      setuv = 1
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.mid: BEGIN
      FOR i=0, nimg DO uv.img[i].p = (lp + fp)/2 > 1
      widget_control, uv.wid.slider, set_value=uv.img[0].p
      setuv = 1
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.down: BEGIN
      p = uv.img[0].p
      CASE fmode OF
         0: BEGIN
            FOR i=0, nimg DO IF (uv.img[i].p LT lp) THEN uv.img[i].p = uv.img[i].p+1
            widget_control, uv.wid.slider, set_value=uv.img[0].p
         ENDCASE
         1: BEGIN
            FOR i=0, nimg DO IF (uv.img[i].f LT uv.img[i].lf) THEN uv.img[i].f = uv.img[i].f+1
            widget_control, uv.wid.slider, set_value=uv.img[0].f
         ENDCASE
         2: BEGIN
            FOR i=0, nimg DO BEGIN
               IF (uv.img[i].p LT uv.img[i].lp) THEN BEGIN
                  uv.img[i].p = uv.img[i].p + 1 
               ENDIF ELSE IF (uv.img[i].f  LT uv.img[i].lf) THEN BEGIN
                  uv.img[i].f = uv.img[i].f + 1 
                  uv.img[i].p = uv.img[i].fp
               ENDIF
            ENDFOR
            planes = uv.img[0].lp-uv.img[0].fp+1
            slice = (uv.img[0].f-uv.img[0].ff)*planes + uv.img[0].p-uv.img[0].fp + 1
            widget_control, uv.wid.slider, set_value=slice
         ENDCASE
      ENDCASE
      setuv = 1
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.slider: BEGIN
      widget_control, uv.wid.slider, get_value=slice
      CASE fmode OF
         0: FOR i=0, nimg DO IF (slice LE lp) THEN uv.img[i].p = slice
         1: FOR i=0, nimg DO IF (slice LE uv.img[i].lf) THEN uv.img[i].f = slice
         2: BEGIN 
            planes = uv.img[0].lp-uv.img[0].fp+1
            frames = uv.img[0].lf-uv.img[0].ff+1
            FOR i=0, nimg DO BEGIN
               loc = slice-1
               f = loc/planes
               p = loc - f*planes
               uv.img[i].f = uv.img[i].ff + f
               uv.img[i].p = uv.img[i].fp + p
            ENDFOR 
         ENDCASE 
      ENDCASE
      setuv = 1
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.display: BEGIN
      CASE ev.value OF
         0: IF (dsp[0].set EQ 0) THEN dsp[0].set = 1 $
         ELSE dsp[0].set = 0
         1: IF (dsp[1].set EQ 0) THEN dsp[1].set = 1 $
         ELSE dsp[1].set = 0
         2: IF (dsp[2].set EQ 0) THEN dsp[2].set = 1 $
         ELSE dsp[2].set = 0
      END
      setuv = 1
      newrange = 1
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.defpath: BEGIN
      CASE ev.value OF
         0: default_path = 0
         1: default_path = 1
         2: default_path = 2
         3: default_path = 3
      END
   ENDCASE 

   ;; -------------------------------------------------------------------------------
   uv.wid.atlas: begin
      CASE ev.value OF
         0: IF (atlas[0] EQ 0) THEN atlas[0] = 1 $
         ELSE atlas[0] = 0
         1: IF (atlas[1] EQ 0) THEN atlas[1] = 1 $
         ELSE atlas[1] = 0
         2: IF (atlas[2] EQ 0) THEN atlas[2] = 1 $
         ELSE atlas[2] = 0
         3: IF (atlas[3] EQ 0) THEN atlas[3] = 1 $
         ELSE atlas[3] = 0
         4: IF (atlas[4] EQ 0) THEN atlas[4] = 1 $
         ELSE atlas[4] = 0
      END
      redisplay = 1
   ENDCASE 
   
   ;; -------------------------------------------------------------------------------
   uv.wid.atltype: BEGIN
      CASE ev.value OF
         0: atlas_type = 0
         1: atlas_type = 1
      END
   ENDCASE 

   ;; -------------------------------------------------------------------------------
   uv.wid.lut1: BEGIN
      CASE ev.value OF
         1: BEGIN
            loadct, 36, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl" 
            dsp[0].range = 0
            dsp[0].min = 0
         ENDCASE
         2: BEGIN
            loadct, 0, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[0].range = 0
            dsp[0].min = 0
         ENDCASE
         3: BEGIN
            loadct, 3, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[0].range = 0
            dsp[0].min = 0
         ENDCASE
         4: BEGIN
            loadct, 38, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[0].range = 2
            dsp[0].min = -dsp[0].max
         ENDCASE
         5: BEGIN
            loadct, 10, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[0].range = 0
            dsp[0].min = 0
         ENDCASE
         6: BEGIN
            loadct, 39, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[0].range = 0
            dsp[0].min = 0
         ENDCASE
      ENDCASE
      redisplay = 1
   ENDCASE
   ;; -------------------------------------------------------------------------------

   uv.wid.lut2: BEGIN
      CASE ev.value OF
         1: BEGIN
            loadct, 36, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[1].range = 0
            dsp[1].min = 0
         ENDCASE
         2: BEGIN
            loadct, 0, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[1].range = 0
            dsp[1].min = 0
         ENDCASE
         3: BEGIN
            loadct, 3, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[1].range = 0
            dsp[1].min = 0
         ENDCASE
         4: BEGIN
            loadct, 38, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[1].range = 2
            dsp[1].min = -dsp[1].max
         ENDCASE
         5: BEGIN
            loadct, 10, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[1].range = 0
            dsp[1].min = 0
         ENDCASE
         6: BEGIN
            loadct, 40, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            dsp[1].range = 0
            dsp[1].min = 0
      		dsp[1].max = 240
      		dsp[1].type = 1
         ENDCASE
      ENDCASE
      redisplay = 1
   ENDCASE

   ;; -------------------------------------------------------------------------------

   uv.wid.atlasfile: BEGIN
      i = 0
      uv.img[i].ff = 1
      uv.img[i].lf = 1
      uv.img[i].fp = 1
      uv.img[i].lp = 1000
      image = uv.img[i]
      CASE ev.value OF
         1 : image.fname = "/usr/local/npg/lib/t88/meanpet.t88"
         2 : image.fname = "/usr/local/npg/lib/t88/meanmr.t88"
      ENDCASE
      msg = ''
      IF (getframe(image, msg) NE 0) THEN BEGIN
         widget_control, uv.wid.msg, set_value=msg
         uv.img[i].fname = ''
         RETURN
      ENDIF
      tmp = uv.img[i].p
      uv.img[i] = image
      IF (orient EQ 0) THEN BEGIN ; keep same plane if in range
         uv.img[i].p = tmp > uv.img[i].fp
         uv.img[i].p = tmp < uv.img[i].lp
      ENDIF ELSE uv.img[i].p = tmp
      widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
      widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
      uv.img[i].proc = 0
      setuv = 1
      newrange = 1
      IF (dsp[i].set) THEN redisplay = 1
   ENDCASE
   ;; -------------------------------------------------------------------------------
   
   ELSE:
   
ENDCASE
   
   ;;-----------------------------------------------------------------------------------
   
   IF (newrange) THEN BEGIN
      
      IF ((dsp[0].set) AND (strlen(uv.img[0].fname) GT 0) AND $
          (dsp[1].set) AND (strlen(uv.img[1].fname) GT 0)) THEN set = 3 $
      ELSE IF ((dsp[1].set) AND (strlen(uv.img[1].fname) GT 0)) THEN set = 2 $
      ELSE IF ((dsp[0].set) AND (strlen(uv.img[0].fname) GT 0)) THEN set = 1 $
      ELSE set = 0

      CASE set OF
         1: BEGIN
            ff = uv.img[0].ff
            lf = uv.img[0].lf
            i = 0
         ENDCASE
         2: BEGIN
            ff = uv.img[1].ff
            lf = uv.img[1].lf
            i = 1
         ENDCASE
         3: BEGIN
            ff = uv.img[0].ff
            lf = uv.img[0].lf
            i = 0
         ENDCASE
         ELSE:
      ENDCASE

      CASE orient OF
         0: BEGIN
            IF (set EQ 3) THEN BEGIN
               fp = uv.img[0].fp > uv.img[1].fp
               lp = uv.img[0].lp <  uv.img[1].lp
            ENDIF ELSE IF (set EQ 2) THEN BEGIN
               fp = uv.img[1].fp
               lp = uv.img[1].lp
            ENDIF ELSE IF (set EQ 1) THEN BEGIN
               fp = uv.img[0].fp
               lp = uv.img[0].lp
            ENDIF
         ENDCASE
         1: BEGIN               ; coronal
            fp = 1
            IF (set EQ 3) THEN lp = uv.img[0].dim[1] <  uv.img[1].dim[1] $
            ELSE IF (set GT 0) THEN lp = uv.img[i].dim[1]
         ENDCASE
         2: BEGIN               ; sagittal
            fp = 1
            IF (set EQ 3) THEN lp = uv.img[0].dim[0] <  uv.img[1].dim[0] $
            ELSE IF (set GT 0) THEN lp = uv.img[i].dim[0]
         ENDCASE
      ENDCASE

      IF (set GT 0) THEN BEGIN 
         CASE fmode OF 
            0: BEGIN 
               widget_control, uv.wid.slider, set_slider_min=fp
               IF (uv.img[i].lp GT uv.img[i].fp+1) THEN $
                  widget_control, uv.wid.slider, set_slider_max=lp $
               ELSE widget_control, uv.wid.slider, set_slider_max=fp+1
               IF (uv.img[i].p GT lp) THEN FOR k=0,1 DO uv.img[k].p = lp
               IF (uv.img[i].p LT fp) THEN FOR k=0,1 DO uv.img[k].p = fp
               widget_control, uv.wid.slider, set_value=uv.img[i].p
               FOR k= 0, 1 DO BEGIN
                  IF (dsp[k].set) THEN BEGIN 
                     IF (uv.img[k].f GT uv.img[k].lf) THEN uv.img[k].f = uv.img[k].lf
                     IF (uv.img[k].f LT uv.img[k].ff) THEN uv.img[k].f = uv.img[k].ff
                  ENDIF
               ENDFOR
            ENDCASE 
            
            1: BEGIN 
               widget_control, uv.wid.slider, set_slider_min=ff
               IF (uv.img[i].lf GT uv.img[i].ff+1) THEN $
                  widget_control, uv.wid.slider, set_slider_max=lf $
               ELSE widget_control, uv.wid.slider, set_slider_max=ff+1
               IF (uv.img[i].f GT uv.img[i].lf) THEN uv.img[i].f = lf
               IF (uv.img[i].f LT uv.img[i].ff) THEN uv.img[i].f = ff
               uv.img[i].p = uv.img[i].fp
               widget_control, uv.wid.slider, set_value=uv.img[i].f
            ENDCASE 
            
            2: BEGIN 
               CASE set OF 
                  1: BEGIN
                     planes = uv.img[0].dim[2]
                     frames = uv.img[0].dim[3]
                  ENDCASE
                  2: BEGIN
                     planes = uv.img[1].dim[2]
                     frames = uv.img[1].dim[3]
                  ENDCASE
                  3: BEGIN
                     planes = uv.img[0].dim[2] <  uv.img[1].dim[2]
                     frames = uv.img[0].dim[3] <  uv.img[1].dim[3]
                  ENDCASE 
               ENDCASE 
               widget_control, uv.wid.slider, set_slider_min=1
               widget_control, uv.wid.slider, set_slider_max=planes*frames
               IF (uv.img[i].f GT lf) THEN FOR k=0,1 DO uv.img[k].f = lf
               IF (uv.img[i].f LT ff) THEN FOR k=0,1 DO uv.img[k].f = ff
               IF (uv.img[i].p GT lp) THEN FOR k=0,1 DO uv.img[k].p = lp
               IF (uv.img[i].p LT fp) THEN FOR k=0,1 DO uv.img[k].p = fp
               loc = (uv.img[i].f-ff)*planes + uv.img[i].p
               widget_control, uv.wid.slider, set_value=loc
            ENDCASE 
         ENDCASE
      ENDIF 
   ENDIF 
   ;;-----------------------------------------------------------------------------------
   
   IF (redisplay) THEN BEGIN 
      FOR i= 0, nwin DO BEGIN
         IF (dsp[i].set) THEN BEGIN 
            IF (i LT 2) THEN BEGIN
               IF (strlen(uv.img[i].fname) EQ 0) THEN BEGIN 
                  widget_control, uv.wid.msg, set_value='No file has been entered for #'+string(i+1) 
                  redisplay = 0
               ENDIF 
            ENDIF ELSE BEGIN
               IF ((strlen(uv.img[0].fname) EQ 0) OR (strlen(uv.img[1].fname) EQ 0)) THEN BEGIN 
                  widget_control, uv.wid.msg, set_value='Two image files must be entered'
                  redisplay = 0
               ENDIF 
            ENDELSE
            widget_control, uv.wid.win[i], bad_id=status
            IF (status NE 0) then dsp[i].init = 0
            
            IF (redisplay AND (dsp[i].init EQ 0)) THEN BEGIN
               dispbase = widget_base(TITLE='Image '+ strcompress(string(i+1)), $
                                      group_leader=uv.wid.base, uvalue=ev.top)
               win = widget_draw(dispbase, xsize=dsp[i].xsize, ysize=dsp[i].ysize, /button, /motion)
               !p.background = 0
               scrnsize = get_screen_size()
               yloc = scrnsize[1]/2
               IF (yloc GT 340) THEN yloc = 340
               IF (scrnsize[0] LT 1900) THEN xmax = scrnsize[0] ELSE xmax = 1920
               IF (scrnsize[0] GT 1200) THEN xmax = 1280
               CASE i OF
                  0: xloc = 0
                  1: xloc = xmax/3
                  2: xloc = 2*xmax/3
               ENDCASE
               widget_control, dispbase, /realize, xoffset=xloc, yoffset=yloc
               widget_control, win, get_value=windowIndex
               wset, windowIndex
               xmanager, "VIDIDISP"+strcompress(string(i+1),/remove_all), dispbase
               uv.wid.win[i] = win
               dsp[i].id = windowIndex
               dsp[i].init = 1
               IF (dsp[i].nc EQ 0) THEN BEGIN
                  IF (!d.n_colors GE 160) THEN nc=80 ELSE nc=(!d.n_colors/2)-1
                  print, !d.n_colors, nc
                  dsp[0].bot = 0
                  dsp[0].nc = nc
                  dsp[1].bot = nc
                  dsp[1].nc = nc
                  dsp[2].nc = nc
                  label = 2*nc 
               ENDIF
               IF (i EQ 0) THEN loadct, 36, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl" $
               ELSE IF (i EQ 1) THEN loadct, 36, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               white  = rotate([255,255,255],4)
               tvlct,white,label
               setuv = 1
            ENDIF 
         ENDIF 
      ENDFOR
      IF (redisplay) THEN VIDI_DISPLAY, uv
   ENDIF 

   IF (setuv) THEN widget_control, ev.top, set_uvalue=uv
END


PRO VIDI
@@IMAGE_UTILS.h
@@VIDI.h

   on_error, 2
   logfile = ''
   logfile = getenv('LOGFILE')
   local_path = getenv('PWD')
   IF (strlen(logfile) GT 0) THEN BEGIN
      openw, loglun, logfile, ERROR=err, /GET_LUN
      IF (err NE 0) THEN BEGIN
         print, 'Cannot open logfile: ',logfile
         loglun = 0
      ENDIF
   ENDIF

   base = widget_base (TITLE='VIDI', /COLUMN)
   base1 = widget_base(base, row=1)
   
   select0 =  ['1\Get Files', '1\Image 1', '0\First Frame, All Planes', $
               '0\One Frame, All Planes', '0\One Frame, Select Planes', $
               '0\All Frames, One Plane',  '2\All Frames, All Planes', $
               '1\Image2', '0\First Frame, All Planes', $
               '0\One Frame, All Planes', '0\One Frame, Select Planes', $
               '0\All Frames, One Plane',  '0\All Frames, All Planes']
   file = cw_pdmenu(base1, select0)

   viewer = widget_button(base1, value='Viewer')
   
   select2 = ['1\Orientation','0\Transverse','0\Coronal','0\Sagittal']
   orient = cw_pdmenu(base1, select2, /RETURN_NAME)
   
   select3 = ['1\Magnify','0\ 1 ','0\ 2 ','0\ 3 ','0\ 4 ','0\ 5 ','0\ 6 ','0\ 7 ','0\ 8 ', $
              '0\ 9 ', '0\ 10 ', '0\ 11 ', '0\ 12 ', '0\ 13 ', '0\ 14 ', '0\ 15 ', '0\ 16 ']
   zoom = cw_pdmenu(base1, select3)
   
   select4 = ['1\Color','0\Image 1','0\Image 2']
   color = cw_pdmenu(base1, select4)
   
   select5 = ['1\VOI','0\Image 1','0\Image 2']
   roi = cw_pdmenu(base1, select5)
   
   scale = widget_button(base1, value='Scale')
   
   select7 =  ['1\Processing', '1\Image 1', '0\None', '0\CBF', '0\CBV', '0\OEF', '0\CMRO2', '0\CMRGlu', $
               '2\MTT', '1\Image 2', '0\None', '0\CBF', '0\CBV', '0\OEF', '0\CMRO2', '0\CMRGlu', $
               '0\MTT']
   process = cw_pdmenu(base1, select7)
   
   select8 = ['1\Edit','0\Image 1','0\Image 2','0\Image 2 in 3']
   edit = cw_pdmenu(base1, select8)
   
   select9 = ['1\Mask','0\Image 1','0\Image 2']
   mask = cw_pdmenu(base1, select9)
   
   select10 = ['1\Segmentation','0\Image 1','0\Image 2','0\Image 2 in 3']
   segment = cw_pdmenu(base1, select10)

   select11 = ['1\Save Image','0\Image 1 to Interfile','0\Image 2 to Interfile']
   save = cw_pdmenu(base1, select11)

   select12 = ['1\Save Window','0\Image 1 to TIF','0\Image 2 to TIF','0\Image 3 to TIF']
   tiff = cw_pdmenu(base1, select12)

   peaks = widget_button(base1, value='Peaks')

   exit = widget_button(base1, value='Exit')
   
   base2 = widget_base(base, row=1)
   base2a = widget_base(base2, row=2)
   fname = lonarr(2)
   fname[0] = cw_field(base2a, title='Image 1', value='', xsize=85, /RETURN_EVENTS)
   fname[1] = cw_field(base2a, title='Image 2', value='', xsize=85, /RETURN_EVENTS)
   
   base2d = widget_base(base2, row=2)
   max = lonarr(2)
   max[0] = cw_field(base2d, title='Max', value=0, xsize=10, ysize=1, /RETURN_EVENTS)
   max[1] = cw_field(base2d, title='Max', value=0, xsize=10, ysize=1, /RETURN_EVENTS)

   base2e = widget_base(base2, row=2)
   auto = lonarr(2)
   auto[0] = widget_button(base2e, ysize=35, value='Auto')
   auto[1] = widget_button(base2e, ysize=35, value='Auto')

   slice = 1
   slider = widget_slider(base, value=slice, min=1, max=47, xsize=1000)
   
   base2e = widget_base(base, column=2)
   display = cw_bgroup(base2e, ['Image 1','Image 2','Composite (2 over 1)'], /NONEXCLUSIVE, /ROW)
   base2f = widget_base(base2e,row=1)
   up = widget_button(base2f, value='<- Up  ')
   mid = widget_button(base2f, value=' Middle ')
   down = widget_button(base2f, value=' Down ->')  
   defpath = cw_bgroup(base2f, ['Previous','Image 1','Image 2','Local  (Default Path)'], $
                       /ROW, /EXCLUSIVE, set_value=default_path)

   base2g = widget_base(base, row=1)
   atl = cw_bgroup(base2g, ['Atlas 1','Atlas 2','Composite Atlas','Label','Color Bar    '], $
                   /ROW, /NONEXCLUSIVE, set_value=atlas)
   atltype = cw_bgroup(base2g, ['Simple','Detailed Talairach'],/ROW, /EXCLUSIVE, set_value=atlas_type)

   select14 = ['1\Color 1','0\Rainbow','0\Gray','0\Hot Metal','0\Red/Green','0\BGRY', '0\Gray S']
   select15 = ['1\Color 2','0\Rainbow','0\Gray','0\Hot Metal','0\Red/Green','0\BGRY', '0\Hues']
   lut1 = cw_pdmenu(base2g, select14)
   lut2 = cw_pdmenu(base2g, select15)

   select16 = ['1\Atlas 1','0\PET','0\MRI']
   atlasfile = cw_pdmenu(base2g, select16)

   select17 = ['1\Points','0\Image 1','0\Image 2']
   points = cw_pdmenu(base2g, select17)
   
   msg = widget_text(base)
   
   voi = ptr_new({VOI})
   (*voi).id = 'VOI'
   
   wid = {WIDGETS,		$
          base     : base,	$ ; top level base
          file     : file,	$ ; file selection button id
          viewer   : viewer,	$ ; display all slices button id
          orient   : orient,	$ ; image orientation selection button id
          zoom     : zoom,	$ ; magnification selection button id
          color    : color,	$ ; color selection button id
          voicolor : 6,		$ ; voi draw color (3=white; 6=XOR)
          scale    : scale,	$ ; scaling menu selection button id
          process  : process,	$ ; type of processing selection button id
          roi      : roi,	$ ; ROI menu   
          edit     : edit,	$ ; edit menu
          editval  : 0,		$ ; value to fill in edit operations
          mask     : mask,	$ ; mask menu
          rsign    : 2,		$ ; relation to rthresh determining replacement
          rthresh  : 0,		$ ; threshold for determining replacement
          rplanes  : 0,		$ ; which planes to replace
          rerase   : 1,		$ ; dimension of eraser (in image pixels)
          rslab    : 1,		$ ; number of planes above and/or below to replace
          rmode    : 0,		$ ; replacement mode (inside/outside)
          topslc   : 1,		$ ; top slice in mask
          botslc   : 1,		$ ; bottom slice in mask
          segment  : segment,	$ ; segmentation menu
          save     : save,	$ ; save menu
          tiff     : tiff,	$ ; save window as tiff menu
          peaks    : peaks,	$ ; peaks menu selection button id
          points   : points,	$ ; points menu selection button id
          up       : up,	$ ; up button
          mid      : mid,	$ ; mid button
          down     : down,	$ ; down button
          defpath  : defpath,	$ ; default path selection
          atlas    : atl,	$ ; atlas selection
          atltype  : atltype,	$ ; atlas selection
          lut1     : lut1,	$ ; quick color table
          lut2     : lut2,	$ 
          atlasfile : atlasfile,	$ ; quick selection of atlas file for image 1
          exit     : exit,	$ ; exit selection button id
          fname    : fname,	$ ; filename entry field id
          max      : max,	$ ; maximum value displayed
          auto     : auto,	$ ; auto scale
          slider   : slider,	$ ; slice selection slider id
          display  : display,	$ ; image number selection buttons id
          msg      : msg,	$ ; message field id
          win      : lonarr(3),	$ ; draw window widget id
          vthresh  : [0L,0L],	$ ; low and high thresholds for VOI definition
          voi      : voi	$ ; pointer to VOI linked list
         }

   dsp[0].cut =  50             ; default cutoff for combined display
   FOR i= 0, 2 DO dsp[i].set = 0
   FOR i= 0, 2 DO dsp[i].init = 0
   FOR i= 0, 2 DO dsp[i].zoom = 1
   FOR i=0, 1 DO dsp[i].bot = 0
   FOR i=0, 1 DO dsp[i].nc = 0
   dsp[0].set = 1
   orient = 0L
   fmode = 0L

   vdsp.set = 0
   vdsp.init = 0
   vdsp.zoom = 1
   vdsp.nx = 0
   vdsp.ny = 0
   vdsp.start = 1
   vdsp.space = 1
   
   img = {VIMAGE}
   uv = {wid:wid, img:[img,img], cbf:[img,img], cbv:[img,img]}
   FOR i= 0, 1 DO BEGIN
      uv.img[i].f = 1
      uv.img[i].p = 1
      uv.img[i].ff = 1
      uv.img[i].lf = 1
      uv.img[i].fp = 1
      uv.img[i].lp = 1000
   ENDFOR
   
   widget_control, display, set_value=dsp[0].set
   widget_control, base, set_uvalue=uv
   widget_control, base, /realize, xoffset=0, yoffset=0
   xmanager, "VIDI", base, EVENT_HANDLER='VIDI_EVENT'

END 
@


2.10
log
@*** empty log message ***
@
text
@d1448 2
a1449 2
   vdsp.nx = 8
   vdsp.ny = 6
@


2.9
log
@*** empty log message ***
@
text
@d999 6
d1042 8
d1229 2
a1230 1
               IF (scrnsize[0] LT 2000) THEN xmax = scrnsize[0] ELSE xmax = 1920
d1371 2
a1372 2
   select14 = ['1\Color 1','0\Rainbow','0\Gray','0\Hot Metal','0\Red/Green','0\BGRY']
   select15 = ['1\Color 2','0\Rainbow','0\Gray','0\Hot Metal','0\Red/Green','0\BGRY']
@


2.8
log
@*** empty log message ***
@
text
@d492 1
@


2.7
log
@set maximum screensize for x to 2000
@
text
@d694 18
d1306 5
a1310 2
   select9 = ['1\Segmentation','0\Image 1','0\Image 2','0\Image 2 in 3']
   segment = cw_pdmenu(base1, select9)
d1312 2
a1313 2
   select10 = ['1\Save Image','0\Image 1 to Interfile','0\Image 2 to Interfile']
   save = cw_pdmenu(base1, select10)
d1315 2
a1316 2
   select11 = ['1\Save Window','0\Image 1 to TIF','0\Image 2 to TIF','0\Image 3 to TIF']
   tiff = cw_pdmenu(base1, select11)
d1384 1
d1391 2
@


2.6
log
@change rslab default to 1
@
text
@d1196 1
d1199 2
a1200 2
                  1: xloc = scrnsize[0]/3
                  2: xloc = 2*scrnsize[0]/3
@


2.5
log
@*** empty log message ***
@
text
@d1366 1
a1366 1
          rslab    : 0,		$ ; number of planes above and/or below to replace
@


2.4
log
@bug in img[1].p
@
text
@d240 1
a240 1
               uv.img[i].lp = 512
d255 1
a255 1
               uv.img[i].lp = 512
d311 1
a311 1
               uv.img[i].lp = 512
d379 1
a379 1
            uv.img[i].lp = 512
d412 1
a412 1
            uv.img[i].lp = 512
d592 1
a592 1
            uv.cbf[i].lp = 512
d640 1
a640 1
            uv.cbv[i].lp = 512
d1028 1
a1028 1
      uv.img[i].lp = 512
d1420 1
a1420 1
      uv.img[i].lp = 512
@


2.3
log
@*** empty log message ***
@
text
@d358 1
a358 1
               uv.img[i].p = tmp > uv.img[i].fp
d839 1
a839 1
      FOR i=0, nimg DO uv.img[i].p = (lp + fp)/2
@


2.2
log
@auto display mid-slice when switching orientation
@
text
@d907 1
@


2.1
log
@*** empty log message ***
@
text
@d442 4
a445 1
            'Transverse': orient = 0
d447 40
a486 31
               IF (uv.img[0].dim[2] GT 1) THEN orient = 1 $
               ELSE BEGIN
                  msg = 'Transverse orientation only for multiple planes'
                  widget_control, uv.wid.msg, set_value=msg
               ENDELSE
            ENDCASE 
            'Sagittal': BEGIN
               IF (uv.img[0].dim[2] GT 1) THEN orient = 2 $
               ELSE BEGIN
                  msg = 'Transverse orientation only for multiple planes'
                  widget_control, uv.wid.msg, set_value=msg
               ENDELSE
            ENDCASE 
         ENDCASE
         setuv = 1
         newrange = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.zoom: BEGIN
         FOR i=0,nwin DO dsp[i].zoom = ev.value
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.color: BEGIN
         CASE ev.value OF
            1: IF (dsp[0].nc EQ 0) THEN widget_control, uv.wid.msg, set_value='NO IMAGE displayed' $
            ELSE xloadct, group=uv.wid.base, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
d488 19
a506 19
            2: IF (dsp[1].nc EQ 0) THEN widget_control, uv.wid.msg, set_value='NO IMAGE displayed' $
            ELSE xloadct, group=uv.wid.base, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
         ENDCASE
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.roi: BEGIN
         otemp = orient
         inum = ev.value-1
         IF (orient GT 0) THEN BEGIN
            msg = 'VOIs require TRANSVERSE slices'
            widget_control, uv.wid.msg, set_value=msg
         ENDIF ELSE BEGIN
            IF (uv.wid.win[inum] GT 0) THEN BEGIN  
               VIDI_DEFVOI, uv, inum, otemp, dsp[inum].zoom
               setuv = 1
            ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for VOI'
         ENDELSE 
d528 23
a550 23
      ENDCASE
      
      ;; -------------------------------------------------------------------------------
      uv.wid.scale: BEGIN
         VIDI_SCALE, uv.wid.base
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.max[0]: BEGIN
         dsp[0].max = ev.value
         IF (dsp[0].range EQ 2) THEN dsp[0].min = -dsp[0].max
         dsp[0].type = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.max[1]: BEGIN
         dsp[1].max = ev.value
         IF (dsp[1].range EQ 2) THEN dsp[1].min = -dsp[1].max
         dsp[1].type = 1
         redisplay = 1
      ENDCASE 
d552 31
a582 27
      ;; -------------------------------------------------------------------------------
      uv.wid.auto[0]: BEGIN
         dsp[0].type = 0
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.auto[1]: BEGIN
         dsp[1].type = 0
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.process: BEGIN
         IF (ev.value LT 9) THEN BEGIN
            i = 0
            rtype = ev.value-2
         ENDIF ELSE BEGIN
            i = 1
            rtype = ev.value-10
         ENDELSE
         image = uv.img[i]
         oldtype = image.proc
         image.proc = rtype
         IF ((oldtype EQ 3 AND image.proc EQ 4) OR (oldtype EQ 4 AND image.proc EQ 3)) THEN BEGIN
            widget_control, uv.wid.msg, set_value='Using existing metabolic factors'
            uv.img[i].proc = rtype
d584 28
a611 2
            IF (gethdr(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
d613 1
d615 14
a628 28
               widget_control, uv.wid.msg, set_value='Metabolic factors read'
               uv.img[i] = image
            ENDELSE 
            
            IF (rtype EQ 3 OR rtype EQ 4 OR rtype EQ 6) THEN BEGIN ; Oxygen and MTT models require CBF image
               uv.cbf[i].ff = 1
               uv.cbf[i].lf = 1
               uv.cbf[i].fp = 1
               uv.cbf[i].lp = 512
               uv.cbf[i].proc = 1
               fmode = 0
               fname = ''
               fname = uv.img[i].fname
               IF (strlen(fname) GT 0) THEN BEGIN 
                  l1 =  rstrpos(fname,'/')
                  IF (l1 GT 0) THEN strput,fname,'*',l1+1
                  IF (rtype EQ 3 OR rtype EQ 4) THEN BEGIN
                     l1 = rstrpos(fname,'oo')
                     IF (l1 GT 0) THEN strput,fname,'ho',l1
                  ENDIF ELSE BEGIN
                     l1 = rstrpos(fname,'oc')
                     IF (l1 GT 0) THEN strput,fname,'ho',l1
                  ENDELSE
               ENDIF ELSE fname = '*ho*v'
               fname = dialog_pickfile(FILE=uv.cbf[i].fname, FILTER=fname, /READ, $
                                       TITLE='Select HO (CBF) Image')
               IF (strlen(fname) EQ 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value='NO FILE entered'
d631 41
a671 41
               ENDIF ELSE BEGIN 
                  image = uv.cbf[i]
                  image.fname = fname
                  image.fname = fname
                  msg = ''
                  IF (getframe(image, msg) NE 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value=msg
                     uv.cbf[i].fname = ''
                     RETURN
                  ENDIF
                  uv.cbf[i] = image
                  widget_control, uv.wid.msg, set_value='File '+uv.cbf[i].fname+' found'
                  image = uv.cbf[i]
                  IF (gethdr(image, msg) NE 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value=msg
                     uv.img[i].proc = 0
                     rtype = 0
                  ENDIF ELSE  widget_control, uv.wid.msg, set_value='Metabolic factors read'
                  uv.cbf[i] = image
               ENDELSE 
            ENDIF  
            
            IF (rtype EQ 3 OR rtype EQ 4) THEN BEGIN ; Oxygen models require CBV image
               uv.cbv[i].ff = 1
               uv.cbv[i].lf = 1
               uv.cbv[i].fp = 1
               uv.cbv[i].lp = 512
               uv.cbv[i].proc = 2
               fmode = 0
               fname = ''
               fname = uv.cbf[i].fname
               IF (strlen(fname) GT 0) THEN BEGIN 
                  l1 =  rstrpos(fname,'/')
                  IF (l1 GT 0) THEN strput,fname,'*',l1+1
                  l1 = rstrpos(fname,'ho')
                  IF (l1 GT 0) THEN strput,fname,'oc',l1
               ENDIF ELSE fname = '*oc*v'
               fname = dialog_pickfile(FILE=uv.cbv[i].fname, FILTER=fname, /READ, $
                                       TITLE='Select CO (CBV) Image')
               IF (strlen(fname) EQ 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value='NO FILE entered'
d674 5
a678 22
               ENDIF ELSE BEGIN 
                  image = uv.cbv[i]
                  image.fname = fname
                  image.fname = fname
                  msg = ''
                  IF (getframe(image, msg) NE 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value=msg
                     uv.cbv[i].fname = ''
                     RETURN
                  ENDIF
                  uv.cbv[i] = image
                  widget_control, uv.wid.msg, set_value='File '+uv.cbv[i].fname+' found'
                  image = uv.cbv[i]
                  IF (gethdr(image, msg) NE 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value=msg
                     uv.img[i].proc = 0
                     rtype = 0
                  ENDIF ELSE  widget_control, uv.wid.msg, set_value='Metabolic factors read'
                  uv.cbv[i] = image
               ENDELSE 
            ENDIF  
         ENDELSE 
d680 9
d690 36
a725 8
         IF (dsp[i].set) THEN redisplay = 1
      ENDCASE
      
      ;; -------------------------------------------------------------------------------
      uv.wid.edit: BEGIN
         i = ev.value-1
         IF (uv.wid.win[i] GT 0) THEN BEGIN  
            VIDI_EDIT, uv, i, dsp[i].zoom
d727 3
a729 40
         ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for Edit'
      ENDCASE
      
      ;; -------------------------------------------------------------------------------
      uv.wid.segment: BEGIN
         inum = ev.value-1
         IF (uv.wid.win[inum] GT 0) THEN VIDI_SEGMENT, uv, inum $
         ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for Segmentation'
         setuv = 1
         newrange = 1
         redisplay = 1
      ENDCASE
      
      ;; -------------------------------------------------------------------------------
      uv.wid.save: BEGIN
         i = ev.value-1
         IF (uv.wid.win[i] GT 0) THEN BEGIN  
            temp = ev.top
            fname = uv.img[i].fname
            savefile = widget_base(group_leader=uv.wid.base)
            text = cw_field(savefile, title='Filename: ', value=fname, $
                            xsize=80, /STRING, /RETURN_EVENTS)
            widget_control, savefile, xoffset=0, yoffset=0, /realize
            ev = WIDGET_EVENT(savefile)
            widget_control, savefile, /DESTROY
            fname = ev.value
            ev.top = temp
            IF (strtrim(fname EQ '')) THEN BEGIN
               msg = 'NO FILENAME entered'
               result=dialog_message(msg, title='Image was NOT SAVED!', /error)
            ENDIF ELSE BEGIN 
               msg = ' '
               stat = putinterfile(uv.img[i], fname, msg)
               uv.img[i].fname = fname
               widget_control, uv.wid.msg, set_value=msg
               widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
               setuv = 1
            ENDELSE
         ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE to save'
      ENDCASE
d731 36
a766 38
      ;; -------------------------------------------------------------------------------
      uv.wid.tiff: BEGIN
         i = ev.value-1
         IF (uv.wid.win[i] GT 0) THEN BEGIN  
            temp = ev.top
            fname = ''
            savefile = widget_base(group_leader=uv.wid.base)
            text = cw_field(savefile, title='TIF Filename: ', value=fname, $
                            xsize=80, /STRING, /RETURN_EVENTS)
            widget_control, savefile, xoffset=50, yoffset=0, /realize
            ev = WIDGET_EVENT(savefile)
            widget_control, savefile, /DESTROY
            fname = ev.value
            ev.top = temp
            widget_control, /hourglass
            IF (strtrim(fname EQ '')) THEN BEGIN
               msg = 'NO FILENAME entered'
               result=dialog_message(msg, title='Image was NOT SAVED!', /error)
            ENDIF ELSE BEGIN 
               k = rstrpos(fname,'.')
               IF (k GT 0) THEN fname = strmid(fname,0,k)
               fname = fname + '.tif'
               wset, dsp[i].id
               arr = tvrd()
               device, get_visual_depth=depth
               IF (depth EQ 24) THEN BEGIN
                  xarr = (size(arr))[1]
                  yarr = (size(arr))[2]
                  rgb = lonarr(3,xarr,yarr)
                  rgb[0,*,*] = tvrd(0,0,xarr,yarr,1)
                  rgb[1,*,*] = tvrd(0,0,xarr,yarr,2)
                  rgb[2,*,*] = tvrd(0,0,xarr,yarr,3)
                  write_tiff,fname,rgb,compression=1
               ENDIF ELSE BEGIN
                  tvlct,r,g,b,/get
                  write_tiff,fname,arr,compression=1,red=r,green=g,blue=b
               ENDELSE
               widget_control, uv.wid.msg, set_value='Window saved in TIFF format:  '+fname
d768 1
a768 12
         ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE to save'
      ENDCASE

      ;; -------------------------------------------------------------------------------
      uv.wid.peaks: BEGIN
         IF (orient GT 0) THEN BEGIN
            msg = 'Peaks displayed on TRANSVERSE slices'
            widget_control, uv.wid.msg, set_value=msg
         ENDIF ELSE BEGIN
            otemp = orient
            VIDI_PEAKS, uv, otemp, dsp[0].zoom
            setuv = 1
d770 2
a771 1
      ENDCASE 
d773 8
a780 48
      ;; -------------------------------------------------------------------------------
      uv.wid.points: BEGIN
         inum = ev.value-1
         IF (uv.wid.win[inum] GT 0) THEN BEGIN  
            VIDI_POINTS, uv, inum, dsp[inum].zoom
            setuv = 1
         ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for Points'
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.exit: BEGIN
         FOR i=0, nimg DO if (uv.img[i].data NE ptr_new()) THEN ptr_free, uv.img[i].data
         IF ((loglun NE 0) AND (size(loglun))[1] NE 0) THEN BEGIN
            status = FSTAT(loglun)
            IF (status.open GT 0) THEN close, loglun
            IF (status.size EQ 0) THEN BEGIN
               command = 'rm ' + status.name
               spawn, command
            ENDIF ELSE print,'Statistics saved in ',status.name
         ENDIF
         widget_control, ev.top, /destroy
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.up: BEGIN
         CASE fmode OF
            0: BEGIN
               FOR i=0, nimg DO IF (uv.img[i].p GT uv.img[i].fp) THEN uv.img[i].p = uv.img[i].p-1
               widget_control, uv.wid.slider, set_value=uv.img[0].p
            ENDCASE
            1: BEGIN
               FOR i=0, nimg DO IF (uv.img[i].f GT uv.img[i].ff) THEN uv.img[i].f = uv.img[i].f-1
               widget_control, uv.wid.slider, set_value=uv.img[0].f
            ENDCASE
            2: BEGIN
               FOR i=0, nimg DO BEGIN
                  IF (uv.img[i].p GT uv.img[i].fp) THEN BEGIN
                     uv.img[i].p = uv.img[i].p - 1 
                  ENDIF ELSE IF (uv.img[i].f  GT uv.img[i].ff) THEN BEGIN
                     uv.img[i].f = uv.img[i].f - 1 
                     uv.img[i].p = uv.img[i].lp
                  ENDIF
               ENDFOR
               planes = uv.img[0].lp-uv.img[0].fp+1
               slice = (uv.img[0].f-uv.img[0].ff)*planes + uv.img[0].p-uv.img[0].fp + 1
               widget_control, uv.wid.slider, set_value=slice
            ENDCASE
         ENDCASE
d782 8
a789 7
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.mid: BEGIN
         FOR i=0, nimg DO uv.img[i].p = (lp + fp)/2
         widget_control, uv.wid.slider, set_value=uv.img[0].p
d791 23
a813 28
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.down: BEGIN
         p = uv.img[0].p
         CASE fmode OF
            0: BEGIN
               FOR i=0, nimg DO IF (uv.img[i].p LT lp) THEN uv.img[i].p = uv.img[i].p+1
               widget_control, uv.wid.slider, set_value=uv.img[0].p
            ENDCASE
            1: BEGIN
               FOR i=0, nimg DO IF (uv.img[i].f LT uv.img[i].lf) THEN uv.img[i].f = uv.img[i].f+1
               widget_control, uv.wid.slider, set_value=uv.img[0].f
            ENDCASE
            2: BEGIN
               FOR i=0, nimg DO BEGIN
                  IF (uv.img[i].p LT uv.img[i].lp) THEN BEGIN
                     uv.img[i].p = uv.img[i].p + 1 
                  ENDIF ELSE IF (uv.img[i].f  LT uv.img[i].lf) THEN BEGIN
                     uv.img[i].f = uv.img[i].f + 1 
                     uv.img[i].p = uv.img[i].fp
                  ENDIF
               ENDFOR
               planes = uv.img[0].lp-uv.img[0].fp+1
               slice = (uv.img[0].f-uv.img[0].ff)*planes + uv.img[0].p-uv.img[0].fp + 1
               widget_control, uv.wid.slider, set_value=slice
            ENDCASE
d815 3
a817 21
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.slider: BEGIN
         widget_control, uv.wid.slider, get_value=slice
         CASE fmode OF
            0: FOR i=0, nimg DO IF (slice LE lp) THEN uv.img[i].p = slice
            1: FOR i=0, nimg DO IF (slice LE uv.img[i].lf) THEN uv.img[i].f = slice
            2: BEGIN 
               planes = uv.img[0].lp-uv.img[0].fp+1
               frames = uv.img[0].lf-uv.img[0].ff+1
               FOR i=0, nimg DO BEGIN
                  loc = slice-1
                  f = loc/planes
                  p = loc - f*planes
                  uv.img[i].f = uv.img[i].ff + f
                  uv.img[i].p = uv.img[i].fp + p
               ENDFOR 
            ENDCASE 
d819 101
a919 27
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.display: BEGIN
         CASE ev.value OF
            0: IF (dsp[0].set EQ 0) THEN dsp[0].set = 1 $
            ELSE dsp[0].set = 0
            1: IF (dsp[1].set EQ 0) THEN dsp[1].set = 1 $
            ELSE dsp[1].set = 0
            2: IF (dsp[2].set EQ 0) THEN dsp[2].set = 1 $
            ELSE dsp[2].set = 0
         END
         newrange = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.defpath: BEGIN
         CASE ev.value OF
            0: default_path = 0
            1: default_path = 1
            2: default_path = 2
            3: default_path = 3
         END
      ENDCASE 
d921 24
a944 24
      ;; -------------------------------------------------------------------------------
      uv.wid.atlas: begin
         CASE ev.value OF
            0: IF (atlas[0] EQ 0) THEN atlas[0] = 1 $
            ELSE atlas[0] = 0
            1: IF (atlas[1] EQ 0) THEN atlas[1] = 1 $
            ELSE atlas[1] = 0
            2: IF (atlas[2] EQ 0) THEN atlas[2] = 1 $
            ELSE atlas[2] = 0
            3: IF (atlas[3] EQ 0) THEN atlas[3] = 1 $
            ELSE atlas[3] = 0
            4: IF (atlas[4] EQ 0) THEN atlas[4] = 1 $
            ELSE atlas[4] = 0
         END
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.atltype: BEGIN
         CASE ev.value OF
            0: atlas_type = 0
            1: atlas_type = 1
         END
      ENDCASE 
d946 8
a953 33
      ;; -------------------------------------------------------------------------------
      uv.wid.lut1: BEGIN
         CASE ev.value OF
            1: BEGIN
               loadct, 36, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl" 
               dsp[0].range = 0
               dsp[0].min = 0
            ENDCASE
            2: BEGIN
               loadct, 0, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               dsp[0].range = 0
               dsp[0].min = 0
            ENDCASE
            3: BEGIN
               loadct, 3, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               dsp[0].range = 0
               dsp[0].min = 0
            ENDCASE
            4: BEGIN
               loadct, 38, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               dsp[0].range = 2
               dsp[0].min = -dsp[0].max
            ENDCASE
            5: BEGIN
               loadct, 10, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               dsp[0].range = 0
               dsp[0].min = 0
            ENDCASE
d955 24
a978 1
         redisplay = 1
d980 3
a982 1
      ;; -------------------------------------------------------------------------------
d984 7
a990 32
      uv.wid.lut2: BEGIN
         CASE ev.value OF
            1: BEGIN
               loadct, 36, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               dsp[1].range = 0
               dsp[1].min = 0
            ENDCASE
            2: BEGIN
               loadct, 0, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               dsp[1].range = 0
               dsp[1].min = 0
            ENDCASE
            3: BEGIN
               loadct, 3, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               dsp[1].range = 0
               dsp[1].min = 0
            ENDCASE
            4: BEGIN
               loadct, 38, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               dsp[1].range = 2
               dsp[1].min = -dsp[1].max
            ENDCASE
            5: BEGIN
               loadct, 10, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               dsp[1].range = 0
               dsp[1].min = 0
            ENDCASE
d992 24
a1015 1
         redisplay = 1
d1017 2
d1020 1
a1020 1
      ;; -------------------------------------------------------------------------------
d1022 10
a1031 29
      uv.wid.atlasfile: BEGIN
         i = 0
         uv.img[i].ff = 1
         uv.img[i].lf = 1
         uv.img[i].fp = 1
         uv.img[i].lp = 512
         image = uv.img[i]
         CASE ev.value OF
            1 : image.fname = "/usr/local/npg/lib/t88/meanpet.t88"
            2 : image.fname = "/usr/local/npg/lib/t88/meanmr.t88"
         ENDCASE
         msg = ''
         IF (getframe(image, msg) NE 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value=msg
            uv.img[i].fname = ''
            RETURN
         ENDIF
         tmp = uv.img[i].p
         uv.img[i] = image
         IF (orient EQ 0) THEN BEGIN ; keep same plane if in range
            uv.img[i].p = tmp > uv.img[i].fp
            uv.img[i].p = tmp < uv.img[i].lp
         ENDIF ELSE uv.img[i].p = tmp
         widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
         widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
         uv.img[i].proc = 0
         setuv = 1
         newrange = 1
         IF (dsp[i].set) THEN redisplay = 1
d1033 18
a1050 4
      ;; -------------------------------------------------------------------------------
      
      ELSE:
      
d1052 1
d1054 4
@


2.0
log
@03 Feb 2004
@
text
@d527 1
a527 1
         IF (dsp[0].range EQ 2) THEN dsp[0].min = -dsp[1].max
d956 1
a956 1
               loadct, 37, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
d993 1
a993 1
               loadct, 37, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
@


1.74
log
@3 Feb 2004
@
text
@@


1.73
log
@*** empty log message ***
@
text
@@


1.72
log
@display XYZ in atlas coordinates when atlas outlines are displayed
@
text
@d525 28
d941 1
d947 1
d953 1
d959 1
d965 1
d978 1
d984 1
d990 1
d996 1
d1002 1
a1248 6
   ;;select2 =  ['1\ViewAll', $
   ;;            '1\Image1','0\by 1 ','0\   2 ','0\   3 ','0\   4 ', $
   ;;            '0\   5 ','0\   6','0\   7','0\   8','0\   9','2\  10', $
   ;;            '1\Image2','0\by 1 ','0\   2 ','0\   3 ','0\   4 ', $
   ;;            '0\   5 ','0\   6','0\   7','0\   8','0\   9','0\  10']
   ;;viewall = cw_pdmenu(base1, select2)
d1251 2
a1252 2
   select3 = ['1\Orientation','0\Transverse','0\Coronal','0\Sagittal']
   orient = cw_pdmenu(base1, select3, /RETURN_NAME)
d1254 1
a1254 1
   select4 = ['1\Magnify','0\ 1 ','0\ 2 ','0\ 3 ','0\ 4 ','0\ 5 ','0\ 6 ','0\ 7 ','0\ 8 ', $
d1256 1
a1256 1
   zoom = cw_pdmenu(base1, select4)
d1258 2
a1259 2
   select5 = ['1\Color','0\Image 1','0\Image 2']
   color = cw_pdmenu(base1, select5)
d1261 2
a1262 2
   select6 = ['1\VOI','0\Image 1','0\Image 2']
   roi = cw_pdmenu(base1, select6)
d1295 2
a1296 2
   max[0] = cw_field(base2d, title='Max', /noedit, value=0, xsize=10, ysize=1)
   max[1] = cw_field(base2d, title='Max', /noedit, value=0, xsize=10, ysize=1)
d1298 5
d1372 1
@


1.71
log
@add hourglass to save tiff
@
text
@d31 17
a47 5
   CASE orient OF
      0: BEGIN
         x = xc
         y = yc
         z = uv.img[i].p
d49 18
a66 4
      1: BEGIN
         x = xc
         y = uv.img[i].p
         z = yc
d68 4
a71 6
      2: BEGIN
         x = uv.img[i].p
         y = xc
         z = yc
      ENDCASE
   ENDCASE
d106 17
a122 5
   CASE orient OF
      0: BEGIN
         x = xc
         y = yc
         z = uv.img[i].p
d124 18
a141 4
      1: BEGIN
         x = xc
         y = uv.img[i].p
         z = yc
d143 4
a146 6
      2: BEGIN
         x = uv.img[i].p
         y = xc
         z = yc
      ENDCASE
   ENDCASE
d1165 1
a1165 1
                  label = 2*nc + 1
@


1.70
log
@*** empty log message ***
@
text
@d657 1
@


1.69
log
@add colorbar
@
text
@d159 1
d281 1
a281 1
            fname = local_path+"*
d665 14
a678 3
               a = tvrd()
               tvlct,r,g,b,/get
               write_tiff,fname,a,compression=1,red=r,green=g,blue=b
d1109 2
a1110 2
                  ;;print,"lut ",!d.n_colors
                  nc = (!d.n_colors-1)/2
d1116 1
d1122 2
d1128 1
a1128 4
      IF (redisplay) THEN BEGIN
         VIDI_DISPLAY, uv
         VIDI_ATLAS, uv
      ENDIF
@


1.68
log
@fix bug in coordinate message
@
text
@d831 2
d1218 1
a1218 1
   atl = cw_bgroup(base2g, ['Atlas 1','Atlas 2','Composite Atlas','Label    '], $
d1220 1
a1220 1
   atltype = cw_bgroup(base2g, ['Simple or','Detailed Talairach 1988'],/ROW, /EXCLUSIVE, set_value=atlas_type)
@


1.67
log
@vidi_edit fix erase bugs
vidi_points update
@
text
@d7 2
a8 1
   fact = 1.
a9 1
   x = ev.x / zoom + 1
d11 1
a11 1
      0:  BEGIN
d15 1
a15 5
         IF (ysiz GT xsiz) THEN fact = ysiz/xsiz
         y = (ev.y + 1)/ (fact * zoom)
         y = ydim - y + 1
         widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",i,"  Y = ",i)')
      END
d20 1
a20 5
         IF (ysiz GT xsiz) THEN fact = ysiz/xsiz
         y = (ev.y + 1)/ (fact * zoom)
         y = ydim - y + 1
         widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",i,"  Z = ",i)')
      END
d25 1
a25 5
         IF (ysiz GT xsiz) THEN fact = ysiz/xsiz
         y = (ev.y + 1)/ (fact * zoom)
         y = ydim - y + 1
         widget_control, uv.wid.msg, set_value=string(x, y, format='("Y = ",i,"  Z = ",i)')
      END
d27 24
a50 1
END
d58 2
a59 1
   fact = 1.
a60 1
   x = ev.x / zoom + 1
d62 1
a62 1
      0:  BEGIN
d66 1
a66 5
         IF (ysiz GT xsiz) THEN fact = ysiz/xsiz
         y = (ev.y + 1)/ (fact * zoom)
         y = ydim - y + 1
         widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",i,"  Y = ",i)')
      END
d71 1
a71 5
         IF (ysiz GT xsiz) THEN fact = ysiz/xsiz
         y = (ev.y + 1)/ (fact * zoom)
         y = ydim - y + 1
         widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",i,"  Z = ",i)')
      END
d76 1
a76 5
         IF (ysiz GT xsiz) THEN fact = ysiz/xsiz
         y = (ev.y + 1)/ (fact * zoom)
         y = ydim - y + 1
         widget_control, uv.wid.msg, set_value=string(x, y, format='("Y = ",i,"  Z = ",i)')
      END
d78 24
a101 1
END
d108 3
a110 2
   i = 2
   fact = 1.
a111 1
   x = ev.x / zoom + 1
d113 1
a113 1
      0:  BEGIN
d117 1
a117 5
         IF (ysiz GT xsiz) THEN fact = ysiz/xsiz
         y = (ev.y + 1)/ (fact * zoom)
         y = ydim - y + 1
         widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",i,"  Y = ",i)')
      END
d122 1
a122 5
         IF (ysiz GT xsiz) THEN fact = ysiz/xsiz
         y = (ev.y + 1)/ (fact * zoom)
         y = ydim - y + 1
         widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",i,"  Z = ",i)')
      END
d127 1
a127 5
         IF (ysiz GT xsiz) THEN fact = ysiz/xsiz
         y = (ev.y + 1)/ (fact * zoom)
         y = ydim - y + 1
         widget_control, uv.wid.msg, set_value=string(x, y, format='("Y = ",i,"  Z = ",i)')
      END
d129 24
a152 1
END
@


1.66
log
@add vidi_points
fix bug in coordinates displayed for non-cubic voxels
@
text
@d655 1
a655 1
            VIDI_POINTS, uv, inum, orient, dsp[inum].zoom
@


1.65
log
@*** empty log message ***
@
text
@d7 3
a9 1
   x = ev.x / dsp[i].zoom + 1
d12 6
a17 12
         IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN
            fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
            y = (ev.y + 1)/ (fact * dsp[i].zoom)
            y = uv.img[i].dim[1] - y + 1
         ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN
            fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
            y = (ev.y + 1)/ (fact * dsp[i].zoom)
            y = uv.img[i].dim[1] - y + 1
         ENDIF ELSE BEGIN
            y = ev.y / dsp[i].zoom
            y = uv.img[i].dim[1] - y
         ENDELSE
d21 6
a26 3
         fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[0])
         y = (ev.y + 1)/ (fact * dsp[i].zoom)
         y = uv.img[i].dim[2] - y + 1
d30 6
a35 3
         fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[1])
         y = (ev.y + 1)/ (fact * dsp[i].zoom)
         y = uv.img[i].dim[2] - y + 1
d47 3
a49 1
   x = ev.x / dsp[i].zoom + 1
d52 6
a57 12
         IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN
            fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
            y = (ev.y + 1)/ (fact * dsp[i].zoom)
            y = uv.img[i].dim[1] - y + 1
         ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN
            fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
            y = (ev.y + 1)/ (fact * dsp[i].zoom)
            y = uv.img[i].dim[1] - y + 1
         ENDIF ELSE BEGIN
            y = ev.y / dsp[i].zoom
            y = uv.img[i].dim[1] - y
         ENDELSE
d61 6
a66 3
         fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[0])
         y = (ev.y + 1)/ (fact * dsp[i].zoom)
         y = uv.img[i].dim[2] - y + 1
d70 6
a75 3
         fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[1])
         y = (ev.y + 1)/ (fact * dsp[i].zoom)
         y = uv.img[i].dim[2] - y + 1
d87 3
a89 1
   x = ev.x / dsp[i].zoom + 1
d92 6
a97 12
         IF (uv.img[0].pdim[0] GT uv.img[0].pdim[1]) THEN BEGIN
            fact = (uv.img[0].pdim[0])/(uv.img[0].pdim[1])
            y = (ev.y + 1)/ (fact * dsp[i].zoom)
            y = uv.img[0].dim[1] - y + 1
         ENDIF ELSE IF (uv.img[0].pdim[0] LT uv.img[0].pdim[1]) THEN BEGIN
            fact = (uv.img[0].pdim[1])/(uv.img[0].pdim[0])
            y = (ev.y + 1)/ (fact * dsp[i].zoom)
            y = uv.img[0].dim[1] - y + 1
         ENDIF ELSE BEGIN
            y = ev.y / dsp[i].zoom
            y = uv.img[0].dim[1] - y
         ENDELSE
d101 6
a106 3
         fact = (uv.img[0].pdim[2])/(uv.img[0].pdim[0])
         y = (ev.y + 1)/ (fact * dsp[i].zoom)
         y = uv.img[0].dim[2] - y + 1
d110 6
a115 3
         fact = (uv.img[0].pdim[2])/(uv.img[0].pdim[1])
         y = (ev.y + 1)/ (fact * dsp[i].zoom)
         y = uv.img[0].dim[2] - y + 1
d575 1
a575 1
         ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for VOI'
d650 9
d1156 1
a1156 1
   
d1195 3
d1226 1
@


1.64
log
@add Atlas 1
quick color selection BGRY
@
text
@d863 4
@


1.63
log
@add to Interfile in menu
@
text
@a133 1
   
d238 2
d241 1
a241 1
            IF (strlen(uv.img[1].fname) GT 0) THEN fname = uv.img[1].fname
d768 1
d773 1
a773 1
      uv.wid.atlas: BEGIN
d818 5
d824 1
d850 5
d856 1
d860 28
d1043 1
a1043 1
                                ;print,"lut ",!d.n_colors
d1076 1
d1160 1
a1160 1
   defpath = cw_bgroup(base2f, ['Previous','Image 1','Image 2   (Default Path)'], $
d1168 4
a1171 4
   select11 = ['1\Color 1','0\Rainbow','0\Gray','0\Hot Metal','0\Red/Green']
   select12 = ['1\Color 2','0\Rainbow','0\Gray','0\Hot Metal','0\Red/Green']
   lut1 = cw_pdmenu(base2g, select11)
   lut2 = cw_pdmenu(base2g, select12)
d1173 3
d1212 1
@


1.62
log
@conditional mask in vidi_segment
@
text
@d1087 1
a1087 1
   select10 = ['1\Save Image','0\Image 1','0\Image 2']
@


1.61
log
@change xoffset
@
text
@d583 1
a583 1
            widget_control, savefile, xoffset=30, yoffset=0, /realize
d611 1
a611 1
            widget_control, savefile, xoffset=140, yoffset=0, /realize
@


1.60
log
@*** empty log message ***
@
text
@d1001 1
a1001 1
                  ;print,"lut ",!d.n_colors
d1053 6
a1058 6
                                ;select2 =  ['1\ViewAll', $
                                ;            '1\Image1','0\by 1 ','0\   2 ','0\   3 ','0\   4 ', $
                                ;            '0\   5 ','0\   6','0\   7','0\   8','0\   9','2\  10', $
                                ;            '1\Image2','0\by 1 ','0\   2 ','0\   3 ','0\   4 ', $
                                ;            '0\   5 ','0\   6','0\   7','0\   8','0\   9','0\  10']
                                ;viewall = cw_pdmenu(base1, select2)
d1208 1
a1208 1
   widget_control, base, /realize, xoffset=60, yoffset=0
@


1.59
log
@add Save Window
@
text
@d609 1
a609 1
            text = cw_field(savefile, title='Filename: ', value=fname, $
d1090 1
a1090 1
   select11 = ['1\Save Window','0\Image 1','0\Image 2','0\Image 3']
@


1.58
log
@comment out size of lut
@
text
@d583 1
a583 1
            widget_control, savefile, /realize
d603 30
d1090 3
d1156 1
@


1.57
log
@check that loglun is not 0
@
text
@d971 1
a971 1
                  print,"lut ",!d.n_colors
@


1.56
log
@additional checks on loglun before closing
@
text
@d617 1
a617 1
         IF ((size(loglun))[1] NE 0) THEN BEGIN
@


1.55
log
@add quick colors to main menu
@
text
@d617 8
a624 6
         status = FSTAT(loglun)
         IF (loglun GT 0) THEN close, loglun
         IF (status.size EQ 0) THEN BEGIN
            command = 'rm ' + status.name
            spawn, command
         ENDIF ELSE print,'Statistics saved in ',status.name
@


1.54
log
@add erase to vidi_edit
@
text
@d234 3
a236 3
         	IF (strlen(uv.img[i].fname) GT 0) THEN fname = uv.img[i].fname $
         	ELSE IF (strlen(uv.img[0].fname) GT 0) THEN fname = uv.img[0].fname $
         	ELSE IF (strlen(uv.img[1].fname) GT 0) THEN fname = uv.img[1].fname
d238 1
a238 1
         	IF (strlen(uv.img[0].fname) GT 0) THEN fname = uv.img[0].fname 
d240 1
a240 1
         	IF (strlen(uv.img[1].fname) GT 0) THEN fname = uv.img[1].fname
d246 6
a251 6
			IF (l2 GT 0) THEN BEGIN
            	str1 = string(replicate(32b,(l2-l1-2)))
            	str1 = '*'+str1
            	strput,fname,str1,l1+1
            	fname = strcompress(fname, /remove_all)
			ENDIF ELSE fname = '*'
d268 1
a268 1
            IF (orient EQ 0) THEN BEGIN 	; keep same plane if in range
d301 1
a301 1
            IF (orient EQ 0) THEN BEGIN 	; keep same plane if in range
d334 1
a334 1
            IF (orient EQ 0) THEN BEGIN 	; keep same plane if in range
d639 6
a644 6
					IF (uv.img[i].p GT uv.img[i].fp) THEN BEGIN
						uv.img[i].p = uv.img[i].p - 1 
					ENDIF ELSE IF (uv.img[i].f  GT uv.img[i].ff) THEN BEGIN
						uv.img[i].f = uv.img[i].f - 1 
						uv.img[i].p = uv.img[i].lp
               		ENDIF
d677 6
a682 6
					IF (uv.img[i].p LT uv.img[i].lp) THEN BEGIN
						uv.img[i].p = uv.img[i].p + 1 
					ENDIF ELSE IF (uv.img[i].f  LT uv.img[i].lf) THEN BEGIN
						uv.img[i].f = uv.img[i].f + 1 
						uv.img[i].p = uv.img[i].fp
               		ENDIF
d761 54
d883 6
a888 6
      			FOR k= 0, 1 DO BEGIN
         			IF (dsp[k].set) THEN BEGIN 
               			IF (uv.img[k].f GT uv.img[k].lf) THEN uv.img[k].f = uv.img[k].lf
               			IF (uv.img[k].f LT uv.img[k].ff) THEN uv.img[k].f = uv.img[k].ff
					ENDIF
				ENDFOR
d947 1
a947 1
                
d969 1
d1021 6
a1026 6
   ;select2 =  ['1\ViewAll', $
   ;            '1\Image1','0\by 1 ','0\   2 ','0\   3 ','0\   4 ', $
   ;            '0\   5 ','0\   6','0\   7','0\   8','0\   9','2\  10', $
   ;            '1\Image2','0\by 1 ','0\   2 ','0\   3 ','0\   4 ', $
   ;            '0\   5 ','0\   6','0\   7','0\   8','0\   9','0\  10']
   ;viewall = cw_pdmenu(base1, select2)
d1033 1
a1033 1
   			'0\ 9 ', '0\ 10 ', '0\ 11 ', '0\ 12 ', '0\ 13 ', '0\ 14 ', '0\ 15 ', '0\ 16 ']
d1067 1
a1067 1
      
d1083 1
a1083 1
      /ROW, /EXCLUSIVE, set_value=default_path)
d1087 1
a1087 1
      /ROW, /NONEXCLUSIVE, set_value=atlas)
d1090 5
d1128 2
@


1.53
log
@fix mid
@
text
@d1056 2
a1057 1
          rslab    : 0,		$ ; number of planes above&below to replace
@


1.52
log
@fix Middle
@
text
@d657 1
a657 1
         FOR i=0, nimg DO uv.img[i].p = (lp - fp + 1)/2
@


1.51
log
@add middle button
@
text
@d657 1
a657 5
         CASE orient OF
            0:  FOR i=0, nimg DO uv.img[i].p = (uv.img[i].dim[2] + 1)/2
            1:  FOR i=0, nimg DO uv.img[i].p = (uv.img[i].dim[0] + 1)/2
            2:  FOR i=0, nimg DO uv.img[i].p = (uv.img[i].dim[1] + 1)/2
         ENDCASE
@


1.50
log
@entering filename will reset number of planes
@
text
@d656 12
d1029 1
d1066 1
@


1.49
log
@under Get Files, last entry is now "All Frames, All Planes"
@
text
@d289 2
d322 2
@


1.48
log
@create a log file for statistics
@
text
@d219 1
a219 1
            5: BEGIN            ; All Frames, Select Planes
d223 2
a224 14
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='First Plane: ', value=uv.img[i].ff, $
                               xsize=4, /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize, xoffset=xloc2, yoffset=yloc2
               ev = WIDGET_EVENT(planeselect)
               widget_control, planeselect, /DESTROY
               uv.img[i].fp = ev.value
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='Last Plane: ', value=uv.img[i].ff, $
                               xsize=4, /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize, xoffset=xloc2, yoffset=yloc2
               ev = WIDGET_EVENT(planeselect)
               widget_control, planeselect, /DESTROY
               uv.img[i].lp = ev.value
d227 1
a628 1
            
d633 13
a658 1
            
d663 13
a685 1
            
a686 1
            
d693 1
a693 1
                  p = loc-(uv.img[i].f*planes)
d948 1
a948 1
               '0\All Frames, One Plane',  '2\All Frames, Select Planes', $
d951 1
a951 1
               '0\All Frames, One Plane',  '0\All Frames, Select Planes']
@


1.47
log
@add Segment Image 2 in 3, which permits adding seed pixels in the superimposed image
@
text
@d624 6
d922 9
@


1.46
log
@permit vois on non-square pixels
@
text
@d959 1
a959 1
   select9 = ['1\Segmentation','0\Image 1','0\Image 2']
@


1.45
log
@add MTT
@
text
@a406 5
         ENDIF ELSE IF (uv.img[inum].pdim[0] NE uv.img[inum].pdim[1]) THEN BEGIN
 			str1 = strtrim(string(uv.img[inum].pdim[0]),2)
 			str2 = strtrim(string(uv.img[inum].pdim[1]),2)
            msg = 'VOIs require square voxels.  Current size is:  '+str1+' x '+str2
            widget_control, uv.wid.msg, set_value=msg
@


1.44
log
@set plane after return from vidi_peaks
@
text
@d449 1
a449 1
         IF (ev.value LT 8) THEN BEGIN
d454 1
a454 1
            rtype = ev.value-9
d471 1
a471 1
            IF (rtype EQ 3 OR rtype EQ 4) THEN BEGIN ; Oxygen models require CBF image
d483 7
a489 2
                  l1 = rstrpos(fname,'oo')
                  IF (l1 GT 0) THEN strput,fname,'ho',l1
a508 1
                  widget_control, uv.wid.fname[i], set_value=uv.cbf[i].fname
a551 1
                  widget_control, uv.wid.fname[i], set_value=uv.cbv[i].fname
d956 3
a958 3
   select7 =  ['1\Processing', '1\Image 1', '0\None', '0\CBF', '0\CBV', '0\OEF', '0\CMRO2', $
               '2\CMRGlu', '1\Image 2', '0\None', '0\CBF', '0\CBV', '0\OEF', '0\CMRO2', $
               '0\CMRGlu']
@


1.43
log
@*** empty log message ***
@
text
@d619 1
@


1.42
log
@*** empty log message ***
@
text
@d408 2
a409 2
			str1 = strtrim(string(uv.img[inum].pdim[0]),2)
			str2 = strtrim(string(uv.img[inum].pdim[1]),2)
@


1.41
log
@add inside/outside region option to vidi_edit and rmode to wid
@
text
@d1017 2
a1018 1
          rplanes  : 0,		$ ; planes to replace
@


1.40
log
@frame in fmode=1
@
text
@d1018 1
@


1.39
log
@change parameters to putinterfile
@
text
@d164 1
a164 1
               WIDGET_CONTROL, planeselect, /DESTROY
d180 1
a180 1
               WIDGET_CONTROL, planeselect, /DESTROY
d188 1
a188 1
               WIDGET_CONTROL, planeselect, /DESTROY
d195 1
a195 1
               WIDGET_CONTROL, planeselect, /DESTROY
d211 1
a211 1
               WIDGET_CONTROL, planeselect, /DESTROY
d228 1
a228 1
               WIDGET_CONTROL, planeselect, /DESTROY
d235 1
a235 1
               WIDGET_CONTROL, planeselect, /DESTROY
d594 1
a594 1
            WIDGET_CONTROL, savefile, /DESTROY
d817 1
a817 1
               widget_control, uv.wid.slider, set_value=f
@


1.38
log
@*** empty log message ***
@
text
@d602 1
a602 1
               stat = putinterfile(uv.img[i], fname, type(0), msg)
@


1.37
log
@fix bug in reading different frames of multiframe images
@
text
@d801 1
a801 1
      			FOR k= 0, nwin DO BEGIN
@


1.36
log
@lp bug
@
text
@d759 2
a760 2
            ff = uv.img[0].ff > uv.img[1].ff
            lf = uv.img[0].lf <  uv.img[1].lf
a799 2
               IF (uv.img[i].f GT uv.img[i].lf) THEN uv.img[i].f = uv.img[i].lf
               IF (uv.img[i].f LT uv.img[i].ff) THEN uv.img[i].f = uv.img[i].ff
d801 6
@


1.35
log
@change default fname
@
text
@d650 1
a650 1
               FOR i=0, nimg DO IF (uv.img[i].p LT uv.img[i].lp) THEN uv.img[i].p = uv.img[i].p+1
d667 1
a667 1
            0: FOR i=0, nimg DO IF (slice LE uv.img[i].lp) THEN uv.img[i].p = slice
@


1.34
log
@fix interfile name bug
permit simultaneous display of different frames of dynamic images
@
text
@d263 1
a263 1
         ENDIF ELSE fname = '*.img'
@


1.33
log
@set img.f
@
text
@d263 1
a263 1
         ENDIF ELSE fname = '*'
a629 2
         p = uv.img[0].p
         f = uv.img[0].f
d631 4
a634 5
            0: IF (p GT fp) THEN BEGIN
               p = p-1
               FOR i=0, nimg DO uv.img[i].p = p
               widget_control, uv.wid.slider, set_value=p
            ENDIF 
d636 4
a639 5
            1: IF (f GT ff) THEN BEGIN
               f = f-1
               FOR i=0, nimg DO uv.img[i].f = f
               widget_control, uv.wid.slider, set_value=f
            ENDIF  
a647 1
         f = uv.img[0].f
d649 4
a652 5
            0: IF (p LT lp) THEN BEGIN
               p = p+1
               FOR i=0, nimg DO uv.img[i].p = p
               widget_control, uv.wid.slider, set_value=p
            ENDIF 
d654 4
a657 5
            1: IF (f LT lf) THEN BEGIN
               f = f+1
               FOR i=0, nimg DO uv.img[i].f = f
               widget_control, uv.wid.slider, set_value=f
            ENDIF 
d667 1
a667 2
            0: IF (slice LE lp) THEN FOR i=0, nimg DO uv.img[i].p = slice $
            ELSE widget_control, uv.wid.slider, set_value=lp
d669 1
a669 2
            1: IF (slice LE lf) THEN FOR i=0, nimg DO uv.img[i].f = slice $
            ELSE widget_control, uv.wid.slider, set_value=lf
d672 2
a673 2
               planes = lp-fp+1
               frames = lf-ff+1
d677 3
a679 3
                  p = loc-(f*planes)
                  uv.img[i].f = ff + f
                  uv.img[i].p = fp + p
d746 2
a747 2
      
      CASE set OF 
d757 1
a757 1
         ENDCASE 
d762 1
a762 1
         ENDCASE 
d765 1
a765 1
      
d767 1
a767 1
         0: BEGIN 
d777 2
a778 2
            ENDIF 
         ENDCASE 
d783 1
a783 1
         ENDCASE 
d789 2
a790 2
      ENDCASE 
      
d800 2
a801 2
               IF (uv.img[i].f GT lf) THEN uv.img[i].f = lf
               IF (uv.img[i].f LT ff) THEN uv.img[i].f = ff
d810 4
a813 4
               IF (uv.img[i].f GT lf) THEN FOR k=0,1 DO uv.img[k].f = lf
               IF (uv.img[i].f LT ff) THEN FOR k=0,1 DO uv.img[k].f = ff
               uv.img[i].p = fp
               widget_control, uv.wid.slider, set_value=uv.img[i].f
@


1.32
log
@specify xsize of slider
@
text
@d809 2
@


1.31
log
@*** empty log message ***
@
text
@d976 2
a977 2
   fname[0] = cw_field(base2a, title='Image 1', value='', xsize=90, /RETURN_EVENTS)
   fname[1] = cw_field(base2a, title='Image 2', value='', xsize=90, /RETURN_EVENTS)
d985 1
a985 1
   slider = widget_slider(base, value=slice, min=1, max=47)
@


1.30
log
@do not call defvoi if voxels are not square
@
text
@d562 1
a562 1
      ENDELSE
@


1.29
log
@conditional erosion/dilation in vidi_morph
edit several slices at once in vidi_edit
save a conditional image in vidi_segment
@
text
@d403 1
d407 5
a412 1
            inum = ev.value-1
@


1.28
log
@prevent error if display widget has been closed
@
text
@d958 1
a958 1
   select9 = ['1\Threshold','0\Image 1','0\Image 2']
d1015 1
@


1.27
log
@permit file entry from character field
@
text
@a295 5
         ;uv.img[i].ff = 1
         ;uv.img[i].lf = 1
         ;uv.img[i].fp = 1
         ;uv.img[i].lp = 512
         ;fmode = 0
a326 5
         ;uv.img[i].ff = 1
         ;uv.img[i].lf = 1
         ;uv.img[i].fp = 1
         ;uv.img[i].lp = 512
         ;fmode = 0
d861 3
d1054 8
a1061 2
   FOR i= 0, 1 DO uv.img[i].f = 1
   FOR i= 0, 1 DO uv.img[i].p = 1
@


1.26
log
@add vidi_segment, vidi_outline, vidi_viewer, vidi_viewer_display
vidi_edit in all 3 orientations
@
text
@d292 35
d329 36
a367 26
      ;uv.wid.viewall: BEGIN
      ;   IF (dsp[0].nc EQ 0) THEN BEGIN
      ;      nc = (!d.n_colors-1)/2
      ;      dsp[0].bot = 0
      ;      dsp[0].nc = nc
      ;      dsp[1].bot = nc
      ;      dsp[1].nc = nc
      ;      dsp[2].nc = nc
      ;      loadct, 0, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
      ;         file="/usr/local/npg/idl/color_tables/videen.tbl"
      ;      loadct, 36, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
      ;         file="/usr/local/npg/idl/color_tables/videen.tbl"
      ;   ENDIF
      ;   IF (ev.value LT 12) THEN BEGIN
      ;      i = 0
      ;      vinc = ev.value-1
      ;   ENDIF ELSE BEGIN
      ;      i = 1
      ;      vinc = ev.value-12
      ;   ENDELSE
      ;   IF (strlen(uv.img[i].fname) EQ 0) THEN $
      ;      widget_control, uv.wid.msg, set_value='NO IMAGE file has been entered' $
      ;   ELSE VIDI_VIEWALL, uv, i, vinc
      ;ENDCASE
      
      ;; -------------------------------------------------------------------------------
a571 4
         ;IF (orient GT 0) THEN BEGIN
         ;   msg = 'Image Edit requires TRANSVERSE slices'
         ;   widget_control, uv.wid.msg, set_value=msg
         ;ENDIF ELSE
d977 3
a979 3
   name = lonarr(2)
   name[0] = cw_field(base2a, title='Image 1', value='', xsize=90)
   name[1] = cw_field(base2a, title='Image 2', value='', xsize=90)
d1031 1
a1031 1
          fname    : name,	$ ; filename entry field id
@


1.25
log
@added atlas tracings
@
text
@d127 2
d162 1
a162 1
               widget_control, planeselect, /realize
d178 1
a178 1
               widget_control, planeselect, /realize
d186 1
a186 1
               widget_control, planeselect, /realize
d193 1
a193 1
               widget_control, planeselect, /realize
d209 1
a209 1
               widget_control, planeselect, /realize
d226 1
a226 1
               widget_control, planeselect, /realize
d233 1
a233 1
               widget_control, planeselect, /realize
d294 27
a320 24
      uv.wid.viewall: BEGIN
         IF (dsp[0].nc EQ 0) THEN BEGIN
            nc = (!d.n_colors-1)/2
            dsp[0].bot = 0
            dsp[0].nc = nc
            dsp[1].bot = nc
            dsp[1].nc = nc
            dsp[2].nc = nc
            loadct, 0, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            loadct, 36, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
         ENDIF
         IF (ev.value LT 12) THEN BEGIN
            i = 0
            vinc = ev.value-1
         ENDIF ELSE BEGIN
            i = 1
            vinc = ev.value-12
         ENDELSE
         IF (strlen(uv.img[i].fname) EQ 0) THEN $
            widget_control, uv.wid.msg, set_value='NO IMAGE file has been entered' $
         ELSE VIDI_VIEWALL, uv, i, vinc
      ENDCASE
d527 5
a531 4
         IF (orient GT 0) THEN BEGIN
            msg = 'Image Edit requires TRANSVERSE slices'
            widget_control, uv.wid.msg, set_value=msg
         ENDIF ELSE IF (uv.wid.win[i] GT 0) THEN BEGIN  
d538 10
d893 7
a899 6
   select2 =  ['1\ViewAll', $
               '1\Image1','0\by 1 ','0\   2 ','0\   3 ','0\   4 ', $
               '0\   5 ','0\   6','0\   7','0\   8','0\   9','2\  10', $
               '1\Image2','0\by 1 ','0\   2 ','0\   3 ','0\   4 ', $
               '0\   5 ','0\   6','0\   7','0\   8','0\   9','0\  10']
   viewall = cw_pdmenu(base1, select2)
d924 2
a925 2
   select9 = ['1\Save','0\Image 1','0\Image 2']
   save = cw_pdmenu(base1, select9)
d927 3
d937 2
a938 2
   name[0] = cw_field(base2a, title='Image 1', value='', xsize=75)
   name[1] = cw_field(base2a, title='Image 2', value='', xsize=75)
d969 1
a969 1
          viewall  : viewall,	$ ; display all slices button id
d981 1
d1009 8
d1025 1
a1025 1
   widget_control, base, /realize, xoffset=130, yoffset=0
@


1.24
log
@fix VIDIDISP3_EVENT to reference img[0]
@
text
@d666 15
d682 8
d850 4
a853 1
      IF (redisplay) THEN VIDI_DISPLAY, uv
d933 8
a940 1
   defpath = cw_bgroup(base2f, ['Previous','Image 1','Image 2   (Default Path)'],/ROW, /EXCLUSIVE, set_value=default_path)
d966 2
@


1.23
log
@fix cursor position for coronal and sagittal
@
text
@d86 2
a87 2
         IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN
            fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
d89 3
a91 3
            y = uv.img[i].dim[1] - y + 1
         ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN
            fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
d93 1
a93 1
            y = uv.img[i].dim[1] - y + 1
d96 1
a96 1
            y = uv.img[i].dim[1] - y
d101 1
a101 1
         fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[0])
d103 1
a103 1
         y = uv.img[i].dim[2] - y + 1
d107 1
a107 1
         fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[1])
d109 1
a109 1
         y = uv.img[i].dim[2] - y + 1
@


1.22
log
@*** empty log message ***
@
text
@d10 12
a21 2
         y = ev.y / dsp[i].zoom
         y = uv.img[i].dim[1] - y
d26 2
a27 2
         y = ev.y / (fact * dsp[i].zoom)
         y = uv.img[i].dim[2] - y
d32 2
a33 2
         y = ev.y / (fact * dsp[i].zoom)
         y = uv.img[i].dim[2] - y
d48 12
a59 2
         y = ev.y / dsp[i].zoom
         y = uv.img[i].dim[1] - y
d64 2
a65 2
         y = ev.y / (fact * dsp[i].zoom)
         y = uv.img[i].dim[2] - y
d70 2
a71 2
         y = ev.y / (fact * dsp[i].zoom)
         y = uv.img[i].dim[2] - y
d86 12
a97 2
         y = ev.y / dsp[i].zoom
         y = uv.img[0].dim[1] - y
d101 3
a103 3
         fact = (uv.img[0].pdim[2])/(uv.img[0].pdim[0])
         y = ev.y /(fact * dsp[i].zoom)
         y = uv.img[0].dim[2] - y
d107 3
a109 3
         fact = (uv.img[0].pdim[2])/(uv.img[0].pdim[1])
         y = ev.y / (fact * dsp[i].zoom)
         y = uv.img[0].dim[2] - y
@


1.21
log
@*** empty log message ***
@
text
@d121 1
a121 1
               uv.img[i].lp = 256
d136 1
a136 1
               uv.img[i].lp = 256
d173 1
d400 1
a400 1
               uv.cbf[i].lp = 256
d444 1
a444 1
               uv.cbv[i].lp = 256
@


1.20
log
@set full filename after save
@
text
@d527 11
d852 2
d898 1
@


1.19
log
@*** empty log message ***
@
text
@d519 2
a520 1
               stat = putinterfile(uv.img[i], fname, type(0),msg)
@


1.18
log
@revise getinterfile and putinterfile
@
text
@a520 1
               uv.img[i].fname = fname
@


1.17
log
@change Path label
@
text
@d518 3
a521 6
               extra = strarr(2)
               extra[0] = 'conversion program := vidi'
               extra[1] = 'conversion date    := ' +systime(0)
               msg = 'File saved '
               stat = putinterfile(uv.img[i],type(0),extra,msg)
               widget_control, uv.wid.msg, set_value=msg+fname
@


1.16
log
@add default_path
zoom extended to 16x
@
text
@d866 1
a866 1
   defpath = cw_bgroup(base2f, ['Either Path','Image 1','Image 2'],/ROW, /EXCLUSIVE, set_value=default_path)
@


1.15
log
@check fname for no extension
@
text
@d211 10
a220 3
         IF (strlen(uv.img[i].fname) GT 0) THEN fname = uv.img[i].fname $
         ELSE IF (strlen(uv.img[0].fname) GT 0) THEN fname = uv.img[0].fname $
         ELSE IF (strlen(uv.img[1].fname) GT 0) THEN fname = uv.img[1].fname
d619 9
d822 2
a823 1
   select4 = ['1\Magnify','0\ 1 ','0\ 2 ','0\ 3 ','0\ 4 ','0\ 5 ','0\ 6 ','0\ 7 ','0\ 8 ']
d866 1
a866 1

d890 1
@


1.14
log
@add f to up and down
@
text
@d217 6
a222 4
            str1 = string(replicate(32b,(l2-l1-2)))
            str1 = '*'+str1
            strput,fname,str1,l1+1
            fname = strcompress(fname, /remove_all)
@


1.13
log
@keep plane same when sagittal or coronal
@
text
@d531 1
d552 1
@


1.12
log
@enable edit image 2 in window 3
@
text
@d237 4
a240 2
            uv.img[i].p = tmp > uv.img[i].fp ; keep same plane if in range
            uv.img[i].p = tmp < uv.img[i].lp
@


1.11
log
@add selective replacement to vidi_edit
@
text
@d816 1
a816 1
   select8 = ['1\Edit','0\Image 1','0\Image 2']
@


1.10
log
@change default fname
@
text
@d862 2
@


1.9
log
@add up/down to defvoi and edit
add refresh to defvoi and edit
@
text
@d221 1
a221 1
         ENDIF ELSE fname = '*img'
@


1.8
log
@*** empty log message ***
@
text
@d221 1
a221 1
         ENDIF ELSE fname = '*'
d324 28
a351 20
         ENDIF ELSE CASE ev.value OF
            1: BEGIN
               IF (uv.wid.win[0] GT 0) THEN BEGIN  
                  tempthresh = uv.wid.vthresh
                  VIDI_DEFVOI, uv.wid.voi, uv.img[0], uv.cbf[0], uv.cbv[0], otemp, tempthresh, $
                     uv.wid.win[0], uv.wid.base, zoom=dsp[0].zoom
                  uv.wid.vthresh = tempthresh
                  setuv = 1
               ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for VOI'
            ENDCASE
            2: BEGIN
               IF (uv.wid.win[1] GT 0) THEN BEGIN  
                  tempthresh = uv.wid.vthresh
                  VIDI_DEFVOI, uv.wid.voi, uv.img[1], uv.cbf[1], uv.cbv[1], otemp, tempthresh, $
                     uv.wid.win[1], uv.wid.base, zoom=dsp[1].zoom
                  uv.wid.vthresh = tempthresh
                  setuv = 1
               ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for VOI'
            ENDCASE 
         ENDCASE
d856 1
@


1.7
log
@*** empty log message ***
@
text
@d375 1
a375 1
         
d419 1
a419 1
         
d480 1
a480 1
            
d507 1
d511 1
a511 1
            
d519 40
d830 6
a835 1
   display = cw_bgroup(base, ['Image 1','Image 2','Composite (2 over 1)'], /NONEXCLUSIVE, /ROW)
d837 1
d854 2
@


1.6
log
@add edit, save, and options to viewall
@
text
@d221 1
a221 1
         ENDIF ELSE fname = '*img'
d271 1
a271 1
            widget_control, uv.wid.msg, set_value='No image file has been entered' $
d282 1
a282 1
                  msg = 'Transverse orientation only for multiple frames'
d289 1
a289 1
                  msg = 'Transverse orientation only for multiple frames'
d308 1
a308 1
            1: IF (dsp[0].nc EQ 0) THEN widget_control, uv.wid.msg, set_value='No image displayed' $
d312 1
a312 1
            2: IF (dsp[1].nc EQ 0) THEN widget_control, uv.wid.msg, set_value='No image displayed' $
d321 4
a324 1
         CASE ev.value OF
d332 1
a332 1
               ENDIF ELSE widget_control, uv.wid.msg, set_value='No image displayed for VOI'
d341 1
a341 1
               ENDIF ELSE widget_control, uv.wid.msg, set_value='No image displayed for VOI'
d394 1
a394 1
                  widget_control, uv.wid.msg, set_value='No file entered'
d438 1
a438 1
                  widget_control, uv.wid.msg, set_value='No file entered'
d473 1
a473 1
            msg = 'Image edit currently requires transverse slices'
d478 1
a478 1
         ENDIF ELSE widget_control, uv.wid.msg, set_value='No image displayed for Edit'
d496 2
a497 2
               msg = 'No filename entered'
               result=dialog_message(msg, title='Image was not saved!', /error)
d506 1
d508 1
a508 1
         ENDIF ELSE widget_control, uv.wid.msg, set_value='No image to save'
@


1.5
log
@modify vidi_defvoi
change image screen position to y=340
@
text
@d221 1
a221 1
         ENDIF ELSE fname = '*v'
d263 10
a272 20
         
         CASE ev.value OF
            'Image1': BEGIN
               IF (strlen(uv.img[0].fname) EQ 0) THEN $
                  widget_control, uv.wid.msg, set_value='No image file has been entered' $
               ELSE VIDI_VIEWALL, uv, 0
            ENDCASE
            
            'Image2': BEGIN
               IF (strlen(uv.img[1].fname) EQ 0) THEN $
                  widget_control, uv.wid.msg, set_value='No image file has been entered' $
               ELSE VIDI_VIEWALL, uv, 1
            ENDCASE
            
            'Combined': BEGIN
               IF ((strlen(uv.img[0].fname) EQ 0) OR (strlen(uv.img[1].fname) EQ 0)) THEN $
                  widget_control, uv.wid.msg, set_value='Two image files must be entered' $
               ELSE VIDI_VIEWALL, uv, 2
            ENDCASE 
         ENDCASE
d464 1
a464 1
      ENDELSE 
d467 41
d737 6
a742 2
   select2 =  ['1\ViewAll','0\Image1','0\Image2'] ; ,'0\Combined']
   viewall = cw_pdmenu(base1, select2, /RETURN_NAME)
d763 6
d774 2
a775 2
   name[0] = cw_field(base2a, title='Image 1', value='', xsize=60)
   name[1] = cw_field(base2a, title='Image 2', value='', xsize=60)
d800 3
@


1.4
log
@add metabolic processing to vois
maintain same slice when loading new images
@
text
@d653 1
a653 1
               IF (yloc GT 380) THEN yloc = 380
@


1.3
log
@add threshold VOI option to vidi_defvoi
@
text
@d235 1
d237 2
d246 1
d335 1
a335 1
                  VIDI_DEFVOI, uv.wid.voi, uv.img[0], otemp, tempthresh, $
d344 1
a344 1
                  VIDI_DEFVOI, uv.wid.voi, uv.img[1], otemp, tempthresh, $
d529 1
@


1.2
log
@add CMRGlu
@
text
@d330 2
a331 1
                  VIDI_DEFVOI, uv.wid.voi, uv.img[0], otemp, $
d333 1
d339 2
a340 1
                  VIDI_DEFVOI, uv.wid.voi, uv.img[1], otemp, $
d342 1
d648 1
a648 1
               IF (yloc GT 310) THEN yloc = 310
d761 1
@


1.1
log
@Initial revision
@
text
@d3 1
d31 1
d59 1
d87 1
d353 1
a353 1
         IF (ev.value LT 7) THEN BEGIN
d358 1
a358 1
            rtype = ev.value-8
d681 1
d714 3
a716 2
   select7 =  ['1\Processing', '1\Image 1', '0\None', '0\CBF', '0\CBV', '0\OEF', '2\CMRO2', $
               '1\Image 2', '0\None', '0\CBF', '0\CBV', '0\OEF', '0\CMRO2']
@
