head	2.7;
access;
symbols;
locks; strict;
comment	@# @;


2.7
date	2010.05.11.16.18.50;	author tom;	state Exp;
branches;
next	2.6;

2.6
date	2009.04.29.20.57.24;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	2009.04.03.15.17.03;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2007.05.01.16.29.06;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2007.05.01.16.27.19;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2005.06.23.20.57.03;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2005.04.12.15.32.20;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.03.16.33.49;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	2004.02.03.16.31.10;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.10.15.20.37;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.06.20.21.47;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.17.19.46.48;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.17.14.51.56;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.01.14.46.29;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.10.19.59.37;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.07.14.20.42;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.27.19.03.44;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.18.20.51.03;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.01.18.58.46;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	98.05.22.17.36.27;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.04.29.17.19.28;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.01.30.20.33.12;	author tom;	state Exp;
branches;
next	;


desc
@@


2.7
log
@fix minstr scale for negative fractions
@
text
@FUNCTION VIDI_DISPLAY_SCALE, image, type, i, xsize, ysize, sample, stype, mini, maxi
   COMMON VIDI
   
   IF (dsp[i].type EQ 1) THEN BEGIN ; Manual scaling
      mini = dsp[i].min
      maxi = dsp[i].max
   ENDIF ELSE BEGIN             ; Auto scaling
      IF (dsp[i].range EQ 0) THEN BEGIN
         mini = 0
         maxi = max(image)
      ENDIF ELSE IF (dsp[i].range EQ 1) THEN BEGIN
         mini = 0
         maxi = -min(image)
      ENDIF ELSE BEGIN
         tmp1 = max(image, min=tmp2)
         maxi = max([abs(tmp1), abs(tmp2)])
         mini = -maxi 
      ENDELSE
   ENDELSE
   dsp[i].amin = mini
   dsp[i].amax = maxi
   nc = dsp[i].nc
   IF (stype EQ 0) THEN BEGIN
      IF (dsp[i].range EQ 1) THEN $
         temp1 = bytscl(rebin(-(image), xsize, ysize, SAMPLE=sample), $
                        MIN=mini, MAX=maxi, TOP=(nc-1)) $
      ELSE temp1 = bytscl(rebin(image, xsize, ysize, SAMPLE=sample), $
                          MIN=mini, MAX=maxi, TOP=(nc-1))
   ENDIF ELSE BEGIN 
      IF (dsp[i].range EQ 1) THEN $
         temp1 = bytscl(congrid(-(image), xsize, ysize, /INTERP), $
                        MIN=mini, MAX=maxi, TOP=(nc-1)) $
      ELSE temp1 = bytscl(congrid(image, xsize, ysize, /INTERP), $
                          MIN=mini, MAX=maxi, TOP=(nc-1))
   ENDELSE
   RETURN, temp1
END
      
PRO VIDI_DISPLAY, uv, SAMPLE=sample
   ;; Scale and display image i
   ;; uv = the info structure for this display
   ;; sample = use nearest neighbor sampling for rebin
   COMMON IMAGE_UTILS
   COMMON VIDI
   
   IF (NOT (keyword_set(sample))) THEN SAMPLE=0
   nodata = 1

   MAI = [10,11,11,12,12,13,13,14,14,15,15,16,17,18,20,22,23,24,25,26,27,28,29,30, $
          31,32,33,34,35,36,37,38,39,40,41,42,42,43,44,45,46,47,48,49]

   FOR i= 0, 1 DO BEGIN
      proc = uv.img[i].proc
      IF (dsp[i].set) THEN BEGIN 
         IF (uv.img[i].data NE ptr_new()) THEN BEGIN
            nodata = 0
            slice = uv.img[i].p - uv.img[i].fp
            frame = uv.img[i].f - uv.img[i].ff
            CASE orient OF
               0: BEGIN
                  x0 = 0
                  y0 = 1
                  image = reform((*uv.img[i].data)[*,*,slice,frame])
               END
               1: BEGIN
                  x0 = 0
                  y0 = 2
                  image = reform((*uv.img[i].data)[*,slice,*,frame])
               END
               2: BEGIN
                  x0 = 1
                  y0 = 2
                  image = reform((*uv.img[i].data)[slice,*,*,frame])
               END
            ENDCASE
            zoom = dsp[i].zoom
            xsize = uv.img[i].dim[x0] * zoom
            ysize = uv.img[i].dim[y0] * zoom
            stype = 1
            fact = 1
            IF (uv.img[i].pdim[y0] GT uv.img[i].pdim[x0]) THEN BEGIN 
               fact = (uv.img[i].pdim[y0])/(uv.img[i].pdim[x0])
               ysize = ROUND(fact * uv.img[i].dim[y0] * zoom)
            ENDIF ELSE IF (uv.img[i].pdim[x0] GT uv.img[i].pdim[y0]) THEN BEGIN 
               fact = (uv.img[i].pdim[x0])/(uv.img[i].pdim[y0])
               xsize = ROUND(fact * uv.img[i].dim[x0] * zoom)
            ENDIF ELSE stype = 0

            cbf = 0
            cbv = 0
            IF (proc EQ 3 OR proc EQ 4 or proc EQ 6) THEN BEGIN
               CASE orient OF
                  0: cbf = reform((*uv.cbf[i].data)[*,*,slice,frame])
                  1: cbf = reform((*uv.cbf[i].data)[*,slice,*,frame])
                  2: cbf = reform((*uv.cbf[i].data)[slice,*,*,frame])
               ENDCASE
            ENDIF
            IF (proc EQ 3 OR proc EQ 4) THEN BEGIN
               CASE orient OF
                  0: cbv = reform((*uv.cbv[i].data)[*,*,slice,frame])
                  1: cbv = reform((*uv.cbv[i].data)[*,slice,*,frame])
                  2: cbv = reform((*uv.cbv[i].data)[slice,*,*,frame])
               ENDCASE
            ENDIF
            scantime = uv.img[i].len * 1000
            IF (proc EQ 3 OR proc EQ 4) THEN BEGIN
               pix = where (image LE 0, count)
               IF (count GT 0) THEN BEGIN
                  cbf(pix) = 0
                  cbv(pix) = 0
               ENDIF
            ENDIF
            temp1 = VOI_PROCESS (proc, image, uv.img[i].mtype, uv.img[i].mcal, $
                                 cbf, uv.cbf[i].mcal, cbv, uv.cbv[i].mcal, scantime)
            
            temp1 = VIDI_DISPLAY_SCALE (temp1, uv.img[i].itype, i, xsize, ysize, sample, stype, mini, maxi)
            IF (atlas[4] GT 0) THEN BEGIN ; Color Bar
               nc = dsp[i].nc
               wid = ysize/20
               len = ysize*9/10
               off = ysize*1/20
               temp = bytscl(indgen(len), TOP=(nc-1))
               FOR j=1, wid DO FOR k=1, len DO temp1[xsize-j, ysize-k-off] = temp[k-1]
            ENDIF
            widget_control, uv.wid.win[i], draw_xsize=xsize, draw_ysize=ysize
            wset, dsp[i].id
            temp1 = temp1 + dsp[i].bot
            tv, temp1
            IF (atlas[3] AND NOT atlas[i]) THEN BEGIN ; Slice Label with no Atlas
               IF ((rstrpos(uv.img[i].fname,'MaiThalamus') GT 0 OR $
                    rstrpos(uv.img[i].fname,'MaiMicrosections') GT 0) AND orient EQ 1) THEN BEGIN
                  str = strcompress(string(MAI[slice]),/remove_all)
                  xyouts,zoom*20,zoom*280,str,charsize=2*zoom,charthick=2,/device,color=130
               ENDIF ELSE BEGIN
                  str = strcompress(string(slice+1),/remove_all)
                  xyouts,zoom*5,zoom*5,str,charsize=zoom,charthick=2,/device,color=label
               ENDELSE
            ENDIF

            VIDI_ATLAS, uv, i, temp1
            IF (atlas[4] GT 0) THEN BEGIN ; Color Bar
               IF (mini EQ 0) THEN BEGIN
                  minstr = '0'
               ENDIF ELSE IF (abs(mini) GE 10) THEN BEGIN
                  minstr = string(round(mini))
               ENDIF ELSE IF (abs(mini) LT 10 AND abs(mini) GE 0.1) THEN BEGIN
                  minstr = string(format='(F4.1)',mini)
               ENDIF ELSE IF (abs(mini) LT 0.1 AND abs(mini) GE 0.01) THEN BEGIN
                  minstr = string(format='(F5.2)',mini)
               ENDIF ELSE IF (abs(mini) LT 0.01 AND abs(mini) GE 0.001) THEN BEGIN
                  minstr = string(format='(F6.3)',mini)
               ENDIF ELSE BEGIN
                  minstr = string(mini)
               ENDELSE

               IF (maxi EQ 0) THEN BEGIN
                  maxstr = '0'
               ENDIF ELSE IF (abs(maxi) GE 10) THEN BEGIN
                  maxstr = string(round(maxi))
               ENDIF ELSE IF (abs(maxi) LT 10 AND abs(maxi) GE 0.1) THEN BEGIN
                  maxstr = string(format='(F3.1)',maxi)
               ENDIF ELSE IF (abs(maxi) LT 0.1 AND abs(maxi) GE 0.01) THEN BEGIN
                  maxstr = string(format='(F4.2)',maxi)
               ENDIF ELSE IF (abs(maxi) LT 0.01 AND abs(maxi) GE 0.001) THEN BEGIN
                  maxstr = string(format='(F5.3)',maxi)
               ENDIF ELSE BEGIN
                  maxstr = string(maxi)
               ENDELSE

               xloc = xsize-wid-2
               IF (ysize LT 200) THEN BEGIN
                  csiz=1
                  cthk=1
                  yoff=ysize-off*2
               ENDIF ELSE IF (ysize LT 400) THEN BEGIN
                  csiz=2
                  cthk=2
                  yoff=ysize-off*2
               ENDIF ELSE BEGIN
                  csiz=2
                  cthk=2
                  yoff=ysize-off*3/2
               ENDELSE
               wset, dsp[i].id
               xyouts,xloc, off, minstr,alignment=1.0,charsize=csiz,charthick=cthk,color=label,/device
               xyouts,xloc, yoff, maxstr,alignment=1.0,charsize=csiz,charthick=cthk,color=label,/device
            ENDIF
            widget_control,uv.wid.max[i],set_value=dsp[i].amax
         ENDIF 
      ENDIF
   ENDFOR
   
   IF (dsp[2].set) THEN BEGIN
      IF (uv.img[0].data NE ptr_new() AND uv.img[1].data NE ptr_new()) THEN BEGIN
         IF ((uv.img[0].dim[0] NE uv.img[1].dim[0]) OR $
             (uv.img[0].dim[1] NE uv.img[1].dim[1]) OR $
             (uv.img[0].dim[2] NE uv.img[1].dim[2])) THEN BEGIN
            widget_control, uv.wid.msg, set_value='Cannot display composite of different sized images'
         ENDIF ELSE BEGIN 
            nodata = 0
            i = 0
            slice = uv.img[i].p - uv.img[i].fp
            frame = uv.img[i].f - uv.img[i].ff
            CASE orient OF
               0: BEGIN
                  x0 = 0
                  y0 = 1
                  image = reform((*uv.img[i].data)[*,*,slice,frame])
               END
               1: BEGIN
                  x0 = 0
                  y0 = 2
                  image = reform((*uv.img[i].data)[*,slice,*,frame])
               END
               2: BEGIN
                  x0 = 1
                  y0 = 2
                  image = reform((*uv.img[i].data)[slice,*,*,frame])
               END
            ENDCASE
            zoom = dsp[i].zoom
            xsize = uv.img[i].dim[x0] * zoom
            ysize = uv.img[i].dim[y0] * zoom
            stype = 1

            IF (uv.img[i].pdim[y0] GT uv.img[i].pdim[x0]) THEN BEGIN 
               fact = (uv.img[i].pdim[y0])/(uv.img[i].pdim[x0])
               ysize = ROUND(fact * uv.img[i].dim[y0] * zoom)
            ENDIF ELSE IF (uv.img[i].pdim[x0] GT uv.img[i].pdim[y0]) THEN BEGIN 
               fact = (uv.img[i].pdim[x0])/(uv.img[i].pdim[y0])
               xsize = ROUND(fact * uv.img[i].dim[x0] * zoom)
            ENDIF ELSE stype = 0

            widget_control, uv.wid.win[2], draw_xsize=xsize, draw_ysize=ysize
            temp1 = VIDI_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample, stype, mini, maxi)
            IF (atlas[4] GT 0) THEN BEGIN ; Color Bar
               nc = dsp[i].nc
               wid = ysize/20
               len = ysize*9/10
               off = ysize*1/20
               temp = bytscl(indgen(len), TOP=(nc-1))
               FOR j=1, wid DO FOR k=1, len DO temp1[j-1, ysize-k-off] = temp[k-1]
            ENDIF

            i = 1
            CASE orient OF
               0:  image = reform((*uv.img[i].data)[*,*,slice,frame])
               1:  image = reform((*uv.img[i].data)[*,slice,*,frame])
               2:  image = reform((*uv.img[i].data)[slice,*,*,frame])
            ENDCASE
            temp2 = VIDI_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample, stype, mini, maxi)
            IF (atlas[4] GT 0) THEN BEGIN ; Color Bar
               nc = dsp[i].nc
               wid = ysize/20
               len = ysize*9/10
               off = ysize*1/20
               temp = bytscl(indgen(len), TOP=(nc-1))
               FOR j=1, wid DO FOR k=1, len DO temp2[xsize-j, ysize-k-off] = temp[k-1]
            ENDIF
            
            IF (dsp[i].range EQ 2) THEN BEGIN
               uthresh =  (0.5 + (0.005 * dsp[0].cut)) * dsp[1].nc
               lthresh =  (0.5 - (0.005 * dsp[0].cut)) * dsp[1].nc
               idx1 = where((temp2 LT uthresh) AND (temp2 GT lthresh), count1)
               idx2 = where((temp2 GE uthresh) OR (temp2 LE lthresh), count2)
            ENDIF ELSE BEGIN
               thresh =  0.01 * dsp[0].cut * dsp[1].nc
               idx1 = where(temp2 LT thresh, count1)
               idx2 = where(temp2 GE thresh, count2)
            ENDELSE
            IF (count1 GT 0) THEN temp2[idx1] = 0 ; temp = temp1
            IF (count2 GT 0) THEN temp1[idx2] = dsp[0].nc ; temp = nc + temp2
            temp = temp1 + temp2 ; combine
            wset, dsp[2].id
            tv, temp
            IF (atlas[3] AND NOT atlas[2]) THEN BEGIN ; Slice Label with no Atlas
               IF ((rstrpos(uv.img[i].fname,'MaiThalamus') GT 0 OR $
                    rstrpos(uv.img[i].fname,'MaiMicrosections') GT 0) AND orient EQ 1) THEN BEGIN
                  str = strcompress(string(MAI[slice]),/remove_all)
                  xyouts,zoom*20,zoom*280,str,charsize=2*zoom,charthick=2,/device,color=130
               ENDIF ELSE BEGIN
                  str = strcompress(string(slice+1),/remove_all)
                  xyouts,zoom*5,zoom*5,str,charsize=zoom,charthick=2,/device,color=label
               ENDELSE
            ENDIF


            VIDI_ATLAS, uv, 2, temp
            IF (atlas[4] GT 0) THEN BEGIN ; Color Bar
               IF (mini EQ 0) THEN BEGIN
                  minstr = '0'
               ENDIF ELSE IF (abs(mini) GE 10) THEN BEGIN
                  minstr = string(round(mini))
               ENDIF ELSE IF (abs(mini) LT 10 AND abs(mini) GE 0.1) THEN BEGIN
                  minstr = string(format='(F3.1)',mini)
               ENDIF ELSE IF (abs(mini) LT 0.1 AND abs(mini) GE 0.01) THEN BEGIN
                  minstr = string(format='(F4.2)',mini)
               ENDIF ELSE IF (abs(mini) LT 0.01 AND abs(mini) GE 0.001) THEN BEGIN
                  minstr = string(format='(F5.3)',mini)
               ENDIF ELSE BEGIN
                  minstr = string(mini)
               ENDELSE

               IF (maxi EQ 0) THEN BEGIN
                  maxstr = '0'
               ENDIF ELSE IF (abs(maxi) GE 10) THEN BEGIN
                  maxstr = string(round(maxi))
               ENDIF ELSE IF (abs(maxi) LT 10 AND abs(maxi) GE 0.1) THEN BEGIN
                  maxstr = string(format='(F3.1)',maxi)
               ENDIF ELSE IF (abs(maxi) LT 0.1 AND abs(maxi) GE 0.01) THEN BEGIN
                  maxstr = string(format='(F4.2)',maxi)
               ENDIF ELSE IF (abs(maxi) LT 0.01 AND abs(maxi) GE 0.001) THEN BEGIN
                  maxstr = string(format='(F5.3)',maxi)
               ENDIF ELSE BEGIN
                  maxstr = string(maxi)
               ENDELSE

               xloc = xsize-wid-2
               IF (ysize LT 200) THEN BEGIN
                  csiz=1
                  cthk=1
                  yoff=ysize-off*2
               ENDIF ELSE IF (ysize LT 400) THEN BEGIN
                  csiz=2
                  cthk=2
                  yoff=ysize-off*2
               ENDIF ELSE BEGIN
                  csiz=2
                  cthk=2
                  yoff=ysize-off*3/2
               ENDELSE
               wset, dsp[2].id
               xyouts,xloc, off, minstr,alignment=1.0,charsize=csiz,charthick=cthk,color=label,/device
               xyouts,xloc, yoff, maxstr,alignment=1.0,charsize=csiz,charthick=cthk,color=label,/device
            ENDIF
         ENDELSE
      ENDIF 
   ENDIF
   IF (nodata EQ 1) THEN widget_control, uv.wid.msg, set_value='No data'
END
@


2.6
log
@fix sagittal display of overlay
@
text
@d147 1
a147 1
                  minstr = string(format='(F3.1)',mini)
d149 1
a149 1
                  minstr = string(format='(F4.2)',mini)
d151 1
a151 1
                  minstr = string(format='(F5.3)',mini)
@


2.5
log
@add Mai atlas slice number for coronal Mai sections
@
text
@d225 1
d228 2
a229 2
               ysize = fact * uv.img[i].dim[y0] * zoom
            ENDIF ELSE IF (uv.img[i].pdim[0] GT uv.img[i].pdim[y0]) THEN BEGIN 
d231 1
a231 1
               xsize = fact * uv.img[i].dim[x0] * zoom
d233 1
@


2.4
log
@*** empty log message ***
@
text
@d49 3
d130 8
a137 2
               str = strcompress(string(slice+1),/remove_all)
               xyouts,zoom*5,zoom*5,str,charsize=zoom,charthick=2,/device,color=label
d275 8
a282 2
               str = strcompress(string(slice+1),/remove_all)
               xyouts,zoom*5,zoom*5,str,charsize=zoom,charthick=2,/device,color=label
d285 1
@


2.3
log
@*** empty log message ***
@
text
@a125 1
print,i,min(temp1),max(temp1)
@


2.2
log
@*** empty log message ***
@
text
@d126 1
@


2.1
log
@*** empty log message ***
@
text
@d73 3
a75 2
            xsize = uv.img[i].dim[x0] * dsp[i].zoom
            ysize = uv.img[i].dim[y0] * dsp[i].zoom
d80 1
a80 1
               ysize = ROUND(fact * uv.img[i].dim[y0] * dsp[i].zoom)
d83 1
a83 1
               xsize = ROUND(fact * uv.img[i].dim[x0] * dsp[i].zoom)
d126 5
d212 3
a214 2
            xsize = uv.img[i].dim[x0] * dsp[i].zoom
            ysize = uv.img[i].dim[y0] * dsp[i].zoom
d218 1
a218 1
               ysize = fact * uv.img[i].dim[y0] * dsp[i].zoom
d221 1
a221 1
               xsize = fact * uv.img[i].dim[x0] * dsp[i].zoom
d265 5
@


2.0
log
@03 Feb 2004
@
text
@d76 1
d79 2
a80 2
               ysize = fact * uv.img[i].dim[y0] * dsp[i].zoom
            ENDIF ELSE IF (uv.img[i].pdim[0] GT uv.img[i].pdim[y0]) THEN BEGIN 
d82 1
a82 1
               xsize = fact * uv.img[i].dim[x0] * dsp[i].zoom
@


1.14
log
@3 Feb 2004
@
text
@@


1.13
log
@red/green auto centers
@
text
@@


1.12
log
@fix atlas display on 24-bit color
@
text
@d15 3
a17 3
         mini = min(image)
         maxi = max(image)
         IF (-mini GT maxi) THEN maxi = -mini
@


1.11
log
@add colorbar
@
text
@d102 6
a107 6
			   pix = where (image LE 0, count)
			   IF (count GT 0) THEN BEGIN
			      cbf(pix) = 0
			      cbv(pix) = 0
			   ENDIF
			ENDIF
d112 8
a119 8
			IF (atlas[4] GT 0) THEN BEGIN	; Color Bar
   				nc = dsp[i].nc
   				wid = ysize/20
   				len = ysize*9/10
   				off = ysize*1/20
   				temp = bytscl(indgen(len), TOP=(nc-1))
   				FOR j=1, wid DO FOR k=1, len DO temp1[xsize-j, ysize-k-off] = temp[k-1]
			ENDIF
d124 15
a138 14
			IF (atlas[4] GT 0) THEN BEGIN	; Color Bar
				IF (mini EQ 0) THEN BEGIN
					minstr = '0'
				ENDIF ELSE IF (abs(mini) GE 10) THEN BEGIN
					minstr = string(round(mini))
				ENDIF ELSE IF (abs(mini) LT 10 AND abs(mini) GE 0.1) THEN BEGIN
					minstr = string(format='(F3.1)',mini)
				ENDIF ELSE IF (abs(mini) LT 0.1 AND abs(mini) GE 0.01) THEN BEGIN
					minstr = string(format='(F4.2)',mini)
				ENDIF ELSE IF (abs(mini) LT 0.01 AND abs(mini) GE 0.001) THEN BEGIN
					minstr = string(format='(F5.3)',mini)
				ENDIF ELSE BEGIN
					minstr = string(mini)
				ENDELSE
d140 13
a152 13
				IF (maxi EQ 0) THEN BEGIN
					maxstr = '0'
				ENDIF ELSE IF (abs(maxi) GE 10) THEN BEGIN
					maxstr = string(round(maxi))
				ENDIF ELSE IF (abs(maxi) LT 10 AND abs(maxi) GE 0.1) THEN BEGIN
					maxstr = string(format='(F3.1)',maxi)
				ENDIF ELSE IF (abs(maxi) LT 0.1 AND abs(maxi) GE 0.01) THEN BEGIN
					maxstr = string(format='(F4.2)',maxi)
				ENDIF ELSE IF (abs(maxi) LT 0.01 AND abs(maxi) GE 0.001) THEN BEGIN
					maxstr = string(format='(F5.3)',maxi)
				ENDIF ELSE BEGIN
					maxstr = string(maxi)
				ENDELSE
d154 18
a171 17
				xloc = xsize-wid-2
				IF (ysize LT 200) THEN BEGIN
					csiz=1
					cthk=1
					yoff=ysize-off*2
				ENDIF ELSE IF (ysize LT 400) THEN BEGIN
					csiz=2
					cthk=2
					yoff=ysize-off*2
				ENDIF ELSE BEGIN
					csiz=2
					cthk=2
					yoff=ysize-off*3/2
				ENDELSE
				xyouts,xloc, off, minstr,alignment=1.0,charsize=csiz,charthick=cthk,/device
				xyouts,xloc, yoff, maxstr,alignment=1.0,charsize=csiz,charthick=cthk,/device
			ENDIF
d217 8
a224 8
			IF (atlas[4] GT 0) THEN BEGIN	; Color Bar
   				nc = dsp[i].nc
   				wid = ysize/20
   				len = ysize*9/10
   				off = ysize*1/20
   				temp = bytscl(indgen(len), TOP=(nc-1))
   				FOR j=1, wid DO FOR k=1, len DO temp1[j-1, ysize-k-off] = temp[k-1]
			ENDIF
d233 8
a240 8
			IF (atlas[4] GT 0) THEN BEGIN	; Color Bar
   				nc = dsp[i].nc
   				wid = ysize/20
   				len = ysize*9/10
   				off = ysize*1/20
   				temp = bytscl(indgen(len), TOP=(nc-1))
   				FOR j=1, wid DO FOR k=1, len DO temp2[xsize-j, ysize-k-off] = temp[k-1]
			ENDIF
d243 12
a254 12
            	uthresh =  (0.5 + (0.005 * dsp[0].cut)) * dsp[1].nc
            	lthresh =  (0.5 - (0.005 * dsp[0].cut)) * dsp[1].nc
            	idx1 = where((temp2 LT uthresh) AND (temp2 GT lthresh), count1)
            	idx2 = where((temp2 GE uthresh) OR (temp2 LE lthresh), count2)
			ENDIF ELSE BEGIN
            	thresh =  0.01 * dsp[0].cut * dsp[1].nc
            	idx1 = where(temp2 LT thresh, count1)
            	idx2 = where(temp2 GE thresh, count2)
			ENDELSE
            IF (count1 GT 0) THEN temp2[idx1] = 0 			; temp = temp1
            IF (count2 GT 0) THEN temp1[idx2] = dsp[0].nc	; temp = nc + temp2
            temp = temp1 + temp2							; combine
d257 15
a271 14
			IF (atlas[4] GT 0) THEN BEGIN	; Color Bar
				IF (mini EQ 0) THEN BEGIN
					minstr = '0'
				ENDIF ELSE IF (abs(mini) GE 10) THEN BEGIN
					minstr = string(round(mini))
				ENDIF ELSE IF (abs(mini) LT 10 AND abs(mini) GE 0.1) THEN BEGIN
					minstr = string(format='(F3.1)',mini)
				ENDIF ELSE IF (abs(mini) LT 0.1 AND abs(mini) GE 0.01) THEN BEGIN
					minstr = string(format='(F4.2)',mini)
				ENDIF ELSE IF (abs(mini) LT 0.01 AND abs(mini) GE 0.001) THEN BEGIN
					minstr = string(format='(F5.3)',mini)
				ENDIF ELSE BEGIN
					minstr = string(mini)
				ENDELSE
d273 13
a285 13
				IF (maxi EQ 0) THEN BEGIN
					maxstr = '0'
				ENDIF ELSE IF (abs(maxi) GE 10) THEN BEGIN
					maxstr = string(round(maxi))
				ENDIF ELSE IF (abs(maxi) LT 10 AND abs(maxi) GE 0.1) THEN BEGIN
					maxstr = string(format='(F3.1)',maxi)
				ENDIF ELSE IF (abs(maxi) LT 0.1 AND abs(maxi) GE 0.01) THEN BEGIN
					maxstr = string(format='(F4.2)',maxi)
				ENDIF ELSE IF (abs(maxi) LT 0.01 AND abs(maxi) GE 0.001) THEN BEGIN
					maxstr = string(format='(F5.3)',maxi)
				ENDIF ELSE BEGIN
					maxstr = string(maxi)
				ENDELSE
d287 18
a304 17
				xloc = xsize-wid-2
				IF (ysize LT 200) THEN BEGIN
					csiz=1
					cthk=1
					yoff=ysize-off*2
				ENDIF ELSE IF (ysize LT 400) THEN BEGIN
					csiz=2
					cthk=2
					yoff=ysize-off*2
				ENDIF ELSE BEGIN
					csiz=2
					cthk=2
					yoff=ysize-off*3/2
				ENDELSE
				xyouts,xloc, off, minstr,alignment=1.0,charsize=csiz,charthick=cthk,/device
				xyouts,xloc, yoff, maxstr,alignment=1.0,charsize=csiz,charthick=cthk,/device
			ENDIF
@


1.10
log
@mask all 0 voxels for oxygen
@
text
@d1 1
a1 1
FUNCTION VIDI_DISPLAY_SCALE, image, type, i, xsize, ysize, sample, stype
d111 9
a119 2
            temp1 = VIDI_DISPLAY_SCALE (temp1, uv.img[i].itype, i, xsize, ysize, sample, stype)
            temp1 = temp1 + dsp[i].bot
d122 1
d124 46
d214 9
a222 1
            temp1 = VIDI_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample, stype)
d230 9
a238 1
            temp2 = VIDI_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample, stype)
d255 46
@


1.9
log
@add mtype, scantime as parameters passed to voi_process
@
text
@d101 7
@


1.8
log
@show both high and low for composite thresholds
@
text
@d100 3
a102 2
            temp1 = VOI_PROCESS (proc, image, uv.img[i].mcal, $
                                 cbf, uv.cbf[i].mcal, cbv, uv.cbv[i].mcal)
@


1.7
log
@add MTT
@
text
@d162 13
a174 7
            thresh =  0.01 * dsp[0].cut * dsp[1].nc
            idx1 = where(temp2 LT thresh, count1)
            idx2 = where(temp2 GE thresh, count2)
            
            IF (count1 GT 0) THEN temp2[idx1] = 0 ; temp = temp1
            IF (count2 GT 0) THEN temp1[idx2] = dsp[0].nc ; temp = nc + temp2
            temp = temp1 + temp2 ; + dsp[0].bot
@


1.6
log
@*** empty log message ***
@
text
@d84 3
a86 1
            IF (proc EQ 3 OR proc EQ 4) THEN BEGIN
d92 2
d99 1
a99 4
            ENDIF ELSE BEGIN
               cbf = 0
               cbv = 0
            ENDELSE 
@


1.5
log
@add vidi_segment, vidi_outline, vidi_viewer, vidi_viewer_display
vidi_edit in all 3 orientations
@
text
@d48 1
a48 1
   
@


1.4
log
@error message if composite of different sized images is selected
@
text
@d58 2
a59 15
                  IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN 
                     ysize = uv.img[i].dim[1] * dsp[i].zoom
                     fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
                     xsize = fact * uv.img[i].dim[0] * dsp[i].zoom
                     stype = 1
                  ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN 
                     xsize = uv.img[i].dim[0] * dsp[i].zoom
                     fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
                     ysize = fact * uv.img[i].dim[1] * dsp[i].zoom
                     stype = 1
                  ENDIF ELSE BEGIN
                     xsize = uv.img[i].dim[0] * dsp[i].zoom
                     ysize = uv.img[i].dim[1] * dsp[i].zoom
                     stype = 0
                  ENDELSE 
d63 2
a64 3
                  xsize = uv.img[i].dim[0] * dsp[i].zoom
                  fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[0])
                  ysize = fact * uv.img[i].dim[2] * dsp[i].zoom
a65 1
                  stype = 1
d68 2
a69 3
                  xsize = uv.img[i].dim[1] * dsp[i].zoom
                  fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[1])
                  ysize = fact * uv.img[i].dim[2] * dsp[i].zoom
a70 1
                  stype = 1
d73 11
d125 2
a126 15
                  IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN 
                     ysize = uv.img[i].dim[1] * dsp[i].zoom
                     fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
                     xsize = fact * uv.img[i].dim[0] * dsp[i].zoom
                     stype = 1
                  ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN 
                     xsize = uv.img[i].dim[0] * dsp[i].zoom
                     fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
                     ysize = fact * uv.img[i].dim[1] * dsp[i].zoom
                     stype = 1
                  ENDIF ELSE BEGIN
                     xsize = uv.img[i].dim[0] * dsp[i].zoom
                     ysize = uv.img[i].dim[1] * dsp[i].zoom
                     stype = 0
                  ENDELSE 
d130 2
a131 3
                  xsize = uv.img[i].dim[0] * dsp[i].zoom
                  fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[0])
                  ysize = fact * uv.img[i].dim[2] * dsp[i].zoom
a132 1
                  stype = 1
d135 2
a136 3
                  xsize = uv.img[i].dim[1] * dsp[i].zoom
                  fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[1])
                  ysize = fact * uv.img[i].dim[2] * dsp[i].zoom
a137 1
                  stype = 1
d140 10
@


1.3
log
@move metabolic processing to voi_process.pro
@
text
@d120 29
a148 12
         nodata = 0
         i = 0
         slice = uv.img[i].p - uv.img[i].fp
         frame = uv.img[i].f - uv.img[i].ff
         CASE orient OF
            0: BEGIN
               IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN 
                  ysize = uv.img[i].dim[1] * dsp[i].zoom
                  fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
                  xsize = fact * uv.img[i].dim[0] * dsp[i].zoom
                  stype = 1
               ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN 
d150 3
a152 2
                  fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
                  ysize = fact * uv.img[i].dim[1] * dsp[i].zoom
d154 11
a164 24
               ENDIF ELSE BEGIN
                  xsize = uv.img[i].dim[0] * dsp[i].zoom
                  ysize = uv.img[i].dim[1] * dsp[i].zoom
                  stype = 0
               ENDELSE 
               image = reform((*uv.img[i].data)[*,*,slice,frame])
            END
            1: BEGIN
               xsize = uv.img[i].dim[0] * dsp[i].zoom
               fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[0])
               ysize = fact * uv.img[i].dim[2] * dsp[i].zoom
               image = reform((*uv.img[i].data)[*,slice,*,frame])
               stype = 1
            END
            2: BEGIN
               xsize = uv.img[i].dim[1] * dsp[i].zoom
               fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[1])
               ysize = fact * uv.img[i].dim[2] * dsp[i].zoom
               image = reform((*uv.img[i].data)[slice,*,*,frame])
               stype = 1
            END
         ENDCASE
         widget_control, uv.wid.win[2], draw_xsize=xsize, draw_ysize=ysize
         temp1 = VIDI_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample, stype)
d166 18
a183 17
         i = 1
         CASE orient OF
            0:  image = reform((*uv.img[i].data)[*,*,slice,frame])
            1:  image = reform((*uv.img[i].data)[*,slice,*,frame])
            2:  image = reform((*uv.img[i].data)[slice,*,*,frame])
         ENDCASE
         temp2 = VIDI_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample, stype)
         
         thresh =  0.01 * dsp[0].cut * dsp[1].nc
         idx1 = where(temp2 LT thresh, count1)
         idx2 = where(temp2 GE thresh, count2)
         
         IF (count1 GT 0) THEN temp2[idx1] = 0 ; temp = temp1
         IF (count2 GT 0) THEN temp1[idx2] = dsp[0].nc ; temp = nc + temp2
         temp = temp1 + temp2   ; + dsp[0].bot
         wset, dsp[2].id
         tv, temp
@


1.2
log
@add CMRGlu
@
text
@a0 38
FUNCTION VIDI_PROCESS, image, proc, mcal
   CASE proc OF
      1: image = image * (mcal[1]*image + mcal[2])
      2: image = mcal[3]*image
      5: image = 0.001*image
      ELSE:
   ENDCASE
   RETURN, image
END 

FUNCTION VIDI_OXYGEN, image, cbf, cbv, proc, mcal
   slvratio = 0.85              ; ratio of cerebral small vessel to large vessel hematocrit
   volfactr = 0.835             ; (postcapillary vol + 0.5*capillary vol)/total blood volume
   brainden = 1.05              ; density of brain (g/ml)
   c1 = slvratio * mcal[9] / 100.0
   c2 = volfactr * c1
   c3 = mcal[0] / brainden
   a1 = c3 * image
   a2 = cbf * (mcal[6]*cbf + mcal[7])
   a3 = c1 * cbv
   num = a1-a2-a3
   a4 = cbf * (mcal[4]*cbf + mcal[5])
   a5 = c2 * cbv
   den = a4-a5
   n = where(den, count)
   image[*] = 0
   CASE proc OF
      3: BEGIN 
         IF (count GT 0) THEN image[n] = num[n]/den[n]
         n = where(image GT 1, count)
         IF (count GT 0) THEN image[n] = 1.
      ENDCASE 
      4: IF (count GT 0) THEN image[n] = mcal[8] * cbf[n] * num[n]/den[n]
      ELSE:
   ENDCASE
   RETURN, image
END 
   
a95 1
               cbf = VIDI_PROCESS (cbf, uv.cbf[i].proc, uv.cbf[i].mcal)
d101 7
a107 3
               cbv = VIDI_PROCESS (cbv, uv.cbv[i].proc, uv.cbv[i].mcal)
               temp1 = VIDI_OXYGEN (image, cbf, cbv, proc, uv.img[i].mcal)
            ENDIF ELSE temp1 = VIDI_PROCESS (image, proc, uv.img[i].mcal)
@


1.1
log
@Initial revision
@
text
@d5 1
d40 1
a40 1
   COMMON IMAGE_UTILS
d82 1
@
