head	2.10;
access;
symbols;
locks; strict;
comment	@# @;


2.10
date	2008.07.10.16.14.11;	author tom;	state Exp;
branches;
next	2.9;

2.9
date	2006.05.26.14.29.18;	author tom;	state Exp;
branches;
next	2.8;

2.8
date	2006.05.25.20.30.24;	author tom;	state Exp;
branches;
next	2.7;

2.7
date	2006.03.10.16.39.45;	author tom;	state Exp;
branches;
next	2.6;

2.6
date	2005.06.27.20.56.38;	author tom;	state Exp;
branches;
next	2.5;

2.5
date	2005.06.23.20.57.03;	author tom;	state Exp;
branches;
next	2.4;

2.4
date	2004.08.31.15.12.18;	author tom;	state Exp;
branches;
next	2.3;

2.3
date	2004.04.12.21.18.54;	author tom;	state Exp;
branches;
next	2.2;

2.2
date	2004.02.27.20.24.01;	author tom;	state Exp;
branches;
next	2.1;

2.1
date	2004.02.26.19.56.13;	author tom;	state Exp;
branches;
next	2.0;

2.0
date	2004.02.03.16.33.49;	author tom;	state Exp;
branches;
next	1.30;

1.30
date	2004.02.03.16.31.10;	author tom;	state Exp;
branches;
next	1.29;

1.29
date	2003.12.15.22.02.26;	author tom;	state Exp;
branches;
next	1.28;

1.28
date	2003.05.13.14.23.16;	author tom;	state Exp;
branches;
next	1.27;

1.27
date	2003.05.06.20.21.47;	author tom;	state Exp;
branches;
next	1.26;

1.26
date	2002.05.06.16.38.50;	author tom;	state Exp;
branches;
next	1.25;

1.25
date	2002.05.03.19.56.07;	author tom;	state Exp;
branches;
next	1.24;

1.24
date	2002.02.11.20.28.14;	author tom;	state Exp;
branches;
next	1.23;

1.23
date	2001.08.17.16.39.08;	author tom;	state Exp;
branches;
next	1.22;

1.22
date	2001.07.16.15.54.46;	author tom;	state Exp;
branches;
next	1.21;

1.21
date	2001.02.13.19.08.30;	author tom;	state Exp;
branches;
next	1.20;

1.20
date	2000.10.18.14.39.53;	author tom;	state Exp;
branches;
next	1.19;

1.19
date	2000.09.21.16.06.48;	author tom;	state Exp;
branches;
next	1.18;

1.18
date	2000.09.20.16.57.43;	author tom;	state Exp;
branches;
next	1.17;

1.17
date	2000.05.17.17.51.44;	author tom;	state Exp;
branches;
next	1.16;

1.16
date	2000.02.11.17.41.59;	author tom;	state Exp;
branches;
next	1.15;

1.15
date	2000.02.02.18.00.15;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	99.04.19.16.49.59;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	99.04.19.15.29.58;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	99.02.12.17.13.27;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	99.02.05.17.17.30;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	99.01.29.16.58.12;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	98.06.17.17.07.55;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	98.06.16.19.03.09;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	98.06.08.15.31.59;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	98.06.03.16.10.47;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	98.06.02.21.13.44;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	98.06.02.20.48.35;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	98.05.22.17.36.13;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.05.13.15.47.55;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.01.30.20.33.12;	author tom;	state Exp;
branches;
next	;


desc
@@


2.10
log
@added up and down shifts for VOIs
@
text
@; NAME:
;	VIDI_DEFVOI
;
; PURPOSE:
;	Widget to define, manipulate and compute values of
;	a region of interest within a widget drawable. 
;	Reads and writes VOI files.
; CATEGORY:
;	Regions of interest, graphics.
; CALLING SEQUENCE:
;	Result = VIDI_DEFVOI(uv, inum, orient)
; RESTRICTIONS:
;	This is a MODAL widget.  No other widget applications will be
;	responsive while this widget is in use.
;
; MODIFICATION HISTORY:
;	Tom Videen, Dec 1997.
;	Add Threshold option. TOV, May 1998.
;	Add Limit option. TOV, June 1998.
;-


PRO VIDI_DEFVOI_DRAW, s, i, FILL=fill
; Draw outline (or fill if FILL is set) of ROI
;	or the ith segment of a polygon if i < 0.
; Uses XOR or solid color drawing mode (as specified by s.color).
; Image coordinates are tranposed to screen coordinates before drawing.
; Parameters:
;	s = state structure
;	i = segment number
   
   n = (*s.roi).num
   IF (n LT 1) THEN RETURN
   
   WSET, s.win
   
   xsave = !x.s & ysave = !y.s  ; Set scaling to pixel coords
   xfact = 1.
   yfact = 1.
   IF (s.img.pdim[1] GT s.img.pdim[0]) THEN BEGIN
      yfact = (s.img.pdim[1])/(s.img.pdim[0])
   ENDIF ELSE IF (s.img.pdim[0] GT s.img.pdim[1]) THEN BEGIN
      xfact = (s.img.pdim[0])/(s.img.pdim[1])
   ENDIF

   !x.s = [0, s.zoom/(float(!d.x_size) / xfact)]
   !y.s = [0, s.zoom/(float(!d.y_size) / yfact)]
   ydim = s.img.dim[1]
   
   IF  KEYWORD_SET(FILL) THEN DEVICE, SET_GRAPHICS_FUNCTION=s.color $
   ELSE DEVICE, SET_GRAPHICS_FUNCTION=6
   
   CASE (*s.roi).type OF
      
      0: BEGIN                  ; Circle
         n = 32                 ; #points to define the circle
         a = findgen(n+1) * (2 * !pi/(n-1))
         x = (*(*s.roi).loc)[0]
         y = (*(*s.roi).loc)[1]
         r = (*s.roi).r
         xy = transpose([[x + r * cos(a)], [y + r * sin(a)]])
         xy = VOI_TRANSPOSE(xy, ydim, /DISPLAY)
         plots, xy
         IF KEYWORD_SET(FILL) THEN polyfill, xy
      ENDCASE
      
      1: BEGIN                  ; Rectangle
         x1 = (*(*s.roi).loc)[0,0]
         y1 = (*(*s.roi).loc)[1,0]
         x2 = (*(*s.roi).loc)[0,1]
         y2 = (*(*s.roi).loc)[1,1]
         xy = [[x1,y1],[x1,y2],[x2,y2],[x2,y1],[x1,y1]]
         xy = VOI_TRANSPOSE(xy, ydim, /DISPLAY)
         ;;xy = xy + [[1,-1],[1,-1],[1,-1],[1,-1],[1,-1]]
         plots, xy
         IF KEYWORD_SET(FILL) THEN polyfill, xy
      ENDCASE
      
      2: IF (n GE 2) THEN BEGIN ; Trace
         xy = (*(*s.roi).loc)[*,0:n-1]
         xy = VOI_TRANSPOSE(xy, ydim, /DISPLAY)
         IF KEYWORD_SET(FILL) THEN polyfill, xy $
         ELSE BEGIN
            DEVICE, SET_GRAPHICS_FUNCTION=3
            IF (i GE 0) THEN plots, xy[*, i:i+1] $ ; One segment
            ELSE plots, xy      ; All of it
         ENDELSE 
      ENDIF
      
      3: BEGIN                  ; Thresholded ROI = filled polygon
         xy = [(*(*s.roi).loc)[*,0:n-1]]
         xy = VOI_TRANSPOSE(xy, ydim)
         print,(size(xy))[2], ' points'
         FOR k=0,n-1 DO BEGIN
            imgpoint = [[xy[0,k],xy[1,k]], [xy[0,k]+1,xy[1,k]], $
                        [xy[0,k]+1,xy[1,k]-1], [xy[0,k],xy[1,k]-1]]
            polyfill, imgpoint
         ENDFOR 
      ENDCASE
      
   ENDCASE
   
   !x.s = xsave & !y.s = ysave
   DEVICE, SET_GRAPHICS_FUNCTION=3 ; Copy mode   
END   

  
PRO VIDI_DEFVOI_EVENT, ev, s
; Called from the VIDI_DEFVOI event loop.
; Parameters:
;	ev = event structure
;	s = state structure
   
   s.button = s.button OR ev.press XOR ev.release ; New button state   
   n = (*s.roi).num

   xfact = 1.
   yfact = 1.
   IF (s.img.pdim[1] GT s.img.pdim[0]) THEN BEGIN
      yfact = (s.img.pdim[1])/(s.img.pdim[0])
   ENDIF ELSE IF (s.img.pdim[0] GT s.img.pdim[1]) THEN BEGIN
      xfact = (s.img.pdim[0])/(s.img.pdim[1])
   ENDIF
   xzoom = xfact * s.zoom
   yzoom = yfact * s.zoom

   x = (ev.x - s.offset[0]) / xzoom ; Screen coordinates (0,0 is lower left)
   y = (ev.y - s.offset[1]) / yzoom
   xdim = s.img.dim[0]
   ydim = s.img.dim[1]
   xy = [fix(x),fix(y)]
   xy = VOI_TRANSPOSE(xy, ydim) ; Image coordinates (0,0 is upper left)
   WIDGET_CONTROL, s.pos_w, SET_VALUE=string(xy+1, format='("Position: ",i,", ",i)')

   IF (xy[0] LT 0) OR (xy[1] LT 0) OR $ ; Check if cursor is within image
      (xy[0] GE xdim) OR (xy[1] GE ydim) THEN RETURN
   IF ev.press NE 0 THEN s.drag = [x,y] ; Start of drag operation
   
   IF (s.button EQ 1) THEN BEGIN ; Create
      
      CASE (*s.roi).type OF
         
         0: BEGIN               ; Circle
            IF (n GT 0 AND s.preview) THEN VIDI_DEFVOI_DRAW, s, -1 ; Erase
            s.preview = 1
            t = s.drag
            (*s.roi).num = 1
            (*s.roi).r = sqrt((float(x)-t[0])^2 + (float(y) - t[1])^2)
            IF NOT ptr_valid((*s.roi).loc) THEN (*s.roi).loc = ptr_new(lonarr(2))
            *(*s.roi).loc = VOI_TRANSPOSE(t, ydim, /DISPLAY)
            VIDI_DEFVOI_DRAW, s, -1
         ENDCASE
         
         1: BEGIN               ; Rectangle
            IF (n GT 0 AND s.preview) THEN VIDI_DEFVOI_DRAW, s, -1 ; Erase
            s.preview = 1
            IF NOT ptr_valid((*s.roi).loc) THEN (*s.roi).loc = ptr_new(lonarr(2,2))
            t = s.drag
            (*s.roi).type = 1
            (*s.roi).num = 2
            (*(*s.roi).loc)[*,0] = xy
            (*(*s.roi).loc)[*,1] = VOI_TRANSPOSE(t, ydim, /DISPLAY)
            VIDI_DEFVOI_DRAW, s, -1
         ENDCASE
         
         2: BEGIN               ; Trace
            s.preview = 1
            IF NOT ptr_valid((*s.roi).loc) THEN BEGIN
               (*s.roi).type = 2
               (*s.roi).num = 0
               (*s.roi).loc = ptr_new(lonarr(2,100))
               n = 0
            ENDIF
            IF (n GT 0) THEN $  ; Check for duplicates
               IF(xy[0] EQ (*(*s.roi).loc)[0,n-1] AND xy[1] EQ (*(*s.roi).loc)[1,n-1]) THEN RETURN
            IF ((n+1) GE N_ELEMENTS(*(*s.roi).loc)/2) THEN BEGIN ; Extend array
               new = ptr_new(lonarr(2,2*(n+1)))
               (*new)[*,0:n-1] = (*(*s.roi).loc)[*,0:n-1]
               ptr_free, (*s.roi).loc
               (*s.roi).loc = new
            ENDIF
            IF (n EQ 0) THEN BEGIN 
               (*(*s.roi).loc)[*,n] = xy ; then add the point to the trace
               n = n + 1
               (*s.roi).num = n    
               IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_DEFVOI_DRAW, s, n-2
            ENDIF ELSE BEGIN    ; make certain trace is 4-connected
               lastx = (*(*s.roi).loc)[0,n-1]
               lasty = (*(*s.roi).loc)[1,n-1]
               dx = abs(xy[0]-lastx)
               dy = abs(xy[1]-lasty)
               IF (dx GT dy) THEN BEGIN
                  dir = 0
                  IF (dy GT 0) THEN slope = dx/dy ELSE slope = 1
               ENDIF ELSE BEGIN
                  dir = 1
                  IF (dx GT 0) THEN slope = dy/dx ELSE slope = 1
               ENDELSE
               WHILE (xy[0] NE lastx OR xy[1] NE lasty) DO BEGIN
                  IF ((n+1) GE N_ELEMENTS(*(*s.roi).loc)/2) THEN BEGIN ; Extend array
                     new = ptr_new(lonarr(2,2*(n+1)))
                     (*new)[*,0:n-1] = (*(*s.roi).loc)[*,0:n-1]
                     ptr_free, (*s.roi).loc
                     (*s.roi).loc = new
                  ENDIF
                  IF (dir EQ 0) THEN BEGIN
                     IF (xy[1] EQ lasty) THEN slope = 1 $
                     ELSE slope = abs(xy[0]-lastx)/abs(xy[1]-lasty)
                     FOR k=1,slope DO BEGIN
                        IF ((n+1) GE N_ELEMENTS(*(*s.roi).loc)/2) THEN BEGIN ; Extend array
                           new = ptr_new(lonarr(2,2*(n+1)))
                           (*new)[*,0:n-1] = (*(*s.roi).loc)[*,0:n-1]
                           ptr_free, (*s.roi).loc
                           (*s.roi).loc = new
                        ENDIF
                        IF (xy[0] NE lastx) THEN BEGIN
                           dx = xy[0]-lastx
                           nextx = lastx + dx/abs(dx)
                           (*(*s.roi).loc)[0,n] = nextx
                           (*(*s.roi).loc)[1,n] = lasty
                           lastx = nextx
                           n = n + 1
                           (*s.roi).num = n
                           IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_EDIT_DRAW, s, n-2, xdim, ydim, xzoom, yzoom
                        ENDIF
                     ENDFOR
                     IF (xy[1] NE lasty) THEN BEGIN
                        dy = xy[1]-lasty
                        nexty = lasty + dy/abs(dy)
                        (*(*s.roi).loc)[0,n] = lastx
                        (*(*s.roi).loc)[1,n] = nexty
                        lasty = nexty
                        n = n + 1
                        (*s.roi).num = n
                        IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_EDIT_DRAW, s, n-2, xdim, ydim, xzoom, yzoom
                     ENDIF
                  ENDIF ELSE BEGIN
                     IF (xy[0] EQ lastx) THEN slope = 1 $
                     ELSE slope = abs(xy[1]-lasty)/abs(xy[0]-lastx)
                     FOR k=1,slope DO BEGIN
                        IF ((n+1) GE N_ELEMENTS(*(*s.roi).loc)/2) THEN BEGIN ; Extend array
                           new = ptr_new(lonarr(2,2*(n+1)))
                           (*new)[*,0:n-1] = (*(*s.roi).loc)[*,0:n-1]
                           ptr_free, (*s.roi).loc
                           (*s.roi).loc = new
                        ENDIF
                        IF (xy[1] NE lasty) THEN BEGIN
                           dy = xy[1]-lasty
                           nexty = lasty + dy/abs(dy)
                           (*(*s.roi).loc)[0,n] = lastx
                           (*(*s.roi).loc)[1,n] = nexty
                           lasty = nexty
                           n = n + 1
                           (*s.roi).num = n
                           IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_EDIT_DRAW, s, n-2, xdim, ydim, xzoom, yzoom
                        ENDIF
                     ENDFOR
                     IF (xy[0] NE lastx) THEN BEGIN
                        dx = xy[0]-lastx
                        nextx = lastx + dx/abs(dx)
                        (*(*s.roi).loc)[0,n] = nextx
                        (*(*s.roi).loc)[1,n] = lasty
                        lastx = nextx
                        n = n + 1
                        (*s.roi).num = n
                        IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_EDIT_DRAW, s, n-2, xdim, ydim, xzoom, yzoom
                     ENDIF
                  ENDELSE
               ENDWHILE 
            ENDELSE 
         ENDCASE
         
         3: BEGIN               ; Thresholded ROI
            IF (s.preview) THEN BEGIN
               IF (n GE 2) THEN VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
               IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
            ENDIF
            s.preview = 0
            
            IF NOT ptr_valid((*s.roi).loc) THEN BEGIN
               (*s.roi).type = 3
               (*s.roi).num = 0
               (*s.roi).loc = ptr_new(lonarr(2,100))
               n = 0
            ENDIF
            pln = long(s.img.p-s.img.fp)
            plane_offset = pln*(ydim*xdim)
            pix = long(plane_offset) + long(xdim)*long(xy[1]) + long(xy[0])
            contrapix = long(plane_offset) + long(xdim)*long(xy[1]) + long(xdim-xy[0]-1)
            seedval = (*s.img.data)[pix]
            contraval = (*s.img.data)[contrapix]
            IF (seedval GE s.bot AND seedval LE s.top) THEN BEGIN 
               IF (s.contra EQ 0) THEN BEGIN 
                  (*(*s.roi).loc)[*,0] = xy
                  (*s.roi).num = 1
               ENDIF ELSE IF (seedval GE s.conrat*contraval) THEN BEGIN 
                  (*(*s.roi).loc)[*,0] = xy
                  (*s.roi).num = 1
               ENDIF ELSE (*s.roi).num = 0
            ENDIF ELSE (*s.roi).num = 0

            limited = 0
            lim = VOI_LOCATE(s.voi, 'LIMIT')
            IF ptr_valid(lim) THEN BEGIN
               limited = 1
               xlp = (*(*lim).loc)[0,*]
               ylp = (*(*lim).loc)[1,*]
               lim = (*lim).next
               WHILE (lim NE ptr_new()) DO BEGIN
                  IF ((*lim).id EQ 'LIMIT') THEN BEGIN 
                     IF ((*lim).num GT 0) THEN BEGIN 
                        xlp1 = (*(*lim).loc)[0,*]
                        ylp1 = (*(*lim).loc)[1,*]
                        xlp = [xlp, xlp1]
                        ylp = [ylp, ylp1]
                     ENDIF 
                  ENDIF 
                  lim = (*lim).next
               ENDWHILE
            ENDIF 
            
            minx = 0
            maxx = xdim-1
            miny = 0
            maxy = ydim-1
            n = (*s.roi).num    ; total number of points
            k = n-1             ; current point
            IF (k EQ 0) THEN widget_control, /hourglass
            WHILE (k LT n AND n GT 0) DO BEGIN
               IF ((n+11) GE N_ELEMENTS(*(*s.roi).loc)/2) THEN BEGIN ; Extend array
                  msg = string(format='("Voxels: ",i)', n)
                  widget_control, s.msg, set_value=msg
                  progressEvent = widget_event(s.base, /NoWait)
                  IF progressEvent.id EQ s.cancel THEN BEGIN
                     widget_control, s.msg, set_value='Thresholding Canceled!'
                     ptr_free, (*s.roi).loc
                     (*s.roi).num = 0
                     goto, EndThreshold
                  ENDIF
                  new = ptr_new(lonarr(2,n+100))
                  (*new)[*,0:n-1] = (*(*s.roi).loc)[*,0:n-1]
                  ptr_free, (*s.roi).loc
                  (*s.roi).loc = new
               ENDIF
               xyp = (*(*s.roi).loc)[*,k] ; current point
               xmin = xyp[0]-1 > minx
               xmax = xyp[0]+1 < maxx
               ymin = xyp[1]-1 > miny
               ymax = xyp[1]+1 < maxy
               FOR xt=xmin,xmax DO BEGIN ; examine 8-connected points to current point, k
                  FOR yt=ymin,ymax DO BEGIN
                     xlocs = where(xt EQ (*(*s.roi).loc)[0,0:n]) ; compare with all defined points
                     ylocs = where (yt EQ (*(*s.roi).loc)[1,0:n])
                     IF (max(setintersection(xlocs,ylocs)) EQ -1) THEN BEGIN ; if it is a new point
                        excluded = 0
                        IF (limited) THEN BEGIN
                           xlocs = where(xt EQ xlp)
                           ylocs = where (yt EQ ylp)
                           IF (max(setintersection(xlocs,ylocs)) ne -1) THEN excluded = 1
                        ENDIF
                        IF (NOT excluded) THEN BEGIN ; and this point is not excluded
                           pix = plane_offset + xdim*yt + xt
                           val = (*s.img.data)[pix]
                           IF (val GE s.bot AND val LE s.top) THEN BEGIN
                              IF (s.contra EQ 0) THEN BEGIN 
                                 (*(*s.roi).loc)[*,n] = [xt,yt]
                                 n = n + 1
                                 (*s.roi).num = n
                              ENDIF ELSE BEGIN 
                                 contrapix = plane_offset + xdim*yt + (xdim-xt-1)
                                 contraval = (*s.img.data)[contrapix]
                                 IF (val GE s.conrat*contraval) THEN BEGIN 
                                    (*(*s.roi).loc)[*,n] = [xt,yt]
                                    n = n + 1
                                    (*s.roi).num = n
                                 ENDIF
                              ENDELSE
                           ENDIF
                        ENDIF 
                     ENDIF 
                  ENDFOR
               ENDFOR
               k = k+1
            ENDWHILE
            k = 0
            n = (*s.roi).num
            IF (s.contra EQ 0) THEN BEGIN 
               msg = string(format='("Voxels: ",i,/,"Seed: [",I3,",",I3,",",I3,"] =",F10.2)', n, xy+1,pln+1,seedval)
            ENDIF ELSE BEGIN
               cx = xdim-xy[0]-1
               msg = string(format=$
                            '("Voxels: ",i,/,"Seed: [",I3,",",I3,",",I3,"] =",F10.2,/,"Contra: [",I3,",",I3,",",I3,"]=",F10.2)',$
                            n, xy+1,pln+1,seedval,cx,xy[1]+1,pln+1,contraval)
            ENDELSE
            widget_control, s.msg, set_value=msg
            VIDI_DEFVOI_DRAW, s, n-1
            EndThreshold:
         ENDCASE
         
      ENDCASE
      
   ENDIF ELSE IF (s.button EQ 2 AND (s.preview OR ptr_valid(s.last))) THEN BEGIN ; Move
      
      CASE (*s.roi).type OF
         
         0: BEGIN               ; Circle
            IF (s.preview) THEN VIDI_DEFVOI_DRAW, s, -1 $
            ELSE BEGIN
               s.preview = 1
               (*s.roi).id = s.id
               (*s.roi).r = (*s.last).r
               (*s.roi).num = 1 
               (*s.roi).loc = ptr_new(lonarr(2))
            ENDELSE
            *(*s.roi).loc = xy
            VIDI_DEFVOI_DRAW, s, -1
         ENDCASE 
         
         1: BEGIN               ; Rectangle
            IF (s.preview) THEN BEGIN
               VIDI_DEFVOI_DRAW, s, -1 
               xy0 = (*(*s.roi).loc)[*,1] - (*(*s.roi).loc)[*,0]
            ENDIF ELSE BEGIN
               s.preview = 1
               (*s.roi).id = s.id
               (*s.roi).num = 2
               (*s.roi).loc = ptr_new(lonarr(2,2))
               xy0 = (*(*s.last).loc)[*,1] - (*(*s.last).loc)[*,0]
            ENDELSE 
            (*(*s.roi).loc)[*,0] = xy
            (*(*s.roi).loc)[*,1] = xy + xy0
            VIDI_DEFVOI_DRAW, s, -1
         ENDCASE 

         2: BEGIN               ; Trace
            IF (s.preview) THEN VIDI_DEFVOI_DRAW, s, -1 $
            ELSE BEGIN
               s.preview = 1
               (*s.roi).id = s.id
               n = (*s.last).num
               (*s.roi).num = n
               pdim = 100 > n
               (*s.roi).loc = ptr_new(lonarr(2,pdim))
               FOR i=0,n-1 DO (*(*s.roi).loc)[*,i] = (*(*s.last).loc)[*,i]
            ENDELSE
            xy0 = xy - (*(*s.roi).loc)[*,0]
            (*(*s.roi).loc)[*,0] = xy
            FOR i=1,n-1 DO (*(*s.roi).loc)[*,i] = (*(*s.roi).loc)[*,i] + xy0
            VIDI_DEFVOI_DRAW, s, -1
         ENDCASE 
         
      ENDCASE
   ENDIF 
   RETURN
END   
   

PRO VIDI_DEFVOI, uv, inum, orient, zoom
   COMMON VIDI
   
   voi = uv.wid.voi
   color = uv.wid.voicolor
   img = uv.img[inum]
   cbf = uv.cbf[inum]
   cbv = uv.cbv[inum]
   draw = uv.wid.win[inum]
   group = uv.wid.base
   proc = img.proc

   bot = uv.wid.vthresh[0]
   top = uv.wid.vthresh[1]
   imax = max(*img.data, min=imin)
   minlim = long(imin-0.9)
   maxlim = long(imax+0.9)
   IF (maxlim EQ minlim) THEN BEGIN
      minlim = 0
      maxlim = 1
   ENDIF
   bot = bot > minlim
   bot = bot < maxlim
   top = top > minlim
   top = top < maxlim
   conrat = 1.5
   contra = 0

   base = WIDGET_BASE(title='Region of Interest', group_leader=group, /ROW)   
   base1 = WIDGET_BASE(base,/COLUMN)   
   base1a = WIDGET_BASE(base1, /ROW)
   temp1 = CW_BGROUP(base1a, /ROW, /NO_RELEASE, /RETURN_NAME,  $
                     ['Read', 'Write', 'Refresh', 'Exit'])
   
   IF (color EQ 3) THEN cval = 1 ELSE cval = 0
   coltype = CW_BGROUP(base1a, /ROW, /EXCLUSIVE, /NO_RELEASE, /RETURN_NAME, $
                       ['XOR','White'], SET_VALUE=cval)
   
   base2 =  WIDGET_BASE(base1,/ROW)
   select3 = ['1\Draw','0\Only if Defined on this Slice','0\Regardless']
   temp3 = cw_pdmenu(base2, select3, /RETURN_NAME)

   
   select4 = ['1\Statistics', $
              '0\Using Planes in which the ROI Components were Defined', $
              '0\ALL Unique ROI Components using the Current Plane', $
              '0\ONLY ROI Components which were Defined on Current Plane']
   temp4 = CW_PDMENU(base2, select4, /RETURN_NAME)
   
   select5 = ['1\Plot','0\Across Planes','0\Across Frames']
   temp5 = CW_PDMENU(base2, select5, /RETURN_NAME)
   
   select6 = ['1\Delete','0\Last Component Entered on This Slice', $
              '0\All Components on This Slice','0\All Components on All Slices']
   temp6 = CW_PDMENU(base2, select6, /RETURN_NAME)

   select7 = ['1\Flip','0\Create Contralateral ROI on This Slice', $
              '0\Create Contralateral ROI on All Slices']
   temp7 = CW_PDMENU(base2, select7, /RETURN_NAME)
   
   select8 = ['1\Shift','1\Shift Left on this Slice','0\ 1 ','0\ 2 ','0\ 3 ','0\ 4 ','0\ 5 ', $
              '0\ 6 ','0\ 7 ','0\ 8 ','0\ 9 ', '0\ 10 ', '0\ 11 ', '0\ 12 ', '0\ 13 ', $
              '0\ 14 ', '0\ 15 ','0\ 16 ', '0\ 17 ', '0\ 18 ', '0\ 19 ', '2\ 20 ', $
              '1\Shift Right on this Slice','0\ 1 ','0\ 2 ','0\ 3 ','0\ 4 ','0\ 5 ', $
              '0\ 6 ','0\ 7 ','0\ 8 ','0\ 9 ', '0\ 10 ', '0\ 11 ', '0\ 12 ', '0\ 13 ', $
              '0\ 14 ', '0\ 15 ','0\ 16 ', '0\ 17 ', '0\ 18 ', '0\ 19 ', '2\ 20 ', $
              '1\Shift Up on this Slice','0\ 1 ','0\ 2 ','0\ 3 ','0\ 4 ','0\ 5 ', $
              '0\ 6 ','0\ 7 ','0\ 8 ','0\ 9 ', '0\ 10 ', '0\ 11 ', '0\ 12 ', '0\ 13 ', $
              '0\ 14 ', '0\ 15 ','0\ 16 ', '0\ 17 ', '0\ 18 ', '0\ 19 ', '2\ 20 ', $
              '1\Shift Down on this Slice','0\ 1 ','0\ 2 ','0\ 3 ','0\ 4 ','0\ 5 ', $
              '0\ 6 ','0\ 7 ','0\ 8 ','0\ 9 ', '0\ 10 ', '0\ 11 ', '0\ 12 ', '0\ 13 ', $
              '0\ 14 ', '0\ 15 ','0\ 16 ', '0\ 17 ', '0\ 18 ', '0\ 19 ', '0\ 20 ']
   shift = CW_PDMENU(base2, select8)
   
   select9 = ['1\Zero','0\Zero Pixels where Mask is Zero on this Slice']
   temp8 = CW_PDMENU(base2, select9, /RETURN_NAME)

   select10 = ['1\COM','0\Center of VOI on this Slice']
   temp9 = CW_PDMENU(base2, select10, /RETURN_NAME)

   base3 = WIDGET_BASE(base1,/ROW)
   temp10 = CW_BGROUP(base3, /ROW, /NO_RELEASE, /RETURN_NAME, ['Save'])
   name = CW_FIELD(base3, title='as', value='', xsize=36, /RETURN_EVENTS)

   dtype = CW_BGROUP(base1, /ROW, /EXCLUSIVE, /NO_REL, /RETURN_NAME, $
                     ['Circle', 'Rectangle', 'Trace', 'Threshold','Limit'], SET_VALUE=0)
   
   pos_w = WIDGET_TEXT(base1, YSIZE=1, XSIZE=18, /FRAME, $
                       VALUE='Position:    0,    0')
   
   base4 = WIDGET_BASE(base1, /ROW)
   plane = CW_FIELD(base4, title='Plane', /NOEDIT, value=img.p, xsize=3, ysize=1)
   up = WIDGET_BUTTON(base4, value='<- Up  ')
   down = WIDGET_BUTTON(base4, value=' Down ->')  
   cancel = WIDGET_BUTTON(base4, value=' Cancel Thresholding ')
   base9 = WIDGET_BASE(base1, /ROW)
   ratio = CW_FIELD(base9, title='Contra Threshold', value=conrat, xsize=8, /FLOAT, /RETURN_EVENTS)
   rtype = CW_BGROUP(base9, /ROW, /EXCLUSIVE, /NO_REL, /RETURN_NAME, $
                     ['Ignore', 'Use'], SET_VALUE=0)

   base5 = WIDGET_BASE(base,/COLUMN)
   msg = WIDGET_TEXT(base5, YSIZE=3)
   
   list = WIDGET_LIST(base5, XSIZE=45, YSIZE=7)
   
   base6 = WIDGET_BASE(base5, /COLUMN)
   base7 = WIDGET_BASE(base6,/ROW)
   loval = CW_FIELD(base7, title='Lower Thresh', value=bot, $
                    xsize=8, /INTEGER, /RETURN_EVENTS)
   lolimit = WIDGET_SLIDER(base7, value=bot, min=minlim, max=maxlim, xsize=440)

   base8 = WIDGET_BASE(base6,/ROW)
   hival = CW_FIELD(base8, title='Upper Thresh', value=top, $
                    xsize=8, /INTEGER, /RETURN_EVENTS)
   hilimit = WIDGET_SLIDER(base8, value=top, min=minlim, max=maxlim, xsize=440)
   
   WIDGET_CONTROL, draw, GET_VALUE=win
   WSET, win
   
   IF N_ELEMENTS(image_size) LE 0 THEN image_size = [!d.x_size, !d.y_size] / [zoom, zoom]
   IF N_ELEMENTS(offset) LE 0 THEN offset = [0,0]   
   p  = offset + image_size /2   
   TVCRS, p[0], p[1], /DEVICE
   WINDOW, /PIXMAP, /FREE, xs = !d.x_size, ys=!d.y_size ; Save window
   backing = !d.window
   DEVICE, copy = [0,0, !d.x_size, !d.y_size, 0, 0, win]
   
   roi = VOI_APPEND(voi)        ; position pointer to free element at end of list
   
   s = {ROI_STATE, $            ; Structure containing state
        base: base, $           ; Main base widget
        name: name, $           ; ROI name field
        pos_w : pos_w, $        ; Position text widget
        msg : msg, $            ; Message window
        win:  win, $            ; draw widget window #
        button: 0, $            ; button state
        cancel: cancel, $       ; cancel button
        drag: [0,0], $          ; Beginning of drag motion
        preview: 0, $           ; creating a new roi will erase a previous previewed one (unsaved)
        image_size : long(image_size), $ ; Image array size
        offset: fix(offset), $  ; offset of array within window
        zoom : zoom, $          ; zoom factor
        color : color, $        ; 3 -> color=white; 6 -> color=XOR
        contra : contra, $      ; use contraleral ratio threshold for ROIs
        conrat : conrat, $      ; contraleral ratio threshold for ROIs
        bot : bot, $            ; low threshold range for ROIs
        top : top, $            ; high threshold range for ROIs
        imin : imin, $          ; image minimum
        imax : imax, $          ; image maximum
        img : img, $            ; pointer to image data
        id  : '', $             ; current VOI id
        voi : voi, $            ; linked list
        roi : roi, $            ; pointer to current ROI in linked list
        last : ptr_new() $      ; pointer to last ROI entered in linked list
       }
   
   WIDGET_CONTROL, base, /REALIZE, xoffset=0, yoffset=0
   WSHOW, win
   voilist = VOI_LIST(voi)
   listing = VOI_LISTING(voi,voilist,img.dim[2])
   widget_control,list, set_value=listing
   widget_control,dtype, set_value=(*s.roi).type

   newslice = 1
   p = s.img.p
   imgname = img.fname
   voiname = img.fname
   loc = RSTRPOS (imgname, '/')
   IF (loc GT 0) THEN imgname = STRMID(imgname,loc+1)
   loc = STRPOS (imgname, '.')
   IF (loc GT 0) THEN rootname = STRMID(imgname,0,loc)
   
   WHILE 1 DO BEGIN             ; Internal event loop   
      ev = WIDGET_EVENT([base, draw])
      n = (*s.roi).num
      CASE ev.id OF
         
         draw: VIDI_DEFVOI_EVENT, ev, s
         
         s.name: s.id = ev.value
         
         ratio:    BEGIN
            conrat = ev.value
            s.conrat = conrat
            WIDGET_CONTROL, ratio, SET_VALUE=conrat
         ENDCASE

         loval:    BEGIN
            bot = ev.value
            top = bot > top
            s.bot = bot
            s.top = top
            WIDGET_CONTROL, loval, SET_VALUE=bot
            WIDGET_CONTROL, hival, SET_VALUE=top
            WIDGET_CONTROL, lolimit, SET_VALUE=bot
            WIDGET_CONTROL, hilimit, SET_VALUE=top
         ENDCASE

         hival:    BEGIN
            top = ev.value
            bot = bot < top
            s.bot = bot
            s.top = top
            WIDGET_CONTROL, loval, SET_VALUE=bot
            WIDGET_CONTROL, hival, SET_VALUE=top
            WIDGET_CONTROL, lolimit, SET_VALUE=bot
            WIDGET_CONTROL, hilimit, SET_VALUE=top
         ENDCASE

         lolimit: BEGIN
            bot = ev.value
            top = bot > top
            s.bot = bot
            s.top = top
            WIDGET_CONTROL, loval, SET_VALUE=bot
            WIDGET_CONTROL, hival, SET_VALUE=top
            WIDGET_CONTROL, lolimit, SET_VALUE=bot
            WIDGET_CONTROL, hilimit, SET_VALUE=top
         ENDCASE 
         
         hilimit: BEGIN
            top = ev.value
            bot = bot < top
            s.bot = bot
            s.top = top
            WIDGET_CONTROL, loval, SET_VALUE=bot
            WIDGET_CONTROL, hival, SET_VALUE=top
            WIDGET_CONTROL, lolimit, SET_VALUE=bot
            WIDGET_CONTROL, hilimit, SET_VALUE=top
         ENDCASE 
         
         list: BEGIN
            s.id = voilist[ev.index]
            widget_control,name,set_value=s.id
            IF (s.preview AND ptr_valid(s.last) AND n NE 0) THEN BEGIN
               VIDI_DEFVOI_DRAW, s, -1 ; Erase roi
               s.preview = 0
            ENDIF
            s.last = VOI_LOCATE(voi, s.id)
            (*s.roi).type = (*s.last).type
            IF (s.id EQ 'LIMIT') THEN widget_control,dtype, set_value=4
         ENDCASE 
         
         up: BEGIN
            p = s.img.p
            IF (p GT img.fp) THEN BEGIN
               p = p-1
               s.img.p = p
               s.img.p = p
               uv.img[0].p = p
               uv.img[1].p = p
               widget_control, uv.wid.slider, set_value=p
               widget_control, plane, set_value=p
               VIDI_DISPLAY, uv
            ENDIF 
         ENDCASE 
         
         down: BEGIN
            p = s.img.p
            IF (p LT img.lp) THEN BEGIN
               p = p+1
               s.img.p = p
               s.img.p = p
               uv.img[0].p = p
               uv.img[1].p = p
               widget_control, uv.wid.slider, set_value=p
               widget_control, plane, set_value=p
               VIDI_DISPLAY, uv
            ENDIF 
         ENDCASE 

         shift: BEGIN
            IF (ev.value LE 21) THEN BEGIN
               s.roi = VOI_LOCATE(voi, s.id)
               WHILE (s.roi NE ptr_new()) DO BEGIN
                  IF ((*s.roi).id EQ s.id) THEN BEGIN
                     IF ((*s.roi).z EQ s.img.p) THEN BEGIN 
                        IF ((*s.roi).num GT 0) THEN BEGIN 
                           xs = ev.value-1
                           n =(*s.roi).num
                           widget_control, /hourglass
                           FOR k=0,n-1 DO $
                              (*(*s.roi).loc)[0,k] = (*(*s.roi).loc)[0,k] - xs
                        ENDIF
                     ENDIF
                  ENDIF
                  s.roi = (*s.roi).next
               ENDWHILE
               msg = 'Shifted left '+strtrim(string(xs),2)+' pixels'
            ENDIF ELSE IF (ev.value LE 42) THEN BEGIN
               s.roi = VOI_LOCATE(voi, s.id)
               WHILE (s.roi NE ptr_new()) DO BEGIN
                  IF ((*s.roi).id EQ s.id) THEN BEGIN
                     IF ((*s.roi).z EQ s.img.p) THEN BEGIN 
                        IF ((*s.roi).num GT 0) THEN BEGIN 
                           xs = ev.value-22
                           n =(*s.roi).num
                           widget_control, /hourglass
                           FOR k=0,n-1 DO $
                              (*(*s.roi).loc)[0,k] = (*(*s.roi).loc)[0,k] + xs
                        ENDIF
                     ENDIF
                  ENDIF
                  s.roi = (*s.roi).next
               ENDWHILE
               msg = 'Shifted right '+strtrim(string(xs),2)+' pixels'
            ENDIF ELSE IF (ev.value LE 63) THEN BEGIN
               s.roi = VOI_LOCATE(voi, s.id)
               WHILE (s.roi NE ptr_new()) DO BEGIN
                  IF ((*s.roi).id EQ s.id) THEN BEGIN
                     IF ((*s.roi).z EQ s.img.p) THEN BEGIN 
                        IF ((*s.roi).num GT 0) THEN BEGIN 
                           xs = ev.value-43
                           n =(*s.roi).num
                           widget_control, /hourglass
                           FOR k=0,n-1 DO $
                              (*(*s.roi).loc)[1,k] = (*(*s.roi).loc)[1,k] - xs
                        ENDIF
                     ENDIF
                  ENDIF
                  s.roi = (*s.roi).next
               ENDWHILE
               msg = 'Shifted up '+strtrim(string(xs),2)+' pixels'
            ENDIF ELSE IF (ev.value LE 84) THEN BEGIN
               s.roi = VOI_LOCATE(voi, s.id)
               WHILE (s.roi NE ptr_new()) DO BEGIN
                  IF ((*s.roi).id EQ s.id) THEN BEGIN
                     IF ((*s.roi).z EQ s.img.p) THEN BEGIN 
                        IF ((*s.roi).num GT 0) THEN BEGIN 
                           xs = ev.value-64
                           n =(*s.roi).num
                           widget_control, /hourglass
                           FOR k=0,n-1 DO $
                              (*(*s.roi).loc)[1,k] = (*(*s.roi).loc)[1,k] + xs
                        ENDIF
                     ENDIF
                  ENDIF
                  s.roi = (*s.roi).next
               ENDWHILE
               msg = 'Shifted down '+strtrim(string(xs),2)+' pixels'
            ENDIF
            s.preview = 0
            widget_control, s.msg, set_value=msg
            s.roi = VOI_EOL(voi)
         ENDCASE 

         cancel: BEGIN
         ENDCASE 
         
         ELSE: CASE ev.value OF
            
            'XOR' : s.color = 6
            
            'White' : s.color = 3
            
            'Refresh': BEGIN 
               s.preview = 0
               IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
               (*s.roi).num = 0   
               VIDI_DISPLAY,uv
            ENDCASE 

            'Ignore' :  s.contra = 0

            'Use' :  s.contra = 1
            
            'Circle' :  BEGIN   
               IF (s.preview) THEN BEGIN 
                  IF (n NE 0) THEN BEGIN
                     IF ((*s.roi).type EQ 2) THEN VIDI_DISPLAY,uv $
                     ELSE  VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
                     IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
                  ENDIF 
                  s.preview = 0
               ENDIF
               (*s.roi).num = 0   
               (*s.roi).type = 0
               IF (s.id EQ 'LIMIT') THEN BEGIN
                  s.id = ''
                  widget_control,name,set_value=s.id
               ENDIF 
               msg = string(format='(A,/,A)', "Depress and drag Left Button to define the circle.", $
                            "Depress the Middle Button to move the last or current VOI.")
               widget_control, s.msg, set_value=msg
            ENDCASE
            
            'Rectangle' :   BEGIN   
               IF (s.preview) THEN BEGIN 
                  IF (n NE 0) THEN BEGIN
                     IF ((*s.roi).type EQ 2) THEN VIDI_DISPLAY,uv $
                     ELSE  VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
                     IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
                  ENDIF 
                  s.preview = 0
               ENDIF
               (*s.roi).num = 0   
               (*s.roi).type = 1
               IF (s.id EQ 'LIMIT') THEN BEGIN
                  s.id = ''
                  widget_control,name,set_value=s.id
               ENDIF 
               msg = string(format='(A,/,A)', "Depress and drag Left Button to define the rectangle.", $
                            "Depress the Middle Button to move the last or current VOI.")
               widget_control, s.msg, set_value=msg
            ENDCASE
            
            'Trace':  BEGIN   
               IF (s.preview) THEN BEGIN 
                  IF (n NE 0) THEN BEGIN
                     IF ((*s.roi).type EQ 2) THEN VIDI_DISPLAY,uv $
                     ELSE  VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
                     IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
                  ENDIF 
                  s.preview = 0
               ENDIF
               (*s.roi).num = 0   
               (*s.roi).type = 2
               IF (s.id EQ 'LIMIT') THEN BEGIN
                  s.id = ''
                  widget_control,name,set_value=s.id
               ENDIF 
               msg = string(format='(A,A,/,A)', "Depress Left Button and to draw the boundary.  ", $
                            "Release the button to complete.", $
                            "Depress the Middle Button to move the last or current VOI.")
               widget_control, s.msg, set_value=msg
            ENDCASE
            
            'Threshold':  BEGIN   
               IF (s.preview) THEN BEGIN 
                  IF (n NE 0) THEN BEGIN
                     IF ((*s.roi).type EQ 2) THEN VIDI_DISPLAY,uv $
                     ELSE  VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
                     IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
                  ENDIF 
                  s.preview = 0
               ENDIF
               (*s.roi).num = 0   
               (*s.roi).type = 3
               IF (s.id EQ 'LIMIT') THEN BEGIN
                  s.id = ''
                  widget_control,name,set_value=s.id
               ENDIF 
               msg = string(format='(A,/,A,/,A)', "Adjust Lower and Upper Thresholds.", $
                            "Then depress Left Button to select the seed point.", $
                            "(Set both thresholds to maximum to see the pixel of a seed point.)")
               widget_control, s.msg, set_value=msg
            ENDCASE

            'Create Contralateral ROI on This Slice': BEGIN
               orig_id = s.id
               orig = VOI_LOCATE(s.voi, orig_id)
               xdim = s.img.dim[0]
               check = 0
               IF ptr_valid(orig) THEN BEGIN 
                  WHILE (orig NE ptr_new()) DO BEGIN
                     IF ((*orig).id EQ s.id) THEN BEGIN
                        n = (*orig).num  
                        IF (((*orig).z EQ s.img.p) AND (n GT 0)) THEN BEGIN 
                           check = 1
                           (*voi).num = (*voi).num + 1
                           IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
                           (*s.roi).loc = ptr_new(lonarr(2,n))
                           (*s.roi).id = 'contra_'+orig_id
                           (*s.roi).type = (*orig).type
                           (*s.roi).orient = (*orig).orient
                           (*s.roi).z = (*orig).z
                           (*s.roi).r = (*orig).r
                           (*s.roi).num = (*orig).num
                           k = 0
                           IF ((*orig).type EQ 3) THEN BEGIN
                              WHILE (k LT n) DO BEGIN
                                 xy = (*(*orig).loc)[*,k]
                                 (*(*s.roi).loc)[*,k] = [xdim-xy[0]-1, xy[1]]
                                 k = k+1
                              ENDWHILE
                              VIDI_DEFVOI_DRAW, s, -1
                              VIDI_DEFVOI_DRAW, s, -1, /fill
                           ENDIF ELSE BEGIN
                              WHILE (k LT n) DO BEGIN
                                 xy = (*(*orig).loc)[*,k]
                                 (*(*s.roi).loc)[*,k] = [xdim-xy[0], xy[1]]
                                 k = k+1
                              ENDWHILE
                              VIDI_DEFVOI_DRAW, s, -1
                              VIDI_DEFVOI_DRAW, s, -1, /fill
                           ENDELSE
                           s.last = VOI_SORT(s.voi, s.roi)
                           s.last = VOI_SORT(s.voi, s.roi)
                           s.roi = VOI_APPEND(s.voi)
                           (*s.roi).type = (*s.last).type
                           IF (min('' EQ voilist) EQ 1) THEN voilist = [s.id] $
                           ELSE IF (max(s.id EQ voilist) EQ 0) THEN voilist = [voilist,[s.id]]
                           voilist = VOI_LIST(voi)
                           listing = VOI_LISTING(voi,voilist,img.dim[2])
                           widget_control,list, set_value=listing
                        ENDIF 
                     ENDIF
                     orig = (*orig).next
                  ENDWHILE
                  s.preview = 0
                  IF (check) THEN widget_control, s.msg, set_value='ROI saved:   '+s.id $
                  ELSE widget_control, s.msg, set_value='ROI not defined on this plane'
               ENDIF
               s.roi = VOI_EOL(voi)
            ENDCASE 
            
            'Create Contralateral ROI on All Slices': BEGIN
               orig_id = s.id
               orig = VOI_LOCATE(s.voi, orig_id)
               xdim = s.img.dim[0]
               check = 0
               IF ptr_valid(orig) THEN BEGIN 
                  WHILE (orig NE ptr_new()) DO BEGIN
                     IF ((*orig).id EQ s.id) THEN BEGIN
                        n = (*orig).num  
                        IF (n GT 0) THEN BEGIN 
                           check = 1
                           (*voi).num = (*voi).num + 1
                           IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
                           (*s.roi).loc = ptr_new(lonarr(2,n))
                           (*s.roi).id = 'contra_'+orig_id
                           (*s.roi).type = (*orig).type
                           (*s.roi).orient = (*orig).orient
                           (*s.roi).z = (*orig).z
                           (*s.roi).r = (*orig).r
                           (*s.roi).num = (*orig).num
                           k = 0
                           IF ((*orig).type EQ 3) THEN BEGIN
                              WHILE (k LT n) DO BEGIN
                                 xy = (*(*orig).loc)[*,k]
                                 (*(*s.roi).loc)[*,k] = [xdim-xy[0]-1, xy[1]]
                                 k = k+1
                              ENDWHILE
                           ENDIF ELSE BEGIN
                              WHILE (k LT n) DO BEGIN
                                 xy = (*(*orig).loc)[*,k]
                                 (*(*s.roi).loc)[*,k] = [xdim-xy[0], xy[1]]
                                 k = k+1
                              ENDWHILE
                           ENDELSE
                           s.last = VOI_SORT(s.voi, s.roi)
                           s.roi = VOI_APPEND(s.voi)
                           (*s.roi).type = (*s.last).type
                           IF (min('' EQ voilist) EQ 1) THEN voilist = [s.id] $
                           ELSE IF (max(s.id EQ voilist) EQ 0) THEN voilist = [voilist,[s.id]]
                           voilist = VOI_LIST(voi)
                           listing = VOI_LISTING(voi,voilist,img.dim[2])
                           widget_control,list, set_value=listing
                        ENDIF 
                     ENDIF
                     orig = (*orig).next
                  ENDWHILE
                  s.preview = 0
                  IF (check) THEN widget_control, s.msg, set_value='ROI saved:   '+s.id 
               ENDIF
               s.roi = VOI_EOL(voi)
            ENDCASE 

            'Zero Pixels where Mask is Zero on this Slice': BEGIN
               s.roi = VOI_LOCATE(voi, s.id)
               sum = 0
               WHILE (s.roi NE ptr_new()) DO BEGIN
                  IF ((*s.roi).id EQ s.id) THEN BEGIN
                     IF ((*s.roi).type NE 3) THEN BEGIN
                        widget_control, s.msg, set_value='ERROR: Can only zero threshholded VOIs'
                     ENDIF ELSE IF (N_ELEMENTS(maskimg) LE 1) THEN BEGIN 
                        widget_control, s.msg, set_value='ERROR: No mask has been set'
                     ENDIF ELSE IF ((*s.roi).z EQ s.img.p) THEN BEGIN
                        n =(*s.roi).num
                        IF (n GT 0) THEN BEGIN 
                           nn = 0
                           pln = long(s.img.p-s.img.fp)
                           ok = intarr(n)
                           widget_control, /hourglass
                           FOR k=0,n-1 DO BEGIN
                              xy = (*(*s.roi).loc)[*,k]
                              IF (maskimg[xy[0],xy[1],pln] GT 0) THEN BEGIN
                                 ok[nn] = k
                                 nn = nn+1
                              ENDIF
                           ENDFOR
                           ;; Sort non-zero pixels
                           FOR k=0,nn-1 DO (*(*s.roi).loc)[*,k] = (*(*s.roi).loc)[*,ok[k]]
                           FOR k=nn,n-1 DO (*(*s.roi).loc)[*,k] = [0,0]
                           (*s.roi).num = nn
                           sum = sum + nn
                        ENDIF
                     ENDIF
                  ENDIF
                  s.roi = (*s.roi).next
               ENDWHILE
               msg = 'Zeroed '+strtrim(string(sum),2)+' pixels'
               widget_control, s.msg, set_value=msg
               s.roi = VOI_EOL(voi)
            ENDCASE 

            'Center of VOI on this Slice': BEGIN
               s.roi = VOI_LOCATE(voi, s.id)
               xsum = 0L
               ysum = 0L
               WHILE (s.roi NE ptr_new()) DO BEGIN
                  IF ((*s.roi).id EQ s.id) THEN BEGIN
                     IF ((*s.roi).z EQ s.img.p) THEN BEGIN
                        n =(*s.roi).num
                        IF (n GT 0) THEN BEGIN 
                           FOR k=0,n-1 DO BEGIN
                              xy = (*(*s.roi).loc)[*,k]
                              xsum = xsum + xy[0]
                              ysum = ysum + xy[1]
                           ENDFOR
                           xx = float(xsum)/n
                           yy = float(ysum)/n
                        ENDIF
                     ENDIF
                  ENDIF
                  s.roi = (*s.roi).next
               ENDWHILE
               str1 = 'X = '+string(format='(F5.1)',xx)+'       Y = '+string(format='(F5.1)',yy)
               str2 = 'X = '+string(format='(F5.0)',xx/3)+'       Y = '+string(format='(F5.0)',yy/3)
               msg = string(format='(A,/,A,/,A)',"Center of VOI area", str1, str2)
               widget_control, s.msg, set_value=msg
               s.roi = VOI_EOL(voi)
            ENDCASE 

            'Limit':  BEGIN   
               IF (s.preview) THEN BEGIN 
                  IF (n NE 0) THEN BEGIN
                     IF ((*s.roi).type EQ 2) THEN VIDI_DISPLAY,uv $
                     ELSE  VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
                     IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
                  ENDIF 
                  s.preview = 0
               ENDIF
               (*s.roi).num = 0   
               (*s.roi).type = 2
               s.id = 'LIMIT'
               widget_control,name,set_value=s.id
               msg = string(format='(A,/,A,/,A)',"Trace boundary limit while depressing Left Button.", $
                            "Then Save with the name LIMIT.", $
                            "Multiple saved limit segments are permissible and apply to ALL planes.")
               widget_control, s.msg, set_value=msg
            ENDCASE
            
            'Read': BEGIN
               voiname = dialog_pickfile(FILE=voiname, FILTER='*.voi', /read)
               IF (strlen(voiname) EQ 0) THEN BEGIN
                  widget_control, s.msg, set_value='No file entered'
               ENDIF ELSE IF (VOI_READ(voi, voiname, msg) NE 0) THEN BEGIN
                  widget_control, s.msg, set_value=msg 
               ENDIF ELSE BEGIN
                  voilist = VOI_LIST(voi)
                  listing = VOI_LISTING(voi,voilist,img.dim[2])
                  IF (listing[0] NE '') THEN BEGIN
                     widget_control,list, set_value=listing
                     s.roi = VOI_APPEND(s.voi)
                  ENDIF ELSE BEGIN
                     widget_control, s.msg, set_value= $
                        'No data.  VOI file is incorrect format or incompatible with current image.'
                     roi = voi
                     WHILE ptr_valid((*roi).next) DO BEGIN
                        next = (*roi).next
                        last = (*next).next
                        ptr_free, (*next).loc
                        ptr_free, next
                        (*roi).next = last
                     ENDWHILE
                     s.roi = voi
                  ENDELSE 
               ENDELSE 
               s.preview = 0
               (*s.roi).num = 0   
               (*s.roi).type = 0
               widget_control,dtype, set_value=(*s.roi).type
            ENDCASE
            
            'Write': BEGIN
               voiname = dialog_pickfile(FILE=voiname, FILTER='*.voi', /WRITE)
               IF (strlen(voiname) EQ 0) THEN BEGIN
                  widget_control, s.msg, set_value='No file entered'
               ENDIF ELSE BEGIN
                  (*voi).type = 9802 ; version 2.0, 1998
                  IF (VOI_WRITE(voi, voiname, msg) NE 0) THEN $
                     widget_control, s.msg, set_value=msg
               ENDELSE 
               widget_control,dtype, set_value=(*s.roi).type
            ENDCASE 
            
            'Only if Defined on this Slice': IF ((*voi).num GT 0) THEN BEGIN
               s.roi = VOI_LOCATE(voi, s.id)
               check = 0
               WHILE (s.roi NE ptr_new()) DO BEGIN
                  IF ((*s.roi).id EQ s.id) THEN BEGIN
                     IF (((*s.roi).z EQ s.img.p) AND ((*s.roi).num GT 0)) THEN BEGIN 
                        IF ((*s.roi).num GT 0) THEN BEGIN 
                           IF (s.id NE 'LIMIT') THEN VIDI_DEFVOI_DRAW, s, -1, /fill $
                           ELSE VIDI_DEFVOI_DRAW, s, -1
                        ENDIF
                     ENDIF ELSE check = 1
                  ENDIF
                  s.roi = (*s.roi).next
               ENDWHILE
               IF (check) THEN BEGIN
                  msg = string(format='(A,/,A)', "Only components on this slice are shown.", $
                               "Components exist for other slices.")
                  widget_control, s.msg, set_value=msg
               ENDIF
               s.roi = VOI_EOL(voi)
               widget_control,dtype, set_value=(*s.roi).type
            ENDIF 
            
            'Regardless': IF ((*voi).num GT 0) THEN BEGIN
               s.roi = VOI_LOCATE(voi, s.id)
               WHILE (s.roi NE ptr_new()) DO BEGIN
                  IF ((*s.roi).id EQ s.id) THEN BEGIN
                     IF ((*s.roi).num GT 0) THEN BEGIN 
                        IF (s.id NE 'LIMIT') THEN VIDI_DEFVOI_DRAW, s, -1, /fill $
                        ELSE VIDI_DEFVOI_DRAW, s, -1
                     ENDIF
                  ENDIF 
                  s.roi = (*s.roi).next
               ENDWHILE
               s.roi = VOI_EOL(voi)
               widget_control,dtype, set_value=(*s.roi).type
            ENDIF 
            
            ;; Statistics
            
            'Using Planes in which the ROI Components were Defined': BEGIN 
               s.roi = VOI_LOCATE(voi, s.id)
               msg = 'Pixels = 0' ; default if no data
               log = ''
               IF ptr_valid(s.roi) THEN BEGIN 
                  IF ((*s.roi).num GT 0) THEN BEGIN
                     pixels = VOI_COORDS(voi, s.id, img.dim, msg, OFFSET=img.fp)
                     IF ((size(pixels))[3] GT 0) THEN BEGIN
                        pixels = pixels[sort(pixels)]
                        pixels = pixels[uniq(pixels)]
                        msg = VIDI_PROCESS(pixels, img, cbf, cbv, log)
                     ENDIF
                  ENDIF
               ENDIF
               widget_control, s.msg, set_value=msg
               s.roi = VOI_EOL(voi)
               widget_control,dtype, set_value=(*s.roi).type
               IF (strlen(log) GT 0 AND loglun NE 0) THEN BEGIN
                  printf, loglun, imgname,s.id,log, format='(A," ",A," --- ",A)'
               ENDIF
            ENDCASE

            'ALL Unique ROI Components using the Current Plane': BEGIN 
               s.roi = VOI_LOCATE(voi, s.id)
               msg = 'Pixels = 0' ; default if no data
               log = ''
               IF ptr_valid(s.roi) THEN BEGIN 
                  IF ((*s.roi).num GT 0) THEN BEGIN
                     pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=s.img.p, OFFSET=img.fp)
                     IF ((size(pixels))[2] GT 1) THEN BEGIN
                        pixels = pixels[sort(pixels)]
                        pixels = pixels[uniq(pixels)]
                        msg = VIDI_PROCESS(pixels, img, cbf, cbv, log)
                     ENDIF
                  ENDIF
               ENDIF
               widget_control, s.msg, set_value=msg
               s.roi = VOI_EOL(voi)
               widget_control,dtype, set_value=(*s.roi).type
               IF (strlen(log) GT 0 AND loglun NE 0) THEN BEGIN
                  printf, loglun, imgname,s.id,s.img.p,log, format='(A," ",A," ",I3," ",A)'
               ENDIF
            ENDCASE
            
            'ONLY ROI Components which were Defined on Current Plane': BEGIN 
               s.roi = VOI_LOCATE(voi, s.id)
               msg = 'Pixels = 0' ; default if no data
               log = ''
               IF ptr_valid(s.roi) THEN BEGIN 
                  IF ((*s.roi).num GT 0) THEN BEGIN
                     pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=s.img.p, OFFSET=img.fp, /LIMIT)
                     IF ((size(pixels))[2] GT 1) THEN BEGIN
                        pixels = pixels[sort(pixels)]
                        pixels = pixels[uniq(pixels)]
                        msg = VIDI_PROCESS(pixels, img, cbf, cbv, log)
                     ENDIF
                  ENDIF
               ENDIF
               widget_control, s.msg, set_value=msg
               s.roi = VOI_EOL(voi)
               widget_control,dtype, set_value=(*s.roi).type
               IF (strlen(log) GT 0 AND loglun NE 0) THEN BEGIN
                  printf, loglun, imgname,s.id,s.img.p,log, format='(A," ",A," ",I3," ",A)'
               ENDIF
            ENDCASE
            
            'Across Planes': BEGIN
               s.roi = VOI_LOCATE(voi, s.id)
               msg = 'Pixels = 0' ; default if no data
               fname = rootname+'_'+s.id+'_stat.pts'
               fname = strcompress(fname, /remove_all)
               openw,lun, fname, ERROR=err, /GET_LUN, /APPEND
               IF ptr_valid(s.roi) THEN BEGIN 
                  IF ((*s.roi).num GT 0) THEN BEGIN
                     pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=1)
                     IF ((size(pixels))[2] GT 1) THEN BEGIN
                        msg = ''
                        pixels = pixels[sort(pixels)]
                        pixels = pixels[uniq(pixels)]
                        n = n_elements(pixels)
                        IF (n GT 0) THEN BEGIN
                           slice = fltarr(img.lp-img.fp+1)
                           mean = fltarr(img.lp-img.fp+1)
                           FOR k=img.fp, img.lp DO BEGIN 
                              pix = pixels + long(k-img.fp)*img.dim[0]*img.dim[1]
                              val = (*img.data)[pix]
                              slice[k-img.fp] = k
                              IF (img.system EQ 220) THEN $
                                 mean[k-img.fp] = (moment(val))[0] $
                              ELSE IF (img.len[img.f] GT 0) THEN $
                                 mean[k-img.fp] = (moment(val))[0]/(img.len[img.f]/1000.) $
                              ELSE mean[k-img.fp] = (moment(val))[0]
                              IF (lun GT 0) THEN $
                                 printf,lun,slice[k-img.fp], mean[k-img.fp],format='(I3,F16.6)'
                           ENDFOR 
                           WINDOW, /free
                           ymin = min(mean)
                           ymax = max(mean)
                           xlabel = 'Slice'
                           PLOT, slice, mean, charsize=1.4,charthick=2,xthick=2,ythick=2, $
                              xtitle=xlabel, ytitle='Counts/Sec', yrange=[ymin,ymax]
                           WSET, s.win
                        ENDIF
                     ENDIF
                  ENDIF
               ENDIF
               IF (lun GT 0) THEN BEGIN
                  close, lun
                  free_lun, lun
               ENDIF
               widget_control, s.msg, set_value=msg
               s.roi = VOI_EOL(voi)
               widget_control,dtype, set_value=(*s.roi).type
            ENDCASE
            
            'Across Frames': BEGIN
               msg = 'Use the program "vstat" for this processing'
               widget_control, s.msg, set_value=msg

;               s.roi = VOI_LOCATE(voi, s.id)
;               msg = 'Pixels = 0' ; default if no data
;               IF ptr_valid(s.roi) THEN BEGIN 
;                  IF ((*s.roi).num GT 0) THEN BEGIN
;                     pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=1)
;                     print,'Pixels = ',n_elements(pixels)
;                     IF ((size(pixels))[2] GT 1) THEN BEGIN
;                        msg = ''
;                        pixels = pixels[sort(pixels)]
;                        pixels = pixels[uniq(pixels)]
;                        n = n_elements(pixels)
;                        print,'Pixels = ',n_elements(pixels)
;                        print,img.dim
;                        frmsize =  long(img.dim[0])*long(img.dim[1])*long(img.dim[2])
;                        print,'Framesize = ',frmsize
;                        IF (n GT 0) THEN BEGIN
;                           frame = fltarr(img.lf-img.ff+1)
;                           mean = fltarr(img.lf-img.ff+1)
;                           FOR k=img.ff, img.lf DO BEGIN 
;                              pix = pixels + long(k-img.ff)*frmsize
;                              val = (*img.data)[pix]
;                              frame[k-img.fp] = float(img.start[k])/1000.
;                              IF (img.len[img.f] GT 0) THEN $
;                                 mean[k-img.fp] = (moment(val))[0]/(img.len[k]/1000.) $
;                              ELSE mean[k-img.fp] = (moment(val))[0]
;                              mean[k-img.fp] = (moment(val))[0]
;                              print,frame[k-img.fp], mean[k-img.fp]
;                           ENDFOR 
;                           WINDOW, /free
;                           ymin = min(mean)
;                           ymax = max(mean)
;                           xlabel = 'Seconds'
;                           PLOT, frame, mean, charsize=1.4,charthick=2,xthick=2,ythick=2, $
;                              xtitle=xlabel, ytitle='Counts/Sec', yrange=[ymin,ymax]
;                           WSET, s.win
;                        ENDIF
;                     ENDIF
;                  ENDIF
;               ENDIF
;               widget_control, s.msg, set_value=msg
;               s.roi = VOI_EOL(voi)
;               widget_control,dtype, set_value=(*s.roi).type
            ENDCASE
            
            'Save': BEGIN
               IF NOT ptr_valid((*s.roi).loc) THEN BEGIN
                  msg = 'ROI contains no data'
                  result=dialog_message(msg, title='ROI was not saved!', /error)
               ENDIF ELSE IF (strtrim(s.id EQ '')) THEN BEGIN
                  msg = 'ROI has no ID'
                  result=dialog_message(msg, title='ROI was not saved!', /error)
               ENDIF ELSE BEGIN
                  newslice = 0
                  (*voi).num = (*voi).num + 1
                  (*s.roi).orient = orient
                  (*s.roi).id = s.id
                  (*s.roi).z = s.img.p
                  IF (s.id NE 'LIMIT') THEN BEGIN
                     VIDI_DEFVOI_DRAW, s, -1
                     VIDI_DEFVOI_DRAW, s, -1, /fill
                  ENDIF 
                  s.last = VOI_SORT(s.voi, s.roi)
                  s.roi = VOI_APPEND(s.voi)
                  (*s.roi).type = (*s.last).type
                  s.preview = 0
                  widget_control, s.msg, set_value='ROI saved:   '+s.id
                  IF (min('' EQ voilist) EQ 1) THEN voilist = [s.id] $
                  ELSE IF (max(s.id EQ voilist) EQ 0) THEN voilist = [voilist,[s.id]]
                  voilist = VOI_LIST(voi)
                  listing = VOI_LISTING(voi,voilist,img.dim[2])
                  widget_control,list, set_value=listing
               ENDELSE
            ENDCASE
            
            'Last Component Entered on This Slice': BEGIN    
               IF (newslice OR NOT ptr_valid(s.last)) THEN BEGIN
                  msg = 'There is no last ROI defined for this slice'
                  widget_control, s.msg, set_value=msg
               ENDIF ELSE IF ((*s.last).id EQ '') THEN BEGIN
                  msg = 'There is no last ROI defined for this slice'
                  widget_control, s.msg, set_value=msg
               ENDIF ELSE BEGIN
                  s.roi = s.last
                  IF ((*s.roi).type EQ 2) THEN VIDI_DISPLAY,uv $
                  ELSE VIDI_DEFVOI_DRAW, s, -1, /fill ; Erase roi
                  IF (VOI_DELETE(voi, (*s.last).id, slice=s.img.p, ptr=s.last) NE 0) THEN BEGIN
                     msg = 'ROI id not found on this slice'
                     widget_control, s.msg, set_value=msg
                  ENDIF ELSE BEGIN 
                     s.roi = VOI_EOL(voi)
                     s.last = VOI_LOCATE(voi,s.id)
                     IF (ptr_valid(s.last)) THEN s.preview = 0
                     widget_control,dtype, set_value=(*s.roi).type
                     msg = 'Last ROI component removed from slice '+strtrim(string(s.img.p),2)
                     widget_control, s.msg, set_value=msg
                     voilist = VOI_LIST(voi)
                     listing = VOI_LISTING(voi,voilist,img.dim[2])
                     widget_control,list, set_value=listing
                  ENDELSE 
               ENDELSE 
            ENDCASE
            
            'All Components on All Slices': BEGIN    
               IF (s.id EQ '') THEN BEGIN
                  msg = 'No ROI selected'
                  widget_control, s.msg, set_value=msg
               ENDIF ELSE BEGIN
                  IF (VOI_DELETE(voi, s.id) NE 0) THEN BEGIN
                     msg = 'ROI id not found'
                     widget_control, s.msg, set_value=msg
                  ENDIF ELSE BEGIN
                     msg = 'ROI removed from all slices'
                     widget_control, s.msg, set_value=msg
                     voilist = VOI_LIST(voi)
                     listing = VOI_LISTING(voi,voilist,img.dim[2])
                     widget_control,list, set_value=listing
                  ENDELSE
               ENDELSE
               s.roi = VOI_EOL(voi)
               widget_control,dtype, set_value=(*s.roi).type
            ENDCASE
            
            'All Components on This Slice': BEGIN    
               IF (s.id EQ '') THEN BEGIN
                  msg = 'No ROI selected'
                  widget_control, s.msg, set_value=msg
               ENDIF ELSE BEGIN
                  IF (VOI_DELETE(voi, s.id, slice=s.img.p) NE 0) THEN BEGIN
                     msg = 'ROI id not found on this slice'
                     widget_control, s.msg, set_value=msg
                  ENDIF ELSE BEGIN
                     msg = 'ROI removed from slice '+strtrim(string(s.img.p),2)
                     widget_control, s.msg, set_value=msg
                     voilist = VOI_LIST(voi)
                     listing = VOI_LISTING(voi,voilist,img.dim[2])
                     widget_control,list, set_value=listing
                  ENDELSE
               ENDELSE
               s.roi = VOI_EOL(voi)
               widget_control,dtype, set_value=(*s.roi).type
            ENDCASE
            
            'Exit':  BEGIN
               uv.wid.vthresh[0] = bot
               uv.wid.vthresh[1] = top
               uv.wid.voicolor = s.color
               WIDGET_CONTROL, base, /DESTROY
               RETURN
            ENDCASE 
            
         ENDCASE   
      ENDCASE 
   ENDWHILE
END   
@


2.9
log
@check ptr for vois before saving
@
text
@d523 6
d764 34
@


2.8
log
@*** empty log message ***
@
text
@d1309 1
a1309 1
               IF (n_elements((*s.roi).loc) EQ 0) THEN BEGIN
@


2.7
log
@*** empty log message ***
@
text
@d738 1
@


2.6
log
@keep voiname as default
@
text
@d529 3
d533 1
a533 1
   temp9 = CW_BGROUP(base3, /ROW, /NO_RELEASE, /RETURN_NAME, ['Save'])
d621 2
d1013 28
d1213 3
d1236 2
a1237 1
                              print,slice[k-img.fp], mean[k-img.fp]
d1250 4
@


2.5
log
@*** empty log message ***
@
text
@d615 1
d1028 2
a1029 2
               fname = dialog_pickfile(FILE=img.fname, FILTER='*.voi', /read)
               IF (strlen(fname) EQ 0) THEN BEGIN
d1031 1
a1031 1
               ENDIF ELSE IF (VOI_READ(voi, fname, msg) NE 0) THEN BEGIN
d1060 2
a1061 2
               fname = dialog_pickfile(FILE=img.fname, FILTER='*.voi', /WRITE)
               IF (strlen(fname) EQ 0) THEN BEGIN
d1065 1
a1065 1
                  IF (VOI_WRITE(voi, fname, msg) NE 0) THEN $
@


2.4
log
@Focus attenuation
@
text
@a0 1
;+
d64 1
a64 1
        IF KEYWORD_SET(FILL) THEN polyfill, xy
d74 1
d95 2
a96 2
            imgpoint = [[xy[0,k],xy[1,k]], [xy[0,k]-1,xy[1,k]], $
                        [xy[0,k]-1,xy[1,k]+1], [xy[0,k],xy[1,k]+1]]
d144 2
a145 2
            IF (n GT 0) THEN VIDI_DEFVOI_DRAW, s, -1 ; Erase
            s.saved = 0
d155 2
a156 2
            IF (n GT 0) THEN VIDI_DEFVOI_DRAW, s, -1 ; Erase
            s.saved = 0
d167 1
a167 1
            s.saved = 0
d274 1
a274 2
            IF (s.saved) THEN s.saved = 0 $
            ELSE BEGIN
d277 2
a278 2
            ENDELSE
            s.saved = 0
d289 1
d291 1
d293 7
a299 2
               (*(*s.roi).loc)[*,0] = xy
               (*s.roi).num = 1
d365 13
a377 3
                              (*(*s.roi).loc)[*,n] = [xt,yt]
                              n = n + 1
                              (*s.roi).num = n
d387 8
a394 1
            msg = string(format='("Voxels: ",i,/,"Seed: [",I3,",",I3,",",I3,"] =",F10.2)', n, xy+1,pln+1,seedval)
d397 1
a397 1
			EndThreshold:
d402 1
a402 1
   ENDIF ELSE IF (s.button EQ 2 AND (NOT s.saved OR ptr_valid(s.last))) THEN BEGIN ; Move
d407 3
a409 2
            IF (s.saved) THEN BEGIN
               s.saved = 0
d414 1
a414 1
            ENDIF ELSE VIDI_DEFVOI_DRAW, s, -1 ; Remove old
d420 5
a424 2
            IF (s.saved) THEN BEGIN
               s.saved = 0
a428 3
            ENDIF ELSE BEGIN 
               VIDI_DEFVOI_DRAW, s, -1 ; Remove old
               xy0 = (*(*s.roi).loc)[*,1] - (*(*s.roi).loc)[*,0]
d436 3
a438 2
            IF (s.saved) THEN BEGIN
               s.saved = 0
d445 1
a445 1
            ENDIF ELSE VIDI_DEFVOI_DRAW, s, -1 ; Remove old
d448 1
a448 1
            FOR i=1,n DO (*(*s.roi).loc)[*,i] = (*(*s.roi).loc)[*,i] + xy0
d483 2
d513 4
d518 11
d530 1
a530 1
   temp6 = CW_BGROUP(base3, /ROW, /NO_RELEASE, /RETURN_NAME, ['Save'])
d540 1
a540 1
   plane = cw_field(base4, title='Plane', /NOEDIT, value=img.p, xsize=3, ysize=1)
d544 4
d587 1
a587 1
        saved: 1, $             ; 1=roi saved
d592 2
d627 6
d680 1
a680 1
            IF (s.saved AND ptr_valid(s.last) AND n NE 0) THEN $
d682 2
a684 1
            s.saved = 1
d717 40
d767 1
a767 1
               IF (s.saved) THEN s.saved = 0
d772 4
d778 1
a778 2
               IF (s.saved) THEN s.saved = 0 $
               ELSE BEGIN 
d784 2
a785 1
               ENDELSE
d798 1
a798 2
               IF (s.saved) THEN s.saved = 0 $
               ELSE BEGIN
d804 2
a805 1
               ENDELSE
d818 1
a818 2
               IF (s.saved) THEN s.saved = 0 $
               ELSE BEGIN
d824 2
a825 1
               ENDELSE
d839 1
a839 2
               IF (s.saved) THEN s.saved = 0 $
               ELSE BEGIN
d845 2
a846 1
               ENDELSE
d858 58
d917 90
d1008 1
a1008 2
               IF (s.saved) THEN s.saved = 0 $
               ELSE BEGIN
d1014 2
a1015 1
               ENDELSE
d1052 1
a1052 1
               s.saved = 0
d1285 1
a1285 1
                  s.saved = 1
d1312 1
a1312 1
                     IF (ptr_valid(s.last)) THEN s.saved = 1
@


2.3
log
@adjust limits for attenuation images where min and max are < 1
@
text
@d947 3
a949 1
                              IF (img.len[img.f] GT 0) THEN $
d996 3
a998 3
               ;;                              IF (img.len[img.f] GT 0) THEN $
               ;;                                 mean[k-img.fp] = (moment(val))[0]/(img.len[k]/1000.) $
               ;;                              ELSE mean[k-img.fp] = (moment(val))[0]
@


2.2
log
@check locations on 2x2 line.v
@
text
@d450 4
@


2.1
log
@*** empty log message ***
@
text
@d95 2
a96 2
            imgpoint = [[xy[0,k],xy[1,k]], [xy[0,k]+1,xy[1,k]], $
                        [xy[0,k]+1,xy[1,k]+1], [xy[0,k],xy[1,k]+1]]
d150 1
a150 1
            *(*s.roi).loc = VOI_TRANSPOSE(t, ydim)
d162 1
a162 1
            (*(*s.roi).loc)[*,1] = VOI_TRANSPOSE(t, ydim)
@


2.0
log
@03 Feb 2004
@
text
@d866 1
a866 1
                     IF ((size(pixels))[2] GT 1) THEN BEGIN
@


1.30
log
@3 Feb 2004
@
text
@@


1.29
log
@*** empty log message ***
@
text
@@


1.28
log
@fix bug (add xzoom, yzoom)
@
text
@d937 2
a938 2
                           slice = fltarr(img.lp-img.fp)
                           mean = fltarr(img.lp-img.fp)
@


1.27
log
@fix atlas display on 24-bit color
@
text
@d124 2
d127 2
a128 2
   x = (ev.x - s.offset[0]) / (s.zoom * xfact) ; Screen coordinates (0,0 is lower left)
   y = (ev.y - s.offset[1]) / (s.zoom * yfact)
d224 1
a224 1
                           IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_EDIT_DRAW, s, n-2, xdim, ydim, s.zoom, s.zoom
d235 1
a235 1
                        IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_EDIT_DRAW, s, n-2, xdim, ydim, s.zoom, s.zoom
d255 1
a255 1
                           IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_EDIT_DRAW, s, n-2, xdim, ydim, s.zoom, s.zoom
d266 1
a266 1
                        IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_EDIT_DRAW, s, n-2, xdim, ydim, s.zoom, s.zoom
@


1.26
log
@xoffset
@
text
@a638 1
               VIDI_ATLAS, uv
a652 1
               VIDI_ATLAS, uv
a669 1
               VIDI_ATLAS, uv
a677 1
                     VIDI_ATLAS, uv
a697 1
                     VIDI_ATLAS, uv
a717 1
                     VIDI_ATLAS, uv
a738 1
                     VIDI_ATLAS, uv
a759 1
                     VIDI_ATLAS, uv
a1050 1
                  VIDI_ATLAS, uv
@


1.25
log
@add Voxel Volume and Cancel Thresholding
@
text
@d288 2
a289 2
            val = (*s.img.data)[pix]
            IF (val GE s.bot AND val LE s.top) THEN BEGIN 
a293 3
            msg = string(format='("Seed: [",I3,",",I3,",",I3,"] =",F10.2)', xy+1,pln+1,val)
            widget_control, s.msg, set_value=msg

d369 1
a369 1
            msg = string(format='("Voxels: ",i)', n)
@


1.24
log
@draw atlas
@
text
@d326 9
d372 2
d375 1
d498 1
d536 1
d660 3
@


1.23
log
@connecting points uses best approximation to straight line
@
text
@d628 1
d643 1
d658 1
d667 1
d688 1
d709 1
d731 1
d753 1
d1045 1
@


1.22
log
@create a log file for statistics
@
text
@d188 9
d204 63
a266 20
                  IF (xy[0] NE lastx) THEN BEGIN
                     dx = xy[0]-lastx
                     nextx = lastx + dx/abs(dx)
                     (*(*s.roi).loc)[0,n] = nextx
                     (*(*s.roi).loc)[1,n] = lasty
                     lastx = nextx
                     n = n + 1
                     (*s.roi).num = n    
                     IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_DEFVOI_DRAW, s, n-2
                  ENDIF 
                  IF (xy[1] NE lasty) THEN BEGIN
                     dy = xy[1]-lasty
                     nexty = lasty + dy/abs(dy)
                     (*(*s.roi).loc)[0,n] = lastx
                     (*(*s.roi).loc)[1,n] = nexty
                     lasty = nexty
                     n = n + 1
                     (*s.roi).num = n    
                     IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_DEFVOI_DRAW, s, n-2
                  ENDIF
@


1.21
log
@add manual entry of thresholds
@
text
@d496 4
d794 1
d801 1
a801 1
                        msg = VIDI_PROCESS(pixels, img, cbf, cbv)
d808 3
d816 1
d823 1
a823 1
                        msg = VIDI_PROCESS(pixels, img, cbf, cbv)
d830 3
d838 1
d845 1
a845 1
                        msg = VIDI_PROCESS(pixels, img, cbf, cbv)
d852 3
@


1.20
log
@xy set to integer
@
text
@d237 1
a237 1
            IF (val GE s.vthresh[0] AND val LE s.vthresh[1]) THEN BEGIN 
d298 1
a298 1
                           IF (val GE s.vthresh[0] AND val LE s.vthresh[1]) THEN BEGIN
a379 1
   vthresh = uv.wid.vthresh
d381 11
a391 1
   
d422 1
a422 1
   name = CW_FIELD(base3, title='as', value='', xsize=40, /RETURN_EVENTS)
d431 3
a433 10
   voi_threshold = lonarr(2)
   voi_threshold[0] = CW_FIELD(base4, title='Threshold Min', /return_events, $
                               /long, xsize=10, ysize=1)
   voi_threshold[1] = CW_FIELD(base4, title='Max', /return_events, $
                               /long, xsize=10, ysize=1)
   
   base4a = WIDGET_BASE(base1,/ROW)
   plane = cw_field(base4a, title='Plane', /NOEDIT, value=img.p, xsize=3, ysize=1)
   up = WIDGET_BUTTON(base4a, value='<- Up  ')
   down = WIDGET_BUTTON(base4a, value=' Down ->')  
d440 10
a449 12
   imax = max(*img.data, min=imin)
   minlim = long(imin-0.9)
   maxlim = long(imax+0.9)
   vthresh[0] = vthresh[0] > minlim
   vthresh[0] = vthresh[0] < maxlim
   vthresh[1] = vthresh[1] > minlim
   vthresh[1] = vthresh[1] < maxlim
   base6 = WIDGET_BASE(base5,/ROW)
   lolimit = WIDGET_SLIDER(base6, value=vthresh[0], min=minlim, max=maxlim, $
                           xsize=340, title='Lower Threshold')
   hilimit = WIDGET_SLIDER(base6, value=vthresh[1], min=minlim, max=maxlim, $
                           xsize=340, title='Upper Threshold')
d468 1
a468 1
        msg : msg, $			; Message window
d472 1
a472 1
        saved: 1, $				; 1=roi saved
d476 8
a483 7
        color : color, $		; 3 -> color=white; 6 -> color=XOR
        vthresh : vthresh, $	; threshold range for ROIs
        imin : imin, $			; image minimum
        imax : imax, $			; image maximum
        img : img, $			; pointer to image data
        id  : '', $				; current VOI id
        voi : voi, $			; linked list
a492 2
   widget_control,voi_threshold[0], set_value=minlim
   widget_control,voi_threshold[1], set_value=maxlim
d506 22
a527 34
         voi_threshold[0]: BEGIN
            minlim = ev.value
            widget_control,lolimit, set_slider_min=minlim
            widget_control,hilimit, set_slider_min=minlim
            IF (s.vthresh[0] LT minlim) THEN BEGIN
               s.vthresh[0] = minlim
               widget_control,lolimit,set_value=s.vthresh[0]
               IF (s.vthresh[1] LT minlim) THEN BEGIN
                  s.vthresh[1] = minlim
                  widget_control,hilimit,set_value=s.vthresh[1]
               ENDIF
            ENDIF
         ENDCASE 
         
         voi_threshold[1]: BEGIN
            maxlim = ev.value
            widget_control,lolimit, set_slider_max=maxlim
            widget_control,hilimit, set_slider_max=maxlim
            IF (s.vthresh[1] GT maxlim) THEN BEGIN
               s.vthresh[1] = maxlim
               widget_control,hilimit,set_value=s.vthresh[1]
               IF (s.vthresh[0] GT maxlim) THEN BEGIN
                  s.vthresh[0] = maxlim
                  widget_control,lolimit,set_value=s.vthresh[0]
               ENDIF
            ENDIF
            IF (minlim GT maxlim) THEN BEGIN
               minlim = maxlim
               widget_control,voi_threshold[0], set_value=minlim
               widget_control,lolimit, set_slider_min=minlim
               widget_control,hilimit, set_slider_min=minlim
            ENDIF 
         ENDCASE 
         
d529 8
a536 7
            s.vthresh[0] = ev.value
            IF (s.vthresh[0] GT s.vthresh[1]) THEN BEGIN
               s.vthresh[1] = s.vthresh[0]
               widget_control,hilimit,set_value=s.vthresh[1]
            ENDIF
            vthresh[0] = s.vthresh[0]
            vthresh[1] = s.vthresh[1]
d540 8
a547 7
            s.vthresh[1] = ev.value
            IF (s.vthresh[1] LT s.vthresh[0]) THEN BEGIN
               s.vthresh[0] = s.vthresh[1]
               widget_control,lolimit,set_value=s.vthresh[0]
            ENDIF
            vthresh[0] = s.vthresh[0]
            vthresh[1] = s.vthresh[1]
d1027 2
@


1.19
log
@declare long for pix
@
text
@d129 1
a129 1
   xy = [x,y]
d468 1
a468 1
        msg : msg, $		; Message window
d472 1
a472 1
        saved: 1, $		; 1=roi saved
d476 1
a476 1
        color : color, $	; 3 -> color=white; 6 -> color=XOR
d478 5
a482 5
        imin : imin, $		; image minimum
        imax : imax, $		; image maximum
        img : img, $		; pointer to image data
        id  : '', $		; current VOI id
        voi : voi, $		; linked list
@


1.18
log
@permit vois on non-square pixels
@
text
@d235 1
a235 1
            pix = plane_offset + xdim*xy[1] + xy[0]
@


1.17
log
@*** empty log message ***
@
text
@d39 10
a48 2
   !x.s = [0, s.zoom/float(!d.x_size)]
   !y.s = [0, s.zoom/float(!d.y_size)]
d116 11
a126 2
   x = (ev.x - s.offset[0]) / s.zoom ; Screen coordinates (0,0 is lower left)
   y = (ev.y - s.offset[1]) / s.zoom
@


1.16
log
@mention vstat
@
text
@d797 1
a797 1
            ENDELSE
d815 1
a815 1
            ENDELSE
d833 1
a833 1
            ENDELSE
@


1.15
log
@checks during read of voi file
@
text
@d875 1
a875 1
               msg = 'Sorry... this has not been implemented yet'
@


1.14
log
@frames devel
@
text
@d698 1
a698 1
               fname = dialog_pickfile(FILE=img.fname, FILTER='*.voi', /READ)
d701 3
a703 3
               ENDIF ELSE BEGIN 
                  IF (VOI_READ(voi, fname, msg) NE 0) THEN $
                     widget_control, s.msg, set_value=msg 
d706 16
a721 1
                  widget_control,list, set_value=listing
a722 1
               s.roi = VOI_APPEND(s.voi)
d900 3
a902 3
;;                              IF (img.len[img.f] GT 0) THEN $
;;                                 mean[k-img.fp] = (moment(val))[0]/(img.len[k]/1000.) $
;;                              ELSE mean[k-img.fp] = (moment(val))[0]
@


1.13
log
@fix bug in computing thresholded VOIs over multiple slices
@
text
@d864 36
a899 29
;            s.roi = VOI_LOCATE(voi, s.id)
;            msg = 'Pixels = 0'  ; default if no data
;            IF ptr_valid(s.roi) THEN BEGIN 
;               IF ((*s.roi).num GT 0) THEN BEGIN
;                  pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=1)
;                  IF ((size(pixels))[2] GT 1) THEN BEGIN
;                     msg = ''
;                     pixels = pixels[sort(pixels)]
;                     pixels = pixels[uniq(pixels)]
;                     n = n_elements(pixels)
;                     IF (n GT 0) THEN BEGIN
;                        slice = fltarr(img.lf-img.ff+1)
;                        mean = fltarr(img.lf-img.ff+1)
;                        FOR k=img.ff, img.lf DO BEGIN 
;                           pix = pixels + long(k-img.fp)*img.dim[0]*img.dim[1]
;                           val = (*img.data)[pix]
;                           slice[k-img.fp] = float(img.start[k])/1000.
;                           IF (img.len[img.f] GT 0) THEN $
;                              mean[k-img.fp] = (moment(val))[0]/(img.len[k]/1000.) $
;                           ELSE mean[k-img.fp] = (moment(val))[0]
;                           print,slice[k-img.fp], mean[k-img.fp]
;                        ENDFOR 
;                        WINDOW, /free
;                        ymin = min(mean)
;                        ymax = max(mean)
;                        xlabel = 'Seconds'
;                        PLOT, slice, mean, charsize=1.4,charthick=2,xthick=2,ythick=2, $
;                           xtitle=xlabel, ytitle='Counts/Sec', yrange=[ymin,ymax]
;                        WSET, s.win
d903 3
a905 4
;            ENDIF
;            widget_control, s.msg, set_value=msg
;            s.roi = VOI_EOL(voi)
;            widget_control,dtype, set_value=(*s.roi).type
@


1.12
log
@add up/down and refresh
circles and rectangles are always XOR
trace and limit are always white
@
text
@d556 2
a557 2
            p = uv.img[inum].p
            IF (p GT uv.img[inum].fp) THEN BEGIN
d559 2
a562 2
               img.p = p
               img.p = p
d570 2
a571 2
            p = uv.img[inum].p
            IF (p LT uv.img[inum].lp) THEN BEGIN
d573 2
a576 2
               img.p = p
               img.p = p
d732 1
a732 1
                     IF (((*s.roi).z EQ img.p) AND ((*s.roi).num GT 0)) THEN BEGIN 
d790 1
a790 1
                     pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=img.p, OFFSET=img.fp)
d808 1
a808 1
                     pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=img.p, OFFSET=img.fp, /LIMIT)
d914 1
a914 1
                  (*s.roi).z = img.p
d943 1
a943 1
                  IF (VOI_DELETE(voi, (*s.last).id, slice=img.p, ptr=s.last) NE 0) THEN BEGIN
d951 1
a951 1
                     msg = 'Last ROI component removed from slice '+strtrim(string(img.p),2)
d985 1
a985 1
                  IF (VOI_DELETE(voi, s.id, slice=img.p) NE 0) THEN BEGIN
d989 1
a989 1
                     msg = 'ROI removed from slice '+strtrim(string(img.p),2)
@


1.11
log
@*** empty log message ***
@
text
@d12 1
a12 24
;	Result = VIDI_DEFVOI(voi,img,orient,draw,group)
; INPUTS:
;	Voi  = pointer to VOI structure (linked list of ROIs)
;	Img  = image structure
;	Orient = image orientation
;	Draw = id of drawable widget which should have 
;		MOTION & BUTTON events enabled
;	Group = widget group to which VIDI_DEFVOI belongs
;
; KEYWORD PARAMETERS:
;	IMAGE_SIZE = size of underlying array [columns, rows]
;		Default = drawable size / zoom.
;	OFFSET = offset of lower left corner of image within the drawable.
;		Default = [0,0].
;	RESTORE = set to restore the drawable to its previous appearance
;		on exit.  Otherwise, the regions remain on the drawable.
;	ZOOM = if the image array was expanded (via REBIN for example)
;		specify this two element vector containing the expansion
;		factor in X and Y.  Default = [1,1].  Must be integer.
; OUTPUTS:
;	Voi = Pointer to modified VOI structure (linked list of ROIs)
; SIDE EFFECTS:
;	Regions are drawn within the drawable.  
;	Set the RESTORE keyword to undo the damage.  
a36 3
   DEVICE, SET_GRAPHICS_FUNCTION=s.color   
   col = 1
   WHILE col LT !d.table_size DO col = col + col
d43 3
d56 2
a57 2
         plots, color=col, xy
        IF KEYWORD_SET(FILL) THEN polyfill, xy, color=col
d67 2
a68 2
         plots, color=col, xy
         IF KEYWORD_SET(FILL) THEN polyfill, xy, color=col
d74 6
a79 3
         IF KEYWORD_SET(FILL) THEN polyfill, xy, color=col $
         ELSE IF (i GE 0) THEN plots,xy[*, i:i+1], color=col $ ; One segment
         ELSE plots, xy, color=col ; All of it
d89 1
a89 1
            polyfill, color=col, imgpoint
d353 1
a353 2
PRO VIDI_DEFVOI, voi, img, cbf, cbv, orient, vthresh, draw, group, ZOOM=zoom, $
                 IMAGE_SIZE=image_size, OFFSET=offset, RESTORE=restore
d356 8
d369 2
a370 2
   temp2 = CW_BGROUP(base1a, /ROW, /NO_RELEASE, /RETURN_NAME,  $
                     ['Read', 'Write', 'Exit'])
d372 3
a374 2
   coltype = CW_BGROUP(base1a, /ROW, /EXCLUSIVE, /NO_REL, /RETURN_NAME, $
                       ['XOR','White'], SET_VALUE=0)
d385 1
a385 1
   temp4 = cw_pdmenu(base2, select4, /RETURN_NAME)
d388 1
a388 1
   temp5 = cw_pdmenu(base2, select5, /RETURN_NAME)
d392 1
a392 1
   temp6 = cw_pdmenu(base2, select6, /RETURN_NAME)
d396 1
a396 1
   name = cw_field(base3, title='as', value='', xsize=28, /RETURN_EVENTS)
d404 1
a404 1
   base4 = widget_base(base1, /ROW)
d406 1
a406 1
   voi_threshold[0] = cw_field(base4, title='Threshold Min', /return_events, $
d408 1
a408 1
   voi_threshold[1] = cw_field(base4, title='Max', /return_events, $
d410 5
d417 1
a417 1
   msg = widget_text(base5, YSIZE=3)
d429 1
a429 1
   lolimit = widget_slider(base6, value=vthresh[0], min=minlim, max=maxlim, $
d431 1
a431 1
   hilimit = widget_slider(base6, value=vthresh[1], min=minlim, max=maxlim, $
a436 1
   IF N_ELEMENTS(zoom) LE 0 THEN zoom = 1
d459 1
a459 1
        color : 6, $		; 3 -> color=white; 6 -> color=XOR
d484 26
a509 11
      IF ev.id EQ draw THEN VIDI_DEFVOI_EVENT, ev, s $
      ELSE IF ev.id EQ s.name THEN s.id = ev.value $
      ELSE IF ev.id EQ voi_threshold[0] THEN BEGIN
         minlim = ev.value
         widget_control,lolimit, set_slider_min=minlim
         widget_control,hilimit, set_slider_min=minlim
         IF (s.vthresh[0] LT minlim) THEN BEGIN
            s.vthresh[0] = minlim
            widget_control,lolimit,set_value=s.vthresh[0]
            IF (s.vthresh[1] LT minlim) THEN BEGIN
               s.vthresh[1] = minlim
d511 4
d516 22
a537 10
         ENDIF
      ENDIF ELSE IF ev.id EQ voi_threshold[1] THEN BEGIN
         maxlim = ev.value
         widget_control,lolimit, set_slider_max=maxlim
         widget_control,hilimit, set_slider_max=maxlim
         IF (s.vthresh[1] GT maxlim) THEN BEGIN
            s.vthresh[1] = maxlim
            widget_control,hilimit,set_value=s.vthresh[1]
            IF (s.vthresh[0] GT maxlim) THEN BEGIN
               s.vthresh[0] = maxlim
d540 3
a542 33
         ENDIF
         IF (minlim GT maxlim) THEN BEGIN
            minlim = maxlim
            widget_control,voi_threshold[0], set_value=minlim
            widget_control,lolimit, set_slider_min=minlim
            widget_control,hilimit, set_slider_min=minlim
         ENDIF 
      ENDIF ELSE IF ev.id EQ lolimit THEN BEGIN
         s.vthresh[0] = ev.value
         IF (s.vthresh[0] GT s.vthresh[1]) THEN BEGIN
            s.vthresh[1] = s.vthresh[0]
            widget_control,hilimit,set_value=s.vthresh[1]
         ENDIF
         vthresh[0] = s.vthresh[0]
         vthresh[1] = s.vthresh[1]
      ENDIF ELSE IF ev.id EQ hilimit THEN BEGIN
         s.vthresh[1] = ev.value
         IF (s.vthresh[1] LT s.vthresh[0]) THEN BEGIN
            s.vthresh[0] = s.vthresh[1]
            widget_control,lolimit,set_value=s.vthresh[0]
         ENDIF
         vthresh[0] = s.vthresh[0]
         vthresh[1] = s.vthresh[1]
      ENDIF ELSE IF ev.id EQ list THEN BEGIN
         s.id = voilist[ev.index]
         widget_control,name,set_value=s.id
         IF (s.saved AND ptr_valid(s.last) AND n NE 0) THEN $
            VIDI_DEFVOI_DRAW, s, -1 ; Erase roi
         s.last = VOI_LOCATE(voi, s.id)
         s.saved = 1
         (*s.roi).type = (*s.last).type
         IF (s.id EQ 'LIMIT') THEN widget_control,dtype, set_value=4
      ENDIF ELSE CASE ev.value of 
d544 10
a553 2
         'XOR' : s.color = 6
         'White' : s.color = 3
d555 11
a565 11
         'Circle' :  BEGIN   
            IF (s.saved) THEN s.saved = 0 $
            ELSE BEGIN 
               IF (n NE 0) THEN VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
               IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
            ENDELSE
            (*s.roi).num = 0   
            (*s.roi).type = 0
            IF (s.id EQ 'LIMIT') THEN BEGIN
               s.id = ''
               widget_control,name,set_value=s.id
d567 1
a567 4
            msg = string(format='(A,/,A)', "Depress and drag Left Button to define the circle.", $
                         "Depress the Middle Button to move the last or current VOI.")
            widget_control, s.msg, set_value=msg
         ENDCASE
d569 11
a579 11
         'Rectangle' :   BEGIN   
            IF (s.saved) THEN s.saved = 0 $
            ELSE BEGIN
               IF (n NE 0) THEN VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
               IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
            ENDELSE
            (*s.roi).num = 0   
            (*s.roi).type = 1
            IF (s.id EQ 'LIMIT') THEN BEGIN
               s.id = ''
               widget_control,name,set_value=s.id
d581 1
a581 4
            msg = string(format='(A,/,A)', "Depress and drag Left Button to define the rectangle.", $
                         "Depress the Middle Button to move the last or current VOI.")
            widget_control, s.msg, set_value=msg
         ENDCASE
d583 8
a590 4
         'Trace':  BEGIN   
            IF (s.saved) THEN s.saved = 0 $
            ELSE BEGIN
               IF (n GE 2) THEN VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
d592 98
a689 5
            ENDELSE
            (*s.roi).num = 0   
            (*s.roi).type = 2
            IF (s.id EQ 'LIMIT') THEN BEGIN
               s.id = ''
d691 57
d749 5
a753 76
            msg = string(format='(A,A,/,A)', "Depress Left Button and to draw the boundary.  ", $
                         "Release the button to complete.", $
                         "Depress the Middle Button to move the last or current VOI.")
            widget_control, s.msg, set_value=msg
         ENDCASE
         
         'Threshold':  BEGIN   
            IF (s.saved) THEN s.saved = 0 $
            ELSE BEGIN
               IF (n GE 2) THEN VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
            ENDELSE
            IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
            (*s.roi).num = 0   
            (*s.roi).type = 3
            IF (s.id EQ 'LIMIT') THEN BEGIN
               s.id = ''
               widget_control,name,set_value=s.id
            ENDIF 
            msg = string(format='(A,/,A,/,A)', "Adjust Lower and Upper Thresholds.", $
                         "Then depress Left Button to select the seed point.", $
                         "(Set both thresholds to maximum to see the pixel of a seed point.)")
            widget_control, s.msg, set_value=msg
         ENDCASE
         
         'Limit':  BEGIN   
            IF (s.saved) THEN s.saved = 0 $
            ELSE BEGIN
               IF (n GE 2) THEN VIDI_DEFVOI_DRAW, s, -1 ; Erase roi   
               IF ((*s.roi).loc NE ptr_new()) THEN ptr_free, (*s.roi).loc
            ENDELSE
            (*s.roi).num = 0   
            (*s.roi).type = 2
            s.id = 'LIMIT'
            widget_control,name,set_value=s.id
            msg = string(format='(A,/,A,/,A)',"Trace boundary limit while depressing Left Button.", $
                         "Then Save with the name LIMIT.", $
                         "Multiple saved limit segments are permissible and apply to ALL planes.")
            widget_control, s.msg, set_value=msg
         ENDCASE
         
         'Read': BEGIN
            fname = dialog_pickfile(FILE=img.fname, FILTER='*.voi', /READ)
            IF (strlen(fname) EQ 0) THEN BEGIN
               widget_control, s.msg, set_value='No file entered'
            ENDIF ELSE BEGIN 
               IF (VOI_READ(voi, fname, msg) NE 0) THEN $
                  widget_control, s.msg, set_value=msg 
               voilist = VOI_LIST(voi)
               listing = VOI_LISTING(voi,voilist,img.dim[2])
               widget_control,list, set_value=listing
            ENDELSE 
            s.roi = VOI_APPEND(s.voi)
            s.saved = 0
            (*s.roi).num = 0   
            (*s.roi).type = 0
            widget_control,dtype, set_value=(*s.roi).type
         ENDCASE
         
         'Write': BEGIN
            fname = dialog_pickfile(FILE=img.fname, FILTER='*.voi', /WRITE)
            IF (strlen(fname) EQ 0) THEN BEGIN
               widget_control, s.msg, set_value='No file entered'
            ENDIF ELSE BEGIN
               (*voi).type = 9802 ; version 2.0, 1998
               IF (VOI_WRITE(voi, fname, msg) NE 0) THEN $
                  widget_control, s.msg, set_value=msg
            ENDELSE 
            widget_control,dtype, set_value=(*s.roi).type
         ENDCASE 
         
         'Only if Defined on this Slice': IF ((*voi).num GT 0) THEN BEGIN
            s.roi = VOI_LOCATE(voi, s.id)
            check = 0
            WHILE (s.roi NE ptr_new()) DO BEGIN
               IF ((*s.roi).id EQ s.id) THEN BEGIN
                  IF (((*s.roi).z EQ img.p) AND ((*s.roi).num GT 0)) THEN BEGIN 
d758 21
a778 1
                  ENDIF ELSE check = 1
a779 5
               s.roi = (*s.roi).next
            ENDWHILE
            IF (check) THEN BEGIN
               msg = string(format='(A,/,A)', "Only components on this slice are shown.", $
                            "Components exist for other slices.")
d781 3
a783 39
            ENDIF
            s.roi = VOI_EOL(voi)
            widget_control,dtype, set_value=(*s.roi).type
         ENDIF 
         
         'Regardless': IF ((*voi).num GT 0) THEN BEGIN
            s.roi = VOI_LOCATE(voi, s.id)
            WHILE (s.roi NE ptr_new()) DO BEGIN
               IF ((*s.roi).id EQ s.id) THEN BEGIN
                  IF ((*s.roi).num GT 0) THEN BEGIN 
                     IF (s.id NE 'LIMIT') THEN VIDI_DEFVOI_DRAW, s, -1, /fill $
                     ELSE VIDI_DEFVOI_DRAW, s, -1
                  ENDIF
               ENDIF 
               s.roi = (*s.roi).next
            ENDWHILE
            s.roi = VOI_EOL(voi)
            widget_control,dtype, set_value=(*s.roi).type
         ENDIF 
         
         ;; Statistics
         
         'Using Planes in which the ROI Components were Defined': BEGIN 
            s.roi = VOI_LOCATE(voi, s.id)
            msg = 'Pixels = 0'  ; default if no data
            IF ptr_valid(s.roi) THEN BEGIN 
               IF ((*s.roi).num GT 0) THEN BEGIN
                  pixels = VOI_COORDS(voi, s.id, img.dim, msg, OFFSET=img.fp)
                  IF ((size(pixels))[2] GT 1) THEN BEGIN
                     pixels = pixels[sort(pixels)]
                     pixels = pixels[uniq(pixels)]
                     msg = VIDI_PROCESS(pixels, img, cbf, cbv)
                  ENDIF
               ENDIF
            ENDIF
            widget_control, s.msg, set_value=msg
            s.roi = VOI_EOL(voi)
            widget_control,dtype, set_value=(*s.roi).type
         ENDELSE
d785 11
a795 10
         'ALL Unique ROI Components using the Current Plane': BEGIN 
            s.roi = VOI_LOCATE(voi, s.id)
            msg = 'Pixels = 0'  ; default if no data
            IF ptr_valid(s.roi) THEN BEGIN 
               IF ((*s.roi).num GT 0) THEN BEGIN
                  pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=img.p, OFFSET=img.fp)
                  IF ((size(pixels))[2] GT 1) THEN BEGIN
                     pixels = pixels[sort(pixels)]
                     pixels = pixels[uniq(pixels)]
                     msg = VIDI_PROCESS(pixels, img, cbf, cbv)
d798 16
a813 16
            ENDIF
            widget_control, s.msg, set_value=msg
            s.roi = VOI_EOL(voi)
            widget_control,dtype, set_value=(*s.roi).type
         ENDELSE
         
         'ONLY ROI Components which were Defined on Current Plane': BEGIN 
            s.roi = VOI_LOCATE(voi, s.id)
            msg = 'Pixels = 0'  ; default if no data
            IF ptr_valid(s.roi) THEN BEGIN 
               IF ((*s.roi).num GT 0) THEN BEGIN
                  pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=img.p, OFFSET=img.fp, /LIMIT)
                  IF ((size(pixels))[2] GT 1) THEN BEGIN
                     pixels = pixels[sort(pixels)]
                     pixels = pixels[uniq(pixels)]
                     msg = VIDI_PROCESS(pixels, img, cbf, cbv)
d816 36
a851 36
            ENDIF
            widget_control, s.msg, set_value=msg
            s.roi = VOI_EOL(voi)
            widget_control,dtype, set_value=(*s.roi).type
         ENDELSE
         
         'Across Planes': BEGIN
            s.roi = VOI_LOCATE(voi, s.id)
            msg = 'Pixels = 0'  ; default if no data
            IF ptr_valid(s.roi) THEN BEGIN 
               IF ((*s.roi).num GT 0) THEN BEGIN
                  pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=1)
                  IF ((size(pixels))[2] GT 1) THEN BEGIN
                     msg = ''
                     pixels = pixels[sort(pixels)]
                     pixels = pixels[uniq(pixels)]
                     n = n_elements(pixels)
                     IF (n GT 0) THEN BEGIN
                        slice = fltarr(img.lp-img.fp)
                        mean = fltarr(img.lp-img.fp)
                        FOR k=img.fp, img.lp DO BEGIN 
                           pix = pixels + long(k-img.fp)*img.dim[0]*img.dim[1]
                           val = (*img.data)[pix]
                           slice[k-img.fp] = k
                           IF (img.len[img.f] GT 0) THEN $
                              mean[k-img.fp] = (moment(val))[0]/(img.len[img.f]/1000.) $
                           ELSE mean[k-img.fp] = (moment(val))[0]
                           print,slice[k-img.fp], mean[k-img.fp]
                        ENDFOR 
                        WINDOW, /free
                        ymin = min(mean)
                        ymax = max(mean)
                        xlabel = 'Slice'
                        PLOT, slice, mean, charsize=1.4,charthick=2,xthick=2,ythick=2, $
                           xtitle=xlabel, ytitle='Counts/Sec', yrange=[ymin,ymax]
                        WSET, s.win
d855 8
a862 9
            ENDIF
            widget_control, s.msg, set_value=msg
            s.roi = VOI_EOL(voi)
            widget_control,dtype, set_value=(*s.roi).type
         ENDCASE
         
         'Across Frames': BEGIN
            msg = 'Sorry... this has not been implemented yet'
            widget_control, s.msg, set_value=msg
d900 26
a925 52
         ENDCASE
         
         'Save': BEGIN
            IF (n_elements((*s.roi).loc) EQ 0) THEN BEGIN
               msg = 'ROI contains no data'
               result=dialog_message(msg, title='ROI was not saved!', /error)
            ENDIF ELSE IF (strtrim(s.id EQ '')) THEN BEGIN
               msg = 'ROI has no ID'
               result=dialog_message(msg, title='ROI was not saved!', /error)
            ENDIF ELSE BEGIN
               newslice = 0
               (*voi).num = (*voi).num + 1
               (*s.roi).orient = orient
               (*s.roi).id = s.id
               (*s.roi).z = img.p
               IF (s.id NE 'LIMIT') THEN BEGIN
                  VIDI_DEFVOI_DRAW, s, -1
                  VIDI_DEFVOI_DRAW, s, -1, /fill
               ENDIF 
               s.last = VOI_SORT(s.voi, s.roi)
               s.roi = VOI_APPEND(s.voi)
               (*s.roi).type = (*s.last).type
               s.saved = 1
               widget_control, s.msg, set_value='ROI saved:   '+s.id
               IF (min('' EQ voilist) EQ 1) THEN voilist = [s.id] $
               ELSE IF (max(s.id EQ voilist) EQ 0) THEN voilist = [voilist,[s.id]]
               voilist = VOI_LIST(voi)
               listing = VOI_LISTING(voi,voilist,img.dim[2])
               widget_control,list, set_value=listing
            ENDELSE
         ENDCASE
         
         'Last Component Entered on This Slice': BEGIN    
            IF (newslice OR NOT ptr_valid(s.last)) THEN BEGIN
               msg = 'There is no last ROI defined for this slice'
               widget_control, s.msg, set_value=msg
            ENDIF ELSE IF ((*s.last).id EQ '') THEN BEGIN
               msg = 'There is no last ROI defined for this slice'
               widget_control, s.msg, set_value=msg
            ENDIF ELSE BEGIN
               s.roi = s.last
               VIDI_DEFVOI_DRAW, s, -1, /fill ; Erase roi
               IF (VOI_DELETE(voi, (*s.last).id, slice=img.p, ptr=s.last) NE 0) THEN BEGIN
                  msg = 'ROI id not found on this slice'
                  widget_control, s.msg, set_value=msg
               ENDIF ELSE BEGIN 
                  s.roi = VOI_EOL(voi)
                  s.last = VOI_LOCATE(voi,s.id)
                  IF (ptr_valid(s.last)) THEN s.saved = 1
                  widget_control,dtype, set_value=(*s.roi).type
                  msg = 'Last ROI component removed from slice '+strtrim(string(img.p),2)
                  widget_control, s.msg, set_value=msg
d929 28
d958 5
a962 10
            ENDELSE 
         ENDCASE
         
         'All Components on All Slices': BEGIN    
            IF (s.id EQ '') THEN BEGIN
               msg = 'No ROI selected'
               widget_control, s.msg, set_value=msg
            ENDIF ELSE BEGIN
               IF (VOI_DELETE(voi, s.id) NE 0) THEN BEGIN
                  msg = 'ROI id not found'
d965 10
a974 5
                  msg = 'ROI removed from all slices'
                  widget_control, s.msg, set_value=msg
                  voilist = VOI_LIST(voi)
                  listing = VOI_LISTING(voi,voilist,img.dim[2])
                  widget_control,list, set_value=listing
d976 7
a982 12
            ENDELSE
            s.roi = VOI_EOL(voi)
            widget_control,dtype, set_value=(*s.roi).type
         ENDCASE
         
         'All Components on This Slice': BEGIN    
            IF (s.id EQ '') THEN BEGIN
               msg = 'No ROI selected'
               widget_control, s.msg, set_value=msg
            ENDIF ELSE BEGIN
               IF (VOI_DELETE(voi, s.id, slice=img.p) NE 0) THEN BEGIN
                  msg = 'ROI id not found on this slice'
d985 10
a994 5
                  msg = 'ROI removed from slice '+strtrim(string(img.p),2)
                  widget_control, s.msg, set_value=msg
                  voilist = VOI_LIST(voi)
                  listing = VOI_LISTING(voi,voilist,img.dim[2])
                  widget_control,list, set_value=listing
d996 12
a1007 16
            ENDELSE
            s.roi = VOI_EOL(voi)
            widget_control,dtype, set_value=(*s.roi).type
         ENDCASE
         
         'Exit':  BEGIN
            IF KEYWORD_SET(restore) THEN BEGIN ; Restore image in draw
               WSET, win
               DEVICE, copy = [0,0, !d.x_size, !d.y_size, 0, 0, backing]
            ENDIF
            WDELETE, backing
            WIDGET_CONTROL, base, /DESTROY
            RETURN
         ENDCASE 
         
      ENDCASE   
@


1.10
log
@typo in Circle
@
text
@d60 1
a60 1
   DEVICE, SET_GRAPHICS=s.color   
d116 1
a116 1
   DEVICE, SET_GRAPHICS=3       ; Copy mode   
@


1.9
log
@update dtype on entry
@
text
@d411 1
a411 1
                     ['Circled', 'Rectangle', 'Trace', 'Threshold','Limit'], SET_VALUE=0)
@


1.8
log
@change VOI file definition to 9802 with coordinates in image space
@
text
@d386 1
a386 1
                     ['XOR','White'], SET_VALUE=0)
d411 1
a411 1
                     ['Circle', 'Rectangle', 'Trace', 'Threshold','Limit'], SET_VALUE=0)
d432 2
a433 2
   vthresh[1] = vthresh[0] < maxlim
   vthresh[0] = vthresh[1] > minlim
d485 1
@


1.7
log
@check range on vthresh
@
text
@d50 2
a51 1
; Uses XOR drawing mode.
d67 1
d78 1
d89 1
d95 5
a99 3
         IF KEYWORD_SET(FILL) THEN polyfill, (*(*s.roi).loc)[*,0:n-1], color=col $
         ELSE IF (i GE 0) THEN plots, (*(*s.roi).loc)[*, i:i+1], color=col $ ; One segment
         ELSE plots, (*(*s.roi).loc)[*,0:n-1], color=col ; All of it
d104 1
d108 1
a108 1
                        [xy[0,k]+1,xy[1,k]-1], [xy[0,k],xy[1,k]-1]]
d128 1
a128 1
   x = (ev.x - s.offset[0]) / s.zoom ; Pixel coordinates (0,0 is lower left)
d130 5
a134 3
   x0 = x+1                     ; Image coordinates (1,1 is upper left)
   y0 = s.image_size[1] - y
   WIDGET_CONTROL, s.pos_w, SET_VALUE=string(x0, y0, format='("Position: ",i,", ",i)')
d136 2
a137 2
   IF (x LT 0) OR (y LT 0) OR $ ; Check if cursor is within image
      (x GE s.image_size[0]) OR (y GE s.image_size[1]) THEN RETURN
d151 1
a151 2
            (*(*s.roi).loc)[0] = t[0]
            (*(*s.roi).loc)[1] = t[1]
d162 2
a163 4
            (*(*s.roi).loc)[0,0] = t[0]
            (*(*s.roi).loc)[1,0] = t[1]
            (*(*s.roi).loc)[0,1] = x
            (*(*s.roi).loc)[1,1] = y
d176 1
a176 1
               IF(x EQ (*(*s.roi).loc)[0,n-1] AND y EQ (*(*s.roi).loc)[1,n-1]) THEN RETURN
d184 1
a184 2
               (*(*s.roi).loc)[0,n] = x ; then add the point to the trace
               (*(*s.roi).loc)[1,n] = y
d188 1
a188 1
            ENDIF ELSE BEGIN ; make certain trace is 4-connected
d191 1
a191 1
               WHILE (x NE lastx OR y NE lasty) DO BEGIN
d198 2
a199 2
                  IF (x NE lastx) THEN BEGIN
                     dx = x-lastx
d208 2
a209 2
                  IF (y NE lasty) THEN BEGIN
                     dy = y-lasty
d237 2
a238 2
            plane_offset = pln*(s.img.dim[1]*s.img.dim[0])
            pix = plane_offset + y0*(s.img.dim[0]) + x0
d240 6
a245 1
            msg = string(format='("Seed: [",I3,",",I3,",",I3,"] =",F10.2)', x0,y0,pln+1,val)
a265 2
               indx = where(ylp GT 0)
               ylp[indx] = s.image_size[1] - ylp[indx]
d267 1
a267 6
           
            IF (val GE s.vthresh[0] AND val LE s.vthresh[1]) THEN BEGIN 
               (*(*s.roi).loc)[0,0] = x0
               (*(*s.roi).loc)[1,0] = y0
               (*s.roi).num = 1
            ENDIF ELSE (*s.roi).num = 0
d269 1
a269 1
            maxx = s.img.dim[0]-1
d271 1
a271 1
            maxy = s.img.dim[1]-1
d282 5
a286 6
               xp = (*(*s.roi).loc)[0,k]
               yp = (*(*s.roi).loc)[1,k]
               xmin = xp-1 > minx
               xmax = xp+1 < maxx
               ymin = yp-1 > miny
               ymax = yp+1 < maxy
d299 1
a299 1
                           pix = plane_offset + yt*(s.img.dim[0]) + xt
d302 1
a302 2
                              (*(*s.roi).loc)[0,n] = xt
                              (*(*s.roi).loc)[1,n] = yt
a313 5
            WHILE (k LT n AND n GT 0) DO BEGIN ; store pixel coordinates
               (*(*s.roi).loc)[0,k] = (*(*s.roi).loc)[0,k] - 1
               (*(*s.roi).loc)[1,k] = s.image_size[1] - (*(*s.roi).loc)[1,k]
               k = k+1
            ENDWHILE 
d331 1
a331 2
            (*(*s.roi).loc)[0] = x
            (*(*s.roi).loc)[1] = y
d341 1
a341 2
               x0 = (*(*s.last).loc)[0,1] - (*(*s.last).loc)[0,0]
               y0 = (*(*s.last).loc)[1,1] - (*(*s.last).loc)[1,0]
d344 1
a344 2
               x0 = (*(*s.roi).loc)[0,1] - (*(*s.roi).loc)[0,0]
               y0 = (*(*s.roi).loc)[1,1] - (*(*s.roi).loc)[1,0]
d346 2
a347 4
            (*(*s.roi).loc)[0,0] = x
            (*(*s.roi).loc)[1,0] = y
            (*(*s.roi).loc)[0,1] = x + x0
            (*(*s.roi).loc)[1,1] = y + y0
d359 1
a359 4
               FOR i=0,n-1 DO BEGIN
                  (*(*s.roi).loc)[0,i] = (*(*s.last).loc)[0,i]
                  (*(*s.roi).loc)[1,i] = (*(*s.last).loc)[1,i]
               ENDFOR
d361 3
a363 8
            x0 = x - (*(*s.roi).loc)[0,0]
            y0 = y - (*(*s.roi).loc)[1,0]
            (*(*s.roi).loc)[0,0] = x
            (*(*s.roi).loc)[1,0] = y
            FOR i=1,n DO BEGIN
               (*(*s.roi).loc)[0,i] = (*(*s.roi).loc)[0,i] + x0
               (*(*s.roi).loc)[1,i] = (*(*s.roi).loc)[1,i] + y0
            ENDFOR
d429 2
a430 2
   minlim = long(imin)
   maxlim = long(imax)
d662 1
a662 1
               (*voi).type = 9701 ; version 1.0, 1997
d714 1
a714 1
                  pixels = VOI_COORDS(voi, s.id, img.dim, msg, OFFSET=img.fp-1)
d732 1
a732 1
                  pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=img.p, OFFSET=img.fp-1)
d750 1
a750 1
                  pixels = VOI_COORDS(voi, s.id, img.dim, msg, SLICE=img.p, OFFSET=img.fp-1, /LIMIT)
d775 2
a776 2
                        slice = fltarr(img.lp-img.fp+1)
                        mean = fltarr(img.lp-img.fp+1)
@


1.6
log
@fix bug in use of limit during thresholding
@
text
@d448 4
@


1.5
log
@remove id name LIMIT when type of voi is changed
@
text
@d246 7
a252 5
                  IF ((*lim).num GT 0) THEN BEGIN 
                     xlp1 = (*(*lim).loc)[0,*]
                     ylp1 = (*(*lim).loc)[1,*]
                     xlp = [xlp, xlp1]
                     ylp = [ylp, ylp1]
d560 1
a560 2
         IF (s.id EQ 'LIMIT') THEN widget_control,dtype, set_value=4 $
         ELSE print,(*s.roi).type
@


1.4
log
@add Limit option for thresholded VOIs
add help messages to msg window
VOI and Limit colors may be XOR or white
@
text
@d573 4
d590 4
d607 4
d625 4
d631 1
a631 1
                        "(Set both thresholds to maximum to see the pixel of a seed point.)")
@


1.3
log
@add metabolic processing to vois
@
text
@d43 1
d59 1
a59 1
   DEVICE, SET_GRAPHICS=6       ; Xor drawing mode   
d90 1
a90 1
      2: IF (n GE 2) THEN BEGIN ; Polygon
d161 1
a161 1
         2: BEGIN               ; Polygon
d177 38
a214 5
            (*(*s.roi).loc)[0,n] = x
            (*(*s.roi).loc)[1,n] = y
            n = n + 1
            (*s.roi).num = n    
            IF ((*s.roi).type EQ 2 AND n GE 2) THEN VIDI_DEFVOI_DRAW, s, n-2
d235 2
a236 1
            print,format='("Seed: [",I3,",",I3,",",I3,"] =",F10.2)', x0,y0,pln+1,val
d238 20
d283 1
a283 1
               FOR xt=xmin,xmax DO BEGIN
d285 1
a285 1
                     xlocs = where(xt EQ (*(*s.roi).loc)[0,0:n])
d287 6
a292 8
                     IF (max(setintersection(xlocs,ylocs)) EQ -1) THEN BEGIN 
                        pix = plane_offset + yt*(s.img.dim[0]) + xt
                        val = (*s.img.data)[pix]
                        IF (val GE s.vthresh[0] AND val LE s.vthresh[1]) THEN BEGIN
                           (*(*s.roi).loc)[0,n] = xt
                           (*(*s.roi).loc)[1,n] = yt
                           n = n + 1
                           (*s.roi).num = n
d294 10
d358 1
a358 1
         2: BEGIN               ; Polygon
d396 2
a397 4
   temp1 = WIDGET_TEXT(base1, YSIZE=2, /FRAME, UVALUE=0, $
                       value=['Left button	= Add or Expand',$
                              'Middle button	= Reposition or Duplicate'])
   temp2 = CW_BGROUP(base1, /ROW, /NO_RELEASE, /RETURN_NAME,  $
d400 3
d426 1
a426 1
                     ['Circle', 'Rectangle', 'Polygon', 'Threshold'], SET_VALUE=0)
d441 1
a441 1
   list = WIDGET_LIST(base5, XSIZE=45, YSIZE=9)
d451 1
a451 1

d478 1
d558 3
a560 2
         widget_control,dtype, set_value=(*s.roi).type
      ENDIF ELSE CASE ev.value of   
d562 3
d573 3
d586 3
d591 1
a591 1
         'Polygon':  BEGIN   
d599 4
d613 4
d619 16
d671 4
a674 1
                     VIDI_DEFVOI_DRAW, s, -1, /fill
d692 5
a696 3
                  IF ((*s.roi).num GT 0) THEN $
                     VIDI_DEFVOI_DRAW, s, -1, /fill
               ENDIF
d853 4
a856 2
               VIDI_DEFVOI_DRAW, s, -1
               VIDI_DEFVOI_DRAW, s, -1, /fill
d936 1
a936 1

@


1.2
log
@add threshold VOI option
@
text
@d325 1
a325 1
PRO VIDI_DEFVOI, voi, img, orient, vthresh, draw, group, ZOOM=zoom, $
d327 1
a327 1
COMMON VIDI
d329 2
d334 2
a335 2
                      value=['Left button	= Add or Expand',$
                             'Middle button	= Reposition or Duplicate'])
d337 2
a338 2
                    ['Read', 'Write', 'Exit'])
  
d345 3
a347 3
             '0\Using Planes in which the ROI Components were Defined', $
             '0\ALL Unique ROI Components using the Current Plane', $
             '0\ONLY ROI Components which were Defined on Current Plane']
d433 1
a433 1
      
d579 1
a579 1
                                              "Components exist for other slices.")
d585 1
a585 1
                  
d599 2
d610 1
a610 7
                     n = n_elements(pixels)
                     IF (n GT 0) THEN BEGIN 
                        val = (*img.data)[pixels]
                        result = moment(val,sdev=sd)
                        msg = string(format='("Mean = ",F12.3,"  (total counts)",/,"SD     = ",F12.3/,"Pixels = ",I)', $
                                     result[0], sd, n)
                     ENDIF
d628 1
a628 7
                     n = n_elements(pixels)
                     IF (n GT 0) THEN BEGIN 
                        val = (*img.data)[pixels]
                        result = moment(val,sdev=sd)
                        msg = string(format='("Mean = ",F12.3,"  (total counts)",/,"SD     = ",F12.3/,"Pixels = ",I)', $
                                     result[0], sd, n)
                     ENDIF
d646 1
a646 7
                     n = n_elements(pixels)
                     IF (n GT 0) THEN BEGIN 
                        val = (*img.data)[pixels]
                        result = moment(val,sdev=sd)
                        msg = string(format='("Mean = ",F12.3,"  (total counts)",/,"SD     = ",F12.3/,"Pixels = ",I)', $
                                     result[0], sd, n)
                     ENDIF
@


1.1
log
@Initial revision
@
text
@d42 1
d95 10
d120 1
a120 1
   x = (ev.x - s.offset[0]) / s.zoom ; Pixel coordinates
d122 1
a122 1
   x0 = x+1
d182 74
d295 1
a295 1
         2: BEGIN ; Polygon
d325 1
a325 1
PRO VIDI_DEFVOI, voi, img, orient, draw, group, ZOOM=zoom, $
d327 1
d340 1
d360 2
a361 1
                    ['Circle', 'Rectangle', 'Polygon'], SET_VALUE=0)
a363 2
   base4 = WIDGET_BASE(base,/COLUMN)
   msg = widget_text(base4, YSIZE=3)
d365 6
a370 1
   list = WIDGET_LIST(base4, XSIZE=45, YSIZE=9)
d372 14
d408 1
a408 1
        saved: 0, $		; 1=roi saved
d412 4
d427 3
d437 47
a483 1
      ELSE IF ev.id EQ list THEN BEGIN
d524 10
d845 1
a845 1
         'Exit':  BEGIN   
@
