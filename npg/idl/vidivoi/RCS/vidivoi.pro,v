head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2011.02.07.19.24.15;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.16.21.16.19;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.14.15.03.52;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.01.20.05.43;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.20.16.59.38;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@PRO VIDIDISP1_EVENT, ev         ; Transverse
   COMMON IMAGE_UTILS
   COMMON VIDI
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 0
   x = ev.x / dsp[0].zoom + 1
   IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN
      fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
      y = (ev.y + 1)/ (fact * dsp[0].zoom)
      y = uv.img[i].dim[1] - y + 1
   ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN
      fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
      y = (ev.y + 1)/ (fact * dsp[0].zoom)
      y = uv.img[i].dim[1] - y + 1
   ENDIF ELSE BEGIN
      y = ev.y / dsp[0].zoom
      y = uv.img[i].dim[1] - y
   ENDELSE
   widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",i,"  Y = ",i)')
END

PRO VIDIDISP2_EVENT, ev         ; Coronal
   COMMON IMAGE_UTILS
   COMMON VIDI
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 1
   x = ev.x / dsp[0].zoom + 1
   fact = (uv.img[i].pdim[2])/(uv.img[i].pdim[0])
   y = (ev.y + 1)/ (fact * dsp[0].zoom)
   y = uv.img[i].dim[2] - y + 1
   widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",i,"  Z = ",i)')
END

PRO VIDI_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON VIDI
   
   catch, error_status
   IF (error_status NE 0) THEN BEGIN
      ok = widget_message(!err_string)
      RETURN
   END
   setuv = 0
   newrange = 0
   redisplay = 0
   xloc2 = 100
   yloc2 = 70
   widget_control, ev.top, get_uvalue=uv
   widget_control, uv.wid.msg, set_value=''
   
   i = 0
   
   CASE ev.id OF
      
      uv.wid.file: BEGIN
         i = ev.value - 1
         uv.img[i].ff = 1
         uv.img[i].lf = 1
         uv.img[i].fp = 1
         uv.img[i].lp = 1024
         fname = ''
         IF (strlen(uv.img[i].fname) GT 0) THEN fname = uv.img[i].fname 
         IF (strlen(fname) GT 0) THEN BEGIN 
            l1 = rstrpos(fname,'/')
            l2 = rstrpos(fname,'.')
            IF (l2 GT 0) THEN BEGIN
               str1 = string(replicate(32b,(l2-l1-2)))
               str1 = '*'+str1
               strput,fname,str1,l1+1
               fname = strcompress(fname, /remove_all)
            ENDIF ELSE fname = '*'
         ENDIF ELSE fname = '*'
         
         fname = dialog_pickfile(FILE=uv.img[i].fname, FILTER=fname, /READ)
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN 
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (getframe(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
               uv.img[i].fname = ''
               RETURN
            ENDIF
            uv.img[i] = image
           	uv.img[i].lf = uv.img[i].dim[1]
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            IF (i EQ 0) THEN BEGIN
            	uv.img[i].p = uv.img[i].p > uv.img[i].fp
            	uv.img[i].p = uv.img[i].p < uv.img[i].lp
            	uv.img[i].f = uv.img[i].f < uv.img[i].lf
				dupimage, uv
            	newrange = 1
			ENDIF
            setuv = 1
            redisplay = 1
         ENDELSE 
      ENDCASE 

      ;; -------------------------------------------------------------------------------
      uv.wid.fname[0]: BEGIN	; same as last
         i = 0
         fname = ev.value
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN 
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (getframe(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
               uv.img[i].fname = ''
               RETURN
            ENDIF
            uv.img[i] = image
           	uv.img[i].lf = uv.img[i].dim[1]
            uv.img[i].p = uv.img[i].p > uv.img[i].fp
            uv.img[i].p = uv.img[i].p < uv.img[i].lp
            uv.img[i].f = uv.img[i].f < uv.img[i].lf
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            dupimage, uv
            setuv = 1
            newrange = 1
            redisplay = 1
         ENDELSE 
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.fname[1]: BEGIN	; same as last
         i = 1
         fname = ev.value
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN 
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (getframe(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
               uv.img[i].fname = ''
               RETURN
            ENDIF
            uv.img[i] = image
           	uv.img[i].lf = uv.img[i].dim[1]
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            setuv = 1
            redisplay = 1
         ENDELSE 
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.zoom: BEGIN
         dsp[0].zoom = ev.value
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.color: BEGIN
         CASE ev.value OF
            1: xloadct, group=uv.wid.base, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"

            2: xloadct, group=uv.wid.base, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
         ENDCASE
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.scale: BEGIN
         VIDI_SCALE, uv.wid.base
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.edit: BEGIN
         i = ev.value-1
         IF (uv.wid.win[i] GT 0) THEN BEGIN  
            VIDI_EDIT, uv, i, dsp[0].zoom
            setuv = 1
         ENDIF ELSE widget_control, uv.wid.msg, set_value='NO IMAGE displayed for Edit'
      ENDCASE
      
      ;; -------------------------------------------------------------------------------
      uv.wid.save: BEGIN
         temp = ev.top
         fname = uv.img[1].fname
         IF (fname EQ uv.img[i].fname) THEN fname = ''
         savefile = widget_base(group_leader=uv.wid.base)
         text = cw_field(savefile, title='Filename: ', value=fname, $
                         xsize=80, /STRING, /RETURN_EVENTS)
         widget_control, savefile, /realize
         ev = WIDGET_EVENT(savefile)
         widget_control, savefile, /DESTROY
         fname = ev.value
         ev.top = temp
         IF (strtrim(fname EQ '')) THEN BEGIN
            msg = 'No Filename Entered'
            result=dialog_message(msg, title='Objects were NOT SAVED!', /error)
            msg = 'Object was NOT saved!'
            widget_control, uv.wid.msg, set_value=msg
         ENDIF ELSE BEGIN 
            msg = ''
            stat = putinterfile(uv.img[1], fname, msg)
            uv.img[1].fname = fname
            widget_control, uv.wid.msg, set_value=msg
            widget_control, uv.wid.fname[1], set_value=uv.img[1].fname
            setuv = 1
         ENDELSE
      ENDCASE

      ;; -------------------------------------------------------------------------------
      uv.wid.exit: BEGIN
         FOR i=0, 1 DO if (uv.img[i].data NE ptr_new()) THEN ptr_free, uv.img[i].data
         widget_control, ev.top, /destroy
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.up: BEGIN
         IF (uv.img[i].p GT uv.img[i].fp) THEN uv.img[i].p = uv.img[i].p-1
         widget_control, uv.wid.slider1, set_value=uv.img[i].p
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.down: BEGIN
         IF (uv.img[i].p LT lp) THEN uv.img[i].p = uv.img[i].p+1
         widget_control, uv.wid.slider1, set_value=uv.img[i].p
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.ant: BEGIN
         IF (uv.img[i].f GT uv.img[i].ff) THEN uv.img[i].f = uv.img[i].f-1
         widget_control, uv.wid.slider2, set_value=uv.img[i].f
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.post: BEGIN
         IF (uv.img[i].f LT uv.img[i].lf) THEN uv.img[i].f = uv.img[i].f+1
         widget_control, uv.wid.slider2, set_value=uv.img[i].f
         setuv = 1
         redisplay = 1
      ENDCASE 

      ;; -------------------------------------------------------------------------------
      uv.wid.slider1: BEGIN
         widget_control, uv.wid.slider1, get_value=slice
         IF (slice LE lp) THEN uv.img[i].p = slice
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.slider2: BEGIN
         widget_control, uv.wid.slider2, get_value=plane
         IF (plane LE uv.img[i].lf) THEN uv.img[i].f = plane
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ELSE:
      
   ENDCASE
   
   ;;-----------------------------------------------------------------------------------
   i = 0
   IF (newrange) THEN BEGIN
      fp = uv.img[i].fp
      lp = uv.img[i].lp
      ff = 1
      lf = uv.img[i].lf
      widget_control, uv.wid.slider1, set_slider_min=fp
      widget_control, uv.wid.slider1, set_slider_max=lp
      widget_control, uv.wid.slider2, set_slider_max=lf
      widget_control, uv.wid.slider1, set_value=uv.img[i].p
   ENDIF 

   ;;-----------------------------------------------------------------------------------
   i = 0
   IF (redisplay) THEN BEGIN 
      IF (strlen(uv.img[i].fname) EQ 0) THEN BEGIN 
         widget_control, uv.wid.msg, set_value='No file has been entered'
         redisplay = 0
      ENDIF 
      FOR i=0, 1 DO BEGIN
         widget_control, uv.wid.win[i], bad_id=status
         IF (status NE 0) then dsp[i].init = 0
         
         IF (redisplay AND (dsp[i].init EQ 0)) THEN BEGIN
            dispbase = widget_base(TITLE='Image '+ strcompress(string(i+1)), $
                                   group_leader=uv.wid.base, uvalue=ev.top)
            win = widget_draw(dispbase, xsize=dsp[i].xsize, ysize=dsp[i].ysize, /button, /motion)
            !p.background = 0
            scrnsize = get_screen_size()
            yloc = scrnsize[1]/2
            IF (yloc GT 300) THEN yloc = 300
            CASE i OF
               0: xloc = 0
               1: xloc = scrnsize[0]/2
            ENDCASE
            widget_control, dispbase, /realize, xoffset=xloc, yoffset=yloc
            widget_control, win, get_value=windowIndex
            wset, windowIndex
            xmanager, "VIDIDISP"+strcompress(string(i+1),/remove_all), dispbase
            uv.wid.win[i] = win
            dsp[i].id = windowIndex
            dsp[i].init = 1
            setuv = 1
         ENDIF 
      ENDFOR
      VIDI_DISPLAY, uv
   ENDIF 

   IF (setuv) THEN widget_control, ev.top, set_uvalue=uv
END


PRO VIDIVOI
@@IMAGE_UTILS.h
@@VIDI.h

   on_error, 2

   base = widget_base (TITLE='VIDIVOI', /COLUMN)
   base1 = widget_base(base, row=1)
   
   select1 = ['1\Get Image','0\Image','0\Objects']
   file = cw_pdmenu(base1, select1)

   select2 = ['1\Magnify','0\ 1 ','0\ 2 ','0\ 3 ','0\ 4 ','0\ 5 ','0\ 6 ']
   zoom = cw_pdmenu(base1, select2)
   
   select3 = ['1\Color','0\Image','0\Objects']
   color = cw_pdmenu(base1, select3)
   
   scale = widget_button(base1, value='Scale')
   
   select4 = ['1\Edit','0\Transverse','0\Coronal']
   edit = cw_pdmenu(base1, select4)
   
   save = widget_button(base1, value='Save Object')

   exit = widget_button(base1, value='Exit')
   
   base2 = widget_base(base, row=2)
   base2a = widget_base(base2, col=2)
   fname = lonarr(2)
   fname[0] = cw_field(base2a, title='Image', value='', xsize=85, /RETURN_EVENTS)
   max = cw_field(base2a, title='Max', /noedit, value=0, xsize=10, ysize=1)
   fname[1] = cw_field(base2, title='Object', value='', xsize=85, /RETURN_EVENTS)

   base4 = widget_base(base,col=2)
   base5a = widget_base(base4,row=2)
   slice = 1
   slider1 = widget_slider(base5a, value=slice, min=1, max=47, xsize=400)
   base5b = widget_base(base5a,row=1)
   up = widget_button(base5b, value='<- Up  ')
   down = widget_button(base5b, value=' Down ->')  

   base6a = widget_base(base4,row=2)
   plane = 1
   slider2 = widget_slider(base6a, value=plane, min=1, max=100, xsize=600)
   base6b = widget_base(base6a,row=1)
   ant = widget_button(base6b, value='<- Anterior  ')
   post = widget_button(base6b, value=' Posterior ->')  

   msg = widget_text(base)

   voi = ptr_new({VOI})
   (*voi).id = 'VOI'
   
   wid = {WIDGETS,		$
          base     : base,	$ ; top level base
          file     : file,	$ ; file selection button id
          zoom     : zoom,	$ ; magnification selection button id
          color    : color,	$ ; color selection button id
          scale    : scale,	$ ; scaling menu selection button id
          edit     : edit,	$ ; edit menu
          editval  : 0,		$ ; value to fill in edit operations
          rsign    : 2,		$ ; relation to rthresh determining replacement
          rthresh  : 0,		$ ; threshold for determining replacement
          rslab    : 0,		$ ; number of planes above&below to replace
          onum     : 1,		$ ; object number
          save     : save,	$ ; save menu
          up       : up,	$ ; up button
          down     : down,	$ ; down button
          ant      : ant,	$ ; ant button
          post     : post,	$ ; post button
          exit     : exit,	$ ; exit selection button id
          fname    : fname,	$ ; filename field for image
          max      : max,	$ ; maximum value displayed
          slider1   : slider1,	$ ; slice selection slider id
          slider2   : slider2,	$ ; slice selection slider id
          msg      : msg,	$ ; message field id
          win      : lonarr(2),	$ ; draw window widget id
          voi      : voi    $   ; pointer to VOI linked list
         }

   FOR i= 0, 1 DO dsp.init = 0
   FOR i= 0, 1 DO dsp.set = 1
   FOR i= 0, 1 DO dsp.zoom = 1
   FOR i=0, 1 DO dsp[i].range = 0
   nc = (!d.n_colors-1)/2
   dsp[0].bot = 0
   dsp[0].nc = nc
   dsp[1].bot = nc
   dsp[1].nc = 11 
   loadct, 0, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
      file="/usr/local/npg/idl/color_tables/videen.tbl"
   loadct, 5, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
      file="/usr/local/npg/idl/color_tables/videen.tbl"

   img = {VIMAGE}
   uv = {wid:wid, img:[img,img]}

   ;; Use existing structure by treating f, ff, lf as coronal planes
   FOR i=0,1 DO BEGIN
      uv.img[i].f = 1
      uv.img[i].p = 1
      uv.img[i].ff = 1
      uv.img[i].lf = 1
      uv.img[i].fp = 1
      uv.img[i].lp = 1024
   ENDFOR
   
   widget_control, base, set_uvalue=uv
   widget_control, base, /realize, xoffset=0, yoffset=0
   xmanager, "VIDIVOI", base, EVENT_HANDLER='VIDI_EVENT'

END 
@


1.4
log
@fix bugs in slider2 and posterior
@
text
@d62 1
a62 1
         uv.img[i].lp = 512
d433 1
a433 1
      uv.img[i].lp = 512
@


1.3
log
@fix ff, lf after reading new image
@
text
@a232 1
         p = uv.img[i].p
d249 1
a249 2
         f = uv.img[i].f
         IF (uv.img[i].f LT lf) THEN uv.img[i].f = uv.img[i].f+1
d266 1
a266 1
         IF (plane LE lf) THEN uv.img[i].f = plane
@


1.2
log
@10 objects
@
text
@d89 1
d93 3
a95 6
            	tmp = uv.img[i].p
            	uv.img[i].p = tmp > uv.img[i].fp
            	uv.img[i].p = tmp < uv.img[i].lp
            	tmp = uv.img[i].f
            	uv.img[i].f = tmp > uv.img[i].ff
            	uv.img[i].f = tmp < uv.img[i].lf
d120 4
a123 6
            tmp = uv.img[i].p
            uv.img[i].p = tmp > uv.img[i].fp
            uv.img[i].p = tmp < uv.img[i].lp
            tmp = uv.img[i].f
            uv.img[i].f = tmp > uv.img[i].ff
            uv.img[i].f = tmp < uv.img[i].lf
d149 1
d283 1
a283 1
      lf = uv.img[i].dim[1]
a286 2
      IF (uv.img[i].p GT lp) THEN uv.img[i].p = lp
      IF (uv.img[i].p LT fp) THEN uv.img[i].p = fp
a287 1
      IF (uv.img[i].f GT uv.img[i].lf) THEN uv.img[i].f = uv.img[i].lf
@


1.1
log
@Initial revision
@
text
@d425 1
a425 1
   dsp[1].nc = 5
d428 1
a428 1
   loadct, 35, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
@
