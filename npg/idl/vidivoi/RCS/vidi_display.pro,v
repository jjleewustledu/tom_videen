head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2000.09.21.15.36.12;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.21.15.33.40;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.20.16.59.38;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@FUNCTION VIDI_DISPLAY_SCALE, image, type, i, xsize, ysize, sample, stype
   COMMON VIDI
   
   CASE i of
      0: BEGIN			; Case for IMAGEs
         top = dsp[0].nc-1
         IF (dsp[0].type EQ 1) THEN BEGIN ; Manual scaling
            mini = dsp[0].min
            maxi = dsp[0].max
         ENDIF ELSE BEGIN       ; Auto scaling
            mini = 0
            maxi = max(image)
         ENDELSE
         dsp[0].amin = mini
         dsp[0].amax = maxi
         CASE stype of
            0: img0 = bytscl(rebin(image, xsize, ysize, SAMPLE=sample), $
                             MIN=mini, MAX=maxi, TOP=top) 
            1: img0 = bytscl(congrid(image, xsize, ysize, /INTERP ), $
                             MIN=mini, MAX=maxi, TOP=top)
         ENDCASE
      END

      1: BEGIN			; Case for OBJECTs and LINEs
         top = dsp[0].nc-1
         mini = 0
         maxi = top
         CASE stype of
            0: img0 = bytscl(rebin(image, xsize, ysize, SAMPLE=sample), $
                             MIN=mini, MAX=maxi, TOP=top) 
            1: img0 = bytscl(congrid(image, xsize, ysize), $
                             MIN=mini, MAX=maxi, TOP=top)
         ENDCASE
      END
   ENDCASE
   RETURN, img0
END
      
PRO VIDI_DISPLAY, uv, SAMPLE=sample
   ;; Scale and display image 
   ;; uv = the info structure for this display
   ;; sample = use nearest neighbor sampling for rebin
   COMMON IMAGE_UTILS
   COMMON VIDI
   
   IF (NOT (keyword_set(sample))) THEN sample=0

   img = uv.img[0]
   obj = uv.img[1]
   IF (img.data EQ ptr_new()) THEN BEGIN
      widget_control, uv.wid.msg, set_value='No data'
      return
   ENDIF

   zoom = dsp[0].zoom
   x0 = 0
   xsize = img.dim[x0] * zoom

   ;; Display Transverse (i=0) in Window 1, Coronal (i=1) in Window 2

   FOR i=0,1 DO BEGIN
      CASE i OF
         0: BEGIN
            y0 = 1
            pp = img.p - img.fp
            image = reform((*img.data)[*,*,pp,0])
            object = reform((*obj.data)[*,*,pp,0])
         END
         1: BEGIN
            y0 = 2
            pp = img.f - img.ff
            image = reform((*img.data)[*,pp,*,0])
            object = reform((*obj.data)[*,pp,*,0])
         END
      ENDCASE

      ysize = img.dim[y0] * zoom
      stype = 1
      IF (img.pdim[y0] GT img.pdim[x0]) THEN BEGIN 
         fact = (img.pdim[y0])/(img.pdim[x0])
         ysize = fact * img.dim[y0] * zoom
      ENDIF ELSE IF (img.pdim[0] GT img.pdim[y0]) THEN BEGIN 
         fact = (img.pdim[x0])/(img.pdim[y0])
         xsize = fact * img.dim[x0] * zoom
      ENDIF ELSE stype = 0

      img0 = VIDI_DISPLAY_SCALE (image, img.itype, 0, xsize, ysize, sample, stype)

      line = intarr(img.dim[x0],img.dim[y0])
      line[*,*] = 0
      CASE i OF
         0: line[*,img.f-1] = 1
         1: line[*,img.p-1] = 1
      ENDCASE
      line0 = reform(line[*,*])
      ln0 = VIDI_DISPLAY_SCALE (line0, type(0), 1, xsize, ysize, sample, stype)
      idx = where(ln0 GT 0, cnt)
      IF (cnt GT 0) THEN img0[idx] = dsp[0].nc-1

      sample = 1
      obj0 = VIDI_DISPLAY_SCALE (object, obj.itype, 1, xsize, ysize, sample, stype)
      FOR n=1,dsp[1].nc-1 DO BEGIN
         val = dsp[0].nc + dsp[0].bot + n
         a = where(obj0 EQ n, cnta)
         IF (cnta GT 0) THEN BEGIN
            a1 = a(where (obj0[a+1] NE n))
            a2 = a(where (obj0[a-1] NE n))
            a3 = a(where (obj0[a+xsize] NE n))
            a4 = a(where (obj0[a-xsize] NE n))
            idx = [a1,a2,a3,a4]
            img0[idx] = val
         ENDIF
      ENDFOR
      widget_control, uv.wid.win[i], draw_xsize=xsize, draw_ysize=ysize
      wset, dsp[i].id
      tv, img0
   ENDFOR
   widget_control,uv.wid.max[0],set_value=dsp[0].amax
END
@


1.2
log
@*** empty log message ***
@
text
@a97 1
      print,i,cnt
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
      0: BEGIN
d19 1
a19 1
            1: img0 = bytscl(congrid(image, xsize, ysize, /INTERP), $
d24 1
a24 1
      1: BEGIN
d59 1
a59 1
   ;; Display Transverse in Window 1, Coronal in Window 2
d96 1
a96 1
      ln0 = VIDI_DISPLAY_SCALE (line0, type(0), i, xsize, ysize, sample, stype)
d98 1
@
