head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2000.05.22.15.01.11;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	96.10.31.20.22.41;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.01.05.16.58.10;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@; $Id: sample_pts.pro,v 1.2 1996/10/31 20:22:41 tom Exp tom $
;
;+
; NAME:
;   SAMPLE_PTS
;
; PURPOSE:
;   Get, write, and plot all non-zero points from an image file.
;
; CATEGORY:
;   Image processing.
;
; CALLING SEQUENCE:
;   SAMPLE_PTS
;
; INPUTS:
;   None.  Prompts for filename.
;
; OUTPUTS:
;   List of the non-zero points.
;
; MODIFICATION HISTORY:
;   Written by: Tom Videen, Jan 1996
;-

pro sample_pts

START:
	filename = " "
	read, PROMPT="File name: ", filename
	if (not exist_file(filename)) then begin
    	print, "ERROR: File ", filename, " not found"
    	goto, START
	endif
 
; Determine image array size & type
; ---------------------------------
	asize = intarr(3)
	pixsize = fltarr(3)
	analyze_dim, filename, asize, dsize, pixsize

	if (dsize eq 8) then $
		data = bytarr(asize(0), asize(1), asize(2)) $
	else $
		data = intarr(asize(0), asize(1), asize(2))

; Read array & extract the non-zero coordinates for each segment of the N.
; ----------------------------------------------------------------------------

	get_lun,lu
	openr,lu,filename
	readu,lu,data,TRANSFER_COUNT=count
	close,lu
	free_lun,lu
	nonzero_coords, data, nzpixels
	print, filename
	for i=0,(size(nzpixels))(2)-1 do $
		print, nzpixels(*,i)

; Plot all points 
; --------------------------------------------------

	!P.MULTI = [0,1,1]

ABSCISSA:
	ch = 'x'
	read, PROMPT="Dimension of abscissa (x,y,z) ", ch
	if (ch eq 'x') then begin $
		xc = 0
		xtitle = 'X'
	endif else if (ch eq 'y') then begin $
		xc = 1
		xtitle = 'Y'
	endif else if (ch eq 'z') then begin $
		xc = 2
		xtitle = 'Z'
	endif else goto, ABSCISSA
	
ORDINATE:
	ch = 'y'
	read, PROMPT="Dimension of ordinate (x,y,z) ", ch
	if (ch eq 'x') then begin $
		yc = 0
		ytitle = 'X'
	endif else if (ch eq 'y') then begin $
		yc = 1
		ytitle = 'Y'
	endif else if (ch eq 'z') then begin $
		yc = 2
		ytitle = 'Z'
	endif else goto, ORDINATE
	
	if (xc ne 0 and yc ne 0) then zc = 0 $
	else if (xc ne 1 and yc ne 1) then zc = 1 $
	else zc = 2

	xp = nzpixels(xc,*)
 	yp = rotate(nzpixels(yc,*),4)
	plot, xp, yp, psym=1, XTITLE=xtitle, YTITLE=ytitle

	ch="n"
	read, PROMPT="Type y to plot another orientation (y,n) ", ch
	if (ch eq 'Y' or ch eq 'y') then goto, ABSCISSA

	ch="x"
	read, PROMPT="Type x to exit  ", ch
	if (ch ne 'X' and ch ne 'x') then goto, START
	exit
end

@


1.2
log
@runtime version
@
text
@d1 1
a1 1
; $Id: sample_pts.pro,v 1.1 1996/01/05 16:58:10 tom Exp tom $
d26 1
a26 1
pro main
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
; $Id$
d26 1
a26 1
pro sample_pts
@
