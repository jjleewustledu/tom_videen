head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	99.03.11.15.31.46;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.05.13.19.55.05;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.03.10.20.41.35;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@modify printout
@
text
@; $Id: line_convol.pro,v 1.2 1998/05/13 19:55:05 tom Exp tom $
;+
; NAME:
;	LINE_CONVOL
;
; PURPOSE:
;	Convolution across 1-dimension of 3-D matrix using a 1-D gaussian.
;
; CATEGORY:
;   Image processing
;
; CALLING SEQUENCE:
;	LINE_CONVOL, Matrix, Halfwidth, Dim
;
; INPUTS:
;	Matrix = 3-D matrix (float)
;	Halfwidth = half-width of gaussian (in pixels)
;	Dim = index to dimension to convolve (0-2)
;
; OUTPUTS:
;	Matrix = 3-D matrix (float)
;
; RESTRICTIONS:
;	Matrix should be of type FLOAT
;	
; FUNCTION:
;	CONVOL is used to convolve mat with a gaussian with specified halfwidth in pixels.
;
; MODIFICATION HISTORY:
;	Tom Videen, March 1998.
;-

PRO LINE_CONVOL, mat, halfwidth, dim

   on_error,2
   IF n_params() NE 3 THEN message,'Usage: line_convol, matrix, halfwidth, dim'
   IF (dim LT 0 OR dim GT 2) THEN message,'Specified dimension, '+dim+' is not in matrix'
   
   prec = 3                     ; larger values for greater precision
   sigma = halfwidth/2.354
   n_pts = round(prec*sigma)*2 + 1 ; number of points in kernel (odd)
   sx = (size(mat))(1)
   sy = (size(mat))(2)
   sz = (size(mat))(3)
   line = fltarr((size(mat))(dim+1))
   
   CASE dim OF
      
      0: BEGIN
         IF (n_pts GE sx) THEN n_pts = ((sx-1)/2)*2 + 1 ; kernel size < array size
         x = (findgen(n_pts) - n_pts/2)	; locations to compute kernel
         gaus = exp(-0.5*(x/sigma)^2) ; Gaussian of width sigma
         print, FORMAT = '("Filtering X    Sigma =",F8.4)', sigma
         FOR i = 0, sy-1 DO BEGIN
            IF (i MOD 10 EQ 0) THEN print, FORMAT = '($,".")'
            FOR j = 0, sz-1 DO BEGIN
               FOR k= 0, sx-1 DO BEGIN ; Extract a vector, convolve, then replace
                  line(k) = mat(k,i,j)
               ENDFOR
               w = convol(line, gaus, /edge_truncate) / total(gaus)
               FOR k= 0, sx-1 DO BEGIN
                  mat(k,i,j) = w(k)
               ENDFOR
            ENDFOR
         ENDFOR
         print
      ENDCASE

      1: BEGIN
         IF (n_pts GE sy) THEN n_pts = ((sy-1)/2)*2 + 1 ; kernel size < array size
         x = (findgen(n_pts) - n_pts/2)	; locations to compute kernel
         gaus = exp(-0.5*(x/sigma)^2)	; Gaussian of width sigma
         print, FORMAT = '("Filtering Y    Sigma =",F8.4)', sigma
         FOR i = 0, sx-1 DO BEGIN
            IF (i MOD 10 EQ 0) THEN print, FORMAT = '($,".")'
            FOR j = 0, sz-1 DO BEGIN
               FOR k= 0, sy-1 DO BEGIN ; Extract a vector, convolve, then replace
                  line(k) = mat(i,k,j)
               ENDFOR
               w = convol(line, gaus, /edge_truncate) / total(gaus)
               FOR k= 0, sy-1 DO BEGIN
                  mat(i,k,j) = w(k)
               ENDFOR
            ENDFOR
         ENDFOR
         print
      ENDCASE

      2: BEGIN
         IF (n_pts GE sz) THEN n_pts = ((sz-1)/2)*2 + 1 ; kernel size < array size
         x = (findgen(n_pts) - n_pts/2) ; x locations to compute kernel
         gaus = exp(-0.5*(x/sigma)^2) ; Gaussian of width sigma
         print, FORMAT = '("Filtering Z    Sigma =",F8.4)', sigma
         FOR i = 0, sx-1 DO BEGIN
            IF (i MOD 10 EQ 0) THEN print, FORMAT = '($,".")'
            FOR j = 0, sy-1 DO BEGIN
               FOR k= 0, sz-1 DO BEGIN ; Extract a vector, convolve, then replace
                  line(k) = mat(i,j,k)
               ENDFOR
               w = convol(line, gaus, /edge_truncate) / total(gaus)
               FOR k= 0, sz-1 DO BEGIN
                  mat(i,j,k) = w(k)
               ENDFOR
            ENDFOR
         ENDFOR
         print
      ENDCASE
      
   ENDCASE 
END
@


1.2
log
@change messages
@
text
@d1 1
a1 1
; $Id: line_convol.pro,v 1.1 1998/03/10 20:41:35 tom Exp tom $
d55 1
d66 1
d75 1
d86 1
d95 1
d106 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
; $Id$
d53 1
a53 1
         print, FORMAT = '("Filtering X:    Sigma =",F8.4)', sigma
d71 1
a71 1
         print, FORMAT = '("Filtering Y:    Sigma =",F8.4)', sigma
d89 1
a89 1
         print, FORMAT = '("Filtering Z:    Sigma =",F8.4)', sigma
@
