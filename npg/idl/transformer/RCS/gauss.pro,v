head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2002.10.29.17.29.35;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@; NAME:
;	GAUSS3D
;
; PURPOSE:
;	Filter an image with 2-D Gaussian.
;
; INPUTS: passed from Environment variables
;	IMG: input array
;	F0:	 cutoff  (smaller number -> greater smoothing; 1.0 = practically no smooth)
;
; OUTPUTS:
;	TMP: output array
;
; Notes:
;	Padding the array by doubling it nearly doubles overall processing time
;	but eliminates wraparound artifact at edges.
;

FUNCTION GAUSS, IMG, F0
   on_error, 2
   mx = (size(img))[1]
   my = (size(img))[2]

   nx = 2*mx	; pad array 
   ny = 2*my
   x0 = mx/2
   y0 = my/2
   x1 = x0 + mx - 1
   y1 = y0 + my - 1
   tmp = fltarr(nx,ny)
   tmp[x0:x1,y0:y1] = img

   dx = 1.0/nx
   dy = 1.0/ny
   tmp = FFT(tmp,/OVERWRITE)
   
   fc = -ALOG(2.)/f0^2
   FOR  j = 0, ny-1 DO BEGIN
      IF (j LE ny/2) THEN fy = dy*j ELSE fy = dy*(ny-j)
      FOR i = 0, nx-1 DO BEGIN
         IF (i LE nx/2) THEN fx = dx*i ELSE fx = dx*(nx-i)
         f = fx^2 + fy^2
         fac = EXP(f*fc)  ; Floating underflow can occur here
         tmp[i,j] = fac * tmp[i,j]
      ENDFOR
   ENDFOR
   tmp = FFT(tmp, /INVERSE)
   new = float(tmp[x0:x1,y0:y1])
   return, new

END 
@
