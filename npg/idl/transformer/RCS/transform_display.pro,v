head	1.1;
access;
symbols;
locks
	tom:1.1; strict;
comment	@# @;


1.1
date	2002.05.23.18.20.07;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@FUNCTION TRANSFORM_DISPLAY_SCALE, image, type, i, xsize, ysize, sample, stype
   COMMON TRANSFORMER
   
   IF (dsp[i].type EQ 1) THEN BEGIN ; Manual scaling
      mini = dsp[i].min
      maxi = dsp[i].max
   ENDIF ELSE BEGIN             ; Auto scaling
      IF (dsp[i].range EQ 0) THEN BEGIN
         mini = 0
         maxi = max(image)
      ENDIF ELSE IF (dsp[i].range EQ 1) THEN BEGIN
         mini = 0
         maxi = -min(image)
      ENDIF ELSE BEGIN
         mini = min(image)
         maxi = max(image)
         IF (-mini GT maxi) THEN maxi = -mini
      ENDELSE
   ENDELSE
   dsp[i].amin = mini
   dsp[i].amax = maxi
   nc = dsp[i].nc
   IF (stype EQ 0) THEN BEGIN
      IF (dsp[i].range EQ 1) THEN $
         temp1 = bytscl(rebin(-(image), xsize, ysize, SAMPLE=sample), $
                        MIN=mini, MAX=maxi, TOP=(nc-1)) $
      ELSE temp1 = bytscl(rebin(image, xsize, ysize, SAMPLE=sample), $
                          MIN=mini, MAX=maxi, TOP=(nc-1))
   ENDIF ELSE BEGIN 
      IF (dsp[i].range EQ 1) THEN $
         temp1 = bytscl(congrid(-(image), xsize, ysize, /INTERP), $
                        MIN=mini, MAX=maxi, TOP=(nc-1)) $
      ELSE temp1 = bytscl(congrid(image, xsize, ysize, /INTERP), $
                          MIN=mini, MAX=maxi, TOP=(nc-1))
   ENDELSE
   RETURN, temp1
END
      
PRO TRANSFORM_DISPLAY, uv, SAMPLE=sample
   ;; Scale and display image i
   ;; uv = the info structure for this display
   ;; sample = use nearest neighbor sampling for rebin
   COMMON IMAGE_UTILS
   COMMON TRANSFORMER
   
   IF (NOT (keyword_set(sample))) THEN SAMPLE=0
   FOR i= 0, 1 DO BEGIN
      IF (uv.img[i].data NE ptr_new()) THEN BEGIN
         slice = uv.img[i].p - uv.img[i].fp
         x0 = 0
         y0 = 1
         image = reform((*uv.img[i].data)[*,*,slice])
         xsize = uv.img[i].dim[x0] * dsp[i].zoom
         ysize = uv.img[i].dim[y0] * dsp[i].zoom
         stype = 1
         IF (uv.img[i].pdim[y0] GT uv.img[i].pdim[x0]) THEN BEGIN 
            fact = (uv.img[i].pdim[y0])/(uv.img[i].pdim[x0])
            ysize = fact * uv.img[i].dim[y0] * dsp[i].zoom
         ENDIF ELSE IF (uv.img[i].pdim[0] GT uv.img[i].pdim[y0]) THEN BEGIN 
            fact = (uv.img[i].pdim[x0])/(uv.img[i].pdim[y0])
            xsize = fact * uv.img[i].dim[x0] * dsp[i].zoom
         ENDIF ELSE stype = 0

         temp1 = TRANSFORM_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample, stype)
         temp1 = temp1 + dsp[i].bot
         widget_control, uv.wid.win[i], draw_xsize=xsize, draw_ysize=ysize
         wset, dsp[i].id
         tv, temp1
      ENDIF 
   ENDFOR
   
   IF (uv.img[0].data NE ptr_new() AND uv.img[1].data NE ptr_new()) THEN BEGIN
      i = 0
      slice = uv.img[i].p - uv.img[i].fp
      image = reform((*uv.img[i].data)[*,*,slice])
      x0 = 0
      y0 = 1
      xsize = uv.img[i].dim[x0] * dsp[i].zoom
      ysize = uv.img[i].dim[y0] * dsp[i].zoom
      stype = 1
      IF (uv.img[i].pdim[y0] GT uv.img[i].pdim[x0]) THEN BEGIN 
         fact = (uv.img[i].pdim[y0])/(uv.img[i].pdim[x0])
         ysize = fact * uv.img[i].dim[y0] * dsp[i].zoom
      ENDIF ELSE IF (uv.img[i].pdim[0] GT uv.img[i].pdim[y0]) THEN BEGIN 
         fact = (uv.img[i].pdim[x0])/(uv.img[i].pdim[y0])
         xsize = fact * uv.img[i].dim[x0] * dsp[i].zoom
      ENDIF ELSE stype = 0
      widget_control, uv.wid.win[2], draw_xsize=xsize, draw_ysize=ysize
      temp1 = TRANSFORM_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample, stype)

      i = 1
      image = reform((*uv.img[i].data)[*,*,slice])
      temp2 = TRANSFORM_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample, stype)
      
      IF (dsp[i].range EQ 2) THEN BEGIN
         uthresh =  (0.5 + (0.005 * dsp[0].cut)) * dsp[1].nc
         lthresh =  (0.5 - (0.005 * dsp[0].cut)) * dsp[1].nc
         idx1 = where((temp2 LT uthresh) AND (temp2 GT lthresh), count1)
         idx2 = where((temp2 GE uthresh) OR (temp2 LE lthresh), count2)
      ENDIF ELSE BEGIN
         thresh =  0.01 * dsp[0].cut * dsp[1].nc
         idx1 = where(temp2 LT thresh, count1)
         idx2 = where(temp2 GE thresh, count2)
      ENDELSE
      IF (count1 GT 0) THEN temp2[idx1] = 0 ; temp = temp1
      IF (count2 GT 0) THEN temp1[idx2] = dsp[0].nc ; temp = nc + temp2
      temp = temp1 + temp2      ; combine
      wset, dsp[2].id
      tv, temp
   ENDIF
END
@
