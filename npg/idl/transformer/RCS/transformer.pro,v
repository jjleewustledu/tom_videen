head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2002.11.14.17.41.30;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.14.16.24.36;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.29.18.20.49;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.29.17.29.35;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.23.18.20.07;	author tom;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@PRO DISP1_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON TRANSFORMER
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 0
   x = ev.x / dsp[i].zoom + 1
   IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN
      fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
      y = (ev.y + 1)/ (fact * dsp[i].zoom)
      y = uv.img[i].dim[1] - y + 1
   ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN
      fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
      y = (ev.y + 1)/ (fact * dsp[i].zoom)
      y = uv.img[i].dim[1] - y + 1
   ENDIF ELSE BEGIN
      y = ev.y / dsp[i].zoom
      y = uv.img[i].dim[1] - y
   ENDELSE
   widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",I4,"    Y = ",I4)')
END

PRO DISP2_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON TRANSFORMER
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 0
   x = ev.x / dsp[i].zoom + 1
   IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN
      fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
      y = (ev.y + 1)/ (fact * dsp[i].zoom)
      y = uv.img[i].dim[1] - y + 1
   ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN
      fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
      y = (ev.y + 1)/ (fact * dsp[i].zoom)
      y = uv.img[i].dim[1] - y + 1
   ENDIF ELSE BEGIN
      y = ev.y / dsp[i].zoom
      y = uv.img[i].dim[1] - y
   ENDELSE
   widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",I4,"    Y = ",I4)')
END

PRO DISP3_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON TRANSFORMER
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 0
   x = ev.x / dsp[i].zoom + 1
   IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN
      fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
      y = (ev.y + 1)/ (fact * dsp[i].zoom)
      y = uv.img[i].dim[1] - y + 1
   ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN
      fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
      y = (ev.y + 1)/ (fact * dsp[i].zoom)
      y = uv.img[i].dim[1] - y + 1
   ENDIF ELSE BEGIN
      y = ev.y / dsp[i].zoom
      y = uv.img[i].dim[1] - y
   ENDELSE
   widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",I4,"    Y = ",I4)')
END

PRO DISP4_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON TRANSFORMER
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 0
   x = ev.x / dsp[i].zoom + 1
   IF (uv.img[i].pdim[0] GT uv.img[i].pdim[1]) THEN BEGIN
      fact = (uv.img[i].pdim[0])/(uv.img[i].pdim[1])
      y = (ev.y + 1)/ (fact * dsp[i].zoom)
      y = uv.img[i].dim[1] - y + 1
   ENDIF ELSE IF (uv.img[i].pdim[0] LT uv.img[i].pdim[1]) THEN BEGIN
      fact = (uv.img[i].pdim[1])/(uv.img[i].pdim[0])
      y = (ev.y + 1)/ (fact * dsp[i].zoom)
      y = uv.img[i].dim[1] - y + 1
   ENDIF ELSE BEGIN
      y = ev.y / dsp[i].zoom
      y = uv.img[i].dim[1] - y
   ENDELSE
   widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",I4,"    Y = ",I4)')
END

FUNCTION ShowProgress, yoff
; Widget to show progress of warp and permit cancellation before completion

   tlb = widget_base(Title='Cycle  Size      J     Iter     MSE', row=1)
   cancel = widget_button(tlb, value='Stop')
   msg = widget_text(tlb, xsize=38)
   widget_control, tlb, /realize, xoffset=0, yoffset=yoff
   Return, {top:tlb, msg:msg, cancel:cancel}
END

;;; ----------------------------------------------------------------------

PRO TRANSFORMER_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON TRANSFORMER
   
   catch, error_status
   IF (error_status NE 0) THEN BEGIN
      ok = widget_message(!err_string)
      RETURN
   END
   widget_control, ev.top, get_uvalue=uv
   ref = float(reform((*uv.img[0].data)[*,*]))
   new = float(reform((*uv.img[1].data)[*,*]))
   study = float(reform((*uv.img[4].data)[*,*]))
   nx = (size(ref))[1]
   ny = (size(ref))[2]

   CASE ev.id OF
      uv.wid.warp: BEGIN

; Shift to Center-of-Mass

         shift2d, ref, study, new, dx, dy
         study = new
         dif = ref-new
         grad2d, ref, gx, gy, nx, ny
         (*uv.img[1].data) = new
         (*uv.img[2].data) = dif
         (*uv.img[3].data) = upsample(sqrt(gx*gx+gy*gy),nx,ny)
         (*uv.img[5].data) = dx
         (*uv.img[6].data) = dy
         mserror = mean(dif*dif)
         ysize = uv.img[0].dim[1] * dsp[0].zoom
         info = ShowProgress(ysize+30)
         display, uv
         widget_control, info.msg, set_value=string(cycle,0,0,0,mserror,format='(I12,I12,I9,I9,F14.2)')

; WARP Notes:
;	f0 smooths residual correction with a vicous-like effect (gauss of incremental difference)
; 	f1 smooths total displacement correction with an elastic-like effect (gauss of total shift)
; 		best results with f0=0 (no smooth) and f1 small (greater smooth)-> elastic stretch
; 		f1=0.01 is too slow and f1=0.03 is too fast (distortion)
; 	gmin set to distinguish primarily brain/csf boundary
; 	size is downsampling of image before processing
; 	fac determines speed of shift

         FOR j=1,3 DO BEGIN
            crit = 0.999	; stop when mean square error of current step LE crit times MSE of last step
            f0 = 0.0
            f1 = 0.02
            gmin = 350		; primarily brain/csf
            siz = 2^(4-j)	; 8, 4, 2
            fac = 4.0*siz	; 32, 16, 8
            print,format='("j=",I1," size=",I1," fac=",F5.1," gmin=",I3," f0=",F4.2," f1=",f4.2)',j,siz,fac,gmin,f0,f1
            grad2d, ref, gx, gy, nx/siz, ny/siz
            wimg = gx
            tmpmse = mserror
            cnt = 1
            WHILE ((mserror LE crit*tmpmse) OR (cnt LT 3)) DO BEGIN
               cycle = cycle+1
               tmpdx = (*uv.img[5].data)
               tmpdy = (*uv.img[6].data)
               ndx = tmpdx
               ndy = tmpdy
               warp2d, ref, study, new, gx, gy, ndx, ndy, f0, f1, fac, wimg, gmin
               dif = ref-new
               tmpmse = mserror
               mserror = mean(dif*dif)
               (*uv.img[1].data) = new
               tmp = downsample(dif,nx/siz,ny/siz)
               (*uv.img[2].data) = upsample(tmp,nx,ny)
               (*uv.img[3].data) = wimg
               (*uv.img[5].data) = ndx
               (*uv.img[6].data) = ndy
               widget_control, info.msg, set_value=string(cycle,siz,j,cnt,mserror, $
                                                          format='(I12,I12,I9,I9,F14.2)')
               print,format='(I12,I12,I9,I9,F14.2,F14.2,F14.2)',cycle,siz,j,cnt,mserror,max(wimg),min(wimg)
               display, uv
               cnt = cnt+1
               progressEvent = Widget_Event(info.cancel, /NoWait)
               eventName = Tag_Names(progressEvent, /Structure_Name)
               IF eventName EQ 'WIDGET_BUTTON' THEN BEGIN
                  Widget_Control, info.top, /Destroy
                  goto, EndWarp
               ENDIF
            ENDWHILE
            IF (mserror GT tmpmse) THEN BEGIN
               print, 'Use penultimate warp'
               ndx = tmpdx
               ndy = tmpdy
            ENDIF
         ENDFOR
         finalwarp2d, study, new, ndx, ndy, f1
         dif = ref-new
         (*uv.img[1].data) = new
         (*uv.img[2].data) = dif
         display, uv
         Widget_Control, info.top, /Destroy
         EndWarp:
         print,"Cycle  Size    J   Iter     MSE"
         print,cycle,siz,j,cnt,mean(dif*dif),format='(I4,I6,I6,I6,F12.2)'
      ENDCASE 

      uv.wid.savimg: BEGIN
         extra = strarr(3)
         extra[0] = 'conversion program := transformer'
         extra[1] = 'program version    := 1.0'
         extra[2] = 'program date       := 2002:10:29'
         msg = ''
         fname = ''
         temp = ev.top
         savefile = widget_base(group_leader=uv.wid.base)
         text = cw_field(savefile, title='Filename: ', value=fname, xsize=80, /STRING, /RETURN_EVENTS)
         widget_control, savefile, xoffset=0, yoffset=0, /realize
         ev = WIDGET_EVENT(savefile)
         widget_control, savefile, /DESTROY
         fname = ev.value
         uv.img[1].fname = fname
         ev.top = temp
         IF (strtrim(fname NE '')) THEN BEGIN
            msg = ' '
            print,'Saving ',fname
            stat = putinterfile(uv.img[1], fname, msg, EXTRA=extra)
         ENDIF ELSE message,'No filename entered-- Image NOT SAVED!'
      ENDCASE 

      uv.wid.savwrp: BEGIN
         extra = strarr(3)
         extra[0] = 'conversion program := transformer'
         extra[1] = 'program version    := 1.0'
         extra[2] = 'program date       := 2002:10:29'
         msg = ''
         fname = ''
         temp = ev.top
         savefile = widget_base(group_leader=uv.wid.base)
         text = cw_field(savefile, title='Filename: ', value=fname, xsize=80, /STRING, /RETURN_EVENTS)
         widget_control, savefile, xoffset=0, yoffset=0, /realize
         ev = WIDGET_EVENT(savefile)
         widget_control, savefile, /DESTROY
         fname = ev.value
         ev.top = temp
         fnamex = fname+'_dx'
         fnamey = fname+'_dy'
         uv.img[5].fname = fnamex
         uv.img[6].fname = fnamey
         IF (strtrim(fname NE '')) THEN BEGIN
            msg = ' '
            print,'Saving ',fnamex
            stat = putinterfile(uv.img[5], fnamex, msg, EXTRA=extra)
            IF (stat NE 0) THEN message,'ERROR saving '+fnamex
            print,'Saving ',fnamey
            stat = putinterfile(uv.img[6], fnamey, msg, EXTRA=extra)
            IF (stat NE 0) THEN message,'ERROR saving '+fnamey
         ENDIF ELSE message,'No filename entered-- Images NOT SAVED!'
      ENDCASE 

      uv.wid.exit: BEGIN
         FOR i=0, 2 DO IF (uv.img[i].data NE ptr_new()) THEN ptr_free, uv.img[i].data
         widget_control, ev.top, /destroy
         return
      ENDCASE 

   ENDCASE
   widget_control, ev.top, set_uvalue=uv
END


PRO TRANSFORMER
@@IMAGE_UTILS.h
@@TRANSFORMER.h

   on_error, 2

   file1 = 'Images/p2808_seg.img'
   file2 = 'Images/rp2817_segb.img'
   ;;file1 = getenv('FILE1')
   ;;file2 = getenv('FILE2')

   fname = [file1,file2,file2,file2,file2,file2,file2]
   dsp1 = 'Reference'
   dsp2 = 'Resampled Study'
   dsp3 = 'Reference-Study'
   dsp4 = 'Dif x |Ref Grad|'
   dname = [dsp1,dsp2,dsp3,dsp4]

   base = widget_base (TITLE='TRANSFORMER', /COLUMN)
   base1 = widget_base(base, row=1)
   warp = widget_button(base1, value='  Warp   ')
   savimg = widget_button(base1, value='  Save Image  ')
   savwrp = widget_button(base1, value='  Save Warp  ')
   exit = widget_button(base1, value='  Exit   ')
   msg = widget_text(base1, xsize=20)
   
   wid = {WIDGETS,		$
          base     : base,	$ ; top level base
          win      : lonarr(4),	$ ; draw window widget id
          warp     : warp,	$ ; warp processing
          savimg   : savimg,	$ ; save warped image
          savwrp   : savwrp,	$ ; save warp vectors
          exit     : exit,	$ ; exit selection button id
          msg      : msg	$ ; message field
         }

   img = {VIMAGE}
   uv = {wid:wid, img:[img,img,img,img,img,img,img]}
   FOR i= 0, 6 DO BEGIN
      uv.img[i].f = 1
      uv.img[i].p = 1
      uv.img[i].fp = 1
      uv.img[i].lp = 1
      uv.img[i].ff = 1
      uv.img[i].lf = 1
      uv.img[i].fname = fname[i]
      image = uv.img[i]
      str = ''
      IF (getframe(image, str) NE 0) THEN BEGIN
         print, str,i+1
         uv.img[i].fname = ''
         RETURN
      ENDIF
      uv.img[i] = image
   ENDFOR
   nx = uv.img[0].dim[0]
   ny = uv.img[0].dim[1]
   ptr_free, uv.img[5].data
   ptr_free, uv.img[6].data
   uv.img[5].data = ptr_new(fltarr(nx,ny))
   uv.img[6].data = ptr_new(fltarr(nx,ny))
   ref = float(reform((*uv.img[0].data)[*,*]))
   study = float(reform((*uv.img[1].data)[*,*]))
   dif = ref-study
   grad2d, ref, gx, gy, nx, ny
   (*uv.img[2].data) = dif
   (*uv.img[3].data) = upsample(sqrt(gx*gx+gy*gy),nx,ny)

   zoom = 2
   xsize = uv.img[0].dim[0] * zoom
   ysize = uv.img[0].dim[1] * zoom
   IF (uv.img[0].pdim[0] GT uv.img[0].pdim[1]) THEN BEGIN
      xfact = (uv.img[0].pdim[0])/(uv.img[0].pdim[1])
   ENDIF ELSE BEGIN
      xfact = 1.
   ENDELSE
   dsp[0].set = 1
   dsp[0].cut =  50
   IF (!d.n_colors GE 160) THEN nc=80 $
   ELSE IF (!d.n_colors GE 80) THEN nc=40 $
   ELSE nc=(!d.n_colors)/2
   FOR i= 0, 3 DO BEGIN
      dsp[i].set = 1
      dsp[i].init = 1
      dsp[i].type = 1		; 0=auto scaling, 1=manual scaling
      dsp[i].zoom = zoom
      dsp[i].xsize = xsize
      dsp[i].ysize = ysize
      dsp[i].nc = nc
      dsp[i].bot = 0		; first element of color table
      dsp[i].range = 0		; 0=pos, 1=neg, 2=neg/pos
      dsp[i].min = 0
      dsp[i].max = 800
   ENDFOR
   dsp[2].bot = nc
   dsp[2].range = 2
   dsp[2].type = 0
   dsp[3].type = 0
   !p.background = 0
   loadct, 36, ncolors=dsp[0].nc, bottom=dsp[0].bot, file=lut
   loadct, 37, ncolors=dsp[2].nc, bottom=dsp[2].bot, file=lut

   widget_control, base, set_uvalue=uv
   widget_control, base, /realize, xoffset=0, yoffset=ysize+30

   yloc = 0
   FOR i= 0, 3 DO BEGIN
      dispbase = widget_base(TITLE=dname[i], group_leader=uv.wid.base, uvalue=base)
      win = widget_draw(dispbase, xsize=dsp[i].xsize, ysize=dsp[i].ysize, /button, /motion)
      xloc = i*(xfact*xsize + 20) < i*320 ; for 1280x1024 display
      widget_control, dispbase, /realize, xoffset=xloc, yoffset=yloc
      widget_control, win, get_value=windowIndex
      wset, windowIndex
      xmanager, "DISP"+strcompress(string(i+1),/remove_all), dispbase, /just_reg
      uv.wid.win[i] = win
      dsp[i].id = windowIndex
   ENDFOR
   widget_control, base, set_uvalue=uv
   display, uv
   ndx = float(reform((*uv.img[5].data)[*,*]))
   ndy = float(reform((*uv.img[6].data)[*,*]))
   print,"Cycle  Size  Mean SqrErr  X-Shift   Y-Shift"
   print,format='(I4,I6,F12.2,F10.2,F10.2)',cycle,0,mean(dif*dif),mean(ndx),mean(ndy)
   xmanager, "TRANSFORMER", base, EVENT_HANDLER='TRANSFORMER_EVENT'

END 
@


1.4
log
@*** empty log message ***
@
text
@a113 2
   tmpdx = float(reform((*uv.img[5].data)[*,*]))
   tmpdy = float(reform((*uv.img[6].data)[*,*]))
a115 2
   ndx = tmpdx
   ndy = tmpdy
d122 1
a122 1
         shift2d, ref, study, new, tmpdx
d129 2
a130 2
         (*uv.img[5].data) = ndx
         (*uv.img[6].data) = ndy
d160 4
a163 2
               tmpdx = ndx
               tmpdy = ndy
@


1.3
log
@*** empty log message ***
@
text
@d365 1
a365 2
   dsp[2].min = -400
   dsp[2].max = 400
@


1.2
log
@*** empty log message ***
@
text
@d223 1
d249 1
d252 1
@


1.1
log
@Initial revision
@
text
@d1 100
d111 9
d122 81
a202 5
      
      uv.wid.step: BEGIN
         TRANSFORM_IMG, uv
         TRANSFORM_DISPLAY, uv
         widget_control, ev.top, set_uvalue=uv
d205 50
d256 1
a256 1
         FOR i=0, 1 DO if (uv.img[i].data NE ptr_new()) THEN ptr_free, uv.img[i].data
d262 1
a262 1
   
d271 3
a273 2
   file1 = 'img1.img'
   file2 = 'img2.img'
a275 3
   fname = [file1,file2]
   print,fname[0]
   print,fname[1]
d277 7
d286 5
a290 2
   step = widget_button(base1, value='  Step  ')
   exit = widget_button(base1, value='  Exit  ')
d294 6
a299 3
          win      : lonarr(3),	$ ; draw window widget id
          step     : step,	$ ; processing step
          exit     : exit	$ ; exit selection button id
d303 2
a304 2
   uv = {wid:wid, img:[img,img]}
   FOR i= 0, 1 DO BEGIN
d313 3
a315 3
      msg = ''
      IF (getframe(image, msg) NE 0) THEN BEGIN
         print, msg,i+1
d321 12
d337 6
d344 24
a367 9
   FOR i= 0, 2 DO dsp[i].set = 1
   FOR i= 0, 2 DO dsp[i].init = 0
   FOR i= 0, 2 DO dsp[i].type = 0
   FOR i= 0, 2 DO dsp[i].zoom = zoom
   FOR i= 0, 2 DO dsp[i].xsize = xsize
   FOR i= 0, 2 DO dsp[i].ysize = ysize
   FOR i=0, 1 DO dsp[i].bot = 0
   FOR i=0, 1 DO dsp[i].nc = 0
   dsp[0].set = 1
d372 3
a374 3
   FOR i= 0, 2 DO BEGIN
      dispbase = widget_base(TITLE='Image '+ strcompress(string(i+1)), $
                             group_leader=uv.wid.base, uvalue=i)
d376 1
a376 4
      !p.background = 0
      scrnsize = get_screen_size()
      xloc = i*(xsize + 10)
      yloc = 0
d380 1
a382 13
      dsp[i].init = 1
      IF (dsp[i].nc EQ 0) THEN BEGIN
         nc = (!d.n_colors-1)/2
         dsp[0].bot = 0
         dsp[0].nc = nc
         dsp[1].bot = nc
         dsp[1].nc = nc
         dsp[2].nc = nc
      ENDIF
      IF (i EQ 0) THEN loadct, 36, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
         file="/usr/local/npg/idl/color_tables/videen.tbl" $
      ELSE IF (i EQ 1) THEN loadct, 3, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
         file="/usr/local/npg/idl/color_tables/videen.tbl"
d385 5
a389 1
   TRANSFORM_DISPLAY, uv
@
