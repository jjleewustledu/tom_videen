head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2002.11.14.16.24.36;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.29.17.29.35;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@;+
; NAME:
;	WARP2D
;
; PURPOSE
;	2D warp of array STUDY based upon the gradient GX,GY of the Reference image.
;	The dimensions of GX,GY define the (possibly downsampled) arrays upon which
;	the warp is defined.
;
; INPUTS:
;	REF:	 Reference or standard			(2D array)
;	STUDY:	 Study or reslice				(2D array)
;	NEW:	 Current deformed study			(2D array)
;	GX,GY:	 Gradient						(2D real arrays)
;	NDX,NDY: Total shift (all iterations)	(2D real arrays)
;	F0:		 Cutoff of gaussian filter applied to residual correction
;	F1:		 Cutoff of gaussian filter applied to total displacement
;			 (smaller value -> greater smoothing; 0.1)
; OUTPUT:
;	NDX,NDY: Total shift (all iterations)	(2D real arrays)
;	NEW:	 Revised deformed study			(2D array)
;
; REVISION HISTORY:
;	Oct 2002 Tom Videen
;-

PRO WARP2D, REF, STUDY, NEW, GX, GY, NDX, NDY, F0, F1, FAC, wimg, gmin
   COMMON TRANSFORMER

   on_error, 2
   nx = (size(ref))[1]          ; original image size
   ny = (size(ref))[2]
   mx = (size(gx))[1]           ; resampled image size (for gradient definition and warp)
   my = (size(gx))[2]

   dx = fltarr(mx,my)
   dy = fltarr(mx,my)

   dif = downsample(new-ref,mx,my)
   ix = where (abs(gx) GE gmin,cntx)
   iy = where (abs(gy) GE gmin,cnty)
   IF (cntx LE 0 OR cnty LE 0) THEN BEGIN
      new = study
      return
   ENDIF

   dx[ix] = fac*dif[ix]*gx[ix]/(gx[ix]*gx[ix] + dif[ix]*dif[ix])
   dy[iy] = fac*dif[iy]*gy[iy]/(gy[iy]*gy[iy] + dif[iy]*dif[iy])

   IF (f0 GT 0.0) THEN BEGIN
      fdx = gauss(dx,f0)
      fdy = gauss(dy,f0)
   ENDIF ELSE BEGIN
      fdx = dx
      fdy = dy
   ENDELSE
   wimg = 1000*upsample(sqrt(fdx*fdx + fdy*fdy),nx,ny)	; dif * |gradient|

   ndx = ndx + upsample(fdx,nx,ny)
   ndy = ndy + upsample(fdy,nx,ny)
   fdx = gauss(ndx,f1)
   fdy = gauss(ndy,f1)
   ;;wimg = 1000*upsample(sqrt(fdx*fdx + fdy*fdy),nx,ny)	; total displacement

   FOR y=0,ny-1 DO BEGIN
      FOR x=0,nx-1 DO BEGIN
         xx = x-fdx[x,y]
         yy = y-fdy[x,y]
         new[x,y] = interpolate(study, xx, yy, /cubic)
      ENDFOR 
   ENDFOR 
END
@


1.1
log
@Initial revision
@
text
@d69 1
a69 1
         new[x,y] = interpolate(study,xx,yy,/cubic)
@
