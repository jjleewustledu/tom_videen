head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	99.10.08.19.53.12;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	99.10.08.18.03.03;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@; $Id: transform_3d.pro,v 1.1 1999/10/08 18:03:03 tom Exp tom $
;
;+
; NAME:
;   TRANSFORM_3D
;
; PURPOSE:
;   Perform 3-D transformation specified by matrix M on tensor D.
;
; CATEGORY:
;   Image processing.
;
; CALLING SEQUENCE:
;   transform_3d, m, d, x, y, z
;
; INPUTS: 
;   m:       3x3 transformation matrix
;   d:       3-D data tensor
;   x, y, z: coordinate space with 0,0,0 at center of mass
;
; OUTPUTS:
;   d:       transformed data
;
; MODIFICATION HISTORY:
;   Written by: Tom Videen, Oct 1999.
;-

PRO TRANSFORM_3D, M, D, X, Y, Z

   on_error,2
   
; Build homogeneous matrices

   s = size(d)
   nx = s[1]
   ny = s[2]
   nz = s[3]
   nn = s[5]
   x0 = (nx-1)/2
   y0 = (ny-1)/2
   z0 = (nz-1)/2

   t = [[1, 0, 0, x0], $
        [0, 1, 0, y0], $
        [0, 0, 1, z0], $
        [0, 0, 0, 1]]

   r = [[m[*,0],  0], $
        [m[*,1],  0], $
        [m[*,2],  0], $
        [0, 0, 0, 1]]

; Multiply by transform r, then
; translate back to standard coordinates with t

   mm = t##r
   n = mm##[[x[*]], [y[*]], [z[*]], [replicate(1.0, nn)]]

; Trilinearly interpolate values for new coordinates

   nd = interpolate(d, n[*,0], n[*,1], n[*,2])
   d = reform(nd, nx, ny, nz)

   return
END 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
; $Id$
d17 3
a19 3
;   m:       3x3 matrix
;   d:       3-D tensor
;   x, y, z: coordinate space
d22 1
a22 1
;   d
d53 2
a54 1
; Transform data by matrix mm, then translate back to standard coordinates with tt
d56 1
a56 1
   mm = r#t
@
