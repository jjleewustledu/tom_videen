head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2002.11.21.20.32.38;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.20.14.19.56;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@FUNCTION DISPLAY_SCALE, image, itype, i, xsize, ysize, stype
   COMMON WARP
   
   IF (itype EQ 1) THEN BEGIN ; Manual scaling
      mini = dsp[i].min
      maxi = dsp[i].max
   ENDIF ELSE BEGIN             ; Auto scaling
      IF (dsp[i].range EQ 0) THEN BEGIN
         mini = 0
         maxi = max(image)
      ENDIF ELSE IF (dsp[i].range EQ 1) THEN BEGIN
         mini = 0
         maxi = -min(image)
      ENDIF ELSE BEGIN
         mini = min(image)
         maxi = max(image)
         IF (-mini GT maxi) THEN maxi = -mini ELSE mini = -maxi
      ENDELSE
   ENDELSE
   dsp[i].amin = mini
   dsp[i].amax = maxi
   topc = dsp[i].nc -1
   IF (stype EQ 0) THEN BEGIN
      IF (dsp[i].range EQ 1) THEN BEGIN
         temp1 = bytscl(rebin(-(image), xsize, ysize), MIN=mini, MAX=maxi, TOP=topc)
      ENDIF ELSE BEGIN
         temp1 = bytscl(rebin(image, xsize, ysize), MIN=mini, MAX=maxi, TOP=topc)
      ENDELSE
   ENDIF ELSE BEGIN 
      IF (dsp[i].range EQ 1) THEN BEGIN
         temp1 = bytscl(congrid(-(image), xsize, ysize, /INTERP), MIN=mini, MAX=maxi, TOP=topc)
      ENDIF ELSE BEGIN
         temp1 = bytscl(congrid(image, xsize, ysize, /INTERP), MIN=mini, MAX=maxi, TOP=topc)
      ENDELSE
   ENDELSE
   RETURN, temp1
END
      
PRO DISPLAY, ref, new, dif, dxg, slice, stype, wid
   ;; Scale and display 4 images
   ;; 	reference
   ;; 	new (resampled study)
   ;; 	dif = ref-new
   ;; 	dif*(gx+gy+gz)
   ;; slice = slice number to display
   ;; stype = 0 -> rebin, 1 -> congrid
   ;; wid = widget structure

   COMMON IMAGE_UTILS
   COMMON WARP
   
   FOR i=0,3 DO BEGIN
      CASE i of
   		0: image = reform((ref)[*,*,slice])
   		1: image = reform((new)[*,*,slice])
   		2: image = reform((dif)[*,*,slice])
   		3: image = reform((dxg)[*,*,slice])
      ENDCASE
      temp1 = DISPLAY_SCALE (image, dsp[i].type, i, dsp[i].xsize, dsp[i].ysize, stype)
      temp1 = temp1 + dsp[i].bot
      widget_control, wid.win[i], draw_xsize=dsp[i].xsize, draw_ysize=dsp[i].ysize
      wset, dsp[i].id
      tv, temp1
   ENDFOR
END
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
FUNCTION DISPLAY_SCALE, image, type, i, xsize, ysize, sample, stype
   COMMON TRANSFORMER
d4 1
a4 1
   IF (dsp[i].type EQ 1) THEN BEGIN ; Manual scaling
d22 1
a22 1
   nc = dsp[i].nc
d24 5
a28 5
      IF (dsp[i].range EQ 1) THEN $
         temp1 = bytscl(rebin(-(image), xsize, ysize, SAMPLE=sample), $
                        MIN=mini, MAX=maxi, TOP=(nc-1)) $
      ELSE temp1 = bytscl(rebin(image, xsize, ysize, SAMPLE=sample), $
                          MIN=mini, MAX=maxi, TOP=(nc-1))
d30 5
a34 5
      IF (dsp[i].range EQ 1) THEN $
         temp1 = bytscl(congrid(-(image), xsize, ysize, /INTERP), $
                        MIN=mini, MAX=maxi, TOP=(nc-1)) $
      ELSE temp1 = bytscl(congrid(image, xsize, ysize, /INTERP), $
                          MIN=mini, MAX=maxi, TOP=(nc-1))
d39 9
a47 8
PRO DISPLAY, uv, SAMPLE=sample
   ;; Scale and display image i
   ;; uv = the info structure for this display
   ;; sample = use nearest neighbor sampling for rebin
   ;; img[0] = reference
   ;; img[1] = new (resampled study)
   ;; img[2] = dif = ref-new
   ;; img[3] = dif*(gx+gy+gz)
d50 1
a50 1
   COMMON TRANSFORMER
d52 12
a63 24
   IF (NOT (keyword_set(sample))) THEN SAMPLE=0
   FOR i= 0, 3 DO BEGIN
      IF (uv.img[i].data NE ptr_new()) THEN BEGIN
         x0 = 0
         y0 = 1
         stype = 1
         slice = uv.img[i].p - uv.img[i].fp
         image = reform((*uv.img[i].data)[*,*,slice])
         xsize = uv.img[i].dim[x0] * dsp[i].zoom
         ysize = uv.img[i].dim[y0] * dsp[i].zoom
         IF (uv.img[i].pdim[y0] GT uv.img[i].pdim[x0]) THEN BEGIN 
            fact = (uv.img[i].pdim[y0])/(uv.img[i].pdim[x0])
            ysize = fact * uv.img[i].dim[y0] * dsp[i].zoom
         ENDIF ELSE IF (uv.img[i].pdim[0] GT uv.img[i].pdim[y0]) THEN BEGIN 
            fact = (uv.img[i].pdim[x0])/(uv.img[i].pdim[y0])
            xsize = fact * uv.img[i].dim[x0] * dsp[i].zoom
         ENDIF ELSE stype = 0

         temp1 = DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample, stype)
         temp1 = temp1 + dsp[i].bot
         widget_control, uv.wid.win[i], draw_xsize=xsize, draw_ysize=ysize
         wset, dsp[i].id
         tv, temp1
      ENDIF 
a64 1
   
@
