head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2002.11.21.20.32.38;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.20.14.19.56;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@; NAME:
;	GAUSS3D
;
; PURPOSE:
;	Filter an image with 3-D Gaussian.
;
; INPUTS: passed from Environment variables
;	IMG: input 3D array
;	F0:	 cutoff  (smaller number -> greater smoothing; 1.0 = practically no smooth)
;
; RETURNS:
;	FIMG: filtered 3D array
;
; Notes:
;	Assumes input image is already sufficiently padded.
;	FFT processing time increases with sum of prime factors of nx, ny, and nz.
;

FUNCTION GAUSS3D, IMG, F0
   COMMON WARP
   on_error, 2

   nx = (size(img))[1]
   ny = (size(img))[2]
   nz = (size(img))[3]
   fc = -ALOG(2.)/f0^2

   t0 = systime(1)
   fimg = FFT(img)
   t1 = systime(1)
   
   fx = fltarr(nx)
   arr = findgen(nx/2)
   dx = 1.0/nx
   fx[0:nx/2-1] = dx*arr
   fx[nx/2:nx-1] = dx*rotate(arr,2)
   fx2 = fx^2

   fy = fltarr(ny)
   arr = findgen(ny/2)
   dy = 1.0/ny
   fy[0:ny/2-1] = dy*arr
   fy[ny/2:ny-1] = dy*rotate(arr,2)
   fy2 = fy^2

   fz = fltarr(nz)
   arr = findgen(nz/2)
   dz = 1.0/nz
   fz[0:nz/2-1] = dz*arr
   fz[nz/2:nz-1] = dz*rotate(arr,2)
   fz2 = fz^2

   filter = fltarr(nx,ny,nz)
   FOR k=0, nz-1 DO BEGIN
      fzz = fz2[k]
      FOR j=0, ny-1 DO BEGIN
         fyy_fzz = fy2[j] + fzz
         FOR i=0, nx-1 DO filter[i,j,k] = EXP(fc * (fx2[i] + fyy_fzz))
      ENDFOR
   ENDFOR
   fimg = filter * fimg

   t2 = systime(1)
   fimg = FFT(fimg, /INVERSE,/OVERWRITE)
   t3 = systime(1)
   if debug then print, format='("fft forwrd",F6.1,3x,"filter",F6.1,3x,"fft inv",F6.1,4x,"Total",F7.1)',$
      t1-t0,t2-t1,t3-t2,t3-t0
   return, float(fimg)
END 
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
;	IMG: input array
d11 2
a12 2
; OUTPUTS:
;	TMP: output array
d16 1
d20 1
a20 1
   COMMON TRANSFORMER
d26 1
a26 3
   dx = 1.0/nx
   dy = 1.0/ny
   dz = 1.0/nz
d29 1
a29 1
   tmp = FFT(img)
a30 2

   fc = -ALOG(2.)/f0^2
d34 1
d37 1
d41 1
d44 1
d48 1
d51 1
d53 6
a58 9
   fac = fltarr(nx,ny,nz)
   fac = EXP(fc * (fx^2 + fy^2 + fz^2))

   FOR  k = 0, nz-1 DO BEGIN
      FOR  j = 0, ny-1 DO BEGIN
         FOR i = 0, nx-1 DO BEGIN
            fac = EXP(fc * (fx[i]^2 + fy[j]^2 + fz[k]^2))
            tmp[i,j,k] = fac * tmp[i,j,k]
         ENDFOR
d61 2
d64 1
a64 1
   tmp = FFT(tmp, /INVERSE)
d68 1
a68 1
   return, float(tmp)
@
