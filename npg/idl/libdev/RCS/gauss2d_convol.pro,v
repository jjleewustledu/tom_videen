head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	97.04.08.21.13.39;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	96.11.27.15.58.13;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@add edge_truncate to convol
@
text
@; $Id: gauss2d_convol.pro,v 1.1 1996/11/27 15:58:13 tom Exp $
;+
; NAME:
;	GAUSS2D_CONVOL
;
; PURPOSE:
;	2-D convolution with a gaussian.
;
; CATEGORY:
;   Image processing
;
; CALLING SEQUENCE:
;	Result = GAUSS2D_CONVOL (Matrix, Halfwidth)
;
; INPUTS:
;	Matrix = 2-D matrix (float)
;	Halfwidth = half-width of gaussian (in pixels)
;
; RESTRICTIONS:
;	Matrix should be of type FLOAT
;
; PROCEDURE:
;	CONVOL is used to convolve mat with a gaussian with specified halfwidth in pixels.
;
; MODIFICATION HISTORY:
;	Tom Videen, April 1995.
;-

function gauss2d_convol, mat, halfwidth

	on_error,2
	if n_params() ne 2 then message,'Usage: result = gauss2d_convol(matrix, halfwidth)'
	sz = size(mat)
	mat0 = mat
	prec = 4										; larger values for greater precision
	sig = halfwidth/2.354
	n_pts = round(prec*sig)*2 + 1					; number of points in kernel (odd)
	x = (findgen(n_pts) - n_pts/2)					; x locations to compute kernel
	gaus = exp(-0.5*(x/sig)^2)						; gaussian of width sig

	for i=0,sz(1)-1 do begin						; convolution on columns of mat
		y = rotate(mat(i,*),4)
		z = convol(y,gaus,/edge_truncate)/total(gaus)
		mat0(i,*) = rotate(z,4)
	endfor
	for i=0,sz(2)-1 do begin						; convolution on rows of mat0
		y = mat0(*,i)
		mat(*,i) = convol(y,gaus,/edge_truncate)/total(gaus)
	endfor

	return,mat
end
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
; $Id: gauss2d_convol.pro,v 1.1 1995/05/02 13:54:34 tom Exp $
d43 1
a43 1
		z = convol(y,gaus)/total(gaus)
d48 1
a48 1
		mat(*,i) = convol(y,gaus)/total(gaus)
@
