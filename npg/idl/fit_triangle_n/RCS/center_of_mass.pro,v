head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.04.01.15.09.20;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@; $Id: center_of_mass.pro,v 1.1 1996/01/08 15:20:13 tom Exp $
;
;+
; NAME:
;	CENTER_OF_MASS
;
; PURPOSE:
;	Return array with only a single coordinate for each Plane.
;	The coordinate is the center of mass in the Plane and the value is the
;	sum of all input points in that plane.
;
; CATEGORY:
;	Image processing.
;
; CALLING SEQUENCE:
;	CENTER_OF_MASS, Points, Plane
;
; INPUTS:
;	Points:	Coordinates of points and their values.
;	Plane:	Dimension of Points to collapse.
;
; OUTPUTS:
;	COM_points:	Coordinates of center-of-mass points and their values.
;	First, N:	Index to and number of COM_points for unbiased portion
;
; FUNCTION:
;	Create histogram of all points by plane number.
;	Stepping through planes:
;		1) set x and y equal mean values for plane z,
;		2) set z equal to plane
;		3) set val equal to sum of values for all points in this plane
;		4) concatenate this (4,1) array to com_points
;
; EXAMPLE:
;	CENTER_OF_MASS, Points, Plane
;
; MODIFICATION HISTORY:
; 	Written by:	Tom Videen, 09-Nov-94
;-

function center_of_mass, points, plane, first, last

	hist = histogram(points(plane, *), REVERSE_INDICES = r, omin=pmin, omax=pmax)
	n = (size(hist))(1)

; Determine which points to throw out at the ends of the line
; where center-of-mass would be biased off axis of line

	limit = median(hist)
	first = -1
	last = -1
	for j = 0, n-1 do begin
		if (hist(j) ge limit) then begin
			first = j 
			goto, n1
		endif
    endfor
n1:	for j = n-1, 0, -1 do begin
		if (hist(j) ge limit) then begin
			last = j
			goto, n2
		endif
    endfor
	if (last lt 0) then last = n - 1

n2:	for j = first, last do begin
		if (r(j) ne r(j+1)) then begin
			for i = 0, 2 do begin
				if (i ne plane) then $
					val = double(total(points(i, r(r(j):r(j+1)-1)))) / double(hist(j)) $
				else $
					val = double(points(plane, r(r(j))))
				if (i eq 0) then arr = val else arr = [arr, val]
			endfor
			arr = [arr, total(points(3, r(r(j):r(j+1)-1)))]
			if (j eq first) then com_points = arr else com_points = [[com_points], [arr]]
		endif
	endfor
	return, com_points
end
@
