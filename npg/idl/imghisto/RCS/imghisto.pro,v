head	1.20;
access;
symbols;
locks; strict;
comment	@# @;


1.20
date	2013.04.11.17.38.33;	author tom;	state Exp;
branches;
next	1.19;

1.19
date	2009.08.26.16.42.35;	author tom;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.10.21.41.24;	author tom;	state Exp;
branches;
next	1.17;

1.17
date	2005.06.30.15.29.13;	author tom;	state Exp;
branches;
next	1.16;

1.16
date	2004.05.27.14.30.14;	author tom;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.17.23.01.15;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.18.15.05.31;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.17.15.17.38;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.30.14.31.00;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.04.15.00.36;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.28.20.24.36;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.01.15.05.21;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.05.17.20.39;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.02.18.00.30;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.27.20.41.00;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.27.16.11.48;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.10.12.58.40;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	98.07.31.16.37.21;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.07.31.15.34.05;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.07.30.22.21.42;	author tom;	state Exp;
branches;
next	;


desc
@@


1.20
log
@add DO2
@
text
@; $Id: imghisto.pro,v 1.19 2009/08/26 16:42:35 tom Exp tom $
;
;+
; NAME:
;   IMGHISTO
;
; PURPOSE:
;   Plot histograms of images.
;
; CATEGORY:
;   PET processing.
;
; CALLING SEQUENCE:
;   imghisto
;
; MODIFICATION HISTORY:
;   Written by: Tom Videen, July 1998
;   Modified by: Tom Videen, Apr 2013 to add DO2 processing
;-

PRO IMGHISTO_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON IMAGEHISTO
   
   catch, error_status
   IF (error_status NE 0) THEN BEGIN
      ok = widget_message(!err_string)
      RETURN
   END
   widget_control, ev.top, get_uvalue=uv
   widget_control, uv.wid.msg, set_value=''
   
   CASE ev.id OF
      
      uv.wid.file: BEGIN
         fname = ''
         IF (strlen(img.fname) GT 0) THEN fname = img.fname
         IF (strlen(fname) GT 0) THEN BEGIN 
            l1 = rstrpos(fname,'/')
            l2 = rstrpos(fname,'.')
            str1 = string(replicate(32b,(l2-l1-2)))
            str1 = '*'+str1
            strput,fname,str1,l1+1
            fname = strcompress(fname, /remove_all)
         ENDIF ELSE fname = '*'
         fname = dialog_pickfile(FILE=img.fname, FILTER=fname, /READ)
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
            RETURN
         ENDIF ELSE BEGIN 
            newdata = 1
            img.fname = fname
            widget_control, uv.wid.fname, set_value=img.fname
         ENDELSE 
      ENDCASE

      uv.wid.fname: BEGIN
         fname = ''
         fname = ev.value
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN
            newdata = 1
            img.fname = fname
            widget_control, uv.wid.fname, set_value=img.fname
         ENDELSE
      ENDCASE
      
      uv.wid.mask: BEGIN
         fname = ''
         IF (strlen(msk.fname) GT 0) THEN fname = msk.fname
         IF (strlen(fname) GT 0) THEN BEGIN 
            l1 = rstrpos(fname,'/')
            l2 = rstrpos(fname,'.')
            str1 = string(replicate(32b,(l2-l1-2)))
            str1 = '*'+str1
            strput,fname,str1,l1+1
            fname = strcompress(fname, /remove_all)
         ENDIF ELSE fname = '*'
         fname = dialog_pickfile(FILE=msk.fname, FILTER=fname, /READ)
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
            RETURN
         ENDIF ELSE BEGIN 
            newdata = 1
            msk.fname = fname
            widget_control, uv.wid.mname, set_value=msk.fname
            halfmax = 0
            widget_control, uv.wid.hmax, set_value=halfmax
            l1 = rstrpos(fname,'_')
            l2 = rstrpos(fname,'-')
            l3 = rstrpos(fname,'.')
			IF (l1 GT 0 AND l2 GT 0 AND l3 GT 0) THEN BEGIN
               slices[0] = strmid(fname,l1+1,l2-l1-1)
               slices[1] = strmid(fname,l2+1,l3-l2-1)
               widget_control,uv.wid.slc[0],set_value=slices[0]
               widget_control,uv.wid.slc[1],set_value=slices[1]
			ENDIF
			IF (strpos(fname,'_cx_') GT 0) THEN BEGIN
               range[1] = cxmax
               binsize = cxbin
               widget_control, uv.wid.bin, set_value=binsize
               widget_control, uv.wid.limits[1], set_value=range[1]
			ENDIF ELSE IF (strpos(fname,'_vent_') GT 0) THEN BEGIN
               range[1] = ventmax
               binsize = ventbin
               widget_control, uv.wid.bin, set_value=binsize
               widget_control, uv.wid.limits[1], set_value=range[1]
			ENDIF
         ENDELSE 
      ENDCASE
      
      uv.wid.mname: BEGIN
         fname = ''
         fname = ev.value
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN
            newdata = 1
            msk.fname = fname
            widget_control, uv.wid.mname, set_value=msk.fname
         ENDELSE
      ENDCASE
      
      uv.wid.slc[0]: BEGIN 
         newdata = 1
         slices[0] = ev.value
         IF (slices[1] LT slices[0]) THEN BEGIN
            slices[1] = slices[0]
            widget_control,uv.wid.slc[1],set_value=slices[1]
         ENDIF
      ENDCASE
      
      uv.wid.slc[1]: BEGIN 
         newdata = 1
         slices[1] = ev.value
         IF (slices[0] GT slices[1]) THEN BEGIN
            slices[0] = slices[1]
            widget_control,uv.wid.slc[0],set_value=slices[0]
         ENDIF
      ENDCASE
      
      uv.wid.ptype: BEGIN
         newdata = 1
         proctype = ev.value
         IF (proctype EQ 5) THEN proctype=7
      ENDCASE 
      
      uv.wid.maskmin: BEGIN
         maskval = ev.value
         widget_control, uv.wid.maskmin, set_value=maskval
      ENDCASE 
      
      uv.wid.limits[0]: BEGIN 
         range[0] = ev.value
         widget_control, uv.wid.limits[0], set_value=range[0]
      ENDCASE
      
      uv.wid.limits[1]: BEGIN 
         range[1] = ev.value
         widget_control, uv.wid.limits[1], set_value=range[1]
      ENDCASE

      uv.wid.bin: BEGIN 
         binsize = ev.value
         widget_control, uv.wid.bin, set_value=binsize
      ENDCASE

      uv.wid.scale: BEGIN 
         scalemax = ev.value
         widget_control, uv.wid.scale, set_value=scalemax
      ENDCASE

      uv.wid.hmax: BEGIN 
         halfmax = ev.value
         widget_control, uv.wid.hmax, set_value=halfmax
      ENDCASE

      uv.wid.oxycont: BEGIN 
         cao2 = ev.value
         widget_control, uv.wid.oxycont, set_value=cao2
      ENDCASE

      uv.wid.proc: BEGIN
         stime = 1000*img.len

         CASE ev.value OF 
            
            'Process': BEGIN 
               
               img.ff = 1
               img.lf = 1
               img.fp = slices[0]
               img.lp = slices[1]
               img.proc = proctype
               msg = ''
               IF (getframe(img, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  RETURN
               ENDIF
               widget_control, uv.wid.msg, set_value='File '+img.fname+' read'

               IF (proctype GT 0) THEN BEGIN 
                  msg = ''
                  IF (gethdr(img, msg) NE 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value=msg
                     RETURN
                  ENDIF
                  msg = 'Metabolic factors read for '+img.fname
                  widget_control, uv.wid.msg, set_value=msg
               ENDIF 

               IF (proctype EQ 7) THEN img.mcal[8] = 0.01 * cao2
               
               IF (proctype EQ 3 OR proctype EQ 4) THEN BEGIN ; Oxygen models require CBF image
                  cbf.ff = img.ff
                  cbf.lf = img.lf
                  cbf.fp = img.fp
                  cbf.lp = img.lp
                  cbf.proc = 1
                  fname = img.fname
                  IF (strlen(fname) GT 0) THEN BEGIN 
                     l1 =  rstrpos(fname,'/')
                     IF (l1 GT 0) THEN strput,fname,'*',l1+1
                     l1 = rstrpos(fname,'oo')
                     IF (l1 GT 0) THEN strput,fname,'ho',l1
                  ENDIF ELSE fname = '*ho*v'
                  fname = dialog_pickfile(FILE=cbf.fname, FILTER=fname, /READ, $
                                          TITLE='Select HO (CBF) Image')
                  IF (strlen(fname) EQ 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value='No file entered'
                     RETURN
                  ENDIF
                  cbf.fname = fname
                  IF (getframe(cbf, msg) NE 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value=msg
                     cbf.fname = ''
                     widget_control, uv.wid.honame, set_value=cbf.fname
                     RETURN
                  ENDIF
                  widget_control, uv.wid.msg, set_value='File '+cbf.fname+' read'

                  msg = ''
                  IF (gethdr(cbf, msg) NE 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value=msg
                     RETURN
                  ENDIF
                  msg = 'CBF metabolic factors read for '+cbf.fname
                  widget_control, uv.wid.msg, set_value=msg

                  cbv.ff = img.ff
                  cbv.lf = img.lf
                  cbv.fp = img.fp
                  cbv.lp = img.lp
                  cbv.proc = 2
                  cbv.fname = ''
                  fname = img.fname
                  IF (strlen(fname) GT 0) THEN BEGIN 
                     l1 =  rstrpos(fname,'/')
                     IF (l1 GT 0) THEN strput,fname,'*',l1+1
                     l1 = rstrpos(fname,'oo')
                     IF (l1 GT 0) THEN strput,fname,'oc',l1
                  ENDIF ELSE fname = '*oc*v'
                  fname = dialog_pickfile(FILE=cbv.fname, FILTER=fname, /READ, $
                                          TITLE='Select CO (CBV) Image')
                  
                  IF (strlen(fname) EQ 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value='No file entered'
                     RETURN
                  ENDIF
                  cbv.fname = fname
                  IF (getframe(cbv, msg) NE 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value=msg
                     cbv.fname = ''
                     widget_control, uv.wid.honame, set_value=cbv.fname
                     RETURN
                  ENDIF
                  widget_control, uv.wid.msg, set_value='File '+cbv.fname+' read'

                  msg = ''
                  IF (gethdr(cbv, msg) NE 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value=msg
                     RETURN
                  ENDIF
                  msg = 'CBV metabolic factors read for '+cbv.fname
                  widget_control, uv.wid.msg, set_value=msg
               ENDIF 
               
               IF (strlen(msk.fname) GT 0) THEN BEGIN 
                  msk.ff = img.ff
                  msk.lf = img.lf
                  msk.fp = img.fp
                  msk.lp = img.lp
                  msk.proc = 2
                  msg = ''
                  IF (getframe(msk, msg) NE 0) THEN BEGIN
                     widget_control, uv.wid.msg, set_value=msg
                     RETURN
                  ENDIF
                  widget_control, uv.wid.msg, set_value='File '+msk.fname+' read'
               ENDIF 
               newdata = 0

               halfmax = ev.value
               widget_control, uv.wid.hmax, set_value=halfmax
            ENDCASE
            
            'Plot': BEGIN 
               IF (newdata) THEN BEGIN 
                  msg = 'You must PROCESS before plotting with these new values'
                  widget_control, uv.wid.msg, set_value=msg
                  RETURN
               ENDIF

               lbnd = range[0]
               ubnd = range[1] - (range[1]-range[0])/1000.
               image = reform((*img.data)[*,*,*,*])
               IF (cbf.data NE ptr_new()) THEN cbfimg = reform((*cbf.data)[*,*,*,*])
               IF (cbv.data NE ptr_new()) THEN cbvimg = reform((*cbv.data)[*,*,*,*])
               image = voi_process(img.proc, image, img.mtype, img.mcal, cbfimg, cbf.mcal, cbvimg, cbv.mcal, stime)
               IF (msk.data NE ptr_new()) THEN BEGIN 
                  mskimg = reform((*msk.data)[*,*,*,*])
                  indx = where(mskimg GE maskval, count)
                  IF (count LE 0) THEN BEGIN 
                     widget_control, uv.wid.msg, set_value='No pixels in mask are >= '+maskval
                     RETURN
                  ENDIF
                  hist = histogram(image(indx), MIN=lbnd, MAX=ubnd, BINSIZE=binsize)
               ENDIF ELSE BEGIN 
                  hist = histogram(image, MIN=lbnd, MAX=ubnd, BINSIZE=binsize)
               ENDELSE 
               nbins = n_elements(hist)
               pos = rstrpos(img.fname,'/')
               title = strmid(img.fname,pos+1)
               CASE proctype OF 
                  0: xtitle = 'PET Counts'
                  1: xtitle = 'CBF (ml/100g/min)'
                  2: xtitle = 'CBV (ml/100g)'
                  3: xtitle = 'OEF'
                  4: xtitle = 'CMRO2 (ml/100g/min)'
                  7: xtitle = 'DO2 (ml/100g/min))'
                  ELSE: xtitle = ''
               ENDCASE 
               ytitle = 'Number of Pixels'             
               xrange=[range[0],range[1]]
               x0 = range[0]
               y0 = 0.
               IF (scalemax EQ 0) THEN yrange=[0, max(hist)] $
               ELSE yrange=[0, scalemax]
               red = [0,255,255,255]
               green = [0,0,255,255]
               blue = [0,0,0,255]
               tvlct,red,green,blue
               plot, hist, /nodata, title=title, xtitle=xtitle, ytitle=ytitle, $
                  xrange=xrange, yrange=yrange, xstyle=1, ystyle=1, ytickformat='(I6)',$
                  xtickformat='(I)',charsize=1.4, charthick=2, color=3
               FOR i=0,nbins-1 DO BEGIN
                  x1 = x0 + binsize
                  y1 = hist[i]
                  IF (y1 GT yrange[1]) THEN y1 = yrange[1]
                  x = [x0,x0,x1,x1]
                  y = [y0,y1,y1,y0]
                  polyfill,x,y,color=2
                  plots,x,y,color=1
                  x0 = x1
               ENDFOR 
            ENDCASE
            
            'Mean': BEGIN 
               IF (newdata) THEN BEGIN 
                  msg = 'You must PROCESS before computing mean'
                  widget_control, uv.wid.msg, set_value=msg
                  RETURN
               ENDIF

               lbnd = range[0]
               ubnd = range[1] - (range[1]-range[0])/1000.
               image = reform((*img.data)[*,*,*,*])
               IF (cbf.data NE ptr_new()) THEN cbfimg = reform((*cbf.data)[*,*,*,*])
               IF (cbv.data NE ptr_new()) THEN cbvimg = reform((*cbv.data)[*,*,*,*])
               image = voi_process(img.proc, image, img.mtype, img.mcal, cbfimg, cbf.mcal, cbvimg, cbv.mcal, stime)
               IF (msk.data NE ptr_new()) THEN BEGIN 
                  mskimg = reform((*msk.data)[*,*,*,*])
                  indx = where(mskimg GE maskval, count)
                  IF (count LE 0) THEN BEGIN 
                     widget_control, uv.wid.msg, set_value='No pixels in mask are >= '+maskval
                     RETURN
                  ENDIF
                  meanval = mean(image(indx))
                  sd = stddev(image(indx))
               ENDIF ELSE BEGIN 
                  meanval = mean(image)
                  sd = stddev(image)
               ENDELSE 
               str1 = strcompress(string(meanval), /remove_all)
               str2 = strcompress(string(sd), /remove_all)
               widget_control, uv.wid.msg, set_value='Mean= '+str1+'   SD= '+str2
            ENDCASE
            
            'Midpoint': BEGIN 
               IF (newdata) THEN BEGIN 
                  msg = 'You must PROCESS before computing midpoint'
                  widget_control, uv.wid.msg, set_value=msg
                  RETURN
               ENDIF
               image = reform((*img.data)[*,*,*,*])
               IF (cbf.data NE ptr_new()) THEN cbfimg = reform((*cbf.data)[*,*,*,*])
               IF (cbv.data NE ptr_new()) THEN cbvimg = reform((*cbv.data)[*,*,*,*])
               image = voi_process(img.proc, image, img.mtype, img.mcal, cbfimg, cbf.mcal, cbvimg, cbv.mcal, stime)
               lbnd = range[0]
               ubnd = range[1] - (range[1]-range[0])/1000.
               IF (msk.data NE ptr_new()) THEN BEGIN 
                  mskimg = reform((*msk.data)[*,*,*,*])
                  indx = where(mskimg GE maskval, count)
                  IF (count LE 0) THEN BEGIN 
                     widget_control, uv.wid.msg, set_value='No pixels in mask are >= '+maskval
                     RETURN
                  ENDIF
                  hist = histogram(image(indx), MIN=lbnd, MAX=ubnd, BINSIZE=binsize)
               ENDIF ELSE BEGIN 
                  hist = histogram(image, MIN=lbnd, MAX=ubnd, BINSIZE=binsize)
               ENDELSE 
               nbins = n_elements(hist)
               peakval = max(hist)
               indx = where (hist EQ peakval)
               IF (n_elements(indx) GT 1 )  THEN peak = fix(binsize*mean(indx)) $
               ELSE peak = fix(binsize*indx)
               str1 = strcompress(string(peak), /remove_all)
               IF (halfmax LE 0) THEN BEGIN
                  halfmax = max(hist)/2
                  widget_control, uv.wid.hmax, set_value=halfmax
               ENDIF
               lastline = halfmax
               indx = where (hist GE halfmax)
               midmax = lbnd + (binsize*min(indx)+binsize*max(indx))/2
               halfwidth = binsize*(max(indx)-min(indx))
               str2 = strcompress(string(midmax), /remove_all)
               str4 = strcompress(string(halfwidth), /remove_all)
               str3 = 'Midpoint at Half-Maximum= '+str2+'     Peak at '+str1+'    HW= '+str4
               widget_control, uv.wid.msg, set_value=str3
               hm1 = lbnd + binsize*min(indx)
               hm2 = lbnd + binsize*max(indx)
               x = [hm1,hm2]
               y = [halfmax,halfmax]
               plots,x,y,color=2
               inc = peakval/10
               x = [midmax,midmax]
               y = [halfmax-inc,halfmax+inc]
               plots,x,y,color=2
            ENDCASE
            
            'Print': BEGIN
               IF (newdata) THEN BEGIN 
                  msg = 'You must PROCESS before plotting with these new values'
                  widget_control, uv.wid.msg, set_value=msg
                  RETURN
               ENDIF
               fname = 'imghisto_tmp.ps'

               lbnd = range[0]
               ubnd = range[1] - (range[1]-range[0])/1000.
               image = reform((*img.data)[*,*,*,*])
               IF (cbf.data NE ptr_new()) THEN cbfimg = reform((*cbf.data)[*,*,*,*])
               IF (cbv.data NE ptr_new()) THEN cbvimg = reform((*cbv.data)[*,*,*,*])
               image = voi_process(img.proc, image, img.mtype, img.mcal, cbfimg, cbf.mcal, cbvimg, cbv.mcal, stime)
               IF (msk.data NE ptr_new()) THEN BEGIN 
                  mskimg = reform((*msk.data)[*,*,*,*])
                  indx = where(mskimg GE maskval, count)
                  IF (count LE 0) THEN BEGIN 
                     widget_control, uv.wid.msg, set_value='No pixels in mask are >= '+maskval
                     RETURN
                  ENDIF
                  hist = histogram(image(indx), MIN=lbnd, MAX=ubnd, BINSIZE=binsize)
               ENDIF ELSE BEGIN 
                  hist = histogram(image, MIN=lbnd, MAX=ubnd, BINSIZE=binsize)
               ENDELSE 
               nbins = n_elements(hist)
               pos = rstrpos(img.fname,'/')
               title = strmid(img.fname,pos+1)
               CASE proctype OF 
                  0: xtitle = 'PET Counts'
                  1: xtitle = 'CBF (ml/100g/min)'
                  2: xtitle = 'CBV (ml/100g)'
                  3: xtitle = 'OEF'
                  4: xtitle = 'CMRO2 (ml/100g/min)'
                  7: xtitle = 'DO2 (ml/100g/min))'
                  ELSE: xtitle = ''
               ENDCASE 
               ytitle = 'Number of Pixels'             
               xrange=[range[0],range[1]]
               x0 = range[0]
               y0 = 0.
               IF (scalemax EQ 0) THEN yrange=[0, max(hist)] $
               ELSE yrange=[0, scalemax]
               set_plot,'ps'
               device, filename=fname,xsize=7,ysize=6,xoffset=0.8,yoffset=3,/inches
               plot, hist, /nodata, title=title, xtitle=xtitle, ytitle=ytitle, $
                  xrange=xrange, yrange=yrange, xstyle=1, ystyle=1, ytickformat='(I6)', $
                  xtickformat='(I)',charsize=1.4, charthick=2
               FOR i=0,nbins-1 DO BEGIN
                  x1 = x0 + binsize
                  y1 = hist[i]
                  IF (y1 GT yrange[1]) THEN y1 = yrange[1]
                  x = [x0,x0,x1,x1]
                  y = [y0,y1,y1,y0]
                  plots,x,y
                  x0 = x1
               ENDFOR
               xmin = xrange[0]
               ymax = yrange[1]
               IF (strlen(msk.fname) GT 1) THEN BEGIN
                  pos = rstrpos(msk.fname,'/')
                  caption = 'Mask = '+strmid(msk.fname,pos+1)
                  xyouts, xmin, -0.25*ymax, caption, alignment=0, charsize=1.5, charthick=1.5
               ENDIF
               IF (meanval NE 0) THEN BEGIN
                  str1 = strcompress(string(meanval), /remove_all)
                  str2 = strcompress(string(sd), /remove_all)
                  caption = 'Mean= '+str1+'   SD= '+str2
                  xyouts, xmin, -0.32*ymax, caption, alignment=0, charsize=1.5, charthick=1.5
               ENDIF
               IF (midmax NE 0) THEN BEGIN
                  str1 = strcompress(string(midmax), /remove_all)
                  str3 = strcompress(string(halfwidth), /remove_all)
                  caption = 'Midpoint at Half-Maximum ='+str1+'  HW= '+str3
                  xyouts, xmin, -0.38*ymax, caption, alignment=0, charsize=1.5, charthick=1.5
                  str1 = strcompress(string(halfmax), /remove_all)
                  caption = '    using Half-Max ='+str1
                  xyouts, xmin, -0.44*ymax, caption, alignment=0, charsize=1.5, charthick=1.5
                  str1 = strcompress(string(peak), /remove_all)
                  caption = 'Peak ='+str1
                  xyouts, xmin, -0.50*ymax, caption, alignment=0, charsize=1.5, charthick=1.5
                  y = [halfmax,halfmax]
                  plots,xrange,y,linestyle=1
               ENDIF
               today = strmid(systime(0),4,6)+strmid(systime(0),19)
               xyouts, xmin, -0.60*ymax, today, alignment=0, charsize=1.0, charthick=1.0
               device,/close
               set_plot,'X'
               cmd = '/usr/bin/cat '+fname+' | lpr'
               spawn, cmd
               cmd = '/usr/bin/rm '+fname
               spawn, cmd
               msg = 'Histogram sent to default printer'
               widget_control, uv.wid.msg, set_value=msg
            ENDCASE 
            
            'Save': BEGIN
               IF (newdata) THEN BEGIN 
                  msg = 'You must PROCESS before plotting with these new values'
                  widget_control, uv.wid.msg, set_value=msg
                  RETURN
               ENDIF
               fname = ''
               fname = dialog_pickfile(FILE=fname, /WRITE)
               IF (strlen(fname) EQ 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value='No file entered'
                  RETURN
               ENDIF

               lbnd = range[0]
               ubnd = range[1] - (range[1]-range[0])/1000.
               image = reform((*img.data)[*,*,*,*])
               IF (cbf.data NE ptr_new()) THEN cbfimg = reform((*cbf.data)[*,*,*,*])
               IF (cbv.data NE ptr_new()) THEN cbvimg = reform((*cbv.data)[*,*,*,*])
               image = voi_process(img.proc, image, img.mtype, img.mcal, cbfimg, cbf.mcal, cbvimg, cbv.mcal, stime)
               IF (msk.data NE ptr_new()) THEN BEGIN 
                  mskimg = reform((*msk.data)[*,*,*,*])
                  indx = where(mskimg GE maskval, count)
                  IF (count LE 0) THEN BEGIN 
                     widget_control, uv.wid.msg, set_value='No pixels in mask are >= '+maskval
                     RETURN
                  ENDIF
                  hist = histogram(image(indx), MIN=lbnd, MAX=ubnd, BINSIZE=binsize)
               ENDIF ELSE BEGIN 
                  hist = histogram(image, MIN=lbnd, MAX=ubnd, BINSIZE=binsize)
               ENDELSE 
               nbins = n_elements(hist)
               pos = rstrpos(img.fname,'/')
               title = strmid(img.fname,pos+1)
               xrange=[range[0],range[1]]
               x0 = range[0]
               y0 = 0.
               IF (binsize GT 10.0) THEN BEGIN 
                  fmt = '(I10,I10,I14)'
                  delta = 1.
               ENDIF ELSE IF (binsize GT 1.0) THEN BEGIN
                  fmt = '(F10.1,F10.1,I14)' 
                  delta = 0.1
               ENDIF ELSE IF (binsize GT 0.1) THEN BEGIN
                  fmt = '(F10.2,F10.2,I14)'
                  delta = 0.01
               ENDIF ELSE BEGIN
                  fmt = '(F10.3,F10.3,I14)'
                  delta = 0.001
               ENDELSE 
               openw,1,fname
               printf, 1, title
               printf, 1, nbins, 3
               FOR i=0,nbins-1 DO BEGIN
                  x1 = x0 + binsize
                  printf, 1, x0, x1-delta, hist[i], FORMAT=fmt
                  x0 = x1
               ENDFOR
               close,1
               msg = 'Data saved to '+fname
               widget_control, uv.wid.msg, set_value=msg
            ENDCASE 
            
            'Exit': widget_control, ev.top, /destroy
            
         ENDCASE 
      ENDCASE 
   ENDCASE
END
   

PRO IMGHISTO

   @@IMAGE_UTILS.h
   @@IMGHISTO.h
   
   on_error, 2
   loadct,5

   cxmax = float(getenv('CXMAX'))
   ventmax = float(getenv('VENTMAX'))
   cxbin = float(getenv('CXBIN'))
   ventbin = float(getenv('VENTBIN'))
   
   base = widget_base (TITLE='IMGHISTO', /COLUMN)
   base1 = widget_base(base, row=1)
   file = cw_bgroup(base1, /ROW, /NO_RELEASE, ['File'])
   fname = cw_field(base1, value='', xsize=80, /return_events)

   
   base1 = widget_base(base, row=1)
   mask = cw_bgroup(base1, /ROW, /NO_RELEASE, /RETURN_NAME, ['Mask'])
   mname = cw_field(base1, value='', xsize=79, /return_events)
   
   base2 = widget_base(base, col=2)
   
   base3 = widget_base(base2, /ROW)
   slc = lonarr(2)
   slc[0] = cw_field(base3, title='Image Slice Min', /return_events, $
                    /long, xsize=10, ysize=1)
   slc[1] = cw_field(base3, title='Max', /return_events, $
                    /long, xsize=10, ysize=1)
   maskmin = cw_field(base3, title='Mask Pixels <', /return_events, $
                      /float, xsize=10, ysize=1)
   
   base4 = widget_base(base2, /ROW)
   limits = lonarr(2)
   limits[0] = cw_field(base4, title='Histogram  Min =', /return_events, $
                        /float, xsize=10, ysize=1)
   limits[1] = cw_field(base4, title='Max <', /return_events, $
                        /float, xsize=10, ysize=1)
   bin = cw_field(base4, title='  Bin Size', /return_events, $
                  /float, xsize=10, ysize=1)
   
   base5 = widget_base(base2, /ROW)
   proc = cw_bgroup(base5, /ROW, /NO_RELEASE, /RETURN_NAME,  $
                    ['Process', 'Plot', 'Mean', 'Midpoint', 'Save', 'Print', 'Exit'])
   scale = cw_field(base5, title='Truncate Scale', /return_events, $
                      /float, xsize=10, ysize=1)

   base6 = widget_base(base, /ROW)
   hmax = cw_field(base6, title='Half-Max for Midpoint', /return_events, $
                      /int, xsize=10, ysize=1)

   oxycont = cw_field(base6, title='CaO2', /return_events, $
                      /float, xsize=10, ysize=1)

   base7 = widget_base(base2, /ROW)
   msg = widget_text(base)
   
   ptype = cw_bgroup(base2, /COLUMN, /EXCLUSIVE, /NO_REL, $
                     ['Counts', 'CBF', 'CBV', 'OEF', 'CMRO2', 'DO2'], SET_VALUE=0)
   
   wid = {WIDGETS,		$
          base     : base,	$ ; top level base
          file     : file,	$ ; file selection button id
          fname    : fname,	$ ; filename
          slc      : slc,	$ ; slice range
          ptype    : ptype,	$ ; processing type button id
          mask     : mask,	$ ; mask file selection button it
          mname    : mname,	$ ; mask filename
          maskmin  : maskmin,	$ ; mask minimum button id
          limits   : limits,	$ ; range of histogram  
          bin      : bin,	$ ; bin size
          proc     : proc,	$ ; process button id
          scale    : scale,	$ ; fixed maximum for histogram
          hmax     : hmax,	$ ; half-max for midpoint
          oxycont  : oxycont,	$ ; arterial oxygen content
          msg      : msg	$ ; message box
         }
   
   uv = {wid:wid}
   
   widget_control, slc[0], set_value=slices[0]
   widget_control, slc[1], set_value=slices[1]
   widget_control, ptype, set_value=proctype
   widget_control, maskmin, set_value=maskval
   widget_control, limits[0], set_value=range[0]
   widget_control, limits[1], set_value=range[1]
   widget_control, bin, set_value=binsize
   widget_control, scale, set_value=scalemax
   widget_control, hmax, set_value=halfmax
   widget_control, oxycont, set_value=cao2

   widget_control, base, set_uvalue=uv
   widget_control, base, /realize, xoffset=0, yoffset=0
   xmanager, "IMGHISTO", base, EVENT_HANDLER='IMGHISTO_EVENT'

END 

@


1.19
log
@editable filenames
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.18 2008/12/10 21:41:24 tom Exp tom $
d18 1
d146 1
d179 5
d212 2
d341 1
d486 1
d667 2
a668 1
   hmax = cw_field(base, title='Half-Max for Midpoint', /return_events, $
d671 4
a674 1
   base6 = widget_base(base2, /ROW)
d678 1
a678 1
                     ['Counts', 'CBF', 'CBV', 'OEF', 'CMRO2'], SET_VALUE=0)
d694 1
d709 1
@


1.18
log
@*** empty log message ***
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.17 2005/06/30 15:29:13 tom Exp tom $
d55 12
d112 12
d623 2
a624 1
   fname = widget_text(base1, xsize=80)
d628 1
a628 1
   mname = widget_text(base1, xsize=79)
@


1.17
log
@reset halfmax after Process
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.16 2004/05/27 14:30:14 tom Exp tom $
d402 1
d404 2
a405 1
               str3 = 'Midpoint at Half-Maximum= '+str2+'     Peak at '+str1
d489 2
a490 1
                  caption = 'Midpoint at Half-Maximum ='+str1
@


1.16
log
@print negative means
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.15 2004/03/17 23:01:15 tom Exp $
d270 3
@


1.15
log
@pass range and binsize
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.14 2003/12/18 15:05:31 tom Exp tom $
d476 1
a476 1
               IF (meanval GT 0) THEN BEGIN
d482 1
a482 1
               IF (midmax GT 0) THEN BEGIN
@


1.14
log
@*** empty log message ***
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.13 2003/07/17 15:17:38 tom Exp tom $
d87 3
a89 2
               range[1] = 25000
               binsize = 50
d92 3
a94 2
               range[1] = 15000
               binsize = 100
d584 5
@


1.13
log
@*** empty log message ***
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.12 2003/01/30 14:31:00 tom Exp tom $
d88 1
d92 1
@


1.12
log
@customize by setting defaults for _cx_ and _vent_ for brain segmentation processing
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.11 2002/10/04 15:00:36 tom Exp tom $
d87 1
a87 1
               range[1] = 800
d90 1
a90 1
               range[1] = 500
@


1.11
log
@add today's date to printed plot
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.10 2002/01/28 20:24:36 tom Exp $
d75 18
@


1.10
log
@adjustable halfmax
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.9 2001/06/01 15:05:21 tom Exp tom $
d473 2
@


1.9
log
@add mtype, scantime as parameters passed to voi_process
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.8 2001/03/05 17:20:39 tom Exp tom $
d126 5
d370 5
a374 1
               halfmax = max(hist)/2
d380 9
d464 3
d469 3
a471 1
                  xyouts, xmin, -0.44*ymax, caption, alignment=0, charsize=1.5, charthick=1.5
d596 3
d618 1
d632 1
@


1.8
log
@add peak
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.7 2001/03/02 18:00:30 tom Exp tom $
d127 2
a128 1
         
d257 1
a257 1
               image = voi_process(img.proc, image, img.mcal, cbfimg, cbf.mcal, cbvimg, cbv.mcal)
d317 1
a317 1
               image = voi_process(img.proc, image, img.mcal, cbfimg, cbf.mcal, cbvimg, cbv.mcal)
d345 1
a345 1
               image = voi_process(img.proc, image, img.mcal, cbfimg, cbf.mcal, cbvimg, cbv.mcal)
d386 1
a386 1
               image = voi_process(img.proc, image, img.mcal, cbfimg, cbf.mcal, cbvimg, cbv.mcal)
d478 1
a478 1
               image = voi_process(img.proc, image, img.mcal, cbfimg, cbf.mcal, cbvimg, cbv.mcal)
@


1.7
log
@add midpoint
add mean sd and midpoint to printout
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.6 2001/02/27 20:41:00 tom Exp tom $
d83 1
a83 1
            widget_control,wid.slc[1],set_value=slices[1]
d92 1
a92 1
            widget_control,wid.slc[0],set_value=slices[0]
d359 5
d366 4
a369 3
               midmax = (binsize*min(indx)+binsize*max(indx))/2
               str1 = strcompress(string(midmax), /remove_all)
               widget_control, uv.wid.msg, set_value='Midpoint at Half-Maximum= '+str1
d445 3
@


1.6
log
@default image extension removed
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.5 2001/02/27 16:11:48 tom Exp tom $
d264 1
a264 1
                  hist = histogram(image(indx), MIN=lbnd, MAX=ubnd, BINSIZE=binsize, OMAX=ymax)
d266 1
a266 1
                  hist = histogram(image, MIN=lbnd, MAX=ubnd, BINSIZE=binsize, OMAX=ymax)
d291 1
a291 1
                  charsize=1.4, charthick=2, color=3
d306 1
a306 1
                  msg = 'You must PROCESS before plotting with these new values'
d324 1
a324 1
                  mean = mean(image(indx))
d327 1
a327 1
                  mean = mean(image)
d330 3
a332 1
               widget_control, uv.wid.msg, set_value='Mean='+string(mean)+'   SD='+string(sd)
d335 31
d387 1
a387 1
                  hist = histogram(image(indx), MIN=lbnd, MAX=ubnd, BINSIZE=binsize, OMAX=ymax)
d389 1
a389 1
                  hist = histogram(image, MIN=lbnd, MAX=ubnd, BINSIZE=binsize, OMAX=ymax)
d412 1
a412 1
                  charsize=1.4, charthick=2
d422 18
d476 1
a476 1
                  hist = histogram(image(indx), MIN=lbnd, MAX=ubnd, BINSIZE=binsize, OMAX=ymax)
d478 1
a478 1
                  hist = histogram(image, MIN=lbnd, MAX=ubnd, BINSIZE=binsize, OMAX=ymax)
d511 1
a511 1
                        
d559 1
a559 1
                    ['Process', 'Plot', 'Mean', 'Save', 'Print', 'Exit'])
@


1.5
log
@add Mean
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.4 2000/10/10 12:58:40 tom Exp tom $
d44 1
a44 1
         ENDIF ELSE fname = '*v'
d66 1
a66 1
         ENDIF ELSE fname = '*v'
@


1.4
log
@truncate y-scale
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.3 1998/07/31 16:37:21 tom Exp tom $
d304 29
d508 1
a508 1
                    ['Process', 'Plot', 'Save', 'Print', 'Exit'])
@


1.3
log
@change boundaries written to Print file
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.2 1998/07/31 15:34:05 tom Exp tom $
d121 5
d283 2
a284 1
               yrange=[0, max(hist)]
d295 1
d344 2
a345 1
               yrange=[0, max(hist)]
d354 1
a405 1
               yrange=[0, max(hist)]
d421 1
a421 1
               printf, 1, 3, nbins
d480 3
d501 1
d514 1
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
; $Id: imghisto.pro,v 1.1 1998/07/30 22:21:42 tom Exp tom $
d416 1
a416 1
                  printf, 1, x0+delta, x1, hist[i], FORMAT=fmt
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
; $Id$
d297 1
a297 1
            'Save Postscript': BEGIN
d303 1
a303 6
               fname = ''
               fname = dialog_pickfile(FILE=fname, FILTER='*ps', /WRITE)
               IF (strlen(fname) EQ 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value='No file entered'
                  RETURN
               ENDIF
d353 5
a357 1
               msg = 'To print, type:  "cat '+fname+' | lpr"'
d361 1
a361 1
            'Save Table': BEGIN
d462 1
a462 1
   limits[0] = cw_field(base4, title='Histogram  Min >', /return_events, $
d464 1
a464 1
   limits[1] = cw_field(base4, title='Max <=', /return_events, $
d471 1
a471 1
                    ['Process', 'Plot', 'Save Postscript', 'Save Table', 'Exit'])
@
