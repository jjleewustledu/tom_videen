head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2003.02.12.15.43.29;	author tom;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@PRO VIDI_ATLAS, uv
   ;; uv = the info structure for this display
   COMMON IMAGE_UTILS
   COMMON VIDI

   trans = [0,0,1,1,1,2,2,3,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13, $
            14,15,15,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25]

   cor = intarr(84)
   cor[0:32]  = [0,0,0,1,1,2,2,2,3,3,4,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14]
   cor[33:58] = [15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,26,27,27]
   cor[59:83] = [28,28,28,29,29,30,30,30,31,31,32,32,32,33,33,34,34,34,35,35,36,36,36,37,37]

   sag = [16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,5,5,4,4,3,3,2,2,1,0,0]

   FOR i = 0,2 DO BEGIN
      IF (atlas[i] AND dsp[i].set) THEN BEGIN
         IF (i EQ 2) THEN BEGIN
            IF ((uv.img[0].dim[0] NE uv.img[1].dim[0]) OR $
                (uv.img[0].dim[1] NE uv.img[1].dim[1]) OR $
                (uv.img[0].dim[2] NE uv.img[1].dim[2])) THEN BEGIN
               widget_control, uv.wid.msg, set_value='Cannot display composite of different sized images'
               RETURN
            ENDIF ELSE IF (uv.img[0].data EQ ptr_new() OR uv.img[1].data EQ ptr_new()) THEN BEGIN
               widget_control, uv.wid.msg, set_value='2 images must be defined'
               RETURN
            ENDIF ELSE j = 0
         ENDIF ELSE j = i

         ;; Check for 2-mm pixel size, a specified image origin, appropriate zoom 
         dim = uv.img[j].dim
         pdim = uv.img[j].pdim
         IF ((pdim[0] NE 2.) AND (pdim[1] NE 2.) AND (pdim[2] NE 2.)) THEN BEGIN
            widget_control, uv.wid.msg, set_value='Atlas available only for images with 2x2x2 mm voxels'
            RETURN
         ENDIF 
         porg = uv.img[j].org
         IF (porg[2] EQ 0.) THEN BEGIN
            widget_control, uv.wid.msg, set_value='Image does not have a defined origin'
            RETURN
         ENDIF 
         zoom = dsp[j].zoom
         CASE atlas_type OF
            0: atype = ''
            1: atype = '_d'
         ENDCASE
         CASE zoom OF
            2: mag = '_025'
            4: mag = '_050'
            8: mag = '_100'
            ELSE: BEGIN
               widget_control, uv.wid.msg, set_value='Atlas available only for Magnification = 2, 4 or 8'
               RETURN
            END
         ENDCASE
         
         ;; Get window dimensions, color and id
         wset, dsp[i].id
         nc = (!d.n_colors-1)

         ;; Read Atlas header
         atlpath = '/usr/local/npg/lib/view25d/'
         CASE orient OF
            0: atlname = atlpath+'Talairach_transverse'+atype+mag
            1: atlname = atlpath+'Talairach_coronal'+atype+mag
            2: atlname = atlpath+'Talairach_sagittal'+atype+mag
         ENDCASE
         msg = ''
         adim = [0L,0L,0L]
         aorg = [0.,0.,0.]
         IF (GETATLHDR(atlname+'.ifh', adim, aorg, msg) LT 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value=msg
            RETURN
         ENDIF

         ;; Atlas slice to display
         p = uv.img[j].p
         ap = -1
         CASE orient OF
            0: BEGIN
               loc = p - porg[2]
               ax = fix(loc) + 33
               xctr = zoom*(dim[0]-porg[0])
               yctr = zoom*(dim[1]-porg[1])
               xsize = zoom*dim[0]
               ysize = zoom*dim[1]
               IF ((ax GE 0) AND (ax LT (size(trans))[1])) THEN ap = trans[ax]
            END
            1: BEGIN
               loc = p - porg[1]
               ax = fix(loc) + 33
               xctr = zoom*(dim[0]-porg[0])
               yctr = zoom*(dim[2]-porg[2])
               xsize = zoom*dim[0]
               ysize = zoom*dim[2]
               IF ((ax GE 0) AND (ax LT (size(cor))[1])) THEN ap = cor[ax]
            END
            2: BEGIN
               loc = porg[0] - p
               ax = fix(abs(loc))
               xctr = zoom*(dim[1]-porg[1])
               yctr = zoom*(dim[2]-porg[2])
               xsize = zoom*dim[1]
               ysize = zoom*dim[2]
               IF ((ax GE 0) AND (ax LT (size(sag))[1])) THEN ap = sag[ax]
            END
         ENDCASE
         IF (ap GE 0) THEN BEGIN
            openr,lun, atlname+'.img', /GET_LUN
            atlimg = ASSOC(lun, intarr(adim[0],adim[1]))
            
            ;; Read the subwindow corresponding to the atlas, add the atlas, and write it back
            x0 = fix(xctr - adim[0] + aorg[0])
            y0 = fix(yctr - adim[1] + aorg[1])
            x1 = x0 + adim[0] - 1 
            y1 = y0 + adim[1] - 1
            IF ((x0 GE 0) AND (y0 GE 0) AND (x1 LT xsize) AND (y1 LT ysize)) THEN BEGIN
               temp = tvrd(x0, y0, adim[0], adim[1])
               indx = where(atlimg[ap] GT 0)
               temp(indx) = nc+1
               tv,temp,x0,y0
            ENDIF ELSE BEGIN
               widget_control, uv.wid.msg, set_value='Atlas tracing extends beyond image window'
               RETURN
            ENDELSE
            close,lun
            free_lun,lun
         ENDIF
         
         ;; Set atlas color and add a label
         IF (atlas[3]) THEN BEGIN
            str = strcompress(string(fix(-2*loc)),/remove_all)
            xyouts,zoom*5,zoom*5,str,charsize=zoom,charthick=2,/device,color=nc+1
         ENDIF
         white  = rotate([255,255,255],4)
         ;;yellow = rotate([255,255,0],4)
         ;;cyan   = rotate([0,255,255],4)
         ;;magenta= rotate([255,0,255],4)
         ;;red    = rotate([255,0,0],4)
         ;;green  = rotate([0,255,0],4)
         ;;blue   = rotate([0,0,255],4)
         ;;black  = rotate([0,0,0],4)
         tvlct,white,nc+1
      ENDIF
   ENDFOR

END
@
