head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2007.03.21.15.32.11;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.12.15.43.29;	author tom;	state Exp;
branches;
next	;


desc
@@


1.2
log
@adjust for very large screen
@
text
@PRO VIDIQDISP1_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON VIDI
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 0
   xfact = 1.
   yfact = 1.
   zoom = dsp[i].zoom
   CASE orient OF
      0: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[1]
         ydim = uv.img[i].dim[1]
      ENDCASE
      1: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
      2: BEGIN
         xsiz = uv.img[i].pdim[1]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
   ENDCASE
   IF (ysiz GT xsiz) THEN yfact = ysiz/xsiz $
   ELSE IF (xsiz GT ysiz) THEN xfact = xsiz/ysiz
   xc = ev.x / (zoom * xfact) + 1
   yc = ydim - ((ev.y + 1) / (zoom * yfact) - 1)
   CASE orient OF
      0: BEGIN
         x = xc
         y = yc
         z = uv.img[i].p
      ENDCASE
      1: BEGIN
         x = xc
         y = uv.img[i].p
         z = yc
      ENDCASE
      2: BEGIN
         x = uv.img[i].p
         y = xc
         z = yc
      ENDCASE
   ENDCASE
   str = string(x, y, z, format='("X =",I6,"  Y =",I6,"  Z =",I6)')
   widget_control, uv.wid.msg, set_value=str
END   

PRO VIDIQDISP2_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON VIDI
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 1
   xfact = 1.
   yfact = 1.
   zoom = dsp[i].zoom
   CASE orient OF
      0: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[1]
         ydim = uv.img[i].dim[1]
      ENDCASE
      1: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
      2: BEGIN
         xsiz = uv.img[i].pdim[1]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
   ENDCASE
   IF (ysiz GT xsiz) THEN yfact = ysiz/xsiz $
   ELSE IF (xsiz GT ysiz) THEN xfact = xsiz/ysiz
   xc = ev.x / (zoom * xfact) + 1
   yc = ydim - ((ev.y + 1) / (zoom * yfact) - 1)
   CASE orient OF
      0: BEGIN
         x = xc
         y = yc
         z = uv.img[i].p
      ENDCASE
      1: BEGIN
         x = xc
         y = uv.img[i].p
         z = yc
      ENDCASE
      2: BEGIN
         x = uv.img[i].p
         y = xc
         z = yc
      ENDCASE
   ENDCASE
   str = string(x, y, z, format='("X =",I6,"  Y =",I6,"  Z =",I6)')
   widget_control, uv.wid.msg, set_value=str
END   

PRO VIDIQDISP3_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON VIDI
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 0
   xfact = 1.
   yfact = 1.
   zoom = dsp[i].zoom
   CASE orient OF
      0: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[1]
         ydim = uv.img[i].dim[1]
      ENDCASE
      1: BEGIN
         xsiz = uv.img[i].pdim[0]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
      2: BEGIN
         xsiz = uv.img[i].pdim[1]
         ysiz = uv.img[i].pdim[2]
         ydim = uv.img[i].dim[2]
      ENDCASE
   ENDCASE
   IF (ysiz GT xsiz) THEN yfact = ysiz/xsiz $
   ELSE IF (xsiz GT ysiz) THEN xfact = xsiz/ysiz
   xc = ev.x / (zoom * xfact) + 1
   yc = ydim - ((ev.y + 1) / (zoom * yfact) - 1)
   CASE orient OF
      0: BEGIN
         x = xc
         y = yc
         z = uv.img[i].p
      ENDCASE
      1: BEGIN
         x = xc
         y = uv.img[i].p
         z = yc
      ENDCASE
      2: BEGIN
         x = uv.img[i].p
         y = xc
         z = yc
      ENDCASE
   ENDCASE
   str = string(x, y, z, format='("X =",I6,"  Y =",I6,"  Z =",I6)')
   widget_control, uv.wid.msg, set_value=str
END   

PRO VIDIQ_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON VIDI
   
   catch, error_status
   IF (error_status NE 0) THEN BEGIN
      ok = widget_message(!err_string)
      RETURN
   END
   setuv = 0
   newrange = 0
   redisplay = 0
   xloc2 = 100
   yloc2 = 70
   widget_control, ev.top, get_uvalue=uv
   widget_control, uv.wid.msg, set_value=''
   
   nimg = 1                     ; max index for images
   nwin = 2                     ; max index for display windows
   CASE ev.id OF
      
      uv.wid.file: BEGIN
         
         IF (ev.value EQ 1) THEN i = 0 ELSE i = 1
         
         BEGIN                  ; First Frame, All Planes
            uv.img[i].ff = 1
            uv.img[i].lf = 1
            uv.img[i].fp = 1
            uv.img[i].lp = 512
            fmode = 0
         ENDCASE
         
         fname = ''
         IF (default_path EQ 0) THEN BEGIN
            IF (strlen(uv.img[i].fname) GT 0) THEN fname = uv.img[i].fname $
            ELSE IF (strlen(uv.img[0].fname) GT 0) THEN fname = uv.img[0].fname $
            ELSE IF (strlen(uv.img[1].fname) GT 0) THEN fname = uv.img[1].fname
         ENDIF ELSE IF (default_path EQ 1) THEN BEGIN
            IF (strlen(uv.img[0].fname) GT 0) THEN fname = uv.img[0].fname 
         ENDIF ELSE IF (default_path EQ 2) THEN BEGIN
            IF (strlen(uv.img[1].fname) GT 0) THEN fname = uv.img[1].fname
         ENDIF ELSE BEGIN
            fname = local_path+"*"
         ENDELSE

         IF (strlen(fname) GT 0) THEN BEGIN 
            l1 = rstrpos(fname,'/')
            l2 = rstrpos(fname,'.')
            IF (l2 GT 0) THEN BEGIN
               str1 = string(replicate(32b,(l2-l1-2)))
               str1 = '*'+str1
               strput,fname,str1,l1+1
               fname = strcompress(fname, /remove_all)
            ENDIF ELSE fname = '*'
         ENDIF ELSE fname = '*'
         
         fname = dialog_pickfile(FILE=uv.img[i].fname, FILTER=fname, /READ)
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN 
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (getframe(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
               uv.img[i].fname = ''
               RETURN
            ENDIF
            tmp = uv.img[i].p
            uv.img[i] = image
            IF (orient EQ 0) THEN BEGIN ; keep same plane if in range
               uv.img[i].p = tmp > uv.img[i].fp
               uv.img[i].p = tmp < uv.img[i].lp
            ENDIF ELSE uv.img[i].p = tmp
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            uv.img[i].proc = 0
            setuv = 1
            newrange = 1
            IF (dsp[i].set) THEN redisplay = 1
         ENDELSE 

      ENDCASE 

      ;; -------------------------------------------------------------------------------
      uv.wid.fname[0]: BEGIN	; same as last
         i = 0
         fname = ev.value
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN 
            uv.img[i].fp = 1
            uv.img[i].lp = 512
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (getframe(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
               uv.img[i].fname = ''
               RETURN
            ENDIF
            tmp = uv.img[i].p
            uv.img[i] = image
            IF (orient EQ 0) THEN BEGIN ; keep same plane if in range
               uv.img[i].p = tmp > uv.img[i].fp
               uv.img[i].p = tmp < uv.img[i].lp
            ENDIF ELSE uv.img[i].p = tmp
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            uv.img[i].proc = 0
            setuv = 1
            newrange = 1
            IF (dsp[i].set) THEN redisplay = 1
         ENDELSE 
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      
      uv.wid.fname[1]: BEGIN	; same as last
         i = 1
         fname = ev.value
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN 
            uv.img[i].fp = 1
            uv.img[i].lp = 512
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (getframe(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
               uv.img[i].fname = ''
               RETURN
            ENDIF
            tmp = uv.img[i].p
            uv.img[i] = image
            IF (orient EQ 0) THEN BEGIN ; keep same plane if in range
               uv.img[i].p = tmp > uv.img[i].fp
               uv.img[i].p = tmp < uv.img[i].lp
            ENDIF ELSE uv.img[i].p = tmp
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            uv.img[i].proc = 0
            setuv = 1
            newrange = 1
            IF (dsp[i].set) THEN redisplay = 1
         ENDELSE 
      ENDCASE 

      ;; -------------------------------------------------------------------------------
      uv.wid.orient: BEGIN
         CASE ev.value OF
            'Transverse': BEGIN
               orient = 0
               lp = uv.img[0].lp
            ENDCASE 
            'Coronal': BEGIN 
               IF (uv.img[0].dim[2] GT 1) THEN BEGIN
                  orient = 1
                  lp = uv.img[0].dim[1] 
               ENDIF ELSE BEGIN
                  msg = 'Transverse orientation only for multiple planes'
                  widget_control, uv.wid.msg, set_value=msg
               ENDELSE
            ENDCASE 
            'Sagittal': BEGIN
               IF (uv.img[0].dim[2] GT 1) THEN BEGIN
                  orient = 2
                  lp = uv.img[0].dim[0] 
               ENDIF ELSE BEGIN
                  msg = 'Transverse orientation only for multiple planes'
                  widget_control, uv.wid.msg, set_value=msg
               ENDELSE
            ENDCASE 
         ENDCASE
         setuv = 1
         newrange = 1
         redisplay = 1
         slice = (fp + lp)/2
         uv.img[0].p = slice
         uv.img[1].p = slice
         widget_control, uv.wid.slider, set_slider_max=lp
         widget_control, uv.wid.slider, set_value=slice
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.zoom: BEGIN
         FOR i=0,nwin DO dsp[i].zoom = ev.value
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.scale: BEGIN
         VIDI_SCALE, uv.wid.base
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.exit: BEGIN
         FOR i=0, nimg DO if (uv.img[i].data NE ptr_new()) THEN ptr_free, uv.img[i].data
         widget_control, ev.top, /destroy
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.up: BEGIN
         CASE fmode OF
            0: BEGIN
               FOR i=0, nimg DO IF (uv.img[i].p GT uv.img[i].fp) THEN uv.img[i].p = uv.img[i].p-1
               widget_control, uv.wid.slider, set_value=uv.img[0].p
            ENDCASE
            1: BEGIN
               FOR i=0, nimg DO IF (uv.img[i].f GT uv.img[i].ff) THEN uv.img[i].f = uv.img[i].f-1
               widget_control, uv.wid.slider, set_value=uv.img[0].f
            ENDCASE
            2: BEGIN
               FOR i=0, nimg DO BEGIN
                  IF (uv.img[i].p GT uv.img[i].fp) THEN BEGIN
                     uv.img[i].p = uv.img[i].p - 1 
                  ENDIF ELSE IF (uv.img[i].f  GT uv.img[i].ff) THEN BEGIN
                     uv.img[i].f = uv.img[i].f - 1 
                     uv.img[i].p = uv.img[i].lp
                  ENDIF
               ENDFOR
               planes = uv.img[0].lp-uv.img[0].fp+1
               slice = (uv.img[0].f-uv.img[0].ff)*planes + uv.img[0].p-uv.img[0].fp + 1
               widget_control, uv.wid.slider, set_value=slice
            ENDCASE
         ENDCASE
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.mid: BEGIN
         FOR i=0, nimg DO uv.img[i].p = (lp + fp)/2
         widget_control, uv.wid.slider, set_value=uv.img[0].p
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.down: BEGIN
         p = uv.img[0].p
         CASE fmode OF
            0: BEGIN
               FOR i=0, nimg DO IF (uv.img[i].p LT lp) THEN uv.img[i].p = uv.img[i].p+1
               widget_control, uv.wid.slider, set_value=uv.img[0].p
            ENDCASE
            1: BEGIN
               FOR i=0, nimg DO IF (uv.img[i].f LT uv.img[i].lf) THEN uv.img[i].f = uv.img[i].f+1
               widget_control, uv.wid.slider, set_value=uv.img[0].f
            ENDCASE
            2: BEGIN
               FOR i=0, nimg DO BEGIN
                  IF (uv.img[i].p LT uv.img[i].lp) THEN BEGIN
                     uv.img[i].p = uv.img[i].p + 1 
                  ENDIF ELSE IF (uv.img[i].f  LT uv.img[i].lf) THEN BEGIN
                     uv.img[i].f = uv.img[i].f + 1 
                     uv.img[i].p = uv.img[i].fp
                  ENDIF
               ENDFOR
               planes = uv.img[0].lp-uv.img[0].fp+1
               slice = (uv.img[0].f-uv.img[0].ff)*planes + uv.img[0].p-uv.img[0].fp + 1
               widget_control, uv.wid.slider, set_value=slice
            ENDCASE
         ENDCASE
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.slider: BEGIN
         widget_control, uv.wid.slider, get_value=slice
         CASE fmode OF
            0: FOR i=0, nimg DO IF (slice LE lp) THEN uv.img[i].p = slice
            1: FOR i=0, nimg DO IF (slice LE uv.img[i].lf) THEN uv.img[i].f = slice
            2: BEGIN 
               planes = uv.img[0].lp-uv.img[0].fp+1
               frames = uv.img[0].lf-uv.img[0].ff+1
               FOR i=0, nimg DO BEGIN
                  loc = slice-1
                  f = loc/planes
                  p = loc - f*planes
                  uv.img[i].f = uv.img[i].ff + f
                  uv.img[i].p = uv.img[i].fp + p
               ENDFOR 
            ENDCASE 
         ENDCASE
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.display: BEGIN
         CASE ev.value OF
            0: IF (dsp[0].set EQ 0) THEN dsp[0].set = 1 $
            ELSE dsp[0].set = 0
            1: IF (dsp[1].set EQ 0) THEN dsp[1].set = 1 $
            ELSE dsp[1].set = 0
            2: IF (dsp[2].set EQ 0) THEN dsp[2].set = 1 $
            ELSE dsp[2].set = 0
         END
         newrange = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.defpath: BEGIN
         CASE ev.value OF
            0: default_path = 0
            1: default_path = 1
            2: default_path = 2
            3: default_path = 3
         END
      ENDCASE 

      ;; -------------------------------------------------------------------------------
      uv.wid.atlas: begin
         CASE ev.value OF
            0: IF (atlas[0] EQ 0) THEN atlas[0] = 1 $
            ELSE atlas[0] = 0
            1: IF (atlas[1] EQ 0) THEN atlas[1] = 1 $
            ELSE atlas[1] = 0
            2: IF (atlas[2] EQ 0) THEN atlas[2] = 1 $
            ELSE atlas[2] = 0
            3: IF (atlas[3] EQ 0) THEN atlas[3] = 1 $
            ELSE atlas[3] = 0
         END
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.lut1: BEGIN
         CASE ev.value OF
            1: BEGIN
               loadct, 36, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file=colortable
               dsp[0].range = 0
            ENDCASE
            2: BEGIN
               loadct, 0, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file=colortable
               dsp[0].range = 0
            ENDCASE
            3: BEGIN
               loadct, 3, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file=colortable
               dsp[0].range = 0
            ENDCASE
            4: BEGIN
               loadct, 37, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file=colortable
               dsp[0].range = 2
            ENDCASE
            5: BEGIN
               loadct, 10, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file=colortable
               dsp[0].range = 0
            ENDCASE
         ENDCASE
         redisplay = 1
      ENDCASE
      ;; -------------------------------------------------------------------------------

      uv.wid.lut2: BEGIN
         CASE ev.value OF
            1: BEGIN
               loadct, 36, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file=colortable
               dsp[1].range = 0
            ENDCASE
            2: BEGIN
               loadct, 0, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file=colortable
               dsp[1].range = 0
            ENDCASE
            3: BEGIN
               loadct, 3, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file=colortable
               dsp[1].range = 0
            ENDCASE
            4: BEGIN
               loadct, 37, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file=colortable
               dsp[1].range = 2
            ENDCASE
            5: BEGIN
               loadct, 10, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file=colortable
               dsp[1].range = 0
            ENDCASE
         ENDCASE
         redisplay = 1
      ENDCASE

      ;; -------------------------------------------------------------------------------

      uv.wid.atlasfile: BEGIN
         i = 0
         uv.img[i].ff = 1
         uv.img[i].lf = 1
         uv.img[i].fp = 1
         uv.img[i].lp = 512
         image = uv.img[i]
         CASE ev.value OF
            1 : image.fname = "/usr/local/npg/lib/t88/meanpet.t88"
            2 : image.fname = "/usr/local/npg/lib/t88/meanmr.t88"
         ENDCASE
         msg = ''
         IF (getframe(image, msg) NE 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value=msg
            uv.img[i].fname = ''
            RETURN
         ENDIF
         tmp = uv.img[i].p
         uv.img[i] = image
         IF (orient EQ 0) THEN BEGIN ; keep same plane if in range
            uv.img[i].p = tmp > uv.img[i].fp
            uv.img[i].p = tmp < uv.img[i].lp
         ENDIF ELSE uv.img[i].p = tmp
         widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
         widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
         uv.img[i].proc = 0
         setuv = 1
         newrange = 1
         IF (dsp[i].set) THEN redisplay = 1
      ENDCASE
      ;; -------------------------------------------------------------------------------
      
      ELSE:
      
   ENDCASE
   
   ;;-----------------------------------------------------------------------------------
   
   IF (newrange) THEN BEGIN
      
      IF ((dsp[0].set) AND (strlen(uv.img[0].fname) GT 0) AND $
          (dsp[1].set) AND (strlen(uv.img[1].fname) GT 0)) THEN set = 3 $
      ELSE IF ((dsp[1].set) AND (strlen(uv.img[1].fname) GT 0)) THEN set = 2 $
      ELSE IF ((dsp[0].set) AND (strlen(uv.img[0].fname) GT 0)) THEN set = 1 $
      ELSE set = 0

      CASE set OF
         1: BEGIN
            ff = uv.img[0].ff
            lf = uv.img[0].lf
            i = 0
         ENDCASE
         2: BEGIN
            ff = uv.img[1].ff
            lf = uv.img[1].lf
            i = 1
         ENDCASE
         3: BEGIN
            ff = uv.img[0].ff
            lf = uv.img[0].lf
            i = 0
         ENDCASE
         ELSE:
      ENDCASE

      CASE orient OF
         0: BEGIN
            IF (set EQ 3) THEN BEGIN
               fp = uv.img[0].fp > uv.img[1].fp
               lp = uv.img[0].lp <  uv.img[1].lp
            ENDIF ELSE IF (set EQ 2) THEN BEGIN
               fp = uv.img[1].fp
               lp = uv.img[1].lp
            ENDIF ELSE IF (set EQ 1) THEN BEGIN
               fp = uv.img[0].fp
               lp = uv.img[0].lp
            ENDIF
         ENDCASE
         1: BEGIN               ; coronal
            fp = 1
            IF (set EQ 3) THEN lp = uv.img[0].dim[1] <  uv.img[1].dim[1] $
            ELSE IF (set GT 0) THEN lp = uv.img[i].dim[1]
         ENDCASE
         2: BEGIN               ; sagittal
            fp = 1
            IF (set EQ 3) THEN lp = uv.img[0].dim[0] <  uv.img[1].dim[0] $
            ELSE IF (set GT 0) THEN lp = uv.img[i].dim[0]
         ENDCASE
      ENDCASE

      IF (set GT 0) THEN BEGIN 
         CASE fmode OF 
            0: BEGIN 
               widget_control, uv.wid.slider, set_slider_min=fp
               IF (uv.img[i].lp GT uv.img[i].fp+1) THEN $
                  widget_control, uv.wid.slider, set_slider_max=lp $
               ELSE widget_control, uv.wid.slider, set_slider_max=fp+1
               IF (uv.img[i].p GT lp) THEN FOR k=0,1 DO uv.img[k].p = lp
               IF (uv.img[i].p LT fp) THEN FOR k=0,1 DO uv.img[k].p = fp
               widget_control, uv.wid.slider, set_value=uv.img[i].p
               FOR k= 0, 1 DO BEGIN
                  IF (dsp[k].set) THEN BEGIN 
                     IF (uv.img[k].f GT uv.img[k].lf) THEN uv.img[k].f = uv.img[k].lf
                     IF (uv.img[k].f LT uv.img[k].ff) THEN uv.img[k].f = uv.img[k].ff
                  ENDIF
               ENDFOR
            ENDCASE 
            
            1: BEGIN 
               widget_control, uv.wid.slider, set_slider_min=ff
               IF (uv.img[i].lf GT uv.img[i].ff+1) THEN $
                  widget_control, uv.wid.slider, set_slider_max=lf $
               ELSE widget_control, uv.wid.slider, set_slider_max=ff+1
               IF (uv.img[i].f GT uv.img[i].lf) THEN uv.img[i].f = lf
               IF (uv.img[i].f LT uv.img[i].ff) THEN uv.img[i].f = ff
               uv.img[i].p = uv.img[i].fp
               widget_control, uv.wid.slider, set_value=uv.img[i].f
            ENDCASE 
            
            2: BEGIN 
               CASE set OF 
                  1: BEGIN
                     planes = uv.img[0].dim[2]
                     frames = uv.img[0].dim[3]
                  ENDCASE
                  2: BEGIN
                     planes = uv.img[1].dim[2]
                     frames = uv.img[1].dim[3]
                  ENDCASE
                  3: BEGIN
                     planes = uv.img[0].dim[2] <  uv.img[1].dim[2]
                     frames = uv.img[0].dim[3] <  uv.img[1].dim[3]
                  ENDCASE 
               ENDCASE 
               widget_control, uv.wid.slider, set_slider_min=1
               widget_control, uv.wid.slider, set_slider_max=planes*frames
               IF (uv.img[i].f GT lf) THEN FOR k=0,1 DO uv.img[k].f = lf
               IF (uv.img[i].f LT ff) THEN FOR k=0,1 DO uv.img[k].f = ff
               IF (uv.img[i].p GT lp) THEN FOR k=0,1 DO uv.img[k].p = lp
               IF (uv.img[i].p LT fp) THEN FOR k=0,1 DO uv.img[k].p = fp
               loc = (uv.img[i].f-ff)*planes + uv.img[i].p
               widget_control, uv.wid.slider, set_value=loc
            ENDCASE 
         ENDCASE
      ENDIF 
   ENDIF 
   ;;-----------------------------------------------------------------------------------
   
   IF (redisplay) THEN BEGIN 
      FOR i= 0, nwin DO BEGIN
         IF (dsp[i].set) THEN BEGIN 
            IF (i LT 2) THEN BEGIN
               IF (strlen(uv.img[i].fname) EQ 0) THEN BEGIN 
                  widget_control, uv.wid.msg, set_value='No file has been entered for #'+string(i+1) 
                  redisplay = 0
               ENDIF 
            ENDIF ELSE BEGIN
               IF ((strlen(uv.img[0].fname) EQ 0) OR (strlen(uv.img[1].fname) EQ 0)) THEN BEGIN 
                  widget_control, uv.wid.msg, set_value='Two image files must be entered'
                  redisplay = 0
               ENDIF 
            ENDELSE
            widget_control, uv.wid.win[i], bad_id=status
            IF (status NE 0) then dsp[i].init = 0
            
            IF (redisplay AND (dsp[i].init EQ 0)) THEN BEGIN
               dispbase = widget_base(TITLE='Image '+ strcompress(string(i+1)), $
                                      group_leader=uv.wid.base, uvalue=ev.top)
               win = widget_draw(dispbase, xsize=dsp[i].xsize, ysize=dsp[i].ysize, /button, /motion)
               !p.background = 0
               scrnsize = get_screen_size()
               yloc = scrnsize[1]/2
               IF (yloc GT 340) THEN yloc = 340
               CASE i OF
                  0: xloc = 0
                  1: xloc = scrnsize[0]/3
                  2: xloc = 2*scrnsize[0]/3
               ENDCASE
               widget_control, dispbase, /realize, xoffset=xloc, yoffset=yloc
               widget_control, win, get_value=windowIndex
               wset, windowIndex
               xmanager, "VIDIQDISP"+strcompress(string(i+1),/remove_all), dispbase
               uv.wid.win[i] = win
               dsp[i].id = windowIndex
               dsp[i].init = 1
               IF (dsp[i].nc EQ 0) THEN BEGIN
                  nc = (!d.n_colors-1)/2
                  dsp[0].bot = 0
                  dsp[0].nc = nc
                  dsp[1].bot = nc
                  dsp[1].nc = nc
                  dsp[2].nc = nc
               ENDIF
               IF (i EQ 0) THEN loadct, 36, ncolors=dsp[0].nc, bottom=dsp[0].bot,file=colortable $
               ELSE IF (i EQ 1) THEN loadct, 36, ncolors=dsp[1].nc, bottom=dsp[1].bot, file=colortable
               setuv = 1
            ENDIF 
         ENDIF 
      ENDFOR
      IF (redisplay) THEN BEGIN
         VIDI_DISPLAY, uv
         VIDI_ATLAS, uv
      ENDIF
   ENDIF 

   IF (setuv) THEN widget_control, ev.top, set_uvalue=uv
END


PRO VIDIQ
@@IMAGE_UTILS.h
@@VIDI.h

   on_error, 2
   inputfile = strarr(2)
   inputlut = intarr(2)
   local_path = getenv('PWD')
   inputfile[0] = getenv('FNAME1')
   inputfile[1] = getenv('FNAME2')
   inputlut[0] = getenv('LUT1')
   inputlut[1] = getenv('LUT2')
   default_zoom = getenv('ZOOM')

   base = widget_base (TITLE='QVIDI', /COLUMN)
   base1 = widget_base(base, row=1)
   
   select0 =  ['1\Get File', '0\Image 1', '0\Image 2']
   file = cw_pdmenu(base1, select0)

   select3 = ['1\Orientation','0\Transverse','0\Coronal','0\Sagittal']
   orient = cw_pdmenu(base1, select3, /RETURN_NAME)
   
   select4 = ['1\Magnify','0\ 1 ','0\ 2 ','0\ 3 ','0\ 4 ']
   zoom = cw_pdmenu(base1, select4)
   
   scale = widget_button(base1, value='Scale')
   
   exit = widget_button(base1, value='Exit')
   
   base2 = widget_base(base, row=1)
   base2a = widget_base(base2, row=2)
   fname = lonarr(2)
   fname[0] = cw_field(base2a, title='Image 1', value='', xsize=75, /RETURN_EVENTS)
   fname[1] = cw_field(base2a, title='Image 2', value='', xsize=75, /RETURN_EVENTS)
   
   base2d = widget_base(base2, row=2)
   max = lonarr(2)
   max[0] = cw_field(base2d, title='Max', /noedit, value=0, xsize=10, ysize=1)
   max[1] = cw_field(base2d, title='Max', /noedit, value=0, xsize=10, ysize=1)

   slice = 1
   slider = widget_slider(base, value=slice, min=1, max=47, xsize=1000)
   
   base2e = widget_base(base, column=2)
   display = cw_bgroup(base2e, ['Image 1','Image 2','Composite (2 over 1)'], /NONEXCLUSIVE, /ROW)
   base2f = widget_base(base2e,row=1)
   up = widget_button(base2f, value='<- Up  ')
   mid = widget_button(base2f, value=' Middle ')
   down = widget_button(base2f, value=' Down ->')  
   defpath = cw_bgroup(base2f, ['Previous','Image 1','Image 2','Local  (Default Path)'], $
                       /ROW, /EXCLUSIVE, set_value=default_path)

   base2g = widget_base(base, row=1)
   atl = cw_bgroup(base2g, ['Atlas 1','Atlas 2','Composite Atlas','Label    '], $
                   /ROW, /NONEXCLUSIVE, set_value=atlas)

   select14 = ['1\Color 1','0\Rainbow','0\Gray','0\Hot Metal','0\Red/Green','0\BGRY']
   select15 = ['1\Color 2','0\Rainbow','0\Gray','0\Hot Metal','0\Red/Green','0\BGRY']
   lut1 = cw_pdmenu(base2g, select14)
   lut2 = cw_pdmenu(base2g, select15)

   select16 = ['1\Atlas 1','0\PET','0\MRI']
   atlasfile = cw_pdmenu(base2g, select16)
   atlas_type = 1

   msg = widget_text(base)
   
   voi = ptr_new({VOI})
   (*voi).id = 'VOI'
   
   wid = {WIDGETS,		$
          base     : base,	$ ; top level base
          file     : file,	$ ; file selection button id
          orient   : orient,	$ ; image orientation selection button id
          zoom     : zoom,	$ ; magnification selection button id
          scale    : scale,	$ ; scaling menu selection button id
          up       : up,	$ ; up button
          mid      : mid,	$ ; mid button
          down     : down,	$ ; down button
          defpath  : defpath,	$ ; default path selection
          atlas    : atl,	$ ; atlas selection
          lut1     : lut1,	$ ; quick color table
          lut2     : lut2,	$ 
          atlasfile : atlasfile,	$ ; quick selection of atlas file for image 1
          exit     : exit,	$ ; exit selection button id
          fname    : fname,	$ ; filename entry field id
          max      : max,	$ ; maximum value displayed
          slider   : slider,	$ ; slice selection slider id
          display  : display,	$ ; image number selection buttons id
          msg      : msg,	$ ; message field id
          win      : lonarr(3) 	$ ; draw window widget id
         }

   dsp[0].cut =  50             ; default cutoff for combined display
   FOR i= 0, 2 DO dsp[i].set = 0
   FOR i= 0, 2 DO dsp[i].zoom = default_zoom
   FOR i=0, 1 DO dsp[i].bot = 0
   FOR i=0, 1 DO dsp[i].nc = 0
   orient = 0L
   fmode = 0L

   img = {VIMAGE}
   uv = {wid:wid, img:[img,img], cbf:[img,img], cbv:[img,img]}
   FOR i= 0, 1 DO BEGIN
      uv.img[i].f = 1
      uv.img[i].p = 20
      uv.img[i].ff = 1
      uv.img[i].lf = 1
      uv.img[i].fp = 1
      uv.img[i].lp = 512
   ENDFOR

   FOR i= 0, 2 DO BEGIN
      IF (i LT 2) THEN BEGIN
         image = uv.img[i]
         image.fname = inputfile[i]
         msg = ''
         IF (getframe(image, msg) NE 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value=msg
            uv.img[i].fname = ''
         ENDIF ELSE BEGIN
            tmp = uv.img[i].p
            uv.img[i] = image
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
         ENDELSE
      ENDIF 

      dispbase = widget_base(TITLE='Image '+ strcompress(string(i+1)), $
                             group_leader=uv.wid.base, uvalue=uv.wid.base)
      win = widget_draw(dispbase, xsize=dsp[i].xsize, ysize=dsp[i].ysize, /button, /motion)
      !p.background = 0
      scrnsize = get_screen_size()
      yloc = scrnsize[1]/2
      IF (yloc GT 340) THEN yloc = 340
      IF (scrnsize[0] LT 2000) THEN xmax = scrnsize[0] ELSE xmax = 1920
      CASE i OF
         0: xloc = 0
         1: xloc = xmax/3
         2: xloc = 2*xmax/3
      ENDCASE
      widget_control, dispbase, /realize, xoffset=xloc, yoffset=yloc
      widget_control, win, get_value=windowIndex
      wset, windowIndex
      uv.wid.win[i] = win
      dsp[i].id = windowIndex
      dsp[i].init = 1
      dsp[i].set = 1
   ENDFOR

   ff = uv.img[0].ff
   lf = uv.img[0].lf
   fp = uv.img[0].fp
   lp = uv.img[0].lp
   slice = (lp + fp)/2 
   uv.img[0].p = slice
   uv.img[1].p = slice
   widget_control, uv.wid.slider, set_slider_min=fp
   widget_control, uv.wid.slider, set_slider_max=lp
   widget_control, uv.wid.slider, set_value=slice

   nc = (!d.n_colors-1)/2
   dsp[0].bot = 0
   dsp[0].nc = nc
   dsp[1].bot = nc
   dsp[1].nc = nc
   dsp[2].nc = nc
   loadct, inputlut[0], ncolors=dsp[0].nc, bottom=dsp[0].bot, file=colortable
   loadct, inputlut[1], ncolors=dsp[1].nc, bottom=dsp[1].bot, file=colortable

   widget_control, base, set_uvalue=uv
   widget_control, base, /realize, xoffset=0, yoffset=0

   VIDI_DISPLAY, uv
   widget_control, display, set_value=dsp.set
   xmanager, "VIDIQ", base, EVENT_HANDLER='VIDIQ_EVENT'

END 
  
@


1.1
log
@Initial revision
@
text
@d897 1
d900 2
a901 2
         1: xloc = scrnsize[0]/3
         2: xloc = 2*scrnsize[0]/3
@
