head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2000.01.20.21.54.01;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.20.21.46.11;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.12.15.19.18.23;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.12.11.18.14.06;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@eliminate debugging comments
@
text
@FUNCTION GETSINO7, img, msg
   
   COMMON IMAGE_UTILS
   
   fname = img.fname
   IF (strlen(fname) EQ 0) THEN BEGIN
      msg =  'No file entered'
      RETURN, -1
   ENDIF 

   str=''
   dim = lonarr(3)
   ffrm = img.ff
   lfrm = img.lf
   fpln = img.fp
   lpln = img.lp
   mh7 = {M7header}
   ss7 = {Subheader7_scn3d}
   sa7 = {Subheader7_atn}
   M7sino_init, mh7, ss7, sa7
   IF (img.data NE ptr_new()) THEN ptr_free, img.data
   
   cmd = '/usr/local/npg/bin/dynscan_read ' $
      + fname + string(ffrm) + string(lfrm) + string(fpln) + string(lpln)
   spawn,cmd,unit=lun
   dtype = 0
   str = ''
   readf,lun,dtype,str,format='(I0,A)'
   IF (dtype EQ -1) THEN BEGIN 
      msg = 'Read Error: ' + str
      RETURN, -1
   ENDIF
   
   firstfrm = 0L
   lastfrm = 0L
   firstpln = 0L
   lastpln = 0L
   readf,lun, ffrm, lfrm, format='(2I0)'
   readf,lun, fpln, lpln, format='(2I0)'
   readf,lun,dim,format='(3I0)'
   img.p  = fpln
   img.fp = fpln
   img.lp = lpln
   img.f  = ffrm
   img.ff = ffrm
   img.lf = lfrm
   ff = img.ff
   lf = img.lf
   frames = lfrm-ffrm+1
   planes = lpln-fpln+1
   
   readu,lun,mh7
   img.h.mh7 = mh7

   IF (dtype EQ 3) THEN BEGIN
      readu,lun,sa7
      img.h.sa7 = sa7
      img.ntype = type(0.0)
      dptr = ptr_new(fltarr(dim[0],dim[1],planes,frames),/allocate)
   ENDIF ELSE BEGIN
      readu,lun,ss7
      img.h.ss7 = ss7
      img.ntype = type(0)
      dptr = ptr_new(intarr(dim[0],dim[1],planes,frames),/allocate)
   ENDELSE
   
   readu,lun,*dptr

   IF (dtype EQ 3) THEN BEGIN
      img.min = min(*dptr)
      img.max = max(*dptr)
   ENDIF ELSE IF (frames EQ 1) THEN BEGIN
      img.start[ffrm] = ss7.frame_start_time
      img.len[ffrm] = ss7.frame_duration
      img.min = ss7.scan_min
      img.max = ss7.scan_max
   ENDIF ELSE BEGIN
      start = 0.0
      len = 0.0
      FOR k=ffrm, lfrm DO BEGIN 
         readf, lun, start, len, format='(2I0)'
         img.start[k] = start
         img.len[k] = len
      ENDFOR 
      img.min = min(*dptr)
      img.max = max(*dptr)
   ENDELSE 
   close,lun
   free_lun,lun

   img.data = dptr
   img.itype = MATRIX_REV7
   img.order = 1
   img.dim[0] = dim[0]
   img.dim[1] = dim[1]
   img.dim[2] = planes
   img.dim[3] = frames
   img.pdim[0] = 10*ss7.x_resolution
   img.pdim[1] = 10*ss7.v_resolution
   img.pdim[2] = 10*ss7.z_resolution
   img.org[0] = 0
   img.org[1] = 0
   img.org[2] = 0
   img.org[3] = 0
   img.scale =  1.0
   img.gcal = 1.0
   img.ical = 1.0
   FOR k=0,8 DO img.mcal[k] = 0.0
   RETURN, 0
END
@


1.3
log
@add Attn
@
text
@a53 1
   print,'Dim = ',dim[0],dim[1],planes,frames
a55 1
      print,'Attn dtype = ',dtype
a57 1
      print,'Attn Data type = ',sa7.data_type 
a60 1
      print,'Sino dtype = ',dtype
a62 1
      print,'Sino Data type = ',ss7.data_type 
a67 1
   print,'Min,Max = ',min(*dptr),max(*dptr)
@


1.2
log
@ss7.v_resolution
@
text
@d19 2
a20 1
   M7sino_init, mh7, ss7
d26 1
a26 1
   k = 0
d28 2
a29 2
   readf,lun,k,str,format='(I0,A)'
   IF (k EQ -1) THEN BEGIN 
d53 18
a70 1
   readu,lun,ss7
a71 1
   dptr = ptr_new(intarr(dim[0],dim[1],planes,frames),/allocate)
d73 6
a78 1
   IF (frames EQ 1) THEN BEGIN
d96 2
a97 11
   
   ss7.data_type = 2
   img.h.mh7 = mh7
   img.h.ss7 = ss7
   
   CASE ss7.data_type OF
      1: img.ntype = type(0B)
      2: img.ntype = type(0)
      5: img.ntype = type(0.0)
      6: img.ntype = type(0)
   ENDCASE
a114 1
   img.data = dptr
@


1.1
log
@Initial revision
@
text
@d92 1
a92 1
   img.pdim[1] = 10*ss7.y_resolution
@
