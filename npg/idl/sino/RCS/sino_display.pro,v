head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2007.05.01.16.26.26;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.12.15.19.16.27;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.12.11.18.14.06;	author tom;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@FUNCTION SINO_DISPLAY_SCALE, image, type, i, xsize, ysize, sample
   COMMON SINO
   
   IF (dsp[i].type EQ 1) THEN BEGIN ; Manual scaling
      mini = dsp[i].min
      maxi = dsp[i].max
   ENDIF ELSE BEGIN             ; Auto scaling
      IF (dsp[i].range EQ 0) THEN BEGIN
         mini = 0
         maxi = max(image)
      ENDIF ELSE IF (dsp[i].range EQ 1) THEN BEGIN
         mini = 0
         maxi = -min(image)
      ENDIF ELSE BEGIN
         mini = min(image)
         maxi = max(image)
         IF (-mini GT maxi) THEN maxi = -mini
      ENDELSE
   ENDELSE
   dsp[i].amin = mini
   dsp[i].amax = maxi
   nc = dsp[i].nc
   IF (dsp[i].range EQ 1) THEN $
      temp1 = bytscl(rebin(-(image), xsize, ysize, SAMPLE=sample), $
                     MIN=mini, MAX=maxi, TOP=(nc-1)) $
   ELSE temp1 = bytscl(rebin(image, xsize, ysize, SAMPLE=sample), $
                       MIN=mini, MAX=maxi, TOP=(nc-1))
   RETURN, temp1
END
      
PRO SINO_DISPLAY, uv, SAMPLE=sample
   ;; Scale and display sino i
   ;; uv = the info structure for this display
   ;; sample = use nearest neighbor sampling for rebin
   COMMON IMAGE_UTILS
   COMMON SINO
   
   IF (NOT (keyword_set(sample))) THEN SAMPLE=0
   nodata = 1
   
   FOR i= 0, 1 DO BEGIN
      IF (dsp[i].set) THEN BEGIN 
         nodata = 0
         slice = uv.img[i].p - uv.img[i].fp
         frame = uv.img[i].f - uv.img[i].ff
         xsize = uv.img[i].dim[0] * dsp[i].zoom
         ysize = uv.img[i].dim[1] * dsp[i].zoom
         image = reform((*uv.img[i].data)[*,*,slice,frame])
         temp1 = SINO_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample)
         temp1 = temp1 + dsp[i].bot
         widget_control, uv.wid.win[i], draw_xsize=xsize, draw_ysize=ysize
         wset, dsp[i].id
         tv, temp1
         widget_control,uv.wid.max[i],set_value=dsp[i].amax
      ENDIF 
   ENDFOR 
   IF (nodata EQ 1) THEN widget_control, uv.wid.msg, set_value='No data'
END
@


1.2
log
@dual sinograms
@
text
@d49 2
a50 2
         image = SINO_DISPLAY_SCALE (image, uv.img[i].itype, i, xsize, ysize, sample)
         image = image + dsp[i].bot
d53 1
a53 1
         tv, image
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
FUNCTION SINO_DISPLAY_SCALE, image, type, xsize, ysize, sample, stype
d4 3
a6 3
   IF (dsp.type EQ 1) THEN BEGIN ; Manual scaling
      mini = dsp.min
      maxi = dsp.max
d8 1
a8 1
      IF (dsp.range EQ 0) THEN BEGIN
d11 1
a11 1
      ENDIF ELSE IF (dsp.range EQ 1) THEN BEGIN
d20 8
a27 16
   dsp.amin = mini
   dsp.amax = maxi
   nc = dsp.nc
   IF (stype EQ 0) THEN BEGIN
      IF (dsp.range EQ 1) THEN $
         temp1 = bytscl(rebin(-(image), xsize, ysize, SAMPLE=sample), $
                        MIN=mini, MAX=maxi, TOP=(nc-1)) $
      ELSE temp1 = bytscl(rebin(image, xsize, ysize, SAMPLE=sample), $
                          MIN=mini, MAX=maxi, TOP=(nc-1))
   ENDIF ELSE BEGIN 
      IF (dsp.range EQ 1) THEN $
         temp1 = bytscl(congrid(-(image), xsize, ysize, /INTERP), $
                        MIN=mini, MAX=maxi, TOP=(nc-1)) $
      ELSE temp1 = bytscl(congrid(image, xsize, ysize, /INTERP), $
                          MIN=mini, MAX=maxi, TOP=(nc-1))
   ENDELSE
d32 1
a32 1
   ;; Scale and display sino
d41 16
a56 15
   IF (uv.img.data NE ptr_new()) THEN BEGIN
      nodata = 0
      slice = uv.img.p - uv.img.fp
      frame = uv.img.f - uv.img.ff
      xsize = uv.img.dim[0] * dsp.zoom
      ysize = uv.img.dim[1] * dsp.zoom
      stype = 0
      image = reform((*uv.img.data)[*,*,slice,frame])
      image = SINO_DISPLAY_SCALE (image, uv.img.itype, xsize, ysize, sample, stype)
      image = image + dsp.bot
      widget_control, uv.wid.win, draw_xsize=xsize, draw_ysize=ysize
      wset, dsp.id
      tv, image
      widget_control,uv.wid.max,set_value=dsp.amax
   ENDIF 
@
