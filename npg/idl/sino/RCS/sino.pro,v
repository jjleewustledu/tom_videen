head	1.10;
access;
symbols;
locks; strict;
comment	@# @;


1.10
date	2007.05.01.16.26.26;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.28.21.36.51;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2001.10.29.21.05.03;	author tom;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.11.15.22.23;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.25.16.21.49;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.18.17.16.49;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.18.17.12.37;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.18.17.06.04;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	98.12.15.19.16.27;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	98.12.11.18.14.06;	author tom;	state Exp;
branches;
next	;


desc
@@


1.10
log
@*** empty log message ***
@
text
@PRO SINODISP1_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON SINO
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 0
   x = ev.x / dsp[i].zoom + 1
   y = ev.y / dsp[i].zoom
   y = uv.img[i].dim[1] - y
   widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",i,"  Y = ",i)')
END

PRO SINODISP2_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON SINO
   widget_control, ev.top, get_uvalue=top
   widget_control, top, get_uvalue=uv
   i = 1
   x = ev.x / dsp[i].zoom + 1
   y = ev.y / dsp[i].zoom
   y = uv.img[i].dim[1] - y
   widget_control, uv.wid.msg, set_value=string(x, y, format='("X = ",i,"  Y = ",i)')
END

PRO SINO_EVENT, ev
   COMMON IMAGE_UTILS
   COMMON SINO
   
   catch, error_status
   IF (error_status NE 0) THEN BEGIN
      ok = widget_message(!err_string)
      RETURN
   END
   setuv = 0
   newrange = 0
   redisplay = 0
   widget_control, ev.top, get_uvalue=uv
   widget_control, uv.wid.msg, set_value=''
   
   CASE ev.id OF
      
      uv.wid.file: BEGIN
         
         IF (ev.value LT 6) THEN BEGIN
            i = 0
            rtype = ev.value-1
         ENDIF ELSE BEGIN
            i = 1
            rtype = ev.value-6
         ENDELSE

         
         CASE rtype OF 
            
            1: BEGIN            ; First Frame, All Planes
               uv.img[i].ff = 1
               uv.img[i].lf = 1
               uv.img[i].fp = 1
               uv.img[i].lp = 256
               fmode = 0
            ENDCASE
            
            2: BEGIN            ; One Frame, All Planes
               temp = ev.top
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='Frame: ', value=uv.img[i].ff, $
                               xsize=4, /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize
               ev = WIDGET_EVENT(planeselect)
               WIDGET_CONTROL, planeselect, /DESTROY
               uv.img[i].ff = ev.value
               uv.img[i].lf = ev.value
               uv.img[i].fp = 1
               uv.img[i].lp = 256
               fmode = 0
               ev.top = temp
            ENDCASE

            3: BEGIN            ; One Frame, Select Planes
               temp = ev.top
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='Frame: ', value=uv.img[i].ff, $
                               xsize=4, /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize
               ev = WIDGET_EVENT(planeselect)
               WIDGET_CONTROL, planeselect, /DESTROY
               uv.img[i].ff = ev.value
               uv.img[i].lf = ev.value
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='First Plane: ', value=uv.img[i].ff, $
                               xsize=4, /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize
               ev = WIDGET_EVENT(planeselect)
               WIDGET_CONTROL, planeselect, /DESTROY
               uv.img[i].fp = ev.value
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='Last Plane: ', value=uv.img[i].ff, $
                               xsize=4, /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize
               ev = WIDGET_EVENT(planeselect)
               WIDGET_CONTROL, planeselect, /DESTROY
               uv.img[i].lp = ev.value
               fmode = 0
               ev.top = temp
            ENDCASE

            4: BEGIN            ; All Frames, One Plane
               temp = ev.top
               uv.img[i].ff = 1
               uv.img[i].lf = 256
               planeselect = widget_base(group_leader=uv.wid.base)
               text = cw_field(planeselect, title='Plane: ', value=uv.img[i].fp, xsize=4, $
                               /INTEGER, /RETURN_EVENTS)
               widget_control, planeselect, /realize
               ev = WIDGET_EVENT(planeselect)
               WIDGET_CONTROL, planeselect, /DESTROY
               FOR j=0,1 DO uv.img[j].fp = ev.value
               FOR j=0,1 DO uv.img[j].lp = ev.value
               FOR j=0,1 DO uv.img[j].p = ev.value
               fmode = 1
               ev.top = temp
            ENDCASE
            
         ENDCASE
         
         fname = ''
         IF (strlen(uv.img[i].fname) GT 0) THEN fname = uv.img[i].fname $
         ELSE IF (strlen(uv.img[0].fname) GT 0) THEN fname = uv.img[0].fname $
         ELSE IF (strlen(uv.img[1].fname) GT 0) THEN fname = uv.img[1].fname
         IF (strlen(fname) GT 0) THEN BEGIN 
            l1 = rstrpos(fname,'/')
            l2 = rstrpos(fname,'.')
            str1 = string(replicate(32b,(l2-l1-2)))
            str1 = '*'+str1
            strput,fname,str1,l1+1
            fname = strcompress(fname, /remove_all)
         ENDIF ELSE fname = '*S'
         
         fname = dialog_pickfile(FILE=uv.img[i].fname, FILTER=fname, /READ)
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN 
            cmd = '/usr/local/npg/bin/scanhdr ' + fname
            spawn,cmd,unit=lun
            str = ''
            readf,lun,str,format='(A)'
			free_lun,lun
            IF (strmid(str,0,6) NE 'MATRIX') THEN BEGIN
               msg = str
               RETURN
            ENDIF
            image = uv.img[i]
            image.fname = fname
            msg = ''
            widget_control, /hourglass
            IF (strmid(str,6,1) EQ 6) THEN BEGIN
               IF (getsino6(image, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  uv.img[i].fname = ''
                  RETURN
               ENDIF
            ENDIF ELSE BEGIN
               IF (getsino7(image, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  uv.img[i].fname = ''
                  RETURN
               ENDIF
            ENDELSE
            tmp = uv.img[i].p
            uv.img[i] = image
            uv.img[i].p = tmp > uv.img[i].fp ; keep same plane if in range
            uv.img[i].p = tmp < uv.img[i].lp
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            setuv = 1
            newrange = 1
            IF (dsp[i].set) THEN redisplay = 1
         ENDELSE 

      ENDCASE 

      ;; -------------------------------------------------------------------------------
      uv.wid.fname[0]: BEGIN    ; same as last
         i = 0
         fname = ev.value
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN
            cmd = '/usr/local/npg/bin/scanhdr ' + fname
            spawn,cmd,unit=lun
            str = ''
            readf,lun,str,format='(A)'
			free_lun,lun
            IF (strmid(str,0,6) NE 'MATRIX') THEN BEGIN
               msg = str
               RETURN
            ENDIF
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (strmid(str,6,1) EQ 6) THEN BEGIN
               IF (getsino6(image, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  uv.img[i].fname = ''
                  RETURN
               ENDIF
            ENDIF ELSE BEGIN
               IF (getsino7(image, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  uv.img[i].fname = ''
                  RETURN
               ENDIF
            ENDELSE
            tmp = uv.img[i].p
            uv.img[i] = image
            uv.img[i].p = tmp > uv.img[i].fp ; keep same plane if in range
            uv.img[i].p = tmp < uv.img[i].lp
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            setuv = 1
            newrange = 1
            IF (dsp[i].set) THEN redisplay = 1
         ENDELSE 
      ENDCASE

      ;; -------------------------------------------------------------------------------
      uv.wid.fname[1]: BEGIN    ; same as last
         i = 1
         fname = ev.value
         IF (strlen(fname) EQ 0) THEN BEGIN
            widget_control, uv.wid.msg, set_value='No file entered'
         ENDIF ELSE BEGIN
            cmd = '/usr/local/npg/bin/scanhdr ' + fname
            spawn,cmd,unit=lun
            str = ''
            readf,lun,str,format='(A)'
			free_lun,lun
            IF (strmid(str,0,6) NE 'MATRIX') THEN BEGIN
               msg = str
               RETURN
            ENDIF
            image = uv.img[i]
            image.fname = fname
            msg = ''
            IF (strmid(str,6,1) EQ 6) THEN BEGIN
               IF (getsino6(image, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  uv.img[i].fname = ''
                  RETURN
               ENDIF
            ENDIF ELSE BEGIN
               IF (getsino7(image, msg) NE 0) THEN BEGIN
                  widget_control, uv.wid.msg, set_value=msg
                  uv.img[i].fname = ''
                  RETURN
               ENDIF
            ENDELSE
            tmp = uv.img[i].p
            uv.img[i] = image
            uv.img[i].p = tmp > uv.img[i].fp ; keep same plane if in range
            uv.img[i].p = tmp < uv.img[i].lp
            widget_control, uv.wid.msg, set_value='File '+uv.img[i].fname+' found'
            widget_control, uv.wid.fname[i], set_value=uv.img[i].fname
            setuv = 1
            newrange = 1
            IF (dsp[i].set) THEN redisplay = 1
         ENDELSE 
      ENDCASE

      ;; -------------------------------------------------------------------------------
      uv.wid.zoom: BEGIN
         FOR i=0,1 DO dsp[i].zoom = ev.value
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.color: BEGIN
         CASE ev.value OF
            1: IF (dsp[0].nc EQ 0) THEN widget_control, uv.wid.msg, set_value='No image displayed' $
            ELSE xloadct, group=uv.wid.base, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
            2: IF (dsp[1].nc EQ 0) THEN widget_control, uv.wid.msg, set_value='No image displayed' $
            ELSE xloadct, group=uv.wid.base, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
               file="/usr/local/npg/idl/color_tables/videen.tbl"
         ENDCASE
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.scale: BEGIN
         SINO_SCALE, uv.wid.base
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.exit: BEGIN
         FOR i=0,1 DO IF (uv.img[i].data NE ptr_new()) THEN ptr_free, uv.img[i].data
         widget_control, ev.top, /destroy
      ENDCASE 

      ;; -------------------------------------------------------------------------------
      uv.wid.cine: BEGIN
         CASE fmode OF
            0: BEGIN
				tmp0 = uv.img[0].p
				tmp1 = uv.img[1].p
				FOR k=fp, lp DO BEGIN
                	uv.img[0].p = k
                	uv.img[1].p = k
            		SINO_DISPLAY, uv
            		widget_control, uv.wid.slider, set_value=k
				ENDFOR
				FOR k=lp, fp, -1 DO BEGIN
                	uv.img[0].p = k
                	uv.img[1].p = k
            		SINO_DISPLAY, uv
            		widget_control, uv.wid.slider, set_value=k
				ENDFOR
				uv.img[0].p = tmp0
				uv.img[1].p = tmp1
         	ENDCASE 
         ENDCASE 
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      ;; -------------------------------------------------------------------------------
      uv.wid.slider: BEGIN
         widget_control, uv.wid.slider, get_value=slice
         CASE fmode OF
            0: IF (slice LE lp) THEN FOR i=0, 1 DO uv.img[i].p = slice $
            ELSE widget_control, uv.wid.slider, set_value=lp
            
            1: IF (slice LE lf) THEN FOR i=0, 1 DO uv.img[i].f = slice $
            ELSE widget_control, uv.wid.slider, set_value=lf
         ENDCASE 
         setuv = 1
         redisplay = 1
      ENDCASE 
      
      
      ;; -------------------------------------------------------------------------------
      uv.wid.display: BEGIN
         CASE ev.value OF
            0: IF (dsp[0].set EQ 0) THEN dsp[0].set = 1 $
            ELSE dsp[0].set = 0
            1: IF (dsp[1].set EQ 0) THEN dsp[1].set = 1 $
            ELSE dsp[1].set = 0
         END
         newrange = 1
         redisplay = 1
      ENDCASE

      ELSE:
      
   ENDCASE
   ;;-----------------------------------------------------------------------------------
   
   IF (newrange) THEN BEGIN
      IF ((dsp[0].set) AND (strlen(uv.img[0].fname) GT 0) AND $
          (dsp[1].set) AND (strlen(uv.img[1].fname) GT 0)) THEN set = 3 $
      ELSE IF ((dsp[1].set) AND (strlen(uv.img[1].fname) GT 0)) THEN set = 2 $
      ELSE IF ((dsp[0].set) AND (strlen(uv.img[0].fname) GT 0)) THEN set = 1 $
      ELSE set = 0
      
      CASE set OF 
         1: BEGIN
            ff = uv.img[0].ff
            lf = uv.img[0].lf
            i = 0
         ENDCASE
         2: BEGIN
            ff = uv.img[1].ff
            lf = uv.img[1].lf
            i = 1
         ENDCASE 
         3: BEGIN
            ff = uv.img[0].ff > uv.img[1].ff
            lf = uv.img[0].lf <  uv.img[1].lf
            i = 0
         ENDCASE 
         ELSE:
      ENDCASE

      IF (set EQ 3) THEN BEGIN
         fp = uv.img[0].fp > uv.img[1].fp
         lp = uv.img[0].lp <  uv.img[1].lp
      ENDIF ELSE IF (set EQ 2) THEN BEGIN
         fp = uv.img[1].fp
         lp = uv.img[1].lp
      ENDIF ELSE IF (set EQ 1) THEN BEGIN
         fp = uv.img[0].fp
         lp = uv.img[0].lp
      ENDIF 
      
      IF (set GT 0) THEN BEGIN 
         CASE fmode OF 
            0: BEGIN 
               widget_control, uv.wid.slider, set_slider_min=fp
               IF (uv.img[i].lp GT uv.img[i].fp+1) THEN $
                  widget_control, uv.wid.slider, set_slider_max=lp $
               ELSE widget_control, uv.wid.slider, set_slider_max=fp+1
               IF (uv.img[i].p GT lp) THEN FOR k=0,1 DO uv.img[k].p = lp
               IF (uv.img[i].p LT fp) THEN FOR k=0,1 DO uv.img[k].p = fp
               widget_control, uv.wid.slider, set_value=uv.img[i].p
            ENDCASE 
            
            1: BEGIN 
               widget_control, uv.wid.slider, set_slider_min=ff
               IF (uv.img[i].lf GT uv.img[i].ff+1) THEN $
                  widget_control, uv.wid.slider, set_slider_max=lf $
               ELSE widget_control, uv.wid.slider, set_slider_max=ff+1
               IF (uv.img[i].f GT lf) THEN FOR k=0,1 DO uv.img[k].f = lf
               IF (uv.img[i].f LT ff) THEN FOR k=0,1 DO uv.img[k].f = ff
               uv.img[i].p = fp
               widget_control, uv.wid.slider, set_value=uv.img[i].f
            ENDCASE 
         ENDCASE
      ENDIF 
   ENDIF 
   ;;-----------------------------------------------------------------------------------
   
   IF (redisplay) THEN BEGIN
      FOR i= 0, 1 DO BEGIN
         IF (dsp[i].set) THEN BEGIN 
            IF (strlen(uv.img[i].fname) EQ 0) THEN BEGIN 
               widget_control, uv.wid.msg, set_value='No file has been entered for #'+string(i+1) 
               redisplay = 0
            ENDIF 
            IF (redisplay AND (dsp[i].init EQ 0)) THEN BEGIN
               dispbase = widget_base(TITLE='Sinogram '+ strcompress(string(i+1)), $
                                      group_leader=uv.wid.base, uvalue=ev.top)
               win = widget_draw(dispbase, xsize=dsp[i].xsize, ysize=dsp[i].ysize, /button, /motion)
               !p.background = 0
               scrnsize = get_screen_size()
               yloc = scrnsize[1]/2
               IF (yloc GT 340) THEN yloc = 340
               CASE i OF
                  0: xloc = 0
                  1: xloc = scrnsize[0]/3
                  2: xloc = 2*scrnsize[0]/3
               ENDCASE
               widget_control, dispbase, /realize, xoffset=xloc, yoffset=yloc
               widget_control, win, get_value=windowIndex
               wset, windowIndex
               xmanager, "SINODISP"+strcompress(string(i+1),/remove_all), dispbase
               uv.wid.win[i] = win
               dsp[i].id = windowIndex
               dsp[i].init = 1
               IF (dsp[i].nc EQ 0) THEN BEGIN
                  IF (!d.n_colors GE 160) THEN nc=80 ELSE nc=(!d.n_colors/2)-1
                  print, !d.n_colors, nc
                  dsp[0].bot = 0
                  dsp[0].nc = nc
                  dsp[1].bot = nc
                  dsp[1].nc = nc
               ENDIF
               IF (i EQ 0) THEN loadct, 36, ncolors=dsp[0].nc, bottom=dsp[0].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl" $
               ELSE IF (i EQ 1) THEN loadct, 36, ncolors=dsp[1].nc, bottom=dsp[1].bot, $
                  file="/usr/local/npg/idl/color_tables/videen.tbl"
               setuv = 1
            ENDIF 
         ENDIF 
      ENDFOR
      IF (redisplay) THEN SINO_DISPLAY, uv
   ENDIF 

   IF (setuv) THEN widget_control, ev.top, set_uvalue=uv
END


PRO SINO
@@IMAGE_UTILS.h
@@SINO.h

   on_error, 2

   base = widget_base (TITLE='SINO', /COLUMN)
   base1 = widget_base(base, row=1)
   
   select0 =  ['1\Get Files', '1\Sinogram 1', '0\First Frame, All Planes', $
               '0\One Frame, All Planes', '0\One Frame, Select Planes', $
               '2\All Frames, One Plane', $
               '1\Sinogram 2', '0\First Frame, All Planes', $
               '0\One Frame, All Planes', '0\One Frame, Select Planes', $
               '0\All Frames, One Plane']
   file = cw_pdmenu(base1, select0)

   select4 = ['1\Magnify','0\ 1 ','0\ 2 ','0\ 3 ','0\ 4 ']
   zoom = cw_pdmenu(base1, select4)
   
   select5 = ['1\Color','0\Sinogram 1','0\Sinogram 2']
   color = cw_pdmenu(base1, select5)
   
   scale = widget_button(base1, value='Scale')

   cine = widget_button(base1, value='Cine')
   
   exit = widget_button(base1, value='Exit')

   base2 = widget_base(base, row=1)
   base2a = widget_base(base2, row=1)
   display = cw_bgroup(base2a, [' ',' '], /NONEXCLUSIVE, /COL)
   
   base2b = widget_base(base2, row=2)
   fname = lonarr(2)
   fname[0] = cw_field(base2b, title='1', value='', xsize=60, /RETURN_EVENTS)
   fname[1] = cw_field(base2b, title='2', value='', xsize=60, /RETURN_EVENTS)
      
   base2c = widget_base(base2, row=2)
   max = lonarr(2)
   max[0] = cw_field(base2c, title='Max', /noedit, value=0, xsize=10, ysize=1)
   max[1] = cw_field(base2c, title='Max', /noedit, value=0, xsize=10, ysize=1)

   slice = 1
   slider = widget_slider(base, value=slice, min=1, max=47, xsize=800)
   
   msg = widget_text(base)
   
   wid = {WIDGETS,		$
          base     : base,	$ ; top level base
          file     : file,	$ ; file selection button id
          zoom     : zoom,	$ ; magnification selection button id
          color    : color,	$ ; color selection button id
          scale    : scale,	$ ; scaling menu selection button id
          cine     : cine,	$ ; cine start
          exit     : exit,	$ ; exit selection button id
          fname    : fname,	$ ; filename entry field id
          max      : max,	$ ; maximum value displayed
          slider   : slider,	$ ; slice selection slider id
          display  : display,	$ ; display windows set
          msg      : msg,	$ ; message field id
          win      : [0L,0L]	$ ; draw window widget id
         }

   FOR i=0,1 DO dsp[i].init = 0
   FOR i=0,1 DO dsp[i].zoom = 1
   FOR i=0,1 DO dsp[i].bot = 0
   FOR i=0,1 DO dsp[i].nc = 0
   dsp[0].set = 1
   dsp[1].set = 0
   fmode = 0L
   
   img = {VIMAGE}
   uv = {wid:wid, img:[img,img]}
   FOR i= 0, 1 DO uv.img[i].f = 1
   FOR i= 0, 1 DO uv.img[i].p = 1
   
   widget_control, display, set_value=dsp[0].set
   widget_control, base, set_uvalue=uv
   widget_control, base, /realize, xoffset=130, yoffset=0
   xmanager, "SINO", base, EVENT_HANDLER='SINO_EVENT'

END 
@


1.9
log
@add cine
@
text
@a281 1
            
d450 2
a451 1
                  nc = (!d.n_colors-1)/2
@


1.8
log
@free_lun
@
text
@d300 26
d496 2
d500 1
a500 1
   
d526 1
@


1.7
log
@enter sino name as text
@
text
@d147 1
d193 1
d237 1
@


1.6
log
@set xsize on slider
@
text
@d180 1
a180 1
      
d182 86
d475 3
a477 3
   name = lonarr(2)
   name[0] = cw_field(base2b, title='1', value='', xsize=60)
   name[1] = cw_field(base2b, title='2', value='', xsize=60)
d496 1
a496 1
          fname    : name,	$ ; filename entry field id
@


1.5
log
@*** empty log message ***
@
text
@d386 1
a386 1
   display = cw_bgroup(base2a, ['',''], /NONEXCLUSIVE, /COL)
d399 1
a399 1
   slider = widget_slider(base, value=slice, min=1, max=47)
@


1.4
log
@add hourglass
@
text
@d137 1
a137 1
         ENDIF ELSE fname = '*scn'
@


1.3
log
@add getsino7
@
text
@a150 1
print,str
d154 1
@


1.2
log
@dual sinograms
@
text
@d137 1
a137 1
         ENDIF ELSE fname = '*S'
d143 9
d155 13
a167 5
            IF (getsino7(image, msg) NE 0) THEN BEGIN
               widget_control, uv.wid.msg, set_value=msg
               uv.img[i].fname = ''
               RETURN
            ENDIF
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
PRO SINODISP_EVENT, ev
d7 3
a9 3
   x = ev.x / dsp.zoom + 1
   y = ev.y / dsp.zoom
   y = uv.img.dim[1] - y
d13 12
d44 7
a50 1
         CASE ev.value OF
d52 3
d56 4
a59 4
               uv.img.ff = 1
               uv.img.lf = 1
               uv.img.fp = 1
               uv.img.lp = 256
d66 1
a66 1
               text = cw_field(planeselect, title='Frame: ', value=uv.img.ff, $
d71 4
a74 4
               uv.img.ff = ev.value
               uv.img.lf = ev.value
               uv.img.fp = 1
               uv.img.lp = 256
d82 1
a82 1
               text = cw_field(planeselect, title='Frame: ', value=uv.img.ff, $
d87 2
a88 2
               uv.img.ff = ev.value
               uv.img.lf = ev.value
d90 1
a90 1
               text = cw_field(planeselect, title='First Plane: ', value=uv.img.ff, $
d95 1
a95 1
               uv.img.fp = ev.value
d97 1
a97 1
               text = cw_field(planeselect, title='Last Plane: ', value=uv.img.ff, $
d102 1
a102 1
               uv.img.lp = ev.value
d109 2
a110 2
               uv.img.ff = 1
               uv.img.lf = 256
d112 1
a112 1
               text = cw_field(planeselect, title='Plane: ', value=uv.img.fp, xsize=4, $
d117 3
a119 2
               uv.img.fp = ev.value
               uv.img.lp = ev.value
a121 1
               orient = 0       ; transverse orientation only for multiple frames
d127 3
a129 3
         IF (strlen(uv.img.fname) GT 0) THEN fname = uv.img.fname $
         ELSE IF (strlen(uv.img.fname) GT 0) THEN fname = uv.img.fname $
         ELSE IF (strlen(uv.img.fname) GT 0) THEN fname = uv.img.fname
d139 1
a139 1
         fname = dialog_pickfile(FILE=uv.img.fname, FILTER=fname, /READ)
d143 1
a143 1
            image = uv.img
d148 1
a148 1
               uv.img.fname = ''
d151 6
a156 7
            tmp = uv.img.p
            uv.img = image
            uv.img.p = tmp > uv.img.fp ; keep same plane if in range
            uv.img.p = tmp < uv.img.lp
            widget_control, uv.wid.msg, set_value='File '+uv.img.fname+' found'
            widget_control, uv.wid.fname, set_value=uv.img.fname
            uv.img.proc = 0
d159 1
a159 1
            redisplay = 1
d166 1
a166 1
         dsp.zoom = ev.value
d172 9
a180 3
         IF (dsp.nc EQ 0) THEN widget_control, uv.wid.msg, set_value='No image displayed' $
         ELSE xloadct, group=uv.wid.base, ncolors=dsp.nc, bottom=dsp.bot, $
            file="/usr/local/npg/idl/color_tables/videen.tbl"
d191 1
a191 1
         if (uv.img.data NE ptr_new()) THEN ptr_free, uv.img.data
d198 7
a204 2
         IF (slice LE lp) THEN uv.img.p = slice $
         ELSE widget_control, uv.wid.slider, set_value=lp
d209 13
a224 1
   
d228 60
a287 11
      ff = uv.img.ff
      lf = uv.img.lf
      fp = uv.img.fp
      lp = uv.img.lp
      widget_control, uv.wid.slider, set_slider_min=fp
      IF (uv.img.lp GT uv.img.fp+1) THEN $
         widget_control, uv.wid.slider, set_slider_max=lp $
      ELSE widget_control, uv.wid.slider, set_slider_max=fp+1
      IF (uv.img.p GT lp) THEN uv.img.p = lp
      IF (uv.img.p LT fp) THEN uv.img.p = fp
      widget_control, uv.wid.slider, set_value=uv.img.p
d291 42
a332 29
   IF (redisplay) THEN BEGIN 
      IF (strlen(uv.img.fname) EQ 0) THEN BEGIN 
         widget_control, uv.wid.msg, set_value='No file has been entered'
         redisplay = 0
      ENDIF 
      IF (dsp.init EQ 0) THEN BEGIN
         dispbase = widget_base(TITLE='Image', group_leader=uv.wid.base, uvalue=ev.top)
         win = widget_draw(dispbase, xsize=dsp.xsize, ysize=dsp.ysize, /button, /motion)
         !p.background = 0
         scrnsize = get_screen_size()
         yloc = scrnsize[1]/2
         IF (yloc GT 340) THEN yloc = 340
         xloc = 0
         widget_control, dispbase, /realize, xoffset=xloc, yoffset=yloc
         widget_control, win, get_value=windowIndex
         wset, windowIndex
         xmanager, "SINODISP", dispbase
         uv.wid.win = win
         dsp.id = windowIndex
         dsp.init = 1
         IF (dsp.nc EQ 0) THEN BEGIN
            nc = !d.n_colors-1
            dsp.bot = 0
            dsp.nc = nc
         ENDIF
         loadct, 36, ncolors=dsp.nc, bottom=dsp.bot, $
            file="/usr/local/npg/idl/color_tables/videen.tbl" 
         setuv = 1
      ENDIF 
d349 1
a349 1
   select0 =  ['1\Get Sino', '0\First Frame, All Planes', $
d351 3
d360 1
a360 1
   select5 = ['0\Color']
d368 2
a369 1
   name = cw_field(base2, title='File', value='', xsize=60)
d371 9
a379 2
   base2d = widget_base(base2, row=1)
   max = cw_field(base2d, title='Max', /noedit, value=0, xsize=10, ysize=1)
d396 1
d398 1
a398 1
          win      : 0L		$ ; draw window widget id
d401 6
a406 5
   dsp.init = 0
   dsp.zoom = 1
   dsp.bot = 0
   dsp.nc = 0
   dsp.set = 0
d410 3
a412 3
   uv = {wid:wid, img:img}
   uv.img.f = 1
   uv.img.p = 1
d414 1
@
