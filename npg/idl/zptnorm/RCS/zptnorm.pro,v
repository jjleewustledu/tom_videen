head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2002.10.04.14.27.35;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.01.18.17.19;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.16.19.49.56;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.16.18.23.46;	author tom;	state Exp;
branches;
next	;


desc
@@


1.4
log
@add today's date to printed plot
@
text
@;+
; NAME:
;	ZPTNORM
;
; PURPOSE:
;	Normalizes axially a 3D image using values of select points.
;
; CATEGORY:
;	Image processing.
;
; INPUTS:
; 	INFILE:		Image to normalize.
; 	PTFILE:		List of points [x,y,z]
;
; OUTPUT:
;	OUTFILE:	Normalized image.
;
; PROCEDURE:
;
; MODIFICATION HISTORY:
;	Sep 2002 - Tom Videen
;-

PRO ZPTNORM
@@IMAGE_UTILS.h

   on_error,2
   infile = getenv('INFILE')
   ptfile = getenv('PTFILE')
   outfile = getenv('OUTFILE')
   showpoints = getenv('SHOWPOINTS')
   rad = 1

   IF (infile EQ '') THEN BEGIN 
      message,'No input file specified'
      exit
   ENDIF ELSE IF (ptfile EQ '') THEN BEGIN 
      message,'No point list specified'
      exit
   ENDIF ELSE IF (outfile EQ '') THEN BEGIN 
      message,'No output file specified'
      exit
   ENDIF
   str1 = outfile
   l1 = rstrpos(str1,'.')
   IF (l1 GT 0) THEN strput,str1,'log',l1+1 $
   ELSE logfile = logfile+'.log'
   logfile = strcompress(str1, /remove_all)
   get_lun,log_lun
   openw,log_lun,logfile
   printf,log_lun,'Output image ',outfile

;  Points evaluated-in-infile file

   str1 = ptfile
   l1 = rstrpos(str1,'.')
   IF (l1 GT 0) THEN strput,str1,'val',l1+1 $
   ELSE str1 = str1+'.val'
   valfile = strcompress(str1, /remove_all)
   get_lun,val_lun
   openw,val_lun,valfile
   printf,val_lun,'Points ',ptfile,' evaluated in ',infile

;  Read original image

   img = {VIMAGE}
   img.fname = infile
   img.ff = 1
   img.lf = 1
   img.fp = 1
   img.lp = 300
   msg = ''
   print,'Original image ',infile
   printf,log_lun,'Original image ',infile
   stat =  getframe(img, msg)
   IF (stat NE 0) THEN BEGIN
      message, msg
      exit 
   ENDIF 
   idata = *img.data
   nx = img.dim[0]
   ny = img.dim[1]
   nz = img.dim[2]

;  Read points

   read, prompt='Voxel Radius? ',rad
   vol = (2*rad+1)^3

   openr, pt_lun, ptfile, ERROR=err, /GET_LUN
   IF (err NE 0) THEN BEGIN
      print,'Cannot open file '+ptfile
      exit
   ENDIF
   print,format='("Point list ",A,"  rad =",I2,"  vol =",I4," voxels")',ptfile,rad,vol
   printf,log_lun,format='("Point list ",A,"  rad =",I2,"  vol =",I4," voxels")',ptfile,rad,vol
   npt = 0L
   readf, pt_lun, str1
   readf, pt_lun, npt
   coord = intarr(3)
   ptlist = intarr(3,npt)
   FOR n=1,npt DO BEGIN
      readf, pt_lun, coord
      ptlist[*,n-1] = coord
   ENDFOR
   close, pt_lun
   free_lun, pt_lun

;  Compute ratio of ref/img

   val = fltarr(npt)
   FOR n=1,npt DO BEGIN
      xc = ptlist[0,n-1]
      yc = ptlist[1,n-1]
      zc = ptlist[2,n-1]
      subimg = idata[xc-rad:xc+rad, yc-rad:yc+rad, zc-rad:zc+rad]
      val[n-1] = total(subimg)/float(vol)
   ENDFOR
   meanval = mean(val)

;  Fit a quadratic curve to zc vs. val

   xc = ptlist[0,*]
   yc = ptlist[1,*]
   zc = ptlist[2,*]
   coef = poly_fit(zc,val,2,vfil)
   print,coef

   printf, val_lun, npt, 5
   fitval = fltarr(npt)
   FOR n=1,npt DO BEGIN
      z = zc[n-1]
      fitval[n-1] = poly(z,coef)
      printf,val_lun,xc[n-1],yc[n-1],zc[n-1],val[n-1],fitval[n-1]
   ENDFOR
   close, val_lun
   free_lun, val_lun

Newplot:
   heading = ptfile+' on '+infile
   set_plot,'x'
   plot, zc, val, charsize=1.5, psym=4, title=heading, xtitle='Plane', ytitle='Value'
   oplot,zc,fitval,linestyle=0
   ch = 'y'
   read,prompt='P=Print, Q=quit, Return=Continue? ',ch
   IF (ch eq 'Q' or ch eq 'q') THEN return $
   ELSE IF (ch eq 'P' or ch eq 'p') THEN begin
      printname = '/tmp/zptnorm.ps'
      set_plot,'ps'
      device,filename=printname,xsize=7,ysize=6,xoffset=0.8,yoffset=3,/inches
      plot, zc, val, charsize=1.5, psym=4, title=heading, xtitle='Plane', ytitle='Value'
      oplot,zc,fitval,linestyle=0
      today = strmid(systime(0),4,6)+strmid(systime(0),19)
      xyouts,0.1,0.0,today,/normal
      device,/close
      cmd = 'cat '+printname+' | lpr'
      spawn, cmd
      cmd = '/usr/bin/rm '+printname
      spawn, cmd
      goto, newplot
   ENDIF 

   IF (showpoints EQ 1) THEN BEGIN
      idata[xc,yc,zc]=32767
      goto,WRITE_IMAGE
   ENDIF

;  Multiply the fit scaler times the input image

   FOR z=0,nz-1 DO BEGIN
      scl = meanval/poly(z,coef)
      idata[*,*,z] = scl*idata[*,*,z]
      printf,log_lun,format='("pln",i4,"  Scl =",f7.4)',z, scl
   ENDFOR

;  Write normalized image

   print,'Output image ',outfile
   WRITE_IMAGE:
   *img.data = idata
   extra = strarr(5)
   extra[0] = 'program name    := zptnorm'
   extra[1] = 'program version := 1.1'
   extra[2] = 'program date    := 2002:09:13'
   extra[3] = 'input file      := '+infile
   IF (putinterfile(img, outfile, msg, EXTRA=extra) NE 0) THEN BEGIN
      message, msg
      exit
   ENDIF 
   print,msg
   close,log_lun
   free_lun,log_lun
END
@


1.3
log
@change name in ifh file
@
text
@d153 2
@


1.2
log
@*** empty log message ***
@
text
@d180 1
a180 1
   extra[0] = 'program name    := znorm'
@


1.1
log
@Initial revision
@
text
@d141 1
@
