#!/bin/csh
#	Module:	align_dynpet
#   Date:	Dec 2008
#   Author:	Tom Videen
#	Use:	Align all frames of a dynamic PET image (fdopa, nmb)
#	Notes:
#		sumimgframes requires the start time, which should be negative for 953b;
#		Since 953B images are already decay-corrected, align_dynpet calls
#			single_frames_953b which does not further correct (12/10/2008)

set USAGE = "Usage: align_dynpet pid tracer firstfrm lastfrm reffrm -b 8 -t 40"

if ($#argv < 5) then
	echo "Usage: align_dynpet pid tracer firstfrm lastfrm reffrm [-b 8] [-t 40] [-x v]"
	echo " i.e., align_dynpet p3000 fd 1 30 2"
	echo "   or, align_dynpet p3000 mb 1 44 2 -b 5 -t 100 -x v"
	exit 1
endif

set PID   = $1
set CMPD  = $2
set FRM1  = $3
set FRM2  = $4
set REFRM = $5

set FRAMES = ${FRM1}to$FRM2
set ROOT   = $PID$CMPD
set THRESH = 50
set BLUR   = 8
set EXT    = img
shift argv
shift argv
shift argv
shift argv
shift argv
top:
	if ($#argv > 0) then
		switch ("$argv[1]")
		case -b:
			shift argv
			if ($#argv > 0) then
				set BLUR = $argv[1]
				shift argv
			else
				echo "ERROR [align_dynpet]: missing number following -b"
				exit 1
			endif
			goto top
		case -t:
			shift argv
			if ($#argv > 0) then
				set THRESH = $argv[1]
				shift argv
			else
				echo "ERROR [align_dynpet]:
				echo $USAGE
				exit 1
			endif
			goto top
		case -x:
			shift argv
			if ($#argv > 0) then
				set EXT = $argv[1]
				shift argv
			else
				echo "ERROR [align_dynpet]: missing number following -x"
				exit 1
			endif
			goto top
		case -?*:
			echo "ERROR [align_dynpet]: illegal parameter $argv[1]"
			echo $USAGE
			exit 1
		default:
			echo "ERROR [align_dynpet]: extra parameter $argv[1]"
			echo $USAGE
			exit 1
		endsw
	endif
endif

set BRAIN  = ${ROOT}_mask.$EXT
set ORG    = ../${ROOT}1.$EXT
set RORG   = r${ROOT}1.$EXT
set SUM    = ${ROOT}1_sum20.$EXT
set SUMG   = ${ROOT}1_sum20_g3.$EXT
echo $BLUR $THRESH 

# Check for existence of first, last and reference frames
# -------------------------------------------------------
if (! -e $ORG) then
	echo "ERROR [align_dynpet]: missing $ORG"
	echo "align_dynpet should be called from a subdirectory, Align_dynpet"
	exit 1
endif
imghdr $ORG $FRM1 > & ! align.tmp
set CHK1 = `head -1 align.tmp | cut -c1-5`
imghdr $ORG $FRM2 > & ! align.tmp
set CHK2 = `head -1 align.tmp | cut -c1-5`
imghdr $ORG $REFRM > & ! align.tmp
set CHK3 = `head -1 align.tmp | cut -c1-5`
/usr/bin/rm align.tmp
if ($CHK1 == ERROR) then
	echo "ERROR [align_dynpet]: No frame $FRM1 in $ORG"
	exit 1
else if ($CHK2 == ERROR) then
	echo "ERROR [align_dynpet]: No frame $FRM2 in $ORG"
	exit 1
else if ($CHK3 == ERROR) then
	echo "ERROR [align_dynpet]: No frame $REFRM in $ORG"
	exit 1
endif

# Create alignment mask of brain
# -----------------------------
sumimgframes $ORG $SUM $FRM1 20 -1
	if ($status != 0) exit 1
gauss $SUM $SUMG 0.3
	if ($status != 0) exit 1
maskpct $SUMG tmp.$EXT 30
	if ($status != 0) exit 1
maskimg $SUMG tmp.$EXT $BRAIN 1
	if ($status != 0) exit 1
# Mask first and last 2 slices
# -----------------------------
maskslc $BRAIN $BRAIN 1to2
set FNUM = `imghdr $BRAIN | grep slices | cut -f1 -d" "`
set FN1 = `echo $FNUM - 1 | bc`
maskslc $BRAIN $BRAIN ${FN1}to${FNUM}
rm ${SUM}*
rm ${SUMG}*
rm tmp.$EXT
echo "-----------------------------------------------------"
echo "View $BRAIN with vidi and remove the nose and any other"
echo "structures or slices which might skew the alignment."
echo
echo "Save the edited image and then press return to continue."
set data = `line`

# Handle format conversion if mask was edited
if (-e $BRAIN:r.ifh) then
	if2analyze $BRAIN:r
	if ($status != 0) exit 1
	analyze2img $BRAIN:r $BRAIN:r.$EXT
	if ($status != 0) exit 1
	rm $BRAIN:r.ifh
	rm $BRAIN:r.hdr
endif

single_frames_953b $ORG $ROOT i $FRM1 $FRM2
	if ($status != 0) exit 1
align_dynamic $ROOT i $BRAIN ${REFRM}to${FRM2} $THRESH $BLUR scale_953
	if ($status != 0) exit 1
reslicedyn $ROOT .i $FRAMES $REFRM $ORG
	if ($status != 0) exit 1
merge_dynframes r$ROOT $FRAMES .i $RORG
	if ($status != 0) exit 1
remove_dynfiles $ROOT .i $FRAMES
remove_dynfiles r$ROOT .i $FRAMES
#fitlog2plt ${ROOT}_m20_b${BLUR}_p1_x3.log $REFRM

# Create composite images of early and late frames
# ------------------------------------------------
set N1 = `echo $FRM1 + 7 | bc`
set N2 = `echo $FRM2 - 5 | bc`
set time1 = `imghdr $ORG $FRM1 | grep Start | cut -f2 -d= | cut -f1 -ds`
set time2 = `imghdr $ORG $N2 | grep Start | cut -f2 -d= | cut -f1 -ds`
echo "sum ${FRM1} to ${N1} beginning at $time1"
echo "sum ${N2} to ${FRM2} beginning at $time2"
sumimgframes $ORG  orig_f${FRM1}to${N1}.$EXT  $FRM1 $N1 -1
sumimgframes $ORG  orig_f${N2}to${FRM2}.$EXT  $N2 $FRM2 -1
sumimgframes $RORG align_f${FRM1}to${N1}.$EXT $FRM1 $N1 -1
sumimgframes $RORG align_f${N2}to${FRM2}.$EXT $N2 $FRM2 -1

echo "-----------------------------------------------------"
echo "1) plot_aligndyn ${ROOT}_alignmsk_b${BLUR}_t${THRESH}_p1_x3.log"
echo 
echo "2) Compare early and late frames of original and aligned (vidi)"
echo "	  orig_f${FRM1}to${N1}.$EXT"
echo "	  orig_f${N2}to${FRM2}.$EXT"
echo "	  align_f${FRM1}to${N1}.$EXT"
echo "	  align_f${N2}to${FRM2}.$EXT"
echo	
echo "3) View all frames for one plane (vidi)"
echo
echo "4) Move the aligned dynamic to the parent directory"
echo "	  mv $RORG* .."
echo "-----------------------------------------------------"

