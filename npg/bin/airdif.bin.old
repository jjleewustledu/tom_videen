 #Revision 2.3  2009/01/07  21:45:56  tom
 * change single print output
 *
 * Revision 2.2  2008/10/01  18:03:32  tom
 * rebuild using new libraries
 *
 * Revision 2.0  2004/02/13  15:37:34  tom
 * Feb 2004
 *
 * Revision 1.8  1999/12/16  17:34:30  tom
 * new libs
 *
 * Revision 1.7  1999/12/14  17:21:22  tom
 * global air.h
 *
 * Revision 1.6  1999/12/14  17:08:48  tom
 * lint clean
 *
 * Revision 1.5  1999/03/16  17:12:45  tom
 * sync version
 *
 * Revision 1.3  1999/03/16  17:11:34  tom
 * add Angle and reduce number of decimal places
 *
 * Revision 1.2  1996/08/22  22:11:02  tom
 * format changes
 *
 * Revision 1.1  1996/08/22  21:52:42  tom
 * Initial revision
 * */
/* ===============================================================================
 *  Module:         airdif.c
 *  Date:           Aug 1996
 *  Author:         Tom Videen
 *	Description:	Write difference between 2 air file matrices.
 * ===============================================================================
 */
#ifndef lint
static char     rcsid[] = "$Header: /home/npggw/tom/src/airdif/RCS/airdif.c,v 2.3 2009/01/07 21:45:56 tom Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <image.h>
#include <libimage.h>
#include <libnrimg.h>
#include <nrutil.h>
#include <matrixlib.h>
#include <air.h>				 /* struct air */

#define RADTODEG 180./M_PI

/* Function to update distance and indices to a point */
#define newdist(new,old,indx,i,j,k)	{old=new; indx[1]=k; indx[2]=j; indx[3]=i;}

int             read_air ();
float           ptdist ();
float          *rscale;				 /* reslice (PET) image mm/pixel */

int main (argc, argv)
	int             argc;
	char          **argv;
{
	ImageFile      *file;
	Index           indx;
	struct air2     air;
	char           *airfile1, *airfile2;
	char           *maskfile;
	float         **mat1, **mat2, **dmat;
	int             i, j, k;
	int             frm;			 /* frame number to process */

	float           dist, sumdist;
	float           maxdist, mindist;
	float          *dif;
	float           xsum, ysum, zsum;
	float          *pt0, *pt1, *pt2, *pt3;

	unsigned long   nx, ny, nz;		 /* dimensions of img */
	int             sumpts;
	int             sumx, sumy, sumz;
	int            *maxid, *minid;		 /* points in mask with max & min dist */
	int            *sup, *inf, *lft, *rgt, *ant, *post;	/* points in mask */
	float           supdist, infdist, lftdist, rgtdist, antdist, postdist;
	float        ***img;
	double          dx, dy, dz;
	float           dxang, dyang, dzang;
	char            Usage[] = "Usage: airdif a.air b.air [maskvol]\n";

/* Initializations */

	if (argc < 3 || argc > 4) {
		(void) fprintf (stderr, Usage);
		return (1);
	}
	airfile1 = argv[1];
	airfile2 = argv[2];
	mat1 = matrix (1, 4, 1, 4);
	mat2 = matrix (1, 4, 1, 4);
	dmat = matrix (1, 4, 1, 4);

/* Read AIR matrices (transform pixels-to-pixels)*/

	if (read_air (airfile1, &air, mat1) != 0) {
		(void) fprintf (stderr, "ERROR: cannot read %s\n", airfile1);
		return (1);
	}
	if (read_air (airfile2, &air, mat2) != 0) {
		(void) fprintf (stderr, "ERROR: cannot read %s\n", airfile2);
		return (1);
	}
	matrix_sub (mat1, mat2, dmat, 4, 4, 4);
	dmat[4][4] = 1;
	(void) fprintf (stdout, "%s - %s\n", airfile1, airfile2);
	matrix_print (dmat, 4, 4);

/*	Read the coordinates of all points-in-the-mask */

	if (argc == 4) {
		maskfile = argv[3];

		frm = 1;
		indx.frm = frm;
		indx.pln = 1;
		indx.gate = 1;
		indx.data = 0;
		indx.bed = 0;
		file = make_imgfile (maskfile);
		if (open_imgfile (file) == ERROR) {
			(void) fprintf (stderr, "ERROR [gauss]: Could not open %s\n", maskfile);
			return (ERROR);
		}
		if (get_mh (file) == ERROR) {
			(void) fprintf (stderr, "ERROR [gauss]: Could not get MainHeader from %s\n", maskfile);
			return (ERROR);
		}
		if (existimgfrm (file, &indx) == ERROR) {
			if (frm == 1) {
				indx.frm = 2;
				if (existimgfrm (file, &indx) == ERROR) {
					(void) fprintf (stderr, "ERROR [gauss]: cannot find %s frame 1 or 2\n", maskfile);
					return (ERROR);
				}
			} else {
				(void) fprintf (stderr, "ERROR [gauss]: cannot find %s frame %d\n",
					 maskfile, frm);
				return (ERROR);
			}
		}
		if (get_sh (file, &indx) == ERROR) {
			(void) fprintf (stderr, "ERROR [gauss]: Could not read file subheader in %s\n", maskfile);
			return (ERROR);
		}
		if ((img = readtensor (file, &indx)) == NULL)
			return (ERROR);

/*
 *	Compute mean distance between points-in-the-mask after
 *	misaligned by transformation with the difference matrix.
 *	Determine points of mininim and maximum distances and
 *	points at ant, post, sup, inf, left, and right extremes of mask image.
 */

		nx = (unsigned long) file->sh->dim1;
		ny = (unsigned long) file->sh->dim2;
		nz = (unsigned long) file->sh->dim3;

		rscale = vector (1, 3);
		rscale[1] = air.res.xsize;
		rscale[2] = air.res.ysize;
		rscale[3] = air.res.zsize;

		maxid = ivector (1, 3);
		minid = ivector (1, 3);
		sup = ivector (1, 3);
		inf = ivector (1, 3);
		lft = ivector (1, 3);
		rgt = ivector (1, 3);
		ant = ivector (1, 3);
		post = ivector (1, 3);
		pt0 = vector (1, 4);
		pt1 = vector (1, 4);
		pt2 = vector (1, 4);
		pt3 = vector (1, 4);
		dif = vector (1, 3);
		for (i = 1; i < 4; i++)
			pt0[i] = 0.0;
		pt0[4] = 1.0;
		pt1[4] = 1.0;

		/* Our standard format has origin at left, anterior, superior */

		sup[3] = 1000;
		ant[2] = 1000;
		lft[1] = 1000;
		inf[3] = 0;
		post[2] = 0;
		rgt[1] = 0;
		sumpts = 0;
		sumx = 0;
		sumy = 0;
		sumz = 0;
		sumdist = 0.0;
		maxdist = 0.0;
		mindist = 1000.0;
		supdist = 0.0;
		infdist = 0.0;
		lftdist = 0.0;
		rgtdist = 0.0;
		antdist = 0.0;
		postdist = 0.0;
		xsum = 0.0;
		ysum = 0.0;
		zsum = 0.0;

		for (i = 1; i <= nz; i++) {
			for (j = 1; j <= ny; j++) {
				for (k = 1; k <= nx; k++) {
					if (img[i][j][k] > 0) {
						sumpts++;
						sumx += k;
						sumy += j;
						sumz += i;
						pt0[1] = (float) k;
						pt0[2] = (float) j;
						pt0[3] = (float) i;
						vector_mult (mat1, pt0, pt1, 4, 4, 1);
						vector_mult (mat2, pt0, pt2, 4, 4, 1);
						dist = ptdist (pt1, pt2, dif);
						sumdist += dist;
						xsum += dif[1];
						ysum += dif[2];
						zsum += dif[3];
						if (dist > maxdist)
							newdist (dist, maxdist, maxid, i, j, k);
						if (dist < mindist)
							newdist (dist, mindist, minid, i, j, k);
						if (k > rgt[1])
							newdist (dist, rgtdist, rgt, i, j, k);
						if (k < lft[1])
							newdist (dist, lftdist, lft, i, j, k);
						if (j > post[2])
							newdist (dist, postdist, post, i, j, k);
						if (j < ant[2])
							newdist (dist, antdist, ant, i, j, k);
						if (i > inf[3])
							newdist (dist, infdist, inf, i, j, k);
						if (i < sup[3])
							newdist (dist, supdist, sup, i, j, k);
					}
				}
			}
		}
		(void) fprintf (stdout, "Difference of %d pixels within mask: %s\n\n", sumpts, maskfile);
		(void) fprintf (stdout, "  Location           Distance      X      Y      Z\n");
		(void) fprintf (stdout, "-------------        --------     ---    ---    ---\n");

		(void) fprintf (stdout, "Total           = %9.3f mm  %6.3f,%6.3f,%6.3f mm\n", sumdist,
		       xsum / ((float) sumpts), ysum / ((float) sumpts), zsum / ((float) sumpts));

		(void) fprintf (stdout, "Mean           = %9.3f mm  %6.3f,%6.3f,%6.3f mm\n", sumdist / ((float) sumpts),
		       xsum / ((float) sumpts), ysum / ((float) sumpts), zsum / ((float) sumpts));
		(void) fprintf (stdout, "Maximum        = %9.3f    at %4d,%6d,%6d\n", maxdist, maxid[1], maxid[2], maxid[3]);
		(void) fprintf (stdout, "Minimum        = %9.3f    at %4d,%6d,%6d\n\n", mindist, minid[1], minid[2], minid[3]);
		(void) fprintf (stdout, "Left edge      = %9.3f    at %4d,%6d,%6d\n", lftdist, lft[1], lft[2], lft[3]);
		(void) fprintf (stdout, "Right edge     = %9.3f    at %4d,%6d,%6d\n", rgtdist, rgt[1], rgt[2], rgt[3]);
		(void) fprintf (stdout, "Anterior edge  = %9.3f    at %4d,%6d,%6d\n", antdist, ant[1], ant[2], ant[3]);
		(void) fprintf (stdout, "Posterior edge = %9.3f    at %4d,%6d,%6d\n", postdist, post[1], post[2], post[3]);
		(void) fprintf (stdout, "Superior edge  = %9.3f    at %4d,%6d,%6d\n", supdist, sup[1], sup[2], sup[3]);
		(void) fprintf (stdout, "Inferior edge  = %9.3f    at %4d,%6d,%6d\n\n", infdist, inf[1], inf[2], inf[3]);

		(void) fprintf (stdout, "Coordinate 1,1,1 is left, anterior, superior\n\n");

/*
 *	Calculate total error in each parameter.
 *		pt1 is center-of-volume of mask
 */

		pt0[1] = (float) sumx / (float) sumpts;
		pt0[2] = (float) sumy / (float) sumpts;
		pt0[3] = (float) sumz / (float) sumpts;
		pt0[4] = 1.0;
		(void) fprintf (stdout, "Mismatch at center-of-mask-volume: ");
		(void) fprintf (stdout, "(%5.1f,%5.1f,%5.1f)\n", pt0[1], pt0[2], pt0[3]);
		vector_mult (mat1, pt0, pt1, 4, 4, 1);
		vector_mult (mat2, pt0, pt2, 4, 4, 1);
		dist = ptdist (pt1, pt2, dif);
		(void) fprintf (stdout, "Vector dist = %.2f mm\n", dist);
		dx = (pt2[1] - pt1[1]) * rscale[1];
		dy = (pt2[2] - pt1[2]) * rscale[2];
		dz = (pt2[3] - pt1[3]) * rscale[3];
		(void) fprintf (stdout, "X    = %5.1f mm\n", dx);
		(void) fprintf (stdout, "Y    = %5.1f mm\n", dy);
		(void) fprintf (stdout, "Z    = %5.1f mm\n", dz);

/*	Angle estimated by comparing location of a point 20 mm away */

		vector_mult (dmat, pt0, pt1, 4, 4, 1);
		pt2[1] = pt0[1];
		pt2[2] = pt0[2]+20.;
		pt2[3] = pt0[3];
		pt2[4] = 1.;
		vector_mult (dmat, pt2, pt3, 4, 4, 1);
		dz = (pt3[3] - pt1[3]) * rscale[3];
		if (dz != 0) 
			dxang = RADTODEG * atan (dz / 20.);
		else
			dxang = 0.;

		pt2[1] = pt0[1]+20.;
		pt2[2] = pt0[2];
		pt2[3] = pt0[3];
		vector_mult (dmat, pt2, pt3, 4, 4, 1);
		dz = (pt3[3] - pt1[3]) * rscale[3];
		if (dz != 0.) 
			dyang = RADTODEG * atan (dz / 20.);
		else
			dyang = 0.;

		pt2[1] = pt0[1]+20.;
		pt2[2] = pt0[2];
		pt2[3] = pt0[3];
		vector_mult (dmat, pt2, pt3, 4, 4, 1);
		dx = (pt3[1] - pt1[1]) * rscale[3];
		if (dx != 0.) 
			dzang = RADTODEG * atan (dx / 20.);
		else
			dzang = 0.;

		(void) fprintf (stdout, "Xang = %5.1f deg\n", dxang);
		(void) fprintf (stdout, "Yang = %5.1f deg\n", dyang);
		(void) fprintf (stdout, "Zang = %5.1f deg\n\n", dzang);

		free_vector (pt0, 1, 4);
		free_vector (pt1, 1, 4);
		free_vector (pt2, 1, 4);
		free_vector (pt3, 1, 4);
		free_vector (rscale, 1, 3);
		free_ivector (maxid, 1, 3);
		free_ivector (minid, 1, 3);
		free_ivector (sup, 1, 3);
		free_ivector (inf, 1, 3);
		free_ivector (lft, 1, 3);
		free_ivector (rgt, 1, 3);
		free_ivector (ant, 1, 3);
		free_ivector (post, 1, 3);
		free_f3tensor (img, 1, nz, 1, ny, 1, nx);
		free_imgfile (file);
	}
	free_matrix (mat1, 1, 4, 1, 4);
	free_matrix (mat2, 1, 4, 1, 4);
	free_matrix (dmat, 1, 4, 1, 4);
	return (0);
}

